
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012860  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020bc  08012920  08012920  00022920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080149dc  080149dc  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  080149dc  080149dc  000249dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080149e4  080149e4  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080149e4  080149e4  000249e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080149ec  080149ec  000249ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  080149f0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200006d8  080150c8  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f3c  080150c8  00030f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f9e  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae3  00000000  00000000  0004a6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0004e1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000130f  00000000  00000000  0004fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d22  00000000  00000000  00050d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f24f  00000000  00000000  00072a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caf67  00000000  00000000  00091ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000072f0  00000000  00000000  0015cc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00163f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08012904 	.word	0x08012904

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08012904 	.word	0x08012904

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	08014478 	.word	0x08014478
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b08b      	sub	sp, #44	; 0x2c
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fc14 	bl	8003de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 fa94 	bl	8002ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fd26 	bl	800300c <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fae6 	bl	8002b90 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fbc6 	bl	8002d54 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fb86 	bl	8002cd8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fc00 	bl	8002dd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fc4c 	bl	8002e6c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fc98 	bl	8002f08 <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fce4 	bl	8002fa4 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  // Kod testowy do usunięcia
  char test[] = "32,35678" ;
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	4a96      	ldr	r2, [pc, #600]	; (8002838 <main+0x290>)
 80025e0:	ca03      	ldmia	r2!, {r0, r1}
 80025e2:	c303      	stmia	r3!, {r0, r1}
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	701a      	strb	r2, [r3, #0]
  if ( my_tracker_api_is_cmd ( test ) )
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	0018      	movs	r0, r3
 80025ec:	f008 f888 	bl	800a700 <my_tracker_api_is_cmd>
 80025f0:	1e03      	subs	r3, r0, #0
 80025f2:	d00e      	beq.n	8002612 <main+0x6a>
  {
	  sys_cmd_code = my_tracker_api_get_cmd_code ( test ) ;
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	0018      	movs	r0, r3
 80025f8:	f008 f8ec 	bl	800a7d4 <my_tracker_api_get_cmd_code>
 80025fc:	0003      	movs	r3, r0
 80025fe:	001a      	movs	r2, r3
 8002600:	4b8e      	ldr	r3, [pc, #568]	; (800283c <main+0x294>)
 8002602:	701a      	strb	r2, [r3, #0]
	  sys_cmd_value = my_tracker_api_get_cmd_value ( test ) ;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	0018      	movs	r0, r3
 8002608:	f008 f917 	bl	800a83a <my_tracker_api_get_cmd_value>
 800260c:	0002      	movs	r2, r0
 800260e:	4b8c      	ldr	r3, [pc, #560]	; (8002840 <main+0x298>)
 8002610:	601a      	str	r2, [r3, #0]
  }



  send_debug_logs ( hello ) ;
 8002612:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <main+0x29c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0018      	movs	r0, r3
 8002618:	f000 fe04 	bl	8003224 <send_debug_logs>

  my_sys_init () ;
 800261c:	f000 fe32 	bl	8003284 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u\0" , sys_mode ) ;
 8002620:	4b89      	ldr	r3, [pc, #548]	; (8002848 <main+0x2a0>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	001a      	movs	r2, r3
 8002626:	4989      	ldr	r1, [pc, #548]	; (800284c <main+0x2a4>)
 8002628:	4b89      	ldr	r3, [pc, #548]	; (8002850 <main+0x2a8>)
 800262a:	0018      	movs	r0, r3
 800262c:	f009 fbca 	bl	800bdc4 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002630:	4b87      	ldr	r3, [pc, #540]	; (8002850 <main+0x2a8>)
 8002632:	0018      	movs	r0, r3
 8002634:	f000 fdf6 	bl	8003224 <send_debug_logs>

  my_tim_init () ;
 8002638:	f000 ffbc 	bl	80035b4 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 800263c:	2002      	movs	r0, #2
 800263e:	f000 fea9 	bl	8003394 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 8002642:	f000 fed9 	bl	80033f8 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002646:	4b83      	ldr	r3, [pc, #524]	; (8002854 <main+0x2ac>)
 8002648:	0018      	movs	r0, r3
 800264a:	f006 ffc3 	bl	80095d4 <my_gnss_acq_coordinates>
 800264e:	0003      	movs	r3, r0
 8002650:	001a      	movs	r2, r3
 8002652:	4b81      	ldr	r3, [pc, #516]	; (8002858 <main+0x2b0>)
 8002654:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002656:	f000 fee9 	bl	800342c <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800265a:	4b80      	ldr	r3, [pc, #512]	; (800285c <main+0x2b4>)
 800265c:	0018      	movs	r0, r3
 800265e:	f007 f93f 	bl	80098e0 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu\0" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002662:	4b7c      	ldr	r3, [pc, #496]	; (8002854 <main+0x2ac>)
 8002664:	7c1b      	ldrb	r3, [r3, #16]
 8002666:	001e      	movs	r6, r3
 8002668:	4b7a      	ldr	r3, [pc, #488]	; (8002854 <main+0x2ac>)
 800266a:	689c      	ldr	r4, [r3, #8]
 800266c:	68dd      	ldr	r5, [r3, #12]
 800266e:	4b79      	ldr	r3, [pc, #484]	; (8002854 <main+0x2ac>)
 8002670:	8a5b      	ldrh	r3, [r3, #18]
 8002672:	4698      	mov	r8, r3
 8002674:	4b77      	ldr	r3, [pc, #476]	; (8002854 <main+0x2ac>)
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	213c      	movs	r1, #60	; 0x3c
 800267a:	0018      	movs	r0, r3
 800267c:	f7fd fd5e 	bl	800013c <__udivsi3>
 8002680:	0003      	movs	r3, r0
 8002682:	4a77      	ldr	r2, [pc, #476]	; (8002860 <main+0x2b8>)
 8002684:	4977      	ldr	r1, [pc, #476]	; (8002864 <main+0x2bc>)
 8002686:	4872      	ldr	r0, [pc, #456]	; (8002850 <main+0x2a8>)
 8002688:	9305      	str	r3, [sp, #20]
 800268a:	4643      	mov	r3, r8
 800268c:	9304      	str	r3, [sp, #16]
 800268e:	9402      	str	r4, [sp, #8]
 8002690:	9503      	str	r5, [sp, #12]
 8002692:	9601      	str	r6, [sp, #4]
 8002694:	4b71      	ldr	r3, [pc, #452]	; (800285c <main+0x2b4>)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	23be      	movs	r3, #190	; 0xbe
 800269a:	f009 fb93 	bl	800bdc4 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 800269e:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <main+0x2a8>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fdbf 	bl	8003224 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <main+0x2b0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	4053      	eors	r3, r2
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d027      	beq.n	8002704 <main+0x15c>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80026b4:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <main+0x2c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f007 f953 	bl	8009964 <my_rtc_set_alarm>
 80026be:	1e03      	subs	r3, r0, #0
 80026c0:	d020      	beq.n	8002704 <main+0x15c>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode\0" , __FILE__ , __LINE__ ) ;
 80026c2:	4a67      	ldr	r2, [pc, #412]	; (8002860 <main+0x2b8>)
 80026c4:	4969      	ldr	r1, [pc, #420]	; (800286c <main+0x2c4>)
 80026c6:	4862      	ldr	r0, [pc, #392]	; (8002850 <main+0x2a8>)
 80026c8:	23c4      	movs	r3, #196	; 0xc4
 80026ca:	f009 fb7b 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026ce:	4b60      	ldr	r3, [pc, #384]	; (8002850 <main+0x2a8>)
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fda7 	bl	8003224 <send_debug_logs>
		  my_tim_stop () ;
 80026d6:	f000 ff89 	bl	80035ec <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026da:	4b65      	ldr	r3, [pc, #404]	; (8002870 <main+0x2c8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026e0:	f002 f846 	bl	8004770 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026e4:	4b5d      	ldr	r3, [pc, #372]	; (800285c <main+0x2b4>)
 80026e6:	0018      	movs	r0, r3
 80026e8:	f007 f8fa 	bl	80098e0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026ec:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <main+0x2b8>)
 80026ee:	4961      	ldr	r1, [pc, #388]	; (8002874 <main+0x2cc>)
 80026f0:	4857      	ldr	r0, [pc, #348]	; (8002850 <main+0x2a8>)
 80026f2:	4b5a      	ldr	r3, [pc, #360]	; (800285c <main+0x2b4>)
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	23ca      	movs	r3, #202	; 0xca
 80026f8:	f009 fb64 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026fc:	4b54      	ldr	r3, [pc, #336]	; (8002850 <main+0x2a8>)
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fd90 	bl	8003224 <send_debug_logs>
	  }
  }

  if ( !my_astro_init () )
 8002704:	f006 feb4 	bl	8009470 <my_astro_init>
 8002708:	0003      	movs	r3, r0
 800270a:	001a      	movs	r2, r3
 800270c:	2301      	movs	r3, #1
 800270e:	4053      	eors	r3, r2
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01e      	beq.n	8002754 <main+0x1ac>
  {
	  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <main+0x2b4>)
 8002718:	0018      	movs	r0, r3
 800271a:	f007 f8e1 	bl	80098e0 <my_rtc_get_dt_s>
	  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800271e:	4a50      	ldr	r2, [pc, #320]	; (8002860 <main+0x2b8>)
 8002720:	4955      	ldr	r1, [pc, #340]	; (8002878 <main+0x2d0>)
 8002722:	484b      	ldr	r0, [pc, #300]	; (8002850 <main+0x2a8>)
 8002724:	4b4d      	ldr	r3, [pc, #308]	; (800285c <main+0x2b4>)
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	23d2      	movs	r3, #210	; 0xd2
 800272a:	f009 fb4b 	bl	800bdc4 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <main+0x2a8>)
 8002730:	0018      	movs	r0, r3
 8002732:	f000 fd77 	bl	8003224 <send_debug_logs>
	  HAL_NVIC_SystemReset () ;
 8002736:	f001 fd12 	bl	800415e <HAL_NVIC_SystemReset>
 800273a:	e0bb      	b.n	80028b4 <main+0x30c>
  }
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin\0" , __FILE__ , __LINE__ ) ;
 800273c:	4a48      	ldr	r2, [pc, #288]	; (8002860 <main+0x2b8>)
 800273e:	494f      	ldr	r1, [pc, #316]	; (800287c <main+0x2d4>)
 8002740:	4843      	ldr	r0, [pc, #268]	; (8002850 <main+0x2a8>)
 8002742:	23da      	movs	r3, #218	; 0xda
 8002744:	f009 fb3e 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <main+0x2a8>)
 800274a:	0018      	movs	r0, r3
 800274c:	f000 fd6a 	bl	8003224 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002750:	f006 feee 	bl	8009530 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002754:	f000 ff1c 	bl	8003590 <my_astro_evt_pin>
 8002758:	1e03      	subs	r3, r0, #0
 800275a:	d1ef      	bne.n	800273c <main+0x194>
	  }
	  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s\0" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <main+0x2d8>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	4698      	mov	r8, r3
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <main+0x2ac>)
 8002764:	689c      	ldr	r4, [r3, #8]
 8002766:	68dd      	ldr	r5, [r3, #12]
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <main+0x2ac>)
 800276a:	8a5b      	ldrh	r3, [r3, #18]
 800276c:	001e      	movs	r6, r3
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <main+0x2ac>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	213c      	movs	r1, #60	; 0x3c
 8002774:	0018      	movs	r0, r3
 8002776:	f7fd fce1 	bl	800013c <__udivsi3>
 800277a:	0003      	movs	r3, r0
 800277c:	001a      	movs	r2, r3
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <main+0x2dc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4941      	ldr	r1, [pc, #260]	; (8002888 <main+0x2e0>)
 8002784:	4841      	ldr	r0, [pc, #260]	; (800288c <main+0x2e4>)
 8002786:	9304      	str	r3, [sp, #16]
 8002788:	9203      	str	r2, [sp, #12]
 800278a:	9602      	str	r6, [sp, #8]
 800278c:	9400      	str	r4, [sp, #0]
 800278e:	9501      	str	r5, [sp, #4]
 8002790:	4642      	mov	r2, r8
 8002792:	f009 fb17 	bl	800bdc4 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s\0" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <main+0x2b8>)
 8002798:	493d      	ldr	r1, [pc, #244]	; (8002890 <main+0x2e8>)
 800279a:	482d      	ldr	r0, [pc, #180]	; (8002850 <main+0x2a8>)
 800279c:	4b3b      	ldr	r3, [pc, #236]	; (800288c <main+0x2e4>)
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	23df      	movs	r3, #223	; 0xdf
 80027a2:	f009 fb0f 	bl	800bdc4 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80027a6:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <main+0x2a8>)
 80027a8:	0018      	movs	r0, r3
 80027aa:	f000 fd3b 	bl	8003224 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <main+0x2ac>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <main+0x2ac>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0019      	movs	r1, r3
 80027b8:	0010      	movs	r0, r2
 80027ba:	f006 fefb 	bl	80095b4 <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80027be:	4b30      	ldr	r3, [pc, #192]	; (8002880 <main+0x2d8>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	b291      	uxth	r1, r2
 80027c6:	4a2e      	ldr	r2, [pc, #184]	; (8002880 <main+0x2d8>)
 80027c8:	8011      	strh	r1, [r2, #0]
 80027ca:	4a30      	ldr	r2, [pc, #192]	; (800288c <main+0x2e4>)
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f006 fe86 	bl	80094e0 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027d4:	4b24      	ldr	r3, [pc, #144]	; (8002868 <main+0x2c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0018      	movs	r0, r3
 80027da:	f007 f8c3 	bl	8009964 <my_rtc_set_alarm>
 80027de:	1e03      	subs	r3, r0, #0
 80027e0:	d068      	beq.n	80028b4 <main+0x30c>
	  {
		  sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE\0" , __FILE__ , __LINE__ ) ;
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <main+0x2b8>)
 80027e4:	492b      	ldr	r1, [pc, #172]	; (8002894 <main+0x2ec>)
 80027e6:	481a      	ldr	r0, [pc, #104]	; (8002850 <main+0x2a8>)
 80027e8:	23e5      	movs	r3, #229	; 0xe5
 80027ea:	f009 faeb 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027ee:	4b18      	ldr	r3, [pc, #96]	; (8002850 <main+0x2a8>)
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 fd17 	bl	8003224 <send_debug_logs>
		  my_tim_stop () ;
 80027f6:	f000 fef9 	bl	80035ec <my_tim_stop>
		  HAL_SuspendTick () ;
 80027fa:	f001 fb9b 	bl	8003f34 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 80027fe:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <main+0x2c8>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	01db      	lsls	r3, r3, #7
 8002808:	2102      	movs	r1, #2
 800280a:	0018      	movs	r0, r3
 800280c:	f001 ff78 	bl	8004700 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 8002810:	f001 fb9e 	bl	8003f50 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <main+0x2b4>)
 8002816:	0018      	movs	r0, r3
 8002818:	f007 f862 	bl	80098e0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s, Wake-up\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800281c:	4a10      	ldr	r2, [pc, #64]	; (8002860 <main+0x2b8>)
 800281e:	491e      	ldr	r1, [pc, #120]	; (8002898 <main+0x2f0>)
 8002820:	480b      	ldr	r0, [pc, #44]	; (8002850 <main+0x2a8>)
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <main+0x2b4>)
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	23ed      	movs	r3, #237	; 0xed
 8002828:	f009 facc 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <main+0x2a8>)
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fcf8 	bl	8003224 <send_debug_logs>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 8002834:	e03e      	b.n	80028b4 <main+0x30c>
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	08012b08 	.word	0x08012b08
 800283c:	20000a23 	.word	0x20000a23
 8002840:	20000a24 	.word	0x20000a24
 8002844:	20000000 	.word	0x20000000
 8002848:	20000a22 	.word	0x20000a22
 800284c:	0801294c 	.word	0x0801294c
 8002850:	20000b08 	.word	0x20000b08
 8002854:	20000ae0 	.word	0x20000ae0
 8002858:	20000af9 	.word	0x20000af9
 800285c:	20000a28 	.word	0x20000a28
 8002860:	08012960 	.word	0x08012960
 8002864:	08012974 	.word	0x08012974
 8002868:	20000008 	.word	0x20000008
 800286c:	080129b4 	.word	0x080129b4
 8002870:	20000af8 	.word	0x20000af8
 8002874:	080129d4 	.word	0x080129d4
 8002878:	080129e0 	.word	0x080129e0
 800287c:	08012a00 	.word	0x08012a00
 8002880:	20000a3c 	.word	0x20000a3c
 8002884:	20000004 	.word	0x20000004
 8002888:	08012a18 	.word	0x08012a18
 800288c:	20000a40 	.word	0x20000a40
 8002890:	08012a2c 	.word	0x08012a2c
 8002894:	08012a40 	.word	0x08012a40
 8002898:	08012a74 	.word	0x08012a74
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin\0" , __FILE__ , __LINE__ ) ;
 800289c:	4a7e      	ldr	r2, [pc, #504]	; (8002a98 <main+0x4f0>)
 800289e:	497f      	ldr	r1, [pc, #508]	; (8002a9c <main+0x4f4>)
 80028a0:	487f      	ldr	r0, [pc, #508]	; (8002aa0 <main+0x4f8>)
 80028a2:	23fa      	movs	r3, #250	; 0xfa
 80028a4:	f009 fa8e 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80028a8:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <main+0x4f8>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 fcba 	bl	8003224 <send_debug_logs>
		  my_astro_handle_evt () ;
 80028b0:	f006 fe3e 	bl	8009530 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 80028b4:	f000 fe6c 	bl	8003590 <my_astro_evt_pin>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d1ef      	bne.n	800289c <main+0x2f4>
	  }
	  if ( astro_rcv_cmd_flag )
 80028bc:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <main+0x4fc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d027      	beq.n	8002914 <main+0x36c>
	  {
		  astro_rcv_cmd_flag = false ;
 80028c4:	4b77      	ldr	r3, [pc, #476]	; (8002aa4 <main+0x4fc>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
		  if ( my_tracker_api_is_cmd ( test ) )
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	0018      	movs	r0, r3
 80028ce:	f007 ff17 	bl	800a700 <my_tracker_api_is_cmd>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d01b      	beq.n	800290e <main+0x366>
		  {
			  if ( strstr ( my_astro_rcv_cmd , (char*) SYS_RESET_CMD ) )
 80028d6:	4a74      	ldr	r2, [pc, #464]	; (8002aa8 <main+0x500>)
 80028d8:	4b74      	ldr	r3, [pc, #464]	; (8002aac <main+0x504>)
 80028da:	0011      	movs	r1, r2
 80028dc:	0018      	movs	r0, r3
 80028de:	f009 fb42 	bl	800bf66 <strstr>
 80028e2:	1e03      	subs	r3, r0, #0
 80028e4:	d013      	beq.n	800290e <main+0x366>
			  {
				  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80028e6:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <main+0x508>)
 80028e8:	0018      	movs	r0, r3
 80028ea:	f006 fff9 	bl	80098e0 <my_rtc_get_dt_s>
				  sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80028ee:	2383      	movs	r3, #131	; 0x83
 80028f0:	005c      	lsls	r4, r3, #1
 80028f2:	4a69      	ldr	r2, [pc, #420]	; (8002a98 <main+0x4f0>)
 80028f4:	496f      	ldr	r1, [pc, #444]	; (8002ab4 <main+0x50c>)
 80028f6:	486a      	ldr	r0, [pc, #424]	; (8002aa0 <main+0x4f8>)
 80028f8:	4b6d      	ldr	r3, [pc, #436]	; (8002ab0 <main+0x508>)
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	0023      	movs	r3, r4
 80028fe:	f009 fa61 	bl	800bdc4 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <main+0x4f8>)
 8002904:	0018      	movs	r0, r3
 8002906:	f000 fc8d 	bl	8003224 <send_debug_logs>
				  HAL_NVIC_SystemReset () ;
 800290a:	f001 fc28 	bl	800415e <HAL_NVIC_SystemReset>
			  }
		  }
		  my_astro_rcv_cmd[0] = 0 ;
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <main+0x504>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002914:	4b68      	ldr	r3, [pc, #416]	; (8002ab8 <main+0x510>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d100      	bne.n	800291e <main+0x376>
 800291c:	e080      	b.n	8002a20 <main+0x478>
	  {
		  my_rtc_alarm_flag = false ;
 800291e:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <main+0x510>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002924:	f000 fd68 	bl	80033f8 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002928:	4b64      	ldr	r3, [pc, #400]	; (8002abc <main+0x514>)
 800292a:	0018      	movs	r0, r3
 800292c:	f006 fe52 	bl	80095d4 <my_gnss_acq_coordinates>
 8002930:	0003      	movs	r3, r0
 8002932:	001a      	movs	r2, r3
 8002934:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <main+0x518>)
 8002936:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002938:	f000 fd78 	bl	800342c <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800293c:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <main+0x508>)
 800293e:	0018      	movs	r0, r3
 8002940:	f006 ffce 	bl	80098e0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu\0" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002944:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <main+0x514>)
 8002946:	7c1b      	ldrb	r3, [r3, #16]
 8002948:	4698      	mov	r8, r3
 800294a:	4b5c      	ldr	r3, [pc, #368]	; (8002abc <main+0x514>)
 800294c:	689c      	ldr	r4, [r3, #8]
 800294e:	68dd      	ldr	r5, [r3, #12]
 8002950:	4b5a      	ldr	r3, [pc, #360]	; (8002abc <main+0x514>)
 8002952:	8a5b      	ldrh	r3, [r3, #18]
 8002954:	4699      	mov	r9, r3
 8002956:	4b59      	ldr	r3, [pc, #356]	; (8002abc <main+0x514>)
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	213c      	movs	r1, #60	; 0x3c
 800295c:	0018      	movs	r0, r3
 800295e:	f7fd fbed 	bl	800013c <__udivsi3>
 8002962:	0003      	movs	r3, r0
 8002964:	469c      	mov	ip, r3
 8002966:	238a      	movs	r3, #138	; 0x8a
 8002968:	005e      	lsls	r6, r3, #1
 800296a:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <main+0x4f0>)
 800296c:	4955      	ldr	r1, [pc, #340]	; (8002ac4 <main+0x51c>)
 800296e:	484c      	ldr	r0, [pc, #304]	; (8002aa0 <main+0x4f8>)
 8002970:	4663      	mov	r3, ip
 8002972:	9305      	str	r3, [sp, #20]
 8002974:	464b      	mov	r3, r9
 8002976:	9304      	str	r3, [sp, #16]
 8002978:	9402      	str	r4, [sp, #8]
 800297a:	9503      	str	r5, [sp, #12]
 800297c:	4643      	mov	r3, r8
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <main+0x508>)
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	0033      	movs	r3, r6
 8002986:	f009 fa1d 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 800298a:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <main+0x4f8>)
 800298c:	0018      	movs	r0, r3
 800298e:	f000 fc49 	bl	8003224 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 8002992:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <main+0x518>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d042      	beq.n	8002a20 <main+0x478>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 800299a:	4b48      	ldr	r3, [pc, #288]	; (8002abc <main+0x514>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <main+0x514>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0019      	movs	r1, r3
 80029a4:	0010      	movs	r0, r2
 80029a6:	f006 fe05 	bl	80095b4 <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld\0" , my_astro_payload_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <main+0x520>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	4698      	mov	r8, r3
 80029b0:	4b42      	ldr	r3, [pc, #264]	; (8002abc <main+0x514>)
 80029b2:	689c      	ldr	r4, [r3, #8]
 80029b4:	68dd      	ldr	r5, [r3, #12]
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <main+0x514>)
 80029b8:	8a5b      	ldrh	r3, [r3, #18]
 80029ba:	001e      	movs	r6, r3
 80029bc:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <main+0x514>)
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	213c      	movs	r1, #60	; 0x3c
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7fd fbba 	bl	800013c <__udivsi3>
 80029c8:	0003      	movs	r3, r0
 80029ca:	469c      	mov	ip, r3
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <main+0x514>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <main+0x514>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	493d      	ldr	r1, [pc, #244]	; (8002acc <main+0x524>)
 80029d6:	483e      	ldr	r0, [pc, #248]	; (8002ad0 <main+0x528>)
 80029d8:	9305      	str	r3, [sp, #20]
 80029da:	9204      	str	r2, [sp, #16]
 80029dc:	4663      	mov	r3, ip
 80029de:	9303      	str	r3, [sp, #12]
 80029e0:	9602      	str	r6, [sp, #8]
 80029e2:	9400      	str	r4, [sp, #0]
 80029e4:	9501      	str	r5, [sp, #4]
 80029e6:	4642      	mov	r2, r8
 80029e8:	f009 f9ec 	bl	800bdc4 <sprintf>
			  my_astro_add_payload_2_queue ( my_astro_payload_id++ , my_astro_payload ) ;
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <main+0x520>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	b291      	uxth	r1, r2
 80029f4:	4a34      	ldr	r2, [pc, #208]	; (8002ac8 <main+0x520>)
 80029f6:	8011      	strh	r1, [r2, #0]
 80029f8:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <main+0x528>)
 80029fa:	0011      	movs	r1, r2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f006 fd6f 	bl	80094e0 <my_astro_add_payload_2_queue>
			  sprintf ( dbg_payload , "%s,%d,payload: %s\0" , __FILE__ , __LINE__ , my_astro_payload ) ;
 8002a02:	231c      	movs	r3, #28
 8002a04:	33ff      	adds	r3, #255	; 0xff
 8002a06:	001c      	movs	r4, r3
 8002a08:	4a23      	ldr	r2, [pc, #140]	; (8002a98 <main+0x4f0>)
 8002a0a:	4932      	ldr	r1, [pc, #200]	; (8002ad4 <main+0x52c>)
 8002a0c:	4824      	ldr	r0, [pc, #144]	; (8002aa0 <main+0x4f8>)
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <main+0x528>)
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	0023      	movs	r3, r4
 8002a14:	f009 f9d6 	bl	800bdc4 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <main+0x4f8>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fc02 	bl	8003224 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <main+0x530>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f006 ff9d 	bl	8009964 <my_rtc_set_alarm>
 8002a2a:	1e03      	subs	r3, r0, #0
 8002a2c:	d100      	bne.n	8002a30 <main+0x488>
 8002a2e:	e741      	b.n	80028b4 <main+0x30c>
	  {
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <main+0x508>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f006 ff54 	bl	80098e0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002a38:	2391      	movs	r3, #145	; 0x91
 8002a3a:	005c      	lsls	r4, r3, #1
 8002a3c:	4a16      	ldr	r2, [pc, #88]	; (8002a98 <main+0x4f0>)
 8002a3e:	4927      	ldr	r1, [pc, #156]	; (8002adc <main+0x534>)
 8002a40:	4817      	ldr	r0, [pc, #92]	; (8002aa0 <main+0x4f8>)
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <main+0x508>)
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	0023      	movs	r3, r4
 8002a48:	f009 f9bc 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <main+0x4f8>)
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fbe8 	bl	8003224 <send_debug_logs>
		  my_tim_stop () ;
 8002a54:	f000 fdca 	bl	80035ec <my_tim_stop>
		  HAL_SuspendTick () ;
 8002a58:	f001 fa6c 	bl	8003f34 <HAL_SuspendTick>
		  my_rtc_alarm_flag = false ;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <main+0x510>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	01db      	lsls	r3, r3, #7
 8002a66:	2102      	movs	r1, #2
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f001 fe49 	bl	8004700 <HAL_PWR_EnterSTOPMode>
		  HAL_ResumeTick () ;
 8002a6e:	f001 fa6f 	bl	8003f50 <HAL_ResumeTick>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <main+0x508>)
 8002a74:	0018      	movs	r0, r3
 8002a76:	f006 ff33 	bl	80098e0 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s\0" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8002a7a:	2395      	movs	r3, #149	; 0x95
 8002a7c:	005c      	lsls	r4, r3, #1
 8002a7e:	4a06      	ldr	r2, [pc, #24]	; (8002a98 <main+0x4f0>)
 8002a80:	4917      	ldr	r1, [pc, #92]	; (8002ae0 <main+0x538>)
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <main+0x4f8>)
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <main+0x508>)
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	0023      	movs	r3, r4
 8002a8a:	f009 f99b 	bl	800bdc4 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <main+0x4f8>)
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 fbc7 	bl	8003224 <send_debug_logs>
	  while ( my_astro_evt_pin () )
 8002a96:	e70d      	b.n	80028b4 <main+0x30c>
 8002a98:	08012960 	.word	0x08012960
 8002a9c:	08012a00 	.word	0x08012a00
 8002aa0:	20000b08 	.word	0x20000b08
 8002aa4:	20000c02 	.word	0x20000c02
 8002aa8:	08012a88 	.word	0x08012a88
 8002aac:	20000c04 	.word	0x20000c04
 8002ab0:	20000a28 	.word	0x20000a28
 8002ab4:	08012a8c 	.word	0x08012a8c
 8002ab8:	20000af8 	.word	0x20000af8
 8002abc:	20000ae0 	.word	0x20000ae0
 8002ac0:	20000af9 	.word	0x20000af9
 8002ac4:	08012974 	.word	0x08012974
 8002ac8:	20000a3c 	.word	0x20000a3c
 8002acc:	08012aac 	.word	0x08012aac
 8002ad0:	20000a40 	.word	0x20000a40
 8002ad4:	08012a2c 	.word	0x08012a2c
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	08012ac4 	.word	0x08012ac4
 8002ae0:	08012afc 	.word	0x08012afc

08002ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b095      	sub	sp, #84	; 0x54
 8002ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aea:	2414      	movs	r4, #20
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	0018      	movs	r0, r3
 8002af0:	233c      	movs	r3, #60	; 0x3c
 8002af2:	001a      	movs	r2, r3
 8002af4:	2100      	movs	r1, #0
 8002af6:	f009 f9fb 	bl	800bef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002afa:	1d3b      	adds	r3, r7, #4
 8002afc:	0018      	movs	r0, r3
 8002afe:	2310      	movs	r3, #16
 8002b00:	001a      	movs	r2, r3
 8002b02:	2100      	movs	r1, #0
 8002b04:	f009 f9f4 	bl	800bef0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f001 fe49 	bl	80047a4 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b12:	f001 fde7 	bl	80046e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <SystemClock_Config+0xa8>)
 8002b18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b1a:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <SystemClock_Config+0xa8>)
 8002b1c:	2118      	movs	r1, #24
 8002b1e:	438a      	bics	r2, r1
 8002b20:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	2206      	movs	r2, #6
 8002b26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b2e:	193b      	adds	r3, r7, r4
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	0052      	lsls	r2, r2, #1
 8002b34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b3c:	193b      	adds	r3, r7, r4
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f001 fe76 	bl	800483c <HAL_RCC_OscConfig>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d001      	beq.n	8002b58 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002b54:	f000 fda8 	bl	80036a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	2100      	movs	r1, #0
 8002b74:	0018      	movs	r0, r3
 8002b76:	f002 f9c1 	bl	8004efc <HAL_RCC_ClockConfig>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d001      	beq.n	8002b82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b7e:	f000 fd93 	bl	80036a8 <Error_Handler>
  }
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b015      	add	sp, #84	; 0x54
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	40021000 	.word	0x40021000

08002b90 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b090      	sub	sp, #64	; 0x40
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b96:	232c      	movs	r3, #44	; 0x2c
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	2314      	movs	r3, #20
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f009 f9a5 	bl	800bef0 <memset>
  RTC_DateTypeDef sDate = {0};
 8002ba6:	2328      	movs	r3, #40	; 0x28
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002bae:	003b      	movs	r3, r7
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	2328      	movs	r3, #40	; 0x28
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f009 f99a 	bl	800bef0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002bbc:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bbe:	4a45      	ldr	r2, [pc, #276]	; (8002cd4 <MX_RTC_Init+0x144>)
 8002bc0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002bc8:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bca:	227f      	movs	r2, #127	; 0x7f
 8002bcc:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bd0:	22ff      	movs	r2, #255	; 0xff
 8002bd2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002be0:	4b3b      	ldr	r3, [pc, #236]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002be6:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	05d2      	lsls	r2, r2, #23
 8002bec:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bf4:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f002 fd66 	bl	80056c8 <HAL_RTC_Init>
 8002bfc:	1e03      	subs	r3, r0, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002c00:	f000 fd52 	bl	80036a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2200      	movs	r2, #0
 8002c10:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	2200      	movs	r2, #0
 8002c22:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	2200      	movs	r2, #0
 8002c28:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c2a:	1879      	adds	r1, r7, r1
 8002c2c:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	0018      	movs	r0, r3
 8002c32:	f002 fdeb 	bl	800580c <HAL_RTC_SetTime>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d001      	beq.n	8002c3e <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002c3a:	f000 fd35 	bl	80036a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002c3e:	2128      	movs	r1, #40	; 0x28
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	2206      	movs	r2, #6
 8002c44:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	2201      	movs	r2, #1
 8002c4a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2201      	movs	r2, #1
 8002c50:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	2200      	movs	r2, #0
 8002c56:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c58:	1879      	adds	r1, r7, r1
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f002 fed8 	bl	8005a14 <HAL_RTC_SetDate>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d001      	beq.n	8002c6c <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002c68:	f000 fd1e 	bl	80036a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002c6c:	003b      	movs	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002c72:	003b      	movs	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002c78:	003b      	movs	r3, r7
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c7e:	003b      	movs	r3, r7
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c84:	003b      	movs	r3, r7
 8002c86:	2200      	movs	r2, #0
 8002c88:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c8a:	003b      	movs	r3, r7
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c90:	003b      	movs	r3, r7
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c96:	003b      	movs	r3, r7
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c9c:	003b      	movs	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002ca2:	003b      	movs	r3, r7
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002caa:	003b      	movs	r3, r7
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0052      	lsls	r2, r2, #1
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002cb2:	0039      	movs	r1, r7
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <MX_RTC_Init+0x140>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f002 ff8b 	bl	8005bd4 <HAL_RTC_SetAlarm_IT>
 8002cbe:	1e03      	subs	r3, r0, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002cc2:	f000 fcf1 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b010      	add	sp, #64	; 0x40
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	200006f4 	.word	0x200006f4
 8002cd4:	40002800 	.word	0x40002800

08002cd8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002cde:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <MX_SPI1_Init+0x78>)
 8002ce0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002ce4:	2282      	movs	r2, #130	; 0x82
 8002ce6:	0052      	lsls	r2, r2, #1
 8002ce8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cea:	4b18      	ldr	r3, [pc, #96]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cf0:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002cf2:	22e0      	movs	r2, #224	; 0xe0
 8002cf4:	00d2      	lsls	r2, r2, #3
 8002cf6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf8:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cfe:	4b13      	ldr	r3, [pc, #76]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d06:	2280      	movs	r2, #128	; 0x80
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d26:	2207      	movs	r2, #7
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d2a:	4b08      	ldr	r3, [pc, #32]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d32:	2208      	movs	r2, #8
 8002d34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <MX_SPI1_Init+0x74>)
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f003 fa2b 	bl	8006194 <HAL_SPI_Init>
 8002d3e:	1e03      	subs	r3, r0, #0
 8002d40:	d001      	beq.n	8002d46 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d42:	f000 fcb1 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000720 	.word	0x20000720
 8002d50:	40013000 	.word	0x40013000

08002d54 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	230c      	movs	r3, #12
 8002d60:	001a      	movs	r2, r3
 8002d62:	2100      	movs	r1, #0
 8002d64:	f009 f8c4 	bl	800bef0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002d6a:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <MX_TIM6_Init+0x70>)
 8002d6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002d70:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <MX_TIM6_Init+0x74>)
 8002d72:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <MX_TIM6_Init+0x78>)
 8002d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d80:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f003 fabb 	bl	8006304 <HAL_TIM_Base_Init>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002d92:	f000 fc89 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d96:	1d3b      	adds	r3, r7, #4
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002da2:	1d3a      	adds	r2, r7, #4
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <MX_TIM6_Init+0x6c>)
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f003 fd53 	bl	8006854 <HAL_TIMEx_MasterConfigSynchronization>
 8002dae:	1e03      	subs	r3, r0, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002db2:	f000 fc79 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	20000784 	.word	0x20000784
 8002dc4:	40001000 	.word	0x40001000
 8002dc8:	00003e7f 	.word	0x00003e7f
 8002dcc:	000003e7 	.word	0x000003e7

08002dd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002dd4:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <MX_USART1_UART_Init+0x98>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002ddc:	22e1      	movs	r2, #225	; 0xe1
 8002dde:	0252      	lsls	r2, r2, #9
 8002de0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b20      	ldr	r3, [pc, #128]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e06:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f003 fda8 	bl	8006970 <HAL_UART_Init>
 8002e20:	1e03      	subs	r3, r0, #0
 8002e22:	d001      	beq.n	8002e28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e24:	f000 fc40 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f004 fd83 	bl	8007938 <HAL_UARTEx_SetTxFifoThreshold>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e36:	f000 fc37 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e3a:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f004 fdba 	bl	80079b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e48:	f000 fc2e 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <MX_USART1_UART_Init+0x94>)
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f004 fd38 	bl	80078c4 <HAL_UARTEx_DisableFifoMode>
 8002e54:	1e03      	subs	r3, r0, #0
 8002e56:	d001      	beq.n	8002e5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e58:	f000 fc26 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	200007d0 	.word	0x200007d0
 8002e68:	40013800 	.word	0x40013800

08002e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e72:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <MX_USART2_UART_Init+0x98>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e78:	22e1      	movs	r2, #225	; 0xe1
 8002e7a:	0252      	lsls	r2, r2, #9
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea2:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f003 fd5a 	bl	8006970 <HAL_UART_Init>
 8002ebc:	1e03      	subs	r3, r0, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002ec0:	f000 fbf2 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f004 fd35 	bl	8007938 <HAL_UARTEx_SetTxFifoThreshold>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002ed2:	f000 fbe9 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	0018      	movs	r0, r3
 8002edc:	f004 fd6c 	bl	80079b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002ee0:	1e03      	subs	r3, r0, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002ee4:	f000 fbe0 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <MX_USART2_UART_Init+0x94>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f004 fcea 	bl	80078c4 <HAL_UARTEx_DisableFifoMode>
 8002ef0:	1e03      	subs	r3, r0, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ef4:	f000 fbd8 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ef8:	46c0      	nop			; (mov r8, r8)
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	20000864 	.word	0x20000864
 8002f04:	40004400 	.word	0x40004400

08002f08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f0c:	4b23      	ldr	r3, [pc, #140]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <MX_USART3_UART_Init+0x98>)
 8002f10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002f12:	4b22      	ldr	r3, [pc, #136]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f14:	2296      	movs	r2, #150	; 0x96
 8002f16:	0192      	lsls	r2, r2, #6
 8002f18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f1a:	4b20      	ldr	r3, [pc, #128]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f26:	4b1d      	ldr	r3, [pc, #116]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f2e:	220c      	movs	r2, #12
 8002f30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f52:	0018      	movs	r0, r3
 8002f54:	f003 fd0c 	bl	8006970 <HAL_UART_Init>
 8002f58:	1e03      	subs	r3, r0, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002f5c:	f000 fba4 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f62:	2100      	movs	r1, #0
 8002f64:	0018      	movs	r0, r3
 8002f66:	f004 fce7 	bl	8007938 <HAL_UARTEx_SetTxFifoThreshold>
 8002f6a:	1e03      	subs	r3, r0, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002f6e:	f000 fb9b 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f74:	2100      	movs	r1, #0
 8002f76:	0018      	movs	r0, r3
 8002f78:	f004 fd1e 	bl	80079b8 <HAL_UARTEx_SetRxFifoThreshold>
 8002f7c:	1e03      	subs	r3, r0, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002f80:	f000 fb92 	bl	80036a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <MX_USART3_UART_Init+0x94>)
 8002f86:	0018      	movs	r0, r3
 8002f88:	f004 fc9c 	bl	80078c4 <HAL_UARTEx_DisableFifoMode>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002f90:	f000 fb8a 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	200008f8 	.word	0x200008f8
 8002fa0:	40004800 	.word	0x40004800

08002fa4 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <MX_USART5_UART_Init+0x64>)
 8002fac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fb0:	2296      	movs	r2, #150	; 0x96
 8002fb2:	0192      	lsls	r2, r2, #6
 8002fb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fca:	220c      	movs	r2, #12
 8002fcc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <MX_USART5_UART_Init+0x60>)
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f003 fcbe 	bl	8006970 <HAL_UART_Init>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002ff8:	f000 fb56 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	2000098c 	.word	0x2000098c
 8003008:	40005000 	.word	0x40005000

0800300c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b08b      	sub	sp, #44	; 0x2c
 8003010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	2414      	movs	r4, #20
 8003014:	193b      	adds	r3, r7, r4
 8003016:	0018      	movs	r0, r3
 8003018:	2314      	movs	r3, #20
 800301a:	001a      	movs	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f008 ff67 	bl	800bef0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003022:	4b7a      	ldr	r3, [pc, #488]	; (800320c <MX_GPIO_Init+0x200>)
 8003024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003026:	4b79      	ldr	r3, [pc, #484]	; (800320c <MX_GPIO_Init+0x200>)
 8003028:	2104      	movs	r1, #4
 800302a:	430a      	orrs	r2, r1
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
 800302e:	4b77      	ldr	r3, [pc, #476]	; (800320c <MX_GPIO_Init+0x200>)
 8003030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003032:	2204      	movs	r2, #4
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	4b74      	ldr	r3, [pc, #464]	; (800320c <MX_GPIO_Init+0x200>)
 800303c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303e:	4b73      	ldr	r3, [pc, #460]	; (800320c <MX_GPIO_Init+0x200>)
 8003040:	2101      	movs	r1, #1
 8003042:	430a      	orrs	r2, r1
 8003044:	635a      	str	r2, [r3, #52]	; 0x34
 8003046:	4b71      	ldr	r3, [pc, #452]	; (800320c <MX_GPIO_Init+0x200>)
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	4b6e      	ldr	r3, [pc, #440]	; (800320c <MX_GPIO_Init+0x200>)
 8003054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003056:	4b6d      	ldr	r3, [pc, #436]	; (800320c <MX_GPIO_Init+0x200>)
 8003058:	2102      	movs	r1, #2
 800305a:	430a      	orrs	r2, r1
 800305c:	635a      	str	r2, [r3, #52]	; 0x34
 800305e:	4b6b      	ldr	r3, [pc, #428]	; (800320c <MX_GPIO_Init+0x200>)
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	2202      	movs	r2, #2
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800306a:	4b68      	ldr	r3, [pc, #416]	; (800320c <MX_GPIO_Init+0x200>)
 800306c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800306e:	4b67      	ldr	r3, [pc, #412]	; (800320c <MX_GPIO_Init+0x200>)
 8003070:	2108      	movs	r1, #8
 8003072:	430a      	orrs	r2, r1
 8003074:	635a      	str	r2, [r3, #52]	; 0x34
 8003076:	4b65      	ldr	r3, [pc, #404]	; (800320c <MX_GPIO_Init+0x200>)
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	2208      	movs	r2, #8
 800307c:	4013      	ands	r3, r2
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8003082:	23a0      	movs	r3, #160	; 0xa0
 8003084:	05db      	lsls	r3, r3, #23
 8003086:	2200      	movs	r2, #0
 8003088:	2110      	movs	r1, #16
 800308a:	0018      	movs	r0, r3
 800308c:	f001 fad9 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8003090:	495f      	ldr	r1, [pc, #380]	; (8003210 <MX_GPIO_Init+0x204>)
 8003092:	4b60      	ldr	r3, [pc, #384]	; (8003214 <MX_GPIO_Init+0x208>)
 8003094:	2200      	movs	r2, #0
 8003096:	0018      	movs	r0, r3
 8003098:	f001 fad3 	bl	8004642 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	485c      	ldr	r0, [pc, #368]	; (8003214 <MX_GPIO_Init+0x208>)
 80030a2:	2201      	movs	r2, #1
 80030a4:	0019      	movs	r1, r3
 80030a6:	f001 facc 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 80030aa:	4b5b      	ldr	r3, [pc, #364]	; (8003218 <MX_GPIO_Init+0x20c>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	2103      	movs	r1, #3
 80030b0:	0018      	movs	r0, r3
 80030b2:	f001 fac6 	bl	8004642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 80030b6:	193b      	adds	r3, r7, r4
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030bc:	193b      	adds	r3, r7, r4
 80030be:	2288      	movs	r2, #136	; 0x88
 80030c0:	0352      	lsls	r2, r2, #13
 80030c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 80030ca:	193a      	adds	r2, r7, r4
 80030cc:	23a0      	movs	r3, #160	; 0xa0
 80030ce:	05db      	lsls	r3, r3, #23
 80030d0:	0011      	movs	r1, r2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f001 f854 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 80030d8:	193b      	adds	r3, r7, r4
 80030da:	2202      	movs	r2, #2
 80030dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030de:	193b      	adds	r3, r7, r4
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	193b      	adds	r3, r7, r4
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 80030ea:	193a      	adds	r2, r7, r4
 80030ec:	23a0      	movs	r3, #160	; 0xa0
 80030ee:	05db      	lsls	r3, r3, #23
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f001 f844 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 80030f8:	193b      	adds	r3, r7, r4
 80030fa:	2210      	movs	r2, #16
 80030fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030fe:	193b      	adds	r3, r7, r4
 8003100:	2201      	movs	r2, #1
 8003102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	193b      	adds	r3, r7, r4
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800310a:	193b      	adds	r3, r7, r4
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8003110:	193a      	adds	r2, r7, r4
 8003112:	23a0      	movs	r3, #160	; 0xa0
 8003114:	05db      	lsls	r3, r3, #23
 8003116:	0011      	movs	r1, r2
 8003118:	0018      	movs	r0, r3
 800311a:	f001 f831 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 800311e:	193b      	adds	r3, r7, r4
 8003120:	4a3e      	ldr	r2, [pc, #248]	; (800321c <MX_GPIO_Init+0x210>)
 8003122:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	193b      	adds	r3, r7, r4
 8003126:	2201      	movs	r2, #1
 8003128:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	193b      	adds	r3, r7, r4
 800312c:	2200      	movs	r2, #0
 800312e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	193b      	adds	r3, r7, r4
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	193b      	adds	r3, r7, r4
 8003138:	4a36      	ldr	r2, [pc, #216]	; (8003214 <MX_GPIO_Init+0x208>)
 800313a:	0019      	movs	r1, r3
 800313c:	0010      	movs	r0, r2
 800313e:	f001 f81f 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8003142:	0021      	movs	r1, r4
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2224      	movs	r2, #36	; 0x24
 8003148:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800314a:	187b      	adds	r3, r7, r1
 800314c:	2288      	movs	r2, #136	; 0x88
 800314e:	0352      	lsls	r2, r2, #13
 8003150:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	187b      	adds	r3, r7, r1
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	000c      	movs	r4, r1
 800315a:	187b      	adds	r3, r7, r1
 800315c:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <MX_GPIO_Init+0x208>)
 800315e:	0019      	movs	r1, r3
 8003160:	0010      	movs	r0, r2
 8003162:	f001 f80d 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 8003166:	0021      	movs	r1, r4
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	0192      	lsls	r2, r2, #6
 800316e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003170:	000c      	movs	r4, r1
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2211      	movs	r2, #17
 8003176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	193b      	adds	r3, r7, r4
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	193b      	adds	r3, r7, r4
 8003180:	2200      	movs	r2, #0
 8003182:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003184:	193b      	adds	r3, r7, r4
 8003186:	4a23      	ldr	r2, [pc, #140]	; (8003214 <MX_GPIO_Init+0x208>)
 8003188:	0019      	movs	r1, r3
 800318a:	0010      	movs	r0, r2
 800318c:	f000 fff8 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003190:	193b      	adds	r3, r7, r4
 8003192:	4a23      	ldr	r2, [pc, #140]	; (8003220 <MX_GPIO_Init+0x214>)
 8003194:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003196:	193b      	adds	r3, r7, r4
 8003198:	2200      	movs	r2, #0
 800319a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	193b      	adds	r3, r7, r4
 800319e:	2200      	movs	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	4a1b      	ldr	r2, [pc, #108]	; (8003214 <MX_GPIO_Init+0x208>)
 80031a6:	0019      	movs	r1, r3
 80031a8:	0010      	movs	r0, r2
 80031aa:	f000 ffe9 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	2203      	movs	r2, #3
 80031b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b4:	193b      	adds	r3, r7, r4
 80031b6:	2201      	movs	r2, #1
 80031b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	193b      	adds	r3, r7, r4
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <MX_GPIO_Init+0x20c>)
 80031ca:	0019      	movs	r1, r3
 80031cc:	0010      	movs	r0, r2
 80031ce:	f000 ffd7 	bl	8004180 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80031d2:	0021      	movs	r1, r4
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	220c      	movs	r2, #12
 80031d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031da:	187b      	adds	r3, r7, r1
 80031dc:	2200      	movs	r2, #0
 80031de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031e0:	187b      	adds	r3, r7, r1
 80031e2:	2201      	movs	r2, #1
 80031e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	4a0b      	ldr	r2, [pc, #44]	; (8003218 <MX_GPIO_Init+0x20c>)
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f000 ffc7 	bl	8004180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80031f2:	2200      	movs	r2, #0
 80031f4:	2100      	movs	r1, #0
 80031f6:	2006      	movs	r0, #6
 80031f8:	f000 ff8c 	bl	8004114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80031fc:	2006      	movs	r0, #6
 80031fe:	f000 ff9e 	bl	800413e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b00b      	add	sp, #44	; 0x2c
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	0000a403 	.word	0x0000a403
 8003214:	50000400 	.word	0x50000400
 8003218:	50000c00 	.word	0x50000c00
 800321c:	00008c03 	.word	0x00008c03
 8003220:	00004040 	.word	0x00004040

08003224 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	0018      	movs	r0, r3
 8003230:	f7fc ff68 	bl	8000104 <strlen>
 8003234:	0003      	movs	r3, r0
 8003236:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2bfa      	cmp	r3, #250	; 0xfa
 800323c:	d908      	bls.n	8003250 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 800323e:	23fa      	movs	r3, #250	; 0xfa
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	490d      	ldr	r1, [pc, #52]	; (8003278 <send_debug_logs+0x54>)
 8003244:	480d      	ldr	r0, [pc, #52]	; (800327c <send_debug_logs+0x58>)
 8003246:	222a      	movs	r2, #42	; 0x2a
 8003248:	f003 fc28 	bl	8006a9c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 800324c:	23fa      	movs	r3, #250	; 0xfa
 800324e:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	b29a      	uxth	r2, r3
 8003254:	23fa      	movs	r3, #250	; 0xfa
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4808      	ldr	r0, [pc, #32]	; (800327c <send_debug_logs+0x58>)
 800325c:	f003 fc1e 	bl	8006a9c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003260:	23fa      	movs	r3, #250	; 0xfa
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4906      	ldr	r1, [pc, #24]	; (8003280 <send_debug_logs+0x5c>)
 8003266:	4805      	ldr	r0, [pc, #20]	; (800327c <send_debug_logs+0x58>)
 8003268:	2201      	movs	r2, #1
 800326a:	f003 fc17 	bl	8006a9c <HAL_UART_Transmit>
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	46bd      	mov	sp, r7
 8003272:	b004      	add	sp, #16
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	08012b14 	.word	0x08012b14
 800327c:	20000864 	.word	0x20000864
 8003280:	08012b40 	.word	0x08012b40

08003284 <my_sys_init>:
// System functions
void my_sys_init ( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <my_sys_init+0xf0>)
 800328a:	2200      	movs	r2, #0
 800328c:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 800328e:	4b39      	ldr	r3, [pc, #228]	; (8003374 <my_sys_init+0xf0>)
 8003290:	2200      	movs	r2, #0
 8003292:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003294:	4b38      	ldr	r3, [pc, #224]	; (8003378 <my_sys_init+0xf4>)
 8003296:	2104      	movs	r1, #4
 8003298:	0018      	movs	r0, r3
 800329a:	f001 f9b5 	bl	8004608 <HAL_GPIO_ReadPin>
 800329e:	0003      	movs	r3, r0
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	4193      	sbcs	r3, r2
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <my_sys_init+0xf8>)
 80032a8:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 80032aa:	4b33      	ldr	r3, [pc, #204]	; (8003378 <my_sys_init+0xf4>)
 80032ac:	2108      	movs	r1, #8
 80032ae:	0018      	movs	r0, r3
 80032b0:	f001 f9aa 	bl	8004608 <HAL_GPIO_ReadPin>
 80032b4:	0003      	movs	r3, r0
 80032b6:	1e5a      	subs	r2, r3, #1
 80032b8:	4193      	sbcs	r3, r2
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <my_sys_init+0xfc>)
 80032be:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 80032c0:	4b2e      	ldr	r3, [pc, #184]	; (800337c <my_sys_init+0xf8>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4053      	eors	r3, r2
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d013      	beq.n	80032f6 <my_sys_init+0x72>
 80032ce:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <my_sys_init+0xfc>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2201      	movs	r2, #1
 80032d4:	4053      	eors	r3, r2
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00c      	beq.n	80032f6 <my_sys_init+0x72>
	{
		sys_mode = 0 ;
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <my_sys_init+0x100>)
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80032e2:	4b29      	ldr	r3, [pc, #164]	; (8003388 <my_sys_init+0x104>)
 80032e4:	22e1      	movs	r2, #225	; 0xe1
 80032e6:	0112      	lsls	r2, r2, #4
 80032e8:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <my_sys_init+0x108>)
 80032ec:	2278      	movs	r2, #120	; 0x78
 80032ee:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <my_sys_init+0x10c>)
 80032f2:	221e      	movs	r2, #30
 80032f4:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && !sw2 )
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <my_sys_init+0xf8>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d013      	beq.n	8003326 <my_sys_init+0xa2>
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <my_sys_init+0xfc>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2201      	movs	r2, #1
 8003304:	4053      	eors	r3, r2
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00c      	beq.n	8003326 <my_sys_init+0xa2>
	{
		sys_mode = 1 ;
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <my_sys_init+0x100>)
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <my_sys_init+0x104>)
 8003314:	22e1      	movs	r2, #225	; 0xe1
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 800331a:	4b1c      	ldr	r3, [pc, #112]	; (800338c <my_sys_init+0x108>)
 800331c:	2278      	movs	r2, #120	; 0x78
 800331e:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <my_sys_init+0x10c>)
 8003322:	221e      	movs	r2, #30
 8003324:	801a      	strh	r2, [r3, #0]
	}
	if ( !sw1 && sw2 )
 8003326:	4b15      	ldr	r3, [pc, #84]	; (800337c <my_sys_init+0xf8>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	4053      	eors	r3, r2
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d011      	beq.n	8003358 <my_sys_init+0xd4>
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <my_sys_init+0xfc>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00d      	beq.n	8003358 <my_sys_init+0xd4>
	{
		sys_mode = 2 ;
 800333c:	4b11      	ldr	r3, [pc, #68]	; (8003384 <my_sys_init+0x100>)
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <my_sys_init+0x104>)
 8003344:	2296      	movs	r2, #150	; 0x96
 8003346:	0052      	lsls	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 800334a:	4b10      	ldr	r3, [pc, #64]	; (800338c <my_sys_init+0x108>)
 800334c:	2296      	movs	r2, #150	; 0x96
 800334e:	0092      	lsls	r2, r2, #2
 8003350:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <my_sys_init+0x10c>)
 8003354:	223c      	movs	r2, #60	; 0x3c
 8003356:	801a      	strh	r2, [r3, #0]
	}
	if ( sw1 && sw2 )
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <my_sys_init+0xf8>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <my_sys_init+0xea>
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <my_sys_init+0xfc>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <my_sys_init+0xea>
	{
		sys_mode = 3 ;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <my_sys_init+0x100>)
 800336a:	2203      	movs	r2, #3
 800336c:	701a      	strb	r2, [r3, #0]
	}
}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000ae0 	.word	0x20000ae0
 8003378:	50000c00 	.word	0x50000c00
 800337c:	20000a20 	.word	0x20000a20
 8003380:	20000a21 	.word	0x20000a21
 8003384:	20000a22 	.word	0x20000a22
 8003388:	20000008 	.word	0x20000008
 800338c:	20000016 	.word	0x20000016
 8003390:	20000018 	.word	0x20000018

08003394 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	0002      	movs	r2, r0
 800339c:	1dfb      	adds	r3, r7, #7
 800339e:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d10e      	bne.n	80033c6 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4811      	ldr	r0, [pc, #68]	; (80033f4 <my_ant_sw_pos+0x60>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	0019      	movs	r1, r3
 80033b2:	f001 f946 	bl	8004642 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	480e      	ldr	r0, [pc, #56]	; (80033f4 <my_ant_sw_pos+0x60>)
 80033bc:	2201      	movs	r2, #1
 80033be:	0019      	movs	r1, r3
 80033c0:	f001 f93f 	bl	8004642 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 80033c4:	e011      	b.n	80033ea <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 80033c6:	1dfb      	adds	r3, r7, #7
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d10d      	bne.n	80033ea <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 80033ce:	2380      	movs	r3, #128	; 0x80
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4808      	ldr	r0, [pc, #32]	; (80033f4 <my_ant_sw_pos+0x60>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	0019      	movs	r1, r3
 80033d8:	f001 f933 	bl	8004642 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4804      	ldr	r0, [pc, #16]	; (80033f4 <my_ant_sw_pos+0x60>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	0019      	movs	r1, r3
 80033e6:	f001 f92c 	bl	8004642 <HAL_GPIO_WritePin>
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b002      	add	sp, #8
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	50000400 	.word	0x50000400

080033f8 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7ff ffc9 	bl	8003394 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003402:	2380      	movs	r3, #128	; 0x80
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4808      	ldr	r0, [pc, #32]	; (8003428 <my_gnss_sw_on+0x30>)
 8003408:	2201      	movs	r2, #1
 800340a:	0019      	movs	r1, r3
 800340c:	f001 f919 	bl	8004642 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	019b      	lsls	r3, r3, #6
 8003414:	4804      	ldr	r0, [pc, #16]	; (8003428 <my_gnss_sw_on+0x30>)
 8003416:	2201      	movs	r2, #1
 8003418:	0019      	movs	r1, r3
 800341a:	f001 f912 	bl	8004642 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 800341e:	f7ff fdc1 	bl	8002fa4 <MX_USART5_UART_Init>
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	50000400 	.word	0x50000400

0800342c <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 8003430:	2002      	movs	r0, #2
 8003432:	f7ff ffaf 	bl	8003394 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <my_gnss_sw_off+0x3c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d811      	bhi.n	8003462 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	480a      	ldr	r0, [pc, #40]	; (800346c <my_gnss_sw_off+0x40>)
 8003444:	2200      	movs	r2, #0
 8003446:	0019      	movs	r1, r3
 8003448:	f001 f8fb 	bl	8004642 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 800344c:	2380      	movs	r3, #128	; 0x80
 800344e:	019b      	lsls	r3, r3, #6
 8003450:	4806      	ldr	r0, [pc, #24]	; (800346c <my_gnss_sw_off+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	0019      	movs	r1, r3
 8003456:	f001 f8f4 	bl	8004642 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <my_gnss_sw_off+0x44>)
 800345c:	0018      	movs	r0, r3
 800345e:	f003 fadd 	bl	8006a1c <HAL_UART_DeInit>
	}
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000a22 	.word	0x20000a22
 800346c:	50000400 	.word	0x50000400
 8003470:	2000098c 	.word	0x2000098c

08003474 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	000a      	movs	r2, r1
 800347e:	1cfb      	adds	r3, r7, #3
 8003480:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003482:	23fa      	movs	r3, #250	; 0xfa
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	6879      	ldr	r1, [r7, #4]
 8003488:	4809      	ldr	r0, [pc, #36]	; (80034b0 <my_gnss_receive_byte+0x3c>)
 800348a:	2201      	movs	r2, #1
 800348c:	f003 fbaa 	bl	8006be4 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <my_gnss_receive_byte+0x40>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003498:	23fa      	movs	r3, #250	; 0xfa
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4806      	ldr	r0, [pc, #24]	; (80034b8 <my_gnss_receive_byte+0x44>)
 80034a0:	2201      	movs	r2, #1
 80034a2:	f003 fafb 	bl	8006a9c <HAL_UART_Transmit>
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b002      	add	sp, #8
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	2000098c 	.word	0x2000098c
 80034b4:	20000a22 	.word	0x20000a22
 80034b8:	20000864 	.word	0x20000864

080034bc <my_astronode_reset>:
}


// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <my_astronode_reset+0x30>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	2102      	movs	r1, #2
 80034c6:	0018      	movs	r0, r3
 80034c8:	f001 f8bb 	bl	8004642 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80034cc:	2001      	movs	r0, #1
 80034ce:	f000 fd0d 	bl	8003eec <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <my_astronode_reset+0x30>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	2102      	movs	r1, #2
 80034d8:	0018      	movs	r0, r3
 80034da:	f001 f8b2 	bl	8004642 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80034de:	20fa      	movs	r0, #250	; 0xfa
 80034e0:	f000 fd04 	bl	8003eec <HAL_Delay>
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	50000400 	.word	0x50000400

080034f0 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <send_astronode_request+0x34>)
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7ff fe91 	bl	8003224 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0018      	movs	r0, r3
 8003506:	f7ff fe8d 	bl	8003224 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b29a      	uxth	r2, r3
 800350e:	23fa      	movs	r3, #250	; 0xfa
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4804      	ldr	r0, [pc, #16]	; (8003528 <send_astronode_request+0x38>)
 8003516:	f003 fac1 	bl	8006a9c <HAL_UART_Transmit>
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	08012b4c 	.word	0x08012b4c
 8003528:	200008f8 	.word	0x200008f8

0800352c <get_systick>:
uint32_t get_systick ( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003530:	f000 fcd2 	bl	8003ed8 <HAL_GetTick>
 8003534:	0003      	movs	r3, r0
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	000a      	movs	r2, r1
 8003546:	1cbb      	adds	r3, r7, #2
 8003548:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 800354a:	f7ff ffef 	bl	800352c <get_systick>
 800354e:	0002      	movs	r2, r0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	1cba      	adds	r2, r7, #2
 8003556:	8812      	ldrh	r2, [r2, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	419b      	sbcs	r3, r3
 800355c:	425b      	negs	r3, r3
 800355e:	b2db      	uxtb	r3, r3
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}

08003568 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	4806      	ldr	r0, [pc, #24]	; (800358c <is_astronode_character_received+0x24>)
 8003574:	2364      	movs	r3, #100	; 0x64
 8003576:	2201      	movs	r2, #1
 8003578:	f003 fb34 	bl	8006be4 <HAL_UART_Receive>
 800357c:	0003      	movs	r3, r0
 800357e:	425a      	negs	r2, r3
 8003580:	4153      	adcs	r3, r2
 8003582:	b2db      	uxtb	r3, r3
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b002      	add	sp, #8
 800358a:	bd80      	pop	{r7, pc}
 800358c:	200008f8 	.word	0x200008f8

08003590 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <my_astro_evt_pin+0x20>)
 8003596:	2104      	movs	r1, #4
 8003598:	0018      	movs	r0, r3
 800359a:	f001 f835 	bl	8004608 <HAL_GPIO_ReadPin>
 800359e:	0003      	movs	r3, r0
 80035a0:	3b01      	subs	r3, #1
 80035a2:	425a      	negs	r2, r3
 80035a4:	4153      	adcs	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	50000400 	.word	0x50000400

080035b4 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <my_tim_init+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2202      	movs	r2, #2
 80035be:	4252      	negs	r2, r2
 80035c0:	611a      	str	r2, [r3, #16]
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000784 	.word	0x20000784

080035cc <my_tim_start>:

void my_tim_start ()
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <my_tim_start+0x18>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <my_tim_start+0x1c>)
 80035d8:	0018      	movs	r0, r3
 80035da:	f002 feeb 	bl	80063b4 <HAL_TIM_Base_Start_IT>
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000c2c 	.word	0x20000c2c
 80035e8:	20000784 	.word	0x20000784

080035ec <my_tim_stop>:

void my_tim_stop ()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 80035f0:	4b03      	ldr	r3, [pc, #12]	; (8003600 <my_tim_stop+0x14>)
 80035f2:	0018      	movs	r0, r3
 80035f4:	f002 ff40 	bl	8006478 <HAL_TIM_Base_Stop_IT>
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	20000784 	.word	0x20000784

08003604 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b085      	sub	sp, #20
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a12      	ldr	r2, [pc, #72]	; (800365c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d11e      	bne.n	8003654 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		tim_seconds++ ;
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003620:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > TIME_THS_15_MIN )
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	23e1      	movs	r3, #225	; 0xe1
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	429a      	cmp	r2, r3
 800362c:	d912      	bls.n	8003654 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
			my_rtc_get_dt_s ( rtc_dt_s ) ;
 800362e:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003630:	0018      	movs	r0, r3
 8003632:	f006 f955 	bl	80098e0 <my_rtc_get_dt_s>
			sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003636:	4c0c      	ldr	r4, [pc, #48]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003638:	4a0c      	ldr	r2, [pc, #48]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	0023      	movs	r3, r4
 8003644:	f008 fbbe 	bl	800bdc4 <sprintf>
			send_debug_logs ( dbg_payload ) ;
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff fdea 	bl	8003224 <send_debug_logs>
			HAL_NVIC_SystemReset () ;
 8003650:	f000 fd85 	bl	800415e <HAL_NVIC_SystemReset>
		}
	}
}
 8003654:	46c0      	nop			; (mov r8, r8)
 8003656:	46bd      	mov	sp, r7
 8003658:	b003      	add	sp, #12
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	40001000 	.word	0x40001000
 8003660:	20000c2c 	.word	0x20000c2c
 8003664:	20000a28 	.word	0x20000a28
 8003668:	000003f7 	.word	0x000003f7
 800366c:	08012960 	.word	0x08012960
 8003670:	08012a8c 	.word	0x08012a8c
 8003674:	20000b08 	.word	0x20000b08

08003678 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	20000af8 	.word	0x20000af8

08003694 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	0002      	movs	r2, r0
 800369c:	1dbb      	adds	r3, r7, #6
 800369e:	801a      	strh	r2, [r3, #0]

}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <Error_Handler+0x8>
	...

080036b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_MspInit+0x4c>)
 80036bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_MspInit+0x4c>)
 80036c0:	2101      	movs	r1, #1
 80036c2:	430a      	orrs	r2, r1
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <HAL_MspInit+0x4c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2201      	movs	r2, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	607b      	str	r3, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_MspInit+0x4c>)
 80036d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_MspInit+0x4c>)
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	0549      	lsls	r1, r1, #21
 80036dc:	430a      	orrs	r2, r1
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <HAL_MspInit+0x4c>)
 80036e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	055b      	lsls	r3, r3, #21
 80036e8:	4013      	ands	r3, r2
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80036ee:	23c0      	movs	r3, #192	; 0xc0
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 fc3a 	bl	8003f6c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b097      	sub	sp, #92	; 0x5c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800370c:	240c      	movs	r4, #12
 800370e:	193b      	adds	r3, r7, r4
 8003710:	0018      	movs	r0, r3
 8003712:	234c      	movs	r3, #76	; 0x4c
 8003714:	001a      	movs	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	f008 fbea 	bl	800bef0 <memset>
  if(hrtc->Instance==RTC)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_RTC_MspInit+0x84>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d12c      	bne.n	8003780 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003726:	193b      	adds	r3, r7, r4
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	0292      	lsls	r2, r2, #10
 800372c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800372e:	193b      	adds	r3, r7, r4
 8003730:	2280      	movs	r2, #128	; 0x80
 8003732:	0052      	lsls	r2, r2, #1
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003736:	193b      	adds	r3, r7, r4
 8003738:	0018      	movs	r0, r3
 800373a:	f001 fd89 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d001      	beq.n	8003746 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003742:	f7ff ffb1 	bl	80036a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RTC_MspInit+0x88>)
 8003748:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RTC_MspInit+0x88>)
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	0209      	lsls	r1, r1, #8
 8003750:	430a      	orrs	r2, r1
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003754:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_RTC_MspInit+0x88>)
 8003756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_RTC_MspInit+0x88>)
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	00c9      	lsls	r1, r1, #3
 800375e:	430a      	orrs	r2, r1
 8003760:	63da      	str	r2, [r3, #60]	; 0x3c
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_RTC_MspInit+0x88>)
 8003764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003766:	2380      	movs	r3, #128	; 0x80
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4013      	ands	r3, r2
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2103      	movs	r1, #3
 8003774:	2002      	movs	r0, #2
 8003776:	f000 fccd 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800377a:	2002      	movs	r0, #2
 800377c:	f000 fcdf 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b017      	add	sp, #92	; 0x5c
 8003786:	bd90      	pop	{r4, r7, pc}
 8003788:	40002800 	.word	0x40002800
 800378c:	40021000 	.word	0x40021000

08003790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b08b      	sub	sp, #44	; 0x2c
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	2414      	movs	r4, #20
 800379a:	193b      	adds	r3, r7, r4
 800379c:	0018      	movs	r0, r3
 800379e:	2314      	movs	r3, #20
 80037a0:	001a      	movs	r2, r3
 80037a2:	2100      	movs	r1, #0
 80037a4:	f008 fba4 	bl	800bef0 <memset>
  if(hspi->Instance==SPI1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_SPI_MspInit+0x8c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d130      	bne.n	8003814 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_SPI_MspInit+0x90>)
 80037b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_SPI_MspInit+0x90>)
 80037b8:	2180      	movs	r1, #128	; 0x80
 80037ba:	0149      	lsls	r1, r1, #5
 80037bc:	430a      	orrs	r2, r1
 80037be:	641a      	str	r2, [r3, #64]	; 0x40
 80037c0:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_SPI_MspInit+0x90>)
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	015b      	lsls	r3, r3, #5
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_SPI_MspInit+0x90>)
 80037d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_SPI_MspInit+0x90>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	635a      	str	r2, [r3, #52]	; 0x34
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_SPI_MspInit+0x90>)
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	2201      	movs	r2, #1
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 80037e6:	0021      	movs	r1, r4
 80037e8:	187b      	adds	r3, r7, r1
 80037ea:	22e0      	movs	r2, #224	; 0xe0
 80037ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	2202      	movs	r2, #2
 80037f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	187a      	adds	r2, r7, r1
 8003808:	23a0      	movs	r3, #160	; 0xa0
 800380a:	05db      	lsls	r3, r3, #23
 800380c:	0011      	movs	r1, r2
 800380e:	0018      	movs	r0, r3
 8003810:	f000 fcb6 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b00b      	add	sp, #44	; 0x2c
 800381a:	bd90      	pop	{r4, r7, pc}
 800381c:	40013000 	.word	0x40013000
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <HAL_TIM_Base_MspInit+0x44>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d113      	bne.n	800385e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_TIM_Base_MspInit+0x48>)
 8003838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_TIM_Base_MspInit+0x48>)
 800383c:	2110      	movs	r1, #16
 800383e:	430a      	orrs	r2, r1
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <HAL_TIM_Base_MspInit+0x48>)
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	2210      	movs	r2, #16
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 800384e:	2200      	movs	r2, #0
 8003850:	2102      	movs	r1, #2
 8003852:	2011      	movs	r0, #17
 8003854:	f000 fc5e 	bl	8004114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003858:	2011      	movs	r0, #17
 800385a:	f000 fc70 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	46bd      	mov	sp, r7
 8003862:	b004      	add	sp, #16
 8003864:	bd80      	pop	{r7, pc}
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	40001000 	.word	0x40001000
 800386c:	40021000 	.word	0x40021000

08003870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b0a3      	sub	sp, #140	; 0x8c
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	2374      	movs	r3, #116	; 0x74
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	0018      	movs	r0, r3
 800387e:	2314      	movs	r3, #20
 8003880:	001a      	movs	r2, r3
 8003882:	2100      	movs	r1, #0
 8003884:	f008 fb34 	bl	800bef0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003888:	2428      	movs	r4, #40	; 0x28
 800388a:	193b      	adds	r3, r7, r4
 800388c:	0018      	movs	r0, r3
 800388e:	234c      	movs	r3, #76	; 0x4c
 8003890:	001a      	movs	r2, r3
 8003892:	2100      	movs	r1, #0
 8003894:	f008 fb2c 	bl	800bef0 <memset>
  if(huart->Instance==USART1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a84      	ldr	r2, [pc, #528]	; (8003ab0 <HAL_UART_MspInit+0x240>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d140      	bne.n	8003924 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038a2:	193b      	adds	r3, r7, r4
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	2200      	movs	r2, #0
 80038ac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ae:	193b      	adds	r3, r7, r4
 80038b0:	0018      	movs	r0, r3
 80038b2:	f001 fccd 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 80038b6:	1e03      	subs	r3, r0, #0
 80038b8:	d001      	beq.n	80038be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80038ba:	f7ff fef5 	bl	80036a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038be:	4b7d      	ldr	r3, [pc, #500]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80038c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038c2:	4b7c      	ldr	r3, [pc, #496]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80038c4:	2180      	movs	r1, #128	; 0x80
 80038c6:	01c9      	lsls	r1, r1, #7
 80038c8:	430a      	orrs	r2, r1
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
 80038cc:	4b79      	ldr	r3, [pc, #484]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80038ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	01db      	lsls	r3, r3, #7
 80038d4:	4013      	ands	r3, r2
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80038dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038de:	4b75      	ldr	r3, [pc, #468]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	430a      	orrs	r2, r1
 80038e4:	635a      	str	r2, [r3, #52]	; 0x34
 80038e6:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	2201      	movs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	623b      	str	r3, [r7, #32]
 80038f0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 80038f2:	2174      	movs	r1, #116	; 0x74
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	22c0      	movs	r2, #192	; 0xc0
 80038f8:	00d2      	lsls	r2, r2, #3
 80038fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	2202      	movs	r2, #2
 8003900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	187b      	adds	r3, r7, r1
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800390e:	187b      	adds	r3, r7, r1
 8003910:	2201      	movs	r2, #1
 8003912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003914:	187a      	adds	r2, r7, r1
 8003916:	23a0      	movs	r3, #160	; 0xa0
 8003918:	05db      	lsls	r3, r3, #23
 800391a:	0011      	movs	r1, r2
 800391c:	0018      	movs	r0, r3
 800391e:	f000 fc2f 	bl	8004180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003922:	e0c0      	b.n	8003aa6 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a63      	ldr	r2, [pc, #396]	; (8003ab8 <HAL_UART_MspInit+0x248>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d140      	bne.n	80039b0 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800392e:	2128      	movs	r1, #40	; 0x28
 8003930:	187b      	adds	r3, r7, r1
 8003932:	2202      	movs	r2, #2
 8003934:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003936:	187b      	adds	r3, r7, r1
 8003938:	2200      	movs	r2, #0
 800393a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800393c:	187b      	adds	r3, r7, r1
 800393e:	0018      	movs	r0, r3
 8003940:	f001 fc86 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 8003944:	1e03      	subs	r3, r0, #0
 8003946:	d001      	beq.n	800394c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003948:	f7ff feae 	bl	80036a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800394c:	4b59      	ldr	r3, [pc, #356]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 800394e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003950:	4b58      	ldr	r3, [pc, #352]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003952:	2180      	movs	r1, #128	; 0x80
 8003954:	0289      	lsls	r1, r1, #10
 8003956:	430a      	orrs	r2, r1
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c
 800395a:	4b56      	ldr	r3, [pc, #344]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 800395c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	029b      	lsls	r3, r3, #10
 8003962:	4013      	ands	r3, r2
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003968:	4b52      	ldr	r3, [pc, #328]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 800396a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396c:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 800396e:	2101      	movs	r1, #1
 8003970:	430a      	orrs	r2, r1
 8003972:	635a      	str	r2, [r3, #52]	; 0x34
 8003974:	4b4f      	ldr	r3, [pc, #316]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	2201      	movs	r2, #1
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003980:	2174      	movs	r1, #116	; 0x74
 8003982:	187b      	adds	r3, r7, r1
 8003984:	220c      	movs	r2, #12
 8003986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	187b      	adds	r3, r7, r1
 800398a:	2202      	movs	r2, #2
 800398c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398e:	187b      	adds	r3, r7, r1
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003994:	187b      	adds	r3, r7, r1
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2201      	movs	r2, #1
 800399e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a0:	187a      	adds	r2, r7, r1
 80039a2:	23a0      	movs	r3, #160	; 0xa0
 80039a4:	05db      	lsls	r3, r3, #23
 80039a6:	0011      	movs	r1, r2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f000 fbe9 	bl	8004180 <HAL_GPIO_Init>
}
 80039ae:	e07a      	b.n	8003aa6 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a41      	ldr	r2, [pc, #260]	; (8003abc <HAL_UART_MspInit+0x24c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d140      	bne.n	8003a3c <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039ba:	2128      	movs	r1, #40	; 0x28
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	2204      	movs	r2, #4
 80039c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	2200      	movs	r2, #0
 80039c6:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	0018      	movs	r0, r3
 80039cc:	f001 fc40 	bl	8005250 <HAL_RCCEx_PeriphCLKConfig>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80039d4:	f7ff fe68 	bl	80036a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80039da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	02c9      	lsls	r1, r1, #11
 80039e2:	430a      	orrs	r2, r1
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80039e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	02db      	lsls	r3, r3, #11
 80039ee:	4013      	ands	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80039f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f8:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 80039fa:	2102      	movs	r1, #2
 80039fc:	430a      	orrs	r2, r1
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003a00:	4b2c      	ldr	r3, [pc, #176]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	2202      	movs	r2, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
 8003a0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003a0c:	2174      	movs	r1, #116	; 0x74
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	22c0      	movs	r2, #192	; 0xc0
 8003a12:	0092      	lsls	r2, r2, #2
 8003a14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a16:	187b      	adds	r3, r7, r1
 8003a18:	2202      	movs	r2, #2
 8003a1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	187b      	adds	r3, r7, r1
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	2200      	movs	r2, #0
 8003a26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003a28:	187b      	adds	r3, r7, r1
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a2e:	187b      	adds	r3, r7, r1
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_UART_MspInit+0x250>)
 8003a32:	0019      	movs	r1, r3
 8003a34:	0010      	movs	r0, r2
 8003a36:	f000 fba3 	bl	8004180 <HAL_GPIO_Init>
}
 8003a3a:	e034      	b.n	8003aa6 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_UART_MspInit+0x254>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d12f      	bne.n	8003aa6 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8003a46:	4b1b      	ldr	r3, [pc, #108]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4a:	4b1a      	ldr	r3, [pc, #104]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	0049      	lsls	r1, r1, #1
 8003a50:	430a      	orrs	r2, r1
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a54:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a62:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a66:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a68:	2102      	movs	r1, #2
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a6e:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_UART_MspInit+0x244>)
 8003a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 8003a7a:	2174      	movs	r1, #116	; 0x74
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	2218      	movs	r2, #24
 8003a80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	2202      	movs	r2, #2
 8003a86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	187b      	adds	r3, r7, r1
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8003a94:	187b      	adds	r3, r7, r1
 8003a96:	2203      	movs	r2, #3
 8003a98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9a:	187b      	adds	r3, r7, r1
 8003a9c:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <HAL_UART_MspInit+0x250>)
 8003a9e:	0019      	movs	r1, r3
 8003aa0:	0010      	movs	r0, r2
 8003aa2:	f000 fb6d 	bl	8004180 <HAL_GPIO_Init>
}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b023      	add	sp, #140	; 0x8c
 8003aac:	bd90      	pop	{r4, r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40013800 	.word	0x40013800
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40004400 	.word	0x40004400
 8003abc:	40004800 	.word	0x40004800
 8003ac0:	50000400 	.word	0x50000400
 8003ac4:	40005000 	.word	0x40005000

08003ac8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <HAL_UART_MspDeInit+0xa4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10e      	bne.n	8003af8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003ada:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ade:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003ae0:	4924      	ldr	r1, [pc, #144]	; (8003b74 <HAL_UART_MspDeInit+0xac>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 8003ae6:	23c0      	movs	r3, #192	; 0xc0
 8003ae8:	00da      	lsls	r2, r3, #3
 8003aea:	23a0      	movs	r3, #160	; 0xa0
 8003aec:	05db      	lsls	r3, r3, #23
 8003aee:	0011      	movs	r1, r2
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fcb1 	bl	8004458 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 8003af6:	e034      	b.n	8003b62 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_UART_MspDeInit+0xb0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10c      	bne.n	8003b1c <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003b08:	491c      	ldr	r1, [pc, #112]	; (8003b7c <HAL_UART_MspDeInit+0xb4>)
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 8003b0e:	23a0      	movs	r3, #160	; 0xa0
 8003b10:	05db      	lsls	r3, r3, #23
 8003b12:	210c      	movs	r1, #12
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 fc9f 	bl	8004458 <HAL_GPIO_DeInit>
}
 8003b1a:	e022      	b.n	8003b62 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <HAL_UART_MspDeInit+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10d      	bne.n	8003b42 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003b28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003b2c:	4915      	ldr	r1, [pc, #84]	; (8003b84 <HAL_UART_MspDeInit+0xbc>)
 8003b2e:	400a      	ands	r2, r1
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8003b32:	23c0      	movs	r3, #192	; 0xc0
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <HAL_UART_MspDeInit+0xc0>)
 8003b38:	0019      	movs	r1, r3
 8003b3a:	0010      	movs	r0, r2
 8003b3c:	f000 fc8c 	bl	8004458 <HAL_GPIO_DeInit>
}
 8003b40:	e00f      	b.n	8003b62 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a11      	ldr	r2, [pc, #68]	; (8003b8c <HAL_UART_MspDeInit+0xc4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d10a      	bne.n	8003b62 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_UART_MspDeInit+0xa8>)
 8003b52:	490f      	ldr	r1, [pc, #60]	; (8003b90 <HAL_UART_MspDeInit+0xc8>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_UART_MspDeInit+0xc0>)
 8003b5a:	2118      	movs	r1, #24
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 fc7b 	bl	8004458 <HAL_GPIO_DeInit>
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	40013800 	.word	0x40013800
 8003b70:	40021000 	.word	0x40021000
 8003b74:	ffffbfff 	.word	0xffffbfff
 8003b78:	40004400 	.word	0x40004400
 8003b7c:	fffdffff 	.word	0xfffdffff
 8003b80:	40004800 	.word	0x40004800
 8003b84:	fffbffff 	.word	0xfffbffff
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	40005000 	.word	0x40005000
 8003b90:	fffffeff 	.word	0xfffffeff

08003b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b98:	e7fe      	b.n	8003b98 <NMI_Handler+0x4>

08003b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b9e:	e7fe      	b.n	8003b9e <HardFault_Handler+0x4>

08003ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bb8:	f000 f97c 	bl	8003eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bbc:	46c0      	nop			; (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <RTC_TAMP_IRQHandler+0x14>)
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f002 f942 	bl	8005e54 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	200006f4 	.word	0x200006f4

08003bdc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 8003be0:	2004      	movs	r0, #4
 8003be2:	f000 fd4b 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f002 fc6e 	bl	80064d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	20000784 	.word	0x20000784

08003c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  return 1;
 8003c08:	2301      	movs	r3, #1
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <_kill>:

int _kill(int pid, int sig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c1a:	f008 fa23 	bl	800c064 <__errno>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	2216      	movs	r2, #22
 8003c22:	601a      	str	r2, [r3, #0]
  return -1;
 8003c24:	2301      	movs	r3, #1
 8003c26:	425b      	negs	r3, r3
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_exit>:

void _exit (int status)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c38:	2301      	movs	r3, #1
 8003c3a:	425a      	negs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0011      	movs	r1, r2
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7ff ffe5 	bl	8003c10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c46:	e7fe      	b.n	8003c46 <_exit+0x16>

08003c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e00a      	b.n	8003c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c5a:	e000      	b.n	8003c5e <_read+0x16>
 8003c5c:	bf00      	nop
 8003c5e:	0001      	movs	r1, r0
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	60ba      	str	r2, [r7, #8]
 8003c66:	b2ca      	uxtb	r2, r1
 8003c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dbf0      	blt.n	8003c5a <_read+0x12>
  }

  return len;
 8003c78:	687b      	ldr	r3, [r7, #4]
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b006      	add	sp, #24
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e009      	b.n	8003ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	60ba      	str	r2, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	e000      	b.n	8003ca2 <_write+0x20>
 8003ca0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	dbf1      	blt.n	8003c94 <_write+0x12>
  }
  return len;
 8003cb0:	687b      	ldr	r3, [r7, #4]
}
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b006      	add	sp, #24
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <_close>:

int _close(int file)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	425b      	negs	r3, r3
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	0192      	lsls	r2, r2, #6
 8003cde:	605a      	str	r2, [r3, #4]
  return 0;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_isatty>:

int _isatty(int file)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cf2:	2301      	movs	r3, #1
}
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d1c:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <_sbrk+0x5c>)
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <_sbrk+0x60>)
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <_sbrk+0x64>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <_sbrk+0x64>)
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <_sbrk+0x68>)
 8003d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d36:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <_sbrk+0x64>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	18d3      	adds	r3, r2, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d207      	bcs.n	8003d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d44:	f008 f98e 	bl	800c064 <__errno>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	220c      	movs	r2, #12
 8003d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	425b      	negs	r3, r3
 8003d52:	e009      	b.n	8003d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <_sbrk+0x64>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <_sbrk+0x64>)
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	18d2      	adds	r2, r2, r3
 8003d62:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <_sbrk+0x64>)
 8003d64:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d66:	68fb      	ldr	r3, [r7, #12]
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20024000 	.word	0x20024000
 8003d74:	00000400 	.word	0x00000400
 8003d78:	20000afc 	.word	0x20000afc
 8003d7c:	20000f40 	.word	0x20000f40

08003d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d8c:	480d      	ldr	r0, [pc, #52]	; (8003dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d90:	f7ff fff6 	bl	8003d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d94:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d96:	490d      	ldr	r1, [pc, #52]	; (8003dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <LoopForever+0xe>)
  movs r3, #0
 8003d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d9c:	e002      	b.n	8003da4 <LoopCopyDataInit>

08003d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003da2:	3304      	adds	r3, #4

08003da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da8:	d3f9      	bcc.n	8003d9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003dac:	4c0a      	ldr	r4, [pc, #40]	; (8003dd8 <LoopForever+0x16>)
  movs r3, #0
 8003dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003db0:	e001      	b.n	8003db6 <LoopFillZerobss>

08003db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db4:	3204      	adds	r2, #4

08003db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db8:	d3fb      	bcc.n	8003db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003dba:	f008 f959 	bl	800c070 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003dbe:	f7fe fbf3 	bl	80025a8 <main>

08003dc2 <LoopForever>:

LoopForever:
  b LoopForever
 8003dc2:	e7fe      	b.n	8003dc2 <LoopForever>
  ldr   r0, =_estack
 8003dc4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dcc:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 8003dd0:	080149f0 	.word	0x080149f0
  ldr r2, =_sbss
 8003dd4:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 8003dd8:	20000f3c 	.word	0x20000f3c

08003ddc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ddc:	e7fe      	b.n	8003ddc <ADC1_COMP_IRQHandler>
	...

08003de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003de6:	1dfb      	adds	r3, r7, #7
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_Init+0x3c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <HAL_Init+0x3c>)
 8003df2:	2180      	movs	r1, #128	; 0x80
 8003df4:	0049      	lsls	r1, r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dfa:	2003      	movs	r0, #3
 8003dfc:	f000 f810 	bl	8003e20 <HAL_InitTick>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e001      	b.n	8003e10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e0c:	f7ff fc52 	bl	80036b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e10:	1dfb      	adds	r3, r7, #7
 8003e12:	781b      	ldrb	r3, [r3, #0]
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40022000 	.word	0x40022000

08003e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e28:	230f      	movs	r3, #15
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_InitTick+0x88>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d02b      	beq.n	8003e90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_InitTick+0x8c>)
 8003e3a:	681c      	ldr	r4, [r3, #0]
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_InitTick+0x88>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	0019      	movs	r1, r3
 8003e42:	23fa      	movs	r3, #250	; 0xfa
 8003e44:	0098      	lsls	r0, r3, #2
 8003e46:	f7fc f979 	bl	800013c <__udivsi3>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	0020      	movs	r0, r4
 8003e50:	f7fc f974 	bl	800013c <__udivsi3>
 8003e54:	0003      	movs	r3, r0
 8003e56:	0018      	movs	r0, r3
 8003e58:	f000 f985 	bl	8004166 <HAL_SYSTICK_Config>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d112      	bne.n	8003e86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d80a      	bhi.n	8003e7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	425b      	negs	r3, r3
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f000 f950 	bl	8004114 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e74:	4b0e      	ldr	r3, [pc, #56]	; (8003eb0 <HAL_InitTick+0x90>)
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e00d      	b.n	8003e98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003e7c:	230f      	movs	r3, #15
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e008      	b.n	8003e98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e86:	230f      	movs	r3, #15
 8003e88:	18fb      	adds	r3, r7, r3
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e003      	b.n	8003e98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e90:	230f      	movs	r3, #15
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	2201      	movs	r2, #1
 8003e96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003e98:	230f      	movs	r3, #15
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	781b      	ldrb	r3, [r3, #0]
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b005      	add	sp, #20
 8003ea4:	bd90      	pop	{r4, r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	20000014 	.word	0x20000014
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	20000010 	.word	0x20000010

08003eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_IncTick+0x1c>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <HAL_IncTick+0x20>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	18d2      	adds	r2, r2, r3
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_IncTick+0x20>)
 8003ec6:	601a      	str	r2, [r3, #0]
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	20000014 	.word	0x20000014
 8003ed4:	20000b00 	.word	0x20000b00

08003ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  return uwTick;
 8003edc:	4b02      	ldr	r3, [pc, #8]	; (8003ee8 <HAL_GetTick+0x10>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	20000b00 	.word	0x20000b00

08003eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ef4:	f7ff fff0 	bl	8003ed8 <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3301      	adds	r3, #1
 8003f04:	d005      	beq.n	8003f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f06:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <HAL_Delay+0x44>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	f7ff ffe0 	bl	8003ed8 <HAL_GetTick>
 8003f18:	0002      	movs	r2, r0
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d8f7      	bhi.n	8003f14 <HAL_Delay+0x28>
  {
  }
}
 8003f24:	46c0      	nop			; (mov r8, r8)
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b004      	add	sp, #16
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	20000014 	.word	0x20000014

08003f34 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <HAL_SuspendTick+0x18>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_SuspendTick+0x18>)
 8003f3e:	2102      	movs	r1, #2
 8003f40:	438a      	bics	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	e000e010 	.word	0xe000e010

08003f50 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <HAL_ResumeTick+0x18>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_ResumeTick+0x18>)
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
}
 8003f60:	46c0      	nop			; (mov r8, r8)
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	e000e010 	.word	0xe000e010

08003f6c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a06      	ldr	r2, [pc, #24]	; (8003f94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b002      	add	sp, #8
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	40010000 	.word	0x40010000
 8003f94:	fffff9ff 	.word	0xfffff9ff

08003f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	1dfb      	adds	r3, r7, #7
 8003fa2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003fa4:	1dfb      	adds	r3, r7, #7
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8003faa:	d809      	bhi.n	8003fc0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fac:	1dfb      	adds	r3, r7, #7
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	231f      	movs	r3, #31
 8003fb4:	401a      	ands	r2, r3
 8003fb6:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <__NVIC_EnableIRQ+0x30>)
 8003fb8:	2101      	movs	r1, #1
 8003fba:	4091      	lsls	r1, r2
 8003fbc:	000a      	movs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003fc0:	46c0      	nop			; (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	6039      	str	r1, [r7, #0]
 8003fd6:	1dfb      	adds	r3, r7, #7
 8003fd8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003fda:	1dfb      	adds	r3, r7, #7
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b7f      	cmp	r3, #127	; 0x7f
 8003fe0:	d828      	bhi.n	8004034 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fe2:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <__NVIC_SetPriority+0xd4>)
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b25b      	sxtb	r3, r3
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	33c0      	adds	r3, #192	; 0xc0
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	589b      	ldr	r3, [r3, r2]
 8003ff2:	1dfa      	adds	r2, r7, #7
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	00d2      	lsls	r2, r2, #3
 8003ffe:	21ff      	movs	r1, #255	; 0xff
 8004000:	4091      	lsls	r1, r2
 8004002:	000a      	movs	r2, r1
 8004004:	43d2      	mvns	r2, r2
 8004006:	401a      	ands	r2, r3
 8004008:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	019b      	lsls	r3, r3, #6
 800400e:	22ff      	movs	r2, #255	; 0xff
 8004010:	401a      	ands	r2, r3
 8004012:	1dfb      	adds	r3, r7, #7
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	0018      	movs	r0, r3
 8004018:	2303      	movs	r3, #3
 800401a:	4003      	ands	r3, r0
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004020:	481f      	ldr	r0, [pc, #124]	; (80040a0 <__NVIC_SetPriority+0xd4>)
 8004022:	1dfb      	adds	r3, r7, #7
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b25b      	sxtb	r3, r3
 8004028:	089b      	lsrs	r3, r3, #2
 800402a:	430a      	orrs	r2, r1
 800402c:	33c0      	adds	r3, #192	; 0xc0
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004032:	e031      	b.n	8004098 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <__NVIC_SetPriority+0xd8>)
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	0019      	movs	r1, r3
 800403c:	230f      	movs	r3, #15
 800403e:	400b      	ands	r3, r1
 8004040:	3b08      	subs	r3, #8
 8004042:	089b      	lsrs	r3, r3, #2
 8004044:	3306      	adds	r3, #6
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	18d3      	adds	r3, r2, r3
 800404a:	3304      	adds	r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	1dfa      	adds	r2, r7, #7
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	0011      	movs	r1, r2
 8004054:	2203      	movs	r2, #3
 8004056:	400a      	ands	r2, r1
 8004058:	00d2      	lsls	r2, r2, #3
 800405a:	21ff      	movs	r1, #255	; 0xff
 800405c:	4091      	lsls	r1, r2
 800405e:	000a      	movs	r2, r1
 8004060:	43d2      	mvns	r2, r2
 8004062:	401a      	ands	r2, r3
 8004064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	22ff      	movs	r2, #255	; 0xff
 800406c:	401a      	ands	r2, r3
 800406e:	1dfb      	adds	r3, r7, #7
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	0018      	movs	r0, r3
 8004074:	2303      	movs	r3, #3
 8004076:	4003      	ands	r3, r0
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <__NVIC_SetPriority+0xd8>)
 800407e:	1dfb      	adds	r3, r7, #7
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	001c      	movs	r4, r3
 8004084:	230f      	movs	r3, #15
 8004086:	4023      	ands	r3, r4
 8004088:	3b08      	subs	r3, #8
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	430a      	orrs	r2, r1
 800408e:	3306      	adds	r3, #6
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	18c3      	adds	r3, r0, r3
 8004094:	3304      	adds	r3, #4
 8004096:	601a      	str	r2, [r3, #0]
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b003      	add	sp, #12
 800409e:	bd90      	pop	{r4, r7, pc}
 80040a0:	e000e100 	.word	0xe000e100
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040ac:	f3bf 8f4f 	dsb	sy
}
 80040b0:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <__NVIC_SystemReset+0x1c>)
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <__NVIC_SystemReset+0x20>)
 80040b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80040b8:	f3bf 8f4f 	dsb	sy
}
 80040bc:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	e7fd      	b.n	80040be <__NVIC_SystemReset+0x16>
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	e000ed00 	.word	0xe000ed00
 80040c8:	05fa0004 	.word	0x05fa0004

080040cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1e5a      	subs	r2, r3, #1
 80040d8:	2380      	movs	r3, #128	; 0x80
 80040da:	045b      	lsls	r3, r3, #17
 80040dc:	429a      	cmp	r2, r3
 80040de:	d301      	bcc.n	80040e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040e0:	2301      	movs	r3, #1
 80040e2:	e010      	b.n	8004106 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e4:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <SysTick_Config+0x44>)
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	3a01      	subs	r2, #1
 80040ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ec:	2301      	movs	r3, #1
 80040ee:	425b      	negs	r3, r3
 80040f0:	2103      	movs	r1, #3
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff ff6a 	bl	8003fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <SysTick_Config+0x44>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <SysTick_Config+0x44>)
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004104:	2300      	movs	r3, #0
}
 8004106:	0018      	movs	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	b002      	add	sp, #8
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	e000e010 	.word	0xe000e010

08004114 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	210f      	movs	r1, #15
 8004120:	187b      	adds	r3, r7, r1
 8004122:	1c02      	adds	r2, r0, #0
 8004124:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	187b      	adds	r3, r7, r1
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b25b      	sxtb	r3, r3
 800412e:	0011      	movs	r1, r2
 8004130:	0018      	movs	r0, r3
 8004132:	f7ff ff4b 	bl	8003fcc <__NVIC_SetPriority>
}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	b004      	add	sp, #16
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	0002      	movs	r2, r0
 8004146:	1dfb      	adds	r3, r7, #7
 8004148:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b25b      	sxtb	r3, r3
 8004150:	0018      	movs	r0, r3
 8004152:	f7ff ff21 	bl	8003f98 <__NVIC_EnableIRQ>
}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b002      	add	sp, #8
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004162:	f7ff ffa1 	bl	80040a8 <__NVIC_SystemReset>

08004166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	0018      	movs	r0, r3
 8004172:	f7ff ffab 	bl	80040cc <SysTick_Config>
 8004176:	0003      	movs	r3, r0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b002      	add	sp, #8
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800418e:	e14d      	b.n	800442c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2101      	movs	r1, #1
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4091      	lsls	r1, r2
 800419a:	000a      	movs	r2, r1
 800419c:	4013      	ands	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d100      	bne.n	80041a8 <HAL_GPIO_Init+0x28>
 80041a6:	e13e      	b.n	8004426 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2203      	movs	r2, #3
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d005      	beq.n	80041c0 <HAL_GPIO_Init+0x40>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2203      	movs	r2, #3
 80041ba:	4013      	ands	r3, r2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d130      	bne.n	8004222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	2203      	movs	r2, #3
 80041cc:	409a      	lsls	r2, r3
 80041ce:	0013      	movs	r3, r2
 80041d0:	43da      	mvns	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	409a      	lsls	r2, r3
 80041e2:	0013      	movs	r3, r2
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041f6:	2201      	movs	r2, #1
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	43da      	mvns	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	091b      	lsrs	r3, r3, #4
 800420c:	2201      	movs	r2, #1
 800420e:	401a      	ands	r2, r3
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	409a      	lsls	r2, r3
 8004214:	0013      	movs	r3, r2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2203      	movs	r2, #3
 8004228:	4013      	ands	r3, r2
 800422a:	2b03      	cmp	r3, #3
 800422c:	d017      	beq.n	800425e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	2203      	movs	r2, #3
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	43da      	mvns	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2203      	movs	r2, #3
 8004264:	4013      	ands	r3, r2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d123      	bne.n	80042b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	08da      	lsrs	r2, r3, #3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3208      	adds	r2, #8
 8004272:	0092      	lsls	r2, r2, #2
 8004274:	58d3      	ldr	r3, [r2, r3]
 8004276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	409a      	lsls	r2, r3
 8004284:	0013      	movs	r3, r2
 8004286:	43da      	mvns	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4013      	ands	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2107      	movs	r1, #7
 8004296:	400b      	ands	r3, r1
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	409a      	lsls	r2, r3
 800429c:	0013      	movs	r3, r2
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	08da      	lsrs	r2, r3, #3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3208      	adds	r2, #8
 80042ac:	0092      	lsls	r2, r2, #2
 80042ae:	6939      	ldr	r1, [r7, #16]
 80042b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	2203      	movs	r2, #3
 80042be:	409a      	lsls	r2, r3
 80042c0:	0013      	movs	r3, r2
 80042c2:	43da      	mvns	r2, r3
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4013      	ands	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2203      	movs	r2, #3
 80042d0:	401a      	ands	r2, r3
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	409a      	lsls	r2, r3
 80042d8:	0013      	movs	r3, r2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	4013      	ands	r3, r2
 80042f0:	d100      	bne.n	80042f4 <HAL_GPIO_Init+0x174>
 80042f2:	e098      	b.n	8004426 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80042f4:	4a53      	ldr	r2, [pc, #332]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	089b      	lsrs	r3, r3, #2
 80042fa:	3318      	adds	r3, #24
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	589b      	ldr	r3, [r3, r2]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2203      	movs	r2, #3
 8004306:	4013      	ands	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	220f      	movs	r2, #15
 800430c:	409a      	lsls	r2, r3
 800430e:	0013      	movs	r3, r2
 8004310:	43da      	mvns	r2, r3
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4013      	ands	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	23a0      	movs	r3, #160	; 0xa0
 800431c:	05db      	lsls	r3, r3, #23
 800431e:	429a      	cmp	r2, r3
 8004320:	d019      	beq.n	8004356 <HAL_GPIO_Init+0x1d6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a48      	ldr	r2, [pc, #288]	; (8004448 <HAL_GPIO_Init+0x2c8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_GPIO_Init+0x1d2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a47      	ldr	r2, [pc, #284]	; (800444c <HAL_GPIO_Init+0x2cc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00d      	beq.n	800434e <HAL_GPIO_Init+0x1ce>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a46      	ldr	r2, [pc, #280]	; (8004450 <HAL_GPIO_Init+0x2d0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_GPIO_Init+0x1ca>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a45      	ldr	r2, [pc, #276]	; (8004454 <HAL_GPIO_Init+0x2d4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_GPIO_Init+0x1c6>
 8004342:	2304      	movs	r3, #4
 8004344:	e008      	b.n	8004358 <HAL_GPIO_Init+0x1d8>
 8004346:	2305      	movs	r3, #5
 8004348:	e006      	b.n	8004358 <HAL_GPIO_Init+0x1d8>
 800434a:	2303      	movs	r3, #3
 800434c:	e004      	b.n	8004358 <HAL_GPIO_Init+0x1d8>
 800434e:	2302      	movs	r3, #2
 8004350:	e002      	b.n	8004358 <HAL_GPIO_Init+0x1d8>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_GPIO_Init+0x1d8>
 8004356:	2300      	movs	r3, #0
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	2103      	movs	r1, #3
 800435c:	400a      	ands	r2, r1
 800435e:	00d2      	lsls	r2, r2, #3
 8004360:	4093      	lsls	r3, r2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004368:	4936      	ldr	r1, [pc, #216]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3318      	adds	r3, #24
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004376:	4b33      	ldr	r3, [pc, #204]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43da      	mvns	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	4013      	ands	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	035b      	lsls	r3, r3, #13
 800438e:	4013      	ands	r3, r2
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80043a0:	4b28      	ldr	r3, [pc, #160]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	039b      	lsls	r3, r3, #14
 80043b8:	4013      	ands	r3, r2
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 80043cc:	2384      	movs	r3, #132	; 0x84
 80043ce:	58d3      	ldr	r3, [r2, r3]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	43da      	mvns	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	029b      	lsls	r3, r3, #10
 80043e4:	4013      	ands	r3, r2
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043f0:	4914      	ldr	r1, [pc, #80]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 80043f2:	2284      	movs	r2, #132	; 0x84
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80043f8:	4a12      	ldr	r2, [pc, #72]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	58d3      	ldr	r3, [r2, r3]
 80043fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43da      	mvns	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	025b      	lsls	r3, r3, #9
 8004412:	4013      	ands	r3, r2
 8004414:	d003      	beq.n	800441e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800441e:	4909      	ldr	r1, [pc, #36]	; (8004444 <HAL_GPIO_Init+0x2c4>)
 8004420:	2280      	movs	r2, #128	; 0x80
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	40da      	lsrs	r2, r3
 8004434:	1e13      	subs	r3, r2, #0
 8004436:	d000      	beq.n	800443a <HAL_GPIO_Init+0x2ba>
 8004438:	e6aa      	b.n	8004190 <HAL_GPIO_Init+0x10>
  }
}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021800 	.word	0x40021800
 8004448:	50000400 	.word	0x50000400
 800444c:	50000800 	.word	0x50000800
 8004450:	50000c00 	.word	0x50000c00
 8004454:	50001000 	.word	0x50001000

08004458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004466:	e0ba      	b.n	80045de <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004468:	2201      	movs	r2, #1
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	409a      	lsls	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4013      	ands	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d100      	bne.n	800447c <HAL_GPIO_DeInit+0x24>
 800447a:	e0ad      	b.n	80045d8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 800447c:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3318      	adds	r3, #24
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	589b      	ldr	r3, [r3, r2]
 8004488:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2203      	movs	r2, #3
 800448e:	4013      	ands	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	220f      	movs	r2, #15
 8004494:	409a      	lsls	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4013      	ands	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	23a0      	movs	r3, #160	; 0xa0
 80044a0:	05db      	lsls	r3, r3, #23
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_DeInit+0x82>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a53      	ldr	r2, [pc, #332]	; (80045f8 <HAL_GPIO_DeInit+0x1a0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_DeInit+0x7e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_GPIO_DeInit+0x1a4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_DeInit+0x7a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a51      	ldr	r2, [pc, #324]	; (8004600 <HAL_GPIO_DeInit+0x1a8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_DeInit+0x76>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a50      	ldr	r2, [pc, #320]	; (8004604 <HAL_GPIO_DeInit+0x1ac>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_DeInit+0x72>
 80044c6:	2304      	movs	r3, #4
 80044c8:	e008      	b.n	80044dc <HAL_GPIO_DeInit+0x84>
 80044ca:	2305      	movs	r3, #5
 80044cc:	e006      	b.n	80044dc <HAL_GPIO_DeInit+0x84>
 80044ce:	2303      	movs	r3, #3
 80044d0:	e004      	b.n	80044dc <HAL_GPIO_DeInit+0x84>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e002      	b.n	80044dc <HAL_GPIO_DeInit+0x84>
 80044d6:	2301      	movs	r3, #1
 80044d8:	e000      	b.n	80044dc <HAL_GPIO_DeInit+0x84>
 80044da:	2300      	movs	r3, #0
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	2103      	movs	r1, #3
 80044e0:	400a      	ands	r2, r1
 80044e2:	00d2      	lsls	r2, r2, #3
 80044e4:	4093      	lsls	r3, r2
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d136      	bne.n	800455a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80044ec:	4a41      	ldr	r2, [pc, #260]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	58d3      	ldr	r3, [r2, r3]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	43d2      	mvns	r2, r2
 80044f6:	493f      	ldr	r1, [pc, #252]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	2280      	movs	r2, #128	; 0x80
 80044fc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80044fe:	4a3d      	ldr	r2, [pc, #244]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 8004500:	2384      	movs	r3, #132	; 0x84
 8004502:	58d3      	ldr	r3, [r2, r3]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	43d2      	mvns	r2, r2
 8004508:	493a      	ldr	r1, [pc, #232]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 800450a:	4013      	ands	r3, r2
 800450c:	2284      	movs	r2, #132	; 0x84
 800450e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43d9      	mvns	r1, r3
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 800451a:	400a      	ands	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800451e:	4b35      	ldr	r3, [pc, #212]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	43d9      	mvns	r1, r3
 8004526:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 8004528:	400a      	ands	r2, r1
 800452a:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2203      	movs	r2, #3
 8004530:	4013      	ands	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	220f      	movs	r2, #15
 8004536:	409a      	lsls	r2, r3
 8004538:	0013      	movs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 800453c:	4a2d      	ldr	r2, [pc, #180]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	3318      	adds	r3, #24
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	589a      	ldr	r2, [r3, r2]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	43d9      	mvns	r1, r3
 800454c:	4829      	ldr	r0, [pc, #164]	; (80045f4 <HAL_GPIO_DeInit+0x19c>)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	400a      	ands	r2, r1
 8004554:	3318      	adds	r3, #24
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	2103      	movs	r1, #3
 8004564:	4099      	lsls	r1, r3
 8004566:	000b      	movs	r3, r1
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3208      	adds	r2, #8
 8004576:	0092      	lsls	r2, r2, #2
 8004578:	58d3      	ldr	r3, [r2, r3]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	2107      	movs	r1, #7
 800457e:	400a      	ands	r2, r1
 8004580:	0092      	lsls	r2, r2, #2
 8004582:	210f      	movs	r1, #15
 8004584:	4091      	lsls	r1, r2
 8004586:	000a      	movs	r2, r1
 8004588:	43d1      	mvns	r1, r2
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	08d2      	lsrs	r2, r2, #3
 800458e:	4019      	ands	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	0092      	lsls	r2, r2, #2
 8004596:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	0052      	lsls	r2, r2, #1
 80045a0:	2103      	movs	r1, #3
 80045a2:	4091      	lsls	r1, r2
 80045a4:	000a      	movs	r2, r1
 80045a6:	43d2      	mvns	r2, r2
 80045a8:	401a      	ands	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2101      	movs	r1, #1
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4091      	lsls	r1, r2
 80045b8:	000a      	movs	r2, r1
 80045ba:	43d2      	mvns	r2, r2
 80045bc:	401a      	ands	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	0052      	lsls	r2, r2, #1
 80045ca:	2103      	movs	r1, #3
 80045cc:	4091      	lsls	r1, r2
 80045ce:	000a      	movs	r2, r1
 80045d0:	43d2      	mvns	r2, r2
 80045d2:	401a      	ands	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3301      	adds	r3, #1
 80045dc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	40da      	lsrs	r2, r3
 80045e4:	1e13      	subs	r3, r2, #0
 80045e6:	d000      	beq.n	80045ea <HAL_GPIO_DeInit+0x192>
 80045e8:	e73e      	b.n	8004468 <HAL_GPIO_DeInit+0x10>
  }
}
 80045ea:	46c0      	nop			; (mov r8, r8)
 80045ec:	46c0      	nop			; (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b006      	add	sp, #24
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021800 	.word	0x40021800
 80045f8:	50000400 	.word	0x50000400
 80045fc:	50000800 	.word	0x50000800
 8004600:	50000c00 	.word	0x50000c00
 8004604:	50001000 	.word	0x50001000

08004608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	000a      	movs	r2, r1
 8004612:	1cbb      	adds	r3, r7, #2
 8004614:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	1cba      	adds	r2, r7, #2
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	4013      	ands	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004622:	230f      	movs	r3, #15
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e003      	b.n	8004634 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800462c:	230f      	movs	r3, #15
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	2200      	movs	r2, #0
 8004632:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004634:	230f      	movs	r3, #15
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b004      	add	sp, #16
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	0008      	movs	r0, r1
 800464c:	0011      	movs	r1, r2
 800464e:	1cbb      	adds	r3, r7, #2
 8004650:	1c02      	adds	r2, r0, #0
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	1c7b      	adds	r3, r7, #1
 8004656:	1c0a      	adds	r2, r1, #0
 8004658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800465a:	1c7b      	adds	r3, r7, #1
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d004      	beq.n	800466c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004662:	1cbb      	adds	r3, r7, #2
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800466a:	e003      	b.n	8004674 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800466c:	1cbb      	adds	r3, r7, #2
 800466e:	881a      	ldrh	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	0002      	movs	r2, r0
 8004684:	1dbb      	adds	r3, r7, #6
 8004686:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	1dba      	adds	r2, r7, #6
 800468e:	8812      	ldrh	r2, [r2, #0]
 8004690:	4013      	ands	r3, r2
 8004692:	d008      	beq.n	80046a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004694:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004696:	1dba      	adds	r2, r7, #6
 8004698:	8812      	ldrh	r2, [r2, #0]
 800469a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800469c:	1dbb      	adds	r3, r7, #6
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7fe fff7 	bl	8003694 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	1dba      	adds	r2, r7, #6
 80046ac:	8812      	ldrh	r2, [r2, #0]
 80046ae:	4013      	ands	r3, r2
 80046b0:	d008      	beq.n	80046c4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80046b4:	1dba      	adds	r2, r7, #6
 80046b6:	8812      	ldrh	r2, [r2, #0]
 80046b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80046ba:	1dbb      	adds	r3, r7, #6
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f806 	bl	80046d0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021800 	.word	0x40021800

080046d0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	0002      	movs	r2, r0
 80046d8:	1dbb      	adds	r3, r7, #6
 80046da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80046dc:	46c0      	nop			; (mov r8, r8)
 80046de:	46bd      	mov	sp, r7
 80046e0:	b002      	add	sp, #8
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80046ee:	2180      	movs	r1, #128	; 0x80
 80046f0:	0049      	lsls	r1, r1, #1
 80046f2:	430a      	orrs	r2, r1
 80046f4:	601a      	str	r2, [r3, #0]
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40007000 	.word	0x40007000

08004700 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	000a      	movs	r2, r1
 800470a:	1cfb      	adds	r3, r7, #3
 800470c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <HAL_PWR_EnterSTOPMode+0x68>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2207      	movs	r2, #7
 800471a:	4393      	bics	r3, r2
 800471c:	001a      	movs	r2, r3
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_PWR_EnterSTOPMode+0x68>)
 8004720:	2101      	movs	r1, #1
 8004722:	430a      	orrs	r2, r1
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e005      	b.n	8004734 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004728:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <HAL_PWR_EnterSTOPMode+0x68>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <HAL_PWR_EnterSTOPMode+0x68>)
 800472e:	2107      	movs	r1, #7
 8004730:	438a      	bics	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004734:	4b0d      	ldr	r3, [pc, #52]	; (800476c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	4b0c      	ldr	r3, [pc, #48]	; (800476c <HAL_PWR_EnterSTOPMode+0x6c>)
 800473a:	2104      	movs	r1, #4
 800473c:	430a      	orrs	r2, r1
 800473e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004740:	1cfb      	adds	r3, r7, #3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004748:	bf30      	wfi
 800474a:	e002      	b.n	8004752 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800474c:	bf40      	sev
    __WFE();
 800474e:	bf20      	wfe
    __WFE();
 8004750:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004752:	4b06      	ldr	r3, [pc, #24]	; (800476c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004754:	691a      	ldr	r2, [r3, #16]
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004758:	2104      	movs	r1, #4
 800475a:	438a      	bics	r2, r1
 800475c:	611a      	str	r2, [r3, #16]
}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	40007000 	.word	0x40007000
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2207      	movs	r2, #7
 800477a:	4393      	bics	r3, r2
 800477c:	001a      	movs	r2, r3
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004780:	2103      	movs	r1, #3
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004786:	4b06      	ldr	r3, [pc, #24]	; (80047a0 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800478c:	2104      	movs	r1, #4
 800478e:	430a      	orrs	r2, r1
 8004790:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004792:	bf30      	wfi
}
 8004794:	46c0      	nop			; (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	40007000 	.word	0x40007000
 80047a0:	e000ed00 	.word	0xe000ed00

080047a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a19      	ldr	r2, [pc, #100]	; (8004818 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	0019      	movs	r1, r3
 80047b6:	4b17      	ldr	r3, [pc, #92]	; (8004814 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d11f      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	0013      	movs	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4912      	ldr	r1, [pc, #72]	; (8004820 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80047d6:	0018      	movs	r0, r3
 80047d8:	f7fb fcb0 	bl	800013c <__udivsi3>
 80047dc:	0003      	movs	r3, r0
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047e2:	e008      	b.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e001      	b.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e009      	b.n	800480a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	401a      	ands	r2, r3
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	429a      	cmp	r2, r3
 8004806:	d0ed      	beq.n	80047e4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b004      	add	sp, #16
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	40007000 	.word	0x40007000
 8004818:	fffff9ff 	.word	0xfffff9ff
 800481c:	2000000c 	.word	0x2000000c
 8004820:	000f4240 	.word	0x000f4240

08004824 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <LL_RCC_GetAPB1Prescaler+0x14>)
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	23e0      	movs	r3, #224	; 0xe0
 800482e:	01db      	lsls	r3, r3, #7
 8004830:	4013      	ands	r3, r2
}
 8004832:	0018      	movs	r0, r3
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000

0800483c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f000 fb50 	bl	8004ef0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2201      	movs	r2, #1
 8004856:	4013      	ands	r3, r2
 8004858:	d100      	bne.n	800485c <HAL_RCC_OscConfig+0x20>
 800485a:	e07c      	b.n	8004956 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485c:	4bc3      	ldr	r3, [pc, #780]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2238      	movs	r2, #56	; 0x38
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004866:	4bc1      	ldr	r3, [pc, #772]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	2203      	movs	r2, #3
 800486c:	4013      	ands	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b10      	cmp	r3, #16
 8004874:	d102      	bne.n	800487c <HAL_RCC_OscConfig+0x40>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d002      	beq.n	8004882 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b08      	cmp	r3, #8
 8004880:	d10b      	bne.n	800489a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004882:	4bba      	ldr	r3, [pc, #744]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	4013      	ands	r3, r2
 800488c:	d062      	beq.n	8004954 <HAL_RCC_OscConfig+0x118>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d15e      	bne.n	8004954 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e32a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	025b      	lsls	r3, r3, #9
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_OscConfig+0x7a>
 80048a6:	4bb1      	ldr	r3, [pc, #708]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	4bb0      	ldr	r3, [pc, #704]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	0249      	lsls	r1, r1, #9
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e020      	b.n	80048f8 <HAL_RCC_OscConfig+0xbc>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	23a0      	movs	r3, #160	; 0xa0
 80048bc:	02db      	lsls	r3, r3, #11
 80048be:	429a      	cmp	r2, r3
 80048c0:	d10e      	bne.n	80048e0 <HAL_RCC_OscConfig+0xa4>
 80048c2:	4baa      	ldr	r3, [pc, #680]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4ba9      	ldr	r3, [pc, #676]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048c8:	2180      	movs	r1, #128	; 0x80
 80048ca:	02c9      	lsls	r1, r1, #11
 80048cc:	430a      	orrs	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	4ba6      	ldr	r3, [pc, #664]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4ba5      	ldr	r3, [pc, #660]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	0249      	lsls	r1, r1, #9
 80048da:	430a      	orrs	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0xbc>
 80048e0:	4ba2      	ldr	r3, [pc, #648]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4ba1      	ldr	r3, [pc, #644]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048e6:	49a2      	ldr	r1, [pc, #648]	; (8004b70 <HAL_RCC_OscConfig+0x334>)
 80048e8:	400a      	ands	r2, r1
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	4b9f      	ldr	r3, [pc, #636]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b9e      	ldr	r3, [pc, #632]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80048f2:	49a0      	ldr	r1, [pc, #640]	; (8004b74 <HAL_RCC_OscConfig+0x338>)
 80048f4:	400a      	ands	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d014      	beq.n	800492a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7ff faea 	bl	8003ed8 <HAL_GetTick>
 8004904:	0003      	movs	r3, r0
 8004906:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490a:	f7ff fae5 	bl	8003ed8 <HAL_GetTick>
 800490e:	0002      	movs	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b64      	cmp	r3, #100	; 0x64
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e2e9      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491c:	4b93      	ldr	r3, [pc, #588]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	029b      	lsls	r3, r3, #10
 8004924:	4013      	ands	r3, r2
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0xce>
 8004928:	e015      	b.n	8004956 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7ff fad5 	bl	8003ed8 <HAL_GetTick>
 800492e:	0003      	movs	r3, r0
 8004930:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004934:	f7ff fad0 	bl	8003ed8 <HAL_GetTick>
 8004938:	0002      	movs	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e2d4      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004946:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	4013      	ands	r3, r2
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0xf8>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2202      	movs	r2, #2
 800495c:	4013      	ands	r3, r2
 800495e:	d100      	bne.n	8004962 <HAL_RCC_OscConfig+0x126>
 8004960:	e099      	b.n	8004a96 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004962:	4b82      	ldr	r3, [pc, #520]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2238      	movs	r2, #56	; 0x38
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496c:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2203      	movs	r2, #3
 8004972:	4013      	ands	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b10      	cmp	r3, #16
 800497a:	d102      	bne.n	8004982 <HAL_RCC_OscConfig+0x146>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d002      	beq.n	8004988 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d135      	bne.n	80049f4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004988:	4b78      	ldr	r3, [pc, #480]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4013      	ands	r3, r2
 8004992:	d005      	beq.n	80049a0 <HAL_RCC_OscConfig+0x164>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e2a7      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b72      	ldr	r3, [pc, #456]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a74      	ldr	r2, [pc, #464]	; (8004b78 <HAL_RCC_OscConfig+0x33c>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	0019      	movs	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	021a      	lsls	r2, r3, #8
 80049b0:	4b6e      	ldr	r3, [pc, #440]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d112      	bne.n	80049e2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049bc:	4b6b      	ldr	r3, [pc, #428]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a6e      	ldr	r2, [pc, #440]	; (8004b7c <HAL_RCC_OscConfig+0x340>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	4b68      	ldr	r3, [pc, #416]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80049d0:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	0adb      	lsrs	r3, r3, #11
 80049d6:	2207      	movs	r2, #7
 80049d8:	4013      	ands	r3, r2
 80049da:	4a69      	ldr	r2, [pc, #420]	; (8004b80 <HAL_RCC_OscConfig+0x344>)
 80049dc:	40da      	lsrs	r2, r3
 80049de:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <HAL_RCC_OscConfig+0x348>)
 80049e0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049e2:	4b69      	ldr	r3, [pc, #420]	; (8004b88 <HAL_RCC_OscConfig+0x34c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f7ff fa1a 	bl	8003e20 <HAL_InitTick>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d051      	beq.n	8004a94 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e27d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d030      	beq.n	8004a5e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80049fc:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a5e      	ldr	r2, [pc, #376]	; (8004b7c <HAL_RCC_OscConfig+0x340>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	4b58      	ldr	r3, [pc, #352]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a10:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	0049      	lsls	r1, r1, #1
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7ff fa5b 	bl	8003ed8 <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a28:	f7ff fa56 	bl	8003ed8 <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e25a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4013      	ands	r3, r2
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a46:	4b49      	ldr	r3, [pc, #292]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4a4b      	ldr	r2, [pc, #300]	; (8004b78 <HAL_RCC_OscConfig+0x33c>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	021a      	lsls	r2, r3, #8
 8004a56:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	605a      	str	r2, [r3, #4]
 8004a5c:	e01b      	b.n	8004a96 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b42      	ldr	r3, [pc, #264]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a64:	4949      	ldr	r1, [pc, #292]	; (8004b8c <HAL_RCC_OscConfig+0x350>)
 8004a66:	400a      	ands	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7ff fa35 	bl	8003ed8 <HAL_GetTick>
 8004a6e:	0003      	movs	r3, r0
 8004a70:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a74:	f7ff fa30 	bl	8003ed8 <HAL_GetTick>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e234      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a86:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	2380      	movs	r3, #128	; 0x80
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4013      	ands	r3, r2
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x238>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a94:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d047      	beq.n	8004b30 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004aa0:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2238      	movs	r2, #56	; 0x38
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b18      	cmp	r3, #24
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004aac:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d03c      	beq.n	8004b30 <HAL_RCC_OscConfig+0x2f4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d138      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e216      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d019      	beq.n	8004afe <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004aca:	4b28      	ldr	r3, [pc, #160]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004acc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ace:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004ad0:	2101      	movs	r1, #1
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7ff f9ff 	bl	8003ed8 <HAL_GetTick>
 8004ada:	0003      	movs	r3, r0
 8004adc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7ff f9fa 	bl	8003ed8 <HAL_GetTick>
 8004ae4:	0002      	movs	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e1fe      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af2:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af6:	2202      	movs	r2, #2
 8004af8:	4013      	ands	r3, r2
 8004afa:	d0f1      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x2a4>
 8004afc:	e018      	b.n	8004b30 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b02:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004b04:	2101      	movs	r1, #1
 8004b06:	438a      	bics	r2, r1
 8004b08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0a:	f7ff f9e5 	bl	8003ed8 <HAL_GetTick>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b14:	f7ff f9e0 	bl	8003ed8 <HAL_GetTick>
 8004b18:	0002      	movs	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e1e4      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b26:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d1f1      	bne.n	8004b14 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2204      	movs	r2, #4
 8004b36:	4013      	ands	r3, r2
 8004b38:	d100      	bne.n	8004b3c <HAL_RCC_OscConfig+0x300>
 8004b3a:	e0c7      	b.n	8004ccc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3c:	231f      	movs	r3, #31
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2238      	movs	r2, #56	; 0x38
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b20      	cmp	r3, #32
 8004b4e:	d11f      	bne.n	8004b90 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_OscConfig+0x330>)
 8004b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b54:	2202      	movs	r2, #2
 8004b56:	4013      	ands	r3, r2
 8004b58:	d100      	bne.n	8004b5c <HAL_RCC_OscConfig+0x320>
 8004b5a:	e0b7      	b.n	8004ccc <HAL_RCC_OscConfig+0x490>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d000      	beq.n	8004b66 <HAL_RCC_OscConfig+0x32a>
 8004b64:	e0b2      	b.n	8004ccc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e1c2      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	fffeffff 	.word	0xfffeffff
 8004b74:	fffbffff 	.word	0xfffbffff
 8004b78:	ffff80ff 	.word	0xffff80ff
 8004b7c:	ffffc7ff 	.word	0xffffc7ff
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	2000000c 	.word	0x2000000c
 8004b88:	20000010 	.word	0x20000010
 8004b8c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b90:	4bb5      	ldr	r3, [pc, #724]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b94:	2380      	movs	r3, #128	; 0x80
 8004b96:	055b      	lsls	r3, r3, #21
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x364>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_RCC_OscConfig+0x366>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	4bb0      	ldr	r3, [pc, #704]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004baa:	4baf      	ldr	r3, [pc, #700]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004bac:	2180      	movs	r1, #128	; 0x80
 8004bae:	0549      	lsls	r1, r1, #21
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004bb4:	4bac      	ldr	r3, [pc, #688]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	055b      	lsls	r3, r3, #21
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004bc2:	231f      	movs	r3, #31
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bca:	4ba8      	ldr	r3, [pc, #672]	; (8004e6c <HAL_RCC_OscConfig+0x630>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d11a      	bne.n	8004c0c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bd6:	4ba5      	ldr	r3, [pc, #660]	; (8004e6c <HAL_RCC_OscConfig+0x630>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4ba4      	ldr	r3, [pc, #656]	; (8004e6c <HAL_RCC_OscConfig+0x630>)
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	0049      	lsls	r1, r1, #1
 8004be0:	430a      	orrs	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004be4:	f7ff f978 	bl	8003ed8 <HAL_GetTick>
 8004be8:	0003      	movs	r3, r0
 8004bea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bee:	f7ff f973 	bl	8003ed8 <HAL_GetTick>
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e177      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c00:	4b9a      	ldr	r3, [pc, #616]	; (8004e6c <HAL_RCC_OscConfig+0x630>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d106      	bne.n	8004c22 <HAL_RCC_OscConfig+0x3e6>
 8004c14:	4b94      	ldr	r3, [pc, #592]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c18:	4b93      	ldr	r3, [pc, #588]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c20:	e01c      	b.n	8004c5c <HAL_RCC_OscConfig+0x420>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b05      	cmp	r3, #5
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCC_OscConfig+0x408>
 8004c2a:	4b8f      	ldr	r3, [pc, #572]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c2e:	4b8e      	ldr	r3, [pc, #568]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c30:	2104      	movs	r1, #4
 8004c32:	430a      	orrs	r2, r1
 8004c34:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c36:	4b8c      	ldr	r3, [pc, #560]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c3a:	4b8b      	ldr	r3, [pc, #556]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0x420>
 8004c44:	4b88      	ldr	r3, [pc, #544]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c48:	4b87      	ldr	r3, [pc, #540]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c50:	4b85      	ldr	r3, [pc, #532]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c54:	4b84      	ldr	r3, [pc, #528]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c56:	2104      	movs	r1, #4
 8004c58:	438a      	bics	r2, r1
 8004c5a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d014      	beq.n	8004c8e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7ff f938 	bl	8003ed8 <HAL_GetTick>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c6c:	e009      	b.n	8004c82 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6e:	f7ff f933 	bl	8003ed8 <HAL_GetTick>
 8004c72:	0002      	movs	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	4a7d      	ldr	r2, [pc, #500]	; (8004e70 <HAL_RCC_OscConfig+0x634>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e136      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c82:	4b79      	ldr	r3, [pc, #484]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	2202      	movs	r2, #2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x432>
 8004c8c:	e013      	b.n	8004cb6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7ff f923 	bl	8003ed8 <HAL_GetTick>
 8004c92:	0003      	movs	r3, r0
 8004c94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c96:	e009      	b.n	8004cac <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7ff f91e 	bl	8003ed8 <HAL_GetTick>
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a73      	ldr	r2, [pc, #460]	; (8004e70 <HAL_RCC_OscConfig+0x634>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e121      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cac:	4b6e      	ldr	r3, [pc, #440]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004cb6:	231f      	movs	r3, #31
 8004cb8:	18fb      	adds	r3, r7, r3
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d105      	bne.n	8004ccc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc4:	4b68      	ldr	r3, [pc, #416]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004cc6:	496b      	ldr	r1, [pc, #428]	; (8004e74 <HAL_RCC_OscConfig+0x638>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	d039      	beq.n	8004d4a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01b      	beq.n	8004d16 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cde:	4b62      	ldr	r3, [pc, #392]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004ce4:	2180      	movs	r1, #128	; 0x80
 8004ce6:	03c9      	lsls	r1, r1, #15
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7ff f8f4 	bl	8003ed8 <HAL_GetTick>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cf6:	f7ff f8ef 	bl	8003ed8 <HAL_GetTick>
 8004cfa:	0002      	movs	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e0f3      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d08:	4b57      	ldr	r3, [pc, #348]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	2380      	movs	r3, #128	; 0x80
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	4013      	ands	r3, r2
 8004d12:	d0f0      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x4ba>
 8004d14:	e019      	b.n	8004d4a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d16:	4b54      	ldr	r3, [pc, #336]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b53      	ldr	r3, [pc, #332]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d1c:	4956      	ldr	r1, [pc, #344]	; (8004e78 <HAL_RCC_OscConfig+0x63c>)
 8004d1e:	400a      	ands	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7ff f8d9 	bl	8003ed8 <HAL_GetTick>
 8004d26:	0003      	movs	r3, r0
 8004d28:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d2c:	f7ff f8d4 	bl	8003ed8 <HAL_GetTick>
 8004d30:	0002      	movs	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e0d8      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d3e:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	2380      	movs	r3, #128	; 0x80
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	4013      	ands	r3, r2
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d100      	bne.n	8004d54 <HAL_RCC_OscConfig+0x518>
 8004d52:	e0cc      	b.n	8004eee <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d54:	4b44      	ldr	r3, [pc, #272]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	2238      	movs	r2, #56	; 0x38
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d100      	bne.n	8004d62 <HAL_RCC_OscConfig+0x526>
 8004d60:	e07b      	b.n	8004e5a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d156      	bne.n	8004e18 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b3e      	ldr	r3, [pc, #248]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d70:	4942      	ldr	r1, [pc, #264]	; (8004e7c <HAL_RCC_OscConfig+0x640>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7ff f8af 	bl	8003ed8 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7ff f8aa 	bl	8003ed8 <HAL_GetTick>
 8004d84:	0002      	movs	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0ae      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d92:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	049b      	lsls	r3, r3, #18
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9e:	4b32      	ldr	r3, [pc, #200]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	4a37      	ldr	r2, [pc, #220]	; (8004e80 <HAL_RCC_OscConfig+0x644>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd2:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b24      	ldr	r3, [pc, #144]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	0449      	lsls	r1, r1, #17
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004de2:	68da      	ldr	r2, [r3, #12]
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	0549      	lsls	r1, r1, #21
 8004dea:	430a      	orrs	r2, r1
 8004dec:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7ff f873 	bl	8003ed8 <HAL_GetTick>
 8004df2:	0003      	movs	r3, r0
 8004df4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df8:	f7ff f86e 	bl	8003ed8 <HAL_GetTick>
 8004dfc:	0002      	movs	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e072      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	049b      	lsls	r3, r3, #18
 8004e12:	4013      	ands	r3, r2
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x5bc>
 8004e16:	e06a      	b.n	8004eee <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004e1e:	4917      	ldr	r1, [pc, #92]	; (8004e7c <HAL_RCC_OscConfig+0x640>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7ff f858 	bl	8003ed8 <HAL_GetTick>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7ff f853 	bl	8003ed8 <HAL_GetTick>
 8004e32:	0002      	movs	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e057      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e40:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	049b      	lsls	r3, r3, #18
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d1f0      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_OscConfig+0x62c>)
 8004e52:	490c      	ldr	r1, [pc, #48]	; (8004e84 <HAL_RCC_OscConfig+0x648>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	e049      	b.n	8004eee <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d112      	bne.n	8004e88 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e044      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	00001388 	.word	0x00001388
 8004e74:	efffffff 	.word	0xefffffff
 8004e78:	ffbfffff 	.word	0xffbfffff
 8004e7c:	feffffff 	.word	0xfeffffff
 8004e80:	11c1808c 	.word	0x11c1808c
 8004e84:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e88:	4b1b      	ldr	r3, [pc, #108]	; (8004ef8 <HAL_RCC_OscConfig+0x6bc>)
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2203      	movs	r2, #3
 8004e92:	401a      	ands	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d126      	bne.n	8004eea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2270      	movs	r2, #112	; 0x70
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d11f      	bne.n	8004eea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	23fe      	movs	r3, #254	; 0xfe
 8004eae:	01db      	lsls	r3, r3, #7
 8004eb0:	401a      	ands	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d116      	bne.n	8004eea <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	23f8      	movs	r3, #248	; 0xf8
 8004ec0:	039b      	lsls	r3, r3, #14
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d10e      	bne.n	8004eea <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	23e0      	movs	r3, #224	; 0xe0
 8004ed0:	051b      	lsls	r3, r3, #20
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	0f5b      	lsrs	r3, r3, #29
 8004ee0:	075a      	lsls	r2, r3, #29
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b008      	add	sp, #32
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	40021000 	.word	0x40021000

08004efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0e9      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b76      	ldr	r3, [pc, #472]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2207      	movs	r2, #7
 8004f16:	4013      	ands	r3, r2
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d91e      	bls.n	8004f5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b73      	ldr	r3, [pc, #460]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2207      	movs	r2, #7
 8004f24:	4393      	bics	r3, r2
 8004f26:	0019      	movs	r1, r3
 8004f28:	4b70      	ldr	r3, [pc, #448]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f30:	f7fe ffd2 	bl	8003ed8 <HAL_GetTick>
 8004f34:	0003      	movs	r3, r0
 8004f36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f38:	e009      	b.n	8004f4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f3a:	f7fe ffcd 	bl	8003ed8 <HAL_GetTick>
 8004f3e:	0002      	movs	r2, r0
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	4a6a      	ldr	r2, [pc, #424]	; (80050f0 <HAL_RCC_ClockConfig+0x1f4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0ca      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f4e:	4b67      	ldr	r3, [pc, #412]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2207      	movs	r2, #7
 8004f54:	4013      	ands	r3, r2
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1ee      	bne.n	8004f3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2202      	movs	r2, #2
 8004f62:	4013      	ands	r3, r2
 8004f64:	d015      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2204      	movs	r2, #4
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d006      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f70:	4b60      	ldr	r3, [pc, #384]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	4b5f      	ldr	r3, [pc, #380]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f76:	21e0      	movs	r1, #224	; 0xe0
 8004f78:	01c9      	lsls	r1, r1, #7
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7e:	4b5d      	ldr	r3, [pc, #372]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	4a5d      	ldr	r2, [pc, #372]	; (80050f8 <HAL_RCC_ClockConfig+0x1fc>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d057      	beq.n	800504c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d107      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa4:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	029b      	lsls	r3, r3, #10
 8004fac:	4013      	ands	r3, r2
 8004fae:	d12b      	bne.n	8005008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e097      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d107      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbc:	4b4d      	ldr	r3, [pc, #308]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	049b      	lsls	r3, r3, #18
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d11f      	bne.n	8005008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e08b      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd4:	4b47      	ldr	r3, [pc, #284]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d113      	bne.n	8005008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e07f      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fec:	4b41      	ldr	r3, [pc, #260]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d108      	bne.n	8005008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e074      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ffa:	4b3e      	ldr	r3, [pc, #248]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e06d      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005008:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2207      	movs	r2, #7
 800500e:	4393      	bics	r3, r2
 8005010:	0019      	movs	r1, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501c:	f7fe ff5c 	bl	8003ed8 <HAL_GetTick>
 8005020:	0003      	movs	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005024:	e009      	b.n	800503a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005026:	f7fe ff57 	bl	8003ed8 <HAL_GetTick>
 800502a:	0002      	movs	r2, r0
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	4a2f      	ldr	r2, [pc, #188]	; (80050f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d901      	bls.n	800503a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e054      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503a:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2238      	movs	r2, #56	; 0x38
 8005040:	401a      	ands	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	429a      	cmp	r2, r3
 800504a:	d1ec      	bne.n	8005026 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800504c:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2207      	movs	r2, #7
 8005052:	4013      	ands	r3, r2
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d21e      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2207      	movs	r2, #7
 8005060:	4393      	bics	r3, r2
 8005062:	0019      	movs	r1, r3
 8005064:	4b21      	ldr	r3, [pc, #132]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800506c:	f7fe ff34 	bl	8003ed8 <HAL_GetTick>
 8005070:	0003      	movs	r3, r0
 8005072:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005074:	e009      	b.n	800508a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f7fe ff2f 	bl	8003ed8 <HAL_GetTick>
 800507a:	0002      	movs	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e02c      	b.n	80050e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800508a:	4b18      	ldr	r3, [pc, #96]	; (80050ec <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2207      	movs	r2, #7
 8005090:	4013      	ands	r3, r2
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d1ee      	bne.n	8005076 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2204      	movs	r2, #4
 800509e:	4013      	ands	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80050a2:	4b14      	ldr	r3, [pc, #80]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a15      	ldr	r2, [pc, #84]	; (80050fc <HAL_RCC_ClockConfig+0x200>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 80050b2:	430a      	orrs	r2, r1
 80050b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80050b6:	f000 f829 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80050ba:	0001      	movs	r1, r0
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <HAL_RCC_ClockConfig+0x1f8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	0a1b      	lsrs	r3, r3, #8
 80050c2:	220f      	movs	r2, #15
 80050c4:	401a      	ands	r2, r3
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <HAL_RCC_ClockConfig+0x204>)
 80050c8:	0092      	lsls	r2, r2, #2
 80050ca:	58d3      	ldr	r3, [r2, r3]
 80050cc:	221f      	movs	r2, #31
 80050ce:	4013      	ands	r3, r2
 80050d0:	000a      	movs	r2, r1
 80050d2:	40da      	lsrs	r2, r3
 80050d4:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_RCC_ClockConfig+0x208>)
 80050d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_ClockConfig+0x20c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0018      	movs	r0, r3
 80050de:	f7fe fe9f 	bl	8003e20 <HAL_InitTick>
 80050e2:	0003      	movs	r3, r0
}
 80050e4:	0018      	movs	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b004      	add	sp, #16
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40022000 	.word	0x40022000
 80050f0:	00001388 	.word	0x00001388
 80050f4:	40021000 	.word	0x40021000
 80050f8:	fffff0ff 	.word	0xfffff0ff
 80050fc:	ffff8fff 	.word	0xffff8fff
 8005100:	080144b8 	.word	0x080144b8
 8005104:	2000000c 	.word	0x2000000c
 8005108:	20000010 	.word	0x20000010

0800510c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005112:	4b3c      	ldr	r3, [pc, #240]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	2238      	movs	r2, #56	; 0x38
 8005118:	4013      	ands	r3, r2
 800511a:	d10f      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800511c:	4b39      	ldr	r3, [pc, #228]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	0adb      	lsrs	r3, r3, #11
 8005122:	2207      	movs	r2, #7
 8005124:	4013      	ands	r3, r2
 8005126:	2201      	movs	r2, #1
 8005128:	409a      	lsls	r2, r3
 800512a:	0013      	movs	r3, r2
 800512c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	4835      	ldr	r0, [pc, #212]	; (8005208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005132:	f7fb f803 	bl	800013c <__udivsi3>
 8005136:	0003      	movs	r3, r0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e05d      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800513c:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2238      	movs	r2, #56	; 0x38
 8005142:	4013      	ands	r3, r2
 8005144:	2b08      	cmp	r3, #8
 8005146:	d102      	bne.n	800514e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005148:	4b30      	ldr	r3, [pc, #192]	; (800520c <HAL_RCC_GetSysClockFreq+0x100>)
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e054      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800514e:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2238      	movs	r2, #56	; 0x38
 8005154:	4013      	ands	r3, r2
 8005156:	2b10      	cmp	r3, #16
 8005158:	d138      	bne.n	80051cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800515a:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2203      	movs	r2, #3
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	2207      	movs	r2, #7
 800516c:	4013      	ands	r3, r2
 800516e:	3301      	adds	r3, #1
 8005170:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b03      	cmp	r3, #3
 8005176:	d10d      	bne.n	8005194 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	4824      	ldr	r0, [pc, #144]	; (800520c <HAL_RCC_GetSysClockFreq+0x100>)
 800517c:	f7fa ffde 	bl	800013c <__udivsi3>
 8005180:	0003      	movs	r3, r0
 8005182:	0019      	movs	r1, r3
 8005184:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	0a1b      	lsrs	r3, r3, #8
 800518a:	227f      	movs	r2, #127	; 0x7f
 800518c:	4013      	ands	r3, r2
 800518e:	434b      	muls	r3, r1
 8005190:	617b      	str	r3, [r7, #20]
        break;
 8005192:	e00d      	b.n	80051b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	481c      	ldr	r0, [pc, #112]	; (8005208 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005198:	f7fa ffd0 	bl	800013c <__udivsi3>
 800519c:	0003      	movs	r3, r0
 800519e:	0019      	movs	r1, r3
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	0a1b      	lsrs	r3, r3, #8
 80051a6:	227f      	movs	r2, #127	; 0x7f
 80051a8:	4013      	ands	r3, r2
 80051aa:	434b      	muls	r3, r1
 80051ac:	617b      	str	r3, [r7, #20]
        break;
 80051ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	0f5b      	lsrs	r3, r3, #29
 80051b6:	2207      	movs	r2, #7
 80051b8:	4013      	ands	r3, r2
 80051ba:	3301      	adds	r3, #1
 80051bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	6978      	ldr	r0, [r7, #20]
 80051c2:	f7fa ffbb 	bl	800013c <__udivsi3>
 80051c6:	0003      	movs	r3, r0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e015      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051cc:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2238      	movs	r2, #56	; 0x38
 80051d2:	4013      	ands	r3, r2
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d103      	bne.n	80051e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	613b      	str	r3, [r7, #16]
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051e0:	4b08      	ldr	r3, [pc, #32]	; (8005204 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2238      	movs	r2, #56	; 0x38
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b18      	cmp	r3, #24
 80051ea:	d103      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051ec:	23fa      	movs	r3, #250	; 0xfa
 80051ee:	01db      	lsls	r3, r3, #7
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e001      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051f8:	693b      	ldr	r3, [r7, #16]
}
 80051fa:	0018      	movs	r0, r3
 80051fc:	46bd      	mov	sp, r7
 80051fe:	b006      	add	sp, #24
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	40021000 	.word	0x40021000
 8005208:	00f42400 	.word	0x00f42400
 800520c:	007a1200 	.word	0x007a1200

08005210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005214:	4b02      	ldr	r3, [pc, #8]	; (8005220 <HAL_RCC_GetHCLKFreq+0x10>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	0018      	movs	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	46c0      	nop			; (mov r8, r8)
 8005220:	2000000c 	.word	0x2000000c

08005224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005224:	b5b0      	push	{r4, r5, r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005228:	f7ff fff2 	bl	8005210 <HAL_RCC_GetHCLKFreq>
 800522c:	0004      	movs	r4, r0
 800522e:	f7ff faf9 	bl	8004824 <LL_RCC_GetAPB1Prescaler>
 8005232:	0003      	movs	r3, r0
 8005234:	0b1a      	lsrs	r2, r3, #12
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005238:	0092      	lsls	r2, r2, #2
 800523a:	58d3      	ldr	r3, [r2, r3]
 800523c:	221f      	movs	r2, #31
 800523e:	4013      	ands	r3, r2
 8005240:	40dc      	lsrs	r4, r3
 8005242:	0023      	movs	r3, r4
}
 8005244:	0018      	movs	r0, r3
 8005246:	46bd      	mov	sp, r7
 8005248:	bdb0      	pop	{r4, r5, r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	080144f8 	.word	0x080144f8

08005250 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005258:	2313      	movs	r3, #19
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005260:	2312      	movs	r3, #18
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	4013      	ands	r3, r2
 8005272:	d100      	bne.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005274:	e0ad      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2011      	movs	r0, #17
 8005278:	183b      	adds	r3, r7, r0
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527e:	4b47      	ldr	r3, [pc, #284]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	055b      	lsls	r3, r3, #21
 8005286:	4013      	ands	r3, r2
 8005288:	d110      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	4b44      	ldr	r3, [pc, #272]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800528c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528e:	4b43      	ldr	r3, [pc, #268]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	0549      	lsls	r1, r1, #21
 8005294:	430a      	orrs	r2, r1
 8005296:	63da      	str	r2, [r3, #60]	; 0x3c
 8005298:	4b40      	ldr	r3, [pc, #256]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800529a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800529c:	2380      	movs	r3, #128	; 0x80
 800529e:	055b      	lsls	r3, r3, #21
 80052a0:	4013      	ands	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]
 80052a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a6:	183b      	adds	r3, r7, r0
 80052a8:	2201      	movs	r2, #1
 80052aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ac:	4b3c      	ldr	r3, [pc, #240]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80052b2:	2180      	movs	r1, #128	; 0x80
 80052b4:	0049      	lsls	r1, r1, #1
 80052b6:	430a      	orrs	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ba:	f7fe fe0d 	bl	8003ed8 <HAL_GetTick>
 80052be:	0003      	movs	r3, r0
 80052c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052c2:	e00b      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c4:	f7fe fe08 	bl	8003ed8 <HAL_GetTick>
 80052c8:	0002      	movs	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d904      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80052d2:	2313      	movs	r3, #19
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	2203      	movs	r2, #3
 80052d8:	701a      	strb	r2, [r3, #0]
        break;
 80052da:	e005      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052dc:	4b30      	ldr	r3, [pc, #192]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	d0ed      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80052e8:	2313      	movs	r3, #19
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d15e      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052f2:	4b2a      	ldr	r3, [pc, #168]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f6:	23c0      	movs	r3, #192	; 0xc0
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4013      	ands	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d019      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d014      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800530e:	4b23      	ldr	r3, [pc, #140]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005312:	4a24      	ldr	r2, [pc, #144]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005314:	4013      	ands	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005318:	4b20      	ldr	r3, [pc, #128]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800531a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800531c:	4b1f      	ldr	r3, [pc, #124]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800531e:	2180      	movs	r1, #128	; 0x80
 8005320:	0249      	lsls	r1, r1, #9
 8005322:	430a      	orrs	r2, r1
 8005324:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005326:	4b1d      	ldr	r3, [pc, #116]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005328:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800532a:	4b1c      	ldr	r3, [pc, #112]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800532c:	491e      	ldr	r1, [pc, #120]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800532e:	400a      	ands	r2, r1
 8005330:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005332:	4b1a      	ldr	r3, [pc, #104]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2201      	movs	r2, #1
 800533c:	4013      	ands	r3, r2
 800533e:	d016      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fe fdca 	bl	8003ed8 <HAL_GetTick>
 8005344:	0003      	movs	r3, r0
 8005346:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005348:	e00c      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7fe fdc5 	bl	8003ed8 <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d904      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800535a:	2313      	movs	r3, #19
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2203      	movs	r2, #3
 8005360:	701a      	strb	r2, [r3, #0]
            break;
 8005362:	e004      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005364:	4b0d      	ldr	r3, [pc, #52]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	2202      	movs	r2, #2
 800536a:	4013      	ands	r3, r2
 800536c:	d0ed      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800536e:	2313      	movs	r3, #19
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005378:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	4a09      	ldr	r2, [pc, #36]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800537e:	4013      	ands	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005386:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005388:	430a      	orrs	r2, r1
 800538a:	65da      	str	r2, [r3, #92]	; 0x5c
 800538c:	e016      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800538e:	2312      	movs	r3, #18
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2213      	movs	r2, #19
 8005394:	18ba      	adds	r2, r7, r2
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	701a      	strb	r2, [r3, #0]
 800539a:	e00f      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800539c:	40021000 	.word	0x40021000
 80053a0:	40007000 	.word	0x40007000
 80053a4:	fffffcff 	.word	0xfffffcff
 80053a8:	fffeffff 	.word	0xfffeffff
 80053ac:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b0:	2312      	movs	r3, #18
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2213      	movs	r2, #19
 80053b6:	18ba      	adds	r2, r7, r2
 80053b8:	7812      	ldrb	r2, [r2, #0]
 80053ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053bc:	2311      	movs	r3, #17
 80053be:	18fb      	adds	r3, r7, r3
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d105      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c6:	4bb6      	ldr	r3, [pc, #728]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ca:	4bb5      	ldr	r3, [pc, #724]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053cc:	49b5      	ldr	r1, [pc, #724]	; (80056a4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80053ce:	400a      	ands	r2, r1
 80053d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2201      	movs	r2, #1
 80053d8:	4013      	ands	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053dc:	4bb0      	ldr	r3, [pc, #704]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	2203      	movs	r2, #3
 80053e2:	4393      	bics	r3, r2
 80053e4:	0019      	movs	r1, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4bad      	ldr	r3, [pc, #692]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2202      	movs	r2, #2
 80053f6:	4013      	ands	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053fa:	4ba9      	ldr	r3, [pc, #676]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fe:	220c      	movs	r2, #12
 8005400:	4393      	bics	r3, r2
 8005402:	0019      	movs	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	4ba5      	ldr	r3, [pc, #660]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800540a:	430a      	orrs	r2, r1
 800540c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2204      	movs	r2, #4
 8005414:	4013      	ands	r3, r2
 8005416:	d009      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005418:	4ba1      	ldr	r3, [pc, #644]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800541a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541c:	2230      	movs	r2, #48	; 0x30
 800541e:	4393      	bics	r3, r2
 8005420:	0019      	movs	r1, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	4b9e      	ldr	r3, [pc, #632]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005428:	430a      	orrs	r2, r1
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2210      	movs	r2, #16
 8005432:	4013      	ands	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005436:	4b9a      	ldr	r3, [pc, #616]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543a:	4a9b      	ldr	r2, [pc, #620]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800543c:	4013      	ands	r3, r2
 800543e:	0019      	movs	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	4b96      	ldr	r3, [pc, #600]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005446:	430a      	orrs	r2, r1
 8005448:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	015b      	lsls	r3, r3, #5
 8005452:	4013      	ands	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005456:	4b92      	ldr	r3, [pc, #584]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545a:	4a94      	ldr	r2, [pc, #592]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800545c:	4013      	ands	r3, r2
 800545e:	0019      	movs	r1, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	4b8e      	ldr	r3, [pc, #568]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005466:	430a      	orrs	r2, r1
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4013      	ands	r3, r2
 8005474:	d009      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005476:	4b8a      	ldr	r3, [pc, #552]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547a:	4a8d      	ldr	r2, [pc, #564]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005484:	4b86      	ldr	r3, [pc, #536]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005486:	430a      	orrs	r2, r1
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4013      	ands	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005496:	4b82      	ldr	r3, [pc, #520]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	4a86      	ldr	r2, [pc, #536]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4b7e      	ldr	r3, [pc, #504]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054a6:	430a      	orrs	r2, r1
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2220      	movs	r2, #32
 80054b0:	4013      	ands	r3, r2
 80054b2:	d009      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054b4:	4b7a      	ldr	r3, [pc, #488]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b8:	4a7f      	ldr	r2, [pc, #508]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	0019      	movs	r1, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	4b77      	ldr	r3, [pc, #476]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c4:	430a      	orrs	r2, r1
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2240      	movs	r2, #64	; 0x40
 80054ce:	4013      	ands	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054d2:	4b73      	ldr	r3, [pc, #460]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d6:	4a79      	ldr	r2, [pc, #484]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80054d8:	4013      	ands	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	4b6f      	ldr	r3, [pc, #444]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e2:	430a      	orrs	r2, r1
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	2380      	movs	r3, #128	; 0x80
 80054ec:	01db      	lsls	r3, r3, #7
 80054ee:	4013      	ands	r3, r2
 80054f0:	d015      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f2:	4b6b      	ldr	r3, [pc, #428]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	0899      	lsrs	r1, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fe:	4b68      	ldr	r3, [pc, #416]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005500:	430a      	orrs	r2, r1
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	05db      	lsls	r3, r3, #23
 800550c:	429a      	cmp	r2, r3
 800550e:	d106      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005510:	4b63      	ldr	r3, [pc, #396]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005516:	2180      	movs	r1, #128	; 0x80
 8005518:	0249      	lsls	r1, r1, #9
 800551a:	430a      	orrs	r2, r1
 800551c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	031b      	lsls	r3, r3, #12
 8005526:	4013      	ands	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800552a:	4b5d      	ldr	r3, [pc, #372]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	2240      	movs	r2, #64	; 0x40
 8005530:	4393      	bics	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005538:	4b59      	ldr	r3, [pc, #356]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800553a:	430a      	orrs	r2, r1
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	039b      	lsls	r3, r3, #14
 8005546:	4013      	ands	r3, r2
 8005548:	d016      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800554a:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	4a5c      	ldr	r2, [pc, #368]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005550:	4013      	ands	r3, r2
 8005552:	0019      	movs	r1, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005558:	4b51      	ldr	r3, [pc, #324]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800555a:	430a      	orrs	r2, r1
 800555c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	03db      	lsls	r3, r3, #15
 8005566:	429a      	cmp	r2, r3
 8005568:	d106      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800556a:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	4b4c      	ldr	r3, [pc, #304]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	0449      	lsls	r1, r1, #17
 8005574:	430a      	orrs	r2, r1
 8005576:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	03db      	lsls	r3, r3, #15
 8005580:	4013      	ands	r3, r2
 8005582:	d016      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005584:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005588:	4a4e      	ldr	r2, [pc, #312]	; (80056c4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800558a:	4013      	ands	r3, r2
 800558c:	0019      	movs	r1, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005592:	4b43      	ldr	r3, [pc, #268]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005594:	430a      	orrs	r2, r1
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	045b      	lsls	r3, r3, #17
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d106      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055a4:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055a6:	68da      	ldr	r2, [r3, #12]
 80055a8:	4b3d      	ldr	r3, [pc, #244]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055aa:	2180      	movs	r1, #128	; 0x80
 80055ac:	0449      	lsls	r1, r1, #17
 80055ae:	430a      	orrs	r2, r1
 80055b0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4013      	ands	r3, r2
 80055bc:	d014      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80055be:	4b38      	ldr	r3, [pc, #224]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	2203      	movs	r2, #3
 80055c4:	4393      	bics	r3, r2
 80055c6:	0019      	movs	r1, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055ce:	430a      	orrs	r2, r1
 80055d0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d106      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055da:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	4b30      	ldr	r3, [pc, #192]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	0249      	lsls	r1, r1, #9
 80055e4:	430a      	orrs	r2, r1
 80055e6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	2380      	movs	r3, #128	; 0x80
 80055ee:	019b      	lsls	r3, r3, #6
 80055f0:	4013      	ands	r3, r2
 80055f2:	d014      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80055f4:	4b2a      	ldr	r3, [pc, #168]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	220c      	movs	r2, #12
 80055fa:	4393      	bics	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005602:	4b27      	ldr	r3, [pc, #156]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005604:	430a      	orrs	r2, r1
 8005606:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b04      	cmp	r3, #4
 800560e:	d106      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005610:	4b23      	ldr	r3, [pc, #140]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	0249      	lsls	r1, r1, #9
 800561a:	430a      	orrs	r2, r1
 800561c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	2380      	movs	r3, #128	; 0x80
 8005624:	045b      	lsls	r3, r3, #17
 8005626:	4013      	ands	r3, r2
 8005628:	d016      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800562a:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800562c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800562e:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005630:	4013      	ands	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005638:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800563a:	430a      	orrs	r2, r1
 800563c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	019b      	lsls	r3, r3, #6
 8005646:	429a      	cmp	r2, r3
 8005648:	d106      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	0449      	lsls	r1, r1, #17
 8005654:	430a      	orrs	r2, r1
 8005656:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	049b      	lsls	r3, r3, #18
 8005660:	4013      	ands	r3, r2
 8005662:	d016      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005664:	4b0e      	ldr	r3, [pc, #56]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005668:	4a10      	ldr	r2, [pc, #64]	; (80056ac <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800566a:	4013      	ands	r3, r2
 800566c:	0019      	movs	r1, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005674:	430a      	orrs	r2, r1
 8005676:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800567c:	2380      	movs	r3, #128	; 0x80
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	429a      	cmp	r2, r3
 8005682:	d106      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	0449      	lsls	r1, r1, #17
 800568e:	430a      	orrs	r2, r1
 8005690:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005692:	2312      	movs	r3, #18
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	781b      	ldrb	r3, [r3, #0]
}
 8005698:	0018      	movs	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	b006      	add	sp, #24
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40021000 	.word	0x40021000
 80056a4:	efffffff 	.word	0xefffffff
 80056a8:	fffff3ff 	.word	0xfffff3ff
 80056ac:	fffffcff 	.word	0xfffffcff
 80056b0:	fff3ffff 	.word	0xfff3ffff
 80056b4:	ffcfffff 	.word	0xffcfffff
 80056b8:	ffffcfff 	.word	0xffffcfff
 80056bc:	ffff3fff 	.word	0xffff3fff
 80056c0:	ffbfffff 	.word	0xffbfffff
 80056c4:	feffffff 	.word	0xfeffffff

080056c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80056d0:	230f      	movs	r3, #15
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	2201      	movs	r2, #1
 80056d6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d100      	bne.n	80056e0 <HAL_RTC_Init+0x18>
 80056de:	e08c      	b.n	80057fa <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2229      	movs	r2, #41	; 0x29
 80056e4:	5c9b      	ldrb	r3, [r3, r2]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2228      	movs	r2, #40	; 0x28
 80056f0:	2100      	movs	r1, #0
 80056f2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2288      	movs	r2, #136	; 0x88
 80056f8:	0212      	lsls	r2, r2, #8
 80056fa:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0018      	movs	r0, r3
 8005700:	f7fe f800 	bl	8003704 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2229      	movs	r2, #41	; 0x29
 8005708:	2102      	movs	r1, #2
 800570a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2210      	movs	r2, #16
 8005714:	4013      	ands	r3, r2
 8005716:	2b10      	cmp	r3, #16
 8005718:	d062      	beq.n	80057e0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	22ca      	movs	r2, #202	; 0xca
 8005720:	625a      	str	r2, [r3, #36]	; 0x24
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2253      	movs	r2, #83	; 0x53
 8005728:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800572a:	250f      	movs	r5, #15
 800572c:	197c      	adds	r4, r7, r5
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	0018      	movs	r0, r3
 8005732:	f000 fbf3 	bl	8005f1c <RTC_EnterInitMode>
 8005736:	0003      	movs	r3, r0
 8005738:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800573a:	0028      	movs	r0, r5
 800573c:	183b      	adds	r3, r7, r0
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d12c      	bne.n	800579e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	492e      	ldr	r1, [pc, #184]	; (8005808 <HAL_RTC_Init+0x140>)
 8005750:	400a      	ands	r2, r1
 8005752:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6999      	ldr	r1, [r3, #24]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6912      	ldr	r2, [r2, #16]
 800577a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6919      	ldr	r1, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	041a      	lsls	r2, r3, #16
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005790:	183c      	adds	r4, r7, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	0018      	movs	r0, r3
 8005796:	f000 fc03 	bl	8005fa0 <RTC_ExitInitMode>
 800579a:	0003      	movs	r3, r0
 800579c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800579e:	230f      	movs	r3, #15
 80057a0:	18fb      	adds	r3, r7, r3
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d116      	bne.n	80057d6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699a      	ldr	r2, [r3, #24]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	00d2      	lsls	r2, r2, #3
 80057b4:	08d2      	lsrs	r2, r2, #3
 80057b6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6999      	ldr	r1, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	22ff      	movs	r2, #255	; 0xff
 80057dc:	625a      	str	r2, [r3, #36]	; 0x24
 80057de:	e003      	b.n	80057e8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80057e0:	230f      	movs	r3, #15
 80057e2:	18fb      	adds	r3, r7, r3
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80057e8:	230f      	movs	r3, #15
 80057ea:	18fb      	adds	r3, r7, r3
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2229      	movs	r2, #41	; 0x29
 80057f6:	2101      	movs	r1, #1
 80057f8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80057fa:	230f      	movs	r3, #15
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	781b      	ldrb	r3, [r3, #0]
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	b004      	add	sp, #16
 8005806:	bdb0      	pop	{r4, r5, r7, pc}
 8005808:	fb8fffbf 	.word	0xfb8fffbf

0800580c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800580c:	b5b0      	push	{r4, r5, r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2228      	movs	r2, #40	; 0x28
 800581c:	5c9b      	ldrb	r3, [r3, r2]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_RTC_SetTime+0x1a>
 8005822:	2302      	movs	r3, #2
 8005824:	e092      	b.n	800594c <HAL_RTC_SetTime+0x140>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2228      	movs	r2, #40	; 0x28
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2229      	movs	r2, #41	; 0x29
 8005832:	2102      	movs	r1, #2
 8005834:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	22ca      	movs	r2, #202	; 0xca
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2253      	movs	r2, #83	; 0x53
 8005844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005846:	2513      	movs	r5, #19
 8005848:	197c      	adds	r4, r7, r5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	0018      	movs	r0, r3
 800584e:	f000 fb65 	bl	8005f1c <RTC_EnterInitMode>
 8005852:	0003      	movs	r3, r0
 8005854:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005856:	197b      	adds	r3, r7, r5
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d162      	bne.n	8005924 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d125      	bne.n	80058b0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	4013      	ands	r3, r2
 800586e:	d102      	bne.n	8005876 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	0018      	movs	r0, r3
 800587c:	f000 fbd4 	bl	8006028 <RTC_ByteToBcd2>
 8005880:	0003      	movs	r3, r0
 8005882:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	0018      	movs	r0, r3
 800588a:	f000 fbcd 	bl	8006028 <RTC_ByteToBcd2>
 800588e:	0003      	movs	r3, r0
 8005890:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005892:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	789b      	ldrb	r3, [r3, #2]
 8005898:	0018      	movs	r0, r3
 800589a:	f000 fbc5 	bl	8006028 <RTC_ByteToBcd2>
 800589e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058a0:	0022      	movs	r2, r4
 80058a2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	78db      	ldrb	r3, [r3, #3]
 80058a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e017      	b.n	80058e0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2240      	movs	r2, #64	; 0x40
 80058b8:	4013      	ands	r3, r2
 80058ba:	d102      	bne.n	80058c2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058ce:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058d4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	491b      	ldr	r1, [pc, #108]	; (8005954 <HAL_RTC_SetTime+0x148>)
 80058e8:	400a      	ands	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4918      	ldr	r1, [pc, #96]	; (8005958 <HAL_RTC_SetTime+0x14c>)
 80058f8:	400a      	ands	r2, r1
 80058fa:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6999      	ldr	r1, [r3, #24]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005914:	2313      	movs	r3, #19
 8005916:	18fc      	adds	r4, r7, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	0018      	movs	r0, r3
 800591c:	f000 fb40 	bl	8005fa0 <RTC_ExitInitMode>
 8005920:	0003      	movs	r3, r0
 8005922:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800592c:	2313      	movs	r3, #19
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d103      	bne.n	800593e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2229      	movs	r2, #41	; 0x29
 800593a:	2101      	movs	r1, #1
 800593c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2228      	movs	r2, #40	; 0x28
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]

  return status;
 8005946:	2313      	movs	r3, #19
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	781b      	ldrb	r3, [r3, #0]
}
 800594c:	0018      	movs	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	b006      	add	sp, #24
 8005952:	bdb0      	pop	{r4, r5, r7, pc}
 8005954:	007f7f7f 	.word	0x007f7f7f
 8005958:	fffbffff 	.word	0xfffbffff

0800595c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	045b      	lsls	r3, r3, #17
 800597a:	0c5a      	lsrs	r2, r3, #17
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_RTC_GetTime+0xb4>)
 8005988:	4013      	ands	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	0c1b      	lsrs	r3, r3, #16
 8005990:	b2db      	uxtb	r3, r3
 8005992:	223f      	movs	r2, #63	; 0x3f
 8005994:	4013      	ands	r3, r2
 8005996:	b2da      	uxtb	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	227f      	movs	r2, #127	; 0x7f
 80059a4:	4013      	ands	r3, r2
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	227f      	movs	r2, #127	; 0x7f
 80059b2:	4013      	ands	r3, r2
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	0d9b      	lsrs	r3, r3, #22
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2201      	movs	r2, #1
 80059c2:	4013      	ands	r3, r2
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d11a      	bne.n	8005a06 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	0018      	movs	r0, r3
 80059d6:	f000 fb4f 	bl	8006078 <RTC_Bcd2ToByte>
 80059da:	0003      	movs	r3, r0
 80059dc:	001a      	movs	r2, r3
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	785b      	ldrb	r3, [r3, #1]
 80059e6:	0018      	movs	r0, r3
 80059e8:	f000 fb46 	bl	8006078 <RTC_Bcd2ToByte>
 80059ec:	0003      	movs	r3, r0
 80059ee:	001a      	movs	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	789b      	ldrb	r3, [r3, #2]
 80059f8:	0018      	movs	r0, r3
 80059fa:	f000 fb3d 	bl	8006078 <RTC_Bcd2ToByte>
 80059fe:	0003      	movs	r3, r0
 8005a00:	001a      	movs	r2, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b006      	add	sp, #24
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	007f7f7f 	.word	0x007f7f7f

08005a14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a14:	b5b0      	push	{r4, r5, r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2228      	movs	r2, #40	; 0x28
 8005a24:	5c9b      	ldrb	r3, [r3, r2]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_RTC_SetDate+0x1a>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e07e      	b.n	8005b2c <HAL_RTC_SetDate+0x118>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2228      	movs	r2, #40	; 0x28
 8005a32:	2101      	movs	r1, #1
 8005a34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2229      	movs	r2, #41	; 0x29
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10e      	bne.n	8005a62 <HAL_RTC_SetDate+0x4e>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	785b      	ldrb	r3, [r3, #1]
 8005a48:	001a      	movs	r2, r3
 8005a4a:	2310      	movs	r3, #16
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	d008      	beq.n	8005a62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2210      	movs	r2, #16
 8005a56:	4393      	bics	r3, r2
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	330a      	adds	r3, #10
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11c      	bne.n	8005aa2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f000 fadb 	bl	8006028 <RTC_ByteToBcd2>
 8005a72:	0003      	movs	r3, r0
 8005a74:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 fad4 	bl	8006028 <RTC_ByteToBcd2>
 8005a80:	0003      	movs	r3, r0
 8005a82:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a84:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	789b      	ldrb	r3, [r3, #2]
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 facc 	bl	8006028 <RTC_ByteToBcd2>
 8005a90:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a92:	0022      	movs	r2, r4
 8005a94:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e00e      	b.n	8005ac0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	78db      	ldrb	r3, [r3, #3]
 8005aa6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005aae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005ab4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	22ca      	movs	r2, #202	; 0xca
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2253      	movs	r2, #83	; 0x53
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ad0:	2513      	movs	r5, #19
 8005ad2:	197c      	adds	r4, r7, r5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	f000 fa20 	bl	8005f1c <RTC_EnterInitMode>
 8005adc:	0003      	movs	r3, r0
 8005ade:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005ae0:	0028      	movs	r0, r5
 8005ae2:	183b      	adds	r3, r7, r0
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	697a      	ldr	r2, [r7, #20]
 8005af0:	4910      	ldr	r1, [pc, #64]	; (8005b34 <HAL_RTC_SetDate+0x120>)
 8005af2:	400a      	ands	r2, r1
 8005af4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005af6:	183c      	adds	r4, r7, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	0018      	movs	r0, r3
 8005afc:	f000 fa50 	bl	8005fa0 <RTC_ExitInitMode>
 8005b00:	0003      	movs	r3, r0
 8005b02:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	22ff      	movs	r2, #255	; 0xff
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005b0c:	2313      	movs	r3, #19
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2229      	movs	r2, #41	; 0x29
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2228      	movs	r2, #40	; 0x28
 8005b22:	2100      	movs	r1, #0
 8005b24:	5499      	strb	r1, [r3, r2]

  return status;
 8005b26:	2313      	movs	r3, #19
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	781b      	ldrb	r3, [r3, #0]
}
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b006      	add	sp, #24
 8005b32:	bdb0      	pop	{r4, r5, r7, pc}
 8005b34:	00ffff3f 	.word	0x00ffff3f

08005b38 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4a21      	ldr	r2, [pc, #132]	; (8005bd0 <HAL_RTC_GetDate+0x98>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	0c1b      	lsrs	r3, r3, #16
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	221f      	movs	r2, #31
 8005b62:	4013      	ands	r3, r2
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	223f      	movs	r2, #63	; 0x3f
 8005b70:	4013      	ands	r3, r2
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	0b5b      	lsrs	r3, r3, #13
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2207      	movs	r2, #7
 8005b80:	4013      	ands	r3, r2
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11a      	bne.n	8005bc4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	78db      	ldrb	r3, [r3, #3]
 8005b92:	0018      	movs	r0, r3
 8005b94:	f000 fa70 	bl	8006078 <RTC_Bcd2ToByte>
 8005b98:	0003      	movs	r3, r0
 8005b9a:	001a      	movs	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 fa67 	bl	8006078 <RTC_Bcd2ToByte>
 8005baa:	0003      	movs	r3, r0
 8005bac:	001a      	movs	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	789b      	ldrb	r3, [r3, #2]
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	f000 fa5e 	bl	8006078 <RTC_Bcd2ToByte>
 8005bbc:	0003      	movs	r3, r0
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b006      	add	sp, #24
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	00ffff3f 	.word	0x00ffff3f

08005bd4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005bd4:	b590      	push	{r4, r7, lr}
 8005bd6:	b089      	sub	sp, #36	; 0x24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2228      	movs	r2, #40	; 0x28
 8005be4:	5c9b      	ldrb	r3, [r3, r2]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_RTC_SetAlarm_IT+0x1a>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e127      	b.n	8005e3e <HAL_RTC_SetAlarm_IT+0x26a>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2228      	movs	r2, #40	; 0x28
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2229      	movs	r2, #41	; 0x29
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d136      	bne.n	8005c72 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	2240      	movs	r2, #64	; 0x40
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d102      	bne.n	8005c16 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f000 fa04 	bl	8006028 <RTC_ByteToBcd2>
 8005c20:	0003      	movs	r3, r0
 8005c22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f000 f9fd 	bl	8006028 <RTC_ByteToBcd2>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	789b      	ldrb	r3, [r3, #2]
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f000 f9f5 	bl	8006028 <RTC_ByteToBcd2>
 8005c3e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c40:	0022      	movs	r2, r4
 8005c42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	78db      	ldrb	r3, [r3, #3]
 8005c48:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2220      	movs	r2, #32
 8005c52:	5c9b      	ldrb	r3, [r3, r2]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 f9e7 	bl	8006028 <RTC_ByteToBcd2>
 8005c5a:	0003      	movs	r3, r0
 8005c5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c5e:	0022      	movs	r2, r4
 8005c60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005c66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e022      	b.n	8005cb8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2240      	movs	r2, #64	; 0x40
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d102      	bne.n	8005c84 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2200      	movs	r2, #0
 8005c82:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005c90:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005c9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2120      	movs	r1, #32
 8005ca4:	5c5b      	ldrb	r3, [r3, r1]
 8005ca6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ca8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005cae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	22ca      	movs	r2, #202	; 0xca
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2253      	movs	r2, #83	; 0x53
 8005cd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d14c      	bne.n	8005d7a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4957      	ldr	r1, [pc, #348]	; (8005e48 <HAL_RTC_SetAlarm_IT+0x274>)
 8005cec:	400a      	ands	r2, r1
 8005cee:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005d00:	f7fe f8ea 	bl	8003ed8 <HAL_GetTick>
 8005d04:	0003      	movs	r3, r0
 8005d06:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d08:	e016      	b.n	8005d38 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d0a:	f7fe f8e5 	bl	8003ed8 <HAL_GetTick>
 8005d0e:	0002      	movs	r2, r0
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	1ad2      	subs	r2, r2, r3
 8005d14:	23fa      	movs	r3, #250	; 0xfa
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d90d      	bls.n	8005d38 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	22ff      	movs	r2, #255	; 0xff
 8005d22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2229      	movs	r2, #41	; 0x29
 8005d28:	2103      	movs	r1, #3
 8005d2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2228      	movs	r2, #40	; 0x28
 8005d30:	2100      	movs	r1, #0
 8005d32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e082      	b.n	8005e3e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4013      	ands	r3, r2
 8005d42:	d0e2      	beq.n	8005d0a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2180      	movs	r1, #128	; 0x80
 8005d60:	0049      	lsls	r1, r1, #1
 8005d62:	430a      	orrs	r2, r1
 8005d64:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	0149      	lsls	r1, r1, #5
 8005d74:	430a      	orrs	r2, r1
 8005d76:	619a      	str	r2, [r3, #24]
 8005d78:	e04b      	b.n	8005e12 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4931      	ldr	r1, [pc, #196]	; (8005e4c <HAL_RTC_SetAlarm_IT+0x278>)
 8005d86:	400a      	ands	r2, r1
 8005d88:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2102      	movs	r1, #2
 8005d96:	430a      	orrs	r2, r1
 8005d98:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005d9a:	f7fe f89d 	bl	8003ed8 <HAL_GetTick>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005da2:	e016      	b.n	8005dd2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005da4:	f7fe f898 	bl	8003ed8 <HAL_GetTick>
 8005da8:	0002      	movs	r2, r0
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	1ad2      	subs	r2, r2, r3
 8005dae:	23fa      	movs	r3, #250	; 0xfa
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d90d      	bls.n	8005dd2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2229      	movs	r2, #41	; 0x29
 8005dc2:	2103      	movs	r1, #3
 8005dc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2228      	movs	r2, #40	; 0x28
 8005dca:	2100      	movs	r1, #0
 8005dcc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e035      	b.n	8005e3e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d0e2      	beq.n	8005da4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	0089      	lsls	r1, r1, #2
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	0189      	lsls	r1, r1, #6
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005e12:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	58d3      	ldr	r3, [r2, r3]
 8005e18:	490d      	ldr	r1, [pc, #52]	; (8005e50 <HAL_RTC_SetAlarm_IT+0x27c>)
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	0312      	lsls	r2, r2, #12
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2229      	movs	r2, #41	; 0x29
 8005e30:	2101      	movs	r1, #1
 8005e32:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2228      	movs	r2, #40	; 0x28
 8005e38:	2100      	movs	r1, #0
 8005e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	0018      	movs	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b009      	add	sp, #36	; 0x24
 8005e44:	bd90      	pop	{r4, r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	fffffeff 	.word	0xfffffeff
 8005e4c:	fffffdff 	.word	0xfffffdff
 8005e50:	40021800 	.word	0x40021800

08005e54 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	699a      	ldr	r2, [r3, #24]
 8005e62:	2380      	movs	r3, #128	; 0x80
 8005e64:	015b      	lsls	r3, r3, #5
 8005e66:	4013      	ands	r3, r2
 8005e68:	d011      	beq.n	8005e8e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e70:	2201      	movs	r2, #1
 8005e72:	4013      	ands	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2101      	movs	r1, #1
 8005e82:	430a      	orrs	r2, r1
 8005e84:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fd fbf5 	bl	8003678 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	2380      	movs	r3, #128	; 0x80
 8005e96:	019b      	lsls	r3, r3, #6
 8005e98:	4013      	ands	r3, r2
 8005e9a:	d011      	beq.n	8005ec0 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f000 f961 	bl	8006182 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2229      	movs	r2, #41	; 0x29
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	5499      	strb	r1, [r3, r2]
}
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	b002      	add	sp, #8
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <HAL_RTC_WaitForSynchro+0x48>)
 8005ede:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ee0:	f7fd fffa 	bl	8003ed8 <HAL_GetTick>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005ee8:	e00a      	b.n	8005f00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005eea:	f7fd fff5 	bl	8003ed8 <HAL_GetTick>
 8005eee:	0002      	movs	r2, r0
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	1ad2      	subs	r2, r2, r3
 8005ef4:	23fa      	movs	r3, #250	; 0xfa
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d901      	bls.n	8005f00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e006      	b.n	8005f0e <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	4013      	ands	r3, r2
 8005f0a:	d0ee      	beq.n	8005eea <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	0018      	movs	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	b004      	add	sp, #16
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	0001005f 	.word	0x0001005f

08005f1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8005f24:	230f      	movs	r3, #15
 8005f26:	18fb      	adds	r3, r7, r3
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2240      	movs	r2, #64	; 0x40
 8005f34:	4013      	ands	r3, r2
 8005f36:	d12c      	bne.n	8005f92 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2180      	movs	r1, #128	; 0x80
 8005f44:	430a      	orrs	r2, r1
 8005f46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f48:	f7fd ffc6 	bl	8003ed8 <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f50:	e014      	b.n	8005f7c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f52:	f7fd ffc1 	bl	8003ed8 <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	1ad2      	subs	r2, r2, r3
 8005f5c:	200f      	movs	r0, #15
 8005f5e:	183b      	adds	r3, r7, r0
 8005f60:	1839      	adds	r1, r7, r0
 8005f62:	7809      	ldrb	r1, [r1, #0]
 8005f64:	7019      	strb	r1, [r3, #0]
 8005f66:	23fa      	movs	r3, #250	; 0xfa
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d906      	bls.n	8005f7c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8005f6e:	183b      	adds	r3, r7, r0
 8005f70:	2203      	movs	r2, #3
 8005f72:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2229      	movs	r2, #41	; 0x29
 8005f78:	2103      	movs	r1, #3
 8005f7a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	4013      	ands	r3, r2
 8005f86:	d104      	bne.n	8005f92 <RTC_EnterInitMode+0x76>
 8005f88:	230f      	movs	r3, #15
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d1df      	bne.n	8005f52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005f92:	230f      	movs	r3, #15
 8005f94:	18fb      	adds	r3, r7, r3
 8005f96:	781b      	ldrb	r3, [r3, #0]
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b004      	add	sp, #16
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa8:	240f      	movs	r4, #15
 8005faa:	193b      	adds	r3, r7, r4
 8005fac:	2200      	movs	r2, #0
 8005fae:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <RTC_ExitInitMode+0x84>)
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <RTC_ExitInitMode+0x84>)
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	438a      	bics	r2, r1
 8005fba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <RTC_ExitInitMode+0x84>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d10d      	bne.n	8005fe2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7ff ff81 	bl	8005ed0 <HAL_RTC_WaitForSynchro>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d021      	beq.n	8006016 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2229      	movs	r2, #41	; 0x29
 8005fd6:	2103      	movs	r1, #3
 8005fd8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005fda:	193b      	adds	r3, r7, r4
 8005fdc:	2203      	movs	r2, #3
 8005fde:	701a      	strb	r2, [r3, #0]
 8005fe0:	e019      	b.n	8006016 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005fe2:	4b10      	ldr	r3, [pc, #64]	; (8006024 <RTC_ExitInitMode+0x84>)
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <RTC_ExitInitMode+0x84>)
 8005fe8:	2120      	movs	r1, #32
 8005fea:	438a      	bics	r2, r1
 8005fec:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f7ff ff6d 	bl	8005ed0 <HAL_RTC_WaitForSynchro>
 8005ff6:	1e03      	subs	r3, r0, #0
 8005ff8:	d007      	beq.n	800600a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2229      	movs	r2, #41	; 0x29
 8005ffe:	2103      	movs	r1, #3
 8006000:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006002:	230f      	movs	r3, #15
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	2203      	movs	r2, #3
 8006008:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <RTC_ExitInitMode+0x84>)
 800600c:	699a      	ldr	r2, [r3, #24]
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <RTC_ExitInitMode+0x84>)
 8006010:	2120      	movs	r1, #32
 8006012:	430a      	orrs	r2, r1
 8006014:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006016:	230f      	movs	r3, #15
 8006018:	18fb      	adds	r3, r7, r3
 800601a:	781b      	ldrb	r3, [r3, #0]
}
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b005      	add	sp, #20
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	40002800 	.word	0x40002800

08006028 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	0002      	movs	r2, r0
 8006030:	1dfb      	adds	r3, r7, #7
 8006032:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006038:	230b      	movs	r3, #11
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	1dfa      	adds	r2, r7, #7
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006042:	e008      	b.n	8006056 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800604a:	220b      	movs	r2, #11
 800604c:	18bb      	adds	r3, r7, r2
 800604e:	18ba      	adds	r2, r7, r2
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	3a0a      	subs	r2, #10
 8006054:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006056:	210b      	movs	r1, #11
 8006058:	187b      	adds	r3, r7, r1
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b09      	cmp	r3, #9
 800605e:	d8f1      	bhi.n	8006044 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	011b      	lsls	r3, r3, #4
 8006066:	b2da      	uxtb	r2, r3
 8006068:	187b      	adds	r3, r7, r1
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4313      	orrs	r3, r2
 800606e:	b2db      	uxtb	r3, r3
}
 8006070:	0018      	movs	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	b004      	add	sp, #16
 8006076:	bd80      	pop	{r7, pc}

08006078 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	0002      	movs	r2, r0
 8006080:	1dfb      	adds	r3, r7, #7
 8006082:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006084:	1dfb      	adds	r3, r7, #7
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	091b      	lsrs	r3, r3, #4
 800608a:	b2db      	uxtb	r3, r3
 800608c:	001a      	movs	r2, r3
 800608e:	0013      	movs	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	189b      	adds	r3, r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	1dfb      	adds	r3, r7, #7
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	210f      	movs	r1, #15
 80060a2:	400b      	ands	r3, r1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	18d3      	adds	r3, r2, r3
 80060a8:	b2db      	uxtb	r3, r3
}
 80060aa:	0018      	movs	r0, r3
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b004      	add	sp, #16
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2228      	movs	r2, #40	; 0x28
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_RTCEx_EnableBypassShadow+0x16>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e024      	b.n	8006112 <HAL_RTCEx_EnableBypassShadow+0x60>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2228      	movs	r2, #40	; 0x28
 80060cc:	2101      	movs	r1, #1
 80060ce:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2229      	movs	r2, #41	; 0x29
 80060d4:	2102      	movs	r1, #2
 80060d6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	22ca      	movs	r2, #202	; 0xca
 80060de:	625a      	str	r2, [r3, #36]	; 0x24
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2253      	movs	r2, #83	; 0x53
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2120      	movs	r1, #32
 80060f4:	430a      	orrs	r2, r1
 80060f6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	22ff      	movs	r2, #255	; 0xff
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2229      	movs	r2, #41	; 0x29
 8006104:	2101      	movs	r1, #1
 8006106:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2228      	movs	r2, #40	; 0x28
 800610c:	2100      	movs	r1, #0
 800610e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	0018      	movs	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	b002      	add	sp, #8
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2228      	movs	r2, #40	; 0x28
 8006126:	5c9b      	ldrb	r3, [r3, r2]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_RTCEx_DisableBypassShadow+0x16>
 800612c:	2302      	movs	r3, #2
 800612e:	e024      	b.n	800617a <HAL_RTCEx_DisableBypassShadow+0x60>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2228      	movs	r2, #40	; 0x28
 8006134:	2101      	movs	r1, #1
 8006136:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2229      	movs	r2, #41	; 0x29
 800613c:	2102      	movs	r1, #2
 800613e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	22ca      	movs	r2, #202	; 0xca
 8006146:	625a      	str	r2, [r3, #36]	; 0x24
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2253      	movs	r2, #83	; 0x53
 800614e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	21df      	movs	r1, #223	; 0xdf
 800615c:	400a      	ands	r2, r1
 800615e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	22ff      	movs	r2, #255	; 0xff
 8006166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2229      	movs	r2, #41	; 0x29
 800616c:	2101      	movs	r1, #1
 800616e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2228      	movs	r2, #40	; 0x28
 8006174:	2100      	movs	r1, #0
 8006176:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	0018      	movs	r0, r3
 800617c:	46bd      	mov	sp, r7
 800617e:	b002      	add	sp, #8
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	b002      	add	sp, #8
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e0a8      	b.n	80062f8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	2382      	movs	r3, #130	; 0x82
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d009      	beq.n	80061ce <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	61da      	str	r2, [r3, #28]
 80061c0:	e005      	b.n	80061ce <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	225d      	movs	r2, #93	; 0x5d
 80061d8:	5c9b      	ldrb	r3, [r3, r2]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	225c      	movs	r2, #92	; 0x5c
 80061e4:	2100      	movs	r1, #0
 80061e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fd fad0 	bl	8003790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	225d      	movs	r2, #93	; 0x5d
 80061f4:	2102      	movs	r1, #2
 80061f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2140      	movs	r1, #64	; 0x40
 8006204:	438a      	bics	r2, r1
 8006206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	23e0      	movs	r3, #224	; 0xe0
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	429a      	cmp	r2, r3
 8006212:	d902      	bls.n	800621a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e002      	b.n	8006220 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	015b      	lsls	r3, r3, #5
 800621e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	23f0      	movs	r3, #240	; 0xf0
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	429a      	cmp	r2, r3
 800622a:	d008      	beq.n	800623e <HAL_SPI_Init+0xaa>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	23e0      	movs	r3, #224	; 0xe0
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	429a      	cmp	r2, r3
 8006236:	d002      	beq.n	800623e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	2382      	movs	r3, #130	; 0x82
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	401a      	ands	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6899      	ldr	r1, [r3, #8]
 800624c:	2384      	movs	r3, #132	; 0x84
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	400b      	ands	r3, r1
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2102      	movs	r1, #2
 800625a:	400b      	ands	r3, r1
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	2101      	movs	r1, #1
 8006264:	400b      	ands	r3, r1
 8006266:	431a      	orrs	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6999      	ldr	r1, [r3, #24]
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	400b      	ands	r3, r1
 8006272:	431a      	orrs	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	2138      	movs	r1, #56	; 0x38
 800627a:	400b      	ands	r3, r1
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	2180      	movs	r1, #128	; 0x80
 8006284:	400b      	ands	r3, r1
 8006286:	431a      	orrs	r2, r3
 8006288:	0011      	movs	r1, r2
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800628e:	2380      	movs	r3, #128	; 0x80
 8006290:	019b      	lsls	r3, r3, #6
 8006292:	401a      	ands	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	0c1b      	lsrs	r3, r3, #16
 80062a2:	2204      	movs	r2, #4
 80062a4:	401a      	ands	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2110      	movs	r1, #16
 80062ac:	400b      	ands	r3, r1
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b4:	2108      	movs	r1, #8
 80062b6:	400b      	ands	r3, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68d9      	ldr	r1, [r3, #12]
 80062be:	23f0      	movs	r3, #240	; 0xf0
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	400b      	ands	r3, r1
 80062c4:	431a      	orrs	r2, r3
 80062c6:	0011      	movs	r1, r2
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	015b      	lsls	r3, r3, #5
 80062ce:	401a      	ands	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4907      	ldr	r1, [pc, #28]	; (8006300 <HAL_SPI_Init+0x16c>)
 80062e4:	400a      	ands	r2, r1
 80062e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	225d      	movs	r2, #93	; 0x5d
 80062f2:	2101      	movs	r1, #1
 80062f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	0018      	movs	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b004      	add	sp, #16
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	fffff7ff 	.word	0xfffff7ff

08006304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e04a      	b.n	80063ac <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	223d      	movs	r2, #61	; 0x3d
 800631a:	5c9b      	ldrb	r3, [r3, r2]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d107      	bne.n	8006332 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	223c      	movs	r2, #60	; 0x3c
 8006326:	2100      	movs	r1, #0
 8006328:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	0018      	movs	r0, r3
 800632e:	f7fd fa79 	bl	8003824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	223d      	movs	r2, #61	; 0x3d
 8006336:	2102      	movs	r1, #2
 8006338:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3304      	adds	r3, #4
 8006342:	0019      	movs	r1, r3
 8006344:	0010      	movs	r0, r2
 8006346:	f000 f9ed 	bl	8006724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2248      	movs	r2, #72	; 0x48
 800634e:	2101      	movs	r1, #1
 8006350:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	223e      	movs	r2, #62	; 0x3e
 8006356:	2101      	movs	r1, #1
 8006358:	5499      	strb	r1, [r3, r2]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	223f      	movs	r2, #63	; 0x3f
 800635e:	2101      	movs	r1, #1
 8006360:	5499      	strb	r1, [r3, r2]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2240      	movs	r2, #64	; 0x40
 8006366:	2101      	movs	r1, #1
 8006368:	5499      	strb	r1, [r3, r2]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2241      	movs	r2, #65	; 0x41
 800636e:	2101      	movs	r1, #1
 8006370:	5499      	strb	r1, [r3, r2]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2242      	movs	r2, #66	; 0x42
 8006376:	2101      	movs	r1, #1
 8006378:	5499      	strb	r1, [r3, r2]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2243      	movs	r2, #67	; 0x43
 800637e:	2101      	movs	r1, #1
 8006380:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2244      	movs	r2, #68	; 0x44
 8006386:	2101      	movs	r1, #1
 8006388:	5499      	strb	r1, [r3, r2]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2245      	movs	r2, #69	; 0x45
 800638e:	2101      	movs	r1, #1
 8006390:	5499      	strb	r1, [r3, r2]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2246      	movs	r2, #70	; 0x46
 8006396:	2101      	movs	r1, #1
 8006398:	5499      	strb	r1, [r3, r2]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2247      	movs	r2, #71	; 0x47
 800639e:	2101      	movs	r1, #1
 80063a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	223d      	movs	r2, #61	; 0x3d
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	0018      	movs	r0, r3
 80063ae:	46bd      	mov	sp, r7
 80063b0:	b002      	add	sp, #8
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	223d      	movs	r2, #61	; 0x3d
 80063c0:	5c9b      	ldrb	r3, [r3, r2]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d001      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e047      	b.n	800645c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	223d      	movs	r2, #61	; 0x3d
 80063d0:	2102      	movs	r1, #2
 80063d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2101      	movs	r1, #1
 80063e0:	430a      	orrs	r2, r1
 80063e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <HAL_TIM_Base_Start_IT+0xb0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d014      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x64>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	2380      	movs	r3, #128	; 0x80
 80063f4:	05db      	lsls	r3, r3, #23
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d00e      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x64>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1a      	ldr	r2, [pc, #104]	; (8006468 <HAL_TIM_Base_Start_IT+0xb4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x64>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a18      	ldr	r2, [pc, #96]	; (800646c <HAL_TIM_Base_Start_IT+0xb8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0x64>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a17      	ldr	r2, [pc, #92]	; (8006470 <HAL_TIM_Base_Start_IT+0xbc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d116      	bne.n	8006446 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4a15      	ldr	r2, [pc, #84]	; (8006474 <HAL_TIM_Base_Start_IT+0xc0>)
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b06      	cmp	r3, #6
 8006428:	d016      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0xa4>
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	025b      	lsls	r3, r3, #9
 8006430:	429a      	cmp	r2, r3
 8006432:	d011      	beq.n	8006458 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2101      	movs	r1, #1
 8006440:	430a      	orrs	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006444:	e008      	b.n	8006458 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2101      	movs	r1, #1
 8006452:	430a      	orrs	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e000      	b.n	800645a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006458:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b004      	add	sp, #16
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40014000 	.word	0x40014000
 8006474:	00010007 	.word	0x00010007

08006478 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2101      	movs	r1, #1
 800648c:	438a      	bics	r2, r1
 800648e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	4a0d      	ldr	r2, [pc, #52]	; (80064cc <HAL_TIM_Base_Stop_IT+0x54>)
 8006498:	4013      	ands	r3, r2
 800649a:	d10d      	bne.n	80064b8 <HAL_TIM_Base_Stop_IT+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	4a0b      	ldr	r2, [pc, #44]	; (80064d0 <HAL_TIM_Base_Stop_IT+0x58>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_Base_Stop_IT+0x40>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2101      	movs	r1, #1
 80064b4:	438a      	bics	r2, r1
 80064b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	223d      	movs	r2, #61	; 0x3d
 80064bc:	2101      	movs	r1, #1
 80064be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	0018      	movs	r0, r3
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b002      	add	sp, #8
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	00001111 	.word	0x00001111
 80064d0:	00000444 	.word	0x00000444

080064d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2202      	movs	r2, #2
 80064f0:	4013      	ands	r3, r2
 80064f2:	d021      	beq.n	8006538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2202      	movs	r2, #2
 80064f8:	4013      	ands	r3, r2
 80064fa:	d01d      	beq.n	8006538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2203      	movs	r2, #3
 8006502:	4252      	negs	r2, r2
 8006504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2203      	movs	r2, #3
 8006514:	4013      	ands	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f000 f8ea 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 8006520:	e007      	b.n	8006532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	0018      	movs	r0, r3
 8006526:	f000 f8dd 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	0018      	movs	r0, r3
 800652e:	f000 f8e9 	bl	8006704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2204      	movs	r2, #4
 800653c:	4013      	ands	r3, r2
 800653e:	d022      	beq.n	8006586 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2204      	movs	r2, #4
 8006544:	4013      	ands	r3, r2
 8006546:	d01e      	beq.n	8006586 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2205      	movs	r2, #5
 800654e:	4252      	negs	r2, r2
 8006550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2202      	movs	r2, #2
 8006556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	23c0      	movs	r3, #192	; 0xc0
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4013      	ands	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	0018      	movs	r0, r3
 800656a:	f000 f8c3 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 800656e:	e007      	b.n	8006580 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	0018      	movs	r0, r3
 8006574:	f000 f8b6 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	0018      	movs	r0, r3
 800657c:	f000 f8c2 	bl	8006704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2208      	movs	r2, #8
 800658a:	4013      	ands	r3, r2
 800658c:	d021      	beq.n	80065d2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2208      	movs	r2, #8
 8006592:	4013      	ands	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2209      	movs	r2, #9
 800659c:	4252      	negs	r2, r2
 800659e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2204      	movs	r2, #4
 80065a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2203      	movs	r2, #3
 80065ae:	4013      	ands	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 f89d 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 80065ba:	e007      	b.n	80065cc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 f890 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f89c 	bl	8006704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	2210      	movs	r2, #16
 80065d6:	4013      	ands	r3, r2
 80065d8:	d022      	beq.n	8006620 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2210      	movs	r2, #16
 80065de:	4013      	ands	r3, r2
 80065e0:	d01e      	beq.n	8006620 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2211      	movs	r2, #17
 80065e8:	4252      	negs	r2, r2
 80065ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2208      	movs	r2, #8
 80065f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	23c0      	movs	r3, #192	; 0xc0
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	4013      	ands	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	0018      	movs	r0, r3
 8006604:	f000 f876 	bl	80066f4 <HAL_TIM_IC_CaptureCallback>
 8006608:	e007      	b.n	800661a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0018      	movs	r0, r3
 800660e:	f000 f869 	bl	80066e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f875 	bl	8006704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2201      	movs	r2, #1
 8006624:	4013      	ands	r3, r2
 8006626:	d00c      	beq.n	8006642 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	4013      	ands	r3, r2
 800662e:	d008      	beq.n	8006642 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2202      	movs	r2, #2
 8006636:	4252      	negs	r2, r2
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	0018      	movs	r0, r3
 800663e:	f7fc ffe1 	bl	8003604 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2280      	movs	r2, #128	; 0x80
 8006646:	4013      	ands	r3, r2
 8006648:	d104      	bne.n	8006654 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	2380      	movs	r3, #128	; 0x80
 800664e:	019b      	lsls	r3, r3, #6
 8006650:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006652:	d00b      	beq.n	800666c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2280      	movs	r2, #128	; 0x80
 8006658:	4013      	ands	r3, r2
 800665a:	d007      	beq.n	800666c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a1e      	ldr	r2, [pc, #120]	; (80066dc <HAL_TIM_IRQHandler+0x208>)
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	0018      	movs	r0, r3
 8006668:	f000 f972 	bl	8006950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	2380      	movs	r3, #128	; 0x80
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	4013      	ands	r3, r2
 8006674:	d00b      	beq.n	800668e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2280      	movs	r2, #128	; 0x80
 800667a:	4013      	ands	r3, r2
 800667c:	d007      	beq.n	800668e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a17      	ldr	r2, [pc, #92]	; (80066e0 <HAL_TIM_IRQHandler+0x20c>)
 8006684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	0018      	movs	r0, r3
 800668a:	f000 f969 	bl	8006960 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2240      	movs	r2, #64	; 0x40
 8006692:	4013      	ands	r3, r2
 8006694:	d00c      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2240      	movs	r2, #64	; 0x40
 800669a:	4013      	ands	r3, r2
 800669c:	d008      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2241      	movs	r2, #65	; 0x41
 80066a4:	4252      	negs	r2, r2
 80066a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 f832 	bl	8006714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2220      	movs	r2, #32
 80066b4:	4013      	ands	r3, r2
 80066b6:	d00c      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	4013      	ands	r3, r2
 80066be:	d008      	beq.n	80066d2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2221      	movs	r2, #33	; 0x21
 80066c6:	4252      	negs	r2, r2
 80066c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	0018      	movs	r0, r3
 80066ce:	f000 f937 	bl	8006940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b004      	add	sp, #16
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	46c0      	nop			; (mov r8, r8)
 80066dc:	ffffdf7f 	.word	0xffffdf7f
 80066e0:	fffffeff 	.word	0xfffffeff

080066e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	46bd      	mov	sp, r7
 8006700:	b002      	add	sp, #8
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800671c:	46c0      	nop			; (mov r8, r8)
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3f      	ldr	r2, [pc, #252]	; (8006834 <TIM_Base_SetConfig+0x110>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00c      	beq.n	8006756 <TIM_Base_SetConfig+0x32>
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	2380      	movs	r3, #128	; 0x80
 8006740:	05db      	lsls	r3, r3, #23
 8006742:	429a      	cmp	r2, r3
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0x32>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a3b      	ldr	r2, [pc, #236]	; (8006838 <TIM_Base_SetConfig+0x114>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0x32>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a3a      	ldr	r2, [pc, #232]	; (800683c <TIM_Base_SetConfig+0x118>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2270      	movs	r2, #112	; 0x70
 800675a:	4393      	bics	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a32      	ldr	r2, [pc, #200]	; (8006834 <TIM_Base_SetConfig+0x110>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d01c      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	05db      	lsls	r3, r3, #23
 8006776:	429a      	cmp	r2, r3
 8006778:	d017      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2e      	ldr	r2, [pc, #184]	; (8006838 <TIM_Base_SetConfig+0x114>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2d      	ldr	r2, [pc, #180]	; (800683c <TIM_Base_SetConfig+0x118>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00f      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2c      	ldr	r2, [pc, #176]	; (8006840 <TIM_Base_SetConfig+0x11c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00b      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2b      	ldr	r2, [pc, #172]	; (8006844 <TIM_Base_SetConfig+0x120>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d007      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <TIM_Base_SetConfig+0x124>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_Base_SetConfig+0x86>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a29      	ldr	r2, [pc, #164]	; (800684c <TIM_Base_SetConfig+0x128>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d108      	bne.n	80067bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_Base_SetConfig+0x12c>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2280      	movs	r2, #128	; 0x80
 80067c0:	4393      	bics	r3, r2
 80067c2:	001a      	movs	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a13      	ldr	r2, [pc, #76]	; (8006834 <TIM_Base_SetConfig+0x110>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d00b      	beq.n	8006802 <TIM_Base_SetConfig+0xde>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a15      	ldr	r2, [pc, #84]	; (8006844 <TIM_Base_SetConfig+0x120>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d007      	beq.n	8006802 <TIM_Base_SetConfig+0xde>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a14      	ldr	r2, [pc, #80]	; (8006848 <TIM_Base_SetConfig+0x124>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d003      	beq.n	8006802 <TIM_Base_SetConfig+0xde>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a13      	ldr	r2, [pc, #76]	; (800684c <TIM_Base_SetConfig+0x128>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d103      	bne.n	800680a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2201      	movs	r2, #1
 8006816:	4013      	ands	r3, r2
 8006818:	2b01      	cmp	r3, #1
 800681a:	d106      	bne.n	800682a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	2201      	movs	r2, #1
 8006822:	4393      	bics	r3, r2
 8006824:	001a      	movs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	611a      	str	r2, [r3, #16]
  }
}
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	b004      	add	sp, #16
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	40012c00 	.word	0x40012c00
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40002000 	.word	0x40002000
 8006844:	40014000 	.word	0x40014000
 8006848:	40014400 	.word	0x40014400
 800684c:	40014800 	.word	0x40014800
 8006850:	fffffcff 	.word	0xfffffcff

08006854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	223c      	movs	r2, #60	; 0x3c
 8006862:	5c9b      	ldrb	r3, [r3, r2]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e05a      	b.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	223c      	movs	r2, #60	; 0x3c
 8006870:	2101      	movs	r1, #1
 8006872:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	223d      	movs	r2, #61	; 0x3d
 8006878:	2102      	movs	r1, #2
 800687a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800689a:	4013      	ands	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2270      	movs	r2, #112	; 0x70
 80068ac:	4393      	bics	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a19      	ldr	r2, [pc, #100]	; (800692c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d014      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	05db      	lsls	r3, r3, #23
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d00e      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a15      	ldr	r2, [pc, #84]	; (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d009      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d004      	beq.n	80068f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a12      	ldr	r2, [pc, #72]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d10c      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2280      	movs	r2, #128	; 0x80
 80068fa:	4393      	bics	r3, r2
 80068fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4313      	orrs	r3, r2
 8006906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	223d      	movs	r2, #61	; 0x3d
 8006914:	2101      	movs	r1, #1
 8006916:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	223c      	movs	r2, #60	; 0x3c
 800691c:	2100      	movs	r1, #0
 800691e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	0018      	movs	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	b004      	add	sp, #16
 8006928:	bd80      	pop	{r7, pc}
 800692a:	46c0      	nop			; (mov r8, r8)
 800692c:	40012c00 	.word	0x40012c00
 8006930:	ff0fffff 	.word	0xff0fffff
 8006934:	40000400 	.word	0x40000400
 8006938:	40000800 	.word	0x40000800
 800693c:	40014000 	.word	0x40014000

08006940 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	46bd      	mov	sp, r7
 800694c:	b002      	add	sp, #8
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b002      	add	sp, #8
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006968:	46c0      	nop			; (mov r8, r8)
 800696a:	46bd      	mov	sp, r7
 800696c:	b002      	add	sp, #8
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d101      	bne.n	8006982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e046      	b.n	8006a10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2288      	movs	r2, #136	; 0x88
 8006986:	589b      	ldr	r3, [r3, r2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d107      	bne.n	800699c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2284      	movs	r2, #132	; 0x84
 8006990:	2100      	movs	r1, #0
 8006992:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0018      	movs	r0, r3
 8006998:	f7fc ff6a 	bl	8003870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2288      	movs	r2, #136	; 0x88
 80069a0:	2124      	movs	r1, #36	; 0x24
 80069a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2101      	movs	r1, #1
 80069b0:	438a      	bics	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 fd4c 	bl	800745c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f000 f9f2 	bl	8006db0 <UART_SetConfig>
 80069cc:	0003      	movs	r3, r0
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e01c      	b.n	8006a10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	490d      	ldr	r1, [pc, #52]	; (8006a18 <HAL_UART_Init+0xa8>)
 80069e2:	400a      	ands	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	212a      	movs	r1, #42	; 0x2a
 80069f2:	438a      	bics	r2, r1
 80069f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2101      	movs	r1, #1
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 fddb 	bl	80075c4 <UART_CheckIdleState>
 8006a0e:	0003      	movs	r3, r0
}
 8006a10:	0018      	movs	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b002      	add	sp, #8
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	ffffb7ff 	.word	0xffffb7ff

08006a1c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e032      	b.n	8006a94 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2288      	movs	r2, #136	; 0x88
 8006a32:	2124      	movs	r1, #36	; 0x24
 8006a34:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2101      	movs	r1, #1
 8006a42:	438a      	bics	r2, r1
 8006a44:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	0018      	movs	r0, r3
 8006a62:	f7fd f831 	bl	8003ac8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2290      	movs	r2, #144	; 0x90
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2288      	movs	r2, #136	; 0x88
 8006a72:	2100      	movs	r1, #0
 8006a74:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	228c      	movs	r2, #140	; 0x8c
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2284      	movs	r2, #132	; 0x84
 8006a8e:	2100      	movs	r1, #0
 8006a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b002      	add	sp, #8
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08a      	sub	sp, #40	; 0x28
 8006aa0:	af02      	add	r7, sp, #8
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	1dbb      	adds	r3, r7, #6
 8006aaa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2288      	movs	r2, #136	; 0x88
 8006ab0:	589b      	ldr	r3, [r3, r2]
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d000      	beq.n	8006ab8 <HAL_UART_Transmit+0x1c>
 8006ab6:	e090      	b.n	8006bda <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_UART_Transmit+0x2a>
 8006abe:	1dbb      	adds	r3, r7, #6
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e088      	b.n	8006bdc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	015b      	lsls	r3, r3, #5
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d109      	bne.n	8006aea <HAL_UART_Transmit+0x4e>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d105      	bne.n	8006aea <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d001      	beq.n	8006aea <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e078      	b.n	8006bdc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2290      	movs	r2, #144	; 0x90
 8006aee:	2100      	movs	r1, #0
 8006af0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2288      	movs	r2, #136	; 0x88
 8006af6:	2121      	movs	r1, #33	; 0x21
 8006af8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006afa:	f7fd f9ed 	bl	8003ed8 <HAL_GetTick>
 8006afe:	0003      	movs	r3, r0
 8006b00:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1dba      	adds	r2, r7, #6
 8006b06:	2154      	movs	r1, #84	; 0x54
 8006b08:	8812      	ldrh	r2, [r2, #0]
 8006b0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	1dba      	adds	r2, r7, #6
 8006b10:	2156      	movs	r1, #86	; 0x56
 8006b12:	8812      	ldrh	r2, [r2, #0]
 8006b14:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	2380      	movs	r3, #128	; 0x80
 8006b1c:	015b      	lsls	r3, r3, #5
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d108      	bne.n	8006b34 <HAL_UART_Transmit+0x98>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d104      	bne.n	8006b34 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	e003      	b.n	8006b3c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b3c:	e030      	b.n	8006ba0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	0013      	movs	r3, r2
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	f000 fde4 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 8006b50:	1e03      	subs	r3, r0, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2288      	movs	r2, #136	; 0x88
 8006b58:	2120      	movs	r1, #32
 8006b5a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e03d      	b.n	8006bdc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10b      	bne.n	8006b7e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	001a      	movs	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	05d2      	lsls	r2, r2, #23
 8006b72:	0dd2      	lsrs	r2, r2, #23
 8006b74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	3302      	adds	r3, #2
 8006b7a:	61bb      	str	r3, [r7, #24]
 8006b7c:	e007      	b.n	8006b8e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	781a      	ldrb	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2256      	movs	r2, #86	; 0x56
 8006b92:	5a9b      	ldrh	r3, [r3, r2]
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b299      	uxth	r1, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2256      	movs	r2, #86	; 0x56
 8006b9e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2256      	movs	r2, #86	; 0x56
 8006ba4:	5a9b      	ldrh	r3, [r3, r2]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1c8      	bne.n	8006b3e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	0013      	movs	r3, r2
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2140      	movs	r1, #64	; 0x40
 8006bba:	f000 fdad 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 8006bbe:	1e03      	subs	r3, r0, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2288      	movs	r2, #136	; 0x88
 8006bc6:	2120      	movs	r1, #32
 8006bc8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e006      	b.n	8006bdc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2288      	movs	r2, #136	; 0x88
 8006bd2:	2120      	movs	r1, #32
 8006bd4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e000      	b.n	8006bdc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
  }
}
 8006bdc:	0018      	movs	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	b008      	add	sp, #32
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	603b      	str	r3, [r7, #0]
 8006bf0:	1dbb      	adds	r3, r7, #6
 8006bf2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	228c      	movs	r2, #140	; 0x8c
 8006bf8:	589b      	ldr	r3, [r3, r2]
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d000      	beq.n	8006c00 <HAL_UART_Receive+0x1c>
 8006bfe:	e0d0      	b.n	8006da2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_UART_Receive+0x2a>
 8006c06:	1dbb      	adds	r3, r7, #6
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e0c8      	b.n	8006da4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	2380      	movs	r3, #128	; 0x80
 8006c18:	015b      	lsls	r3, r3, #5
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d109      	bne.n	8006c32 <HAL_UART_Receive+0x4e>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d001      	beq.n	8006c32 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e0b8      	b.n	8006da4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2290      	movs	r2, #144	; 0x90
 8006c36:	2100      	movs	r1, #0
 8006c38:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	228c      	movs	r2, #140	; 0x8c
 8006c3e:	2122      	movs	r1, #34	; 0x22
 8006c40:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c48:	f7fd f946 	bl	8003ed8 <HAL_GetTick>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1dba      	adds	r2, r7, #6
 8006c54:	215c      	movs	r1, #92	; 0x5c
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1dba      	adds	r2, r7, #6
 8006c5e:	215e      	movs	r1, #94	; 0x5e
 8006c60:	8812      	ldrh	r2, [r2, #0]
 8006c62:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d10d      	bne.n	8006c8c <HAL_UART_Receive+0xa8>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <HAL_UART_Receive+0x9e>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2260      	movs	r2, #96	; 0x60
 8006c7c:	494b      	ldr	r1, [pc, #300]	; (8006dac <HAL_UART_Receive+0x1c8>)
 8006c7e:	5299      	strh	r1, [r3, r2]
 8006c80:	e02e      	b.n	8006ce0 <HAL_UART_Receive+0xfc>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2260      	movs	r2, #96	; 0x60
 8006c86:	21ff      	movs	r1, #255	; 0xff
 8006c88:	5299      	strh	r1, [r3, r2]
 8006c8a:	e029      	b.n	8006ce0 <HAL_UART_Receive+0xfc>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10d      	bne.n	8006cb0 <HAL_UART_Receive+0xcc>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <HAL_UART_Receive+0xc2>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2260      	movs	r2, #96	; 0x60
 8006ca0:	21ff      	movs	r1, #255	; 0xff
 8006ca2:	5299      	strh	r1, [r3, r2]
 8006ca4:	e01c      	b.n	8006ce0 <HAL_UART_Receive+0xfc>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2260      	movs	r2, #96	; 0x60
 8006caa:	217f      	movs	r1, #127	; 0x7f
 8006cac:	5299      	strh	r1, [r3, r2]
 8006cae:	e017      	b.n	8006ce0 <HAL_UART_Receive+0xfc>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	055b      	lsls	r3, r3, #21
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d10d      	bne.n	8006cd8 <HAL_UART_Receive+0xf4>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d104      	bne.n	8006cce <HAL_UART_Receive+0xea>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2260      	movs	r2, #96	; 0x60
 8006cc8:	217f      	movs	r1, #127	; 0x7f
 8006cca:	5299      	strh	r1, [r3, r2]
 8006ccc:	e008      	b.n	8006ce0 <HAL_UART_Receive+0xfc>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2260      	movs	r2, #96	; 0x60
 8006cd2:	213f      	movs	r1, #63	; 0x3f
 8006cd4:	5299      	strh	r1, [r3, r2]
 8006cd6:	e003      	b.n	8006ce0 <HAL_UART_Receive+0xfc>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2260      	movs	r2, #96	; 0x60
 8006cdc:	2100      	movs	r1, #0
 8006cde:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006ce0:	2312      	movs	r3, #18
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	2160      	movs	r1, #96	; 0x60
 8006ce8:	5a52      	ldrh	r2, [r2, r1]
 8006cea:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	015b      	lsls	r3, r3, #5
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d108      	bne.n	8006d0a <HAL_UART_Receive+0x126>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d104      	bne.n	8006d0a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	e003      	b.n	8006d12 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006d12:	e03a      	b.n	8006d8a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	0013      	movs	r3, r2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2120      	movs	r1, #32
 8006d22:	f000 fcf9 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 8006d26:	1e03      	subs	r3, r0, #0
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	228c      	movs	r2, #140	; 0x8c
 8006d2e:	2120      	movs	r1, #32
 8006d30:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e036      	b.n	8006da4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10e      	bne.n	8006d5a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	2212      	movs	r2, #18
 8006d46:	18ba      	adds	r2, r7, r2
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	3302      	adds	r3, #2
 8006d56:	61bb      	str	r3, [r7, #24]
 8006d58:	e00e      	b.n	8006d78 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2212      	movs	r2, #18
 8006d64:	18ba      	adds	r2, r7, r2
 8006d66:	8812      	ldrh	r2, [r2, #0]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	3301      	adds	r3, #1
 8006d76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	225e      	movs	r2, #94	; 0x5e
 8006d7c:	5a9b      	ldrh	r3, [r3, r2]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	3b01      	subs	r3, #1
 8006d82:	b299      	uxth	r1, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	225e      	movs	r2, #94	; 0x5e
 8006d88:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	225e      	movs	r2, #94	; 0x5e
 8006d8e:	5a9b      	ldrh	r3, [r3, r2]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1be      	bne.n	8006d14 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	228c      	movs	r2, #140	; 0x8c
 8006d9a:	2120      	movs	r1, #32
 8006d9c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e000      	b.n	8006da4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
  }
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b008      	add	sp, #32
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	000001ff 	.word	0x000001ff

08006db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db0:	b5b0      	push	{r4, r5, r7, lr}
 8006db2:	b090      	sub	sp, #64	; 0x40
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006db8:	231a      	movs	r3, #26
 8006dba:	2220      	movs	r2, #32
 8006dbc:	189b      	adds	r3, r3, r2
 8006dbe:	19db      	adds	r3, r3, r7
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4ac1      	ldr	r2, [pc, #772]	; (80070e8 <UART_SetConfig+0x338>)
 8006de4:	4013      	ands	r3, r2
 8006de6:	0019      	movs	r1, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	430b      	orrs	r3, r1
 8006df0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4abc      	ldr	r2, [pc, #752]	; (80070ec <UART_SetConfig+0x33c>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	68d9      	ldr	r1, [r3, #12]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	0003      	movs	r3, r0
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4ab6      	ldr	r2, [pc, #728]	; (80070f0 <UART_SetConfig+0x340>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d009      	beq.n	8006e30 <UART_SetConfig+0x80>
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4ab4      	ldr	r2, [pc, #720]	; (80070f4 <UART_SetConfig+0x344>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d004      	beq.n	8006e30 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4ab0      	ldr	r2, [pc, #704]	; (80070f8 <UART_SetConfig+0x348>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	0019      	movs	r1, r3
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e42:	430b      	orrs	r3, r1
 8006e44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	220f      	movs	r2, #15
 8006e4e:	4393      	bics	r3, r2
 8006e50:	0018      	movs	r0, r3
 8006e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	0003      	movs	r3, r0
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4aa5      	ldr	r2, [pc, #660]	; (80070fc <UART_SetConfig+0x34c>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d131      	bne.n	8006ece <UART_SetConfig+0x11e>
 8006e6a:	4ba5      	ldr	r3, [pc, #660]	; (8007100 <UART_SetConfig+0x350>)
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	2203      	movs	r2, #3
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d01d      	beq.n	8006eb2 <UART_SetConfig+0x102>
 8006e76:	d823      	bhi.n	8006ec0 <UART_SetConfig+0x110>
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d00c      	beq.n	8006e96 <UART_SetConfig+0xe6>
 8006e7c:	d820      	bhi.n	8006ec0 <UART_SetConfig+0x110>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <UART_SetConfig+0xd8>
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d00e      	beq.n	8006ea4 <UART_SetConfig+0xf4>
 8006e86:	e01b      	b.n	8006ec0 <UART_SetConfig+0x110>
 8006e88:	231b      	movs	r3, #27
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	189b      	adds	r3, r3, r2
 8006e8e:	19db      	adds	r3, r3, r7
 8006e90:	2200      	movs	r2, #0
 8006e92:	701a      	strb	r2, [r3, #0]
 8006e94:	e154      	b.n	8007140 <UART_SetConfig+0x390>
 8006e96:	231b      	movs	r3, #27
 8006e98:	2220      	movs	r2, #32
 8006e9a:	189b      	adds	r3, r3, r2
 8006e9c:	19db      	adds	r3, r3, r7
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	e14d      	b.n	8007140 <UART_SetConfig+0x390>
 8006ea4:	231b      	movs	r3, #27
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	189b      	adds	r3, r3, r2
 8006eaa:	19db      	adds	r3, r3, r7
 8006eac:	2204      	movs	r2, #4
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e146      	b.n	8007140 <UART_SetConfig+0x390>
 8006eb2:	231b      	movs	r3, #27
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	189b      	adds	r3, r3, r2
 8006eb8:	19db      	adds	r3, r3, r7
 8006eba:	2208      	movs	r2, #8
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	e13f      	b.n	8007140 <UART_SetConfig+0x390>
 8006ec0:	231b      	movs	r3, #27
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	189b      	adds	r3, r3, r2
 8006ec6:	19db      	adds	r3, r3, r7
 8006ec8:	2210      	movs	r2, #16
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e138      	b.n	8007140 <UART_SetConfig+0x390>
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a8c      	ldr	r2, [pc, #560]	; (8007104 <UART_SetConfig+0x354>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d131      	bne.n	8006f3c <UART_SetConfig+0x18c>
 8006ed8:	4b89      	ldr	r3, [pc, #548]	; (8007100 <UART_SetConfig+0x350>)
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	220c      	movs	r2, #12
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b0c      	cmp	r3, #12
 8006ee2:	d01d      	beq.n	8006f20 <UART_SetConfig+0x170>
 8006ee4:	d823      	bhi.n	8006f2e <UART_SetConfig+0x17e>
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d00c      	beq.n	8006f04 <UART_SetConfig+0x154>
 8006eea:	d820      	bhi.n	8006f2e <UART_SetConfig+0x17e>
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d002      	beq.n	8006ef6 <UART_SetConfig+0x146>
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d00e      	beq.n	8006f12 <UART_SetConfig+0x162>
 8006ef4:	e01b      	b.n	8006f2e <UART_SetConfig+0x17e>
 8006ef6:	231b      	movs	r3, #27
 8006ef8:	2220      	movs	r2, #32
 8006efa:	189b      	adds	r3, r3, r2
 8006efc:	19db      	adds	r3, r3, r7
 8006efe:	2200      	movs	r2, #0
 8006f00:	701a      	strb	r2, [r3, #0]
 8006f02:	e11d      	b.n	8007140 <UART_SetConfig+0x390>
 8006f04:	231b      	movs	r3, #27
 8006f06:	2220      	movs	r2, #32
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	19db      	adds	r3, r3, r7
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e116      	b.n	8007140 <UART_SetConfig+0x390>
 8006f12:	231b      	movs	r3, #27
 8006f14:	2220      	movs	r2, #32
 8006f16:	189b      	adds	r3, r3, r2
 8006f18:	19db      	adds	r3, r3, r7
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e10f      	b.n	8007140 <UART_SetConfig+0x390>
 8006f20:	231b      	movs	r3, #27
 8006f22:	2220      	movs	r2, #32
 8006f24:	189b      	adds	r3, r3, r2
 8006f26:	19db      	adds	r3, r3, r7
 8006f28:	2208      	movs	r2, #8
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	e108      	b.n	8007140 <UART_SetConfig+0x390>
 8006f2e:	231b      	movs	r3, #27
 8006f30:	2220      	movs	r2, #32
 8006f32:	189b      	adds	r3, r3, r2
 8006f34:	19db      	adds	r3, r3, r7
 8006f36:	2210      	movs	r2, #16
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e101      	b.n	8007140 <UART_SetConfig+0x390>
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a71      	ldr	r2, [pc, #452]	; (8007108 <UART_SetConfig+0x358>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d131      	bne.n	8006faa <UART_SetConfig+0x1fa>
 8006f46:	4b6e      	ldr	r3, [pc, #440]	; (8007100 <UART_SetConfig+0x350>)
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	2230      	movs	r2, #48	; 0x30
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b30      	cmp	r3, #48	; 0x30
 8006f50:	d01d      	beq.n	8006f8e <UART_SetConfig+0x1de>
 8006f52:	d823      	bhi.n	8006f9c <UART_SetConfig+0x1ec>
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d00c      	beq.n	8006f72 <UART_SetConfig+0x1c2>
 8006f58:	d820      	bhi.n	8006f9c <UART_SetConfig+0x1ec>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <UART_SetConfig+0x1b4>
 8006f5e:	2b10      	cmp	r3, #16
 8006f60:	d00e      	beq.n	8006f80 <UART_SetConfig+0x1d0>
 8006f62:	e01b      	b.n	8006f9c <UART_SetConfig+0x1ec>
 8006f64:	231b      	movs	r3, #27
 8006f66:	2220      	movs	r2, #32
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	19db      	adds	r3, r3, r7
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
 8006f70:	e0e6      	b.n	8007140 <UART_SetConfig+0x390>
 8006f72:	231b      	movs	r3, #27
 8006f74:	2220      	movs	r2, #32
 8006f76:	189b      	adds	r3, r3, r2
 8006f78:	19db      	adds	r3, r3, r7
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	e0df      	b.n	8007140 <UART_SetConfig+0x390>
 8006f80:	231b      	movs	r3, #27
 8006f82:	2220      	movs	r2, #32
 8006f84:	189b      	adds	r3, r3, r2
 8006f86:	19db      	adds	r3, r3, r7
 8006f88:	2204      	movs	r2, #4
 8006f8a:	701a      	strb	r2, [r3, #0]
 8006f8c:	e0d8      	b.n	8007140 <UART_SetConfig+0x390>
 8006f8e:	231b      	movs	r3, #27
 8006f90:	2220      	movs	r2, #32
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	19db      	adds	r3, r3, r7
 8006f96:	2208      	movs	r2, #8
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e0d1      	b.n	8007140 <UART_SetConfig+0x390>
 8006f9c:	231b      	movs	r3, #27
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	189b      	adds	r3, r3, r2
 8006fa2:	19db      	adds	r3, r3, r7
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e0ca      	b.n	8007140 <UART_SetConfig+0x390>
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a57      	ldr	r2, [pc, #348]	; (800710c <UART_SetConfig+0x35c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d106      	bne.n	8006fc2 <UART_SetConfig+0x212>
 8006fb4:	231b      	movs	r3, #27
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	189b      	adds	r3, r3, r2
 8006fba:	19db      	adds	r3, r3, r7
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	701a      	strb	r2, [r3, #0]
 8006fc0:	e0be      	b.n	8007140 <UART_SetConfig+0x390>
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a52      	ldr	r2, [pc, #328]	; (8007110 <UART_SetConfig+0x360>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d106      	bne.n	8006fda <UART_SetConfig+0x22a>
 8006fcc:	231b      	movs	r3, #27
 8006fce:	2220      	movs	r2, #32
 8006fd0:	189b      	adds	r3, r3, r2
 8006fd2:	19db      	adds	r3, r3, r7
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e0b2      	b.n	8007140 <UART_SetConfig+0x390>
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a4d      	ldr	r2, [pc, #308]	; (8007114 <UART_SetConfig+0x364>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d106      	bne.n	8006ff2 <UART_SetConfig+0x242>
 8006fe4:	231b      	movs	r3, #27
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	189b      	adds	r3, r3, r2
 8006fea:	19db      	adds	r3, r3, r7
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	e0a6      	b.n	8007140 <UART_SetConfig+0x390>
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a3e      	ldr	r2, [pc, #248]	; (80070f0 <UART_SetConfig+0x340>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d13e      	bne.n	800707a <UART_SetConfig+0x2ca>
 8006ffc:	4b40      	ldr	r3, [pc, #256]	; (8007100 <UART_SetConfig+0x350>)
 8006ffe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007000:	23c0      	movs	r3, #192	; 0xc0
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	4013      	ands	r3, r2
 8007006:	22c0      	movs	r2, #192	; 0xc0
 8007008:	0112      	lsls	r2, r2, #4
 800700a:	4293      	cmp	r3, r2
 800700c:	d027      	beq.n	800705e <UART_SetConfig+0x2ae>
 800700e:	22c0      	movs	r2, #192	; 0xc0
 8007010:	0112      	lsls	r2, r2, #4
 8007012:	4293      	cmp	r3, r2
 8007014:	d82a      	bhi.n	800706c <UART_SetConfig+0x2bc>
 8007016:	2280      	movs	r2, #128	; 0x80
 8007018:	0112      	lsls	r2, r2, #4
 800701a:	4293      	cmp	r3, r2
 800701c:	d011      	beq.n	8007042 <UART_SetConfig+0x292>
 800701e:	2280      	movs	r2, #128	; 0x80
 8007020:	0112      	lsls	r2, r2, #4
 8007022:	4293      	cmp	r3, r2
 8007024:	d822      	bhi.n	800706c <UART_SetConfig+0x2bc>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <UART_SetConfig+0x284>
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	00d2      	lsls	r2, r2, #3
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <UART_SetConfig+0x2a0>
 8007032:	e01b      	b.n	800706c <UART_SetConfig+0x2bc>
 8007034:	231b      	movs	r3, #27
 8007036:	2220      	movs	r2, #32
 8007038:	189b      	adds	r3, r3, r2
 800703a:	19db      	adds	r3, r3, r7
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e07e      	b.n	8007140 <UART_SetConfig+0x390>
 8007042:	231b      	movs	r3, #27
 8007044:	2220      	movs	r2, #32
 8007046:	189b      	adds	r3, r3, r2
 8007048:	19db      	adds	r3, r3, r7
 800704a:	2202      	movs	r2, #2
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e077      	b.n	8007140 <UART_SetConfig+0x390>
 8007050:	231b      	movs	r3, #27
 8007052:	2220      	movs	r2, #32
 8007054:	189b      	adds	r3, r3, r2
 8007056:	19db      	adds	r3, r3, r7
 8007058:	2204      	movs	r2, #4
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	e070      	b.n	8007140 <UART_SetConfig+0x390>
 800705e:	231b      	movs	r3, #27
 8007060:	2220      	movs	r2, #32
 8007062:	189b      	adds	r3, r3, r2
 8007064:	19db      	adds	r3, r3, r7
 8007066:	2208      	movs	r2, #8
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	e069      	b.n	8007140 <UART_SetConfig+0x390>
 800706c:	231b      	movs	r3, #27
 800706e:	2220      	movs	r2, #32
 8007070:	189b      	adds	r3, r3, r2
 8007072:	19db      	adds	r3, r3, r7
 8007074:	2210      	movs	r2, #16
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e062      	b.n	8007140 <UART_SetConfig+0x390>
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <UART_SetConfig+0x344>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d157      	bne.n	8007134 <UART_SetConfig+0x384>
 8007084:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <UART_SetConfig+0x350>)
 8007086:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007088:	23c0      	movs	r3, #192	; 0xc0
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4013      	ands	r3, r2
 800708e:	22c0      	movs	r2, #192	; 0xc0
 8007090:	0092      	lsls	r2, r2, #2
 8007092:	4293      	cmp	r3, r2
 8007094:	d040      	beq.n	8007118 <UART_SetConfig+0x368>
 8007096:	22c0      	movs	r2, #192	; 0xc0
 8007098:	0092      	lsls	r2, r2, #2
 800709a:	4293      	cmp	r3, r2
 800709c:	d843      	bhi.n	8007126 <UART_SetConfig+0x376>
 800709e:	2280      	movs	r2, #128	; 0x80
 80070a0:	0092      	lsls	r2, r2, #2
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d011      	beq.n	80070ca <UART_SetConfig+0x31a>
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	0092      	lsls	r2, r2, #2
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d83b      	bhi.n	8007126 <UART_SetConfig+0x376>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d004      	beq.n	80070bc <UART_SetConfig+0x30c>
 80070b2:	2280      	movs	r2, #128	; 0x80
 80070b4:	0052      	lsls	r2, r2, #1
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d00e      	beq.n	80070d8 <UART_SetConfig+0x328>
 80070ba:	e034      	b.n	8007126 <UART_SetConfig+0x376>
 80070bc:	231b      	movs	r3, #27
 80070be:	2220      	movs	r2, #32
 80070c0:	189b      	adds	r3, r3, r2
 80070c2:	19db      	adds	r3, r3, r7
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
 80070c8:	e03a      	b.n	8007140 <UART_SetConfig+0x390>
 80070ca:	231b      	movs	r3, #27
 80070cc:	2220      	movs	r2, #32
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	19db      	adds	r3, r3, r7
 80070d2:	2202      	movs	r2, #2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e033      	b.n	8007140 <UART_SetConfig+0x390>
 80070d8:	231b      	movs	r3, #27
 80070da:	2220      	movs	r2, #32
 80070dc:	189b      	adds	r3, r3, r2
 80070de:	19db      	adds	r3, r3, r7
 80070e0:	2204      	movs	r2, #4
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	e02c      	b.n	8007140 <UART_SetConfig+0x390>
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	cfff69f3 	.word	0xcfff69f3
 80070ec:	ffffcfff 	.word	0xffffcfff
 80070f0:	40008000 	.word	0x40008000
 80070f4:	40008400 	.word	0x40008400
 80070f8:	11fff4ff 	.word	0x11fff4ff
 80070fc:	40013800 	.word	0x40013800
 8007100:	40021000 	.word	0x40021000
 8007104:	40004400 	.word	0x40004400
 8007108:	40004800 	.word	0x40004800
 800710c:	40004c00 	.word	0x40004c00
 8007110:	40005000 	.word	0x40005000
 8007114:	40013c00 	.word	0x40013c00
 8007118:	231b      	movs	r3, #27
 800711a:	2220      	movs	r2, #32
 800711c:	189b      	adds	r3, r3, r2
 800711e:	19db      	adds	r3, r3, r7
 8007120:	2208      	movs	r2, #8
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e00c      	b.n	8007140 <UART_SetConfig+0x390>
 8007126:	231b      	movs	r3, #27
 8007128:	2220      	movs	r2, #32
 800712a:	189b      	adds	r3, r3, r2
 800712c:	19db      	adds	r3, r3, r7
 800712e:	2210      	movs	r2, #16
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e005      	b.n	8007140 <UART_SetConfig+0x390>
 8007134:	231b      	movs	r3, #27
 8007136:	2220      	movs	r2, #32
 8007138:	189b      	adds	r3, r3, r2
 800713a:	19db      	adds	r3, r3, r7
 800713c:	2210      	movs	r2, #16
 800713e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4ac1      	ldr	r2, [pc, #772]	; (800744c <UART_SetConfig+0x69c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d005      	beq.n	8007156 <UART_SetConfig+0x3a6>
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4ac0      	ldr	r2, [pc, #768]	; (8007450 <UART_SetConfig+0x6a0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d000      	beq.n	8007156 <UART_SetConfig+0x3a6>
 8007154:	e093      	b.n	800727e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007156:	231b      	movs	r3, #27
 8007158:	2220      	movs	r2, #32
 800715a:	189b      	adds	r3, r3, r2
 800715c:	19db      	adds	r3, r3, r7
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d015      	beq.n	8007190 <UART_SetConfig+0x3e0>
 8007164:	dc18      	bgt.n	8007198 <UART_SetConfig+0x3e8>
 8007166:	2b04      	cmp	r3, #4
 8007168:	d00d      	beq.n	8007186 <UART_SetConfig+0x3d6>
 800716a:	dc15      	bgt.n	8007198 <UART_SetConfig+0x3e8>
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <UART_SetConfig+0x3c6>
 8007170:	2b02      	cmp	r3, #2
 8007172:	d005      	beq.n	8007180 <UART_SetConfig+0x3d0>
 8007174:	e010      	b.n	8007198 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007176:	f7fe f855 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 800717a:	0003      	movs	r3, r0
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717e:	e014      	b.n	80071aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007180:	4bb4      	ldr	r3, [pc, #720]	; (8007454 <UART_SetConfig+0x6a4>)
 8007182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007184:	e011      	b.n	80071aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007186:	f7fd ffc1 	bl	800510c <HAL_RCC_GetSysClockFreq>
 800718a:	0003      	movs	r3, r0
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800718e:	e00c      	b.n	80071aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007190:	2380      	movs	r3, #128	; 0x80
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007196:	e008      	b.n	80071aa <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800719c:	231a      	movs	r3, #26
 800719e:	2220      	movs	r2, #32
 80071a0:	189b      	adds	r3, r3, r2
 80071a2:	19db      	adds	r3, r3, r7
 80071a4:	2201      	movs	r2, #1
 80071a6:	701a      	strb	r2, [r3, #0]
        break;
 80071a8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d100      	bne.n	80071b2 <UART_SetConfig+0x402>
 80071b0:	e135      	b.n	800741e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071b6:	4ba8      	ldr	r3, [pc, #672]	; (8007458 <UART_SetConfig+0x6a8>)
 80071b8:	0052      	lsls	r2, r2, #1
 80071ba:	5ad3      	ldrh	r3, [r2, r3]
 80071bc:	0019      	movs	r1, r3
 80071be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80071c0:	f7f8 ffbc 	bl	800013c <__udivsi3>
 80071c4:	0003      	movs	r3, r0
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	0013      	movs	r3, r2
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	189b      	adds	r3, r3, r2
 80071d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d305      	bcc.n	80071e4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d906      	bls.n	80071f2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80071e4:	231a      	movs	r3, #26
 80071e6:	2220      	movs	r2, #32
 80071e8:	189b      	adds	r3, r3, r2
 80071ea:	19db      	adds	r3, r3, r7
 80071ec:	2201      	movs	r2, #1
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e044      	b.n	800727c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	2300      	movs	r3, #0
 80071f8:	61fb      	str	r3, [r7, #28]
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071fe:	4b96      	ldr	r3, [pc, #600]	; (8007458 <UART_SetConfig+0x6a8>)
 8007200:	0052      	lsls	r2, r2, #1
 8007202:	5ad3      	ldrh	r3, [r2, r3]
 8007204:	613b      	str	r3, [r7, #16]
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	69b8      	ldr	r0, [r7, #24]
 8007210:	69f9      	ldr	r1, [r7, #28]
 8007212:	f7f9 f947 	bl	80004a4 <__aeabi_uldivmod>
 8007216:	0002      	movs	r2, r0
 8007218:	000b      	movs	r3, r1
 800721a:	0e11      	lsrs	r1, r2, #24
 800721c:	021d      	lsls	r5, r3, #8
 800721e:	430d      	orrs	r5, r1
 8007220:	0214      	lsls	r4, r2, #8
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68b8      	ldr	r0, [r7, #8]
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	1900      	adds	r0, r0, r4
 8007234:	4169      	adcs	r1, r5
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	2300      	movs	r3, #0
 800723e:	607b      	str	r3, [r7, #4]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f7f9 f92e 	bl	80004a4 <__aeabi_uldivmod>
 8007248:	0002      	movs	r2, r0
 800724a:	000b      	movs	r3, r1
 800724c:	0013      	movs	r3, r2
 800724e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007252:	23c0      	movs	r3, #192	; 0xc0
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	429a      	cmp	r2, r3
 8007258:	d309      	bcc.n	800726e <UART_SetConfig+0x4be>
 800725a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	035b      	lsls	r3, r3, #13
 8007260:	429a      	cmp	r2, r3
 8007262:	d204      	bcs.n	800726e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800726a:	60da      	str	r2, [r3, #12]
 800726c:	e006      	b.n	800727c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800726e:	231a      	movs	r3, #26
 8007270:	2220      	movs	r2, #32
 8007272:	189b      	adds	r3, r3, r2
 8007274:	19db      	adds	r3, r3, r7
 8007276:	2201      	movs	r2, #1
 8007278:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800727a:	e0d0      	b.n	800741e <UART_SetConfig+0x66e>
 800727c:	e0cf      	b.n	800741e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	69da      	ldr	r2, [r3, #28]
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	429a      	cmp	r2, r3
 8007288:	d000      	beq.n	800728c <UART_SetConfig+0x4dc>
 800728a:	e070      	b.n	800736e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800728c:	231b      	movs	r3, #27
 800728e:	2220      	movs	r2, #32
 8007290:	189b      	adds	r3, r3, r2
 8007292:	19db      	adds	r3, r3, r7
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b08      	cmp	r3, #8
 8007298:	d015      	beq.n	80072c6 <UART_SetConfig+0x516>
 800729a:	dc18      	bgt.n	80072ce <UART_SetConfig+0x51e>
 800729c:	2b04      	cmp	r3, #4
 800729e:	d00d      	beq.n	80072bc <UART_SetConfig+0x50c>
 80072a0:	dc15      	bgt.n	80072ce <UART_SetConfig+0x51e>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <UART_SetConfig+0x4fc>
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d005      	beq.n	80072b6 <UART_SetConfig+0x506>
 80072aa:	e010      	b.n	80072ce <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fd ffba 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 80072b0:	0003      	movs	r3, r0
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b4:	e014      	b.n	80072e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b6:	4b67      	ldr	r3, [pc, #412]	; (8007454 <UART_SetConfig+0x6a4>)
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ba:	e011      	b.n	80072e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072bc:	f7fd ff26 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80072c0:	0003      	movs	r3, r0
 80072c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c4:	e00c      	b.n	80072e0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c6:	2380      	movs	r3, #128	; 0x80
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072cc:	e008      	b.n	80072e0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80072d2:	231a      	movs	r3, #26
 80072d4:	2220      	movs	r2, #32
 80072d6:	189b      	adds	r3, r3, r2
 80072d8:	19db      	adds	r3, r3, r7
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]
        break;
 80072de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d100      	bne.n	80072e8 <UART_SetConfig+0x538>
 80072e6:	e09a      	b.n	800741e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ec:	4b5a      	ldr	r3, [pc, #360]	; (8007458 <UART_SetConfig+0x6a8>)
 80072ee:	0052      	lsls	r2, r2, #1
 80072f0:	5ad3      	ldrh	r3, [r2, r3]
 80072f2:	0019      	movs	r1, r3
 80072f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80072f6:	f7f8 ff21 	bl	800013c <__udivsi3>
 80072fa:	0003      	movs	r3, r0
 80072fc:	005a      	lsls	r2, r3, #1
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	18d2      	adds	r2, r2, r3
 8007306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	0019      	movs	r1, r3
 800730c:	0010      	movs	r0, r2
 800730e:	f7f8 ff15 	bl	800013c <__udivsi3>
 8007312:	0003      	movs	r3, r0
 8007314:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	2b0f      	cmp	r3, #15
 800731a:	d921      	bls.n	8007360 <UART_SetConfig+0x5b0>
 800731c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	025b      	lsls	r3, r3, #9
 8007322:	429a      	cmp	r2, r3
 8007324:	d21c      	bcs.n	8007360 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	b29a      	uxth	r2, r3
 800732a:	200e      	movs	r0, #14
 800732c:	2420      	movs	r4, #32
 800732e:	1903      	adds	r3, r0, r4
 8007330:	19db      	adds	r3, r3, r7
 8007332:	210f      	movs	r1, #15
 8007334:	438a      	bics	r2, r1
 8007336:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	085b      	lsrs	r3, r3, #1
 800733c:	b29b      	uxth	r3, r3
 800733e:	2207      	movs	r2, #7
 8007340:	4013      	ands	r3, r2
 8007342:	b299      	uxth	r1, r3
 8007344:	1903      	adds	r3, r0, r4
 8007346:	19db      	adds	r3, r3, r7
 8007348:	1902      	adds	r2, r0, r4
 800734a:	19d2      	adds	r2, r2, r7
 800734c:	8812      	ldrh	r2, [r2, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	1902      	adds	r2, r0, r4
 8007358:	19d2      	adds	r2, r2, r7
 800735a:	8812      	ldrh	r2, [r2, #0]
 800735c:	60da      	str	r2, [r3, #12]
 800735e:	e05e      	b.n	800741e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007360:	231a      	movs	r3, #26
 8007362:	2220      	movs	r2, #32
 8007364:	189b      	adds	r3, r3, r2
 8007366:	19db      	adds	r3, r3, r7
 8007368:	2201      	movs	r2, #1
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	e057      	b.n	800741e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800736e:	231b      	movs	r3, #27
 8007370:	2220      	movs	r2, #32
 8007372:	189b      	adds	r3, r3, r2
 8007374:	19db      	adds	r3, r3, r7
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b08      	cmp	r3, #8
 800737a:	d015      	beq.n	80073a8 <UART_SetConfig+0x5f8>
 800737c:	dc18      	bgt.n	80073b0 <UART_SetConfig+0x600>
 800737e:	2b04      	cmp	r3, #4
 8007380:	d00d      	beq.n	800739e <UART_SetConfig+0x5ee>
 8007382:	dc15      	bgt.n	80073b0 <UART_SetConfig+0x600>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <UART_SetConfig+0x5de>
 8007388:	2b02      	cmp	r3, #2
 800738a:	d005      	beq.n	8007398 <UART_SetConfig+0x5e8>
 800738c:	e010      	b.n	80073b0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800738e:	f7fd ff49 	bl	8005224 <HAL_RCC_GetPCLK1Freq>
 8007392:	0003      	movs	r3, r0
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007396:	e014      	b.n	80073c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007398:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <UART_SetConfig+0x6a4>)
 800739a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800739c:	e011      	b.n	80073c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800739e:	f7fd feb5 	bl	800510c <HAL_RCC_GetSysClockFreq>
 80073a2:	0003      	movs	r3, r0
 80073a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a6:	e00c      	b.n	80073c2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073a8:	2380      	movs	r3, #128	; 0x80
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ae:	e008      	b.n	80073c2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80073b4:	231a      	movs	r3, #26
 80073b6:	2220      	movs	r2, #32
 80073b8:	189b      	adds	r3, r3, r2
 80073ba:	19db      	adds	r3, r3, r7
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
        break;
 80073c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d02a      	beq.n	800741e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073cc:	4b22      	ldr	r3, [pc, #136]	; (8007458 <UART_SetConfig+0x6a8>)
 80073ce:	0052      	lsls	r2, r2, #1
 80073d0:	5ad3      	ldrh	r3, [r2, r3]
 80073d2:	0019      	movs	r1, r3
 80073d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80073d6:	f7f8 feb1 	bl	800013c <__udivsi3>
 80073da:	0003      	movs	r3, r0
 80073dc:	001a      	movs	r2, r3
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	085b      	lsrs	r3, r3, #1
 80073e4:	18d2      	adds	r2, r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	0019      	movs	r1, r3
 80073ec:	0010      	movs	r0, r2
 80073ee:	f7f8 fea5 	bl	800013c <__udivsi3>
 80073f2:	0003      	movs	r3, r0
 80073f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2b0f      	cmp	r3, #15
 80073fa:	d90a      	bls.n	8007412 <UART_SetConfig+0x662>
 80073fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fe:	2380      	movs	r3, #128	; 0x80
 8007400:	025b      	lsls	r3, r3, #9
 8007402:	429a      	cmp	r2, r3
 8007404:	d205      	bcs.n	8007412 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	b29a      	uxth	r2, r3
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60da      	str	r2, [r3, #12]
 8007410:	e005      	b.n	800741e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007412:	231a      	movs	r3, #26
 8007414:	2220      	movs	r2, #32
 8007416:	189b      	adds	r3, r3, r2
 8007418:	19db      	adds	r3, r3, r7
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800741e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007420:	226a      	movs	r2, #106	; 0x6a
 8007422:	2101      	movs	r1, #1
 8007424:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007428:	2268      	movs	r2, #104	; 0x68
 800742a:	2101      	movs	r1, #1
 800742c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	2200      	movs	r2, #0
 8007432:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	2200      	movs	r2, #0
 8007438:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800743a:	231a      	movs	r3, #26
 800743c:	2220      	movs	r2, #32
 800743e:	189b      	adds	r3, r3, r2
 8007440:	19db      	adds	r3, r3, r7
 8007442:	781b      	ldrb	r3, [r3, #0]
}
 8007444:	0018      	movs	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	b010      	add	sp, #64	; 0x40
 800744a:	bdb0      	pop	{r4, r5, r7, pc}
 800744c:	40008000 	.word	0x40008000
 8007450:	40008400 	.word	0x40008400
 8007454:	00f42400 	.word	0x00f42400
 8007458:	08014518 	.word	0x08014518

0800745c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	2208      	movs	r2, #8
 800746a:	4013      	ands	r3, r2
 800746c:	d00b      	beq.n	8007486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	4a4a      	ldr	r2, [pc, #296]	; (80075a0 <UART_AdvFeatureConfig+0x144>)
 8007476:	4013      	ands	r3, r2
 8007478:	0019      	movs	r1, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	2201      	movs	r2, #1
 800748c:	4013      	ands	r3, r2
 800748e:	d00b      	beq.n	80074a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	4a43      	ldr	r2, [pc, #268]	; (80075a4 <UART_AdvFeatureConfig+0x148>)
 8007498:	4013      	ands	r3, r2
 800749a:	0019      	movs	r1, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ac:	2202      	movs	r2, #2
 80074ae:	4013      	ands	r3, r2
 80074b0:	d00b      	beq.n	80074ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	4a3b      	ldr	r2, [pc, #236]	; (80075a8 <UART_AdvFeatureConfig+0x14c>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	0019      	movs	r1, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	2204      	movs	r2, #4
 80074d0:	4013      	ands	r3, r2
 80074d2:	d00b      	beq.n	80074ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	4a34      	ldr	r2, [pc, #208]	; (80075ac <UART_AdvFeatureConfig+0x150>)
 80074dc:	4013      	ands	r3, r2
 80074de:	0019      	movs	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	2210      	movs	r2, #16
 80074f2:	4013      	ands	r3, r2
 80074f4:	d00b      	beq.n	800750e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	4a2c      	ldr	r2, [pc, #176]	; (80075b0 <UART_AdvFeatureConfig+0x154>)
 80074fe:	4013      	ands	r3, r2
 8007500:	0019      	movs	r1, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	2220      	movs	r2, #32
 8007514:	4013      	ands	r3, r2
 8007516:	d00b      	beq.n	8007530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	4a25      	ldr	r2, [pc, #148]	; (80075b4 <UART_AdvFeatureConfig+0x158>)
 8007520:	4013      	ands	r3, r2
 8007522:	0019      	movs	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	2240      	movs	r2, #64	; 0x40
 8007536:	4013      	ands	r3, r2
 8007538:	d01d      	beq.n	8007576 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <UART_AdvFeatureConfig+0x15c>)
 8007542:	4013      	ands	r3, r2
 8007544:	0019      	movs	r1, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007556:	2380      	movs	r3, #128	; 0x80
 8007558:	035b      	lsls	r3, r3, #13
 800755a:	429a      	cmp	r2, r3
 800755c:	d10b      	bne.n	8007576 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <UART_AdvFeatureConfig+0x160>)
 8007566:	4013      	ands	r3, r2
 8007568:	0019      	movs	r1, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	430a      	orrs	r2, r1
 8007574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757a:	2280      	movs	r2, #128	; 0x80
 800757c:	4013      	ands	r3, r2
 800757e:	d00b      	beq.n	8007598 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	4a0e      	ldr	r2, [pc, #56]	; (80075c0 <UART_AdvFeatureConfig+0x164>)
 8007588:	4013      	ands	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	605a      	str	r2, [r3, #4]
  }
}
 8007598:	46c0      	nop			; (mov r8, r8)
 800759a:	46bd      	mov	sp, r7
 800759c:	b002      	add	sp, #8
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	ffff7fff 	.word	0xffff7fff
 80075a4:	fffdffff 	.word	0xfffdffff
 80075a8:	fffeffff 	.word	0xfffeffff
 80075ac:	fffbffff 	.word	0xfffbffff
 80075b0:	ffffefff 	.word	0xffffefff
 80075b4:	ffffdfff 	.word	0xffffdfff
 80075b8:	ffefffff 	.word	0xffefffff
 80075bc:	ff9fffff 	.word	0xff9fffff
 80075c0:	fff7ffff 	.word	0xfff7ffff

080075c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b092      	sub	sp, #72	; 0x48
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2290      	movs	r2, #144	; 0x90
 80075d0:	2100      	movs	r1, #0
 80075d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075d4:	f7fc fc80 	bl	8003ed8 <HAL_GetTick>
 80075d8:	0003      	movs	r3, r0
 80075da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2208      	movs	r2, #8
 80075e4:	4013      	ands	r3, r2
 80075e6:	2b08      	cmp	r3, #8
 80075e8:	d12d      	bne.n	8007646 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ec:	2280      	movs	r2, #128	; 0x80
 80075ee:	0391      	lsls	r1, r2, #14
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	4a47      	ldr	r2, [pc, #284]	; (8007710 <UART_CheckIdleState+0x14c>)
 80075f4:	9200      	str	r2, [sp, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f000 f88e 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d022      	beq.n	8007646 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007600:	f3ef 8310 	mrs	r3, PRIMASK
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007608:	63bb      	str	r3, [r7, #56]	; 0x38
 800760a:	2301      	movs	r3, #1
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007610:	f383 8810 	msr	PRIMASK, r3
}
 8007614:	46c0      	nop			; (mov r8, r8)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2180      	movs	r1, #128	; 0x80
 8007622:	438a      	bics	r2, r1
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800762a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800762c:	f383 8810 	msr	PRIMASK, r3
}
 8007630:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2288      	movs	r2, #136	; 0x88
 8007636:	2120      	movs	r1, #32
 8007638:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2284      	movs	r2, #132	; 0x84
 800763e:	2100      	movs	r1, #0
 8007640:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e060      	b.n	8007708 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2204      	movs	r2, #4
 800764e:	4013      	ands	r3, r2
 8007650:	2b04      	cmp	r3, #4
 8007652:	d146      	bne.n	80076e2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007656:	2280      	movs	r2, #128	; 0x80
 8007658:	03d1      	lsls	r1, r2, #15
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	4a2c      	ldr	r2, [pc, #176]	; (8007710 <UART_CheckIdleState+0x14c>)
 800765e:	9200      	str	r2, [sp, #0]
 8007660:	2200      	movs	r2, #0
 8007662:	f000 f859 	bl	8007718 <UART_WaitOnFlagUntilTimeout>
 8007666:	1e03      	subs	r3, r0, #0
 8007668:	d03b      	beq.n	80076e2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800766a:	f3ef 8310 	mrs	r3, PRIMASK
 800766e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007670:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
 8007674:	2301      	movs	r3, #1
 8007676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f383 8810 	msr	PRIMASK, r3
}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4922      	ldr	r1, [pc, #136]	; (8007714 <UART_CheckIdleState+0x150>)
 800768c:	400a      	ands	r2, r1
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f383 8810 	msr	PRIMASK, r3
}
 800769a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800769c:	f3ef 8310 	mrs	r3, PRIMASK
 80076a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80076a2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a4:	633b      	str	r3, [r7, #48]	; 0x30
 80076a6:	2301      	movs	r3, #1
 80076a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	f383 8810 	msr	PRIMASK, r3
}
 80076b0:	46c0      	nop			; (mov r8, r8)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2101      	movs	r1, #1
 80076be:	438a      	bics	r2, r1
 80076c0:	609a      	str	r2, [r3, #8]
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f383 8810 	msr	PRIMASK, r3
}
 80076cc:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	228c      	movs	r2, #140	; 0x8c
 80076d2:	2120      	movs	r1, #32
 80076d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2284      	movs	r2, #132	; 0x84
 80076da:	2100      	movs	r1, #0
 80076dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e012      	b.n	8007708 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2288      	movs	r2, #136	; 0x88
 80076e6:	2120      	movs	r1, #32
 80076e8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	228c      	movs	r2, #140	; 0x8c
 80076ee:	2120      	movs	r1, #32
 80076f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2284      	movs	r2, #132	; 0x84
 8007702:	2100      	movs	r1, #0
 8007704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	0018      	movs	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	b010      	add	sp, #64	; 0x40
 800770e:	bd80      	pop	{r7, pc}
 8007710:	01ffffff 	.word	0x01ffffff
 8007714:	fffffedf 	.word	0xfffffedf

08007718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	1dfb      	adds	r3, r7, #7
 8007726:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007728:	e051      	b.n	80077ce <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	3301      	adds	r3, #1
 800772e:	d04e      	beq.n	80077ce <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007730:	f7fc fbd2 	bl	8003ed8 <HAL_GetTick>
 8007734:	0002      	movs	r2, r0
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	429a      	cmp	r2, r3
 800773e:	d302      	bcc.n	8007746 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e051      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2204      	movs	r2, #4
 8007752:	4013      	ands	r3, r2
 8007754:	d03b      	beq.n	80077ce <UART_WaitOnFlagUntilTimeout+0xb6>
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b80      	cmp	r3, #128	; 0x80
 800775a:	d038      	beq.n	80077ce <UART_WaitOnFlagUntilTimeout+0xb6>
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b40      	cmp	r3, #64	; 0x40
 8007760:	d035      	beq.n	80077ce <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	2208      	movs	r2, #8
 800776a:	4013      	ands	r3, r2
 800776c:	2b08      	cmp	r3, #8
 800776e:	d111      	bne.n	8007794 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2208      	movs	r2, #8
 8007776:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	0018      	movs	r0, r3
 800777c:	f000 f83c 	bl	80077f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2290      	movs	r2, #144	; 0x90
 8007784:	2108      	movs	r1, #8
 8007786:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2284      	movs	r2, #132	; 0x84
 800778c:	2100      	movs	r1, #0
 800778e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e02c      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69da      	ldr	r2, [r3, #28]
 800779a:	2380      	movs	r3, #128	; 0x80
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	401a      	ands	r2, r3
 80077a0:	2380      	movs	r3, #128	; 0x80
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d112      	bne.n	80077ce <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2280      	movs	r2, #128	; 0x80
 80077ae:	0112      	lsls	r2, r2, #4
 80077b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f000 f81f 	bl	80077f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2290      	movs	r2, #144	; 0x90
 80077be:	2120      	movs	r1, #32
 80077c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2284      	movs	r2, #132	; 0x84
 80077c6:	2100      	movs	r1, #0
 80077c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e00f      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	4013      	ands	r3, r2
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	425a      	negs	r2, r3
 80077de:	4153      	adcs	r3, r2
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	001a      	movs	r2, r3
 80077e4:	1dfb      	adds	r3, r7, #7
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d09e      	beq.n	800772a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	0018      	movs	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	b004      	add	sp, #16
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08e      	sub	sp, #56	; 0x38
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007800:	f3ef 8310 	mrs	r3, PRIMASK
 8007804:	617b      	str	r3, [r7, #20]
  return(result);
 8007806:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
 800780a:	2301      	movs	r3, #1
 800780c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f383 8810 	msr	PRIMASK, r3
}
 8007814:	46c0      	nop			; (mov r8, r8)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4926      	ldr	r1, [pc, #152]	; (80078bc <UART_EndRxTransfer+0xc4>)
 8007822:	400a      	ands	r2, r1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f383 8810 	msr	PRIMASK, r3
}
 8007830:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007832:	f3ef 8310 	mrs	r3, PRIMASK
 8007836:	623b      	str	r3, [r7, #32]
  return(result);
 8007838:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800783a:	633b      	str	r3, [r7, #48]	; 0x30
 800783c:	2301      	movs	r3, #1
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	f383 8810 	msr	PRIMASK, r3
}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	491b      	ldr	r1, [pc, #108]	; (80078c0 <UART_EndRxTransfer+0xc8>)
 8007854:	400a      	ands	r2, r1
 8007856:	609a      	str	r2, [r3, #8]
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	f383 8810 	msr	PRIMASK, r3
}
 8007862:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d118      	bne.n	800789e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786c:	f3ef 8310 	mrs	r3, PRIMASK
 8007870:	60bb      	str	r3, [r7, #8]
  return(result);
 8007872:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007876:	2301      	movs	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f383 8810 	msr	PRIMASK, r3
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2110      	movs	r1, #16
 800788e:	438a      	bics	r2, r1
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f383 8810 	msr	PRIMASK, r3
}
 800789c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	228c      	movs	r2, #140	; 0x8c
 80078a2:	2120      	movs	r1, #32
 80078a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b00e      	add	sp, #56	; 0x38
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	fffffedf 	.word	0xfffffedf
 80078c0:	effffffe 	.word	0xeffffffe

080078c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2284      	movs	r2, #132	; 0x84
 80078d0:	5c9b      	ldrb	r3, [r3, r2]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_UARTEx_DisableFifoMode+0x16>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e027      	b.n	800792a <HAL_UARTEx_DisableFifoMode+0x66>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2284      	movs	r2, #132	; 0x84
 80078de:	2101      	movs	r1, #1
 80078e0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2288      	movs	r2, #136	; 0x88
 80078e6:	2124      	movs	r1, #36	; 0x24
 80078e8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2101      	movs	r1, #1
 80078fe:	438a      	bics	r2, r1
 8007900:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4a0b      	ldr	r2, [pc, #44]	; (8007934 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007906:	4013      	ands	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2288      	movs	r2, #136	; 0x88
 800791c:	2120      	movs	r1, #32
 800791e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2284      	movs	r2, #132	; 0x84
 8007924:	2100      	movs	r1, #0
 8007926:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	0018      	movs	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	b004      	add	sp, #16
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	dfffffff 	.word	0xdfffffff

08007938 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2284      	movs	r2, #132	; 0x84
 8007946:	5c9b      	ldrb	r3, [r3, r2]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800794c:	2302      	movs	r3, #2
 800794e:	e02e      	b.n	80079ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2284      	movs	r2, #132	; 0x84
 8007954:	2101      	movs	r1, #1
 8007956:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2288      	movs	r2, #136	; 0x88
 800795c:	2124      	movs	r1, #36	; 0x24
 800795e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2101      	movs	r1, #1
 8007974:	438a      	bics	r2, r1
 8007976:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	00db      	lsls	r3, r3, #3
 8007980:	08d9      	lsrs	r1, r3, #3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	0018      	movs	r0, r3
 8007990:	f000 f854 	bl	8007a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2288      	movs	r2, #136	; 0x88
 80079a0:	2120      	movs	r1, #32
 80079a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2284      	movs	r2, #132	; 0x84
 80079a8:	2100      	movs	r1, #0
 80079aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	0018      	movs	r0, r3
 80079b0:	46bd      	mov	sp, r7
 80079b2:	b004      	add	sp, #16
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2284      	movs	r2, #132	; 0x84
 80079c6:	5c9b      	ldrb	r3, [r3, r2]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e02f      	b.n	8007a30 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2284      	movs	r2, #132	; 0x84
 80079d4:	2101      	movs	r1, #1
 80079d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2288      	movs	r2, #136	; 0x88
 80079dc:	2124      	movs	r1, #36	; 0x24
 80079de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2101      	movs	r1, #1
 80079f4:	438a      	bics	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	4a0e      	ldr	r2, [pc, #56]	; (8007a38 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	0019      	movs	r1, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	0018      	movs	r0, r3
 8007a12:	f000 f813 	bl	8007a3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2288      	movs	r2, #136	; 0x88
 8007a22:	2120      	movs	r1, #32
 8007a24:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2284      	movs	r2, #132	; 0x84
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	0018      	movs	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	b004      	add	sp, #16
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	f1ffffff 	.word	0xf1ffffff

08007a3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d108      	bne.n	8007a5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	226a      	movs	r2, #106	; 0x6a
 8007a50:	2101      	movs	r1, #1
 8007a52:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2268      	movs	r2, #104	; 0x68
 8007a58:	2101      	movs	r1, #1
 8007a5a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a5c:	e043      	b.n	8007ae6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a5e:	260f      	movs	r6, #15
 8007a60:	19bb      	adds	r3, r7, r6
 8007a62:	2208      	movs	r2, #8
 8007a64:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a66:	200e      	movs	r0, #14
 8007a68:	183b      	adds	r3, r7, r0
 8007a6a:	2208      	movs	r2, #8
 8007a6c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	0e5b      	lsrs	r3, r3, #25
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	240d      	movs	r4, #13
 8007a7a:	193b      	adds	r3, r7, r4
 8007a7c:	2107      	movs	r1, #7
 8007a7e:	400a      	ands	r2, r1
 8007a80:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	0f5b      	lsrs	r3, r3, #29
 8007a8a:	b2da      	uxtb	r2, r3
 8007a8c:	250c      	movs	r5, #12
 8007a8e:	197b      	adds	r3, r7, r5
 8007a90:	2107      	movs	r1, #7
 8007a92:	400a      	ands	r2, r1
 8007a94:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a96:	183b      	adds	r3, r7, r0
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	197a      	adds	r2, r7, r5
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	4914      	ldr	r1, [pc, #80]	; (8007af0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007aa0:	5c8a      	ldrb	r2, [r1, r2]
 8007aa2:	435a      	muls	r2, r3
 8007aa4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007aa6:	197b      	adds	r3, r7, r5
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	4a12      	ldr	r2, [pc, #72]	; (8007af4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007aac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aae:	0019      	movs	r1, r3
 8007ab0:	f7f8 fbce 	bl	8000250 <__divsi3>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	b299      	uxth	r1, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	226a      	movs	r2, #106	; 0x6a
 8007abc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007abe:	19bb      	adds	r3, r7, r6
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	193a      	adds	r2, r7, r4
 8007ac4:	7812      	ldrb	r2, [r2, #0]
 8007ac6:	490a      	ldr	r1, [pc, #40]	; (8007af0 <UARTEx_SetNbDataToProcess+0xb4>)
 8007ac8:	5c8a      	ldrb	r2, [r1, r2]
 8007aca:	435a      	muls	r2, r3
 8007acc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ace:	193b      	adds	r3, r7, r4
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <UARTEx_SetNbDataToProcess+0xb8>)
 8007ad4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ad6:	0019      	movs	r1, r3
 8007ad8:	f7f8 fbba 	bl	8000250 <__divsi3>
 8007adc:	0003      	movs	r3, r0
 8007ade:	b299      	uxth	r1, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2268      	movs	r2, #104	; 0x68
 8007ae4:	5299      	strh	r1, [r3, r2]
}
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b005      	add	sp, #20
 8007aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	08014530 	.word	0x08014530
 8007af4:	08014538 	.word	0x08014538

08007af8 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8007af8:	b5b0      	push	{r4, r5, r7, lr}
 8007afa:	b0e4      	sub	sp, #400	; 0x190
 8007afc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007afe:	24c8      	movs	r4, #200	; 0xc8
 8007b00:	193b      	adds	r3, r7, r4
 8007b02:	0018      	movs	r0, r3
 8007b04:	23c6      	movs	r3, #198	; 0xc6
 8007b06:	001a      	movs	r2, r3
 8007b08:	2100      	movs	r1, #0
 8007b0a:	f004 f9f1 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8007b0e:	4b13      	ldr	r3, [pc, #76]	; (8007b5c <astronode_send_cfg_sr+0x64>)
 8007b10:	25c8      	movs	r5, #200	; 0xc8
 8007b12:	006d      	lsls	r5, r5, #1
 8007b14:	195b      	adds	r3, r3, r5
 8007b16:	19db      	adds	r3, r3, r7
 8007b18:	0018      	movs	r0, r3
 8007b1a:	23c6      	movs	r3, #198	; 0xc6
 8007b1c:	001a      	movs	r2, r3
 8007b1e:	2100      	movs	r1, #0
 8007b20:	f004 f9e6 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8007b24:	193b      	adds	r3, r7, r4
 8007b26:	2210      	movs	r2, #16
 8007b28:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8007b2a:	003a      	movs	r2, r7
 8007b2c:	193b      	adds	r3, r7, r4
 8007b2e:	0011      	movs	r1, r2
 8007b30:	0018      	movs	r0, r3
 8007b32:	f001 fa87 	bl	8009044 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8007b36:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <astronode_send_cfg_sr+0x64>)
 8007b38:	195b      	adds	r3, r3, r5
 8007b3a:	19db      	adds	r3, r3, r7
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	2b90      	cmp	r3, #144	; 0x90
 8007b40:	d104      	bne.n	8007b4c <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8007b42:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <astronode_send_cfg_sr+0x68>)
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7fb fb6d 	bl	8003224 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8007b4a:	e003      	b.n	8007b54 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <astronode_send_cfg_sr+0x6c>)
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f7fb fb68 	bl	8003224 <send_debug_logs>
}
 8007b54:	46c0      	nop			; (mov r8, r8)
 8007b56:	46bd      	mov	sp, r7
 8007b58:	b064      	add	sp, #400	; 0x190
 8007b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b5c:	fffffe70 	.word	0xfffffe70
 8007b60:	08012f80 	.word	0x08012f80
 8007b64:	08012fb4 	.word	0x08012fb4

08007b68 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8007b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b6a:	b0e7      	sub	sp, #412	; 0x19c
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	0005      	movs	r5, r0
 8007b70:	000c      	movs	r4, r1
 8007b72:	0010      	movs	r0, r2
 8007b74:	0019      	movs	r1, r3
 8007b76:	4b4b      	ldr	r3, [pc, #300]	; (8007ca4 <astronode_send_cfg_wr+0x13c>)
 8007b78:	26cc      	movs	r6, #204	; 0xcc
 8007b7a:	0076      	lsls	r6, r6, #1
 8007b7c:	199b      	adds	r3, r3, r6
 8007b7e:	19db      	adds	r3, r3, r7
 8007b80:	1c2a      	adds	r2, r5, #0
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	4b48      	ldr	r3, [pc, #288]	; (8007ca8 <astronode_send_cfg_wr+0x140>)
 8007b86:	0035      	movs	r5, r6
 8007b88:	195b      	adds	r3, r3, r5
 8007b8a:	19db      	adds	r3, r3, r7
 8007b8c:	1c22      	adds	r2, r4, #0
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	4b46      	ldr	r3, [pc, #280]	; (8007cac <astronode_send_cfg_wr+0x144>)
 8007b92:	002c      	movs	r4, r5
 8007b94:	191b      	adds	r3, r3, r4
 8007b96:	19db      	adds	r3, r3, r7
 8007b98:	1c02      	adds	r2, r0, #0
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	4b44      	ldr	r3, [pc, #272]	; (8007cb0 <astronode_send_cfg_wr+0x148>)
 8007b9e:	191b      	adds	r3, r3, r4
 8007ba0:	19db      	adds	r3, r3, r7
 8007ba2:	1c0a      	adds	r2, r1, #0
 8007ba4:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8007ba6:	25d0      	movs	r5, #208	; 0xd0
 8007ba8:	197b      	adds	r3, r7, r5
 8007baa:	0018      	movs	r0, r3
 8007bac:	23c6      	movs	r3, #198	; 0xc6
 8007bae:	001a      	movs	r2, r3
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	f004 f99d 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8007bb6:	4b3f      	ldr	r3, [pc, #252]	; (8007cb4 <astronode_send_cfg_wr+0x14c>)
 8007bb8:	191b      	adds	r3, r3, r4
 8007bba:	19db      	adds	r3, r3, r7
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	23c6      	movs	r3, #198	; 0xc6
 8007bc0:	001a      	movs	r2, r3
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	f004 f994 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8007bc8:	0029      	movs	r1, r5
 8007bca:	187b      	adds	r3, r7, r1
 8007bcc:	2205      	movs	r2, #5
 8007bce:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8007bd0:	4b34      	ldr	r3, [pc, #208]	; (8007ca4 <astronode_send_cfg_wr+0x13c>)
 8007bd2:	191b      	adds	r3, r3, r4
 8007bd4:	19db      	adds	r3, r3, r7
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	569a      	ldrsb	r2, [r3, r2]
 8007bda:	4b33      	ldr	r3, [pc, #204]	; (8007ca8 <astronode_send_cfg_wr+0x140>)
 8007bdc:	191b      	adds	r3, r3, r4
 8007bde:	19db      	adds	r3, r3, r7
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	005b      	lsls	r3, r3, #1
 8007be4:	b25b      	sxtb	r3, r3
 8007be6:	4313      	orrs	r3, r2
 8007be8:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8007bea:	4b30      	ldr	r3, [pc, #192]	; (8007cac <astronode_send_cfg_wr+0x144>)
 8007bec:	191b      	adds	r3, r3, r4
 8007bee:	19db      	adds	r3, r3, r7
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	b25b      	sxtb	r3, r3
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8007bfa:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <astronode_send_cfg_wr+0x148>)
 8007bfc:	191b      	adds	r3, r3, r4
 8007bfe:	19db      	adds	r3, r3, r7
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	00db      	lsls	r3, r3, #3
 8007c04:	b25b      	sxtb	r3, r3
 8007c06:	4313      	orrs	r3, r2
 8007c08:	b25b      	sxtb	r3, r3
 8007c0a:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8007c0c:	187b      	adds	r3, r7, r1
 8007c0e:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8007c10:	23d4      	movs	r3, #212	; 0xd4
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	2508      	movs	r5, #8
 8007c16:	195b      	adds	r3, r3, r5
 8007c18:	19db      	adds	r3, r3, r7
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	569a      	ldrsb	r2, [r3, r2]
 8007c1e:	23d6      	movs	r3, #214	; 0xd6
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	195b      	adds	r3, r3, r5
 8007c24:	19db      	adds	r3, r3, r7
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8007c30:	23d8      	movs	r3, #216	; 0xd8
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	195b      	adds	r3, r3, r5
 8007c36:	19db      	adds	r3, r3, r7
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	b25b      	sxtb	r3, r3
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8007c42:	23da      	movs	r3, #218	; 0xda
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	195b      	adds	r3, r3, r5
 8007c48:	19db      	adds	r3, r3, r7
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	b25b      	sxtb	r3, r3
 8007c50:	4313      	orrs	r3, r2
 8007c52:	b25b      	sxtb	r3, r3
 8007c54:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8007c56:	187b      	adds	r3, r7, r1
 8007c58:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8007c5a:	0008      	movs	r0, r1
 8007c5c:	187b      	adds	r3, r7, r1
 8007c5e:	22c4      	movs	r2, #196	; 0xc4
 8007c60:	2103      	movs	r1, #3
 8007c62:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007c64:	002b      	movs	r3, r5
 8007c66:	18fa      	adds	r2, r7, r3
 8007c68:	183b      	adds	r3, r7, r0
 8007c6a:	0011      	movs	r1, r2
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	f001 f9e9 	bl	8009044 <astronode_transport_send_receive>
 8007c72:	0003      	movs	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10f      	bne.n	8007c98 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8007c78:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <astronode_send_cfg_wr+0x14c>)
 8007c7a:	191b      	adds	r3, r3, r4
 8007c7c:	19db      	adds	r3, r3, r7
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b85      	cmp	r3, #133	; 0x85
 8007c82:	d105      	bne.n	8007c90 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8007c84:	4b0c      	ldr	r3, [pc, #48]	; (8007cb8 <astronode_send_cfg_wr+0x150>)
 8007c86:	0018      	movs	r0, r3
 8007c88:	f7fb facc 	bl	8003224 <send_debug_logs>
            return true ;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e004      	b.n	8007c9a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8007c90:	4b0a      	ldr	r3, [pc, #40]	; (8007cbc <astronode_send_cfg_wr+0x154>)
 8007c92:	0018      	movs	r0, r3
 8007c94:	f7fb fac6 	bl	8003224 <send_debug_logs>
        }
    }
    return false ;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	0018      	movs	r0, r3
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	b067      	add	sp, #412	; 0x19c
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca2:	46c0      	nop			; (mov r8, r8)
 8007ca4:	fffffe6f 	.word	0xfffffe6f
 8007ca8:	fffffe6e 	.word	0xfffffe6e
 8007cac:	fffffe6d 	.word	0xfffffe6d
 8007cb0:	fffffe6c 	.word	0xfffffe6c
 8007cb4:	fffffe70 	.word	0xfffffe70
 8007cb8:	08012fe8 	.word	0x08012fe8
 8007cbc:	08013014 	.word	0x08013014

08007cc0 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8007cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cc2:	b0ed      	sub	sp, #436	; 0x1b4
 8007cc4:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007cc6:	21c8      	movs	r1, #200	; 0xc8
 8007cc8:	2318      	movs	r3, #24
 8007cca:	18cb      	adds	r3, r1, r3
 8007ccc:	19db      	adds	r3, r3, r7
 8007cce:	0018      	movs	r0, r3
 8007cd0:	23c6      	movs	r3, #198	; 0xc6
 8007cd2:	001a      	movs	r2, r3
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	f004 f90b 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8007cda:	4b4a      	ldr	r3, [pc, #296]	; (8007e04 <astronode_send_mgi_rr+0x144>)
 8007cdc:	26cc      	movs	r6, #204	; 0xcc
 8007cde:	0076      	lsls	r6, r6, #1
 8007ce0:	199b      	adds	r3, r3, r6
 8007ce2:	2218      	movs	r2, #24
 8007ce4:	4694      	mov	ip, r2
 8007ce6:	44bc      	add	ip, r7
 8007ce8:	4463      	add	r3, ip
 8007cea:	0018      	movs	r0, r3
 8007cec:	23c6      	movs	r3, #198	; 0xc6
 8007cee:	001a      	movs	r2, r3
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	f004 f8fd 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8007cf6:	21c8      	movs	r1, #200	; 0xc8
 8007cf8:	2318      	movs	r3, #24
 8007cfa:	18cb      	adds	r3, r1, r3
 8007cfc:	19db      	adds	r3, r3, r7
 8007cfe:	2219      	movs	r2, #25
 8007d00:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007d02:	2318      	movs	r3, #24
 8007d04:	18fa      	adds	r2, r7, r3
 8007d06:	2318      	movs	r3, #24
 8007d08:	18cb      	adds	r3, r1, r3
 8007d0a:	19db      	adds	r3, r3, r7
 8007d0c:	0011      	movs	r1, r2
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f001 f998 	bl	8009044 <astronode_transport_send_receive>
 8007d14:	0003      	movs	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d16f      	bne.n	8007dfa <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8007d1a:	4b3a      	ldr	r3, [pc, #232]	; (8007e04 <astronode_send_mgi_rr+0x144>)
 8007d1c:	0032      	movs	r2, r6
 8007d1e:	189b      	adds	r3, r3, r2
 8007d20:	2118      	movs	r1, #24
 8007d22:	468c      	mov	ip, r1
 8007d24:	44bc      	add	ip, r7
 8007d26:	4463      	add	r3, ip
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b99      	cmp	r3, #153	; 0x99
 8007d2c:	d161      	bne.n	8007df2 <astronode_send_mgi_rr+0x132>
        {
 8007d2e:	466b      	mov	r3, sp
 8007d30:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8007d32:	4b34      	ldr	r3, [pc, #208]	; (8007e04 <astronode_send_mgi_rr+0x144>)
 8007d34:	189b      	adds	r3, r3, r2
 8007d36:	2218      	movs	r2, #24
 8007d38:	4694      	mov	ip, r2
 8007d3a:	44bc      	add	ip, r7
 8007d3c:	4463      	add	r3, ip
 8007d3e:	22c4      	movs	r2, #196	; 0xc4
 8007d40:	5a9b      	ldrh	r3, [r3, r2]
 8007d42:	001a      	movs	r2, r3
 8007d44:	3a01      	subs	r2, #1
 8007d46:	21ca      	movs	r1, #202	; 0xca
 8007d48:	0049      	lsls	r1, r1, #1
 8007d4a:	2018      	movs	r0, #24
 8007d4c:	1809      	adds	r1, r1, r0
 8007d4e:	19c9      	adds	r1, r1, r7
 8007d50:	600a      	str	r2, [r1, #0]
 8007d52:	001c      	movs	r4, r3
 8007d54:	2200      	movs	r2, #0
 8007d56:	0015      	movs	r5, r2
 8007d58:	0020      	movs	r0, r4
 8007d5a:	0029      	movs	r1, r5
 8007d5c:	0004      	movs	r4, r0
 8007d5e:	0f62      	lsrs	r2, r4, #29
 8007d60:	000c      	movs	r4, r1
 8007d62:	00e4      	lsls	r4, r4, #3
 8007d64:	617c      	str	r4, [r7, #20]
 8007d66:	697c      	ldr	r4, [r7, #20]
 8007d68:	4314      	orrs	r4, r2
 8007d6a:	617c      	str	r4, [r7, #20]
 8007d6c:	0001      	movs	r1, r0
 8007d6e:	00c9      	lsls	r1, r1, #3
 8007d70:	6139      	str	r1, [r7, #16]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	2200      	movs	r2, #0
 8007d76:	607a      	str	r2, [r7, #4]
 8007d78:	6838      	ldr	r0, [r7, #0]
 8007d7a:	6879      	ldr	r1, [r7, #4]
 8007d7c:	0004      	movs	r4, r0
 8007d7e:	0f62      	lsrs	r2, r4, #29
 8007d80:	000c      	movs	r4, r1
 8007d82:	00e4      	lsls	r4, r4, #3
 8007d84:	60fc      	str	r4, [r7, #12]
 8007d86:	68fc      	ldr	r4, [r7, #12]
 8007d88:	4314      	orrs	r4, r2
 8007d8a:	60fc      	str	r4, [r7, #12]
 8007d8c:	0001      	movs	r1, r0
 8007d8e:	00ca      	lsls	r2, r1, #3
 8007d90:	60ba      	str	r2, [r7, #8]
 8007d92:	3307      	adds	r3, #7
 8007d94:	08db      	lsrs	r3, r3, #3
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	4669      	mov	r1, sp
 8007d9a:	1acb      	subs	r3, r1, r3
 8007d9c:	469d      	mov	sp, r3
 8007d9e:	466b      	mov	r3, sp
 8007da0:	3300      	adds	r3, #0
 8007da2:	24c8      	movs	r4, #200	; 0xc8
 8007da4:	0064      	lsls	r4, r4, #1
 8007da6:	2218      	movs	r2, #24
 8007da8:	18a2      	adds	r2, r4, r2
 8007daa:	19d1      	adds	r1, r2, r7
 8007dac:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <astronode_send_mgi_rr+0x148>)
 8007db0:	0018      	movs	r0, r3
 8007db2:	f7fb fa37 	bl	8003224 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <astronode_send_mgi_rr+0x144>)
 8007db8:	22cc      	movs	r2, #204	; 0xcc
 8007dba:	0052      	lsls	r2, r2, #1
 8007dbc:	189b      	adds	r3, r3, r2
 8007dbe:	2218      	movs	r2, #24
 8007dc0:	4694      	mov	ip, r2
 8007dc2:	44bc      	add	ip, r7
 8007dc4:	4463      	add	r3, ip
 8007dc6:	22c4      	movs	r2, #196	; 0xc4
 8007dc8:	5a9b      	ldrh	r3, [r3, r2]
 8007dca:	0019      	movs	r1, r3
 8007dcc:	2318      	movs	r3, #24
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4a0e      	ldr	r2, [pc, #56]	; (8007e0c <astronode_send_mgi_rr+0x14c>)
 8007dd4:	2018      	movs	r0, #24
 8007dd6:	1820      	adds	r0, r4, r0
 8007dd8:	19c0      	adds	r0, r0, r7
 8007dda:	6800      	ldr	r0, [r0, #0]
 8007ddc:	f003 ffbe 	bl	800bd5c <snprintf>
            send_debug_logs(guid);
 8007de0:	2318      	movs	r3, #24
 8007de2:	18e3      	adds	r3, r4, r3
 8007de4:	19db      	adds	r3, r3, r7
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7fb fa1b 	bl	8003224 <send_debug_logs>
 8007dee:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8007df0:	e003      	b.n	8007dfa <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8007df2:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <astronode_send_mgi_rr+0x150>)
 8007df4:	0018      	movs	r0, r3
 8007df6:	f7fb fa15 	bl	8003224 <send_debug_logs>
}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	b06d      	add	sp, #436	; 0x1b4
 8007e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e02:	46c0      	nop			; (mov r8, r8)
 8007e04:	fffffe68 	.word	0xfffffe68
 8007e08:	080130a0 	.word	0x080130a0
 8007e0c:	080130b0 	.word	0x080130b0
 8007e10:	080130b4 	.word	0x080130b4

08007e14 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 8007e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e16:	b0ed      	sub	sp, #436	; 0x1b4
 8007e18:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007e1a:	21c8      	movs	r1, #200	; 0xc8
 8007e1c:	2318      	movs	r3, #24
 8007e1e:	18cb      	adds	r3, r1, r3
 8007e20:	19db      	adds	r3, r3, r7
 8007e22:	0018      	movs	r0, r3
 8007e24:	23c6      	movs	r3, #198	; 0xc6
 8007e26:	001a      	movs	r2, r3
 8007e28:	2100      	movs	r1, #0
 8007e2a:	f004 f861 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8007e2e:	4b4a      	ldr	r3, [pc, #296]	; (8007f58 <astronode_send_msn_rr+0x144>)
 8007e30:	26cc      	movs	r6, #204	; 0xcc
 8007e32:	0076      	lsls	r6, r6, #1
 8007e34:	199b      	adds	r3, r3, r6
 8007e36:	2218      	movs	r2, #24
 8007e38:	4694      	mov	ip, r2
 8007e3a:	44bc      	add	ip, r7
 8007e3c:	4463      	add	r3, ip
 8007e3e:	0018      	movs	r0, r3
 8007e40:	23c6      	movs	r3, #198	; 0xc6
 8007e42:	001a      	movs	r2, r3
 8007e44:	2100      	movs	r1, #0
 8007e46:	f004 f853 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 8007e4a:	21c8      	movs	r1, #200	; 0xc8
 8007e4c:	2318      	movs	r3, #24
 8007e4e:	18cb      	adds	r3, r1, r3
 8007e50:	19db      	adds	r3, r3, r7
 8007e52:	221a      	movs	r2, #26
 8007e54:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007e56:	2318      	movs	r3, #24
 8007e58:	18fa      	adds	r2, r7, r3
 8007e5a:	2318      	movs	r3, #24
 8007e5c:	18cb      	adds	r3, r1, r3
 8007e5e:	19db      	adds	r3, r3, r7
 8007e60:	0011      	movs	r1, r2
 8007e62:	0018      	movs	r0, r3
 8007e64:	f001 f8ee 	bl	8009044 <astronode_transport_send_receive>
 8007e68:	0003      	movs	r3, r0
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d16f      	bne.n	8007f4e <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 8007e6e:	4b3a      	ldr	r3, [pc, #232]	; (8007f58 <astronode_send_msn_rr+0x144>)
 8007e70:	0032      	movs	r2, r6
 8007e72:	189b      	adds	r3, r3, r2
 8007e74:	2118      	movs	r1, #24
 8007e76:	468c      	mov	ip, r1
 8007e78:	44bc      	add	ip, r7
 8007e7a:	4463      	add	r3, ip
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b9a      	cmp	r3, #154	; 0x9a
 8007e80:	d161      	bne.n	8007f46 <astronode_send_msn_rr+0x132>
        {
 8007e82:	466b      	mov	r3, sp
 8007e84:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8007e86:	4b34      	ldr	r3, [pc, #208]	; (8007f58 <astronode_send_msn_rr+0x144>)
 8007e88:	189b      	adds	r3, r3, r2
 8007e8a:	2218      	movs	r2, #24
 8007e8c:	4694      	mov	ip, r2
 8007e8e:	44bc      	add	ip, r7
 8007e90:	4463      	add	r3, ip
 8007e92:	22c4      	movs	r2, #196	; 0xc4
 8007e94:	5a9b      	ldrh	r3, [r3, r2]
 8007e96:	001a      	movs	r2, r3
 8007e98:	3a01      	subs	r2, #1
 8007e9a:	21ca      	movs	r1, #202	; 0xca
 8007e9c:	0049      	lsls	r1, r1, #1
 8007e9e:	2018      	movs	r0, #24
 8007ea0:	1809      	adds	r1, r1, r0
 8007ea2:	19c9      	adds	r1, r1, r7
 8007ea4:	600a      	str	r2, [r1, #0]
 8007ea6:	001c      	movs	r4, r3
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	0015      	movs	r5, r2
 8007eac:	0020      	movs	r0, r4
 8007eae:	0029      	movs	r1, r5
 8007eb0:	0004      	movs	r4, r0
 8007eb2:	0f62      	lsrs	r2, r4, #29
 8007eb4:	000c      	movs	r4, r1
 8007eb6:	00e4      	lsls	r4, r4, #3
 8007eb8:	617c      	str	r4, [r7, #20]
 8007eba:	697c      	ldr	r4, [r7, #20]
 8007ebc:	4314      	orrs	r4, r2
 8007ebe:	617c      	str	r4, [r7, #20]
 8007ec0:	0001      	movs	r1, r0
 8007ec2:	00c9      	lsls	r1, r1, #3
 8007ec4:	6139      	str	r1, [r7, #16]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	6838      	ldr	r0, [r7, #0]
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	0004      	movs	r4, r0
 8007ed2:	0f62      	lsrs	r2, r4, #29
 8007ed4:	000c      	movs	r4, r1
 8007ed6:	00e4      	lsls	r4, r4, #3
 8007ed8:	60fc      	str	r4, [r7, #12]
 8007eda:	68fc      	ldr	r4, [r7, #12]
 8007edc:	4314      	orrs	r4, r2
 8007ede:	60fc      	str	r4, [r7, #12]
 8007ee0:	0001      	movs	r1, r0
 8007ee2:	00ca      	lsls	r2, r1, #3
 8007ee4:	60ba      	str	r2, [r7, #8]
 8007ee6:	3307      	adds	r3, #7
 8007ee8:	08db      	lsrs	r3, r3, #3
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	4669      	mov	r1, sp
 8007eee:	1acb      	subs	r3, r1, r3
 8007ef0:	469d      	mov	sp, r3
 8007ef2:	466b      	mov	r3, sp
 8007ef4:	3300      	adds	r3, #0
 8007ef6:	24c8      	movs	r4, #200	; 0xc8
 8007ef8:	0064      	lsls	r4, r4, #1
 8007efa:	2218      	movs	r2, #24
 8007efc:	18a2      	adds	r2, r4, r2
 8007efe:	19d1      	adds	r1, r2, r7
 8007f00:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 8007f02:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <astronode_send_msn_rr+0x148>)
 8007f04:	0018      	movs	r0, r3
 8007f06:	f7fb f98d 	bl	8003224 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 8007f0a:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <astronode_send_msn_rr+0x144>)
 8007f0c:	22cc      	movs	r2, #204	; 0xcc
 8007f0e:	0052      	lsls	r2, r2, #1
 8007f10:	189b      	adds	r3, r3, r2
 8007f12:	2218      	movs	r2, #24
 8007f14:	4694      	mov	ip, r2
 8007f16:	44bc      	add	ip, r7
 8007f18:	4463      	add	r3, ip
 8007f1a:	22c4      	movs	r2, #196	; 0xc4
 8007f1c:	5a9b      	ldrh	r3, [r3, r2]
 8007f1e:	0019      	movs	r1, r3
 8007f20:	2318      	movs	r3, #24
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	3301      	adds	r3, #1
 8007f26:	4a0e      	ldr	r2, [pc, #56]	; (8007f60 <astronode_send_msn_rr+0x14c>)
 8007f28:	2018      	movs	r0, #24
 8007f2a:	1820      	adds	r0, r4, r0
 8007f2c:	19c0      	adds	r0, r0, r7
 8007f2e:	6800      	ldr	r0, [r0, #0]
 8007f30:	f003 ff14 	bl	800bd5c <snprintf>
            send_debug_logs(serial_number);
 8007f34:	2318      	movs	r3, #24
 8007f36:	18e3      	adds	r3, r4, r3
 8007f38:	19db      	adds	r3, r3, r7
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	f7fb f971 	bl	8003224 <send_debug_logs>
 8007f42:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8007f44:	e003      	b.n	8007f4e <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 8007f46:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <astronode_send_msn_rr+0x150>)
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f7fb f96b 	bl	8003224 <send_debug_logs>
}
 8007f4e:	46c0      	nop			; (mov r8, r8)
 8007f50:	46bd      	mov	sp, r7
 8007f52:	b06d      	add	sp, #436	; 0x1b4
 8007f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	fffffe68 	.word	0xfffffe68
 8007f5c:	080130d0 	.word	0x080130d0
 8007f60:	080130b0 	.word	0x080130b0
 8007f64:	080130ec 	.word	0x080130ec

08007f68 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8007f68:	b5b0      	push	{r4, r5, r7, lr}
 8007f6a:	b0e4      	sub	sp, #400	; 0x190
 8007f6c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8007f6e:	24c8      	movs	r4, #200	; 0xc8
 8007f70:	193b      	adds	r3, r7, r4
 8007f72:	0018      	movs	r0, r3
 8007f74:	23c6      	movs	r3, #198	; 0xc6
 8007f76:	001a      	movs	r2, r3
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f003 ffb9 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8007f7e:	4b31      	ldr	r3, [pc, #196]	; (8008044 <astronode_send_evt_rr+0xdc>)
 8007f80:	25c8      	movs	r5, #200	; 0xc8
 8007f82:	006d      	lsls	r5, r5, #1
 8007f84:	195b      	adds	r3, r3, r5
 8007f86:	19db      	adds	r3, r3, r7
 8007f88:	0018      	movs	r0, r3
 8007f8a:	23c6      	movs	r3, #198	; 0xc6
 8007f8c:	001a      	movs	r2, r3
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f003 ffae 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8007f94:	193b      	adds	r3, r7, r4
 8007f96:	2265      	movs	r2, #101	; 0x65
 8007f98:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8007f9a:	003a      	movs	r2, r7
 8007f9c:	193b      	adds	r3, r7, r4
 8007f9e:	0011      	movs	r1, r2
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f001 f84f 	bl	8009044 <astronode_transport_send_receive>
 8007fa6:	0003      	movs	r3, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d147      	bne.n	800803c <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 8007fac:	4b25      	ldr	r3, [pc, #148]	; (8008044 <astronode_send_evt_rr+0xdc>)
 8007fae:	195b      	adds	r3, r3, r5
 8007fb0:	19db      	adds	r3, r3, r7
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2be5      	cmp	r3, #229	; 0xe5
 8007fb6:	d141      	bne.n	800803c <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8007fb8:	4b22      	ldr	r3, [pc, #136]	; (8008044 <astronode_send_evt_rr+0xdc>)
 8007fba:	195b      	adds	r3, r3, r5
 8007fbc:	19db      	adds	r3, r3, r7
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	d006      	beq.n	8007fd6 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8007fc8:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <astronode_send_evt_rr+0xe0>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 8007fce:	4b1f      	ldr	r3, [pc, #124]	; (800804c <astronode_send_evt_rr+0xe4>)
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	f7fb f927 	bl	8003224 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8007fd6:	4b1b      	ldr	r3, [pc, #108]	; (8008044 <astronode_send_evt_rr+0xdc>)
 8007fd8:	22c8      	movs	r2, #200	; 0xc8
 8007fda:	0052      	lsls	r2, r2, #1
 8007fdc:	189b      	adds	r3, r3, r2
 8007fde:	19db      	adds	r3, r3, r7
 8007fe0:	785b      	ldrb	r3, [r3, #1]
 8007fe2:	001a      	movs	r2, r3
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	d006      	beq.n	8007ff8 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 8007fea:	4b19      	ldr	r3, [pc, #100]	; (8008050 <astronode_send_evt_rr+0xe8>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8007ff0:	4b18      	ldr	r3, [pc, #96]	; (8008054 <astronode_send_evt_rr+0xec>)
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	f7fb f916 	bl	8003224 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8007ff8:	4b12      	ldr	r3, [pc, #72]	; (8008044 <astronode_send_evt_rr+0xdc>)
 8007ffa:	22c8      	movs	r2, #200	; 0xc8
 8007ffc:	0052      	lsls	r2, r2, #1
 8007ffe:	189b      	adds	r3, r3, r2
 8008000:	19db      	adds	r3, r3, r7
 8008002:	785b      	ldrb	r3, [r3, #1]
 8008004:	001a      	movs	r2, r3
 8008006:	2304      	movs	r3, #4
 8008008:	4013      	ands	r3, r2
 800800a:	d006      	beq.n	800801a <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 800800c:	4b12      	ldr	r3, [pc, #72]	; (8008058 <astronode_send_evt_rr+0xf0>)
 800800e:	2201      	movs	r2, #1
 8008010:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 8008012:	4b12      	ldr	r3, [pc, #72]	; (800805c <astronode_send_evt_rr+0xf4>)
 8008014:	0018      	movs	r0, r3
 8008016:	f7fb f905 	bl	8003224 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 800801a:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <astronode_send_evt_rr+0xdc>)
 800801c:	22c8      	movs	r2, #200	; 0xc8
 800801e:	0052      	lsls	r2, r2, #1
 8008020:	189b      	adds	r3, r3, r2
 8008022:	19db      	adds	r3, r3, r7
 8008024:	785b      	ldrb	r3, [r3, #1]
 8008026:	001a      	movs	r2, r3
 8008028:	2308      	movs	r3, #8
 800802a:	4013      	ands	r3, r2
 800802c:	d006      	beq.n	800803c <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 800802e:	4b0c      	ldr	r3, [pc, #48]	; (8008060 <astronode_send_evt_rr+0xf8>)
 8008030:	2201      	movs	r2, #1
 8008032:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 8008034:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <astronode_send_evt_rr+0xfc>)
 8008036:	0018      	movs	r0, r3
 8008038:	f7fb f8f4 	bl	8003224 <send_debug_logs>
            }

        }
    }
}
 800803c:	46c0      	nop			; (mov r8, r8)
 800803e:	46bd      	mov	sp, r7
 8008040:	b064      	add	sp, #400	; 0x190
 8008042:	bdb0      	pop	{r4, r5, r7, pc}
 8008044:	fffffe70 	.word	0xfffffe70
 8008048:	20000b04 	.word	0x20000b04
 800804c:	08013194 	.word	0x08013194
 8008050:	20000b05 	.word	0x20000b05
 8008054:	080131b8 	.word	0x080131b8
 8008058:	20000b06 	.word	0x20000b06
 800805c:	080131d0 	.word	0x080131d0
 8008060:	20000b07 	.word	0x20000b07
 8008064:	080131e4 	.word	0x080131e4

08008068 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8008068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800806a:	b0e7      	sub	sp, #412	; 0x19c
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8008072:	24d0      	movs	r4, #208	; 0xd0
 8008074:	193b      	adds	r3, r7, r4
 8008076:	0018      	movs	r0, r3
 8008078:	23c6      	movs	r3, #198	; 0xc6
 800807a:	001a      	movs	r2, r3
 800807c:	2100      	movs	r1, #0
 800807e:	f003 ff37 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8008082:	4b56      	ldr	r3, [pc, #344]	; (80081dc <astronode_send_geo_wr+0x174>)
 8008084:	26cc      	movs	r6, #204	; 0xcc
 8008086:	0076      	lsls	r6, r6, #1
 8008088:	199b      	adds	r3, r3, r6
 800808a:	19db      	adds	r3, r3, r7
 800808c:	0018      	movs	r0, r3
 800808e:	23c6      	movs	r3, #198	; 0xc6
 8008090:	001a      	movs	r2, r3
 8008092:	2100      	movs	r1, #0
 8008094:	f003 ff2c 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8008098:	193b      	adds	r3, r7, r4
 800809a:	2235      	movs	r2, #53	; 0x35
 800809c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800809e:	193b      	adds	r3, r7, r4
 80080a0:	22c4      	movs	r2, #196	; 0xc4
 80080a2:	5a9b      	ldrh	r3, [r3, r2]
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	b290      	uxth	r0, r2
 80080a8:	193a      	adds	r2, r7, r4
 80080aa:	21c4      	movs	r1, #196	; 0xc4
 80080ac:	5250      	strh	r0, [r2, r1]
 80080ae:	0019      	movs	r1, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	193b      	adds	r3, r7, r4
 80080b6:	185b      	adds	r3, r3, r1
 80080b8:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	1218      	asrs	r0, r3, #8
 80080be:	0025      	movs	r5, r4
 80080c0:	197b      	adds	r3, r7, r5
 80080c2:	22c4      	movs	r2, #196	; 0xc4
 80080c4:	5a9b      	ldrh	r3, [r3, r2]
 80080c6:	1c5a      	adds	r2, r3, #1
 80080c8:	b294      	uxth	r4, r2
 80080ca:	197a      	adds	r2, r7, r5
 80080cc:	21c4      	movs	r1, #196	; 0xc4
 80080ce:	5254      	strh	r4, [r2, r1]
 80080d0:	0019      	movs	r1, r3
 80080d2:	b2c2      	uxtb	r2, r0
 80080d4:	002c      	movs	r4, r5
 80080d6:	193b      	adds	r3, r7, r4
 80080d8:	185b      	adds	r3, r3, r1
 80080da:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1418      	asrs	r0, r3, #16
 80080e0:	0025      	movs	r5, r4
 80080e2:	197b      	adds	r3, r7, r5
 80080e4:	22c4      	movs	r2, #196	; 0xc4
 80080e6:	5a9b      	ldrh	r3, [r3, r2]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	b294      	uxth	r4, r2
 80080ec:	197a      	adds	r2, r7, r5
 80080ee:	21c4      	movs	r1, #196	; 0xc4
 80080f0:	5254      	strh	r4, [r2, r1]
 80080f2:	0019      	movs	r1, r3
 80080f4:	b2c2      	uxtb	r2, r0
 80080f6:	002c      	movs	r4, r5
 80080f8:	193b      	adds	r3, r7, r4
 80080fa:	185b      	adds	r3, r3, r1
 80080fc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	1618      	asrs	r0, r3, #24
 8008102:	0025      	movs	r5, r4
 8008104:	197b      	adds	r3, r7, r5
 8008106:	22c4      	movs	r2, #196	; 0xc4
 8008108:	5a9b      	ldrh	r3, [r3, r2]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	b294      	uxth	r4, r2
 800810e:	197a      	adds	r2, r7, r5
 8008110:	21c4      	movs	r1, #196	; 0xc4
 8008112:	5254      	strh	r4, [r2, r1]
 8008114:	0019      	movs	r1, r3
 8008116:	b2c2      	uxtb	r2, r0
 8008118:	002c      	movs	r4, r5
 800811a:	193b      	adds	r3, r7, r4
 800811c:	185b      	adds	r3, r3, r1
 800811e:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 8008120:	193b      	adds	r3, r7, r4
 8008122:	22c4      	movs	r2, #196	; 0xc4
 8008124:	5a9b      	ldrh	r3, [r3, r2]
 8008126:	1c5a      	adds	r2, r3, #1
 8008128:	b290      	uxth	r0, r2
 800812a:	193a      	adds	r2, r7, r4
 800812c:	21c4      	movs	r1, #196	; 0xc4
 800812e:	5250      	strh	r0, [r2, r1]
 8008130:	0019      	movs	r1, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	b2da      	uxtb	r2, r3
 8008136:	193b      	adds	r3, r7, r4
 8008138:	185b      	adds	r3, r3, r1
 800813a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	1218      	asrs	r0, r3, #8
 8008140:	0025      	movs	r5, r4
 8008142:	197b      	adds	r3, r7, r5
 8008144:	22c4      	movs	r2, #196	; 0xc4
 8008146:	5a9b      	ldrh	r3, [r3, r2]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	b294      	uxth	r4, r2
 800814c:	197a      	adds	r2, r7, r5
 800814e:	21c4      	movs	r1, #196	; 0xc4
 8008150:	5254      	strh	r4, [r2, r1]
 8008152:	0019      	movs	r1, r3
 8008154:	b2c2      	uxtb	r2, r0
 8008156:	002c      	movs	r4, r5
 8008158:	193b      	adds	r3, r7, r4
 800815a:	185b      	adds	r3, r3, r1
 800815c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	1418      	asrs	r0, r3, #16
 8008162:	0025      	movs	r5, r4
 8008164:	197b      	adds	r3, r7, r5
 8008166:	22c4      	movs	r2, #196	; 0xc4
 8008168:	5a9b      	ldrh	r3, [r3, r2]
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	b294      	uxth	r4, r2
 800816e:	197a      	adds	r2, r7, r5
 8008170:	21c4      	movs	r1, #196	; 0xc4
 8008172:	5254      	strh	r4, [r2, r1]
 8008174:	0019      	movs	r1, r3
 8008176:	b2c2      	uxtb	r2, r0
 8008178:	002c      	movs	r4, r5
 800817a:	193b      	adds	r3, r7, r4
 800817c:	185b      	adds	r3, r3, r1
 800817e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	1618      	asrs	r0, r3, #24
 8008184:	0025      	movs	r5, r4
 8008186:	197b      	adds	r3, r7, r5
 8008188:	22c4      	movs	r2, #196	; 0xc4
 800818a:	5a9b      	ldrh	r3, [r3, r2]
 800818c:	1c5a      	adds	r2, r3, #1
 800818e:	b294      	uxth	r4, r2
 8008190:	197a      	adds	r2, r7, r5
 8008192:	21c4      	movs	r1, #196	; 0xc4
 8008194:	5254      	strh	r4, [r2, r1]
 8008196:	0019      	movs	r1, r3
 8008198:	b2c2      	uxtb	r2, r0
 800819a:	0028      	movs	r0, r5
 800819c:	183b      	adds	r3, r7, r0
 800819e:	185b      	adds	r3, r3, r1
 80081a0:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80081a2:	2308      	movs	r3, #8
 80081a4:	18fa      	adds	r2, r7, r3
 80081a6:	183b      	adds	r3, r7, r0
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f000 ff4a 	bl	8009044 <astronode_transport_send_receive>
 80081b0:	0003      	movs	r3, r0
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d10e      	bne.n	80081d4 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 80081b6:	4b09      	ldr	r3, [pc, #36]	; (80081dc <astronode_send_geo_wr+0x174>)
 80081b8:	199b      	adds	r3, r3, r6
 80081ba:	19db      	adds	r3, r3, r7
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2bb5      	cmp	r3, #181	; 0xb5
 80081c0:	d104      	bne.n	80081cc <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 80081c2:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <astronode_send_geo_wr+0x178>)
 80081c4:	0018      	movs	r0, r3
 80081c6:	f7fb f82d 	bl	8003224 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 80081ca:	e003      	b.n	80081d4 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 80081cc:	4b05      	ldr	r3, [pc, #20]	; (80081e4 <astronode_send_geo_wr+0x17c>)
 80081ce:	0018      	movs	r0, r3
 80081d0:	f7fb f828 	bl	8003224 <send_debug_logs>
}
 80081d4:	46c0      	nop			; (mov r8, r8)
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b067      	add	sp, #412	; 0x19c
 80081da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081dc:	fffffe70 	.word	0xfffffe70
 80081e0:	080131f8 	.word	0x080131f8
 80081e4:	08013224 	.word	0x08013224

080081e8 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 80081e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ea:	b0fd      	sub	sp, #500	; 0x1f4
 80081ec:	af02      	add	r7, sp, #8
 80081ee:	6039      	str	r1, [r7, #0]
 80081f0:	0011      	movs	r1, r2
 80081f2:	4b4c      	ldr	r3, [pc, #304]	; (8008324 <astronode_send_pld_er+0x13c>)
 80081f4:	26f4      	movs	r6, #244	; 0xf4
 80081f6:	0076      	lsls	r6, r6, #1
 80081f8:	199b      	adds	r3, r3, r6
 80081fa:	19db      	adds	r3, r3, r7
 80081fc:	1c02      	adds	r2, r0, #0
 80081fe:	801a      	strh	r2, [r3, #0]
 8008200:	4b49      	ldr	r3, [pc, #292]	; (8008328 <astronode_send_pld_er+0x140>)
 8008202:	199b      	adds	r3, r3, r6
 8008204:	19db      	adds	r3, r3, r7
 8008206:	1c0a      	adds	r2, r1, #0
 8008208:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 800820a:	2490      	movs	r4, #144	; 0x90
 800820c:	0064      	lsls	r4, r4, #1
 800820e:	193b      	adds	r3, r7, r4
 8008210:	0018      	movs	r0, r3
 8008212:	23c6      	movs	r3, #198	; 0xc6
 8008214:	001a      	movs	r2, r3
 8008216:	2100      	movs	r1, #0
 8008218:	f003 fe6a 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 800821c:	4b43      	ldr	r3, [pc, #268]	; (800832c <astronode_send_pld_er+0x144>)
 800821e:	199b      	adds	r3, r3, r6
 8008220:	19db      	adds	r3, r3, r7
 8008222:	0018      	movs	r0, r3
 8008224:	23c6      	movs	r3, #198	; 0xc6
 8008226:	001a      	movs	r2, r3
 8008228:	2100      	movs	r1, #0
 800822a:	f003 fe61 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 800822e:	193b      	adds	r3, r7, r4
 8008230:	2225      	movs	r2, #37	; 0x25
 8008232:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 8008234:	193b      	adds	r3, r7, r4
 8008236:	22c4      	movs	r2, #196	; 0xc4
 8008238:	5a9b      	ldrh	r3, [r3, r2]
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	b290      	uxth	r0, r2
 800823e:	193a      	adds	r2, r7, r4
 8008240:	21c4      	movs	r1, #196	; 0xc4
 8008242:	5250      	strh	r0, [r2, r1]
 8008244:	0019      	movs	r1, r3
 8008246:	4b37      	ldr	r3, [pc, #220]	; (8008324 <astronode_send_pld_er+0x13c>)
 8008248:	199b      	adds	r3, r3, r6
 800824a:	19db      	adds	r3, r3, r7
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b2da      	uxtb	r2, r3
 8008250:	193b      	adds	r3, r7, r4
 8008252:	185b      	adds	r3, r3, r1
 8008254:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 8008256:	4b33      	ldr	r3, [pc, #204]	; (8008324 <astronode_send_pld_er+0x13c>)
 8008258:	199b      	adds	r3, r3, r6
 800825a:	19db      	adds	r3, r3, r7
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	b298      	uxth	r0, r3
 8008262:	0025      	movs	r5, r4
 8008264:	197b      	adds	r3, r7, r5
 8008266:	22c4      	movs	r2, #196	; 0xc4
 8008268:	5a9b      	ldrh	r3, [r3, r2]
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	b294      	uxth	r4, r2
 800826e:	197a      	adds	r2, r7, r5
 8008270:	21c4      	movs	r1, #196	; 0xc4
 8008272:	5254      	strh	r4, [r2, r1]
 8008274:	0019      	movs	r1, r3
 8008276:	b2c2      	uxtb	r2, r0
 8008278:	002c      	movs	r4, r5
 800827a:	193b      	adds	r3, r7, r4
 800827c:	185b      	adds	r3, r3, r1
 800827e:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8008280:	193b      	adds	r3, r7, r4
 8008282:	22c4      	movs	r2, #196	; 0xc4
 8008284:	5a9b      	ldrh	r3, [r3, r2]
 8008286:	001a      	movs	r2, r3
 8008288:	193b      	adds	r3, r7, r4
 800828a:	189b      	adds	r3, r3, r2
 800828c:	1c58      	adds	r0, r3, #1
 800828e:	4b26      	ldr	r3, [pc, #152]	; (8008328 <astronode_send_pld_er+0x140>)
 8008290:	199b      	adds	r3, r3, r6
 8008292:	19db      	adds	r3, r3, r7
 8008294:	881a      	ldrh	r2, [r3, #0]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	0019      	movs	r1, r3
 800829a:	f003 ff1c 	bl	800c0d6 <memcpy>
    request.payload_len = 2 + payload_length;
 800829e:	4b22      	ldr	r3, [pc, #136]	; (8008328 <astronode_send_pld_er+0x140>)
 80082a0:	199b      	adds	r3, r3, r6
 80082a2:	19db      	adds	r3, r3, r7
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	3302      	adds	r3, #2
 80082a8:	b299      	uxth	r1, r3
 80082aa:	193b      	adds	r3, r7, r4
 80082ac:	22c4      	movs	r2, #196	; 0xc4
 80082ae:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 80082b0:	2358      	movs	r3, #88	; 0x58
 80082b2:	18fa      	adds	r2, r7, r3
 80082b4:	193b      	adds	r3, r7, r4
 80082b6:	0011      	movs	r1, r2
 80082b8:	0018      	movs	r0, r3
 80082ba:	f000 fec3 	bl	8009044 <astronode_transport_send_receive>
 80082be:	0003      	movs	r3, r0
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d12a      	bne.n	800831a <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 80082c4:	4b19      	ldr	r3, [pc, #100]	; (800832c <astronode_send_pld_er+0x144>)
 80082c6:	199b      	adds	r3, r3, r6
 80082c8:	19db      	adds	r3, r3, r7
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2ba5      	cmp	r3, #165	; 0xa5
 80082ce:	d114      	bne.n	80082fa <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 80082d0:	4b14      	ldr	r3, [pc, #80]	; (8008324 <astronode_send_pld_er+0x13c>)
 80082d2:	199b      	adds	r3, r3, r6
 80082d4:	19db      	adds	r3, r3, r7
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	22ea      	movs	r2, #234	; 0xea
 80082da:	32ff      	adds	r2, #255	; 0xff
 80082dc:	0014      	movs	r4, r2
 80082de:	4a14      	ldr	r2, [pc, #80]	; (8008330 <astronode_send_pld_er+0x148>)
 80082e0:	4914      	ldr	r1, [pc, #80]	; (8008334 <astronode_send_pld_er+0x14c>)
 80082e2:	2508      	movs	r5, #8
 80082e4:	1978      	adds	r0, r7, r5
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	0023      	movs	r3, r4
 80082ea:	f003 fd6b 	bl	800bdc4 <sprintf>
            send_debug_logs ( s ) ;
 80082ee:	197b      	adds	r3, r7, r5
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7fa ff97 	bl	8003224 <send_debug_logs>
            return true ;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e010      	b.n	800831c <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <astronode_send_pld_er+0x13c>)
 80082fc:	22f4      	movs	r2, #244	; 0xf4
 80082fe:	0052      	lsls	r2, r2, #1
 8008300:	189b      	adds	r3, r3, r2
 8008302:	19db      	adds	r3, r3, r7
 8008304:	881a      	ldrh	r2, [r3, #0]
 8008306:	490c      	ldr	r1, [pc, #48]	; (8008338 <astronode_send_pld_er+0x150>)
 8008308:	2408      	movs	r4, #8
 800830a:	193b      	adds	r3, r7, r4
 800830c:	0018      	movs	r0, r3
 800830e:	f003 fd59 	bl	800bdc4 <sprintf>
            send_debug_logs ( s ) ;
 8008312:	193b      	adds	r3, r7, r4
 8008314:	0018      	movs	r0, r3
 8008316:	f7fa ff85 	bl	8003224 <send_debug_logs>
        }
    }
    return false ;
 800831a:	2300      	movs	r3, #0
}
 800831c:	0018      	movs	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	b07b      	add	sp, #492	; 0x1ec
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008324:	fffffe1e 	.word	0xfffffe1e
 8008328:	fffffe1c 	.word	0xfffffe1c
 800832c:	fffffe70 	.word	0xfffffe70
 8008330:	0801329c 	.word	0x0801329c
 8008334:	080132c8 	.word	0x080132c8
 8008338:	080132e4 	.word	0x080132e4

0800833c <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 800833c:	b5b0      	push	{r4, r5, r7, lr}
 800833e:	b0e4      	sub	sp, #400	; 0x190
 8008340:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008342:	24c8      	movs	r4, #200	; 0xc8
 8008344:	193b      	adds	r3, r7, r4
 8008346:	0018      	movs	r0, r3
 8008348:	23c6      	movs	r3, #198	; 0xc6
 800834a:	001a      	movs	r2, r3
 800834c:	2100      	movs	r1, #0
 800834e:	f003 fdcf 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8008352:	4b15      	ldr	r3, [pc, #84]	; (80083a8 <astronode_send_pld_fr+0x6c>)
 8008354:	25c8      	movs	r5, #200	; 0xc8
 8008356:	006d      	lsls	r5, r5, #1
 8008358:	195b      	adds	r3, r3, r5
 800835a:	19db      	adds	r3, r3, r7
 800835c:	0018      	movs	r0, r3
 800835e:	23c6      	movs	r3, #198	; 0xc6
 8008360:	001a      	movs	r2, r3
 8008362:	2100      	movs	r1, #0
 8008364:	f003 fdc4 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8008368:	193b      	adds	r3, r7, r4
 800836a:	2227      	movs	r2, #39	; 0x27
 800836c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800836e:	003a      	movs	r2, r7
 8008370:	193b      	adds	r3, r7, r4
 8008372:	0011      	movs	r1, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f000 fe65 	bl	8009044 <astronode_transport_send_receive>
 800837a:	0003      	movs	r3, r0
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10e      	bne.n	800839e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8008380:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <astronode_send_pld_fr+0x6c>)
 8008382:	195b      	adds	r3, r3, r5
 8008384:	19db      	adds	r3, r3, r7
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2ba7      	cmp	r3, #167	; 0xa7
 800838a:	d104      	bne.n	8008396 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 800838c:	4b07      	ldr	r3, [pc, #28]	; (80083ac <astronode_send_pld_fr+0x70>)
 800838e:	0018      	movs	r0, r3
 8008390:	f7fa ff48 	bl	8003224 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8008394:	e003      	b.n	800839e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8008396:	4b06      	ldr	r3, [pc, #24]	; (80083b0 <astronode_send_pld_fr+0x74>)
 8008398:	0018      	movs	r0, r3
 800839a:	f7fa ff43 	bl	8003224 <send_debug_logs>
}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	46bd      	mov	sp, r7
 80083a2:	b064      	add	sp, #400	; 0x190
 80083a4:	bdb0      	pop	{r4, r5, r7, pc}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	fffffe70 	.word	0xfffffe70
 80083ac:	08013314 	.word	0x08013314
 80083b0:	0801334c 	.word	0x0801334c

080083b4 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 80083b4:	b5b0      	push	{r4, r5, r7, lr}
 80083b6:	b0e4      	sub	sp, #400	; 0x190
 80083b8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80083ba:	24c8      	movs	r4, #200	; 0xc8
 80083bc:	193b      	adds	r3, r7, r4
 80083be:	0018      	movs	r0, r3
 80083c0:	23c6      	movs	r3, #198	; 0xc6
 80083c2:	001a      	movs	r2, r3
 80083c4:	2100      	movs	r1, #0
 80083c6:	f003 fd93 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 80083ca:	4b16      	ldr	r3, [pc, #88]	; (8008424 <astronode_send_res_cr+0x70>)
 80083cc:	25c8      	movs	r5, #200	; 0xc8
 80083ce:	006d      	lsls	r5, r5, #1
 80083d0:	195b      	adds	r3, r3, r5
 80083d2:	19db      	adds	r3, r3, r7
 80083d4:	0018      	movs	r0, r3
 80083d6:	23c6      	movs	r3, #198	; 0xc6
 80083d8:	001a      	movs	r2, r3
 80083da:	2100      	movs	r1, #0
 80083dc:	f003 fd88 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 80083e0:	193b      	adds	r3, r7, r4
 80083e2:	2255      	movs	r2, #85	; 0x55
 80083e4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80083e6:	003a      	movs	r2, r7
 80083e8:	193b      	adds	r3, r7, r4
 80083ea:	0011      	movs	r1, r2
 80083ec:	0018      	movs	r0, r3
 80083ee:	f000 fe29 	bl	8009044 <astronode_transport_send_receive>
 80083f2:	0003      	movs	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d111      	bne.n	800841c <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 80083f8:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <astronode_send_res_cr+0x70>)
 80083fa:	195b      	adds	r3, r3, r5
 80083fc:	19db      	adds	r3, r3, r7
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2bd5      	cmp	r3, #213	; 0xd5
 8008402:	d107      	bne.n	8008414 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 8008404:	4b08      	ldr	r3, [pc, #32]	; (8008428 <astronode_send_res_cr+0x74>)
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 800840a:	4b08      	ldr	r3, [pc, #32]	; (800842c <astronode_send_res_cr+0x78>)
 800840c:	0018      	movs	r0, r3
 800840e:	f7fa ff09 	bl	8003224 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 8008412:	e003      	b.n	800841c <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <astronode_send_res_cr+0x7c>)
 8008416:	0018      	movs	r0, r3
 8008418:	f7fa ff04 	bl	8003224 <send_debug_logs>
}
 800841c:	46c0      	nop			; (mov r8, r8)
 800841e:	46bd      	mov	sp, r7
 8008420:	b064      	add	sp, #400	; 0x190
 8008422:	bdb0      	pop	{r4, r5, r7, pc}
 8008424:	fffffe70 	.word	0xfffffe70
 8008428:	20000b05 	.word	0x20000b05
 800842c:	08013388 	.word	0x08013388
 8008430:	080133bc 	.word	0x080133bc

08008434 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 8008434:	b5b0      	push	{r4, r5, r7, lr}
 8008436:	b0fa      	sub	sp, #488	; 0x1e8
 8008438:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 800843a:	258e      	movs	r5, #142	; 0x8e
 800843c:	006d      	lsls	r5, r5, #1
 800843e:	197b      	adds	r3, r7, r5
 8008440:	0018      	movs	r0, r3
 8008442:	23c6      	movs	r3, #198	; 0xc6
 8008444:	001a      	movs	r2, r3
 8008446:	2100      	movs	r1, #0
 8008448:	f003 fd52 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0} ;
 800844c:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <astronode_send_rtc_rr+0xbc>)
 800844e:	24f4      	movs	r4, #244	; 0xf4
 8008450:	0064      	lsls	r4, r4, #1
 8008452:	191b      	adds	r3, r3, r4
 8008454:	19db      	adds	r3, r3, r7
 8008456:	0018      	movs	r0, r3
 8008458:	23c6      	movs	r3, #198	; 0xc6
 800845a:	001a      	movs	r2, r3
 800845c:	2100      	movs	r1, #0
 800845e:	f003 fd47 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8008462:	197b      	adds	r3, r7, r5
 8008464:	2217      	movs	r2, #23
 8008466:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8008468:	2354      	movs	r3, #84	; 0x54
 800846a:	18fa      	adds	r2, r7, r3
 800846c:	197b      	adds	r3, r7, r5
 800846e:	0011      	movs	r1, r2
 8008470:	0018      	movs	r0, r3
 8008472:	f000 fde7 	bl	8009044 <astronode_transport_send_receive>
 8008476:	0003      	movs	r3, r0
 8008478:	2b01      	cmp	r3, #1
 800847a:	d133      	bne.n	80084e4 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 800847c:	4b1c      	ldr	r3, [pc, #112]	; (80084f0 <astronode_send_rtc_rr+0xbc>)
 800847e:	0021      	movs	r1, r4
 8008480:	185b      	adds	r3, r3, r1
 8008482:	19db      	adds	r3, r3, r7
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b97      	cmp	r3, #151	; 0x97
 8008488:	d128      	bne.n	80084dc <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800848a:	4b19      	ldr	r3, [pc, #100]	; (80084f0 <astronode_send_rtc_rr+0xbc>)
 800848c:	185b      	adds	r3, r3, r1
 800848e:	19db      	adds	r3, r3, r7
 8008490:	785b      	ldrb	r3, [r3, #1]
 8008492:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8008494:	4b16      	ldr	r3, [pc, #88]	; (80084f0 <astronode_send_rtc_rr+0xbc>)
 8008496:	185b      	adds	r3, r3, r1
 8008498:	19db      	adds	r3, r3, r7
 800849a:	789b      	ldrb	r3, [r3, #2]
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 80084a0:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <astronode_send_rtc_rr+0xbc>)
 80084a2:	185b      	adds	r3, r3, r1
 80084a4:	19db      	adds	r3, r3, r7
 80084a6:	78db      	ldrb	r3, [r3, #3]
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 80084ac:	4b10      	ldr	r3, [pc, #64]	; (80084f0 <astronode_send_rtc_rr+0xbc>)
 80084ae:	185b      	adds	r3, r3, r1
 80084b0:	19db      	adds	r3, r3, r7
 80084b2:	791b      	ldrb	r3, [r3, #4]
 80084b4:	061b      	lsls	r3, r3, #24
 80084b6:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80084b8:	24f2      	movs	r4, #242	; 0xf2
 80084ba:	0064      	lsls	r4, r4, #1
 80084bc:	193a      	adds	r2, r7, r4
 80084be:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 80084c0:	193b      	adds	r3, r7, r4
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	490b      	ldr	r1, [pc, #44]	; (80084f4 <astronode_send_rtc_rr+0xc0>)
 80084c6:	1d3b      	adds	r3, r7, #4
 80084c8:	0018      	movs	r0, r3
 80084ca:	f003 fc7b 	bl	800bdc4 <sprintf>
            send_debug_logs ( str ) ;
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	0018      	movs	r0, r3
 80084d2:	f7fa fea7 	bl	8003224 <send_debug_logs>
            return rtc_time ;
 80084d6:	193b      	adds	r3, r7, r4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	e004      	b.n	80084e6 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 80084dc:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <astronode_send_rtc_rr+0xc4>)
 80084de:	0018      	movs	r0, r3
 80084e0:	f7fa fea0 	bl	8003224 <send_debug_logs>
        }
    }
    return 0 ;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	0018      	movs	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b07a      	add	sp, #488	; 0x1e8
 80084ec:	bdb0      	pop	{r4, r5, r7, pc}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	fffffe6c 	.word	0xfffffe6c
 80084f4:	080133e8 	.word	0x080133e8
 80084f8:	08013428 	.word	0x08013428

080084fc <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 80084fc:	b5b0      	push	{r4, r5, r7, lr}
 80084fe:	b0f8      	sub	sp, #480	; 0x1e0
 8008500:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008502:	258c      	movs	r5, #140	; 0x8c
 8008504:	006d      	lsls	r5, r5, #1
 8008506:	197b      	adds	r3, r7, r5
 8008508:	0018      	movs	r0, r3
 800850a:	23c6      	movs	r3, #198	; 0xc6
 800850c:	001a      	movs	r2, r3
 800850e:	2100      	movs	r1, #0
 8008510:	f003 fcee 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8008514:	4b21      	ldr	r3, [pc, #132]	; (800859c <astronode_send_sak_rr+0xa0>)
 8008516:	24f0      	movs	r4, #240	; 0xf0
 8008518:	0064      	lsls	r4, r4, #1
 800851a:	191b      	adds	r3, r3, r4
 800851c:	19db      	adds	r3, r3, r7
 800851e:	0018      	movs	r0, r3
 8008520:	23c6      	movs	r3, #198	; 0xc6
 8008522:	001a      	movs	r2, r3
 8008524:	2100      	movs	r1, #0
 8008526:	f003 fce3 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 800852a:	197b      	adds	r3, r7, r5
 800852c:	2245      	movs	r2, #69	; 0x45
 800852e:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008530:	2350      	movs	r3, #80	; 0x50
 8008532:	18fa      	adds	r2, r7, r3
 8008534:	197b      	adds	r3, r7, r5
 8008536:	0011      	movs	r1, r2
 8008538:	0018      	movs	r0, r3
 800853a:	f000 fd83 	bl	8009044 <astronode_transport_send_receive>
 800853e:	0003      	movs	r3, r0
 8008540:	2b01      	cmp	r3, #1
 8008542:	d126      	bne.n	8008592 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 8008544:	4b15      	ldr	r3, [pc, #84]	; (800859c <astronode_send_sak_rr+0xa0>)
 8008546:	191b      	adds	r3, r3, r4
 8008548:	19db      	adds	r3, r3, r7
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2bc5      	cmp	r3, #197	; 0xc5
 800854e:	d11c      	bne.n	800858a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 8008550:	4b12      	ldr	r3, [pc, #72]	; (800859c <astronode_send_sak_rr+0xa0>)
 8008552:	191b      	adds	r3, r3, r4
 8008554:	19db      	adds	r3, r3, r7
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	b299      	uxth	r1, r3
 800855a:	4b10      	ldr	r3, [pc, #64]	; (800859c <astronode_send_sak_rr+0xa0>)
 800855c:	191b      	adds	r3, r3, r4
 800855e:	19db      	adds	r3, r3, r7
 8008560:	789b      	ldrb	r3, [r3, #2]
 8008562:	b29b      	uxth	r3, r3
 8008564:	021b      	lsls	r3, r3, #8
 8008566:	b29a      	uxth	r2, r3
 8008568:	20ef      	movs	r0, #239	; 0xef
 800856a:	0040      	lsls	r0, r0, #1
 800856c:	183b      	adds	r3, r7, r0
 800856e:	188a      	adds	r2, r1, r2
 8008570:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8008572:	183b      	adds	r3, r7, r0
 8008574:	881a      	ldrh	r2, [r3, #0]
 8008576:	490a      	ldr	r1, [pc, #40]	; (80085a0 <astronode_send_sak_rr+0xa4>)
 8008578:	003b      	movs	r3, r7
 800857a:	0018      	movs	r0, r3
 800857c:	f003 fc22 	bl	800bdc4 <sprintf>
            send_debug_logs(str);
 8008580:	003b      	movs	r3, r7
 8008582:	0018      	movs	r0, r3
 8008584:	f7fa fe4e 	bl	8003224 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8008588:	e003      	b.n	8008592 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <astronode_send_sak_rr+0xa8>)
 800858c:	0018      	movs	r0, r3
 800858e:	f7fa fe49 	bl	8003224 <send_debug_logs>
}
 8008592:	46c0      	nop			; (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b078      	add	sp, #480	; 0x1e0
 8008598:	bdb0      	pop	{r4, r5, r7, pc}
 800859a:	46c0      	nop			; (mov r8, r8)
 800859c:	fffffe70 	.word	0xfffffe70
 80085a0:	08013444 	.word	0x08013444
 80085a4:	08013470 	.word	0x08013470

080085a8 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 80085a8:	b5b0      	push	{r4, r5, r7, lr}
 80085aa:	b0e4      	sub	sp, #400	; 0x190
 80085ac:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80085ae:	24c8      	movs	r4, #200	; 0xc8
 80085b0:	193b      	adds	r3, r7, r4
 80085b2:	0018      	movs	r0, r3
 80085b4:	23c6      	movs	r3, #198	; 0xc6
 80085b6:	001a      	movs	r2, r3
 80085b8:	2100      	movs	r1, #0
 80085ba:	f003 fc99 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 80085be:	4b16      	ldr	r3, [pc, #88]	; (8008618 <astronode_send_sak_cr+0x70>)
 80085c0:	25c8      	movs	r5, #200	; 0xc8
 80085c2:	006d      	lsls	r5, r5, #1
 80085c4:	195b      	adds	r3, r3, r5
 80085c6:	19db      	adds	r3, r3, r7
 80085c8:	0018      	movs	r0, r3
 80085ca:	23c6      	movs	r3, #198	; 0xc6
 80085cc:	001a      	movs	r2, r3
 80085ce:	2100      	movs	r1, #0
 80085d0:	f003 fc8e 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 80085d4:	193b      	adds	r3, r7, r4
 80085d6:	2246      	movs	r2, #70	; 0x46
 80085d8:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80085da:	003a      	movs	r2, r7
 80085dc:	193b      	adds	r3, r7, r4
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f000 fd2f 	bl	8009044 <astronode_transport_send_receive>
 80085e6:	0003      	movs	r3, r0
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d111      	bne.n	8008610 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 80085ec:	4b0a      	ldr	r3, [pc, #40]	; (8008618 <astronode_send_sak_cr+0x70>)
 80085ee:	195b      	adds	r3, r3, r5
 80085f0:	19db      	adds	r3, r3, r7
 80085f2:	781b      	ldrb	r3, [r3, #0]
 80085f4:	2bc6      	cmp	r3, #198	; 0xc6
 80085f6:	d107      	bne.n	8008608 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <astronode_send_sak_cr+0x74>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 80085fe:	4b08      	ldr	r3, [pc, #32]	; (8008620 <astronode_send_sak_cr+0x78>)
 8008600:	0018      	movs	r0, r3
 8008602:	f7fa fe0f 	bl	8003224 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 8008606:	e003      	b.n	8008610 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 8008608:	4b06      	ldr	r3, [pc, #24]	; (8008624 <astronode_send_sak_cr+0x7c>)
 800860a:	0018      	movs	r0, r3
 800860c:	f7fa fe0a 	bl	8003224 <send_debug_logs>
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b064      	add	sp, #400	; 0x190
 8008616:	bdb0      	pop	{r4, r5, r7, pc}
 8008618:	fffffe70 	.word	0xfffffe70
 800861c:	20000b04 	.word	0x20000b04
 8008620:	080134a4 	.word	0x080134a4
 8008624:	080134cc 	.word	0x080134cc

08008628 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 8008628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800862a:	b0ed      	sub	sp, #436	; 0x1b4
 800862c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800862e:	21c8      	movs	r1, #200	; 0xc8
 8008630:	2318      	movs	r3, #24
 8008632:	18cb      	adds	r3, r1, r3
 8008634:	19db      	adds	r3, r3, r7
 8008636:	0018      	movs	r0, r3
 8008638:	23c6      	movs	r3, #198	; 0xc6
 800863a:	001a      	movs	r2, r3
 800863c:	2100      	movs	r1, #0
 800863e:	f003 fc57 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8008642:	4b4a      	ldr	r3, [pc, #296]	; (800876c <astronode_send_mpn_rr+0x144>)
 8008644:	26cc      	movs	r6, #204	; 0xcc
 8008646:	0076      	lsls	r6, r6, #1
 8008648:	199b      	adds	r3, r3, r6
 800864a:	2218      	movs	r2, #24
 800864c:	4694      	mov	ip, r2
 800864e:	44bc      	add	ip, r7
 8008650:	4463      	add	r3, ip
 8008652:	0018      	movs	r0, r3
 8008654:	23c6      	movs	r3, #198	; 0xc6
 8008656:	001a      	movs	r2, r3
 8008658:	2100      	movs	r1, #0
 800865a:	f003 fc49 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 800865e:	21c8      	movs	r1, #200	; 0xc8
 8008660:	2318      	movs	r3, #24
 8008662:	18cb      	adds	r3, r1, r3
 8008664:	19db      	adds	r3, r3, r7
 8008666:	221b      	movs	r2, #27
 8008668:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800866a:	2318      	movs	r3, #24
 800866c:	18fa      	adds	r2, r7, r3
 800866e:	2318      	movs	r3, #24
 8008670:	18cb      	adds	r3, r1, r3
 8008672:	19db      	adds	r3, r3, r7
 8008674:	0011      	movs	r1, r2
 8008676:	0018      	movs	r0, r3
 8008678:	f000 fce4 	bl	8009044 <astronode_transport_send_receive>
 800867c:	0003      	movs	r3, r0
 800867e:	2b01      	cmp	r3, #1
 8008680:	d16f      	bne.n	8008762 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8008682:	4b3a      	ldr	r3, [pc, #232]	; (800876c <astronode_send_mpn_rr+0x144>)
 8008684:	0032      	movs	r2, r6
 8008686:	189b      	adds	r3, r3, r2
 8008688:	2118      	movs	r1, #24
 800868a:	468c      	mov	ip, r1
 800868c:	44bc      	add	ip, r7
 800868e:	4463      	add	r3, ip
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b9b      	cmp	r3, #155	; 0x9b
 8008694:	d161      	bne.n	800875a <astronode_send_mpn_rr+0x132>
        {
 8008696:	466b      	mov	r3, sp
 8008698:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800869a:	4b34      	ldr	r3, [pc, #208]	; (800876c <astronode_send_mpn_rr+0x144>)
 800869c:	189b      	adds	r3, r3, r2
 800869e:	2218      	movs	r2, #24
 80086a0:	4694      	mov	ip, r2
 80086a2:	44bc      	add	ip, r7
 80086a4:	4463      	add	r3, ip
 80086a6:	22c4      	movs	r2, #196	; 0xc4
 80086a8:	5a9b      	ldrh	r3, [r3, r2]
 80086aa:	001a      	movs	r2, r3
 80086ac:	3a01      	subs	r2, #1
 80086ae:	21ca      	movs	r1, #202	; 0xca
 80086b0:	0049      	lsls	r1, r1, #1
 80086b2:	2018      	movs	r0, #24
 80086b4:	1809      	adds	r1, r1, r0
 80086b6:	19c9      	adds	r1, r1, r7
 80086b8:	600a      	str	r2, [r1, #0]
 80086ba:	001c      	movs	r4, r3
 80086bc:	2200      	movs	r2, #0
 80086be:	0015      	movs	r5, r2
 80086c0:	0020      	movs	r0, r4
 80086c2:	0029      	movs	r1, r5
 80086c4:	0004      	movs	r4, r0
 80086c6:	0f62      	lsrs	r2, r4, #29
 80086c8:	000c      	movs	r4, r1
 80086ca:	00e4      	lsls	r4, r4, #3
 80086cc:	617c      	str	r4, [r7, #20]
 80086ce:	697c      	ldr	r4, [r7, #20]
 80086d0:	4314      	orrs	r4, r2
 80086d2:	617c      	str	r4, [r7, #20]
 80086d4:	0001      	movs	r1, r0
 80086d6:	00c9      	lsls	r1, r1, #3
 80086d8:	6139      	str	r1, [r7, #16]
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	2200      	movs	r2, #0
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	6838      	ldr	r0, [r7, #0]
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	0004      	movs	r4, r0
 80086e6:	0f62      	lsrs	r2, r4, #29
 80086e8:	000c      	movs	r4, r1
 80086ea:	00e4      	lsls	r4, r4, #3
 80086ec:	60fc      	str	r4, [r7, #12]
 80086ee:	68fc      	ldr	r4, [r7, #12]
 80086f0:	4314      	orrs	r4, r2
 80086f2:	60fc      	str	r4, [r7, #12]
 80086f4:	0001      	movs	r1, r0
 80086f6:	00ca      	lsls	r2, r1, #3
 80086f8:	60ba      	str	r2, [r7, #8]
 80086fa:	3307      	adds	r3, #7
 80086fc:	08db      	lsrs	r3, r3, #3
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4669      	mov	r1, sp
 8008702:	1acb      	subs	r3, r1, r3
 8008704:	469d      	mov	sp, r3
 8008706:	466b      	mov	r3, sp
 8008708:	3300      	adds	r3, #0
 800870a:	24c8      	movs	r4, #200	; 0xc8
 800870c:	0064      	lsls	r4, r4, #1
 800870e:	2218      	movs	r2, #24
 8008710:	18a2      	adds	r2, r4, r2
 8008712:	19d1      	adds	r1, r2, r7
 8008714:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 8008716:	4b16      	ldr	r3, [pc, #88]	; (8008770 <astronode_send_mpn_rr+0x148>)
 8008718:	0018      	movs	r0, r3
 800871a:	f7fa fd83 	bl	8003224 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <astronode_send_mpn_rr+0x144>)
 8008720:	22cc      	movs	r2, #204	; 0xcc
 8008722:	0052      	lsls	r2, r2, #1
 8008724:	189b      	adds	r3, r3, r2
 8008726:	2218      	movs	r2, #24
 8008728:	4694      	mov	ip, r2
 800872a:	44bc      	add	ip, r7
 800872c:	4463      	add	r3, ip
 800872e:	22c4      	movs	r2, #196	; 0xc4
 8008730:	5a9b      	ldrh	r3, [r3, r2]
 8008732:	0019      	movs	r1, r3
 8008734:	2318      	movs	r3, #24
 8008736:	18fb      	adds	r3, r7, r3
 8008738:	3301      	adds	r3, #1
 800873a:	4a0e      	ldr	r2, [pc, #56]	; (8008774 <astronode_send_mpn_rr+0x14c>)
 800873c:	2018      	movs	r0, #24
 800873e:	1820      	adds	r0, r4, r0
 8008740:	19c0      	adds	r0, r0, r7
 8008742:	6800      	ldr	r0, [r0, #0]
 8008744:	f003 fb0a 	bl	800bd5c <snprintf>
            send_debug_logs(product_number);
 8008748:	2318      	movs	r3, #24
 800874a:	18e3      	adds	r3, r4, r3
 800874c:	19db      	adds	r3, r3, r7
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	0018      	movs	r0, r3
 8008752:	f7fa fd67 	bl	8003224 <send_debug_logs>
 8008756:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 8008758:	e003      	b.n	8008762 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <astronode_send_mpn_rr+0x150>)
 800875c:	0018      	movs	r0, r3
 800875e:	f7fa fd61 	bl	8003224 <send_debug_logs>
}
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	46bd      	mov	sp, r7
 8008766:	b06d      	add	sp, #436	; 0x1b4
 8008768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	fffffe68 	.word	0xfffffe68
 8008770:	08013594 	.word	0x08013594
 8008774:	080130b0 	.word	0x080130b0
 8008778:	080130ec 	.word	0x080130ec

0800877c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 800877c:	b5b0      	push	{r4, r5, r7, lr}
 800877e:	b0e4      	sub	sp, #400	; 0x190
 8008780:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008782:	24c8      	movs	r4, #200	; 0xc8
 8008784:	193b      	adds	r3, r7, r4
 8008786:	0018      	movs	r0, r3
 8008788:	23c6      	movs	r3, #198	; 0xc6
 800878a:	001a      	movs	r2, r3
 800878c:	2100      	movs	r1, #0
 800878e:	f003 fbaf 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 8008792:	4b16      	ldr	r3, [pc, #88]	; (80087ec <astronode_send_cmd_cr+0x70>)
 8008794:	25c8      	movs	r5, #200	; 0xc8
 8008796:	006d      	lsls	r5, r5, #1
 8008798:	195b      	adds	r3, r3, r5
 800879a:	19db      	adds	r3, r3, r7
 800879c:	0018      	movs	r0, r3
 800879e:	23c6      	movs	r3, #198	; 0xc6
 80087a0:	001a      	movs	r2, r3
 80087a2:	2100      	movs	r1, #0
 80087a4:	f003 fba4 	bl	800bef0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 80087a8:	193b      	adds	r3, r7, r4
 80087aa:	2248      	movs	r2, #72	; 0x48
 80087ac:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80087ae:	003a      	movs	r2, r7
 80087b0:	193b      	adds	r3, r7, r4
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 fc45 	bl	8009044 <astronode_transport_send_receive>
 80087ba:	0003      	movs	r3, r0
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d111      	bne.n	80087e4 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <astronode_send_cmd_cr+0x70>)
 80087c2:	195b      	adds	r3, r3, r5
 80087c4:	19db      	adds	r3, r3, r7
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2bc8      	cmp	r3, #200	; 0xc8
 80087ca:	d107      	bne.n	80087dc <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 80087cc:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <astronode_send_cmd_cr+0x74>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 80087d2:	4b08      	ldr	r3, [pc, #32]	; (80087f4 <astronode_send_cmd_cr+0x78>)
 80087d4:	0018      	movs	r0, r3
 80087d6:	f7fa fd25 	bl	8003224 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 80087da:	e003      	b.n	80087e4 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 80087dc:	4b06      	ldr	r3, [pc, #24]	; (80087f8 <astronode_send_cmd_cr+0x7c>)
 80087de:	0018      	movs	r0, r3
 80087e0:	f7fa fd20 	bl	8003224 <send_debug_logs>
}
 80087e4:	46c0      	nop			; (mov r8, r8)
 80087e6:	46bd      	mov	sp, r7
 80087e8:	b064      	add	sp, #400	; 0x190
 80087ea:	bdb0      	pop	{r4, r5, r7, pc}
 80087ec:	fffffe70 	.word	0xfffffe70
 80087f0:	20000b06 	.word	0x20000b06
 80087f4:	080139e4 	.word	0x080139e4
 80087f8:	08013a08 	.word	0x08013a08

080087fc <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 80087fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fe:	4cc6      	ldr	r4, [pc, #792]	; (8008b18 <astronode_send_cmd_rr+0x31c>)
 8008800:	44a5      	add	sp, r4
 8008802:	af00      	add	r7, sp, #0
 8008804:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8008806:	2190      	movs	r1, #144	; 0x90
 8008808:	0049      	lsls	r1, r1, #1
 800880a:	2318      	movs	r3, #24
 800880c:	18cb      	adds	r3, r1, r3
 800880e:	19db      	adds	r3, r3, r7
 8008810:	0018      	movs	r0, r3
 8008812:	23c6      	movs	r3, #198	; 0xc6
 8008814:	001a      	movs	r2, r3
 8008816:	2100      	movs	r1, #0
 8008818:	f003 fb6a 	bl	800bef0 <memset>
    astronode_app_msg_t answer = {0};
 800881c:	4bbf      	ldr	r3, [pc, #764]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 800881e:	26fc      	movs	r6, #252	; 0xfc
 8008820:	0076      	lsls	r6, r6, #1
 8008822:	199b      	adds	r3, r3, r6
 8008824:	2218      	movs	r2, #24
 8008826:	4694      	mov	ip, r2
 8008828:	44bc      	add	ip, r7
 800882a:	4463      	add	r3, ip
 800882c:	0018      	movs	r0, r3
 800882e:	23c6      	movs	r3, #198	; 0xc6
 8008830:	001a      	movs	r2, r3
 8008832:	2100      	movs	r1, #0
 8008834:	f003 fb5c 	bl	800bef0 <memset>
    bool result = false ;
 8008838:	23f8      	movs	r3, #248	; 0xf8
 800883a:	33ff      	adds	r3, #255	; 0xff
 800883c:	2218      	movs	r2, #24
 800883e:	189b      	adds	r3, r3, r2
 8008840:	19db      	adds	r3, r3, r7
 8008842:	2200      	movs	r2, #0
 8008844:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8008846:	2190      	movs	r1, #144	; 0x90
 8008848:	0049      	lsls	r1, r1, #1
 800884a:	2318      	movs	r3, #24
 800884c:	18cb      	adds	r3, r1, r3
 800884e:	19db      	adds	r3, r3, r7
 8008850:	2247      	movs	r2, #71	; 0x47
 8008852:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008854:	2358      	movs	r3, #88	; 0x58
 8008856:	2218      	movs	r2, #24
 8008858:	189b      	adds	r3, r3, r2
 800885a:	19da      	adds	r2, r3, r7
 800885c:	2318      	movs	r3, #24
 800885e:	18cb      	adds	r3, r1, r3
 8008860:	19db      	adds	r3, r3, r7
 8008862:	0011      	movs	r1, r2
 8008864:	0018      	movs	r0, r3
 8008866:	f000 fbed 	bl	8009044 <astronode_transport_send_receive>
 800886a:	0003      	movs	r3, r0
 800886c:	2b01      	cmp	r3, #1
 800886e:	d000      	beq.n	8008872 <astronode_send_cmd_rr+0x76>
 8008870:	e146      	b.n	8008b00 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8008872:	4baa      	ldr	r3, [pc, #680]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 8008874:	199b      	adds	r3, r3, r6
 8008876:	2218      	movs	r2, #24
 8008878:	4694      	mov	ip, r2
 800887a:	44bc      	add	ip, r7
 800887c:	4463      	add	r3, ip
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	2bc7      	cmp	r3, #199	; 0xc7
 8008882:	d000      	beq.n	8008886 <astronode_send_cmd_rr+0x8a>
 8008884:	e138      	b.n	8008af8 <astronode_send_cmd_rr+0x2fc>
        {
 8008886:	466b      	mov	r3, sp
 8008888:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 800888a:	4ba5      	ldr	r3, [pc, #660]	; (8008b20 <astronode_send_cmd_rr+0x324>)
 800888c:	0018      	movs	r0, r3
 800888e:	f7fa fcc9 	bl	8003224 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8008892:	4ba2      	ldr	r3, [pc, #648]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 8008894:	21fc      	movs	r1, #252	; 0xfc
 8008896:	0049      	lsls	r1, r1, #1
 8008898:	185b      	adds	r3, r3, r1
 800889a:	2218      	movs	r2, #24
 800889c:	4694      	mov	ip, r2
 800889e:	44bc      	add	ip, r7
 80088a0:	4463      	add	r3, ip
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 80088a6:	4b9d      	ldr	r3, [pc, #628]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 80088a8:	185b      	adds	r3, r3, r1
 80088aa:	2018      	movs	r0, #24
 80088ac:	4684      	mov	ip, r0
 80088ae:	44bc      	add	ip, r7
 80088b0:	4463      	add	r3, ip
 80088b2:	789b      	ldrb	r3, [r3, #2]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 80088b8:	4b98      	ldr	r3, [pc, #608]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 80088ba:	185b      	adds	r3, r3, r1
 80088bc:	2018      	movs	r0, #24
 80088be:	4684      	mov	ip, r0
 80088c0:	44bc      	add	ip, r7
 80088c2:	4463      	add	r3, ip
 80088c4:	78db      	ldrb	r3, [r3, #3]
 80088c6:	041b      	lsls	r3, r3, #16
 80088c8:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 80088ca:	4b94      	ldr	r3, [pc, #592]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 80088cc:	185b      	adds	r3, r3, r1
 80088ce:	2118      	movs	r1, #24
 80088d0:	468c      	mov	ip, r1
 80088d2:	44bc      	add	ip, r7
 80088d4:	4463      	add	r3, ip
 80088d6:	791b      	ldrb	r3, [r3, #4]
 80088d8:	061b      	lsls	r3, r3, #24
 80088da:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 80088dc:	22f8      	movs	r2, #248	; 0xf8
 80088de:	0052      	lsls	r2, r2, #1
 80088e0:	2118      	movs	r1, #24
 80088e2:	1851      	adds	r1, r2, r1
 80088e4:	19c8      	adds	r0, r1, r7
 80088e6:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 80088e8:	2318      	movs	r3, #24
 80088ea:	18d3      	adds	r3, r2, r3
 80088ec:	19db      	adds	r3, r3, r7
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	498c      	ldr	r1, [pc, #560]	; (8008b24 <astronode_send_cmd_rr+0x328>)
 80088f2:	2308      	movs	r3, #8
 80088f4:	2018      	movs	r0, #24
 80088f6:	181b      	adds	r3, r3, r0
 80088f8:	19db      	adds	r3, r3, r7
 80088fa:	0018      	movs	r0, r3
 80088fc:	f003 fa62 	bl	800bdc4 <sprintf>
            send_debug_logs(str);
 8008900:	2308      	movs	r3, #8
 8008902:	2218      	movs	r2, #24
 8008904:	189b      	adds	r3, r3, r2
 8008906:	19db      	adds	r3, r3, r7
 8008908:	0018      	movs	r0, r3
 800890a:	f7fa fc8b 	bl	8003224 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 800890e:	4b83      	ldr	r3, [pc, #524]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 8008910:	21fc      	movs	r1, #252	; 0xfc
 8008912:	0049      	lsls	r1, r1, #1
 8008914:	185b      	adds	r3, r3, r1
 8008916:	2218      	movs	r2, #24
 8008918:	4694      	mov	ip, r2
 800891a:	44bc      	add	ip, r7
 800891c:	4463      	add	r3, ip
 800891e:	22c4      	movs	r2, #196	; 0xc4
 8008920:	5a9b      	ldrh	r3, [r3, r2]
 8008922:	2b2c      	cmp	r3, #44	; 0x2c
 8008924:	d00e      	beq.n	8008944 <astronode_send_cmd_rr+0x148>
 8008926:	4b7d      	ldr	r3, [pc, #500]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 8008928:	185b      	adds	r3, r3, r1
 800892a:	2218      	movs	r2, #24
 800892c:	4694      	mov	ip, r2
 800892e:	44bc      	add	ip, r7
 8008930:	4463      	add	r3, ip
 8008932:	22c4      	movs	r2, #196	; 0xc4
 8008934:	5a9b      	ldrh	r3, [r3, r2]
 8008936:	2b0c      	cmp	r3, #12
 8008938:	d004      	beq.n	8008944 <astronode_send_cmd_rr+0x148>
            {
                send_debug_logs("Command size error");
 800893a:	4b7b      	ldr	r3, [pc, #492]	; (8008b28 <astronode_send_cmd_rr+0x32c>)
 800893c:	0018      	movs	r0, r3
 800893e:	f7fa fc71 	bl	8003224 <send_debug_logs>
                return;
 8008942:	e0d7      	b.n	8008af4 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8008944:	4b75      	ldr	r3, [pc, #468]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 8008946:	22fc      	movs	r2, #252	; 0xfc
 8008948:	0052      	lsls	r2, r2, #1
 800894a:	189b      	adds	r3, r3, r2
 800894c:	2218      	movs	r2, #24
 800894e:	4694      	mov	ip, r2
 8008950:	44bc      	add	ip, r7
 8008952:	4463      	add	r3, ip
 8008954:	22c4      	movs	r2, #196	; 0xc4
 8008956:	5a9b      	ldrh	r3, [r3, r2]
 8008958:	001a      	movs	r2, r3
 800895a:	3a01      	subs	r2, #1
 800895c:	21f6      	movs	r1, #246	; 0xf6
 800895e:	0049      	lsls	r1, r1, #1
 8008960:	2018      	movs	r0, #24
 8008962:	1809      	adds	r1, r1, r0
 8008964:	19c9      	adds	r1, r1, r7
 8008966:	600a      	str	r2, [r1, #0]
 8008968:	001c      	movs	r4, r3
 800896a:	2200      	movs	r2, #0
 800896c:	0015      	movs	r5, r2
 800896e:	0020      	movs	r0, r4
 8008970:	0029      	movs	r1, r5
 8008972:	0004      	movs	r4, r0
 8008974:	0f62      	lsrs	r2, r4, #29
 8008976:	000c      	movs	r4, r1
 8008978:	00e4      	lsls	r4, r4, #3
 800897a:	617c      	str	r4, [r7, #20]
 800897c:	697c      	ldr	r4, [r7, #20]
 800897e:	4314      	orrs	r4, r2
 8008980:	617c      	str	r4, [r7, #20]
 8008982:	0001      	movs	r1, r0
 8008984:	00c9      	lsls	r1, r1, #3
 8008986:	6139      	str	r1, [r7, #16]
 8008988:	603b      	str	r3, [r7, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	6838      	ldr	r0, [r7, #0]
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	0004      	movs	r4, r0
 8008994:	0f62      	lsrs	r2, r4, #29
 8008996:	000c      	movs	r4, r1
 8008998:	00e4      	lsls	r4, r4, #3
 800899a:	60fc      	str	r4, [r7, #12]
 800899c:	68fc      	ldr	r4, [r7, #12]
 800899e:	4314      	orrs	r4, r2
 80089a0:	60fc      	str	r4, [r7, #12]
 80089a2:	0001      	movs	r1, r0
 80089a4:	00ca      	lsls	r2, r1, #3
 80089a6:	60ba      	str	r2, [r7, #8]
 80089a8:	3307      	adds	r3, #7
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	4669      	mov	r1, sp
 80089b0:	1acb      	subs	r3, r1, r3
 80089b2:	469d      	mov	sp, r3
 80089b4:	466b      	mov	r3, sp
 80089b6:	3300      	adds	r3, #0
 80089b8:	20f4      	movs	r0, #244	; 0xf4
 80089ba:	0040      	lsls	r0, r0, #1
 80089bc:	2218      	movs	r2, #24
 80089be:	1882      	adds	r2, r0, r2
 80089c0:	19d1      	adds	r1, r2, r7
 80089c2:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 80089c4:	4b55      	ldr	r3, [pc, #340]	; (8008b1c <astronode_send_cmd_rr+0x320>)
 80089c6:	22fc      	movs	r2, #252	; 0xfc
 80089c8:	0052      	lsls	r2, r2, #1
 80089ca:	189b      	adds	r3, r3, r2
 80089cc:	2218      	movs	r2, #24
 80089ce:	4694      	mov	ip, r2
 80089d0:	44bc      	add	ip, r7
 80089d2:	4463      	add	r3, ip
 80089d4:	22c4      	movs	r2, #196	; 0xc4
 80089d6:	5a9b      	ldrh	r3, [r3, r2]
 80089d8:	3b03      	subs	r3, #3
 80089da:	0019      	movs	r1, r3
 80089dc:	2358      	movs	r3, #88	; 0x58
 80089de:	2218      	movs	r2, #24
 80089e0:	189b      	adds	r3, r3, r2
 80089e2:	19db      	adds	r3, r3, r7
 80089e4:	3305      	adds	r3, #5
 80089e6:	4a51      	ldr	r2, [pc, #324]	; (8008b2c <astronode_send_cmd_rr+0x330>)
 80089e8:	2418      	movs	r4, #24
 80089ea:	1900      	adds	r0, r0, r4
 80089ec:	19c0      	adds	r0, r0, r7
 80089ee:	6800      	ldr	r0, [r0, #0]
 80089f0:	f003 f9b4 	bl	800bd5c <snprintf>
 80089f4:	0002      	movs	r2, r0
 80089f6:	23f3      	movs	r3, #243	; 0xf3
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	2118      	movs	r1, #24
 80089fc:	185b      	adds	r3, r3, r1
 80089fe:	19db      	adds	r3, r3, r7
 8008a00:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008a02:	23fb      	movs	r3, #251	; 0xfb
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	2218      	movs	r2, #24
 8008a08:	189b      	adds	r3, r3, r2
 8008a0a:	19db      	adds	r3, r3, r7
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	701a      	strb	r2, [r3, #0]
 8008a10:	e036      	b.n	8008a80 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8008a12:	23fb      	movs	r3, #251	; 0xfb
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	2218      	movs	r2, #24
 8008a18:	189b      	adds	r3, r3, r2
 8008a1a:	19db      	adds	r3, r3, r7
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	22f4      	movs	r2, #244	; 0xf4
 8008a20:	0052      	lsls	r2, r2, #1
 8008a22:	2118      	movs	r1, #24
 8008a24:	1852      	adds	r2, r2, r1
 8008a26:	19d2      	adds	r2, r2, r7
 8008a28:	6812      	ldr	r2, [r2, #0]
 8008a2a:	5cd3      	ldrb	r3, [r2, r3]
 8008a2c:	1c5a      	adds	r2, r3, #1
 8008a2e:	4b40      	ldr	r3, [pc, #256]	; (8008b30 <astronode_send_cmd_rr+0x334>)
 8008a30:	18d3      	adds	r3, r2, r3
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	001a      	movs	r2, r3
 8008a36:	2397      	movs	r3, #151	; 0x97
 8008a38:	4013      	ands	r3, r2
 8008a3a:	d104      	bne.n	8008a46 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8008a3c:	4b3d      	ldr	r3, [pc, #244]	; (8008b34 <astronode_send_cmd_rr+0x338>)
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f7fa fbf0 	bl	8003224 <send_debug_logs>
                    return;
 8008a44:	e056      	b.n	8008af4 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8008a46:	20fb      	movs	r0, #251	; 0xfb
 8008a48:	0040      	lsls	r0, r0, #1
 8008a4a:	2318      	movs	r3, #24
 8008a4c:	18c3      	adds	r3, r0, r3
 8008a4e:	19db      	adds	r3, r3, r7
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	2318      	movs	r3, #24
 8008a54:	18c3      	adds	r3, r0, r3
 8008a56:	19db      	adds	r3, r3, r7
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	69f9      	ldr	r1, [r7, #28]
 8008a5c:	18cb      	adds	r3, r1, r3
 8008a5e:	21f4      	movs	r1, #244	; 0xf4
 8008a60:	0049      	lsls	r1, r1, #1
 8008a62:	2418      	movs	r4, #24
 8008a64:	1909      	adds	r1, r1, r4
 8008a66:	19c9      	adds	r1, r1, r7
 8008a68:	6809      	ldr	r1, [r1, #0]
 8008a6a:	5c8a      	ldrb	r2, [r1, r2]
 8008a6c:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8008a6e:	2318      	movs	r3, #24
 8008a70:	18c3      	adds	r3, r0, r3
 8008a72:	19db      	adds	r3, r3, r7
 8008a74:	781a      	ldrb	r2, [r3, #0]
 8008a76:	2318      	movs	r3, #24
 8008a78:	18c3      	adds	r3, r0, r3
 8008a7a:	19db      	adds	r3, r3, r7
 8008a7c:	3201      	adds	r2, #1
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	23fb      	movs	r3, #251	; 0xfb
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	2218      	movs	r2, #24
 8008a86:	189b      	adds	r3, r3, r2
 8008a88:	19db      	adds	r3, r3, r7
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	21f3      	movs	r1, #243	; 0xf3
 8008a90:	0049      	lsls	r1, r1, #1
 8008a92:	2218      	movs	r2, #24
 8008a94:	188a      	adds	r2, r1, r2
 8008a96:	19d2      	adds	r2, r2, r7
 8008a98:	8812      	ldrh	r2, [r2, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d8b9      	bhi.n	8008a12 <astronode_send_cmd_rr+0x216>
            }
            result = true ;
 8008a9e:	23f8      	movs	r3, #248	; 0xf8
 8008aa0:	33ff      	adds	r3, #255	; 0xff
 8008aa2:	2218      	movs	r2, #24
 8008aa4:	189b      	adds	r3, r3, r2
 8008aa6:	19db      	adds	r3, r3, r7
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8008aac:	2318      	movs	r3, #24
 8008aae:	18cb      	adds	r3, r1, r3
 8008ab0:	19db      	adds	r3, r3, r7
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	18d3      	adds	r3, r2, r3
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8008abc:	4b1e      	ldr	r3, [pc, #120]	; (8008b38 <astronode_send_cmd_rr+0x33c>)
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7fa fbb0 	bl	8003224 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8008ac4:	2358      	movs	r3, #88	; 0x58
 8008ac6:	2218      	movs	r2, #24
 8008ac8:	189b      	adds	r3, r3, r2
 8008aca:	19db      	adds	r3, r3, r7
 8008acc:	1d5a      	adds	r2, r3, #5
 8008ace:	491b      	ldr	r1, [pc, #108]	; (8008b3c <astronode_send_cmd_rr+0x340>)
 8008ad0:	24f4      	movs	r4, #244	; 0xf4
 8008ad2:	0064      	lsls	r4, r4, #1
 8008ad4:	2318      	movs	r3, #24
 8008ad6:	18e3      	adds	r3, r4, r3
 8008ad8:	19db      	adds	r3, r3, r7
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	0018      	movs	r0, r3
 8008ade:	f003 f971 	bl	800bdc4 <sprintf>
            send_debug_logs(command_content);
 8008ae2:	2318      	movs	r3, #24
 8008ae4:	18e3      	adds	r3, r4, r3
 8008ae6:	19db      	adds	r3, r3, r7
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	0018      	movs	r0, r3
 8008aec:	f7fa fb9a 	bl	8003224 <send_debug_logs>
 8008af0:	46b5      	mov	sp, r6
 8008af2:	e005      	b.n	8008b00 <astronode_send_cmd_rr+0x304>
                return;
 8008af4:	46b5      	mov	sp, r6
 8008af6:	e009      	b.n	8008b0c <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8008af8:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <astronode_send_cmd_rr+0x344>)
 8008afa:	0018      	movs	r0, r3
 8008afc:	f7fa fb92 	bl	8003224 <send_debug_logs>
        }
    }
    return result ;
 8008b00:	23f8      	movs	r3, #248	; 0xf8
 8008b02:	33ff      	adds	r3, #255	; 0xff
 8008b04:	2218      	movs	r2, #24
 8008b06:	189b      	adds	r3, r3, r2
 8008b08:	19db      	adds	r3, r3, r7
 8008b0a:	781b      	ldrb	r3, [r3, #0]
}
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	2385      	movs	r3, #133	; 0x85
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	449d      	add	sp, r3
 8008b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b18:	fffffdec 	.word	0xfffffdec
 8008b1c:	fffffe60 	.word	0xfffffe60
 8008b20:	08013a20 	.word	0x08013a20
 8008b24:	08013a3c 	.word	0x08013a3c
 8008b28:	08013a8c 	.word	0x08013a8c
 8008b2c:	080130b0 	.word	0x080130b0
 8008b30:	080145c8 	.word	0x080145c8
 8008b34:	08013aa0 	.word	0x08013aa0
 8008b38:	08013acc 	.word	0x08013acc
 8008b3c:	08013ae4 	.word	0x08013ae4
 8008b40:	08013ae8 	.word	0x08013ae8

08008b44 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <is_sak_available+0x10>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
}
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	20000b04 	.word	0x20000b04

08008b58 <is_astronode_reset>:

bool is_astronode_reset()
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8008b5c:	4b02      	ldr	r3, [pc, #8]	; (8008b68 <is_astronode_reset+0x10>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
}
 8008b60:	0018      	movs	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	46c0      	nop			; (mov r8, r8)
 8008b68:	20000b05 	.word	0x20000b05

08008b6c <is_command_available>:

bool is_command_available()
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <is_command_available+0x10>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
}
 8008b74:	0018      	movs	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	20000b06 	.word	0x20000b06

08008b80 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	0002      	movs	r2, r0
 8008b88:	6039      	str	r1, [r7, #0]
 8008b8a:	1dfb      	adds	r3, r7, #7
 8008b8c:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8008b8e:	1dfb      	adds	r3, r7, #7
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b2f      	cmp	r3, #47	; 0x2f
 8008b94:	d90b      	bls.n	8008bae <ascii_to_value+0x2e>
 8008b96:	1dfb      	adds	r3, r7, #7
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	2b39      	cmp	r3, #57	; 0x39
 8008b9c:	d807      	bhi.n	8008bae <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8008b9e:	1dfb      	adds	r3, r7, #7
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	3b30      	subs	r3, #48	; 0x30
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	701a      	strb	r2, [r3, #0]
        return true;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e010      	b.n	8008bd0 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8008bae:	1dfb      	adds	r3, r7, #7
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	2b40      	cmp	r3, #64	; 0x40
 8008bb4:	d90b      	bls.n	8008bce <ascii_to_value+0x4e>
 8008bb6:	1dfb      	adds	r3, r7, #7
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b46      	cmp	r3, #70	; 0x46
 8008bbc:	d807      	bhi.n	8008bce <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8008bbe:	1dfb      	adds	r3, r7, #7
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	3b37      	subs	r3, #55	; 0x37
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	701a      	strb	r2, [r3, #0]
        return true;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8008bce:	2300      	movs	r3, #0
    }
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b002      	add	sp, #8
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8008bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8008be2:	250e      	movs	r5, #14
 8008be4:	197b      	adds	r3, r7, r5
 8008be6:	2200      	movs	r2, #0
 8008be8:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8008bea:	197b      	adds	r3, r7, r5
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	197a      	adds	r2, r7, r5
 8008bf0:	1c59      	adds	r1, r3, #1
 8008bf2:	8011      	strh	r1, [r2, #0]
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	189b      	adds	r3, r3, r2
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	260a      	movs	r6, #10
 8008c02:	19bc      	adds	r4, r7, r6
 8008c04:	4a44      	ldr	r2, [pc, #272]	; (8008d18 <astronode_create_request_transport+0x140>)
 8008c06:	2101      	movs	r1, #1
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f000 fa7d 	bl	8009108 <calculate_crc>
 8008c0e:	0003      	movs	r3, r0
 8008c10:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1c58      	adds	r0, r3, #1
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	22c4      	movs	r2, #196	; 0xc4
 8008c1a:	5a99      	ldrh	r1, [r3, r2]
 8008c1c:	19bc      	adds	r4, r7, r6
 8008c1e:	19bb      	adds	r3, r7, r6
 8008c20:	881b      	ldrh	r3, [r3, #0]
 8008c22:	001a      	movs	r2, r3
 8008c24:	f000 fa70 	bl	8009108 <calculate_crc>
 8008c28:	0003      	movs	r3, r0
 8008c2a:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8008c2c:	19bb      	adds	r3, r7, r6
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	021b      	lsls	r3, r3, #8
 8008c32:	b21a      	sxth	r2, r3
 8008c34:	0031      	movs	r1, r6
 8008c36:	19bb      	adds	r3, r7, r6
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	0a1b      	lsrs	r3, r3, #8
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	b21b      	sxth	r3, r3
 8008c40:	4313      	orrs	r3, r2
 8008c42:	b21a      	sxth	r2, r3
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	7818      	ldrb	r0, [r3, #0]
 8008c4c:	197b      	adds	r3, r7, r5
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	18d3      	adds	r3, r2, r3
 8008c54:	0019      	movs	r1, r3
 8008c56:	f000 fbeb 	bl	8009430 <uint8_to_ascii_buffer>
    index += 2;
 8008c5a:	197b      	adds	r3, r7, r5
 8008c5c:	197a      	adds	r2, r7, r5
 8008c5e:	8812      	ldrh	r2, [r2, #0]
 8008c60:	3202      	adds	r2, #2
 8008c62:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008c64:	230c      	movs	r3, #12
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	2200      	movs	r2, #0
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	e017      	b.n	8008c9e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8008c6e:	240c      	movs	r4, #12
 8008c70:	193b      	adds	r3, r7, r4
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	18d3      	adds	r3, r2, r3
 8008c78:	7858      	ldrb	r0, [r3, #1]
 8008c7a:	250e      	movs	r5, #14
 8008c7c:	197b      	adds	r3, r7, r5
 8008c7e:	881b      	ldrh	r3, [r3, #0]
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	18d3      	adds	r3, r2, r3
 8008c84:	0019      	movs	r1, r3
 8008c86:	f000 fbd3 	bl	8009430 <uint8_to_ascii_buffer>
        index += 2;
 8008c8a:	197b      	adds	r3, r7, r5
 8008c8c:	197a      	adds	r2, r7, r5
 8008c8e:	8812      	ldrh	r2, [r2, #0]
 8008c90:	3202      	adds	r2, #2
 8008c92:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8008c94:	193b      	adds	r3, r7, r4
 8008c96:	881a      	ldrh	r2, [r3, #0]
 8008c98:	193b      	adds	r3, r7, r4
 8008c9a:	3201      	adds	r2, #1
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	22c4      	movs	r2, #196	; 0xc4
 8008ca2:	5a9b      	ldrh	r3, [r3, r2]
 8008ca4:	220c      	movs	r2, #12
 8008ca6:	18ba      	adds	r2, r7, r2
 8008ca8:	8812      	ldrh	r2, [r2, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d3df      	bcc.n	8008c6e <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8008cae:	250a      	movs	r5, #10
 8008cb0:	197b      	adds	r3, r7, r5
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	0a1b      	lsrs	r3, r3, #8
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	b2d8      	uxtb	r0, r3
 8008cba:	240e      	movs	r4, #14
 8008cbc:	193b      	adds	r3, r7, r4
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	18d3      	adds	r3, r2, r3
 8008cc4:	0019      	movs	r1, r3
 8008cc6:	f000 fbb3 	bl	8009430 <uint8_to_ascii_buffer>
    index += 2;
 8008cca:	0021      	movs	r1, r4
 8008ccc:	187b      	adds	r3, r7, r1
 8008cce:	187a      	adds	r2, r7, r1
 8008cd0:	8812      	ldrh	r2, [r2, #0]
 8008cd2:	3202      	adds	r2, #2
 8008cd4:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8008cd6:	197b      	adds	r3, r7, r5
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	b2d8      	uxtb	r0, r3
 8008cdc:	000c      	movs	r4, r1
 8008cde:	187b      	adds	r3, r7, r1
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	683a      	ldr	r2, [r7, #0]
 8008ce4:	18d3      	adds	r3, r2, r3
 8008ce6:	0019      	movs	r1, r3
 8008ce8:	f000 fba2 	bl	8009430 <uint8_to_ascii_buffer>
    index += 2;
 8008cec:	0020      	movs	r0, r4
 8008cee:	183b      	adds	r3, r7, r0
 8008cf0:	183a      	adds	r2, r7, r0
 8008cf2:	8812      	ldrh	r2, [r2, #0]
 8008cf4:	3202      	adds	r2, #2
 8008cf6:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8008cf8:	183b      	adds	r3, r7, r0
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	183a      	adds	r2, r7, r0
 8008cfe:	1c59      	adds	r1, r3, #1
 8008d00:	8011      	strh	r1, [r2, #0]
 8008d02:	001a      	movs	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	189b      	adds	r3, r3, r2
 8008d08:	2203      	movs	r2, #3
 8008d0a:	701a      	strb	r2, [r3, #0]

    return index;
 8008d0c:	183b      	adds	r3, r7, r0
 8008d0e:	881b      	ldrh	r3, [r3, #0]
}
 8008d10:	0018      	movs	r0, r3
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b005      	add	sp, #20
 8008d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d18:	0000ffff 	.word	0x0000ffff

08008d1c <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8008d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d1e:	b089      	sub	sp, #36	; 0x24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	607a      	str	r2, [r7, #4]
 8008d26:	230a      	movs	r3, #10
 8008d28:	18fb      	adds	r3, r7, r3
 8008d2a:	1c0a      	adds	r2, r1, #0
 8008d2c:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d005      	beq.n	8008d42 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8008d36:	4bbd      	ldr	r3, [pc, #756]	; (800902c <astronode_decode_answer_transport+0x310>)
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7fa fa73 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e170      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8008d42:	210a      	movs	r1, #10
 8008d44:	187b      	adds	r3, r7, r1
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <astronode_decode_answer_transport+0x3e>
 8008d52:	187b      	adds	r3, r7, r1
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	2b07      	cmp	r3, #7
 8008d58:	d805      	bhi.n	8008d66 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8008d5a:	4bb5      	ldr	r3, [pc, #724]	; (8009030 <astronode_decode_answer_transport+0x314>)
 8008d5c:	0018      	movs	r0, r3
 8008d5e:	f7fa fa61 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	e15e      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 8008d66:	230a      	movs	r3, #10
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	881b      	ldrh	r3, [r3, #0]
 8008d6c:	3b08      	subs	r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	da00      	bge.n	8008d74 <astronode_decode_answer_transport+0x58>
 8008d72:	3301      	adds	r3, #1
 8008d74:	105b      	asrs	r3, r3, #1
 8008d76:	b299      	uxth	r1, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	22c4      	movs	r2, #196	; 0xc4
 8008d7c:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 8008d7e:	230a      	movs	r3, #10
 8008d80:	18fb      	adds	r3, r7, r3
 8008d82:	881b      	ldrh	r3, [r3, #0]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	18d3      	adds	r3, r2, r3
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d005      	beq.n	8008d9c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 8008d90:	4ba8      	ldr	r3, [pc, #672]	; (8009034 <astronode_decode_answer_transport+0x318>)
 8008d92:	0018      	movs	r0, r3
 8008d94:	f7fa fa46 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e143      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 8008d9c:	2117      	movs	r1, #23
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	2200      	movs	r2, #0
 8008da2:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 8008da4:	2416      	movs	r4, #22
 8008da6:	193b      	adds	r3, r7, r4
 8008da8:	2200      	movs	r2, #0
 8008daa:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	187a      	adds	r2, r7, r1
 8008db4:	0011      	movs	r1, r2
 8008db6:	0018      	movs	r0, r3
 8008db8:	f7ff fee2 	bl	8008b80 <ascii_to_value>
 8008dbc:	0003      	movs	r3, r0
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4053      	eors	r3, r2
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10e      	bne.n	8008de8 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3302      	adds	r3, #2
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	193a      	adds	r2, r7, r4
 8008dd2:	0011      	movs	r1, r2
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7ff fed3 	bl	8008b80 <ascii_to_value>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	001a      	movs	r2, r3
 8008dde:	2301      	movs	r3, #1
 8008de0:	4053      	eors	r3, r2
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008de8:	4b93      	ldr	r3, [pc, #588]	; (8009038 <astronode_decode_answer_transport+0x31c>)
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7fa fa1a 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e117      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 8008df4:	2317      	movs	r3, #23
 8008df6:	18fb      	adds	r3, r7, r3
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	011b      	lsls	r3, r3, #4
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	2316      	movs	r3, #22
 8008e00:	18fb      	adds	r3, r7, r3
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	18d3      	adds	r3, r2, r3
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e0c:	231e      	movs	r3, #30
 8008e0e:	18fb      	adds	r3, r7, r3
 8008e10:	2203      	movs	r2, #3
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	231c      	movs	r3, #28
 8008e16:	18fb      	adds	r3, r7, r3
 8008e18:	2200      	movs	r2, #0
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	e045      	b.n	8008eaa <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 8008e1e:	241e      	movs	r4, #30
 8008e20:	193b      	adds	r3, r7, r4
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	18d3      	adds	r3, r2, r3
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	2217      	movs	r2, #23
 8008e2c:	18ba      	adds	r2, r7, r2
 8008e2e:	0011      	movs	r1, r2
 8008e30:	0018      	movs	r0, r3
 8008e32:	f7ff fea5 	bl	8008b80 <ascii_to_value>
 8008e36:	0003      	movs	r3, r0
 8008e38:	001a      	movs	r2, r3
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4053      	eors	r3, r2
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d112      	bne.n	8008e6a <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 8008e44:	193b      	adds	r3, r7, r4
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	18d3      	adds	r3, r2, r3
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	2216      	movs	r2, #22
 8008e52:	18ba      	adds	r2, r7, r2
 8008e54:	0011      	movs	r1, r2
 8008e56:	0018      	movs	r0, r3
 8008e58:	f7ff fe92 	bl	8008b80 <ascii_to_value>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	001a      	movs	r2, r3
 8008e60:	2301      	movs	r3, #1
 8008e62:	4053      	eors	r3, r2
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008e6a:	4b73      	ldr	r3, [pc, #460]	; (8009038 <astronode_decode_answer_transport+0x31c>)
 8008e6c:	0018      	movs	r0, r3
 8008e6e:	f7fa f9d9 	bl	8003224 <send_debug_logs>
            return RS_FAILURE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	e0d6      	b.n	8009024 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 8008e76:	2317      	movs	r3, #23
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	b2d9      	uxtb	r1, r3
 8008e80:	2316      	movs	r3, #22
 8008e82:	18fb      	adds	r3, r7, r3
 8008e84:	781a      	ldrb	r2, [r3, #0]
 8008e86:	201c      	movs	r0, #28
 8008e88:	183b      	adds	r3, r7, r0
 8008e8a:	881b      	ldrh	r3, [r3, #0]
 8008e8c:	1838      	adds	r0, r7, r0
 8008e8e:	1c5c      	adds	r4, r3, #1
 8008e90:	8004      	strh	r4, [r0, #0]
 8008e92:	0018      	movs	r0, r3
 8008e94:	188b      	adds	r3, r1, r2
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	181b      	adds	r3, r3, r0
 8008e9c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 8008e9e:	221e      	movs	r2, #30
 8008ea0:	18bb      	adds	r3, r7, r2
 8008ea2:	18ba      	adds	r2, r7, r2
 8008ea4:	8812      	ldrh	r2, [r2, #0]
 8008ea6:	3202      	adds	r2, #2
 8008ea8:	801a      	strh	r2, [r3, #0]
 8008eaa:	231e      	movs	r3, #30
 8008eac:	18fb      	adds	r3, r7, r3
 8008eae:	881a      	ldrh	r2, [r3, #0]
 8008eb0:	260a      	movs	r6, #10
 8008eb2:	19bb      	adds	r3, r7, r6
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	3b05      	subs	r3, #5
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	dbb0      	blt.n	8008e1e <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	251a      	movs	r5, #26
 8008ec0:	197c      	adds	r4, r7, r5
 8008ec2:	4a5e      	ldr	r2, [pc, #376]	; (800903c <astronode_decode_answer_transport+0x320>)
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	f000 f91e 	bl	8009108 <calculate_crc>
 8008ecc:	0003      	movs	r3, r0
 8008ece:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	1c58      	adds	r0, r3, #1
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	22c4      	movs	r2, #196	; 0xc4
 8008ed8:	5a99      	ldrh	r1, [r3, r2]
 8008eda:	197c      	adds	r4, r7, r5
 8008edc:	197b      	adds	r3, r7, r5
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	001a      	movs	r2, r3
 8008ee2:	f000 f911 	bl	8009108 <calculate_crc>
 8008ee6:	0003      	movs	r3, r0
 8008ee8:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 8008eea:	197b      	adds	r3, r7, r5
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	021b      	lsls	r3, r3, #8
 8008ef0:	b21a      	sxth	r2, r3
 8008ef2:	0029      	movs	r1, r5
 8008ef4:	197b      	adds	r3, r7, r5
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	0a1b      	lsrs	r3, r3, #8
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b21a      	sxth	r2, r3
 8008f02:	187b      	adds	r3, r7, r1
 8008f04:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 8008f06:	19bb      	adds	r3, r7, r6
 8008f08:	881b      	ldrh	r3, [r3, #0]
 8008f0a:	3b05      	subs	r3, #5
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	18d3      	adds	r3, r2, r3
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2217      	movs	r2, #23
 8008f14:	18ba      	adds	r2, r7, r2
 8008f16:	0011      	movs	r1, r2
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f7ff fe31 	bl	8008b80 <ascii_to_value>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	001a      	movs	r2, r3
 8008f22:	2301      	movs	r3, #1
 8008f24:	4053      	eors	r3, r2
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d112      	bne.n	8008f52 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 8008f2c:	19bb      	adds	r3, r7, r6
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	3b04      	subs	r3, #4
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	18d3      	adds	r3, r2, r3
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2216      	movs	r2, #22
 8008f3a:	18ba      	adds	r2, r7, r2
 8008f3c:	0011      	movs	r1, r2
 8008f3e:	0018      	movs	r0, r3
 8008f40:	f7ff fe1e 	bl	8008b80 <ascii_to_value>
 8008f44:	0003      	movs	r3, r0
 8008f46:	001a      	movs	r2, r3
 8008f48:	2301      	movs	r3, #1
 8008f4a:	4053      	eors	r3, r2
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008f52:	4b39      	ldr	r3, [pc, #228]	; (8009038 <astronode_decode_answer_transport+0x31c>)
 8008f54:	0018      	movs	r0, r3
 8008f56:	f7fa f965 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e062      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 8008f5e:	2017      	movs	r0, #23
 8008f60:	183b      	adds	r3, r7, r0
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	031b      	lsls	r3, r3, #12
 8008f68:	b299      	uxth	r1, r3
 8008f6a:	2416      	movs	r4, #22
 8008f6c:	193b      	adds	r3, r7, r4
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	021b      	lsls	r3, r3, #8
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	2318      	movs	r3, #24
 8008f78:	18fb      	adds	r3, r7, r3
 8008f7a:	188a      	adds	r2, r1, r2
 8008f7c:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 8008f7e:	250a      	movs	r5, #10
 8008f80:	197b      	adds	r3, r7, r5
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	3b03      	subs	r3, #3
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	18d3      	adds	r3, r2, r3
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	183a      	adds	r2, r7, r0
 8008f8e:	0011      	movs	r1, r2
 8008f90:	0018      	movs	r0, r3
 8008f92:	f7ff fdf5 	bl	8008b80 <ascii_to_value>
 8008f96:	0003      	movs	r3, r0
 8008f98:	001a      	movs	r2, r3
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4053      	eors	r3, r2
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d111      	bne.n	8008fc8 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 8008fa4:	197b      	adds	r3, r7, r5
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	3b02      	subs	r3, #2
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	193a      	adds	r2, r7, r4
 8008fb2:	0011      	movs	r1, r2
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f7ff fde3 	bl	8008b80 <ascii_to_value>
 8008fba:	0003      	movs	r3, r0
 8008fbc:	001a      	movs	r2, r3
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	4053      	eors	r3, r2
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <astronode_decode_answer_transport+0x31c>)
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f7fa f92a 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e027      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 8008fd4:	2317      	movs	r3, #23
 8008fd6:	18fb      	adds	r3, r7, r3
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	2316      	movs	r3, #22
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	18d3      	adds	r3, r2, r3
 8008fea:	b299      	uxth	r1, r3
 8008fec:	2018      	movs	r0, #24
 8008fee:	183b      	adds	r3, r7, r0
 8008ff0:	183a      	adds	r2, r7, r0
 8008ff2:	8812      	ldrh	r2, [r2, #0]
 8008ff4:	188a      	adds	r2, r1, r2
 8008ff6:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 8008ff8:	183a      	adds	r2, r7, r0
 8008ffa:	231a      	movs	r3, #26
 8008ffc:	18fb      	adds	r3, r7, r3
 8008ffe:	8812      	ldrh	r2, [r2, #0]
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d005      	beq.n	8009012 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 8009006:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <astronode_decode_answer_transport+0x324>)
 8009008:	0018      	movs	r0, r3
 800900a:	f7fa f90b 	bl	8003224 <send_debug_logs>
        return RS_FAILURE;
 800900e:	2300      	movs	r3, #0
 8009010:	e008      	b.n	8009024 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	2bff      	cmp	r3, #255	; 0xff
 8009018:	d103      	bne.n	8009022 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	0018      	movs	r0, r3
 800901e:	f000 f8c3 	bl	80091a8 <check_for_error>
    }

    return RS_SUCCESS;
 8009022:	2301      	movs	r3, #1
}
 8009024:	0018      	movs	r0, r3
 8009026:	46bd      	mov	sp, r7
 8009028:	b009      	add	sp, #36	; 0x24
 800902a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902c:	08013b78 	.word	0x08013b78
 8009030:	08013bc8 	.word	0x08013bc8
 8009034:	08013c18 	.word	0x08013c18
 8009038:	08013c68 	.word	0x08013c68
 800903c:	0000ffff 	.word	0x0000ffff
 8009040:	08013cb4 	.word	0x08013cb4

08009044 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 8009044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009046:	4c2b      	ldr	r4, [pc, #172]	; (80090f4 <astronode_transport_send_receive+0xb0>)
 8009048:	44a5      	add	sp, r4
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 8009050:	4b29      	ldr	r3, [pc, #164]	; (80090f8 <astronode_transport_send_receive+0xb4>)
 8009052:	25ca      	movs	r5, #202	; 0xca
 8009054:	00ad      	lsls	r5, r5, #2
 8009056:	195b      	adds	r3, r3, r5
 8009058:	19db      	adds	r3, r3, r7
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	3304      	adds	r3, #4
 8009060:	22c4      	movs	r2, #196	; 0xc4
 8009062:	0052      	lsls	r2, r2, #1
 8009064:	2100      	movs	r1, #0
 8009066:	0018      	movs	r0, r3
 8009068:	f002 ff42 	bl	800bef0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800906c:	4b23      	ldr	r3, [pc, #140]	; (80090fc <astronode_transport_send_receive+0xb8>)
 800906e:	195b      	adds	r3, r3, r5
 8009070:	19db      	adds	r3, r3, r7
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	3304      	adds	r3, #4
 8009078:	22c4      	movs	r2, #196	; 0xc4
 800907a:	0052      	lsls	r2, r2, #1
 800907c:	2100      	movs	r1, #0
 800907e:	0018      	movs	r0, r3
 8009080:	f002 ff36 	bl	800bef0 <memset>
    uint16_t answer_length =  0;
 8009084:	4b1e      	ldr	r3, [pc, #120]	; (8009100 <astronode_transport_send_receive+0xbc>)
 8009086:	195b      	adds	r3, r3, r5
 8009088:	19db      	adds	r3, r3, r7
 800908a:	2200      	movs	r2, #0
 800908c:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800908e:	4e1d      	ldr	r6, [pc, #116]	; (8009104 <astronode_transport_send_receive+0xc0>)
 8009090:	19bc      	adds	r4, r7, r6
 8009092:	23cc      	movs	r3, #204	; 0xcc
 8009094:	005b      	lsls	r3, r3, #1
 8009096:	18fa      	adds	r2, r7, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0011      	movs	r1, r2
 800909c:	0018      	movs	r0, r3
 800909e:	f7ff fd9b 	bl	8008bd8 <astronode_create_request_transport>
 80090a2:	0003      	movs	r3, r0
 80090a4:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 80090a6:	19bb      	adds	r3, r7, r6
 80090a8:	881a      	ldrh	r2, [r3, #0]
 80090aa:	23cc      	movs	r3, #204	; 0xcc
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	18fb      	adds	r3, r7, r3
 80090b0:	0011      	movs	r1, r2
 80090b2:	0018      	movs	r0, r3
 80090b4:	f7fa fa1c 	bl	80034f0 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 80090b8:	230a      	movs	r3, #10
 80090ba:	18fa      	adds	r2, r7, r3
 80090bc:	240c      	movs	r4, #12
 80090be:	193b      	adds	r3, r7, r4
 80090c0:	0011      	movs	r1, r2
 80090c2:	0018      	movs	r0, r3
 80090c4:	f000 f92c 	bl	8009320 <receive_astronode_answer>
 80090c8:	0003      	movs	r3, r0
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d10a      	bne.n	80090e4 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 80090ce:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <astronode_transport_send_receive+0xbc>)
 80090d0:	195b      	adds	r3, r3, r5
 80090d2:	19db      	adds	r3, r3, r7
 80090d4:	8819      	ldrh	r1, [r3, #0]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	193b      	adds	r3, r7, r4
 80090da:	0018      	movs	r0, r3
 80090dc:	f7ff fe1e 	bl	8008d1c <astronode_decode_answer_transport>
 80090e0:	0003      	movs	r3, r0
 80090e2:	e000      	b.n	80090e6 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 80090e4:	2300      	movs	r3, #0
    }
}
 80090e6:	0018      	movs	r0, r3
 80090e8:	46bd      	mov	sp, r7
 80090ea:	23cb      	movs	r3, #203	; 0xcb
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	449d      	add	sp, r3
 80090f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	fffffcd4 	.word	0xfffffcd4
 80090f8:	fffffe70 	.word	0xfffffe70
 80090fc:	fffffce4 	.word	0xfffffce4
 8009100:	fffffce2 	.word	0xfffffce2
 8009104:	00000326 	.word	0x00000326

08009108 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	0008      	movs	r0, r1
 8009112:	0011      	movs	r1, r2
 8009114:	1cbb      	adds	r3, r7, #2
 8009116:	1c02      	adds	r2, r0, #0
 8009118:	801a      	strh	r2, [r3, #0]
 800911a:	003b      	movs	r3, r7
 800911c:	1c0a      	adds	r2, r1, #0
 800911e:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 8009120:	230e      	movs	r3, #14
 8009122:	18fb      	adds	r3, r7, r3
 8009124:	003a      	movs	r2, r7
 8009126:	8812      	ldrh	r2, [r2, #0]
 8009128:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800912a:	e02e      	b.n	800918a <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800912c:	240e      	movs	r4, #14
 800912e:	193b      	adds	r3, r7, r4
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	0a1b      	lsrs	r3, r3, #8
 8009134:	b299      	uxth	r1, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	1c5a      	adds	r2, r3, #1
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	b29a      	uxth	r2, r3
 8009140:	200c      	movs	r0, #12
 8009142:	183b      	adds	r3, r7, r0
 8009144:	404a      	eors	r2, r1
 8009146:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 8009148:	183b      	adds	r3, r7, r0
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	091b      	lsrs	r3, r3, #4
 800914e:	b299      	uxth	r1, r3
 8009150:	183b      	adds	r3, r7, r0
 8009152:	183a      	adds	r2, r7, r0
 8009154:	8812      	ldrh	r2, [r2, #0]
 8009156:	404a      	eors	r2, r1
 8009158:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800915a:	0021      	movs	r1, r4
 800915c:	187b      	adds	r3, r7, r1
 800915e:	881b      	ldrh	r3, [r3, #0]
 8009160:	021b      	lsls	r3, r3, #8
 8009162:	b21a      	sxth	r2, r3
 8009164:	183b      	adds	r3, r7, r0
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	031b      	lsls	r3, r3, #12
 800916a:	b21b      	sxth	r3, r3
 800916c:	4053      	eors	r3, r2
 800916e:	b21a      	sxth	r2, r3
 8009170:	183b      	adds	r3, r7, r0
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	015b      	lsls	r3, r3, #5
 8009176:	b21b      	sxth	r3, r3
 8009178:	4053      	eors	r3, r2
 800917a:	b21a      	sxth	r2, r3
 800917c:	183b      	adds	r3, r7, r0
 800917e:	2000      	movs	r0, #0
 8009180:	5e1b      	ldrsh	r3, [r3, r0]
 8009182:	4053      	eors	r3, r2
 8009184:	b21a      	sxth	r2, r3
 8009186:	187b      	adds	r3, r7, r1
 8009188:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800918a:	1cbb      	adds	r3, r7, #2
 800918c:	881b      	ldrh	r3, [r3, #0]
 800918e:	1cba      	adds	r2, r7, #2
 8009190:	1e59      	subs	r1, r3, #1
 8009192:	8011      	strh	r1, [r2, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1c9      	bne.n	800912c <calculate_crc+0x24>
    }
    return crc;
 8009198:	230e      	movs	r3, #14
 800919a:	18fb      	adds	r3, r7, r3
 800919c:	881b      	ldrh	r3, [r3, #0]
}
 800919e:	0018      	movs	r0, r3
 80091a0:	46bd      	mov	sp, r7
 80091a2:	b005      	add	sp, #20
 80091a4:	bd90      	pop	{r4, r7, pc}
	...

080091a8 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	b299      	uxth	r1, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	789b      	ldrb	r3, [r3, #2]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	b29a      	uxth	r2, r3
 80091c0:	200e      	movs	r0, #14
 80091c2:	183b      	adds	r3, r7, r0
 80091c4:	188a      	adds	r2, r1, r2
 80091c6:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 80091c8:	183b      	adds	r3, r7, r0
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	4a40      	ldr	r2, [pc, #256]	; (80092d0 <check_for_error+0x128>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d100      	bne.n	80091d4 <check_for_error+0x2c>
 80091d2:	e06f      	b.n	80092b4 <check_for_error+0x10c>
 80091d4:	4a3e      	ldr	r2, [pc, #248]	; (80092d0 <check_for_error+0x128>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	dd00      	ble.n	80091dc <check_for_error+0x34>
 80091da:	e070      	b.n	80092be <check_for_error+0x116>
 80091dc:	4a3d      	ldr	r2, [pc, #244]	; (80092d4 <check_for_error+0x12c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d100      	bne.n	80091e4 <check_for_error+0x3c>
 80091e2:	e062      	b.n	80092aa <check_for_error+0x102>
 80091e4:	4a3b      	ldr	r2, [pc, #236]	; (80092d4 <check_for_error+0x12c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	dd00      	ble.n	80091ec <check_for_error+0x44>
 80091ea:	e068      	b.n	80092be <check_for_error+0x116>
 80091ec:	4a3a      	ldr	r2, [pc, #232]	; (80092d8 <check_for_error+0x130>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d056      	beq.n	80092a0 <check_for_error+0xf8>
 80091f2:	4a39      	ldr	r2, [pc, #228]	; (80092d8 <check_for_error+0x130>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	dd00      	ble.n	80091fa <check_for_error+0x52>
 80091f8:	e061      	b.n	80092be <check_for_error+0x116>
 80091fa:	4a38      	ldr	r2, [pc, #224]	; (80092dc <check_for_error+0x134>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d04a      	beq.n	8009296 <check_for_error+0xee>
 8009200:	4a36      	ldr	r2, [pc, #216]	; (80092dc <check_for_error+0x134>)
 8009202:	4293      	cmp	r3, r2
 8009204:	dc5b      	bgt.n	80092be <check_for_error+0x116>
 8009206:	4a36      	ldr	r2, [pc, #216]	; (80092e0 <check_for_error+0x138>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d03f      	beq.n	800928c <check_for_error+0xe4>
 800920c:	4a34      	ldr	r2, [pc, #208]	; (80092e0 <check_for_error+0x138>)
 800920e:	4293      	cmp	r3, r2
 8009210:	dc55      	bgt.n	80092be <check_for_error+0x116>
 8009212:	4a34      	ldr	r2, [pc, #208]	; (80092e4 <check_for_error+0x13c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d034      	beq.n	8009282 <check_for_error+0xda>
 8009218:	4a32      	ldr	r2, [pc, #200]	; (80092e4 <check_for_error+0x13c>)
 800921a:	4293      	cmp	r3, r2
 800921c:	dc4f      	bgt.n	80092be <check_for_error+0x116>
 800921e:	4a32      	ldr	r2, [pc, #200]	; (80092e8 <check_for_error+0x140>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d029      	beq.n	8009278 <check_for_error+0xd0>
 8009224:	4a30      	ldr	r2, [pc, #192]	; (80092e8 <check_for_error+0x140>)
 8009226:	4293      	cmp	r3, r2
 8009228:	dc49      	bgt.n	80092be <check_for_error+0x116>
 800922a:	4a30      	ldr	r2, [pc, #192]	; (80092ec <check_for_error+0x144>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d01e      	beq.n	800926e <check_for_error+0xc6>
 8009230:	4a2e      	ldr	r2, [pc, #184]	; (80092ec <check_for_error+0x144>)
 8009232:	4293      	cmp	r3, r2
 8009234:	dc43      	bgt.n	80092be <check_for_error+0x116>
 8009236:	2222      	movs	r2, #34	; 0x22
 8009238:	32ff      	adds	r2, #255	; 0xff
 800923a:	4293      	cmp	r3, r2
 800923c:	d012      	beq.n	8009264 <check_for_error+0xbc>
 800923e:	2291      	movs	r2, #145	; 0x91
 8009240:	0052      	lsls	r2, r2, #1
 8009242:	4293      	cmp	r3, r2
 8009244:	da3b      	bge.n	80092be <check_for_error+0x116>
 8009246:	2b01      	cmp	r3, #1
 8009248:	d002      	beq.n	8009250 <check_for_error+0xa8>
 800924a:	2b11      	cmp	r3, #17
 800924c:	d005      	beq.n	800925a <check_for_error+0xb2>
 800924e:	e036      	b.n	80092be <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 8009250:	4b27      	ldr	r3, [pc, #156]	; (80092f0 <check_for_error+0x148>)
 8009252:	0018      	movs	r0, r3
 8009254:	f7f9 ffe6 	bl	8003224 <send_debug_logs>
            break;
 8009258:	e036      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800925a:	4b26      	ldr	r3, [pc, #152]	; (80092f4 <check_for_error+0x14c>)
 800925c:	0018      	movs	r0, r3
 800925e:	f7f9 ffe1 	bl	8003224 <send_debug_logs>
            break;
 8009262:	e031      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 8009264:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <check_for_error+0x150>)
 8009266:	0018      	movs	r0, r3
 8009268:	f7f9 ffdc 	bl	8003224 <send_debug_logs>
            break;
 800926c:	e02c      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800926e:	4b23      	ldr	r3, [pc, #140]	; (80092fc <check_for_error+0x154>)
 8009270:	0018      	movs	r0, r3
 8009272:	f7f9 ffd7 	bl	8003224 <send_debug_logs>
            break;
 8009276:	e027      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 8009278:	4b21      	ldr	r3, [pc, #132]	; (8009300 <check_for_error+0x158>)
 800927a:	0018      	movs	r0, r3
 800927c:	f7f9 ffd2 	bl	8003224 <send_debug_logs>
            break;
 8009280:	e022      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 8009282:	4b20      	ldr	r3, [pc, #128]	; (8009304 <check_for_error+0x15c>)
 8009284:	0018      	movs	r0, r3
 8009286:	f7f9 ffcd 	bl	8003224 <send_debug_logs>
            break;
 800928a:	e01d      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800928c:	4b1e      	ldr	r3, [pc, #120]	; (8009308 <check_for_error+0x160>)
 800928e:	0018      	movs	r0, r3
 8009290:	f7f9 ffc8 	bl	8003224 <send_debug_logs>
            break;
 8009294:	e018      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 8009296:	4b1d      	ldr	r3, [pc, #116]	; (800930c <check_for_error+0x164>)
 8009298:	0018      	movs	r0, r3
 800929a:	f7f9 ffc3 	bl	8003224 <send_debug_logs>
            break;
 800929e:	e013      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 80092a0:	4b1b      	ldr	r3, [pc, #108]	; (8009310 <check_for_error+0x168>)
 80092a2:	0018      	movs	r0, r3
 80092a4:	f7f9 ffbe 	bl	8003224 <send_debug_logs>
            break;
 80092a8:	e00e      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 80092aa:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <check_for_error+0x16c>)
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7f9 ffb9 	bl	8003224 <send_debug_logs>
            break;
 80092b2:	e009      	b.n	80092c8 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 80092b4:	4b18      	ldr	r3, [pc, #96]	; (8009318 <check_for_error+0x170>)
 80092b6:	0018      	movs	r0, r3
 80092b8:	f7f9 ffb4 	bl	8003224 <send_debug_logs>
            break;
 80092bc:	e004      	b.n	80092c8 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 80092be:	4b17      	ldr	r3, [pc, #92]	; (800931c <check_for_error+0x174>)
 80092c0:	0018      	movs	r0, r3
 80092c2:	f7f9 ffaf 	bl	8003224 <send_debug_logs>
            break;
 80092c6:	46c0      	nop			; (mov r8, r8)
    }
}
 80092c8:	46c0      	nop			; (mov r8, r8)
 80092ca:	46bd      	mov	sp, r7
 80092cc:	b004      	add	sp, #16
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	00004601 	.word	0x00004601
 80092d4:	00004501 	.word	0x00004501
 80092d8:	00003501 	.word	0x00003501
 80092dc:	00002601 	.word	0x00002601
 80092e0:	00002511 	.word	0x00002511
 80092e4:	00002501 	.word	0x00002501
 80092e8:	00000611 	.word	0x00000611
 80092ec:	00000601 	.word	0x00000601
 80092f0:	08013cf8 	.word	0x08013cf8
 80092f4:	08013d44 	.word	0x08013d44
 80092f8:	08013da8 	.word	0x08013da8
 80092fc:	08013de0 	.word	0x08013de0
 8009300:	08013e84 	.word	0x08013e84
 8009304:	08013eec 	.word	0x08013eec
 8009308:	08013f4c 	.word	0x08013f4c
 800930c:	08013fd8 	.word	0x08013fd8
 8009310:	08014038 	.word	0x08014038
 8009314:	080140e4 	.word	0x080140e4
 8009318:	08014130 	.word	0x08014130
 800931c:	08014178 	.word	0x08014178

08009320 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 8009320:	b5b0      	push	{r4, r5, r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800932a:	230f      	movs	r3, #15
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	2200      	movs	r2, #0
 8009330:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 8009332:	2316      	movs	r3, #22
 8009334:	18fb      	adds	r3, r7, r3
 8009336:	2200      	movs	r2, #0
 8009338:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800933a:	f7fa f8f7 	bl	800352c <get_systick>
 800933e:	0003      	movs	r3, r0
 8009340:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 8009342:	2315      	movs	r3, #21
 8009344:	18fb      	adds	r3, r7, r3
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800934a:	e054      	b.n	80093f6 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800934c:	4a34      	ldr	r2, [pc, #208]	; (8009420 <receive_astronode_answer+0x100>)
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	0011      	movs	r1, r2
 8009352:	0018      	movs	r0, r3
 8009354:	f7fa f8f2 	bl	800353c <is_systick_timeout_over>
 8009358:	1e03      	subs	r3, r0, #0
 800935a:	d005      	beq.n	8009368 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800935c:	4b31      	ldr	r3, [pc, #196]	; (8009424 <receive_astronode_answer+0x104>)
 800935e:	0018      	movs	r0, r3
 8009360:	f7f9 ff60 	bl	8003224 <send_debug_logs>
            return RS_FAILURE;
 8009364:	2300      	movs	r3, #0
 8009366:	e057      	b.n	8009418 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 8009368:	250f      	movs	r5, #15
 800936a:	197b      	adds	r3, r7, r5
 800936c:	0018      	movs	r0, r3
 800936e:	f7fa f8fb 	bl	8003568 <is_astronode_character_received>
 8009372:	0003      	movs	r3, r0
 8009374:	0019      	movs	r1, r3
 8009376:	2016      	movs	r0, #22
 8009378:	183b      	adds	r3, r7, r0
 800937a:	183a      	adds	r2, r7, r0
 800937c:	8812      	ldrh	r2, [r2, #0]
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	2415      	movs	r4, #21
 8009382:	193b      	adds	r3, r7, r4
 8009384:	193a      	adds	r2, r7, r4
 8009386:	7812      	ldrb	r2, [r2, #0]
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	2900      	cmp	r1, #0
 800938c:	d033      	beq.n	80093f6 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800938e:	197b      	adds	r3, r7, r5
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d105      	bne.n	80093a2 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 8009396:	193b      	adds	r3, r7, r4
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800939c:	183b      	adds	r3, r7, r0
 800939e:	2200      	movs	r2, #0
 80093a0:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 80093a2:	2116      	movs	r1, #22
 80093a4:	187b      	adds	r3, r7, r1
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	18d3      	adds	r3, r2, r3
 80093ac:	220f      	movs	r2, #15
 80093ae:	18ba      	adds	r2, r7, r2
 80093b0:	7812      	ldrb	r2, [r2, #0]
 80093b2:	701a      	strb	r2, [r3, #0]
            length++;
 80093b4:	187b      	adds	r3, r7, r1
 80093b6:	881a      	ldrh	r2, [r3, #0]
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	3201      	adds	r2, #1
 80093bc:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 80093be:	187b      	adds	r3, r7, r1
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	2bb2      	cmp	r3, #178	; 0xb2
 80093c4:	d905      	bls.n	80093d2 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 80093c6:	4b18      	ldr	r3, [pc, #96]	; (8009428 <receive_astronode_answer+0x108>)
 80093c8:	0018      	movs	r0, r3
 80093ca:	f7f9 ff2b 	bl	8003224 <send_debug_logs>
                return RS_FAILURE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e022      	b.n	8009418 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 80093d2:	230f      	movs	r3, #15
 80093d4:	18fb      	adds	r3, r7, r3
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d10c      	bne.n	80093f6 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 80093dc:	2216      	movs	r2, #22
 80093de:	18bb      	adds	r3, r7, r2
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d907      	bls.n	80093f6 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	18ba      	adds	r2, r7, r2
 80093ea:	8812      	ldrh	r2, [r2, #0]
 80093ec:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 80093ee:	2315      	movs	r3, #21
 80093f0:	18fb      	adds	r3, r7, r3
 80093f2:	2201      	movs	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 80093f6:	2315      	movs	r3, #21
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2201      	movs	r2, #1
 80093fe:	4053      	eors	r3, r2
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1a2      	bne.n	800934c <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <receive_astronode_answer+0x10c>)
 8009408:	0018      	movs	r0, r3
 800940a:	f7f9 ff0b 	bl	8003224 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	0018      	movs	r0, r3
 8009412:	f7f9 ff07 	bl	8003224 <send_debug_logs>

    return RS_SUCCESS;
 8009416:	2301      	movs	r3, #1
}
 8009418:	0018      	movs	r0, r3
 800941a:	46bd      	mov	sp, r7
 800941c:	b006      	add	sp, #24
 800941e:	bdb0      	pop	{r4, r5, r7, pc}
 8009420:	000005dc 	.word	0x000005dc
 8009424:	0801419c 	.word	0x0801419c
 8009428:	080141c0 	.word	0x080141c0
 800942c:	0801420c 	.word	0x0801420c

08009430 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	0002      	movs	r2, r0
 8009438:	6039      	str	r1, [r7, #0]
 800943a:	1dfb      	adds	r3, r7, #7
 800943c:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800943e:	1dfb      	adds	r3, r7, #7
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	091b      	lsrs	r3, r3, #4
 8009444:	b2db      	uxtb	r3, r3
 8009446:	001a      	movs	r2, r3
 8009448:	4b08      	ldr	r3, [pc, #32]	; (800946c <uint8_to_ascii_buffer+0x3c>)
 800944a:	5c9a      	ldrb	r2, [r3, r2]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 8009450:	1dfb      	adds	r3, r7, #7
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	220f      	movs	r2, #15
 8009456:	401a      	ands	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	3301      	adds	r3, #1
 800945c:	4903      	ldr	r1, [pc, #12]	; (800946c <uint8_to_ascii_buffer+0x3c>)
 800945e:	5c8a      	ldrb	r2, [r1, r2]
 8009460:	701a      	strb	r2, [r3, #0]
}
 8009462:	46c0      	nop			; (mov r8, r8)
 8009464:	46bd      	mov	sp, r7
 8009466:	b002      	add	sp, #8
 8009468:	bd80      	pop	{r7, pc}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	08014540 	.word	0x08014540

08009470 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 8009470:	b590      	push	{r4, r7, lr}
 8009472:	b087      	sub	sp, #28
 8009474:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 8009476:	1dfb      	adds	r3, r7, #7
 8009478:	2200      	movs	r2, #0
 800947a:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800947c:	e012      	b.n	80094a4 <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800947e:	f7fa f81d 	bl	80034bc <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 8009482:	1dfc      	adds	r4, r7, #7
 8009484:	2300      	movs	r3, #0
 8009486:	9303      	str	r3, [sp, #12]
 8009488:	2301      	movs	r3, #1
 800948a:	9302      	str	r3, [sp, #8]
 800948c:	2301      	movs	r3, #1
 800948e:	9301      	str	r3, [sp, #4]
 8009490:	2301      	movs	r3, #1
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2300      	movs	r3, #0
 8009496:	2201      	movs	r2, #1
 8009498:	2101      	movs	r1, #1
 800949a:	2001      	movs	r0, #1
 800949c:	f7fe fb64 	bl	8007b68 <astronode_send_cfg_wr>
 80094a0:	0003      	movs	r3, r0
 80094a2:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 80094a4:	1dfb      	adds	r3, r7, #7
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2201      	movs	r2, #1
 80094aa:	4053      	eors	r3, r2
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e5      	bne.n	800947e <my_astro_init+0xe>
	}

	if ( cfg_wr )
 80094b2:	1dfb      	adds	r3, r7, #7
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00d      	beq.n	80094d6 <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 80094ba:	f7fe ffbb 	bl	8008434 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 80094be:	f7fe fb1b 	bl	8007af8 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 80094c2:	f7ff f8b1 	bl	8008628 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 80094c6:	f7fe fca5 	bl	8007e14 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 80094ca:	f7fe fbf9 	bl	8007cc0 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 80094ce:	f7fe ff35 	bl	800833c <astronode_send_pld_fr>
		return true ;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <my_astro_init+0x68>
	}
	else
	{
		return false ;
 80094d6:	2300      	movs	r3, #0
	}
}
 80094d8:	0018      	movs	r0, r3
 80094da:	46bd      	mov	sp, r7
 80094dc:	b003      	add	sp, #12
 80094de:	bd90      	pop	{r4, r7, pc}

080094e0 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	0002      	movs	r2, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	1dbb      	adds	r3, r7, #6
 80094ec:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	0018      	movs	r0, r3
 80094f2:	f7f6 fe07 	bl	8000104 <strlen>
 80094f6:	0003      	movs	r3, r0
 80094f8:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2ba0      	cmp	r3, #160	; 0xa0
 80094fe:	d80b      	bhi.n	8009518 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	b29a      	uxth	r2, r3
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	1dbb      	adds	r3, r7, #6
 8009508:	881b      	ldrh	r3, [r3, #0]
 800950a:	0018      	movs	r0, r3
 800950c:	f7fe fe6c 	bl	80081e8 <astronode_send_pld_er>
 8009510:	1e03      	subs	r3, r0, #0
 8009512:	d005      	beq.n	8009520 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 8009514:	2301      	movs	r3, #1
 8009516:	e004      	b.n	8009522 <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 8009518:	4b04      	ldr	r3, [pc, #16]	; (800952c <my_astro_add_payload_2_queue+0x4c>)
 800951a:	0018      	movs	r0, r3
 800951c:	f7f9 fe82 	bl	8003224 <send_debug_logs>
	}
	return false ;
 8009520:	2300      	movs	r3, #0
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b004      	add	sp, #16
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	08014238 	.word	0x08014238

08009530 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <my_astro_handle_evt+0x6c>)
 8009536:	0018      	movs	r0, r3
 8009538:	f7f9 fe74 	bl	8003224 <send_debug_logs>
	astronode_send_evt_rr () ;
 800953c:	f7fe fd14 	bl	8007f68 <astronode_send_evt_rr>
	if (is_sak_available () )
 8009540:	f7ff fb00 	bl	8008b44 <is_sak_available>
 8009544:	1e03      	subs	r3, r0, #0
 8009546:	d007      	beq.n	8009558 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 8009548:	f7fe ffd8 	bl	80084fc <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800954c:	f7ff f82c 	bl	80085a8 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 8009550:	4b13      	ldr	r3, [pc, #76]	; (80095a0 <my_astro_handle_evt+0x70>)
 8009552:	0018      	movs	r0, r3
 8009554:	f7f9 fe66 	bl	8003224 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 8009558:	f7ff fafe 	bl	8008b58 <is_astronode_reset>
 800955c:	1e03      	subs	r3, r0, #0
 800955e:	d005      	beq.n	800956c <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 8009560:	4b10      	ldr	r3, [pc, #64]	; (80095a4 <my_astro_handle_evt+0x74>)
 8009562:	0018      	movs	r0, r3
 8009564:	f7f9 fe5e 	bl	8003224 <send_debug_logs>
	  astronode_send_res_cr () ;
 8009568:	f7fe ff24 	bl	80083b4 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800956c:	f7ff fafe 	bl	8008b6c <is_command_available>
 8009570:	1e03      	subs	r3, r0, #0
 8009572:	d00e      	beq.n	8009592 <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <my_astro_handle_evt+0x78>)
 8009576:	0018      	movs	r0, r3
 8009578:	f7f9 fe54 	bl	8003224 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <my_astro_handle_evt+0x7c>)
 800957e:	0018      	movs	r0, r3
 8009580:	f7ff f93c 	bl	80087fc <astronode_send_cmd_rr>
 8009584:	1e03      	subs	r3, r0, #0
 8009586:	d002      	beq.n	800958e <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 8009588:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <my_astro_handle_evt+0x80>)
 800958a:	2201      	movs	r2, #1
 800958c:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800958e:	f7ff f8f5 	bl	800877c <astronode_send_cmd_cr>
	}
	return true ;
 8009592:	2301      	movs	r3, #1
}
 8009594:	0018      	movs	r0, r3
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	080142a0 	.word	0x080142a0
 80095a0:	080142d4 	.word	0x080142d4
 80095a4:	08014318 	.word	0x08014318
 80095a8:	08014354 	.word	0x08014354
 80095ac:	20000c04 	.word	0x20000c04
 80095b0:	20000c02 	.word	0x20000c02

080095b4 <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	0011      	movs	r1, r2
 80095c4:	0018      	movs	r0, r3
 80095c6:	f7fe fd4f 	bl	8008068 <astronode_send_geo_wr>
}
 80095ca:	46c0      	nop			; (mov r8, r8)
 80095cc:	46bd      	mov	sp, r7
 80095ce:	b002      	add	sp, #8
 80095d0:	bd80      	pop	{r7, pc}
	...

080095d4 <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 80095d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d6:	4ca5      	ldr	r4, [pc, #660]	; (800986c <my_gnss_acq_coordinates+0x298>)
 80095d8:	44a5      	add	sp, r4
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 80095de:	4ba4      	ldr	r3, [pc, #656]	; (8009870 <my_gnss_acq_coordinates+0x29c>)
 80095e0:	18fb      	adds	r3, r7, r3
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 80095e6:	4ba3      	ldr	r3, [pc, #652]	; (8009874 <my_gnss_acq_coordinates+0x2a0>)
 80095e8:	18fb      	adds	r3, r7, r3
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 80095ee:	4ba2      	ldr	r3, [pc, #648]	; (8009878 <my_gnss_acq_coordinates+0x2a4>)
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 80095f6:	4ba1      	ldr	r3, [pc, #644]	; (800987c <my_gnss_acq_coordinates+0x2a8>)
 80095f8:	18fb      	adds	r3, r7, r3
 80095fa:	2200      	movs	r2, #0
 80095fc:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 80095fe:	4ba0      	ldr	r3, [pc, #640]	; (8009880 <my_gnss_acq_coordinates+0x2ac>)
 8009600:	18fb      	adds	r3, r7, r3
 8009602:	2200      	movs	r2, #0
 8009604:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009606:	4b9f      	ldr	r3, [pc, #636]	; (8009884 <my_gnss_acq_coordinates+0x2b0>)
 8009608:	2486      	movs	r4, #134	; 0x86
 800960a:	00a4      	lsls	r4, r4, #2
 800960c:	191b      	adds	r3, r3, r4
 800960e:	19db      	adds	r3, r3, r7
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	3304      	adds	r3, #4
 8009616:	22f6      	movs	r2, #246	; 0xf6
 8009618:	2100      	movs	r1, #0
 800961a:	0018      	movs	r0, r3
 800961c:	f002 fc68 	bl	800bef0 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 8009620:	4b99      	ldr	r3, [pc, #612]	; (8009888 <my_gnss_acq_coordinates+0x2b4>)
 8009622:	191b      	adds	r3, r3, r4
 8009624:	19db      	adds	r3, r3, r7
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
 800962a:	3304      	adds	r3, #4
 800962c:	22f6      	movs	r2, #246	; 0xf6
 800962e:	2100      	movs	r1, #0
 8009630:	0018      	movs	r0, r3
 8009632:	f002 fc5d 	bl	800bef0 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 8009636:	4b95      	ldr	r3, [pc, #596]	; (800988c <my_gnss_acq_coordinates+0x2b8>)
 8009638:	2284      	movs	r2, #132	; 0x84
 800963a:	0092      	lsls	r2, r2, #2
 800963c:	18ba      	adds	r2, r7, r2
 800963e:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 8009640:	4b93      	ldr	r3, [pc, #588]	; (8009890 <my_gnss_acq_coordinates+0x2bc>)
 8009642:	2283      	movs	r2, #131	; 0x83
 8009644:	0092      	lsls	r2, r2, #2
 8009646:	18ba      	adds	r2, r7, r2
 8009648:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800964a:	4b92      	ldr	r3, [pc, #584]	; (8009894 <my_gnss_acq_coordinates+0x2c0>)
 800964c:	2282      	movs	r2, #130	; 0x82
 800964e:	0092      	lsls	r2, r2, #2
 8009650:	18ba      	adds	r2, r7, r2
 8009652:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 8009654:	4b90      	ldr	r3, [pc, #576]	; (8009898 <my_gnss_acq_coordinates+0x2c4>)
 8009656:	2281      	movs	r2, #129	; 0x81
 8009658:	0092      	lsls	r2, r2, #2
 800965a:	18ba      	adds	r2, r7, r2
 800965c:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2230      	movs	r2, #48	; 0x30
 8009662:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	4b8c      	ldr	r3, [pc, #560]	; (800989c <my_gnss_acq_coordinates+0x2c8>)
 800966a:	608a      	str	r2, [r1, #8]
 800966c:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800966e:	f7f9 ffad 	bl	80035cc <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 8009672:	e0c4      	b.n	80097fe <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 8009674:	4c80      	ldr	r4, [pc, #512]	; (8009878 <my_gnss_acq_coordinates+0x2a4>)
 8009676:	193b      	adds	r3, r7, r4
 8009678:	2101      	movs	r1, #1
 800967a:	0018      	movs	r0, r3
 800967c:	f7f9 fefa 	bl	8003474 <my_gnss_receive_byte>
		if ( rx_byte )
 8009680:	0020      	movs	r0, r4
 8009682:	183b      	adds	r3, r7, r0
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	4c7b      	ldr	r4, [pc, #492]	; (8009874 <my_gnss_acq_coordinates+0x2a0>)
 8009688:	193a      	adds	r2, r7, r4
 800968a:	1939      	adds	r1, r7, r4
 800968c:	7809      	ldrb	r1, [r1, #0]
 800968e:	7011      	strb	r1, [r2, #0]
 8009690:	4d7b      	ldr	r5, [pc, #492]	; (8009880 <my_gnss_acq_coordinates+0x2ac>)
 8009692:	197a      	adds	r2, r7, r5
 8009694:	1979      	adds	r1, r7, r5
 8009696:	7809      	ldrb	r1, [r1, #0]
 8009698:	7011      	strb	r1, [r2, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d100      	bne.n	80096a0 <my_gnss_acq_coordinates+0xcc>
 800969e:	e0ae      	b.n	80097fe <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 80096a0:	4b76      	ldr	r3, [pc, #472]	; (800987c <my_gnss_acq_coordinates+0x2a8>)
 80096a2:	18fa      	adds	r2, r7, r3
 80096a4:	2684      	movs	r6, #132	; 0x84
 80096a6:	0076      	lsls	r6, r6, #1
 80096a8:	19b9      	adds	r1, r7, r6
 80096aa:	183b      	adds	r3, r7, r0
 80096ac:	0018      	movs	r0, r3
 80096ae:	f000 fbf9 	bl	8009ea4 <my_nmea_message>
 80096b2:	0001      	movs	r1, r0
 80096b4:	193b      	adds	r3, r7, r4
 80096b6:	193a      	adds	r2, r7, r4
 80096b8:	7812      	ldrb	r2, [r2, #0]
 80096ba:	701a      	strb	r2, [r3, #0]
 80096bc:	197b      	adds	r3, r7, r5
 80096be:	197a      	adds	r2, r7, r5
 80096c0:	7812      	ldrb	r2, [r2, #0]
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	2902      	cmp	r1, #2
 80096c6:	d000      	beq.n	80096ca <my_gnss_acq_coordinates+0xf6>
 80096c8:	e099      	b.n	80097fe <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 80096ca:	19bb      	adds	r3, r7, r6
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 fca9 	bl	800a024 <is_my_nmea_checksum_ok>
 80096d2:	0003      	movs	r3, r0
 80096d4:	0019      	movs	r1, r3
 80096d6:	193b      	adds	r3, r7, r4
 80096d8:	193a      	adds	r2, r7, r4
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	197b      	adds	r3, r7, r5
 80096e0:	197a      	adds	r2, r7, r5
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	701a      	strb	r2, [r3, #0]
 80096e6:	2900      	cmp	r1, #0
 80096e8:	d100      	bne.n	80096ec <my_gnss_acq_coordinates+0x118>
 80096ea:	e088      	b.n	80097fe <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 80096ec:	193b      	adds	r3, r7, r4
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	2201      	movs	r2, #1
 80096f2:	4053      	eors	r3, r2
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d015      	beq.n	8009726 <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7c1b      	ldrb	r3, [r3, #16]
 80096fe:	2b33      	cmp	r3, #51	; 0x33
 8009700:	d111      	bne.n	8009726 <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 8009702:	2383      	movs	r3, #131	; 0x83
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	18fb      	adds	r3, r7, r3
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	19bb      	adds	r3, r7, r6
 800970c:	0011      	movs	r1, r2
 800970e:	0018      	movs	r0, r3
 8009710:	f002 fc29 	bl	800bf66 <strstr>
 8009714:	1e03      	subs	r3, r0, #0
 8009716:	d006      	beq.n	8009726 <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 8009718:	19bb      	adds	r3, r7, r6
 800971a:	0018      	movs	r0, r3
 800971c:	f000 f9a6 	bl	8009a6c <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 8009720:	193b      	adds	r3, r7, r4
 8009722:	2201      	movs	r2, #1
 8009724:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 8009726:	2384      	movs	r3, #132	; 0x84
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	18fb      	adds	r3, r7, r3
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	2484      	movs	r4, #132	; 0x84
 8009730:	0064      	lsls	r4, r4, #1
 8009732:	193b      	adds	r3, r7, r4
 8009734:	0011      	movs	r1, r2
 8009736:	0018      	movs	r0, r3
 8009738:	f002 fc15 	bl	800bf66 <strstr>
 800973c:	1e03      	subs	r3, r0, #0
 800973e:	d012      	beq.n	8009766 <my_gnss_acq_coordinates+0x192>
 8009740:	4d4f      	ldr	r5, [pc, #316]	; (8009880 <my_gnss_acq_coordinates+0x2ac>)
 8009742:	197b      	adds	r3, r7, r5
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d80d      	bhi.n	8009766 <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800974a:	4b55      	ldr	r3, [pc, #340]	; (80098a0 <my_gnss_acq_coordinates+0x2cc>)
 800974c:	881a      	ldrh	r2, [r3, #0]
 800974e:	4b55      	ldr	r3, [pc, #340]	; (80098a4 <my_gnss_acq_coordinates+0x2d0>)
 8009750:	881b      	ldrh	r3, [r3, #0]
 8009752:	429a      	cmp	r2, r3
 8009754:	d85b      	bhi.n	800980e <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 8009756:	193b      	adds	r3, r7, r4
 8009758:	0018      	movs	r0, r3
 800975a:	f000 fe09 	bl	800a370 <my_nmea_get_gsv_tns>
 800975e:	0003      	movs	r3, r0
 8009760:	001a      	movs	r2, r3
 8009762:	197b      	adds	r3, r7, r5
 8009764:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 8009766:	2382      	movs	r3, #130	; 0x82
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	18fb      	adds	r3, r7, r3
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	2484      	movs	r4, #132	; 0x84
 8009770:	0064      	lsls	r4, r4, #1
 8009772:	193b      	adds	r3, r7, r4
 8009774:	0011      	movs	r1, r2
 8009776:	0018      	movs	r0, r3
 8009778:	f002 fbf5 	bl	800bf66 <strstr>
 800977c:	1e03      	subs	r3, r0, #0
 800977e:	d010      	beq.n	80097a2 <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 8009780:	193b      	adds	r3, r7, r4
 8009782:	0018      	movs	r0, r3
 8009784:	f000 fbfa 	bl	8009f7c <get_my_nmea_gngsa_fixed_mode_s>
 8009788:	0003      	movs	r3, r0
 800978a:	001a      	movs	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 8009790:	193b      	adds	r3, r7, r4
 8009792:	0018      	movs	r0, r3
 8009794:	f000 fbfd 	bl	8009f92 <get_my_nmea_gngsa_pdop_d>
 8009798:	0002      	movs	r2, r0
 800979a:	000b      	movs	r3, r1
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	608a      	str	r2, [r1, #8]
 80097a0:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 80097a2:	2381      	movs	r3, #129	; 0x81
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	2384      	movs	r3, #132	; 0x84
 80097ac:	005b      	lsls	r3, r3, #1
 80097ae:	18fb      	adds	r3, r7, r3
 80097b0:	0011      	movs	r1, r2
 80097b2:	0018      	movs	r0, r3
 80097b4:	f002 fbd7 	bl	800bf66 <strstr>
 80097b8:	1e03      	subs	r3, r0, #0
 80097ba:	d020      	beq.n	80097fe <my_gnss_acq_coordinates+0x22a>
 80097bc:	4b2d      	ldr	r3, [pc, #180]	; (8009874 <my_gnss_acq_coordinates+0x2a0>)
 80097be:	18fb      	adds	r3, r7, r3
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d01b      	beq.n	80097fe <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	7c1b      	ldrb	r3, [r3, #16]
 80097ca:	2b33      	cmp	r3, #51	; 0x33
 80097cc:	d121      	bne.n	8009812 <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 80097ce:	4b2e      	ldr	r3, [pc, #184]	; (8009888 <my_gnss_acq_coordinates+0x2b4>)
 80097d0:	2186      	movs	r1, #134	; 0x86
 80097d2:	0089      	lsls	r1, r1, #2
 80097d4:	185b      	adds	r3, r3, r1
 80097d6:	19da      	adds	r2, r3, r7
 80097d8:	4b2a      	ldr	r3, [pc, #168]	; (8009884 <my_gnss_acq_coordinates+0x2b0>)
 80097da:	185b      	adds	r3, r3, r1
 80097dc:	19db      	adds	r3, r3, r7
 80097de:	0010      	movs	r0, r2
 80097e0:	0019      	movs	r1, r3
 80097e2:	23fa      	movs	r3, #250	; 0xfa
 80097e4:	001a      	movs	r2, r3
 80097e6:	f002 fc76 	bl	800c0d6 <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6898      	ldr	r0, [r3, #8]
 80097ee:	68d9      	ldr	r1, [r3, #12]
 80097f0:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <my_gnss_acq_coordinates+0x2d4>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f7f6 fe37 	bl	8000468 <__aeabi_dcmple>
 80097fa:	1e03      	subs	r3, r0, #0
 80097fc:	d10b      	bne.n	8009816 <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 80097fe:	4b28      	ldr	r3, [pc, #160]	; (80098a0 <my_gnss_acq_coordinates+0x2cc>)
 8009800:	881a      	ldrh	r2, [r3, #0]
 8009802:	4b2a      	ldr	r3, [pc, #168]	; (80098ac <my_gnss_acq_coordinates+0x2d8>)
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d200      	bcs.n	800980c <my_gnss_acq_coordinates+0x238>
 800980a:	e733      	b.n	8009674 <my_gnss_acq_coordinates+0xa0>
 800980c:	e004      	b.n	8009818 <my_gnss_acq_coordinates+0x244>
							break ;
 800980e:	46c0      	nop			; (mov r8, r8)
 8009810:	e002      	b.n	8009818 <my_gnss_acq_coordinates+0x244>
							break ;
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	e000      	b.n	8009818 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 8009816:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 8009818:	f7f9 fee8 	bl	80035ec <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800981c:	4b1a      	ldr	r3, [pc, #104]	; (8009888 <my_gnss_acq_coordinates+0x2b4>)
 800981e:	2286      	movs	r2, #134	; 0x86
 8009820:	0092      	lsls	r2, r2, #2
 8009822:	189b      	adds	r3, r3, r2
 8009824:	19db      	adds	r3, r3, r7
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00a      	beq.n	8009842 <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	230c      	movs	r3, #12
 8009830:	18fb      	adds	r3, r7, r3
 8009832:	0011      	movs	r1, r2
 8009834:	0018      	movs	r0, r3
 8009836:	f000 fcb1 	bl	800a19c <my_nmea_get_gngll_coordinates>
		r = true ;
 800983a:	4b0d      	ldr	r3, [pc, #52]	; (8009870 <my_gnss_acq_coordinates+0x29c>)
 800983c:	18fb      	adds	r3, r7, r3
 800983e:	2201      	movs	r2, #1
 8009840:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <my_gnss_acq_coordinates+0x2cc>)
 8009844:	881a      	ldrh	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <my_gnss_acq_coordinates+0x2cc>)
 8009850:	8812      	ldrh	r2, [r2, #0]
 8009852:	189a      	adds	r2, r3, r2
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	615a      	str	r2, [r3, #20]
	return r ;
 8009858:	4b05      	ldr	r3, [pc, #20]	; (8009870 <my_gnss_acq_coordinates+0x29c>)
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	781b      	ldrb	r3, [r3, #0]
}
 800985e:	0018      	movs	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	2387      	movs	r3, #135	; 0x87
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	449d      	add	sp, r3
 8009868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800986a:	46c0      	nop			; (mov r8, r8)
 800986c:	fffffde4 	.word	0xfffffde4
 8009870:	00000217 	.word	0x00000217
 8009874:	00000216 	.word	0x00000216
 8009878:	00000203 	.word	0x00000203
 800987c:	00000202 	.word	0x00000202
 8009880:	00000215 	.word	0x00000215
 8009884:	fffffef0 	.word	0xfffffef0
 8009888:	fffffdf4 	.word	0xfffffdf4
 800988c:	08014394 	.word	0x08014394
 8009890:	0801439c 	.word	0x0801439c
 8009894:	080143a4 	.word	0x080143a4
 8009898:	080143ac 	.word	0x080143ac
 800989c:	408f4000 	.word	0x408f4000
 80098a0:	20000c2c 	.word	0x20000c2c
 80098a4:	20000018 	.word	0x20000018
 80098a8:	20000020 	.word	0x20000020
 80098ac:	20000016 	.word	0x20000016

080098b0 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4b07      	ldr	r3, [pc, #28]	; (80098dc <my_rtc_get_dt+0x2c>)
 80098be:	2200      	movs	r2, #0
 80098c0:	0018      	movs	r0, r3
 80098c2:	f7fc f939 	bl	8005b38 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 80098c6:	6839      	ldr	r1, [r7, #0]
 80098c8:	4b04      	ldr	r3, [pc, #16]	; (80098dc <my_rtc_get_dt+0x2c>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	0018      	movs	r0, r3
 80098ce:	f7fc f845 	bl	800595c <HAL_RTC_GetTime>
}
 80098d2:	46c0      	nop			; (mov r8, r8)
 80098d4:	46bd      	mov	sp, r7
 80098d6:	b002      	add	sp, #8
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	46c0      	nop			; (mov r8, r8)
 80098dc:	200006f4 	.word	0x200006f4

080098e0 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 80098e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098e2:	b08d      	sub	sp, #52	; 0x34
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 80098e8:	2508      	movs	r5, #8
 80098ea:	1979      	adds	r1, r7, r5
 80098ec:	4b1b      	ldr	r3, [pc, #108]	; (800995c <my_rtc_get_dt_s+0x7c>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	0018      	movs	r0, r3
 80098f2:	f7fc f833 	bl	800595c <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 80098f6:	241c      	movs	r4, #28
 80098f8:	1939      	adds	r1, r7, r4
 80098fa:	4b18      	ldr	r3, [pc, #96]	; (800995c <my_rtc_get_dt_s+0x7c>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	0018      	movs	r0, r3
 8009900:	f7fc f91a 	bl	8005b38 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 8009904:	0021      	movs	r1, r4
 8009906:	187b      	adds	r3, r7, r1
 8009908:	78db      	ldrb	r3, [r3, #3]
 800990a:	22fa      	movs	r2, #250	; 0xfa
 800990c:	00d2      	lsls	r2, r2, #3
 800990e:	189a      	adds	r2, r3, r2
 8009910:	187b      	adds	r3, r7, r1
 8009912:	785b      	ldrb	r3, [r3, #1]
 8009914:	469c      	mov	ip, r3
 8009916:	187b      	adds	r3, r7, r1
 8009918:	789b      	ldrb	r3, [r3, #2]
 800991a:	001c      	movs	r4, r3
 800991c:	0028      	movs	r0, r5
 800991e:	183b      	adds	r3, r7, r0
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	001d      	movs	r5, r3
 8009924:	183b      	adds	r3, r7, r0
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	001e      	movs	r6, r3
 800992a:	183b      	adds	r3, r7, r0
 800992c:	789b      	ldrb	r3, [r3, #2]
 800992e:	490c      	ldr	r1, [pc, #48]	; (8009960 <my_rtc_get_dt_s+0x80>)
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	9602      	str	r6, [sp, #8]
 8009936:	9501      	str	r5, [sp, #4]
 8009938:	9400      	str	r4, [sp, #0]
 800993a:	4663      	mov	r3, ip
 800993c:	f002 fa42 	bl	800bdc4 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 8009940:	211c      	movs	r1, #28
 8009942:	187b      	adds	r3, r7, r1
 8009944:	78db      	ldrb	r3, [r3, #3]
 8009946:	b29b      	uxth	r3, r3
 8009948:	22fa      	movs	r2, #250	; 0xfa
 800994a:	00d2      	lsls	r2, r2, #3
 800994c:	4694      	mov	ip, r2
 800994e:	4463      	add	r3, ip
 8009950:	b29b      	uxth	r3, r3
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b009      	add	sp, #36	; 0x24
 8009958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	200006f4 	.word	0x200006f4
 8009960:	080143fc 	.word	0x080143fc

08009964 <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 8009964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009966:	b0a9      	sub	sp, #164	; 0xa4
 8009968:	af02      	add	r7, sp, #8
 800996a:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800996c:	2434      	movs	r4, #52	; 0x34
 800996e:	193a      	adds	r2, r7, r4
 8009970:	2548      	movs	r5, #72	; 0x48
 8009972:	197b      	adds	r3, r7, r5
 8009974:	0011      	movs	r1, r2
 8009976:	0018      	movs	r0, r3
 8009978:	f7ff ff9a 	bl	80098b0 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 800997c:	2680      	movs	r6, #128	; 0x80
 800997e:	19bb      	adds	r3, r7, r6
 8009980:	0018      	movs	r0, r3
 8009982:	f7ff ffad 	bl	80098e0 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009986:	4a36      	ldr	r2, [pc, #216]	; (8009a60 <my_rtc_set_alarm+0xfc>)
 8009988:	4936      	ldr	r1, [pc, #216]	; (8009a64 <my_rtc_set_alarm+0x100>)
 800998a:	234c      	movs	r3, #76	; 0x4c
 800998c:	18f8      	adds	r0, r7, r3
 800998e:	19bb      	adds	r3, r7, r6
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	232d      	movs	r3, #45	; 0x2d
 8009994:	f002 fa16 	bl	800bdc4 <sprintf>
	send_debug_logs ( m ) ;
 8009998:	234c      	movs	r3, #76	; 0x4c
 800999a:	18fb      	adds	r3, r7, r3
 800999c:	0018      	movs	r0, r3
 800999e:	f7f9 fc41 	bl	8003224 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 80099a2:	193a      	adds	r2, r7, r4
 80099a4:	197b      	adds	r3, r7, r5
 80099a6:	0011      	movs	r1, r2
 80099a8:	0018      	movs	r0, r3
 80099aa:	f000 f90d 	bl	8009bc8 <my_conv_rtc2timestamp>
 80099ae:	0002      	movs	r2, r0
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	189b      	adds	r3, r3, r2
 80099b4:	2094      	movs	r0, #148	; 0x94
 80099b6:	183a      	adds	r2, r7, r0
 80099b8:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 80099ba:	193a      	adds	r2, r7, r4
 80099bc:	1979      	adds	r1, r7, r5
 80099be:	1838      	adds	r0, r7, r0
 80099c0:	6803      	ldr	r3, [r0, #0]
 80099c2:	0018      	movs	r0, r3
 80099c4:	f000 f974 	bl	8009cb0 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 80099c8:	193b      	adds	r3, r7, r4
 80099ca:	781a      	ldrb	r2, [r3, #0]
 80099cc:	210c      	movs	r1, #12
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 80099d2:	193b      	adds	r3, r7, r4
 80099d4:	785a      	ldrb	r2, [r3, #1]
 80099d6:	187b      	adds	r3, r7, r1
 80099d8:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 80099da:	193b      	adds	r3, r7, r4
 80099dc:	789a      	ldrb	r2, [r3, #2]
 80099de:	187b      	adds	r3, r7, r1
 80099e0:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 80099e2:	0008      	movs	r0, r1
 80099e4:	183b      	adds	r3, r7, r0
 80099e6:	2200      	movs	r2, #0
 80099e8:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 80099ea:	183b      	adds	r3, r7, r0
 80099ec:	2200      	movs	r2, #0
 80099ee:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 80099f0:	183b      	adds	r3, r7, r0
 80099f2:	2200      	movs	r2, #0
 80099f4:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 80099f6:	183b      	adds	r3, r7, r0
 80099f8:	2200      	movs	r2, #0
 80099fa:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 80099fc:	183b      	adds	r3, r7, r0
 80099fe:	2200      	movs	r2, #0
 8009a00:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 8009a02:	183b      	adds	r3, r7, r0
 8009a04:	2200      	movs	r2, #0
 8009a06:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 8009a08:	197b      	adds	r3, r7, r5
 8009a0a:	7899      	ldrb	r1, [r3, #2]
 8009a0c:	183b      	adds	r3, r7, r0
 8009a0e:	2220      	movs	r2, #32
 8009a10:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 8009a12:	183b      	adds	r3, r7, r0
 8009a14:	2280      	movs	r2, #128	; 0x80
 8009a16:	0052      	lsls	r2, r2, #1
 8009a18:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 8009a1a:	1839      	adds	r1, r7, r0
 8009a1c:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <my_rtc_set_alarm+0x104>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	0018      	movs	r0, r3
 8009a22:	f7fc f8d7 	bl	8005bd4 <HAL_RTC_SetAlarm_IT>
 8009a26:	1e03      	subs	r3, r0, #0
 8009a28:	d114      	bne.n	8009a54 <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 8009a2a:	19ba      	adds	r2, r7, r6
 8009a2c:	1939      	adds	r1, r7, r4
 8009a2e:	197b      	adds	r3, r7, r5
 8009a30:	0018      	movs	r0, r3
 8009a32:	f000 f9ff 	bl	8009e34 <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8009a36:	4a0a      	ldr	r2, [pc, #40]	; (8009a60 <my_rtc_set_alarm+0xfc>)
 8009a38:	490a      	ldr	r1, [pc, #40]	; (8009a64 <my_rtc_set_alarm+0x100>)
 8009a3a:	244c      	movs	r4, #76	; 0x4c
 8009a3c:	1938      	adds	r0, r7, r4
 8009a3e:	19bb      	adds	r3, r7, r6
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	2341      	movs	r3, #65	; 0x41
 8009a44:	f002 f9be 	bl	800bdc4 <sprintf>
		send_debug_logs ( m ) ;
 8009a48:	193b      	adds	r3, r7, r4
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	f7f9 fbea 	bl	8003224 <send_debug_logs>
		return true ;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e000      	b.n	8009a56 <my_rtc_set_alarm+0xf2>
	}
	return false ;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	0018      	movs	r0, r3
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b027      	add	sp, #156	; 0x9c
 8009a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	0801441c 	.word	0x0801441c
 8009a64:	08014438 	.word	0x08014438
 8009a68:	200006f4 	.word	0x200006f4

08009a6c <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 8009a6c:	b5b0      	push	{r4, r5, r7, lr}
 8009a6e:	b088      	sub	sp, #32
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 8009a74:	2508      	movs	r5, #8
 8009a76:	197b      	adds	r3, r7, r5
 8009a78:	1cda      	adds	r2, r3, #3
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	0011      	movs	r1, r2
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f000 fcae 	bl	800a3e0 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 8009a84:	197b      	adds	r3, r7, r5
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	0011      	movs	r1, r2
 8009a8c:	0018      	movs	r0, r3
 8009a8e:	f000 fce1 	bl	800a454 <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 8009a92:	197b      	adds	r3, r7, r5
 8009a94:	1c9a      	adds	r2, r3, #2
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	0011      	movs	r1, r2
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f000 fd14 	bl	800a4c8 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 8009aa0:	240c      	movs	r4, #12
 8009aa2:	193a      	adds	r2, r7, r4
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	0011      	movs	r1, r2
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f000 fd47 	bl	800a53c <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 8009aae:	193b      	adds	r3, r7, r4
 8009ab0:	1c5a      	adds	r2, r3, #1
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	0011      	movs	r1, r2
 8009ab6:	0018      	movs	r0, r3
 8009ab8:	f000 fd7a 	bl	800a5b0 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 8009abc:	193b      	adds	r3, r7, r4
 8009abe:	1c9a      	adds	r2, r3, #2
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	0011      	movs	r1, r2
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f000 fdad 	bl	800a624 <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 8009aca:	193b      	adds	r3, r7, r4
 8009acc:	1d1a      	adds	r2, r3, #4
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	0011      	movs	r1, r2
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f000 fde0 	bl	800a698 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009ad8:	193b      	adds	r3, r7, r4
 8009ada:	2200      	movs	r2, #0
 8009adc:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009ade:	193b      	adds	r3, r7, r4
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 8009ae4:	4b0b      	ldr	r3, [pc, #44]	; (8009b14 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009ae6:	0018      	movs	r0, r3
 8009ae8:	f7fc fae3 	bl	80060b2 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 8009aec:	1939      	adds	r1, r7, r4
 8009aee:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	0018      	movs	r0, r3
 8009af4:	f7fb fe8a 	bl	800580c <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 8009af8:	1979      	adds	r1, r7, r5
 8009afa:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	0018      	movs	r0, r3
 8009b00:	f7fb ff88 	bl	8005a14 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 8009b04:	4b03      	ldr	r3, [pc, #12]	; (8009b14 <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 8009b06:	0018      	movs	r0, r3
 8009b08:	f7fc fb07 	bl	800611a <HAL_RTCEx_DisableBypassShadow>
}
 8009b0c:	46c0      	nop			; (mov r8, r8)
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	b008      	add	sp, #32
 8009b12:	bdb0      	pop	{r4, r5, r7, pc}
 8009b14:	200006f4 	.word	0x200006f4

08009b18 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2100      	movs	r1, #0
 8009b24:	0018      	movs	r0, r3
 8009b26:	f001 ff1f 	bl	800b968 <strtod>
 8009b2a:	0002      	movs	r2, r0
 8009b2c:	000b      	movs	r3, r1
 8009b2e:	60ba      	str	r2, [r7, #8]
 8009b30:	60fb      	str	r3, [r7, #12]
    return d ;
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	68fb      	ldr	r3, [r7, #12]
}
 8009b36:	0010      	movs	r0, r2
 8009b38:	0019      	movs	r1, r3
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	b004      	add	sp, #16
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	0008      	movs	r0, r1
 8009b4a:	0011      	movs	r1, r2
 8009b4c:	1cfb      	adds	r3, r7, #3
 8009b4e:	1c02      	adds	r2, r0, #0
 8009b50:	701a      	strb	r2, [r3, #0]
 8009b52:	1cbb      	adds	r3, r7, #2
 8009b54:	1c0a      	adds	r2, r1, #0
 8009b56:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 8009b58:	230f      	movs	r3, #15
 8009b5a:	18fb      	adds	r3, r7, r3
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 8009b60:	230e      	movs	r3, #14
 8009b62:	18fb      	adds	r3, r7, r3
 8009b64:	2200      	movs	r2, #0
 8009b66:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 8009b68:	e01c      	b.n	8009ba4 <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 8009b6a:	230f      	movs	r3, #15
 8009b6c:	18fb      	adds	r3, r7, r3
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	18d3      	adds	r3, r2, r3
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	1cfa      	adds	r2, r7, #3
 8009b78:	7812      	ldrb	r2, [r2, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d105      	bne.n	8009b8a <my_find_char_position+0x4a>
			p++ ;
 8009b7e:	210e      	movs	r1, #14
 8009b80:	187b      	adds	r3, r7, r1
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	187b      	adds	r3, r7, r1
 8009b86:	3201      	adds	r2, #1
 8009b88:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 8009b8a:	230e      	movs	r3, #14
 8009b8c:	18fa      	adds	r2, r7, r3
 8009b8e:	1cbb      	adds	r3, r7, #2
 8009b90:	7812      	ldrb	r2, [r2, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d00e      	beq.n	8009bb6 <my_find_char_position+0x76>
			break ;
		i++ ;
 8009b98:	210f      	movs	r1, #15
 8009b9a:	187b      	adds	r3, r7, r1
 8009b9c:	781a      	ldrb	r2, [r3, #0]
 8009b9e:	187b      	adds	r3, r7, r1
 8009ba0:	3201      	adds	r2, #1
 8009ba2:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 8009ba4:	230f      	movs	r3, #15
 8009ba6:	18fb      	adds	r3, r7, r3
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	18d3      	adds	r3, r2, r3
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1da      	bne.n	8009b6a <my_find_char_position+0x2a>
 8009bb4:	e000      	b.n	8009bb8 <my_find_char_position+0x78>
			break ;
 8009bb6:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 8009bb8:	230f      	movs	r3, #15
 8009bba:	18fb      	adds	r3, r7, r3
 8009bbc:	781b      	ldrb	r3, [r3, #0]
}
 8009bbe:	0018      	movs	r0, r3
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	b004      	add	sp, #16
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	78db      	ldrb	r3, [r3, #3]
 8009bd6:	22fa      	movs	r2, #250	; 0xfa
 8009bd8:	00d2      	lsls	r2, r2, #3
 8009bda:	4694      	mov	ip, r2
 8009bdc:	4463      	add	r3, ip
 8009bde:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	0013      	movs	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	189b      	adds	r3, r3, r2
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	189b      	adds	r3, r3, r2
 8009bec:	009a      	lsls	r2, r3, #2
 8009bee:	189a      	adds	r2, r3, r2
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	492c      	ldr	r1, [pc, #176]	; (8009ca4 <my_conv_rtc2timestamp+0xdc>)
 8009bf4:	468c      	mov	ip, r1
 8009bf6:	4463      	add	r3, ip
 8009bf8:	089b      	lsrs	r3, r3, #2
 8009bfa:	18d3      	adds	r3, r2, r3
 8009bfc:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <my_conv_rtc2timestamp+0xe0>)
 8009bfe:	4694      	mov	ip, r2
 8009c00:	4463      	add	r3, ip
 8009c02:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009c04:	2300      	movs	r3, #0
 8009c06:	613b      	str	r3, [r7, #16]
 8009c08:	e00a      	b.n	8009c20 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 8009c0a:	4a28      	ldr	r2, [pc, #160]	; (8009cac <my_conv_rtc2timestamp+0xe4>)
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	18d3      	adds	r3, r2, r3
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	001a      	movs	r2, r3
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	189b      	adds	r3, r3, r2
 8009c18:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	613b      	str	r3, [r7, #16]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	3b01      	subs	r3, #1
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	dbee      	blt.n	8009c0a <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	785b      	ldrb	r3, [r3, #1]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d908      	bls.n	8009c46 <my_conv_rtc2timestamp+0x7e>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	0018      	movs	r0, r3
 8009c38:	f000 f8de 	bl	8009df8 <my_conv_is_leap_year>
 8009c3c:	1e03      	subs	r3, r0, #0
 8009c3e:	d002      	beq.n	8009c46 <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	3301      	adds	r3, #1
 8009c44:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	789b      	ldrb	r3, [r3, #2]
 8009c4a:	001a      	movs	r2, r3
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	18d3      	adds	r3, r2, r3
 8009c50:	3b01      	subs	r3, #1
 8009c52:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	0013      	movs	r3, r2
 8009c58:	005b      	lsls	r3, r3, #1
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	011a      	lsls	r2, r3, #4
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	0113      	lsls	r3, r2, #4
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	01db      	lsls	r3, r3, #7
 8009c66:	0019      	movs	r1, r3
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	001a      	movs	r2, r3
 8009c6e:	0013      	movs	r3, r2
 8009c70:	011b      	lsls	r3, r3, #4
 8009c72:	1a9b      	subs	r3, r3, r2
 8009c74:	011a      	lsls	r2, r3, #4
 8009c76:	1ad2      	subs	r2, r2, r3
 8009c78:	0113      	lsls	r3, r2, #4
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	0013      	movs	r3, r2
 8009c7e:	18ca      	adds	r2, r1, r3
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	0019      	movs	r1, r3
 8009c86:	000b      	movs	r3, r1
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	1a5b      	subs	r3, r3, r1
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	18d3      	adds	r3, r2, r3
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	7892      	ldrb	r2, [r2, #2]
 8009c94:	189b      	adds	r3, r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]

    return ts ;
 8009c98:	68bb      	ldr	r3, [r7, #8]
}
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	b006      	add	sp, #24
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	46c0      	nop			; (mov r8, r8)
 8009ca4:	fffff84f 	.word	0xfffff84f
 8009ca8:	fff50736 	.word	0xfff50736
 8009cac:	08014550 	.word	0x08014550

08009cb0 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b08b      	sub	sp, #44	; 0x2c
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	213c      	movs	r1, #60	; 0x3c
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	f7f6 fac1 	bl	8000248 <__aeabi_uidivmod>
 8009cc6:	000b      	movs	r3, r1
 8009cc8:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	213c      	movs	r1, #60	; 0x3c
 8009cce:	0018      	movs	r0, r3
 8009cd0:	f7f6 fa34 	bl	800013c <__udivsi3>
 8009cd4:	0003      	movs	r3, r0
 8009cd6:	213c      	movs	r1, #60	; 0x3c
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f7f6 fab5 	bl	8000248 <__aeabi_uidivmod>
 8009cde:	000b      	movs	r3, r1
 8009ce0:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	22e1      	movs	r2, #225	; 0xe1
 8009ce6:	0111      	lsls	r1, r2, #4
 8009ce8:	0018      	movs	r0, r3
 8009cea:	f7f6 fa27 	bl	800013c <__udivsi3>
 8009cee:	0003      	movs	r3, r0
 8009cf0:	2118      	movs	r1, #24
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7f6 faa8 	bl	8000248 <__aeabi_uidivmod>
 8009cf8:	000b      	movs	r3, r1
 8009cfa:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	493b      	ldr	r1, [pc, #236]	; (8009dec <my_conv_timestamp2rtc+0x13c>)
 8009d00:	0018      	movs	r0, r3
 8009d02:	f7f6 fa1b 	bl	800013c <__udivsi3>
 8009d06:	0003      	movs	r3, r0
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 8009d0a:	4b39      	ldr	r3, [pc, #228]	; (8009df0 <my_conv_timestamp2rtc+0x140>)
 8009d0c:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009d0e:	e00d      	b.n	8009d2c <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	0018      	movs	r0, r3
 8009d14:	f000 f870 	bl	8009df8 <my_conv_is_leap_year>
 8009d18:	0003      	movs	r3, r0
 8009d1a:	336e      	adds	r3, #110	; 0x6e
 8009d1c:	33ff      	adds	r3, #255	; 0xff
 8009d1e:	001a      	movs	r2, r3
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	0018      	movs	r0, r3
 8009d30:	f000 f862 	bl	8009df8 <my_conv_is_leap_year>
 8009d34:	0003      	movs	r3, r0
 8009d36:	336e      	adds	r3, #110	; 0x6e
 8009d38:	33ff      	adds	r3, #255	; 0xff
 8009d3a:	001a      	movs	r2, r3
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d2e6      	bcs.n	8009d10 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 8009d42:	2300      	movs	r3, #0
 8009d44:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009d46:	e018      	b.n	8009d7a <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 8009d48:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <my_conv_timestamp2rtc+0x144>)
 8009d4a:	69fa      	ldr	r2, [r7, #28]
 8009d4c:	0052      	lsls	r2, r2, #1
 8009d4e:	5ad3      	ldrh	r3, [r2, r3]
 8009d50:	001c      	movs	r4, r3
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d107      	bne.n	8009d68 <my_conv_timestamp2rtc+0xb8>
 8009d58:	6a3b      	ldr	r3, [r7, #32]
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	f000 f84c 	bl	8009df8 <my_conv_is_leap_year>
 8009d60:	1e03      	subs	r3, r0, #0
 8009d62:	d001      	beq.n	8009d68 <my_conv_timestamp2rtc+0xb8>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e000      	b.n	8009d6a <my_conv_timestamp2rtc+0xba>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	191b      	adds	r3, r3, r4
 8009d6c:	001a      	movs	r2, r3
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	3301      	adds	r3, #1
 8009d78:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 8009d7a:	4b1e      	ldr	r3, [pc, #120]	; (8009df4 <my_conv_timestamp2rtc+0x144>)
 8009d7c:	69fa      	ldr	r2, [r7, #28]
 8009d7e:	0052      	lsls	r2, r2, #1
 8009d80:	5ad3      	ldrh	r3, [r2, r3]
 8009d82:	001c      	movs	r4, r3
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d107      	bne.n	8009d9a <my_conv_timestamp2rtc+0xea>
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	0018      	movs	r0, r3
 8009d8e:	f000 f833 	bl	8009df8 <my_conv_is_leap_year>
 8009d92:	1e03      	subs	r3, r0, #0
 8009d94:	d001      	beq.n	8009d9a <my_conv_timestamp2rtc+0xea>
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <my_conv_timestamp2rtc+0xec>
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	191b      	adds	r3, r3, r4
 8009d9e:	001a      	movs	r2, r3
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d2d0      	bcs.n	8009d48 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	3330      	adds	r3, #48	; 0x30
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	3301      	adds	r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	b2da      	uxtb	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	709a      	strb	r2, [r3, #2]
}
 8009de2:	46c0      	nop			; (mov r8, r8)
 8009de4:	46bd      	mov	sp, r7
 8009de6:	b00b      	add	sp, #44	; 0x2c
 8009de8:	bd90      	pop	{r4, r7, pc}
 8009dea:	46c0      	nop			; (mov r8, r8)
 8009dec:	00015180 	.word	0x00015180
 8009df0:	000007b2 	.word	0x000007b2
 8009df4:	0801455c 	.word	0x0801455c

08009df8 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2203      	movs	r2, #3
 8009e04:	4013      	ands	r3, r2
 8009e06:	d106      	bne.n	8009e16 <my_conv_is_leap_year+0x1e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2164      	movs	r1, #100	; 0x64
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	f7f6 fb05 	bl	800041c <__aeabi_idivmod>
 8009e12:	1e0b      	subs	r3, r1, #0
 8009e14:	d107      	bne.n	8009e26 <my_conv_is_leap_year+0x2e>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	22c8      	movs	r2, #200	; 0xc8
 8009e1a:	0051      	lsls	r1, r2, #1
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	f7f6 fafd 	bl	800041c <__aeabi_idivmod>
 8009e22:	1e0b      	subs	r3, r1, #0
 8009e24:	d101      	bne.n	8009e2a <my_conv_is_leap_year+0x32>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <my_conv_is_leap_year+0x34>
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	0018      	movs	r0, r3
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	b002      	add	sp, #8
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 8009e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e36:	b089      	sub	sp, #36	; 0x24
 8009e38:	af04      	add	r7, sp, #16
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	78db      	ldrb	r3, [r3, #3]
 8009e44:	22fa      	movs	r2, #250	; 0xfa
 8009e46:	00d2      	lsls	r2, r2, #3
 8009e48:	189a      	adds	r2, r3, r2
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	469c      	mov	ip, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	789b      	ldrb	r3, [r3, #2]
 8009e54:	001c      	movs	r4, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	001d      	movs	r5, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	001e      	movs	r6, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	789b      	ldrb	r3, [r3, #2]
 8009e66:	4906      	ldr	r1, [pc, #24]	; (8009e80 <my_conv_dt_2_dts+0x4c>)
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	9602      	str	r6, [sp, #8]
 8009e6e:	9501      	str	r5, [sp, #4]
 8009e70:	9400      	str	r4, [sp, #0]
 8009e72:	4663      	mov	r3, ip
 8009e74:	f001 ffa6 	bl	800bdc4 <sprintf>
}
 8009e78:	46c0      	nop			; (mov r8, r8)
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	b005      	add	sp, #20
 8009e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e80:	08014444 	.word	0x08014444

08009e84 <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 8009e8c:	230c      	movs	r3, #12
 8009e8e:	18f9      	adds	r1, r7, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	220a      	movs	r2, #10
 8009e94:	0018      	movs	r0, r3
 8009e96:	f001 fe91 	bl	800bbbc <strtoul>
 8009e9a:	0003      	movs	r3, r0
}
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	b004      	add	sp, #16
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b24      	cmp	r3, #36	; 0x24
 8009eb6:	d117      	bne.n	8009ee8 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	b2d1      	uxtb	r1, r2
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	7011      	strb	r1, [r2, #0]
 8009eca:	001a      	movs	r2, r3
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	189b      	adds	r3, r3, r2
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	7812      	ldrb	r2, [r2, #0]
 8009ed4:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	001a      	movs	r2, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	189b      	adds	r3, r3, r2
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e045      	b.n	8009f74 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	2b1f      	cmp	r3, #31
 8009eee:	d907      	bls.n	8009f00 <my_nmea_message+0x5c>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2b7e      	cmp	r3, #126	; 0x7e
 8009ef6:	d803      	bhi.n	8009f00 <my_nmea_message+0x5c>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d103      	bne.n	8009f08 <my_nmea_message+0x64>
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b0d      	cmp	r3, #13
 8009f06:	d114      	bne.n	8009f32 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	b2d1      	uxtb	r1, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	7011      	strb	r1, [r2, #0]
 8009f14:	001a      	movs	r2, r3
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	189b      	adds	r3, r3, r2
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	7812      	ldrb	r2, [r2, #0]
 8009f1e:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	001a      	movs	r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	189b      	adds	r3, r3, r2
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	701a      	strb	r2, [r3, #0]
        return 1 ;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e020      	b.n	8009f74 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b0a      	cmp	r3, #10
 8009f38:	d11a      	bne.n	8009f70 <my_nmea_message+0xcc>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d916      	bls.n	8009f70 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	001a      	movs	r2, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	189b      	adds	r3, r3, r2
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b0d      	cmp	r3, #13
 8009f5c:	d108      	bne.n	8009f70 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	001a      	movs	r2, r3
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	189b      	adds	r3, r3, r2
 8009f68:	2200      	movs	r2, #0
 8009f6a:	701a      	strb	r2, [r3, #0]
            return 2 ;
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	e001      	b.n	8009f74 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 8009f70:	2301      	movs	r3, #1
 8009f72:	425b      	negs	r3, r3
}
 8009f74:	0018      	movs	r0, r3
 8009f76:	46bd      	mov	sp, r7
 8009f78:	b004      	add	sp, #16
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
	return m[9] ;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3309      	adds	r3, #9
 8009f88:	781b      	ldrb	r3, [r3, #0]
}
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	b002      	add	sp, #8
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 8009f92:	b5b0      	push	{r4, r5, r7, lr}
 8009f94:	b086      	sub	sp, #24
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	220f      	movs	r2, #15
 8009f9e:	212c      	movs	r1, #44	; 0x2c
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f7ff fdcd 	bl	8009b40 <my_find_char_position>
 8009fa6:	0003      	movs	r3, r0
 8009fa8:	001a      	movs	r2, r3
 8009faa:	2517      	movs	r5, #23
 8009fac:	197b      	adds	r3, r7, r5
 8009fae:	3201      	adds	r2, #1
 8009fb0:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2210      	movs	r2, #16
 8009fb6:	212c      	movs	r1, #44	; 0x2c
 8009fb8:	0018      	movs	r0, r3
 8009fba:	f7ff fdc1 	bl	8009b40 <my_find_char_position>
 8009fbe:	0003      	movs	r3, r0
 8009fc0:	0019      	movs	r1, r3
 8009fc2:	2416      	movs	r4, #22
 8009fc4:	193b      	adds	r3, r7, r4
 8009fc6:	197a      	adds	r2, r7, r5
 8009fc8:	7812      	ldrb	r2, [r2, #0]
 8009fca:	1a8a      	subs	r2, r1, r2
 8009fcc:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 8009fce:	193b      	adds	r3, r7, r4
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	0018      	movs	r0, r3
 8009fd6:	f000 fc65 	bl	800a8a4 <malloc>
 8009fda:	0003      	movs	r3, r0
 8009fdc:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 8009fde:	197b      	adds	r3, r7, r5
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	18d1      	adds	r1, r2, r3
 8009fe6:	193b      	adds	r3, r7, r4
 8009fe8:	781a      	ldrb	r2, [r3, #0]
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	0018      	movs	r0, r3
 8009fee:	f001 ffa6 	bl	800bf3e <strncpy>
	pdop_s[pdop_length] = '\0';
 8009ff2:	193b      	adds	r3, r7, r4
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	18d3      	adds	r3, r2, r3
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	0018      	movs	r0, r3
 800a002:	f7ff fd89 	bl	8009b18 <my_string2double_conv>
 800a006:	0002      	movs	r2, r0
 800a008:	000b      	movs	r3, r1
 800a00a:	60ba      	str	r2, [r7, #8]
 800a00c:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	0018      	movs	r0, r3
 800a012:	f000 fc51 	bl	800a8b8 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	68fb      	ldr	r3, [r7, #12]
}
 800a01a:	0010      	movs	r0, r2
 800a01c:	0019      	movs	r1, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	b006      	add	sp, #24
 800a022:	bdb0      	pop	{r4, r5, r7, pc}

0800a024 <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800a02c:	230f      	movs	r3, #15
 800a02e:	18fb      	adds	r3, r7, r3
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800a034:	230e      	movs	r3, #14
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2201      	movs	r2, #1
 800a03a:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a03c:	e00f      	b.n	800a05e <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800a03e:	220e      	movs	r2, #14
 800a040:	18bb      	adds	r3, r7, r2
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	18ba      	adds	r2, r7, r2
 800a046:	1c59      	adds	r1, r3, #1
 800a048:	7011      	strb	r1, [r2, #0]
 800a04a:	001a      	movs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	189b      	adds	r3, r3, r2
 800a050:	7819      	ldrb	r1, [r3, #0]
 800a052:	220f      	movs	r2, #15
 800a054:	18bb      	adds	r3, r7, r2
 800a056:	18ba      	adds	r2, r7, r2
 800a058:	7812      	ldrb	r2, [r2, #0]
 800a05a:	404a      	eors	r2, r1
 800a05c:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800a05e:	210e      	movs	r1, #14
 800a060:	187b      	adds	r3, r7, r1
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	18d3      	adds	r3, r2, r3
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2b2a      	cmp	r3, #42	; 0x2a
 800a06c:	d00a      	beq.n	800a084 <is_my_nmea_checksum_ok+0x60>
 800a06e:	187b      	adds	r3, r7, r1
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d003      	beq.n	800a084 <is_my_nmea_checksum_ok+0x60>
 800a07c:	187b      	adds	r3, r7, r1
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1dc      	bne.n	800a03e <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800a084:	230f      	movs	r3, #15
 800a086:	18fb      	adds	r3, r7, r3
 800a088:	781c      	ldrb	r4, [r3, #0]
 800a08a:	210e      	movs	r1, #14
 800a08c:	187b      	adds	r3, r7, r1
 800a08e:	187a      	adds	r2, r7, r1
 800a090:	7812      	ldrb	r2, [r2, #0]
 800a092:	3201      	adds	r2, #1
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	187b      	adds	r3, r7, r1
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	18d3      	adds	r3, r2, r3
 800a09e:	2210      	movs	r2, #16
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f001 fcf8 	bl	800ba98 <strtol>
 800a0a8:	0003      	movs	r3, r0
 800a0aa:	1ae3      	subs	r3, r4, r3
 800a0ac:	425a      	negs	r2, r3
 800a0ae:	4153      	adcs	r3, r2
 800a0b0:	b2db      	uxtb	r3, r3
}
 800a0b2:	0018      	movs	r0, r3
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	b005      	add	sp, #20
 800a0b8:	bd90      	pop	{r4, r7, pc}
	...

0800a0bc <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800a0bc:	b5b0      	push	{r4, r5, r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	000a      	movs	r2, r1
 800a0c6:	1cfb      	adds	r3, r7, #3
 800a0c8:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800a0ca:	2308      	movs	r3, #8
 800a0cc:	18fa      	adds	r2, r7, r3
 800a0ce:	492f      	ldr	r1, [pc, #188]	; (800a18c <nmea2decimal+0xd0>)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	0018      	movs	r0, r3
 800a0d4:	f001 fe96 	bl	800be04 <sscanf>
    min = deg / 100 ;
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4b2c      	ldr	r3, [pc, #176]	; (800a190 <nmea2decimal+0xd4>)
 800a0e0:	f7f6 feca 	bl	8000e78 <__aeabi_ddiv>
 800a0e4:	0002      	movs	r2, r0
 800a0e6:	000b      	movs	r3, r1
 800a0e8:	613a      	str	r2, [r7, #16]
 800a0ea:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800a0ec:	6938      	ldr	r0, [r7, #16]
 800a0ee:	6979      	ldr	r1, [r7, #20]
 800a0f0:	f7f8 f91e 	bl	8002330 <__aeabi_d2iz>
 800a0f4:	0003      	movs	r3, r0
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7f8 f950 	bl	800239c <__aeabi_i2d>
 800a0fc:	0002      	movs	r2, r0
 800a0fe:	000b      	movs	r3, r1
 800a100:	60ba      	str	r2, [r7, #8]
 800a102:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6938      	ldr	r0, [r7, #16]
 800a10a:	6979      	ldr	r1, [r7, #20]
 800a10c:	f7f7 fd70 	bl	8001bf0 <__aeabi_dsub>
 800a110:	0002      	movs	r2, r0
 800a112:	000b      	movs	r3, r1
 800a114:	0010      	movs	r0, r2
 800a116:	0019      	movs	r1, r3
 800a118:	2200      	movs	r2, #0
 800a11a:	4b1e      	ldr	r3, [pc, #120]	; (800a194 <nmea2decimal+0xd8>)
 800a11c:	f7f7 faa6 	bl	800166c <__aeabi_dmul>
 800a120:	0002      	movs	r2, r0
 800a122:	000b      	movs	r3, r1
 800a124:	613a      	str	r2, [r7, #16]
 800a126:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800a128:	2200      	movs	r2, #0
 800a12a:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <nmea2decimal+0xdc>)
 800a12c:	6938      	ldr	r0, [r7, #16]
 800a12e:	6979      	ldr	r1, [r7, #20]
 800a130:	f7f6 fea2 	bl	8000e78 <__aeabi_ddiv>
 800a134:	0002      	movs	r2, r0
 800a136:	000b      	movs	r3, r1
 800a138:	613a      	str	r2, [r7, #16]
 800a13a:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800a13c:	1cfb      	adds	r3, r7, #3
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b53      	cmp	r3, #83	; 0x53
 800a142:	d003      	beq.n	800a14c <nmea2decimal+0x90>
 800a144:	1cfb      	adds	r3, r7, #3
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	2b57      	cmp	r3, #87	; 0x57
 800a14a:	d10e      	bne.n	800a16a <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800a14c:	68b8      	ldr	r0, [r7, #8]
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f7f6 fb30 	bl	80007b8 <__aeabi_dadd>
 800a158:	0002      	movs	r2, r0
 800a15a:	000b      	movs	r3, r1
 800a15c:	0011      	movs	r1, r2
 800a15e:	000c      	movs	r4, r1
 800a160:	2180      	movs	r1, #128	; 0x80
 800a162:	0609      	lsls	r1, r1, #24
 800a164:	4059      	eors	r1, r3
 800a166:	000d      	movs	r5, r1
 800a168:	e009      	b.n	800a17e <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800a16a:	68b8      	ldr	r0, [r7, #8]
 800a16c:	68f9      	ldr	r1, [r7, #12]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f7f6 fb21 	bl	80007b8 <__aeabi_dadd>
 800a176:	0002      	movs	r2, r0
 800a178:	000b      	movs	r3, r1
 800a17a:	0014      	movs	r4, r2
 800a17c:	001d      	movs	r5, r3
}
 800a17e:	0022      	movs	r2, r4
 800a180:	002b      	movs	r3, r5
 800a182:	0010      	movs	r0, r2
 800a184:	0019      	movs	r1, r3
 800a186:	46bd      	mov	sp, r7
 800a188:	b006      	add	sp, #24
 800a18a:	bdb0      	pop	{r4, r5, r7, pc}
 800a18c:	08014464 	.word	0x08014464
 800a190:	40590000 	.word	0x40590000
 800a194:	40240000 	.word	0x40240000
 800a198:	40180000 	.word	0x40180000

0800a19c <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800a19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a19e:	b08d      	sub	sp, #52	; 0x34
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	212c      	movs	r1, #44	; 0x2c
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	f7ff fcc7 	bl	8009b40 <my_find_char_position>
 800a1b2:	0003      	movs	r3, r0
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	252f      	movs	r5, #47	; 0x2f
 800a1b8:	197b      	adds	r3, r7, r5
 800a1ba:	3201      	adds	r2, #1
 800a1bc:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	212c      	movs	r1, #44	; 0x2c
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	f7ff fcbb 	bl	8009b40 <my_find_char_position>
 800a1ca:	0003      	movs	r3, r0
 800a1cc:	0019      	movs	r1, r3
 800a1ce:	242e      	movs	r4, #46	; 0x2e
 800a1d0:	193b      	adds	r3, r7, r4
 800a1d2:	197a      	adds	r2, r7, r5
 800a1d4:	7812      	ldrb	r2, [r2, #0]
 800a1d6:	1a8a      	subs	r2, r1, r2
 800a1d8:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a1da:	193b      	adds	r3, r7, r4
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	0018      	movs	r0, r3
 800a1e2:	f000 fb5f 	bl	800a8a4 <malloc>
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a1ea:	197b      	adds	r3, r7, r5
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	18d1      	adds	r1, r2, r3
 800a1f2:	193b      	adds	r3, r7, r4
 800a1f4:	781a      	ldrb	r2, [r3, #0]
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	0018      	movs	r0, r3
 800a1fa:	f001 fea0 	bl	800bf3e <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800a1fe:	193b      	adds	r3, r7, r4
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a204:	18d3      	adds	r3, r2, r3
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a20a:	197b      	adds	r3, r7, r5
 800a20c:	781a      	ldrb	r2, [r3, #0]
 800a20e:	193b      	adds	r3, r7, r4
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	18d3      	adds	r3, r2, r3
 800a214:	3301      	adds	r3, #1
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	18d2      	adds	r2, r2, r3
 800a21a:	2627      	movs	r6, #39	; 0x27
 800a21c:	19bb      	adds	r3, r7, r6
 800a21e:	7812      	ldrb	r2, [r2, #0]
 800a220:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800a222:	19bb      	adds	r3, r7, r6
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	0011      	movs	r1, r2
 800a22a:	0018      	movs	r0, r3
 800a22c:	f7ff ff46 	bl	800a0bc <nmea2decimal>
 800a230:	0002      	movs	r2, r0
 800a232:	000b      	movs	r3, r1
 800a234:	61ba      	str	r2, [r7, #24]
 800a236:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	0018      	movs	r0, r3
 800a23c:	f000 fb3c 	bl	800a8b8 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800a240:	2200      	movs	r2, #0
 800a242:	4b49      	ldr	r3, [pc, #292]	; (800a368 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a244:	69b8      	ldr	r0, [r7, #24]
 800a246:	69f9      	ldr	r1, [r7, #28]
 800a248:	f7f7 fa10 	bl	800166c <__aeabi_dmul>
 800a24c:	0002      	movs	r2, r0
 800a24e:	000b      	movs	r3, r1
 800a250:	0010      	movs	r0, r2
 800a252:	0019      	movs	r1, r3
 800a254:	f008 fb0a 	bl	801286c <round>
 800a258:	2200      	movs	r2, #0
 800a25a:	4b43      	ldr	r3, [pc, #268]	; (800a368 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a25c:	f7f6 fe0c 	bl	8000e78 <__aeabi_ddiv>
 800a260:	0002      	movs	r2, r0
 800a262:	000b      	movs	r3, r1
 800a264:	61ba      	str	r2, [r7, #24]
 800a266:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800a268:	2200      	movs	r2, #0
 800a26a:	4b40      	ldr	r3, [pc, #256]	; (800a36c <my_nmea_get_gngll_coordinates+0x1d0>)
 800a26c:	69b8      	ldr	r0, [r7, #24]
 800a26e:	69f9      	ldr	r1, [r7, #28]
 800a270:	f7f7 f9fc 	bl	800166c <__aeabi_dmul>
 800a274:	0002      	movs	r2, r0
 800a276:	000b      	movs	r3, r1
 800a278:	0010      	movs	r0, r2
 800a27a:	0019      	movs	r1, r3
 800a27c:	f7f8 f858 	bl	8002330 <__aeabi_d2iz>
 800a280:	0002      	movs	r2, r0
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2203      	movs	r2, #3
 800a28a:	212c      	movs	r1, #44	; 0x2c
 800a28c:	0018      	movs	r0, r3
 800a28e:	f7ff fc57 	bl	8009b40 <my_find_char_position>
 800a292:	0003      	movs	r3, r0
 800a294:	001a      	movs	r2, r3
 800a296:	197b      	adds	r3, r7, r5
 800a298:	3201      	adds	r2, #1
 800a29a:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2204      	movs	r2, #4
 800a2a0:	212c      	movs	r1, #44	; 0x2c
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	f7ff fc4c 	bl	8009b40 <my_find_char_position>
 800a2a8:	0003      	movs	r3, r0
 800a2aa:	0019      	movs	r1, r3
 800a2ac:	193b      	adds	r3, r7, r4
 800a2ae:	197a      	adds	r2, r7, r5
 800a2b0:	7812      	ldrb	r2, [r2, #0]
 800a2b2:	1a8a      	subs	r2, r1, r2
 800a2b4:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800a2b6:	193b      	adds	r3, r7, r4
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f000 faf1 	bl	800a8a4 <malloc>
 800a2c2:	0003      	movs	r3, r0
 800a2c4:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800a2c6:	197b      	adds	r3, r7, r5
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	18d1      	adds	r1, r2, r3
 800a2ce:	193b      	adds	r3, r7, r4
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	0018      	movs	r0, r3
 800a2d6:	f001 fe32 	bl	800bf3e <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800a2da:	193b      	adds	r3, r7, r4
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	18d3      	adds	r3, r2, r3
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800a2e6:	197b      	adds	r3, r7, r5
 800a2e8:	781a      	ldrb	r2, [r3, #0]
 800a2ea:	193b      	adds	r3, r7, r4
 800a2ec:	781b      	ldrb	r3, [r3, #0]
 800a2ee:	18d3      	adds	r3, r2, r3
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	18d2      	adds	r2, r2, r3
 800a2f6:	19bb      	adds	r3, r7, r6
 800a2f8:	7812      	ldrb	r2, [r2, #0]
 800a2fa:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800a2fc:	19bb      	adds	r3, r7, r6
 800a2fe:	781a      	ldrb	r2, [r3, #0]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	0011      	movs	r1, r2
 800a304:	0018      	movs	r0, r3
 800a306:	f7ff fed9 	bl	800a0bc <nmea2decimal>
 800a30a:	0002      	movs	r2, r0
 800a30c:	000b      	movs	r3, r1
 800a30e:	60ba      	str	r2, [r7, #8]
 800a310:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	0018      	movs	r0, r3
 800a316:	f000 facf 	bl	800a8b8 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800a31a:	2200      	movs	r2, #0
 800a31c:	4b12      	ldr	r3, [pc, #72]	; (800a368 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a31e:	68b8      	ldr	r0, [r7, #8]
 800a320:	68f9      	ldr	r1, [r7, #12]
 800a322:	f7f7 f9a3 	bl	800166c <__aeabi_dmul>
 800a326:	0002      	movs	r2, r0
 800a328:	000b      	movs	r3, r1
 800a32a:	0010      	movs	r0, r2
 800a32c:	0019      	movs	r1, r3
 800a32e:	f008 fa9d 	bl	801286c <round>
 800a332:	2200      	movs	r2, #0
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <my_nmea_get_gngll_coordinates+0x1cc>)
 800a336:	f7f6 fd9f 	bl	8000e78 <__aeabi_ddiv>
 800a33a:	0002      	movs	r2, r0
 800a33c:	000b      	movs	r3, r1
 800a33e:	60ba      	str	r2, [r7, #8]
 800a340:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800a342:	2200      	movs	r2, #0
 800a344:	4b09      	ldr	r3, [pc, #36]	; (800a36c <my_nmea_get_gngll_coordinates+0x1d0>)
 800a346:	68b8      	ldr	r0, [r7, #8]
 800a348:	68f9      	ldr	r1, [r7, #12]
 800a34a:	f7f7 f98f 	bl	800166c <__aeabi_dmul>
 800a34e:	0002      	movs	r2, r0
 800a350:	000b      	movs	r3, r1
 800a352:	0010      	movs	r0, r2
 800a354:	0019      	movs	r1, r3
 800a356:	f7f7 ffeb 	bl	8002330 <__aeabi_d2iz>
 800a35a:	0002      	movs	r2, r0
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	605a      	str	r2, [r3, #4]
}
 800a360:	46c0      	nop			; (mov r8, r8)
 800a362:	46bd      	mov	sp, r7
 800a364:	b00d      	add	sp, #52	; 0x34
 800a366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a368:	412e8480 	.word	0x412e8480
 800a36c:	416312d0 	.word	0x416312d0

0800a370 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800a370:	b5b0      	push	{r4, r5, r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800a378:	240e      	movs	r4, #14
 800a37a:	193b      	adds	r3, r7, r4
 800a37c:	2200      	movs	r2, #0
 800a37e:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2203      	movs	r2, #3
 800a384:	212c      	movs	r1, #44	; 0x2c
 800a386:	0018      	movs	r0, r3
 800a388:	f7ff fbda 	bl	8009b40 <my_find_char_position>
 800a38c:	0003      	movs	r3, r0
 800a38e:	001a      	movs	r2, r3
 800a390:	2517      	movs	r5, #23
 800a392:	197b      	adds	r3, r7, r5
 800a394:	3201      	adds	r2, #1
 800a396:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a398:	2003      	movs	r0, #3
 800a39a:	f000 fa83 	bl	800a8a4 <malloc>
 800a39e:	0003      	movs	r3, r0
 800a3a0:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a3a2:	197b      	adds	r3, r7, r5
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	18d1      	adds	r1, r2, r3
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f001 fdc5 	bl	800bf3e <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	3302      	adds	r3, #2
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800a3bc:	193a      	adds	r2, r7, r4
 800a3be:	4907      	ldr	r1, [pc, #28]	; (800a3dc <my_nmea_get_gsv_tns+0x6c>)
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f001 fd1e 	bl	800be04 <sscanf>
	free ( s ) ;
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f000 fa74 	bl	800a8b8 <free>
	return tns ;
 800a3d0:	193b      	adds	r3, r7, r4
 800a3d2:	881b      	ldrh	r3, [r3, #0]
}
 800a3d4:	0018      	movs	r0, r3
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	b006      	add	sp, #24
 800a3da:	bdb0      	pop	{r4, r5, r7, pc}
 800a3dc:	08014470 	.word	0x08014470

0800a3e0 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800a3e0:	b590      	push	{r4, r7, lr}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2209      	movs	r2, #9
 800a3ee:	212c      	movs	r1, #44	; 0x2c
 800a3f0:	0018      	movs	r0, r3
 800a3f2:	f7ff fba5 	bl	8009b40 <my_find_char_position>
 800a3f6:	0003      	movs	r3, r0
 800a3f8:	001a      	movs	r2, r3
 800a3fa:	2417      	movs	r4, #23
 800a3fc:	193b      	adds	r3, r7, r4
 800a3fe:	3205      	adds	r2, #5
 800a400:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a402:	2003      	movs	r0, #3
 800a404:	f000 fa4e 	bl	800a8a4 <malloc>
 800a408:	0003      	movs	r3, r0
 800a40a:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a40c:	193b      	adds	r3, r7, r4
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	18d1      	adds	r1, r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2202      	movs	r2, #2
 800a418:	0018      	movs	r0, r3
 800a41a:	f001 fd90 	bl	800bf3e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	3302      	adds	r3, #2
 800a422:	2200      	movs	r2, #0
 800a424:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a426:	240e      	movs	r4, #14
 800a428:	193a      	adds	r2, r7, r4
 800a42a:	4909      	ldr	r1, [pc, #36]	; (800a450 <my_nmea_get_rmc_date_yy+0x70>)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	0018      	movs	r0, r3
 800a430:	f001 fce8 	bl	800be04 <sscanf>
	free ( s ) ;
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	0018      	movs	r0, r3
 800a438:	f000 fa3e 	bl	800a8b8 <free>
	*yy = (uint8_t) temp ;
 800a43c:	193b      	adds	r3, r7, r4
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	b2da      	uxtb	r2, r3
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	701a      	strb	r2, [r3, #0]

}
 800a446:	46c0      	nop			; (mov r8, r8)
 800a448:	46bd      	mov	sp, r7
 800a44a:	b007      	add	sp, #28
 800a44c:	bd90      	pop	{r4, r7, pc}
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	08014470 	.word	0x08014470

0800a454 <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800a454:	b590      	push	{r4, r7, lr}
 800a456:	b087      	sub	sp, #28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2209      	movs	r2, #9
 800a462:	212c      	movs	r1, #44	; 0x2c
 800a464:	0018      	movs	r0, r3
 800a466:	f7ff fb6b 	bl	8009b40 <my_find_char_position>
 800a46a:	0003      	movs	r3, r0
 800a46c:	001a      	movs	r2, r3
 800a46e:	2417      	movs	r4, #23
 800a470:	193b      	adds	r3, r7, r4
 800a472:	3203      	adds	r2, #3
 800a474:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a476:	2003      	movs	r0, #3
 800a478:	f000 fa14 	bl	800a8a4 <malloc>
 800a47c:	0003      	movs	r3, r0
 800a47e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a480:	193b      	adds	r3, r7, r4
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	18d1      	adds	r1, r2, r3
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2202      	movs	r2, #2
 800a48c:	0018      	movs	r0, r3
 800a48e:	f001 fd56 	bl	800bf3e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	3302      	adds	r3, #2
 800a496:	2200      	movs	r2, #0
 800a498:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a49a:	240e      	movs	r4, #14
 800a49c:	193a      	adds	r2, r7, r4
 800a49e:	4909      	ldr	r1, [pc, #36]	; (800a4c4 <my_nmea_get_rmc_date_mm+0x70>)
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	0018      	movs	r0, r3
 800a4a4:	f001 fcae 	bl	800be04 <sscanf>
	free ( s ) ;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	0018      	movs	r0, r3
 800a4ac:	f000 fa04 	bl	800a8b8 <free>
	*mm = (uint8_t) temp ;
 800a4b0:	193b      	adds	r3, r7, r4
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	701a      	strb	r2, [r3, #0]

}
 800a4ba:	46c0      	nop			; (mov r8, r8)
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	b007      	add	sp, #28
 800a4c0:	bd90      	pop	{r4, r7, pc}
 800a4c2:	46c0      	nop			; (mov r8, r8)
 800a4c4:	08014470 	.word	0x08014470

0800a4c8 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2209      	movs	r2, #9
 800a4d6:	212c      	movs	r1, #44	; 0x2c
 800a4d8:	0018      	movs	r0, r3
 800a4da:	f7ff fb31 	bl	8009b40 <my_find_char_position>
 800a4de:	0003      	movs	r3, r0
 800a4e0:	001a      	movs	r2, r3
 800a4e2:	2417      	movs	r4, #23
 800a4e4:	193b      	adds	r3, r7, r4
 800a4e6:	3201      	adds	r2, #1
 800a4e8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a4ea:	2003      	movs	r0, #3
 800a4ec:	f000 f9da 	bl	800a8a4 <malloc>
 800a4f0:	0003      	movs	r3, r0
 800a4f2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a4f4:	193b      	adds	r3, r7, r4
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	18d1      	adds	r1, r2, r3
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2202      	movs	r2, #2
 800a500:	0018      	movs	r0, r3
 800a502:	f001 fd1c 	bl	800bf3e <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	3302      	adds	r3, #2
 800a50a:	2200      	movs	r2, #0
 800a50c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a50e:	240e      	movs	r4, #14
 800a510:	193a      	adds	r2, r7, r4
 800a512:	4909      	ldr	r1, [pc, #36]	; (800a538 <my_nmea_get_rmc_date_dd+0x70>)
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	0018      	movs	r0, r3
 800a518:	f001 fc74 	bl	800be04 <sscanf>
	free ( s ) ;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	0018      	movs	r0, r3
 800a520:	f000 f9ca 	bl	800a8b8 <free>
	*dd = (uint8_t) temp ;
 800a524:	193b      	adds	r3, r7, r4
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	701a      	strb	r2, [r3, #0]

}
 800a52e:	46c0      	nop			; (mov r8, r8)
 800a530:	46bd      	mov	sp, r7
 800a532:	b007      	add	sp, #28
 800a534:	bd90      	pop	{r4, r7, pc}
 800a536:	46c0      	nop			; (mov r8, r8)
 800a538:	08014470 	.word	0x08014470

0800a53c <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800a53c:	b590      	push	{r4, r7, lr}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	212c      	movs	r1, #44	; 0x2c
 800a54c:	0018      	movs	r0, r3
 800a54e:	f7ff faf7 	bl	8009b40 <my_find_char_position>
 800a552:	0003      	movs	r3, r0
 800a554:	001a      	movs	r2, r3
 800a556:	2417      	movs	r4, #23
 800a558:	193b      	adds	r3, r7, r4
 800a55a:	3201      	adds	r2, #1
 800a55c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a55e:	2003      	movs	r0, #3
 800a560:	f000 f9a0 	bl	800a8a4 <malloc>
 800a564:	0003      	movs	r3, r0
 800a566:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a568:	193b      	adds	r3, r7, r4
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	18d1      	adds	r1, r2, r3
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2202      	movs	r2, #2
 800a574:	0018      	movs	r0, r3
 800a576:	f001 fce2 	bl	800bf3e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	3302      	adds	r3, #2
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a582:	240e      	movs	r4, #14
 800a584:	193a      	adds	r2, r7, r4
 800a586:	4909      	ldr	r1, [pc, #36]	; (800a5ac <my_nmea_get_rmc_utc_hh+0x70>)
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	0018      	movs	r0, r3
 800a58c:	f001 fc3a 	bl	800be04 <sscanf>
	free ( s ) ;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	0018      	movs	r0, r3
 800a594:	f000 f990 	bl	800a8b8 <free>
	*hh = (uint8_t) temp ;
 800a598:	193b      	adds	r3, r7, r4
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	701a      	strb	r2, [r3, #0]

}
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	b007      	add	sp, #28
 800a5a8:	bd90      	pop	{r4, r7, pc}
 800a5aa:	46c0      	nop			; (mov r8, r8)
 800a5ac:	08014470 	.word	0x08014470

0800a5b0 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800a5b0:	b590      	push	{r4, r7, lr}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	212c      	movs	r1, #44	; 0x2c
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	f7ff fabd 	bl	8009b40 <my_find_char_position>
 800a5c6:	0003      	movs	r3, r0
 800a5c8:	001a      	movs	r2, r3
 800a5ca:	2417      	movs	r4, #23
 800a5cc:	193b      	adds	r3, r7, r4
 800a5ce:	3203      	adds	r2, #3
 800a5d0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a5d2:	2003      	movs	r0, #3
 800a5d4:	f000 f966 	bl	800a8a4 <malloc>
 800a5d8:	0003      	movs	r3, r0
 800a5da:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a5dc:	193b      	adds	r3, r7, r4
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	18d1      	adds	r1, r2, r3
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f001 fca8 	bl	800bf3e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	3302      	adds	r3, #2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a5f6:	240e      	movs	r4, #14
 800a5f8:	193a      	adds	r2, r7, r4
 800a5fa:	4909      	ldr	r1, [pc, #36]	; (800a620 <my_nmea_get_rmc_utc_mm+0x70>)
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	0018      	movs	r0, r3
 800a600:	f001 fc00 	bl	800be04 <sscanf>
	free ( s ) ;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	0018      	movs	r0, r3
 800a608:	f000 f956 	bl	800a8b8 <free>
	*mm = (uint8_t) temp ;
 800a60c:	193b      	adds	r3, r7, r4
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	b2da      	uxtb	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	701a      	strb	r2, [r3, #0]

}
 800a616:	46c0      	nop			; (mov r8, r8)
 800a618:	46bd      	mov	sp, r7
 800a61a:	b007      	add	sp, #28
 800a61c:	bd90      	pop	{r4, r7, pc}
 800a61e:	46c0      	nop			; (mov r8, r8)
 800a620:	08014470 	.word	0x08014470

0800a624 <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800a624:	b590      	push	{r4, r7, lr}
 800a626:	b087      	sub	sp, #28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	212c      	movs	r1, #44	; 0x2c
 800a634:	0018      	movs	r0, r3
 800a636:	f7ff fa83 	bl	8009b40 <my_find_char_position>
 800a63a:	0003      	movs	r3, r0
 800a63c:	001a      	movs	r2, r3
 800a63e:	2417      	movs	r4, #23
 800a640:	193b      	adds	r3, r7, r4
 800a642:	3205      	adds	r2, #5
 800a644:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a646:	2003      	movs	r0, #3
 800a648:	f000 f92c 	bl	800a8a4 <malloc>
 800a64c:	0003      	movs	r3, r0
 800a64e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a650:	193b      	adds	r3, r7, r4
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	18d1      	adds	r1, r2, r3
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	2202      	movs	r2, #2
 800a65c:	0018      	movs	r0, r3
 800a65e:	f001 fc6e 	bl	800bf3e <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3302      	adds	r3, #2
 800a666:	2200      	movs	r2, #0
 800a668:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800a66a:	240e      	movs	r4, #14
 800a66c:	193a      	adds	r2, r7, r4
 800a66e:	4909      	ldr	r1, [pc, #36]	; (800a694 <my_nmea_get_rmc_utc_ss+0x70>)
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	0018      	movs	r0, r3
 800a674:	f001 fbc6 	bl	800be04 <sscanf>
	free ( s ) ;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	0018      	movs	r0, r3
 800a67c:	f000 f91c 	bl	800a8b8 <free>
	*ss = (uint8_t) temp ;
 800a680:	193b      	adds	r3, r7, r4
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	b2da      	uxtb	r2, r3
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	701a      	strb	r2, [r3, #0]

}
 800a68a:	46c0      	nop			; (mov r8, r8)
 800a68c:	46bd      	mov	sp, r7
 800a68e:	b007      	add	sp, #28
 800a690:	bd90      	pop	{r4, r7, pc}
 800a692:	46c0      	nop			; (mov r8, r8)
 800a694:	08014470 	.word	0x08014470

0800a698 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	212c      	movs	r1, #44	; 0x2c
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f7ff fa49 	bl	8009b40 <my_find_char_position>
 800a6ae:	0003      	movs	r3, r0
 800a6b0:	001a      	movs	r2, r3
 800a6b2:	240f      	movs	r4, #15
 800a6b4:	193b      	adds	r3, r7, r4
 800a6b6:	3208      	adds	r2, #8
 800a6b8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800a6ba:	2004      	movs	r0, #4
 800a6bc:	f000 f8f2 	bl	800a8a4 <malloc>
 800a6c0:	0003      	movs	r3, r0
 800a6c2:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800a6c4:	193b      	adds	r3, r7, r4
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	18d1      	adds	r1, r2, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	f001 fc34 	bl	800bf3e <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	3303      	adds	r3, #3
 800a6da:	2200      	movs	r2, #0
 800a6dc:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	4906      	ldr	r1, [pc, #24]	; (800a6fc <my_nmea_get_rmc_utc_sss+0x64>)
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	0018      	movs	r0, r3
 800a6e6:	f001 fb8d 	bl	800be04 <sscanf>
	free ( s ) ;
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	0018      	movs	r0, r3
 800a6ee:	f000 f8e3 	bl	800a8b8 <free>
}
 800a6f2:	46c0      	nop			; (mov r8, r8)
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	b005      	add	sp, #20
 800a6f8:	bd90      	pop	{r4, r7, pc}
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	08014474 	.word	0x08014474

0800a700 <my_tracker_api_is_cmd>:
 */

#include <my_tracker_api.h>

bool my_tracker_api_is_cmd ( const char* c )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	0018      	movs	r0, r3
 800a70c:	f7f5 fcfa 	bl	8000104 <strlen>
 800a710:	0003      	movs	r3, r0
 800a712:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800a714:	2317      	movs	r3, #23
 800a716:	18fb      	adds	r3, r7, r3
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800a71c:	2316      	movs	r3, #22
 800a71e:	18fb      	adds	r3, r7, r3
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 8 )
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d902      	bls.n	800a730 <my_tracker_api_is_cmd+0x30>
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d901      	bls.n	800a734 <my_tracker_api_is_cmd+0x34>
		return false ;
 800a730:	2300      	movs	r3, #0
 800a732:	e04b      	b.n	800a7cc <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800a734:	2317      	movs	r3, #23
 800a736:	18fb      	adds	r3, r7, r3
 800a738:	2200      	movs	r2, #0
 800a73a:	701a      	strb	r2, [r3, #0]
 800a73c:	e025      	b.n	800a78a <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800a73e:	2317      	movs	r3, #23
 800a740:	18fb      	adds	r3, r7, r3
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	18d3      	adds	r3, r2, r3
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	2b2c      	cmp	r3, #44	; 0x2c
 800a74c:	d106      	bne.n	800a75c <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800a74e:	2116      	movs	r1, #22
 800a750:	187b      	adds	r3, r7, r1
 800a752:	781a      	ldrb	r2, [r3, #0]
 800a754:	187b      	adds	r3, r7, r1
 800a756:	3201      	adds	r2, #1
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	e010      	b.n	800a77e <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800a75c:	2117      	movs	r1, #23
 800a75e:	187b      	adds	r3, r7, r1
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	18d3      	adds	r3, r2, r3
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	2b2f      	cmp	r3, #47	; 0x2f
 800a76a:	d906      	bls.n	800a77a <my_tracker_api_is_cmd+0x7a>
 800a76c:	187b      	adds	r3, r7, r1
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	18d3      	adds	r3, r2, r3
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	2b39      	cmp	r3, #57	; 0x39
 800a778:	d901      	bls.n	800a77e <my_tracker_api_is_cmd+0x7e>
			return false;
 800a77a:	2300      	movs	r3, #0
 800a77c:	e026      	b.n	800a7cc <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800a77e:	2117      	movs	r1, #23
 800a780:	187b      	adds	r3, r7, r1
 800a782:	781a      	ldrb	r2, [r3, #0]
 800a784:	187b      	adds	r3, r7, r1
 800a786:	3201      	adds	r2, #1
 800a788:	701a      	strb	r2, [r3, #0]
 800a78a:	2317      	movs	r3, #23
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	429a      	cmp	r2, r3
 800a794:	d8d3      	bhi.n	800a73e <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800a796:	2316      	movs	r3, #22
 800a798:	18fb      	adds	r3, r7, r3
 800a79a:	781b      	ldrb	r3, [r3, #0]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d901      	bls.n	800a7a4 <my_tracker_api_is_cmd+0xa4>
		return false ;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e013      	b.n	800a7cc <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	212c      	movs	r1, #44	; 0x2c
 800a7a8:	0018      	movs	r0, r3
 800a7aa:	f001 fba9 	bl	800bf00 <strchr>
 800a7ae:	0003      	movs	r3, r0
 800a7b0:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d802      	bhi.n	800a7c6 <my_tracker_api_is_cmd+0xc6>
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <my_tracker_api_is_cmd+0xca>
		return false ;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e000      	b.n	800a7cc <my_tracker_api_is_cmd+0xcc>

	return true ;
 800a7ca:	2301      	movs	r3, #1
}
 800a7cc:	0018      	movs	r0, r3
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	b006      	add	sp, #24
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <my_tracker_api_get_cmd_code>:

uint8_t my_tracker_api_get_cmd_code ( const char* c )
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	const char* comma_p = strchr ( c , ',' ) ;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	212c      	movs	r1, #44	; 0x2c
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f001 fb8d 	bl	800bf00 <strchr>
 800a7e6:	0003      	movs	r3, r0
 800a7e8:	617b      	str	r3, [r7, #20]
	size_t cmd_code_length = comma_p - c ;
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	613b      	str	r3, [r7, #16]

	char* cmd_code_s = (char*) malloc ( ( cmd_code_length + 1 ) * sizeof ( char ) ) ;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	0018      	movs	r0, r3
 800a7f8:	f000 f854 	bl	800a8a4 <malloc>
 800a7fc:	0003      	movs	r3, r0
 800a7fe:	60fb      	str	r3, [r7, #12]
	strncpy ( cmd_code_s , c , cmd_code_length ) ; // Kopiowanie fragmentu łańcucha
 800a800:	693a      	ldr	r2, [r7, #16]
 800a802:	6879      	ldr	r1, [r7, #4]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	0018      	movs	r0, r3
 800a808:	f001 fb99 	bl	800bf3e <strncpy>
	cmd_code_s[cmd_code_length] = '\0';
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	18d3      	adds	r3, r2, r3
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_code = (uint8_t) my_conv_string_2_uint32_t ( cmd_code_s ) ;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	0018      	movs	r0, r3
 800a81a:	f7ff fb33 	bl	8009e84 <my_conv_string_2_uint32_t>
 800a81e:	0002      	movs	r2, r0
 800a820:	240b      	movs	r4, #11
 800a822:	193b      	adds	r3, r7, r4
 800a824:	701a      	strb	r2, [r3, #0]
	free ( cmd_code_s ) ;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	0018      	movs	r0, r3
 800a82a:	f000 f845 	bl	800a8b8 <free>

	return cmd_code ;
 800a82e:	193b      	adds	r3, r7, r4
 800a830:	781b      	ldrb	r3, [r3, #0]
}
 800a832:	0018      	movs	r0, r3
 800a834:	46bd      	mov	sp, r7
 800a836:	b007      	add	sp, #28
 800a838:	bd90      	pop	{r4, r7, pc}

0800a83a <my_tracker_api_get_cmd_value>:

uint32_t my_tracker_api_get_cmd_value ( const char* c )
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
	const char* comma_p = strchr ( c , ',' ) ;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	212c      	movs	r1, #44	; 0x2c
 800a846:	0018      	movs	r0, r3
 800a848:	f001 fb5a 	bl	800bf00 <strchr>
 800a84c:	0003      	movs	r3, r0
 800a84e:	617b      	str	r3, [r7, #20]
	size_t cmd_value_length = strlen ( comma_p + 1 ) ;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	3301      	adds	r3, #1
 800a854:	0018      	movs	r0, r3
 800a856:	f7f5 fc55 	bl	8000104 <strlen>
 800a85a:	0003      	movs	r3, r0
 800a85c:	613b      	str	r3, [r7, #16]

	char* cmd_value_s = (char*) malloc ( ( cmd_value_length + 1 ) * sizeof ( char ) ) ;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	3301      	adds	r3, #1
 800a862:	0018      	movs	r0, r3
 800a864:	f000 f81e 	bl	800a8a4 <malloc>
 800a868:	0003      	movs	r3, r0
 800a86a:	60fb      	str	r3, [r7, #12]
	strncpy ( cmd_value_s , comma_p + 1 , cmd_value_length ) ; // Kopiowanie fragmentu łańcucha
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	1c59      	adds	r1, r3, #1
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	0018      	movs	r0, r3
 800a876:	f001 fb62 	bl	800bf3e <strncpy>
	cmd_value_s[cmd_value_length] = '\0';
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	18d3      	adds	r3, r2, r3
 800a880:	2200      	movs	r2, #0
 800a882:	701a      	strb	r2, [r3, #0]
	uint32_t cmd_value = my_conv_string_2_uint32_t ( cmd_value_s ) ;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	0018      	movs	r0, r3
 800a888:	f7ff fafc 	bl	8009e84 <my_conv_string_2_uint32_t>
 800a88c:	0003      	movs	r3, r0
 800a88e:	60bb      	str	r3, [r7, #8]
	free ( cmd_value_s ) ;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	0018      	movs	r0, r3
 800a894:	f000 f810 	bl	800a8b8 <free>

	return cmd_value ;
 800a898:	68bb      	ldr	r3, [r7, #8]
}
 800a89a:	0018      	movs	r0, r3
 800a89c:	46bd      	mov	sp, r7
 800a89e:	b006      	add	sp, #24
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <malloc>:
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	4b03      	ldr	r3, [pc, #12]	; (800a8b4 <malloc+0x10>)
 800a8a8:	0001      	movs	r1, r0
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	f000 f80e 	bl	800a8cc <_malloc_r>
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	46c0      	nop			; (mov r8, r8)
 800a8b4:	200006d0 	.word	0x200006d0

0800a8b8 <free>:
 800a8b8:	b510      	push	{r4, lr}
 800a8ba:	4b03      	ldr	r3, [pc, #12]	; (800a8c8 <free+0x10>)
 800a8bc:	0001      	movs	r1, r0
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	f001 fc84 	bl	800c1cc <_free_r>
 800a8c4:	bd10      	pop	{r4, pc}
 800a8c6:	46c0      	nop			; (mov r8, r8)
 800a8c8:	200006d0 	.word	0x200006d0

0800a8cc <_malloc_r>:
 800a8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ce:	000d      	movs	r5, r1
 800a8d0:	b087      	sub	sp, #28
 800a8d2:	350b      	adds	r5, #11
 800a8d4:	9001      	str	r0, [sp, #4]
 800a8d6:	2d16      	cmp	r5, #22
 800a8d8:	d908      	bls.n	800a8ec <_malloc_r+0x20>
 800a8da:	2207      	movs	r2, #7
 800a8dc:	4395      	bics	r5, r2
 800a8de:	d506      	bpl.n	800a8ee <_malloc_r+0x22>
 800a8e0:	230c      	movs	r3, #12
 800a8e2:	9a01      	ldr	r2, [sp, #4]
 800a8e4:	6013      	str	r3, [r2, #0]
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	b007      	add	sp, #28
 800a8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ec:	2510      	movs	r5, #16
 800a8ee:	42a9      	cmp	r1, r5
 800a8f0:	d8f6      	bhi.n	800a8e0 <_malloc_r+0x14>
 800a8f2:	9801      	ldr	r0, [sp, #4]
 800a8f4:	f000 f9fe 	bl	800acf4 <__malloc_lock>
 800a8f8:	23fc      	movs	r3, #252	; 0xfc
 800a8fa:	4ebe      	ldr	r6, [pc, #760]	; (800abf4 <_malloc_r+0x328>)
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	429d      	cmp	r5, r3
 800a900:	d219      	bcs.n	800a936 <_malloc_r+0x6a>
 800a902:	002a      	movs	r2, r5
 800a904:	3208      	adds	r2, #8
 800a906:	18b2      	adds	r2, r6, r2
 800a908:	0011      	movs	r1, r2
 800a90a:	6854      	ldr	r4, [r2, #4]
 800a90c:	3908      	subs	r1, #8
 800a90e:	08eb      	lsrs	r3, r5, #3
 800a910:	428c      	cmp	r4, r1
 800a912:	d103      	bne.n	800a91c <_malloc_r+0x50>
 800a914:	68d4      	ldr	r4, [r2, #12]
 800a916:	3302      	adds	r3, #2
 800a918:	42a2      	cmp	r2, r4
 800a91a:	d022      	beq.n	800a962 <_malloc_r+0x96>
 800a91c:	2203      	movs	r2, #3
 800a91e:	6863      	ldr	r3, [r4, #4]
 800a920:	68a1      	ldr	r1, [r4, #8]
 800a922:	4393      	bics	r3, r2
 800a924:	68e2      	ldr	r2, [r4, #12]
 800a926:	18e3      	adds	r3, r4, r3
 800a928:	60ca      	str	r2, [r1, #12]
 800a92a:	6091      	str	r1, [r2, #8]
 800a92c:	2201      	movs	r2, #1
 800a92e:	6859      	ldr	r1, [r3, #4]
 800a930:	430a      	orrs	r2, r1
 800a932:	605a      	str	r2, [r3, #4]
 800a934:	e02a      	b.n	800a98c <_malloc_r+0xc0>
 800a936:	233f      	movs	r3, #63	; 0x3f
 800a938:	0a6a      	lsrs	r2, r5, #9
 800a93a:	d003      	beq.n	800a944 <_malloc_r+0x78>
 800a93c:	2a04      	cmp	r2, #4
 800a93e:	d82b      	bhi.n	800a998 <_malloc_r+0xcc>
 800a940:	09ab      	lsrs	r3, r5, #6
 800a942:	3338      	adds	r3, #56	; 0x38
 800a944:	2203      	movs	r2, #3
 800a946:	4694      	mov	ip, r2
 800a948:	00d9      	lsls	r1, r3, #3
 800a94a:	1989      	adds	r1, r1, r6
 800a94c:	68cc      	ldr	r4, [r1, #12]
 800a94e:	428c      	cmp	r4, r1
 800a950:	d006      	beq.n	800a960 <_malloc_r+0x94>
 800a952:	4660      	mov	r0, ip
 800a954:	6862      	ldr	r2, [r4, #4]
 800a956:	4382      	bics	r2, r0
 800a958:	1b57      	subs	r7, r2, r5
 800a95a:	2f0f      	cmp	r7, #15
 800a95c:	dd34      	ble.n	800a9c8 <_malloc_r+0xfc>
 800a95e:	3b01      	subs	r3, #1
 800a960:	3301      	adds	r3, #1
 800a962:	6934      	ldr	r4, [r6, #16]
 800a964:	49a4      	ldr	r1, [pc, #656]	; (800abf8 <_malloc_r+0x32c>)
 800a966:	428c      	cmp	r4, r1
 800a968:	d055      	beq.n	800aa16 <_malloc_r+0x14a>
 800a96a:	2003      	movs	r0, #3
 800a96c:	6862      	ldr	r2, [r4, #4]
 800a96e:	4382      	bics	r2, r0
 800a970:	1b50      	subs	r0, r2, r5
 800a972:	280f      	cmp	r0, #15
 800a974:	dd36      	ble.n	800a9e4 <_malloc_r+0x118>
 800a976:	2301      	movs	r3, #1
 800a978:	1967      	adds	r7, r4, r5
 800a97a:	431d      	orrs	r5, r3
 800a97c:	4303      	orrs	r3, r0
 800a97e:	6065      	str	r5, [r4, #4]
 800a980:	6177      	str	r7, [r6, #20]
 800a982:	6137      	str	r7, [r6, #16]
 800a984:	60f9      	str	r1, [r7, #12]
 800a986:	60b9      	str	r1, [r7, #8]
 800a988:	607b      	str	r3, [r7, #4]
 800a98a:	50a0      	str	r0, [r4, r2]
 800a98c:	9801      	ldr	r0, [sp, #4]
 800a98e:	f000 f9b9 	bl	800ad04 <__malloc_unlock>
 800a992:	0020      	movs	r0, r4
 800a994:	3008      	adds	r0, #8
 800a996:	e7a7      	b.n	800a8e8 <_malloc_r+0x1c>
 800a998:	2a14      	cmp	r2, #20
 800a99a:	d802      	bhi.n	800a9a2 <_malloc_r+0xd6>
 800a99c:	0013      	movs	r3, r2
 800a99e:	335b      	adds	r3, #91	; 0x5b
 800a9a0:	e7d0      	b.n	800a944 <_malloc_r+0x78>
 800a9a2:	2a54      	cmp	r2, #84	; 0x54
 800a9a4:	d802      	bhi.n	800a9ac <_malloc_r+0xe0>
 800a9a6:	0b2b      	lsrs	r3, r5, #12
 800a9a8:	336e      	adds	r3, #110	; 0x6e
 800a9aa:	e7cb      	b.n	800a944 <_malloc_r+0x78>
 800a9ac:	23aa      	movs	r3, #170	; 0xaa
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d802      	bhi.n	800a9ba <_malloc_r+0xee>
 800a9b4:	0beb      	lsrs	r3, r5, #15
 800a9b6:	3377      	adds	r3, #119	; 0x77
 800a9b8:	e7c4      	b.n	800a944 <_malloc_r+0x78>
 800a9ba:	4990      	ldr	r1, [pc, #576]	; (800abfc <_malloc_r+0x330>)
 800a9bc:	237e      	movs	r3, #126	; 0x7e
 800a9be:	428a      	cmp	r2, r1
 800a9c0:	d8c0      	bhi.n	800a944 <_malloc_r+0x78>
 800a9c2:	0cab      	lsrs	r3, r5, #18
 800a9c4:	337c      	adds	r3, #124	; 0x7c
 800a9c6:	e7bd      	b.n	800a944 <_malloc_r+0x78>
 800a9c8:	68e0      	ldr	r0, [r4, #12]
 800a9ca:	2f00      	cmp	r7, #0
 800a9cc:	db08      	blt.n	800a9e0 <_malloc_r+0x114>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	60d8      	str	r0, [r3, #12]
 800a9d2:	6083      	str	r3, [r0, #8]
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	18a2      	adds	r2, r4, r2
 800a9d8:	6851      	ldr	r1, [r2, #4]
 800a9da:	430b      	orrs	r3, r1
 800a9dc:	6053      	str	r3, [r2, #4]
 800a9de:	e7d5      	b.n	800a98c <_malloc_r+0xc0>
 800a9e0:	0004      	movs	r4, r0
 800a9e2:	e7b4      	b.n	800a94e <_malloc_r+0x82>
 800a9e4:	6171      	str	r1, [r6, #20]
 800a9e6:	6131      	str	r1, [r6, #16]
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	daf3      	bge.n	800a9d4 <_malloc_r+0x108>
 800a9ec:	6871      	ldr	r1, [r6, #4]
 800a9ee:	468c      	mov	ip, r1
 800a9f0:	2180      	movs	r1, #128	; 0x80
 800a9f2:	0089      	lsls	r1, r1, #2
 800a9f4:	428a      	cmp	r2, r1
 800a9f6:	d300      	bcc.n	800a9fa <_malloc_r+0x12e>
 800a9f8:	e08c      	b.n	800ab14 <_malloc_r+0x248>
 800a9fa:	08d1      	lsrs	r1, r2, #3
 800a9fc:	0950      	lsrs	r0, r2, #5
 800a9fe:	2201      	movs	r2, #1
 800aa00:	4082      	lsls	r2, r0
 800aa02:	4660      	mov	r0, ip
 800aa04:	4302      	orrs	r2, r0
 800aa06:	6072      	str	r2, [r6, #4]
 800aa08:	00ca      	lsls	r2, r1, #3
 800aa0a:	1992      	adds	r2, r2, r6
 800aa0c:	6891      	ldr	r1, [r2, #8]
 800aa0e:	60e2      	str	r2, [r4, #12]
 800aa10:	60a1      	str	r1, [r4, #8]
 800aa12:	6094      	str	r4, [r2, #8]
 800aa14:	60cc      	str	r4, [r1, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	4876      	ldr	r0, [pc, #472]	; (800abf4 <_malloc_r+0x328>)
 800aa1a:	1099      	asrs	r1, r3, #2
 800aa1c:	408a      	lsls	r2, r1
 800aa1e:	6841      	ldr	r1, [r0, #4]
 800aa20:	4291      	cmp	r1, r2
 800aa22:	d328      	bcc.n	800aa76 <_malloc_r+0x1aa>
 800aa24:	420a      	tst	r2, r1
 800aa26:	d105      	bne.n	800aa34 <_malloc_r+0x168>
 800aa28:	2403      	movs	r4, #3
 800aa2a:	43a3      	bics	r3, r4
 800aa2c:	0052      	lsls	r2, r2, #1
 800aa2e:	3304      	adds	r3, #4
 800aa30:	420a      	tst	r2, r1
 800aa32:	d0fb      	beq.n	800aa2c <_malloc_r+0x160>
 800aa34:	496f      	ldr	r1, [pc, #444]	; (800abf4 <_malloc_r+0x328>)
 800aa36:	9104      	str	r1, [sp, #16]
 800aa38:	00d9      	lsls	r1, r3, #3
 800aa3a:	1841      	adds	r1, r0, r1
 800aa3c:	468c      	mov	ip, r1
 800aa3e:	000f      	movs	r7, r1
 800aa40:	9302      	str	r3, [sp, #8]
 800aa42:	68fc      	ldr	r4, [r7, #12]
 800aa44:	42bc      	cmp	r4, r7
 800aa46:	d000      	beq.n	800aa4a <_malloc_r+0x17e>
 800aa48:	e09b      	b.n	800ab82 <_malloc_r+0x2b6>
 800aa4a:	2403      	movs	r4, #3
 800aa4c:	9902      	ldr	r1, [sp, #8]
 800aa4e:	3708      	adds	r7, #8
 800aa50:	3101      	adds	r1, #1
 800aa52:	9102      	str	r1, [sp, #8]
 800aa54:	4221      	tst	r1, r4
 800aa56:	d1f4      	bne.n	800aa42 <_malloc_r+0x176>
 800aa58:	2103      	movs	r1, #3
 800aa5a:	420b      	tst	r3, r1
 800aa5c:	d000      	beq.n	800aa60 <_malloc_r+0x194>
 800aa5e:	e0b7      	b.n	800abd0 <_malloc_r+0x304>
 800aa60:	6843      	ldr	r3, [r0, #4]
 800aa62:	4393      	bics	r3, r2
 800aa64:	6043      	str	r3, [r0, #4]
 800aa66:	9b04      	ldr	r3, [sp, #16]
 800aa68:	0052      	lsls	r2, r2, #1
 800aa6a:	6859      	ldr	r1, [r3, #4]
 800aa6c:	4291      	cmp	r1, r2
 800aa6e:	d302      	bcc.n	800aa76 <_malloc_r+0x1aa>
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	d000      	beq.n	800aa76 <_malloc_r+0x1aa>
 800aa74:	e0bb      	b.n	800abee <_malloc_r+0x322>
 800aa76:	2203      	movs	r2, #3
 800aa78:	6883      	ldr	r3, [r0, #8]
 800aa7a:	9302      	str	r3, [sp, #8]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	4393      	bics	r3, r2
 800aa80:	9303      	str	r3, [sp, #12]
 800aa82:	42ab      	cmp	r3, r5
 800aa84:	d303      	bcc.n	800aa8e <_malloc_r+0x1c2>
 800aa86:	1b59      	subs	r1, r3, r5
 800aa88:	290f      	cmp	r1, #15
 800aa8a:	dd00      	ble.n	800aa8e <_malloc_r+0x1c2>
 800aa8c:	e123      	b.n	800acd6 <_malloc_r+0x40a>
 800aa8e:	9b02      	ldr	r3, [sp, #8]
 800aa90:	9a03      	ldr	r2, [sp, #12]
 800aa92:	2008      	movs	r0, #8
 800aa94:	189e      	adds	r6, r3, r2
 800aa96:	4b5a      	ldr	r3, [pc, #360]	; (800ac00 <_malloc_r+0x334>)
 800aa98:	681f      	ldr	r7, [r3, #0]
 800aa9a:	f001 fb11 	bl	800c0c0 <sysconf>
 800aa9e:	4b59      	ldr	r3, [pc, #356]	; (800ac04 <_malloc_r+0x338>)
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	197f      	adds	r7, r7, r5
 800aaa6:	9004      	str	r0, [sp, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	d003      	beq.n	800aab4 <_malloc_r+0x1e8>
 800aaac:	1e7b      	subs	r3, r7, #1
 800aaae:	181b      	adds	r3, r3, r0
 800aab0:	4247      	negs	r7, r0
 800aab2:	401f      	ands	r7, r3
 800aab4:	0039      	movs	r1, r7
 800aab6:	9801      	ldr	r0, [sp, #4]
 800aab8:	f001 faae 	bl	800c018 <_sbrk_r>
 800aabc:	0004      	movs	r4, r0
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	d100      	bne.n	800aac4 <_malloc_r+0x1f8>
 800aac2:	e0de      	b.n	800ac82 <_malloc_r+0x3b6>
 800aac4:	4286      	cmp	r6, r0
 800aac6:	d904      	bls.n	800aad2 <_malloc_r+0x206>
 800aac8:	4b4a      	ldr	r3, [pc, #296]	; (800abf4 <_malloc_r+0x328>)
 800aaca:	9a02      	ldr	r2, [sp, #8]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d000      	beq.n	800aad2 <_malloc_r+0x206>
 800aad0:	e0d7      	b.n	800ac82 <_malloc_r+0x3b6>
 800aad2:	4a4d      	ldr	r2, [pc, #308]	; (800ac08 <_malloc_r+0x33c>)
 800aad4:	6813      	ldr	r3, [r2, #0]
 800aad6:	18fb      	adds	r3, r7, r3
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	9a04      	ldr	r2, [sp, #16]
 800aadc:	3a01      	subs	r2, #1
 800aade:	42a6      	cmp	r6, r4
 800aae0:	d000      	beq.n	800aae4 <_malloc_r+0x218>
 800aae2:	e097      	b.n	800ac14 <_malloc_r+0x348>
 800aae4:	4216      	tst	r6, r2
 800aae6:	d000      	beq.n	800aaea <_malloc_r+0x21e>
 800aae8:	e094      	b.n	800ac14 <_malloc_r+0x348>
 800aaea:	4b42      	ldr	r3, [pc, #264]	; (800abf4 <_malloc_r+0x328>)
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	19df      	adds	r7, r3, r7
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	433b      	orrs	r3, r7
 800aaf6:	6053      	str	r3, [r2, #4]
 800aaf8:	4b43      	ldr	r3, [pc, #268]	; (800ac08 <_malloc_r+0x33c>)
 800aafa:	4a44      	ldr	r2, [pc, #272]	; (800ac0c <_malloc_r+0x340>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6811      	ldr	r1, [r2, #0]
 800ab00:	428b      	cmp	r3, r1
 800ab02:	d900      	bls.n	800ab06 <_malloc_r+0x23a>
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	4a42      	ldr	r2, [pc, #264]	; (800ac10 <_malloc_r+0x344>)
 800ab08:	6811      	ldr	r1, [r2, #0]
 800ab0a:	428b      	cmp	r3, r1
 800ab0c:	d800      	bhi.n	800ab10 <_malloc_r+0x244>
 800ab0e:	e0b8      	b.n	800ac82 <_malloc_r+0x3b6>
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	e0b6      	b.n	800ac82 <_malloc_r+0x3b6>
 800ab14:	0a50      	lsrs	r0, r2, #9
 800ab16:	2804      	cmp	r0, #4
 800ab18:	d811      	bhi.n	800ab3e <_malloc_r+0x272>
 800ab1a:	0991      	lsrs	r1, r2, #6
 800ab1c:	3138      	adds	r1, #56	; 0x38
 800ab1e:	00cf      	lsls	r7, r1, #3
 800ab20:	19bf      	adds	r7, r7, r6
 800ab22:	68b8      	ldr	r0, [r7, #8]
 800ab24:	4287      	cmp	r7, r0
 800ab26:	d125      	bne.n	800ab74 <_malloc_r+0x2a8>
 800ab28:	2201      	movs	r2, #1
 800ab2a:	1089      	asrs	r1, r1, #2
 800ab2c:	408a      	lsls	r2, r1
 800ab2e:	4661      	mov	r1, ip
 800ab30:	430a      	orrs	r2, r1
 800ab32:	6072      	str	r2, [r6, #4]
 800ab34:	60e7      	str	r7, [r4, #12]
 800ab36:	60a0      	str	r0, [r4, #8]
 800ab38:	60bc      	str	r4, [r7, #8]
 800ab3a:	60c4      	str	r4, [r0, #12]
 800ab3c:	e76b      	b.n	800aa16 <_malloc_r+0x14a>
 800ab3e:	2814      	cmp	r0, #20
 800ab40:	d802      	bhi.n	800ab48 <_malloc_r+0x27c>
 800ab42:	0001      	movs	r1, r0
 800ab44:	315b      	adds	r1, #91	; 0x5b
 800ab46:	e7ea      	b.n	800ab1e <_malloc_r+0x252>
 800ab48:	2854      	cmp	r0, #84	; 0x54
 800ab4a:	d802      	bhi.n	800ab52 <_malloc_r+0x286>
 800ab4c:	0b11      	lsrs	r1, r2, #12
 800ab4e:	316e      	adds	r1, #110	; 0x6e
 800ab50:	e7e5      	b.n	800ab1e <_malloc_r+0x252>
 800ab52:	21aa      	movs	r1, #170	; 0xaa
 800ab54:	0049      	lsls	r1, r1, #1
 800ab56:	4288      	cmp	r0, r1
 800ab58:	d802      	bhi.n	800ab60 <_malloc_r+0x294>
 800ab5a:	0bd1      	lsrs	r1, r2, #15
 800ab5c:	3177      	adds	r1, #119	; 0x77
 800ab5e:	e7de      	b.n	800ab1e <_malloc_r+0x252>
 800ab60:	4f26      	ldr	r7, [pc, #152]	; (800abfc <_malloc_r+0x330>)
 800ab62:	217e      	movs	r1, #126	; 0x7e
 800ab64:	42b8      	cmp	r0, r7
 800ab66:	d8da      	bhi.n	800ab1e <_malloc_r+0x252>
 800ab68:	0c91      	lsrs	r1, r2, #18
 800ab6a:	317c      	adds	r1, #124	; 0x7c
 800ab6c:	e7d7      	b.n	800ab1e <_malloc_r+0x252>
 800ab6e:	6880      	ldr	r0, [r0, #8]
 800ab70:	4287      	cmp	r7, r0
 800ab72:	d004      	beq.n	800ab7e <_malloc_r+0x2b2>
 800ab74:	2603      	movs	r6, #3
 800ab76:	6841      	ldr	r1, [r0, #4]
 800ab78:	43b1      	bics	r1, r6
 800ab7a:	4291      	cmp	r1, r2
 800ab7c:	d8f7      	bhi.n	800ab6e <_malloc_r+0x2a2>
 800ab7e:	68c7      	ldr	r7, [r0, #12]
 800ab80:	e7d8      	b.n	800ab34 <_malloc_r+0x268>
 800ab82:	2603      	movs	r6, #3
 800ab84:	6861      	ldr	r1, [r4, #4]
 800ab86:	43b1      	bics	r1, r6
 800ab88:	9103      	str	r1, [sp, #12]
 800ab8a:	68e6      	ldr	r6, [r4, #12]
 800ab8c:	1b49      	subs	r1, r1, r5
 800ab8e:	290f      	cmp	r1, #15
 800ab90:	dd10      	ble.n	800abb4 <_malloc_r+0x2e8>
 800ab92:	2201      	movs	r2, #1
 800ab94:	1963      	adds	r3, r4, r5
 800ab96:	4315      	orrs	r5, r2
 800ab98:	6065      	str	r5, [r4, #4]
 800ab9a:	68a5      	ldr	r5, [r4, #8]
 800ab9c:	430a      	orrs	r2, r1
 800ab9e:	60ee      	str	r6, [r5, #12]
 800aba0:	60b5      	str	r5, [r6, #8]
 800aba2:	6143      	str	r3, [r0, #20]
 800aba4:	6103      	str	r3, [r0, #16]
 800aba6:	4814      	ldr	r0, [pc, #80]	; (800abf8 <_malloc_r+0x32c>)
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	60d8      	str	r0, [r3, #12]
 800abac:	6098      	str	r0, [r3, #8]
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	50e1      	str	r1, [r4, r3]
 800abb2:	e6eb      	b.n	800a98c <_malloc_r+0xc0>
 800abb4:	2900      	cmp	r1, #0
 800abb6:	db09      	blt.n	800abcc <_malloc_r+0x300>
 800abb8:	9b03      	ldr	r3, [sp, #12]
 800abba:	18e1      	adds	r1, r4, r3
 800abbc:	2301      	movs	r3, #1
 800abbe:	684a      	ldr	r2, [r1, #4]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	604b      	str	r3, [r1, #4]
 800abc4:	68a3      	ldr	r3, [r4, #8]
 800abc6:	60de      	str	r6, [r3, #12]
 800abc8:	60b3      	str	r3, [r6, #8]
 800abca:	e6df      	b.n	800a98c <_malloc_r+0xc0>
 800abcc:	0034      	movs	r4, r6
 800abce:	e739      	b.n	800aa44 <_malloc_r+0x178>
 800abd0:	2108      	movs	r1, #8
 800abd2:	4249      	negs	r1, r1
 800abd4:	448c      	add	ip, r1
 800abd6:	4661      	mov	r1, ip
 800abd8:	6889      	ldr	r1, [r1, #8]
 800abda:	3b01      	subs	r3, #1
 800abdc:	4561      	cmp	r1, ip
 800abde:	d100      	bne.n	800abe2 <_malloc_r+0x316>
 800abe0:	e73a      	b.n	800aa58 <_malloc_r+0x18c>
 800abe2:	e740      	b.n	800aa66 <_malloc_r+0x19a>
 800abe4:	3304      	adds	r3, #4
 800abe6:	0052      	lsls	r2, r2, #1
 800abe8:	420a      	tst	r2, r1
 800abea:	d0fb      	beq.n	800abe4 <_malloc_r+0x318>
 800abec:	e724      	b.n	800aa38 <_malloc_r+0x16c>
 800abee:	9b02      	ldr	r3, [sp, #8]
 800abf0:	e7fa      	b.n	800abe8 <_malloc_r+0x31c>
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	20000028 	.word	0x20000028
 800abf8:	20000030 	.word	0x20000030
 800abfc:	00000554 	.word	0x00000554
 800ac00:	20000c60 	.word	0x20000c60
 800ac04:	20000430 	.word	0x20000430
 800ac08:	20000c30 	.word	0x20000c30
 800ac0c:	20000c58 	.word	0x20000c58
 800ac10:	20000c5c 	.word	0x20000c5c
 800ac14:	4934      	ldr	r1, [pc, #208]	; (800ace8 <_malloc_r+0x41c>)
 800ac16:	6808      	ldr	r0, [r1, #0]
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d140      	bne.n	800ac9e <_malloc_r+0x3d2>
 800ac1c:	600c      	str	r4, [r1, #0]
 800ac1e:	2107      	movs	r1, #7
 800ac20:	0026      	movs	r6, r4
 800ac22:	2300      	movs	r3, #0
 800ac24:	400e      	ands	r6, r1
 800ac26:	420c      	tst	r4, r1
 800ac28:	d002      	beq.n	800ac30 <_malloc_r+0x364>
 800ac2a:	3308      	adds	r3, #8
 800ac2c:	1b9b      	subs	r3, r3, r6
 800ac2e:	18e4      	adds	r4, r4, r3
 800ac30:	19e1      	adds	r1, r4, r7
 800ac32:	9105      	str	r1, [sp, #20]
 800ac34:	9f05      	ldr	r7, [sp, #20]
 800ac36:	9904      	ldr	r1, [sp, #16]
 800ac38:	4017      	ands	r7, r2
 800ac3a:	18cb      	adds	r3, r1, r3
 800ac3c:	1bdf      	subs	r7, r3, r7
 800ac3e:	4017      	ands	r7, r2
 800ac40:	0039      	movs	r1, r7
 800ac42:	9801      	ldr	r0, [sp, #4]
 800ac44:	f001 f9e8 	bl	800c018 <_sbrk_r>
 800ac48:	1c43      	adds	r3, r0, #1
 800ac4a:	d107      	bne.n	800ac5c <_malloc_r+0x390>
 800ac4c:	1e37      	subs	r7, r6, #0
 800ac4e:	9805      	ldr	r0, [sp, #20]
 800ac50:	d004      	beq.n	800ac5c <_malloc_r+0x390>
 800ac52:	0030      	movs	r0, r6
 800ac54:	2700      	movs	r7, #0
 800ac56:	9b05      	ldr	r3, [sp, #20]
 800ac58:	3808      	subs	r0, #8
 800ac5a:	1818      	adds	r0, r3, r0
 800ac5c:	4a23      	ldr	r2, [pc, #140]	; (800acec <_malloc_r+0x420>)
 800ac5e:	1b00      	subs	r0, r0, r4
 800ac60:	6813      	ldr	r3, [r2, #0]
 800ac62:	19c0      	adds	r0, r0, r7
 800ac64:	19db      	adds	r3, r3, r7
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	4b21      	ldr	r3, [pc, #132]	; (800acf0 <_malloc_r+0x424>)
 800ac6c:	9902      	ldr	r1, [sp, #8]
 800ac6e:	4310      	orrs	r0, r2
 800ac70:	609c      	str	r4, [r3, #8]
 800ac72:	6060      	str	r0, [r4, #4]
 800ac74:	4299      	cmp	r1, r3
 800ac76:	d100      	bne.n	800ac7a <_malloc_r+0x3ae>
 800ac78:	e73e      	b.n	800aaf8 <_malloc_r+0x22c>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	2b0f      	cmp	r3, #15
 800ac7e:	d813      	bhi.n	800aca8 <_malloc_r+0x3dc>
 800ac80:	6062      	str	r2, [r4, #4]
 800ac82:	2203      	movs	r2, #3
 800ac84:	4b1a      	ldr	r3, [pc, #104]	; (800acf0 <_malloc_r+0x424>)
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	4393      	bics	r3, r2
 800ac8c:	1b59      	subs	r1, r3, r5
 800ac8e:	42ab      	cmp	r3, r5
 800ac90:	d301      	bcc.n	800ac96 <_malloc_r+0x3ca>
 800ac92:	290f      	cmp	r1, #15
 800ac94:	dc1f      	bgt.n	800acd6 <_malloc_r+0x40a>
 800ac96:	9801      	ldr	r0, [sp, #4]
 800ac98:	f000 f834 	bl	800ad04 <__malloc_unlock>
 800ac9c:	e623      	b.n	800a8e6 <_malloc_r+0x1a>
 800ac9e:	4913      	ldr	r1, [pc, #76]	; (800acec <_malloc_r+0x420>)
 800aca0:	1ba6      	subs	r6, r4, r6
 800aca2:	18f6      	adds	r6, r6, r3
 800aca4:	600e      	str	r6, [r1, #0]
 800aca6:	e7ba      	b.n	800ac1e <_malloc_r+0x352>
 800aca8:	2107      	movs	r1, #7
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	3b0c      	subs	r3, #12
 800acae:	438b      	bics	r3, r1
 800acb0:	9902      	ldr	r1, [sp, #8]
 800acb2:	6849      	ldr	r1, [r1, #4]
 800acb4:	400a      	ands	r2, r1
 800acb6:	9902      	ldr	r1, [sp, #8]
 800acb8:	431a      	orrs	r2, r3
 800acba:	604a      	str	r2, [r1, #4]
 800acbc:	18ca      	adds	r2, r1, r3
 800acbe:	2105      	movs	r1, #5
 800acc0:	6051      	str	r1, [r2, #4]
 800acc2:	6091      	str	r1, [r2, #8]
 800acc4:	2b0f      	cmp	r3, #15
 800acc6:	d800      	bhi.n	800acca <_malloc_r+0x3fe>
 800acc8:	e716      	b.n	800aaf8 <_malloc_r+0x22c>
 800acca:	9902      	ldr	r1, [sp, #8]
 800accc:	9801      	ldr	r0, [sp, #4]
 800acce:	3108      	adds	r1, #8
 800acd0:	f001 fa7c 	bl	800c1cc <_free_r>
 800acd4:	e710      	b.n	800aaf8 <_malloc_r+0x22c>
 800acd6:	2201      	movs	r2, #1
 800acd8:	0013      	movs	r3, r2
 800acda:	4805      	ldr	r0, [pc, #20]	; (800acf0 <_malloc_r+0x424>)
 800acdc:	432b      	orrs	r3, r5
 800acde:	6884      	ldr	r4, [r0, #8]
 800ace0:	6063      	str	r3, [r4, #4]
 800ace2:	1963      	adds	r3, r4, r5
 800ace4:	6083      	str	r3, [r0, #8]
 800ace6:	e623      	b.n	800a930 <_malloc_r+0x64>
 800ace8:	20000430 	.word	0x20000430
 800acec:	20000c30 	.word	0x20000c30
 800acf0:	20000028 	.word	0x20000028

0800acf4 <__malloc_lock>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	4802      	ldr	r0, [pc, #8]	; (800ad00 <__malloc_lock+0xc>)
 800acf8:	f001 f9e0 	bl	800c0bc <__retarget_lock_acquire_recursive>
 800acfc:	bd10      	pop	{r4, pc}
 800acfe:	46c0      	nop			; (mov r8, r8)
 800ad00:	20000da5 	.word	0x20000da5

0800ad04 <__malloc_unlock>:
 800ad04:	b510      	push	{r4, lr}
 800ad06:	4802      	ldr	r0, [pc, #8]	; (800ad10 <__malloc_unlock+0xc>)
 800ad08:	f001 f9d9 	bl	800c0be <__retarget_lock_release_recursive>
 800ad0c:	bd10      	pop	{r4, pc}
 800ad0e:	46c0      	nop			; (mov r8, r8)
 800ad10:	20000da5 	.word	0x20000da5

0800ad14 <sulp>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	0016      	movs	r6, r2
 800ad18:	000d      	movs	r5, r1
 800ad1a:	f002 f9ad 	bl	800d078 <__ulp>
 800ad1e:	2e00      	cmp	r6, #0
 800ad20:	d00d      	beq.n	800ad3e <sulp+0x2a>
 800ad22:	236b      	movs	r3, #107	; 0x6b
 800ad24:	006a      	lsls	r2, r5, #1
 800ad26:	0d52      	lsrs	r2, r2, #21
 800ad28:	1a9b      	subs	r3, r3, r2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	dd07      	ble.n	800ad3e <sulp+0x2a>
 800ad2e:	2400      	movs	r4, #0
 800ad30:	4a03      	ldr	r2, [pc, #12]	; (800ad40 <sulp+0x2c>)
 800ad32:	051b      	lsls	r3, r3, #20
 800ad34:	189d      	adds	r5, r3, r2
 800ad36:	002b      	movs	r3, r5
 800ad38:	0022      	movs	r2, r4
 800ad3a:	f7f6 fc97 	bl	800166c <__aeabi_dmul>
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}
 800ad40:	3ff00000 	.word	0x3ff00000

0800ad44 <_strtod_l>:
 800ad44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad46:	b0a1      	sub	sp, #132	; 0x84
 800ad48:	9219      	str	r2, [sp, #100]	; 0x64
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	2700      	movs	r7, #0
 800ad50:	9004      	str	r0, [sp, #16]
 800ad52:	9107      	str	r1, [sp, #28]
 800ad54:	921c      	str	r2, [sp, #112]	; 0x70
 800ad56:	911b      	str	r1, [sp, #108]	; 0x6c
 800ad58:	780a      	ldrb	r2, [r1, #0]
 800ad5a:	2a2b      	cmp	r2, #43	; 0x2b
 800ad5c:	d055      	beq.n	800ae0a <_strtod_l+0xc6>
 800ad5e:	d841      	bhi.n	800ade4 <_strtod_l+0xa0>
 800ad60:	2a0d      	cmp	r2, #13
 800ad62:	d83b      	bhi.n	800addc <_strtod_l+0x98>
 800ad64:	2a08      	cmp	r2, #8
 800ad66:	d83b      	bhi.n	800ade0 <_strtod_l+0x9c>
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	d044      	beq.n	800adf6 <_strtod_l+0xb2>
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	920f      	str	r2, [sp, #60]	; 0x3c
 800ad70:	2100      	movs	r1, #0
 800ad72:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800ad74:	9109      	str	r1, [sp, #36]	; 0x24
 800ad76:	782a      	ldrb	r2, [r5, #0]
 800ad78:	2a30      	cmp	r2, #48	; 0x30
 800ad7a:	d000      	beq.n	800ad7e <_strtod_l+0x3a>
 800ad7c:	e085      	b.n	800ae8a <_strtod_l+0x146>
 800ad7e:	786a      	ldrb	r2, [r5, #1]
 800ad80:	3120      	adds	r1, #32
 800ad82:	438a      	bics	r2, r1
 800ad84:	2a58      	cmp	r2, #88	; 0x58
 800ad86:	d000      	beq.n	800ad8a <_strtod_l+0x46>
 800ad88:	e075      	b.n	800ae76 <_strtod_l+0x132>
 800ad8a:	9302      	str	r3, [sp, #8]
 800ad8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad8e:	4a97      	ldr	r2, [pc, #604]	; (800afec <_strtod_l+0x2a8>)
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	ab1c      	add	r3, sp, #112	; 0x70
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	9804      	ldr	r0, [sp, #16]
 800ad98:	ab1d      	add	r3, sp, #116	; 0x74
 800ad9a:	a91b      	add	r1, sp, #108	; 0x6c
 800ad9c:	f001 fb32 	bl	800c404 <__gethex>
 800ada0:	230f      	movs	r3, #15
 800ada2:	0002      	movs	r2, r0
 800ada4:	401a      	ands	r2, r3
 800ada6:	0004      	movs	r4, r0
 800ada8:	9205      	str	r2, [sp, #20]
 800adaa:	4218      	tst	r0, r3
 800adac:	d005      	beq.n	800adba <_strtod_l+0x76>
 800adae:	2a06      	cmp	r2, #6
 800adb0:	d12d      	bne.n	800ae0e <_strtod_l+0xca>
 800adb2:	1c6b      	adds	r3, r5, #1
 800adb4:	931b      	str	r3, [sp, #108]	; 0x6c
 800adb6:	2300      	movs	r3, #0
 800adb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800adba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d002      	beq.n	800adc6 <_strtod_l+0x82>
 800adc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800adc2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01b      	beq.n	800ae04 <_strtod_l+0xc0>
 800adcc:	2380      	movs	r3, #128	; 0x80
 800adce:	0032      	movs	r2, r6
 800add0:	061b      	lsls	r3, r3, #24
 800add2:	18fb      	adds	r3, r7, r3
 800add4:	0010      	movs	r0, r2
 800add6:	0019      	movs	r1, r3
 800add8:	b021      	add	sp, #132	; 0x84
 800adda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800addc:	2a20      	cmp	r2, #32
 800adde:	d1c5      	bne.n	800ad6c <_strtod_l+0x28>
 800ade0:	3101      	adds	r1, #1
 800ade2:	e7b8      	b.n	800ad56 <_strtod_l+0x12>
 800ade4:	2a2d      	cmp	r2, #45	; 0x2d
 800ade6:	d1c1      	bne.n	800ad6c <_strtod_l+0x28>
 800ade8:	3a2c      	subs	r2, #44	; 0x2c
 800adea:	920f      	str	r2, [sp, #60]	; 0x3c
 800adec:	1c4a      	adds	r2, r1, #1
 800adee:	921b      	str	r2, [sp, #108]	; 0x6c
 800adf0:	784a      	ldrb	r2, [r1, #1]
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	d1bc      	bne.n	800ad70 <_strtod_l+0x2c>
 800adf6:	9b07      	ldr	r3, [sp, #28]
 800adf8:	931b      	str	r3, [sp, #108]	; 0x6c
 800adfa:	2300      	movs	r3, #0
 800adfc:	930f      	str	r3, [sp, #60]	; 0x3c
 800adfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1dd      	bne.n	800adc0 <_strtod_l+0x7c>
 800ae04:	0032      	movs	r2, r6
 800ae06:	003b      	movs	r3, r7
 800ae08:	e7e4      	b.n	800add4 <_strtod_l+0x90>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	e7ed      	b.n	800adea <_strtod_l+0xa6>
 800ae0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ae10:	2a00      	cmp	r2, #0
 800ae12:	d007      	beq.n	800ae24 <_strtod_l+0xe0>
 800ae14:	2135      	movs	r1, #53	; 0x35
 800ae16:	a81e      	add	r0, sp, #120	; 0x78
 800ae18:	f002 fa1f 	bl	800d25a <__copybits>
 800ae1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ae1e:	9804      	ldr	r0, [sp, #16]
 800ae20:	f001 fe1c 	bl	800ca5c <_Bfree>
 800ae24:	9805      	ldr	r0, [sp, #20]
 800ae26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae28:	3801      	subs	r0, #1
 800ae2a:	2804      	cmp	r0, #4
 800ae2c:	d806      	bhi.n	800ae3c <_strtod_l+0xf8>
 800ae2e:	f7f5 f971 	bl	8000114 <__gnu_thumb1_case_uqi>
 800ae32:	0312      	.short	0x0312
 800ae34:	1e1c      	.short	0x1e1c
 800ae36:	12          	.byte	0x12
 800ae37:	00          	.byte	0x00
 800ae38:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ae3a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800ae3c:	05e4      	lsls	r4, r4, #23
 800ae3e:	d502      	bpl.n	800ae46 <_strtod_l+0x102>
 800ae40:	2380      	movs	r3, #128	; 0x80
 800ae42:	061b      	lsls	r3, r3, #24
 800ae44:	431f      	orrs	r7, r3
 800ae46:	4b6a      	ldr	r3, [pc, #424]	; (800aff0 <_strtod_l+0x2ac>)
 800ae48:	423b      	tst	r3, r7
 800ae4a:	d1b6      	bne.n	800adba <_strtod_l+0x76>
 800ae4c:	f001 f90a 	bl	800c064 <__errno>
 800ae50:	2322      	movs	r3, #34	; 0x22
 800ae52:	6003      	str	r3, [r0, #0]
 800ae54:	e7b1      	b.n	800adba <_strtod_l+0x76>
 800ae56:	4967      	ldr	r1, [pc, #412]	; (800aff4 <_strtod_l+0x2b0>)
 800ae58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ae5a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800ae5c:	400a      	ands	r2, r1
 800ae5e:	4966      	ldr	r1, [pc, #408]	; (800aff8 <_strtod_l+0x2b4>)
 800ae60:	185b      	adds	r3, r3, r1
 800ae62:	051b      	lsls	r3, r3, #20
 800ae64:	431a      	orrs	r2, r3
 800ae66:	0017      	movs	r7, r2
 800ae68:	e7e8      	b.n	800ae3c <_strtod_l+0xf8>
 800ae6a:	4f61      	ldr	r7, [pc, #388]	; (800aff0 <_strtod_l+0x2ac>)
 800ae6c:	e7e6      	b.n	800ae3c <_strtod_l+0xf8>
 800ae6e:	2601      	movs	r6, #1
 800ae70:	4f62      	ldr	r7, [pc, #392]	; (800affc <_strtod_l+0x2b8>)
 800ae72:	4276      	negs	r6, r6
 800ae74:	e7e2      	b.n	800ae3c <_strtod_l+0xf8>
 800ae76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b30      	cmp	r3, #48	; 0x30
 800ae80:	d0f9      	beq.n	800ae76 <_strtod_l+0x132>
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d099      	beq.n	800adba <_strtod_l+0x76>
 800ae86:	2301      	movs	r3, #1
 800ae88:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8a:	2500      	movs	r5, #0
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae90:	950d      	str	r5, [sp, #52]	; 0x34
 800ae92:	9310      	str	r3, [sp, #64]	; 0x40
 800ae94:	9508      	str	r5, [sp, #32]
 800ae96:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800ae98:	7804      	ldrb	r4, [r0, #0]
 800ae9a:	0023      	movs	r3, r4
 800ae9c:	3b30      	subs	r3, #48	; 0x30
 800ae9e:	b2d9      	uxtb	r1, r3
 800aea0:	2909      	cmp	r1, #9
 800aea2:	d927      	bls.n	800aef4 <_strtod_l+0x1b0>
 800aea4:	2201      	movs	r2, #1
 800aea6:	4956      	ldr	r1, [pc, #344]	; (800b000 <_strtod_l+0x2bc>)
 800aea8:	f001 f838 	bl	800bf1c <strncmp>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	d031      	beq.n	800af14 <_strtod_l+0x1d0>
 800aeb0:	2000      	movs	r0, #0
 800aeb2:	0023      	movs	r3, r4
 800aeb4:	4684      	mov	ip, r0
 800aeb6:	9a08      	ldr	r2, [sp, #32]
 800aeb8:	900c      	str	r0, [sp, #48]	; 0x30
 800aeba:	9205      	str	r2, [sp, #20]
 800aebc:	2220      	movs	r2, #32
 800aebe:	0019      	movs	r1, r3
 800aec0:	4391      	bics	r1, r2
 800aec2:	000a      	movs	r2, r1
 800aec4:	2100      	movs	r1, #0
 800aec6:	9106      	str	r1, [sp, #24]
 800aec8:	2a45      	cmp	r2, #69	; 0x45
 800aeca:	d000      	beq.n	800aece <_strtod_l+0x18a>
 800aecc:	e0c2      	b.n	800b054 <_strtod_l+0x310>
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed2:	4303      	orrs	r3, r0
 800aed4:	4313      	orrs	r3, r2
 800aed6:	428b      	cmp	r3, r1
 800aed8:	d08d      	beq.n	800adf6 <_strtod_l+0xb2>
 800aeda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aedc:	9307      	str	r3, [sp, #28]
 800aede:	3301      	adds	r3, #1
 800aee0:	931b      	str	r3, [sp, #108]	; 0x6c
 800aee2:	9b07      	ldr	r3, [sp, #28]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b2b      	cmp	r3, #43	; 0x2b
 800aee8:	d071      	beq.n	800afce <_strtod_l+0x28a>
 800aeea:	000c      	movs	r4, r1
 800aeec:	2b2d      	cmp	r3, #45	; 0x2d
 800aeee:	d174      	bne.n	800afda <_strtod_l+0x296>
 800aef0:	2401      	movs	r4, #1
 800aef2:	e06d      	b.n	800afd0 <_strtod_l+0x28c>
 800aef4:	9908      	ldr	r1, [sp, #32]
 800aef6:	2908      	cmp	r1, #8
 800aef8:	dc09      	bgt.n	800af0e <_strtod_l+0x1ca>
 800aefa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aefc:	4351      	muls	r1, r2
 800aefe:	185b      	adds	r3, r3, r1
 800af00:	930d      	str	r3, [sp, #52]	; 0x34
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	3001      	adds	r0, #1
 800af06:	3301      	adds	r3, #1
 800af08:	9308      	str	r3, [sp, #32]
 800af0a:	901b      	str	r0, [sp, #108]	; 0x6c
 800af0c:	e7c3      	b.n	800ae96 <_strtod_l+0x152>
 800af0e:	4355      	muls	r5, r2
 800af10:	195d      	adds	r5, r3, r5
 800af12:	e7f6      	b.n	800af02 <_strtod_l+0x1be>
 800af14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af16:	1c5a      	adds	r2, r3, #1
 800af18:	921b      	str	r2, [sp, #108]	; 0x6c
 800af1a:	9a08      	ldr	r2, [sp, #32]
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	2a00      	cmp	r2, #0
 800af20:	d03a      	beq.n	800af98 <_strtod_l+0x254>
 800af22:	900c      	str	r0, [sp, #48]	; 0x30
 800af24:	9205      	str	r2, [sp, #20]
 800af26:	001a      	movs	r2, r3
 800af28:	3a30      	subs	r2, #48	; 0x30
 800af2a:	2a09      	cmp	r2, #9
 800af2c:	d912      	bls.n	800af54 <_strtod_l+0x210>
 800af2e:	2201      	movs	r2, #1
 800af30:	4694      	mov	ip, r2
 800af32:	e7c3      	b.n	800aebc <_strtod_l+0x178>
 800af34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af36:	3001      	adds	r0, #1
 800af38:	1c5a      	adds	r2, r3, #1
 800af3a:	921b      	str	r2, [sp, #108]	; 0x6c
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	2b30      	cmp	r3, #48	; 0x30
 800af40:	d0f8      	beq.n	800af34 <_strtod_l+0x1f0>
 800af42:	001a      	movs	r2, r3
 800af44:	3a31      	subs	r2, #49	; 0x31
 800af46:	2a08      	cmp	r2, #8
 800af48:	d83c      	bhi.n	800afc4 <_strtod_l+0x280>
 800af4a:	900c      	str	r0, [sp, #48]	; 0x30
 800af4c:	2000      	movs	r0, #0
 800af4e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800af50:	9005      	str	r0, [sp, #20]
 800af52:	9210      	str	r2, [sp, #64]	; 0x40
 800af54:	001a      	movs	r2, r3
 800af56:	1c41      	adds	r1, r0, #1
 800af58:	3a30      	subs	r2, #48	; 0x30
 800af5a:	2b30      	cmp	r3, #48	; 0x30
 800af5c:	d016      	beq.n	800af8c <_strtod_l+0x248>
 800af5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af60:	185b      	adds	r3, r3, r1
 800af62:	930c      	str	r3, [sp, #48]	; 0x30
 800af64:	9b05      	ldr	r3, [sp, #20]
 800af66:	210a      	movs	r1, #10
 800af68:	469c      	mov	ip, r3
 800af6a:	4484      	add	ip, r0
 800af6c:	4563      	cmp	r3, ip
 800af6e:	d115      	bne.n	800af9c <_strtod_l+0x258>
 800af70:	9905      	ldr	r1, [sp, #20]
 800af72:	9b05      	ldr	r3, [sp, #20]
 800af74:	3101      	adds	r1, #1
 800af76:	1809      	adds	r1, r1, r0
 800af78:	181b      	adds	r3, r3, r0
 800af7a:	9105      	str	r1, [sp, #20]
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	dc19      	bgt.n	800afb4 <_strtod_l+0x270>
 800af80:	230a      	movs	r3, #10
 800af82:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af84:	434b      	muls	r3, r1
 800af86:	2100      	movs	r1, #0
 800af88:	18d3      	adds	r3, r2, r3
 800af8a:	930d      	str	r3, [sp, #52]	; 0x34
 800af8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af8e:	0008      	movs	r0, r1
 800af90:	1c5a      	adds	r2, r3, #1
 800af92:	921b      	str	r2, [sp, #108]	; 0x6c
 800af94:	785b      	ldrb	r3, [r3, #1]
 800af96:	e7c6      	b.n	800af26 <_strtod_l+0x1e2>
 800af98:	9808      	ldr	r0, [sp, #32]
 800af9a:	e7d0      	b.n	800af3e <_strtod_l+0x1fa>
 800af9c:	1c5c      	adds	r4, r3, #1
 800af9e:	2b08      	cmp	r3, #8
 800afa0:	dc04      	bgt.n	800afac <_strtod_l+0x268>
 800afa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afa4:	434b      	muls	r3, r1
 800afa6:	930d      	str	r3, [sp, #52]	; 0x34
 800afa8:	0023      	movs	r3, r4
 800afaa:	e7df      	b.n	800af6c <_strtod_l+0x228>
 800afac:	2c10      	cmp	r4, #16
 800afae:	dcfb      	bgt.n	800afa8 <_strtod_l+0x264>
 800afb0:	434d      	muls	r5, r1
 800afb2:	e7f9      	b.n	800afa8 <_strtod_l+0x264>
 800afb4:	9b05      	ldr	r3, [sp, #20]
 800afb6:	2100      	movs	r1, #0
 800afb8:	2b10      	cmp	r3, #16
 800afba:	dce7      	bgt.n	800af8c <_strtod_l+0x248>
 800afbc:	230a      	movs	r3, #10
 800afbe:	435d      	muls	r5, r3
 800afc0:	1955      	adds	r5, r2, r5
 800afc2:	e7e3      	b.n	800af8c <_strtod_l+0x248>
 800afc4:	2200      	movs	r2, #0
 800afc6:	920c      	str	r2, [sp, #48]	; 0x30
 800afc8:	9205      	str	r2, [sp, #20]
 800afca:	3201      	adds	r2, #1
 800afcc:	e7b0      	b.n	800af30 <_strtod_l+0x1ec>
 800afce:	2400      	movs	r4, #0
 800afd0:	9b07      	ldr	r3, [sp, #28]
 800afd2:	3302      	adds	r3, #2
 800afd4:	931b      	str	r3, [sp, #108]	; 0x6c
 800afd6:	9b07      	ldr	r3, [sp, #28]
 800afd8:	789b      	ldrb	r3, [r3, #2]
 800afda:	001a      	movs	r2, r3
 800afdc:	3a30      	subs	r2, #48	; 0x30
 800afde:	2a09      	cmp	r2, #9
 800afe0:	d914      	bls.n	800b00c <_strtod_l+0x2c8>
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	921b      	str	r2, [sp, #108]	; 0x6c
 800afe6:	2200      	movs	r2, #0
 800afe8:	e033      	b.n	800b052 <_strtod_l+0x30e>
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	08014578 	.word	0x08014578
 800aff0:	7ff00000 	.word	0x7ff00000
 800aff4:	ffefffff 	.word	0xffefffff
 800aff8:	00000433 	.word	0x00000433
 800affc:	7fffffff 	.word	0x7fffffff
 800b000:	08014574 	.word	0x08014574
 800b004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b006:	1c5a      	adds	r2, r3, #1
 800b008:	921b      	str	r2, [sp, #108]	; 0x6c
 800b00a:	785b      	ldrb	r3, [r3, #1]
 800b00c:	2b30      	cmp	r3, #48	; 0x30
 800b00e:	d0f9      	beq.n	800b004 <_strtod_l+0x2c0>
 800b010:	2200      	movs	r2, #0
 800b012:	9206      	str	r2, [sp, #24]
 800b014:	001a      	movs	r2, r3
 800b016:	3a31      	subs	r2, #49	; 0x31
 800b018:	2a08      	cmp	r2, #8
 800b01a:	d81b      	bhi.n	800b054 <_strtod_l+0x310>
 800b01c:	3b30      	subs	r3, #48	; 0x30
 800b01e:	930e      	str	r3, [sp, #56]	; 0x38
 800b020:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b022:	9306      	str	r3, [sp, #24]
 800b024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b026:	1c59      	adds	r1, r3, #1
 800b028:	911b      	str	r1, [sp, #108]	; 0x6c
 800b02a:	785b      	ldrb	r3, [r3, #1]
 800b02c:	001a      	movs	r2, r3
 800b02e:	3a30      	subs	r2, #48	; 0x30
 800b030:	2a09      	cmp	r2, #9
 800b032:	d93a      	bls.n	800b0aa <_strtod_l+0x366>
 800b034:	9a06      	ldr	r2, [sp, #24]
 800b036:	1a8a      	subs	r2, r1, r2
 800b038:	49b2      	ldr	r1, [pc, #712]	; (800b304 <_strtod_l+0x5c0>)
 800b03a:	9106      	str	r1, [sp, #24]
 800b03c:	2a08      	cmp	r2, #8
 800b03e:	dc04      	bgt.n	800b04a <_strtod_l+0x306>
 800b040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b042:	9206      	str	r2, [sp, #24]
 800b044:	428a      	cmp	r2, r1
 800b046:	dd00      	ble.n	800b04a <_strtod_l+0x306>
 800b048:	9106      	str	r1, [sp, #24]
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	d002      	beq.n	800b054 <_strtod_l+0x310>
 800b04e:	9a06      	ldr	r2, [sp, #24]
 800b050:	4252      	negs	r2, r2
 800b052:	9206      	str	r2, [sp, #24]
 800b054:	9a05      	ldr	r2, [sp, #20]
 800b056:	2a00      	cmp	r2, #0
 800b058:	d14d      	bne.n	800b0f6 <_strtod_l+0x3b2>
 800b05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05c:	4310      	orrs	r0, r2
 800b05e:	d000      	beq.n	800b062 <_strtod_l+0x31e>
 800b060:	e6ab      	b.n	800adba <_strtod_l+0x76>
 800b062:	4662      	mov	r2, ip
 800b064:	2a00      	cmp	r2, #0
 800b066:	d000      	beq.n	800b06a <_strtod_l+0x326>
 800b068:	e6c5      	b.n	800adf6 <_strtod_l+0xb2>
 800b06a:	2b69      	cmp	r3, #105	; 0x69
 800b06c:	d027      	beq.n	800b0be <_strtod_l+0x37a>
 800b06e:	dc23      	bgt.n	800b0b8 <_strtod_l+0x374>
 800b070:	2b49      	cmp	r3, #73	; 0x49
 800b072:	d024      	beq.n	800b0be <_strtod_l+0x37a>
 800b074:	2b4e      	cmp	r3, #78	; 0x4e
 800b076:	d000      	beq.n	800b07a <_strtod_l+0x336>
 800b078:	e6bd      	b.n	800adf6 <_strtod_l+0xb2>
 800b07a:	49a3      	ldr	r1, [pc, #652]	; (800b308 <_strtod_l+0x5c4>)
 800b07c:	a81b      	add	r0, sp, #108	; 0x6c
 800b07e:	f001 fbf7 	bl	800c870 <__match>
 800b082:	2800      	cmp	r0, #0
 800b084:	d100      	bne.n	800b088 <_strtod_l+0x344>
 800b086:	e6b6      	b.n	800adf6 <_strtod_l+0xb2>
 800b088:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	2b28      	cmp	r3, #40	; 0x28
 800b08e:	d12c      	bne.n	800b0ea <_strtod_l+0x3a6>
 800b090:	499e      	ldr	r1, [pc, #632]	; (800b30c <_strtod_l+0x5c8>)
 800b092:	aa1e      	add	r2, sp, #120	; 0x78
 800b094:	a81b      	add	r0, sp, #108	; 0x6c
 800b096:	f001 fbff 	bl	800c898 <__hexnan>
 800b09a:	2805      	cmp	r0, #5
 800b09c:	d125      	bne.n	800b0ea <_strtod_l+0x3a6>
 800b09e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b0a0:	4a9b      	ldr	r2, [pc, #620]	; (800b310 <_strtod_l+0x5cc>)
 800b0a2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	0017      	movs	r7, r2
 800b0a8:	e687      	b.n	800adba <_strtod_l+0x76>
 800b0aa:	220a      	movs	r2, #10
 800b0ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b0ae:	434a      	muls	r2, r1
 800b0b0:	18d2      	adds	r2, r2, r3
 800b0b2:	3a30      	subs	r2, #48	; 0x30
 800b0b4:	920e      	str	r2, [sp, #56]	; 0x38
 800b0b6:	e7b5      	b.n	800b024 <_strtod_l+0x2e0>
 800b0b8:	2b6e      	cmp	r3, #110	; 0x6e
 800b0ba:	d0de      	beq.n	800b07a <_strtod_l+0x336>
 800b0bc:	e69b      	b.n	800adf6 <_strtod_l+0xb2>
 800b0be:	4995      	ldr	r1, [pc, #596]	; (800b314 <_strtod_l+0x5d0>)
 800b0c0:	a81b      	add	r0, sp, #108	; 0x6c
 800b0c2:	f001 fbd5 	bl	800c870 <__match>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d100      	bne.n	800b0cc <_strtod_l+0x388>
 800b0ca:	e694      	b.n	800adf6 <_strtod_l+0xb2>
 800b0cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0ce:	4992      	ldr	r1, [pc, #584]	; (800b318 <_strtod_l+0x5d4>)
 800b0d0:	3b01      	subs	r3, #1
 800b0d2:	a81b      	add	r0, sp, #108	; 0x6c
 800b0d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0d6:	f001 fbcb 	bl	800c870 <__match>
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d102      	bne.n	800b0e4 <_strtod_l+0x3a0>
 800b0de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800b0e4:	2600      	movs	r6, #0
 800b0e6:	4f8a      	ldr	r7, [pc, #552]	; (800b310 <_strtod_l+0x5cc>)
 800b0e8:	e667      	b.n	800adba <_strtod_l+0x76>
 800b0ea:	488c      	ldr	r0, [pc, #560]	; (800b31c <_strtod_l+0x5d8>)
 800b0ec:	f000 fffc 	bl	800c0e8 <nan>
 800b0f0:	0006      	movs	r6, r0
 800b0f2:	000f      	movs	r7, r1
 800b0f4:	e661      	b.n	800adba <_strtod_l+0x76>
 800b0f6:	9b06      	ldr	r3, [sp, #24]
 800b0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0fe:	9b08      	ldr	r3, [sp, #32]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <_strtod_l+0x3c4>
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	9c05      	ldr	r4, [sp, #20]
 800b10a:	2c10      	cmp	r4, #16
 800b10c:	dd00      	ble.n	800b110 <_strtod_l+0x3cc>
 800b10e:	2410      	movs	r4, #16
 800b110:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b112:	f7f7 f973 	bl	80023fc <__aeabi_ui2d>
 800b116:	9b05      	ldr	r3, [sp, #20]
 800b118:	0006      	movs	r6, r0
 800b11a:	000f      	movs	r7, r1
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	dd15      	ble.n	800b14c <_strtod_l+0x408>
 800b120:	0022      	movs	r2, r4
 800b122:	4b7f      	ldr	r3, [pc, #508]	; (800b320 <_strtod_l+0x5dc>)
 800b124:	3a09      	subs	r2, #9
 800b126:	00d2      	lsls	r2, r2, #3
 800b128:	189b      	adds	r3, r3, r2
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f7f6 fa9d 	bl	800166c <__aeabi_dmul>
 800b132:	0006      	movs	r6, r0
 800b134:	0028      	movs	r0, r5
 800b136:	000f      	movs	r7, r1
 800b138:	f7f7 f960 	bl	80023fc <__aeabi_ui2d>
 800b13c:	0002      	movs	r2, r0
 800b13e:	000b      	movs	r3, r1
 800b140:	0030      	movs	r0, r6
 800b142:	0039      	movs	r1, r7
 800b144:	f7f5 fb38 	bl	80007b8 <__aeabi_dadd>
 800b148:	0006      	movs	r6, r0
 800b14a:	000f      	movs	r7, r1
 800b14c:	9b05      	ldr	r3, [sp, #20]
 800b14e:	2b0f      	cmp	r3, #15
 800b150:	dc39      	bgt.n	800b1c6 <_strtod_l+0x482>
 800b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d100      	bne.n	800b15a <_strtod_l+0x416>
 800b158:	e62f      	b.n	800adba <_strtod_l+0x76>
 800b15a:	dd24      	ble.n	800b1a6 <_strtod_l+0x462>
 800b15c:	2b16      	cmp	r3, #22
 800b15e:	dc09      	bgt.n	800b174 <_strtod_l+0x430>
 800b160:	496f      	ldr	r1, [pc, #444]	; (800b320 <_strtod_l+0x5dc>)
 800b162:	00db      	lsls	r3, r3, #3
 800b164:	18c9      	adds	r1, r1, r3
 800b166:	0032      	movs	r2, r6
 800b168:	6808      	ldr	r0, [r1, #0]
 800b16a:	6849      	ldr	r1, [r1, #4]
 800b16c:	003b      	movs	r3, r7
 800b16e:	f7f6 fa7d 	bl	800166c <__aeabi_dmul>
 800b172:	e7bd      	b.n	800b0f0 <_strtod_l+0x3ac>
 800b174:	2325      	movs	r3, #37	; 0x25
 800b176:	9a05      	ldr	r2, [sp, #20]
 800b178:	1a9b      	subs	r3, r3, r2
 800b17a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b17c:	4293      	cmp	r3, r2
 800b17e:	db22      	blt.n	800b1c6 <_strtod_l+0x482>
 800b180:	240f      	movs	r4, #15
 800b182:	9b05      	ldr	r3, [sp, #20]
 800b184:	4d66      	ldr	r5, [pc, #408]	; (800b320 <_strtod_l+0x5dc>)
 800b186:	1ae4      	subs	r4, r4, r3
 800b188:	00e1      	lsls	r1, r4, #3
 800b18a:	1869      	adds	r1, r5, r1
 800b18c:	0032      	movs	r2, r6
 800b18e:	6808      	ldr	r0, [r1, #0]
 800b190:	6849      	ldr	r1, [r1, #4]
 800b192:	003b      	movs	r3, r7
 800b194:	f7f6 fa6a 	bl	800166c <__aeabi_dmul>
 800b198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19a:	1b1c      	subs	r4, r3, r4
 800b19c:	00e4      	lsls	r4, r4, #3
 800b19e:	192d      	adds	r5, r5, r4
 800b1a0:	682a      	ldr	r2, [r5, #0]
 800b1a2:	686b      	ldr	r3, [r5, #4]
 800b1a4:	e7e3      	b.n	800b16e <_strtod_l+0x42a>
 800b1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1a8:	3316      	adds	r3, #22
 800b1aa:	db0c      	blt.n	800b1c6 <_strtod_l+0x482>
 800b1ac:	9906      	ldr	r1, [sp, #24]
 800b1ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1b0:	4b5b      	ldr	r3, [pc, #364]	; (800b320 <_strtod_l+0x5dc>)
 800b1b2:	1a52      	subs	r2, r2, r1
 800b1b4:	00d2      	lsls	r2, r2, #3
 800b1b6:	189b      	adds	r3, r3, r2
 800b1b8:	0030      	movs	r0, r6
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	0039      	movs	r1, r7
 800b1c0:	f7f5 fe5a 	bl	8000e78 <__aeabi_ddiv>
 800b1c4:	e794      	b.n	800b0f0 <_strtod_l+0x3ac>
 800b1c6:	9b05      	ldr	r3, [sp, #20]
 800b1c8:	1b1c      	subs	r4, r3, r4
 800b1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1cc:	18e4      	adds	r4, r4, r3
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	dd72      	ble.n	800b2b8 <_strtod_l+0x574>
 800b1d2:	220f      	movs	r2, #15
 800b1d4:	0023      	movs	r3, r4
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	4214      	tst	r4, r2
 800b1da:	d00a      	beq.n	800b1f2 <_strtod_l+0x4ae>
 800b1dc:	4950      	ldr	r1, [pc, #320]	; (800b320 <_strtod_l+0x5dc>)
 800b1de:	00db      	lsls	r3, r3, #3
 800b1e0:	18c9      	adds	r1, r1, r3
 800b1e2:	0032      	movs	r2, r6
 800b1e4:	6808      	ldr	r0, [r1, #0]
 800b1e6:	6849      	ldr	r1, [r1, #4]
 800b1e8:	003b      	movs	r3, r7
 800b1ea:	f7f6 fa3f 	bl	800166c <__aeabi_dmul>
 800b1ee:	0006      	movs	r6, r0
 800b1f0:	000f      	movs	r7, r1
 800b1f2:	230f      	movs	r3, #15
 800b1f4:	439c      	bics	r4, r3
 800b1f6:	d04a      	beq.n	800b28e <_strtod_l+0x54a>
 800b1f8:	3326      	adds	r3, #38	; 0x26
 800b1fa:	33ff      	adds	r3, #255	; 0xff
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	dd22      	ble.n	800b246 <_strtod_l+0x502>
 800b200:	2300      	movs	r3, #0
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	9306      	str	r3, [sp, #24]
 800b206:	930d      	str	r3, [sp, #52]	; 0x34
 800b208:	9308      	str	r3, [sp, #32]
 800b20a:	2322      	movs	r3, #34	; 0x22
 800b20c:	2600      	movs	r6, #0
 800b20e:	9a04      	ldr	r2, [sp, #16]
 800b210:	4f3f      	ldr	r7, [pc, #252]	; (800b310 <_strtod_l+0x5cc>)
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b216:	42b3      	cmp	r3, r6
 800b218:	d100      	bne.n	800b21c <_strtod_l+0x4d8>
 800b21a:	e5ce      	b.n	800adba <_strtod_l+0x76>
 800b21c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b21e:	9804      	ldr	r0, [sp, #16]
 800b220:	f001 fc1c 	bl	800ca5c <_Bfree>
 800b224:	9908      	ldr	r1, [sp, #32]
 800b226:	9804      	ldr	r0, [sp, #16]
 800b228:	f001 fc18 	bl	800ca5c <_Bfree>
 800b22c:	9906      	ldr	r1, [sp, #24]
 800b22e:	9804      	ldr	r0, [sp, #16]
 800b230:	f001 fc14 	bl	800ca5c <_Bfree>
 800b234:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b236:	9804      	ldr	r0, [sp, #16]
 800b238:	f001 fc10 	bl	800ca5c <_Bfree>
 800b23c:	9905      	ldr	r1, [sp, #20]
 800b23e:	9804      	ldr	r0, [sp, #16]
 800b240:	f001 fc0c 	bl	800ca5c <_Bfree>
 800b244:	e5b9      	b.n	800adba <_strtod_l+0x76>
 800b246:	2300      	movs	r3, #0
 800b248:	0030      	movs	r0, r6
 800b24a:	0039      	movs	r1, r7
 800b24c:	4d35      	ldr	r5, [pc, #212]	; (800b324 <_strtod_l+0x5e0>)
 800b24e:	1124      	asrs	r4, r4, #4
 800b250:	9307      	str	r3, [sp, #28]
 800b252:	2c01      	cmp	r4, #1
 800b254:	dc1e      	bgt.n	800b294 <_strtod_l+0x550>
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <_strtod_l+0x51a>
 800b25a:	0006      	movs	r6, r0
 800b25c:	000f      	movs	r7, r1
 800b25e:	4b32      	ldr	r3, [pc, #200]	; (800b328 <_strtod_l+0x5e4>)
 800b260:	9a07      	ldr	r2, [sp, #28]
 800b262:	18ff      	adds	r7, r7, r3
 800b264:	4b2f      	ldr	r3, [pc, #188]	; (800b324 <_strtod_l+0x5e0>)
 800b266:	00d2      	lsls	r2, r2, #3
 800b268:	189d      	adds	r5, r3, r2
 800b26a:	6828      	ldr	r0, [r5, #0]
 800b26c:	6869      	ldr	r1, [r5, #4]
 800b26e:	0032      	movs	r2, r6
 800b270:	003b      	movs	r3, r7
 800b272:	f7f6 f9fb 	bl	800166c <__aeabi_dmul>
 800b276:	4b26      	ldr	r3, [pc, #152]	; (800b310 <_strtod_l+0x5cc>)
 800b278:	4a2c      	ldr	r2, [pc, #176]	; (800b32c <_strtod_l+0x5e8>)
 800b27a:	0006      	movs	r6, r0
 800b27c:	400b      	ands	r3, r1
 800b27e:	4293      	cmp	r3, r2
 800b280:	d8be      	bhi.n	800b200 <_strtod_l+0x4bc>
 800b282:	4a2b      	ldr	r2, [pc, #172]	; (800b330 <_strtod_l+0x5ec>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d913      	bls.n	800b2b0 <_strtod_l+0x56c>
 800b288:	2601      	movs	r6, #1
 800b28a:	4f2a      	ldr	r7, [pc, #168]	; (800b334 <_strtod_l+0x5f0>)
 800b28c:	4276      	negs	r6, r6
 800b28e:	2300      	movs	r3, #0
 800b290:	9307      	str	r3, [sp, #28]
 800b292:	e088      	b.n	800b3a6 <_strtod_l+0x662>
 800b294:	2201      	movs	r2, #1
 800b296:	4214      	tst	r4, r2
 800b298:	d004      	beq.n	800b2a4 <_strtod_l+0x560>
 800b29a:	682a      	ldr	r2, [r5, #0]
 800b29c:	686b      	ldr	r3, [r5, #4]
 800b29e:	f7f6 f9e5 	bl	800166c <__aeabi_dmul>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9a07      	ldr	r2, [sp, #28]
 800b2a6:	1064      	asrs	r4, r4, #1
 800b2a8:	3201      	adds	r2, #1
 800b2aa:	9207      	str	r2, [sp, #28]
 800b2ac:	3508      	adds	r5, #8
 800b2ae:	e7d0      	b.n	800b252 <_strtod_l+0x50e>
 800b2b0:	23d4      	movs	r3, #212	; 0xd4
 800b2b2:	049b      	lsls	r3, r3, #18
 800b2b4:	18cf      	adds	r7, r1, r3
 800b2b6:	e7ea      	b.n	800b28e <_strtod_l+0x54a>
 800b2b8:	2c00      	cmp	r4, #0
 800b2ba:	d0e8      	beq.n	800b28e <_strtod_l+0x54a>
 800b2bc:	4264      	negs	r4, r4
 800b2be:	230f      	movs	r3, #15
 800b2c0:	0022      	movs	r2, r4
 800b2c2:	401a      	ands	r2, r3
 800b2c4:	421c      	tst	r4, r3
 800b2c6:	d00a      	beq.n	800b2de <_strtod_l+0x59a>
 800b2c8:	4b15      	ldr	r3, [pc, #84]	; (800b320 <_strtod_l+0x5dc>)
 800b2ca:	00d2      	lsls	r2, r2, #3
 800b2cc:	189b      	adds	r3, r3, r2
 800b2ce:	0030      	movs	r0, r6
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	0039      	movs	r1, r7
 800b2d6:	f7f5 fdcf 	bl	8000e78 <__aeabi_ddiv>
 800b2da:	0006      	movs	r6, r0
 800b2dc:	000f      	movs	r7, r1
 800b2de:	1124      	asrs	r4, r4, #4
 800b2e0:	d0d5      	beq.n	800b28e <_strtod_l+0x54a>
 800b2e2:	2c1f      	cmp	r4, #31
 800b2e4:	dd28      	ble.n	800b338 <_strtod_l+0x5f4>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9305      	str	r3, [sp, #20]
 800b2ea:	9306      	str	r3, [sp, #24]
 800b2ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b2ee:	9308      	str	r3, [sp, #32]
 800b2f0:	2322      	movs	r3, #34	; 0x22
 800b2f2:	9a04      	ldr	r2, [sp, #16]
 800b2f4:	2600      	movs	r6, #0
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2fa:	2700      	movs	r7, #0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d18d      	bne.n	800b21c <_strtod_l+0x4d8>
 800b300:	e55b      	b.n	800adba <_strtod_l+0x76>
 800b302:	46c0      	nop			; (mov r8, r8)
 800b304:	00004e1f 	.word	0x00004e1f
 800b308:	080148a9 	.word	0x080148a9
 800b30c:	0801458c 	.word	0x0801458c
 800b310:	7ff00000 	.word	0x7ff00000
 800b314:	080148a1 	.word	0x080148a1
 800b318:	08014957 	.word	0x08014957
 800b31c:	08014953 	.word	0x08014953
 800b320:	080147c8 	.word	0x080147c8
 800b324:	080147a0 	.word	0x080147a0
 800b328:	fcb00000 	.word	0xfcb00000
 800b32c:	7ca00000 	.word	0x7ca00000
 800b330:	7c900000 	.word	0x7c900000
 800b334:	7fefffff 	.word	0x7fefffff
 800b338:	2310      	movs	r3, #16
 800b33a:	0022      	movs	r2, r4
 800b33c:	401a      	ands	r2, r3
 800b33e:	9207      	str	r2, [sp, #28]
 800b340:	421c      	tst	r4, r3
 800b342:	d001      	beq.n	800b348 <_strtod_l+0x604>
 800b344:	335a      	adds	r3, #90	; 0x5a
 800b346:	9307      	str	r3, [sp, #28]
 800b348:	0030      	movs	r0, r6
 800b34a:	0039      	movs	r1, r7
 800b34c:	2300      	movs	r3, #0
 800b34e:	4dc4      	ldr	r5, [pc, #784]	; (800b660 <_strtod_l+0x91c>)
 800b350:	2201      	movs	r2, #1
 800b352:	4214      	tst	r4, r2
 800b354:	d004      	beq.n	800b360 <_strtod_l+0x61c>
 800b356:	682a      	ldr	r2, [r5, #0]
 800b358:	686b      	ldr	r3, [r5, #4]
 800b35a:	f7f6 f987 	bl	800166c <__aeabi_dmul>
 800b35e:	2301      	movs	r3, #1
 800b360:	1064      	asrs	r4, r4, #1
 800b362:	3508      	adds	r5, #8
 800b364:	2c00      	cmp	r4, #0
 800b366:	d1f3      	bne.n	800b350 <_strtod_l+0x60c>
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d001      	beq.n	800b370 <_strtod_l+0x62c>
 800b36c:	0006      	movs	r6, r0
 800b36e:	000f      	movs	r7, r1
 800b370:	9b07      	ldr	r3, [sp, #28]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00f      	beq.n	800b396 <_strtod_l+0x652>
 800b376:	236b      	movs	r3, #107	; 0x6b
 800b378:	007a      	lsls	r2, r7, #1
 800b37a:	0d52      	lsrs	r2, r2, #21
 800b37c:	0039      	movs	r1, r7
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	2b00      	cmp	r3, #0
 800b382:	dd08      	ble.n	800b396 <_strtod_l+0x652>
 800b384:	2b1f      	cmp	r3, #31
 800b386:	dc00      	bgt.n	800b38a <_strtod_l+0x646>
 800b388:	e121      	b.n	800b5ce <_strtod_l+0x88a>
 800b38a:	2600      	movs	r6, #0
 800b38c:	2b34      	cmp	r3, #52	; 0x34
 800b38e:	dc00      	bgt.n	800b392 <_strtod_l+0x64e>
 800b390:	e116      	b.n	800b5c0 <_strtod_l+0x87c>
 800b392:	27dc      	movs	r7, #220	; 0xdc
 800b394:	04bf      	lsls	r7, r7, #18
 800b396:	2200      	movs	r2, #0
 800b398:	2300      	movs	r3, #0
 800b39a:	0030      	movs	r0, r6
 800b39c:	0039      	movs	r1, r7
 800b39e:	f7f5 f853 	bl	8000448 <__aeabi_dcmpeq>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d19f      	bne.n	800b2e6 <_strtod_l+0x5a2>
 800b3a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3a8:	9a08      	ldr	r2, [sp, #32]
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	9804      	ldr	r0, [sp, #16]
 800b3b2:	f001 fba1 	bl	800caf8 <__s2b>
 800b3b6:	900d      	str	r0, [sp, #52]	; 0x34
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d100      	bne.n	800b3be <_strtod_l+0x67a>
 800b3bc:	e720      	b.n	800b200 <_strtod_l+0x4bc>
 800b3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c0:	9906      	ldr	r1, [sp, #24]
 800b3c2:	17da      	asrs	r2, r3, #31
 800b3c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3c6:	1a5b      	subs	r3, r3, r1
 800b3c8:	401a      	ands	r2, r3
 800b3ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3cc:	9215      	str	r2, [sp, #84]	; 0x54
 800b3ce:	43db      	mvns	r3, r3
 800b3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3d2:	17db      	asrs	r3, r3, #31
 800b3d4:	401a      	ands	r2, r3
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9218      	str	r2, [sp, #96]	; 0x60
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	9306      	str	r3, [sp, #24]
 800b3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3e0:	9804      	ldr	r0, [sp, #16]
 800b3e2:	6859      	ldr	r1, [r3, #4]
 800b3e4:	f001 fb12 	bl	800ca0c <_Balloc>
 800b3e8:	9008      	str	r0, [sp, #32]
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d100      	bne.n	800b3f0 <_strtod_l+0x6ac>
 800b3ee:	e70c      	b.n	800b20a <_strtod_l+0x4c6>
 800b3f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3f2:	300c      	adds	r0, #12
 800b3f4:	0019      	movs	r1, r3
 800b3f6:	691a      	ldr	r2, [r3, #16]
 800b3f8:	310c      	adds	r1, #12
 800b3fa:	3202      	adds	r2, #2
 800b3fc:	0092      	lsls	r2, r2, #2
 800b3fe:	f000 fe6a 	bl	800c0d6 <memcpy>
 800b402:	ab1e      	add	r3, sp, #120	; 0x78
 800b404:	9301      	str	r3, [sp, #4]
 800b406:	ab1d      	add	r3, sp, #116	; 0x74
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	0032      	movs	r2, r6
 800b40c:	003b      	movs	r3, r7
 800b40e:	9804      	ldr	r0, [sp, #16]
 800b410:	9610      	str	r6, [sp, #64]	; 0x40
 800b412:	9711      	str	r7, [sp, #68]	; 0x44
 800b414:	f001 fe98 	bl	800d148 <__d2b>
 800b418:	901c      	str	r0, [sp, #112]	; 0x70
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d100      	bne.n	800b420 <_strtod_l+0x6dc>
 800b41e:	e6f4      	b.n	800b20a <_strtod_l+0x4c6>
 800b420:	2101      	movs	r1, #1
 800b422:	9804      	ldr	r0, [sp, #16]
 800b424:	f001 fbfc 	bl	800cc20 <__i2b>
 800b428:	9006      	str	r0, [sp, #24]
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d100      	bne.n	800b430 <_strtod_l+0x6ec>
 800b42e:	e6ec      	b.n	800b20a <_strtod_l+0x4c6>
 800b430:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b434:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b436:	1ad4      	subs	r4, r2, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	db01      	blt.n	800b440 <_strtod_l+0x6fc>
 800b43c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b43e:	195d      	adds	r5, r3, r5
 800b440:	9907      	ldr	r1, [sp, #28]
 800b442:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b444:	1a5b      	subs	r3, r3, r1
 800b446:	2136      	movs	r1, #54	; 0x36
 800b448:	189b      	adds	r3, r3, r2
 800b44a:	1a8a      	subs	r2, r1, r2
 800b44c:	4985      	ldr	r1, [pc, #532]	; (800b664 <_strtod_l+0x920>)
 800b44e:	2001      	movs	r0, #1
 800b450:	468c      	mov	ip, r1
 800b452:	2100      	movs	r1, #0
 800b454:	3b01      	subs	r3, #1
 800b456:	9114      	str	r1, [sp, #80]	; 0x50
 800b458:	9012      	str	r0, [sp, #72]	; 0x48
 800b45a:	4563      	cmp	r3, ip
 800b45c:	da07      	bge.n	800b46e <_strtod_l+0x72a>
 800b45e:	4661      	mov	r1, ip
 800b460:	1ac9      	subs	r1, r1, r3
 800b462:	1a52      	subs	r2, r2, r1
 800b464:	291f      	cmp	r1, #31
 800b466:	dd00      	ble.n	800b46a <_strtod_l+0x726>
 800b468:	e0b6      	b.n	800b5d8 <_strtod_l+0x894>
 800b46a:	4088      	lsls	r0, r1
 800b46c:	9012      	str	r0, [sp, #72]	; 0x48
 800b46e:	18ab      	adds	r3, r5, r2
 800b470:	930c      	str	r3, [sp, #48]	; 0x30
 800b472:	18a4      	adds	r4, r4, r2
 800b474:	9b07      	ldr	r3, [sp, #28]
 800b476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b478:	191c      	adds	r4, r3, r4
 800b47a:	002b      	movs	r3, r5
 800b47c:	4295      	cmp	r5, r2
 800b47e:	dd00      	ble.n	800b482 <_strtod_l+0x73e>
 800b480:	0013      	movs	r3, r2
 800b482:	42a3      	cmp	r3, r4
 800b484:	dd00      	ble.n	800b488 <_strtod_l+0x744>
 800b486:	0023      	movs	r3, r4
 800b488:	2b00      	cmp	r3, #0
 800b48a:	dd04      	ble.n	800b496 <_strtod_l+0x752>
 800b48c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b48e:	1ae4      	subs	r4, r4, r3
 800b490:	1ad2      	subs	r2, r2, r3
 800b492:	920c      	str	r2, [sp, #48]	; 0x30
 800b494:	1aed      	subs	r5, r5, r3
 800b496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dd17      	ble.n	800b4cc <_strtod_l+0x788>
 800b49c:	001a      	movs	r2, r3
 800b49e:	9906      	ldr	r1, [sp, #24]
 800b4a0:	9804      	ldr	r0, [sp, #16]
 800b4a2:	f001 fc85 	bl	800cdb0 <__pow5mult>
 800b4a6:	9006      	str	r0, [sp, #24]
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	d100      	bne.n	800b4ae <_strtod_l+0x76a>
 800b4ac:	e6ad      	b.n	800b20a <_strtod_l+0x4c6>
 800b4ae:	0001      	movs	r1, r0
 800b4b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b4b2:	9804      	ldr	r0, [sp, #16]
 800b4b4:	f001 fbcc 	bl	800cc50 <__multiply>
 800b4b8:	900e      	str	r0, [sp, #56]	; 0x38
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d100      	bne.n	800b4c0 <_strtod_l+0x77c>
 800b4be:	e6a4      	b.n	800b20a <_strtod_l+0x4c6>
 800b4c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4c2:	9804      	ldr	r0, [sp, #16]
 800b4c4:	f001 faca 	bl	800ca5c <_Bfree>
 800b4c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b4ca:	931c      	str	r3, [sp, #112]	; 0x70
 800b4cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	dd00      	ble.n	800b4d4 <_strtod_l+0x790>
 800b4d2:	e087      	b.n	800b5e4 <_strtod_l+0x8a0>
 800b4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dd08      	ble.n	800b4ec <_strtod_l+0x7a8>
 800b4da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b4dc:	9908      	ldr	r1, [sp, #32]
 800b4de:	9804      	ldr	r0, [sp, #16]
 800b4e0:	f001 fc66 	bl	800cdb0 <__pow5mult>
 800b4e4:	9008      	str	r0, [sp, #32]
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d100      	bne.n	800b4ec <_strtod_l+0x7a8>
 800b4ea:	e68e      	b.n	800b20a <_strtod_l+0x4c6>
 800b4ec:	2c00      	cmp	r4, #0
 800b4ee:	dd08      	ble.n	800b502 <_strtod_l+0x7be>
 800b4f0:	0022      	movs	r2, r4
 800b4f2:	9908      	ldr	r1, [sp, #32]
 800b4f4:	9804      	ldr	r0, [sp, #16]
 800b4f6:	f001 fc9d 	bl	800ce34 <__lshift>
 800b4fa:	9008      	str	r0, [sp, #32]
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d100      	bne.n	800b502 <_strtod_l+0x7be>
 800b500:	e683      	b.n	800b20a <_strtod_l+0x4c6>
 800b502:	2d00      	cmp	r5, #0
 800b504:	dd08      	ble.n	800b518 <_strtod_l+0x7d4>
 800b506:	002a      	movs	r2, r5
 800b508:	9906      	ldr	r1, [sp, #24]
 800b50a:	9804      	ldr	r0, [sp, #16]
 800b50c:	f001 fc92 	bl	800ce34 <__lshift>
 800b510:	9006      	str	r0, [sp, #24]
 800b512:	2800      	cmp	r0, #0
 800b514:	d100      	bne.n	800b518 <_strtod_l+0x7d4>
 800b516:	e678      	b.n	800b20a <_strtod_l+0x4c6>
 800b518:	9a08      	ldr	r2, [sp, #32]
 800b51a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b51c:	9804      	ldr	r0, [sp, #16]
 800b51e:	f001 fd13 	bl	800cf48 <__mdiff>
 800b522:	9005      	str	r0, [sp, #20]
 800b524:	2800      	cmp	r0, #0
 800b526:	d100      	bne.n	800b52a <_strtod_l+0x7e6>
 800b528:	e66f      	b.n	800b20a <_strtod_l+0x4c6>
 800b52a:	2200      	movs	r2, #0
 800b52c:	68c3      	ldr	r3, [r0, #12]
 800b52e:	9906      	ldr	r1, [sp, #24]
 800b530:	60c2      	str	r2, [r0, #12]
 800b532:	930c      	str	r3, [sp, #48]	; 0x30
 800b534:	f001 fcec 	bl	800cf10 <__mcmp>
 800b538:	2800      	cmp	r0, #0
 800b53a:	da5d      	bge.n	800b5f8 <_strtod_l+0x8b4>
 800b53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b53e:	4333      	orrs	r3, r6
 800b540:	d000      	beq.n	800b544 <_strtod_l+0x800>
 800b542:	e088      	b.n	800b656 <_strtod_l+0x912>
 800b544:	033b      	lsls	r3, r7, #12
 800b546:	d000      	beq.n	800b54a <_strtod_l+0x806>
 800b548:	e085      	b.n	800b656 <_strtod_l+0x912>
 800b54a:	22d6      	movs	r2, #214	; 0xd6
 800b54c:	4b46      	ldr	r3, [pc, #280]	; (800b668 <_strtod_l+0x924>)
 800b54e:	04d2      	lsls	r2, r2, #19
 800b550:	403b      	ands	r3, r7
 800b552:	4293      	cmp	r3, r2
 800b554:	d97f      	bls.n	800b656 <_strtod_l+0x912>
 800b556:	9b05      	ldr	r3, [sp, #20]
 800b558:	695b      	ldr	r3, [r3, #20]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d103      	bne.n	800b566 <_strtod_l+0x822>
 800b55e:	9b05      	ldr	r3, [sp, #20]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	2b01      	cmp	r3, #1
 800b564:	dd77      	ble.n	800b656 <_strtod_l+0x912>
 800b566:	9905      	ldr	r1, [sp, #20]
 800b568:	2201      	movs	r2, #1
 800b56a:	9804      	ldr	r0, [sp, #16]
 800b56c:	f001 fc62 	bl	800ce34 <__lshift>
 800b570:	9906      	ldr	r1, [sp, #24]
 800b572:	9005      	str	r0, [sp, #20]
 800b574:	f001 fccc 	bl	800cf10 <__mcmp>
 800b578:	2800      	cmp	r0, #0
 800b57a:	dd6c      	ble.n	800b656 <_strtod_l+0x912>
 800b57c:	9907      	ldr	r1, [sp, #28]
 800b57e:	003b      	movs	r3, r7
 800b580:	4a39      	ldr	r2, [pc, #228]	; (800b668 <_strtod_l+0x924>)
 800b582:	2900      	cmp	r1, #0
 800b584:	d100      	bne.n	800b588 <_strtod_l+0x844>
 800b586:	e094      	b.n	800b6b2 <_strtod_l+0x96e>
 800b588:	0011      	movs	r1, r2
 800b58a:	20d6      	movs	r0, #214	; 0xd6
 800b58c:	4039      	ands	r1, r7
 800b58e:	04c0      	lsls	r0, r0, #19
 800b590:	4281      	cmp	r1, r0
 800b592:	dd00      	ble.n	800b596 <_strtod_l+0x852>
 800b594:	e08d      	b.n	800b6b2 <_strtod_l+0x96e>
 800b596:	23dc      	movs	r3, #220	; 0xdc
 800b598:	049b      	lsls	r3, r3, #18
 800b59a:	4299      	cmp	r1, r3
 800b59c:	dc00      	bgt.n	800b5a0 <_strtod_l+0x85c>
 800b59e:	e6a7      	b.n	800b2f0 <_strtod_l+0x5ac>
 800b5a0:	0030      	movs	r0, r6
 800b5a2:	0039      	movs	r1, r7
 800b5a4:	4b31      	ldr	r3, [pc, #196]	; (800b66c <_strtod_l+0x928>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f7f6 f860 	bl	800166c <__aeabi_dmul>
 800b5ac:	4b2e      	ldr	r3, [pc, #184]	; (800b668 <_strtod_l+0x924>)
 800b5ae:	0006      	movs	r6, r0
 800b5b0:	000f      	movs	r7, r1
 800b5b2:	420b      	tst	r3, r1
 800b5b4:	d000      	beq.n	800b5b8 <_strtod_l+0x874>
 800b5b6:	e631      	b.n	800b21c <_strtod_l+0x4d8>
 800b5b8:	2322      	movs	r3, #34	; 0x22
 800b5ba:	9a04      	ldr	r2, [sp, #16]
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	e62d      	b.n	800b21c <_strtod_l+0x4d8>
 800b5c0:	234b      	movs	r3, #75	; 0x4b
 800b5c2:	1a9a      	subs	r2, r3, r2
 800b5c4:	3b4c      	subs	r3, #76	; 0x4c
 800b5c6:	4093      	lsls	r3, r2
 800b5c8:	4019      	ands	r1, r3
 800b5ca:	000f      	movs	r7, r1
 800b5cc:	e6e3      	b.n	800b396 <_strtod_l+0x652>
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	4252      	negs	r2, r2
 800b5d2:	409a      	lsls	r2, r3
 800b5d4:	4016      	ands	r6, r2
 800b5d6:	e6de      	b.n	800b396 <_strtod_l+0x652>
 800b5d8:	4925      	ldr	r1, [pc, #148]	; (800b670 <_strtod_l+0x92c>)
 800b5da:	1acb      	subs	r3, r1, r3
 800b5dc:	0001      	movs	r1, r0
 800b5de:	4099      	lsls	r1, r3
 800b5e0:	9114      	str	r1, [sp, #80]	; 0x50
 800b5e2:	e743      	b.n	800b46c <_strtod_l+0x728>
 800b5e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b5e8:	9804      	ldr	r0, [sp, #16]
 800b5ea:	f001 fc23 	bl	800ce34 <__lshift>
 800b5ee:	901c      	str	r0, [sp, #112]	; 0x70
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d000      	beq.n	800b5f6 <_strtod_l+0x8b2>
 800b5f4:	e76e      	b.n	800b4d4 <_strtod_l+0x790>
 800b5f6:	e608      	b.n	800b20a <_strtod_l+0x4c6>
 800b5f8:	970e      	str	r7, [sp, #56]	; 0x38
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d177      	bne.n	800b6ee <_strtod_l+0x9aa>
 800b5fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b600:	033b      	lsls	r3, r7, #12
 800b602:	0b1b      	lsrs	r3, r3, #12
 800b604:	2a00      	cmp	r2, #0
 800b606:	d039      	beq.n	800b67c <_strtod_l+0x938>
 800b608:	4a1a      	ldr	r2, [pc, #104]	; (800b674 <_strtod_l+0x930>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d139      	bne.n	800b682 <_strtod_l+0x93e>
 800b60e:	2101      	movs	r1, #1
 800b610:	9b07      	ldr	r3, [sp, #28]
 800b612:	4249      	negs	r1, r1
 800b614:	0032      	movs	r2, r6
 800b616:	0008      	movs	r0, r1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00b      	beq.n	800b634 <_strtod_l+0x8f0>
 800b61c:	24d4      	movs	r4, #212	; 0xd4
 800b61e:	4b12      	ldr	r3, [pc, #72]	; (800b668 <_strtod_l+0x924>)
 800b620:	0008      	movs	r0, r1
 800b622:	403b      	ands	r3, r7
 800b624:	04e4      	lsls	r4, r4, #19
 800b626:	42a3      	cmp	r3, r4
 800b628:	d804      	bhi.n	800b634 <_strtod_l+0x8f0>
 800b62a:	306c      	adds	r0, #108	; 0x6c
 800b62c:	0d1b      	lsrs	r3, r3, #20
 800b62e:	1ac3      	subs	r3, r0, r3
 800b630:	4099      	lsls	r1, r3
 800b632:	0008      	movs	r0, r1
 800b634:	4282      	cmp	r2, r0
 800b636:	d124      	bne.n	800b682 <_strtod_l+0x93e>
 800b638:	4b0f      	ldr	r3, [pc, #60]	; (800b678 <_strtod_l+0x934>)
 800b63a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b63c:	4299      	cmp	r1, r3
 800b63e:	d102      	bne.n	800b646 <_strtod_l+0x902>
 800b640:	3201      	adds	r2, #1
 800b642:	d100      	bne.n	800b646 <_strtod_l+0x902>
 800b644:	e5e1      	b.n	800b20a <_strtod_l+0x4c6>
 800b646:	4b08      	ldr	r3, [pc, #32]	; (800b668 <_strtod_l+0x924>)
 800b648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b64a:	2600      	movs	r6, #0
 800b64c:	401a      	ands	r2, r3
 800b64e:	0013      	movs	r3, r2
 800b650:	2280      	movs	r2, #128	; 0x80
 800b652:	0352      	lsls	r2, r2, #13
 800b654:	189f      	adds	r7, r3, r2
 800b656:	9b07      	ldr	r3, [sp, #28]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1a1      	bne.n	800b5a0 <_strtod_l+0x85c>
 800b65c:	e5de      	b.n	800b21c <_strtod_l+0x4d8>
 800b65e:	46c0      	nop			; (mov r8, r8)
 800b660:	080145a0 	.word	0x080145a0
 800b664:	fffffc02 	.word	0xfffffc02
 800b668:	7ff00000 	.word	0x7ff00000
 800b66c:	39500000 	.word	0x39500000
 800b670:	fffffbe2 	.word	0xfffffbe2
 800b674:	000fffff 	.word	0x000fffff
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	4333      	orrs	r3, r6
 800b67e:	d100      	bne.n	800b682 <_strtod_l+0x93e>
 800b680:	e77c      	b.n	800b57c <_strtod_l+0x838>
 800b682:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b684:	2b00      	cmp	r3, #0
 800b686:	d01d      	beq.n	800b6c4 <_strtod_l+0x980>
 800b688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b68a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b68c:	4213      	tst	r3, r2
 800b68e:	d0e2      	beq.n	800b656 <_strtod_l+0x912>
 800b690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b692:	0030      	movs	r0, r6
 800b694:	0039      	movs	r1, r7
 800b696:	9a07      	ldr	r2, [sp, #28]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d017      	beq.n	800b6cc <_strtod_l+0x988>
 800b69c:	f7ff fb3a 	bl	800ad14 <sulp>
 800b6a0:	0002      	movs	r2, r0
 800b6a2:	000b      	movs	r3, r1
 800b6a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6a6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6a8:	f7f5 f886 	bl	80007b8 <__aeabi_dadd>
 800b6ac:	0006      	movs	r6, r0
 800b6ae:	000f      	movs	r7, r1
 800b6b0:	e7d1      	b.n	800b656 <_strtod_l+0x912>
 800b6b2:	2601      	movs	r6, #1
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	4a98      	ldr	r2, [pc, #608]	; (800b918 <_strtod_l+0xbd4>)
 800b6b8:	4276      	negs	r6, r6
 800b6ba:	189b      	adds	r3, r3, r2
 800b6bc:	4a97      	ldr	r2, [pc, #604]	; (800b91c <_strtod_l+0xbd8>)
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	0017      	movs	r7, r2
 800b6c2:	e7c8      	b.n	800b656 <_strtod_l+0x912>
 800b6c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c6:	4233      	tst	r3, r6
 800b6c8:	d0c5      	beq.n	800b656 <_strtod_l+0x912>
 800b6ca:	e7e1      	b.n	800b690 <_strtod_l+0x94c>
 800b6cc:	f7ff fb22 	bl	800ad14 <sulp>
 800b6d0:	0002      	movs	r2, r0
 800b6d2:	000b      	movs	r3, r1
 800b6d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b6d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b6d8:	f7f6 fa8a 	bl	8001bf0 <__aeabi_dsub>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	2300      	movs	r3, #0
 800b6e0:	0006      	movs	r6, r0
 800b6e2:	000f      	movs	r7, r1
 800b6e4:	f7f4 feb0 	bl	8000448 <__aeabi_dcmpeq>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0b4      	beq.n	800b656 <_strtod_l+0x912>
 800b6ec:	e600      	b.n	800b2f0 <_strtod_l+0x5ac>
 800b6ee:	9906      	ldr	r1, [sp, #24]
 800b6f0:	9805      	ldr	r0, [sp, #20]
 800b6f2:	f001 fd89 	bl	800d208 <__ratio>
 800b6f6:	2380      	movs	r3, #128	; 0x80
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	05db      	lsls	r3, r3, #23
 800b6fc:	0004      	movs	r4, r0
 800b6fe:	000d      	movs	r5, r1
 800b700:	f7f4 feb2 	bl	8000468 <__aeabi_dcmple>
 800b704:	2800      	cmp	r0, #0
 800b706:	d06d      	beq.n	800b7e4 <_strtod_l+0xaa0>
 800b708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d000      	beq.n	800b710 <_strtod_l+0x9cc>
 800b70e:	e07e      	b.n	800b80e <_strtod_l+0xaca>
 800b710:	2e00      	cmp	r6, #0
 800b712:	d158      	bne.n	800b7c6 <_strtod_l+0xa82>
 800b714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b716:	031b      	lsls	r3, r3, #12
 800b718:	d000      	beq.n	800b71c <_strtod_l+0x9d8>
 800b71a:	e07f      	b.n	800b81c <_strtod_l+0xad8>
 800b71c:	2200      	movs	r2, #0
 800b71e:	0020      	movs	r0, r4
 800b720:	0029      	movs	r1, r5
 800b722:	4b7f      	ldr	r3, [pc, #508]	; (800b920 <_strtod_l+0xbdc>)
 800b724:	f7f4 fe96 	bl	8000454 <__aeabi_dcmplt>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d158      	bne.n	800b7de <_strtod_l+0xa9a>
 800b72c:	0020      	movs	r0, r4
 800b72e:	0029      	movs	r1, r5
 800b730:	2200      	movs	r2, #0
 800b732:	4b7c      	ldr	r3, [pc, #496]	; (800b924 <_strtod_l+0xbe0>)
 800b734:	f7f5 ff9a 	bl	800166c <__aeabi_dmul>
 800b738:	0004      	movs	r4, r0
 800b73a:	000d      	movs	r5, r1
 800b73c:	2380      	movs	r3, #128	; 0x80
 800b73e:	061b      	lsls	r3, r3, #24
 800b740:	940a      	str	r4, [sp, #40]	; 0x28
 800b742:	18eb      	adds	r3, r5, r3
 800b744:	930b      	str	r3, [sp, #44]	; 0x2c
 800b746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b74a:	9212      	str	r2, [sp, #72]	; 0x48
 800b74c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b74e:	4a76      	ldr	r2, [pc, #472]	; (800b928 <_strtod_l+0xbe4>)
 800b750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b752:	4013      	ands	r3, r2
 800b754:	9314      	str	r3, [sp, #80]	; 0x50
 800b756:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b758:	4b74      	ldr	r3, [pc, #464]	; (800b92c <_strtod_l+0xbe8>)
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d000      	beq.n	800b760 <_strtod_l+0xa1c>
 800b75e:	e091      	b.n	800b884 <_strtod_l+0xb40>
 800b760:	4a73      	ldr	r2, [pc, #460]	; (800b930 <_strtod_l+0xbec>)
 800b762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b764:	4694      	mov	ip, r2
 800b766:	4463      	add	r3, ip
 800b768:	001f      	movs	r7, r3
 800b76a:	0030      	movs	r0, r6
 800b76c:	0019      	movs	r1, r3
 800b76e:	f001 fc83 	bl	800d078 <__ulp>
 800b772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b774:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b776:	f7f5 ff79 	bl	800166c <__aeabi_dmul>
 800b77a:	0032      	movs	r2, r6
 800b77c:	003b      	movs	r3, r7
 800b77e:	f7f5 f81b 	bl	80007b8 <__aeabi_dadd>
 800b782:	4a69      	ldr	r2, [pc, #420]	; (800b928 <_strtod_l+0xbe4>)
 800b784:	4b6b      	ldr	r3, [pc, #428]	; (800b934 <_strtod_l+0xbf0>)
 800b786:	0006      	movs	r6, r0
 800b788:	400a      	ands	r2, r1
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d949      	bls.n	800b822 <_strtod_l+0xade>
 800b78e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b790:	4b69      	ldr	r3, [pc, #420]	; (800b938 <_strtod_l+0xbf4>)
 800b792:	429a      	cmp	r2, r3
 800b794:	d103      	bne.n	800b79e <_strtod_l+0xa5a>
 800b796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b798:	3301      	adds	r3, #1
 800b79a:	d100      	bne.n	800b79e <_strtod_l+0xa5a>
 800b79c:	e535      	b.n	800b20a <_strtod_l+0x4c6>
 800b79e:	2601      	movs	r6, #1
 800b7a0:	4f65      	ldr	r7, [pc, #404]	; (800b938 <_strtod_l+0xbf4>)
 800b7a2:	4276      	negs	r6, r6
 800b7a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b7a6:	9804      	ldr	r0, [sp, #16]
 800b7a8:	f001 f958 	bl	800ca5c <_Bfree>
 800b7ac:	9908      	ldr	r1, [sp, #32]
 800b7ae:	9804      	ldr	r0, [sp, #16]
 800b7b0:	f001 f954 	bl	800ca5c <_Bfree>
 800b7b4:	9906      	ldr	r1, [sp, #24]
 800b7b6:	9804      	ldr	r0, [sp, #16]
 800b7b8:	f001 f950 	bl	800ca5c <_Bfree>
 800b7bc:	9905      	ldr	r1, [sp, #20]
 800b7be:	9804      	ldr	r0, [sp, #16]
 800b7c0:	f001 f94c 	bl	800ca5c <_Bfree>
 800b7c4:	e60b      	b.n	800b3de <_strtod_l+0x69a>
 800b7c6:	2e01      	cmp	r6, #1
 800b7c8:	d103      	bne.n	800b7d2 <_strtod_l+0xa8e>
 800b7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d100      	bne.n	800b7d2 <_strtod_l+0xa8e>
 800b7d0:	e58e      	b.n	800b2f0 <_strtod_l+0x5ac>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	4c59      	ldr	r4, [pc, #356]	; (800b93c <_strtod_l+0xbf8>)
 800b7d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800b7da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b7dc:	e01c      	b.n	800b818 <_strtod_l+0xad4>
 800b7de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b7e0:	4d50      	ldr	r5, [pc, #320]	; (800b924 <_strtod_l+0xbe0>)
 800b7e2:	e7ab      	b.n	800b73c <_strtod_l+0x9f8>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	0020      	movs	r0, r4
 800b7e8:	0029      	movs	r1, r5
 800b7ea:	4b4e      	ldr	r3, [pc, #312]	; (800b924 <_strtod_l+0xbe0>)
 800b7ec:	f7f5 ff3e 	bl	800166c <__aeabi_dmul>
 800b7f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7f2:	0004      	movs	r4, r0
 800b7f4:	000b      	movs	r3, r1
 800b7f6:	000d      	movs	r5, r1
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d104      	bne.n	800b806 <_strtod_l+0xac2>
 800b7fc:	2280      	movs	r2, #128	; 0x80
 800b7fe:	0612      	lsls	r2, r2, #24
 800b800:	900a      	str	r0, [sp, #40]	; 0x28
 800b802:	188b      	adds	r3, r1, r2
 800b804:	e79e      	b.n	800b744 <_strtod_l+0xa00>
 800b806:	0002      	movs	r2, r0
 800b808:	920a      	str	r2, [sp, #40]	; 0x28
 800b80a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b80c:	e79b      	b.n	800b746 <_strtod_l+0xa02>
 800b80e:	2300      	movs	r3, #0
 800b810:	4c43      	ldr	r4, [pc, #268]	; (800b920 <_strtod_l+0xbdc>)
 800b812:	930a      	str	r3, [sp, #40]	; 0x28
 800b814:	940b      	str	r4, [sp, #44]	; 0x2c
 800b816:	2400      	movs	r4, #0
 800b818:	4d41      	ldr	r5, [pc, #260]	; (800b920 <_strtod_l+0xbdc>)
 800b81a:	e794      	b.n	800b746 <_strtod_l+0xa02>
 800b81c:	2300      	movs	r3, #0
 800b81e:	4c47      	ldr	r4, [pc, #284]	; (800b93c <_strtod_l+0xbf8>)
 800b820:	e7f7      	b.n	800b812 <_strtod_l+0xace>
 800b822:	23d4      	movs	r3, #212	; 0xd4
 800b824:	049b      	lsls	r3, r3, #18
 800b826:	18cf      	adds	r7, r1, r3
 800b828:	9b07      	ldr	r3, [sp, #28]
 800b82a:	970e      	str	r7, [sp, #56]	; 0x38
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1b9      	bne.n	800b7a4 <_strtod_l+0xa60>
 800b830:	4b3d      	ldr	r3, [pc, #244]	; (800b928 <_strtod_l+0xbe4>)
 800b832:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b834:	403b      	ands	r3, r7
 800b836:	429a      	cmp	r2, r3
 800b838:	d1b4      	bne.n	800b7a4 <_strtod_l+0xa60>
 800b83a:	0020      	movs	r0, r4
 800b83c:	0029      	movs	r1, r5
 800b83e:	f7f4 fe9d 	bl	800057c <__aeabi_d2lz>
 800b842:	f7f4 fed7 	bl	80005f4 <__aeabi_l2d>
 800b846:	0002      	movs	r2, r0
 800b848:	000b      	movs	r3, r1
 800b84a:	0020      	movs	r0, r4
 800b84c:	0029      	movs	r1, r5
 800b84e:	f7f6 f9cf 	bl	8001bf0 <__aeabi_dsub>
 800b852:	033b      	lsls	r3, r7, #12
 800b854:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b856:	0b1b      	lsrs	r3, r3, #12
 800b858:	4333      	orrs	r3, r6
 800b85a:	4313      	orrs	r3, r2
 800b85c:	0004      	movs	r4, r0
 800b85e:	000d      	movs	r5, r1
 800b860:	4a37      	ldr	r2, [pc, #220]	; (800b940 <_strtod_l+0xbfc>)
 800b862:	2b00      	cmp	r3, #0
 800b864:	d054      	beq.n	800b910 <_strtod_l+0xbcc>
 800b866:	4b37      	ldr	r3, [pc, #220]	; (800b944 <_strtod_l+0xc00>)
 800b868:	f7f4 fdf4 	bl	8000454 <__aeabi_dcmplt>
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d000      	beq.n	800b872 <_strtod_l+0xb2e>
 800b870:	e4d4      	b.n	800b21c <_strtod_l+0x4d8>
 800b872:	0020      	movs	r0, r4
 800b874:	0029      	movs	r1, r5
 800b876:	4a34      	ldr	r2, [pc, #208]	; (800b948 <_strtod_l+0xc04>)
 800b878:	4b2a      	ldr	r3, [pc, #168]	; (800b924 <_strtod_l+0xbe0>)
 800b87a:	f7f4 fdff 	bl	800047c <__aeabi_dcmpgt>
 800b87e:	2800      	cmp	r0, #0
 800b880:	d090      	beq.n	800b7a4 <_strtod_l+0xa60>
 800b882:	e4cb      	b.n	800b21c <_strtod_l+0x4d8>
 800b884:	9b07      	ldr	r3, [sp, #28]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d02b      	beq.n	800b8e2 <_strtod_l+0xb9e>
 800b88a:	23d4      	movs	r3, #212	; 0xd4
 800b88c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b88e:	04db      	lsls	r3, r3, #19
 800b890:	429a      	cmp	r2, r3
 800b892:	d826      	bhi.n	800b8e2 <_strtod_l+0xb9e>
 800b894:	0020      	movs	r0, r4
 800b896:	0029      	movs	r1, r5
 800b898:	4a2c      	ldr	r2, [pc, #176]	; (800b94c <_strtod_l+0xc08>)
 800b89a:	4b2d      	ldr	r3, [pc, #180]	; (800b950 <_strtod_l+0xc0c>)
 800b89c:	f7f4 fde4 	bl	8000468 <__aeabi_dcmple>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d017      	beq.n	800b8d4 <_strtod_l+0xb90>
 800b8a4:	0020      	movs	r0, r4
 800b8a6:	0029      	movs	r1, r5
 800b8a8:	f7f4 fe4a 	bl	8000540 <__aeabi_d2uiz>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	d100      	bne.n	800b8b2 <_strtod_l+0xb6e>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f7f6 fda3 	bl	80023fc <__aeabi_ui2d>
 800b8b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8b8:	0004      	movs	r4, r0
 800b8ba:	000b      	movs	r3, r1
 800b8bc:	000d      	movs	r5, r1
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	d122      	bne.n	800b908 <_strtod_l+0xbc4>
 800b8c2:	2280      	movs	r2, #128	; 0x80
 800b8c4:	0612      	lsls	r2, r2, #24
 800b8c6:	188b      	adds	r3, r1, r2
 800b8c8:	9016      	str	r0, [sp, #88]	; 0x58
 800b8ca:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b8ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8d0:	9212      	str	r2, [sp, #72]	; 0x48
 800b8d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8d4:	22d6      	movs	r2, #214	; 0xd6
 800b8d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8d8:	04d2      	lsls	r2, r2, #19
 800b8da:	189b      	adds	r3, r3, r2
 800b8dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8de:	1a9b      	subs	r3, r3, r2
 800b8e0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8e2:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b8e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b8e6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b8e8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b8ea:	f001 fbc5 	bl	800d078 <__ulp>
 800b8ee:	0002      	movs	r2, r0
 800b8f0:	000b      	movs	r3, r1
 800b8f2:	0030      	movs	r0, r6
 800b8f4:	0039      	movs	r1, r7
 800b8f6:	f7f5 feb9 	bl	800166c <__aeabi_dmul>
 800b8fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b8fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8fe:	f7f4 ff5b 	bl	80007b8 <__aeabi_dadd>
 800b902:	0006      	movs	r6, r0
 800b904:	000f      	movs	r7, r1
 800b906:	e78f      	b.n	800b828 <_strtod_l+0xae4>
 800b908:	0002      	movs	r2, r0
 800b90a:	9216      	str	r2, [sp, #88]	; 0x58
 800b90c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b90e:	e7dd      	b.n	800b8cc <_strtod_l+0xb88>
 800b910:	4b10      	ldr	r3, [pc, #64]	; (800b954 <_strtod_l+0xc10>)
 800b912:	f7f4 fd9f 	bl	8000454 <__aeabi_dcmplt>
 800b916:	e7b2      	b.n	800b87e <_strtod_l+0xb3a>
 800b918:	fff00000 	.word	0xfff00000
 800b91c:	000fffff 	.word	0x000fffff
 800b920:	3ff00000 	.word	0x3ff00000
 800b924:	3fe00000 	.word	0x3fe00000
 800b928:	7ff00000 	.word	0x7ff00000
 800b92c:	7fe00000 	.word	0x7fe00000
 800b930:	fcb00000 	.word	0xfcb00000
 800b934:	7c9fffff 	.word	0x7c9fffff
 800b938:	7fefffff 	.word	0x7fefffff
 800b93c:	bff00000 	.word	0xbff00000
 800b940:	94a03595 	.word	0x94a03595
 800b944:	3fdfffff 	.word	0x3fdfffff
 800b948:	35afe535 	.word	0x35afe535
 800b94c:	ffc00000 	.word	0xffc00000
 800b950:	41dfffff 	.word	0x41dfffff
 800b954:	3fcfffff 	.word	0x3fcfffff

0800b958 <_strtod_r>:
 800b958:	b510      	push	{r4, lr}
 800b95a:	4b02      	ldr	r3, [pc, #8]	; (800b964 <_strtod_r+0xc>)
 800b95c:	f7ff f9f2 	bl	800ad44 <_strtod_l>
 800b960:	bd10      	pop	{r4, pc}
 800b962:	46c0      	nop			; (mov r8, r8)
 800b964:	20000444 	.word	0x20000444

0800b968 <strtod>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	4c04      	ldr	r4, [pc, #16]	; (800b97c <strtod+0x14>)
 800b96c:	000a      	movs	r2, r1
 800b96e:	0001      	movs	r1, r0
 800b970:	4b03      	ldr	r3, [pc, #12]	; (800b980 <strtod+0x18>)
 800b972:	6820      	ldr	r0, [r4, #0]
 800b974:	f7ff f9e6 	bl	800ad44 <_strtod_l>
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	46c0      	nop			; (mov r8, r8)
 800b97c:	200006d0 	.word	0x200006d0
 800b980:	20000444 	.word	0x20000444

0800b984 <_strtol_l.constprop.0>:
 800b984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b986:	b087      	sub	sp, #28
 800b988:	001e      	movs	r6, r3
 800b98a:	9005      	str	r0, [sp, #20]
 800b98c:	9101      	str	r1, [sp, #4]
 800b98e:	9202      	str	r2, [sp, #8]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d048      	beq.n	800ba26 <_strtol_l.constprop.0+0xa2>
 800b994:	000b      	movs	r3, r1
 800b996:	2e24      	cmp	r6, #36	; 0x24
 800b998:	d845      	bhi.n	800ba26 <_strtol_l.constprop.0+0xa2>
 800b99a:	4a3b      	ldr	r2, [pc, #236]	; (800ba88 <_strtol_l.constprop.0+0x104>)
 800b99c:	2108      	movs	r1, #8
 800b99e:	4694      	mov	ip, r2
 800b9a0:	001a      	movs	r2, r3
 800b9a2:	4660      	mov	r0, ip
 800b9a4:	7814      	ldrb	r4, [r2, #0]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	5d00      	ldrb	r0, [r0, r4]
 800b9aa:	001d      	movs	r5, r3
 800b9ac:	0007      	movs	r7, r0
 800b9ae:	400f      	ands	r7, r1
 800b9b0:	4208      	tst	r0, r1
 800b9b2:	d1f5      	bne.n	800b9a0 <_strtol_l.constprop.0+0x1c>
 800b9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800b9b6:	d13d      	bne.n	800ba34 <_strtol_l.constprop.0+0xb0>
 800b9b8:	2701      	movs	r7, #1
 800b9ba:	781c      	ldrb	r4, [r3, #0]
 800b9bc:	1c95      	adds	r5, r2, #2
 800b9be:	2e00      	cmp	r6, #0
 800b9c0:	d05e      	beq.n	800ba80 <_strtol_l.constprop.0+0xfc>
 800b9c2:	2e10      	cmp	r6, #16
 800b9c4:	d109      	bne.n	800b9da <_strtol_l.constprop.0+0x56>
 800b9c6:	2c30      	cmp	r4, #48	; 0x30
 800b9c8:	d107      	bne.n	800b9da <_strtol_l.constprop.0+0x56>
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	782b      	ldrb	r3, [r5, #0]
 800b9ce:	4393      	bics	r3, r2
 800b9d0:	2b58      	cmp	r3, #88	; 0x58
 800b9d2:	d150      	bne.n	800ba76 <_strtol_l.constprop.0+0xf2>
 800b9d4:	2610      	movs	r6, #16
 800b9d6:	786c      	ldrb	r4, [r5, #1]
 800b9d8:	3502      	adds	r5, #2
 800b9da:	4b2c      	ldr	r3, [pc, #176]	; (800ba8c <_strtol_l.constprop.0+0x108>)
 800b9dc:	0031      	movs	r1, r6
 800b9de:	18fb      	adds	r3, r7, r3
 800b9e0:	0018      	movs	r0, r3
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	f7f4 fc30 	bl	8000248 <__aeabi_uidivmod>
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	9104      	str	r1, [sp, #16]
 800b9ec:	2101      	movs	r1, #1
 800b9ee:	4684      	mov	ip, r0
 800b9f0:	0010      	movs	r0, r2
 800b9f2:	4249      	negs	r1, r1
 800b9f4:	0023      	movs	r3, r4
 800b9f6:	3b30      	subs	r3, #48	; 0x30
 800b9f8:	2b09      	cmp	r3, #9
 800b9fa:	d903      	bls.n	800ba04 <_strtol_l.constprop.0+0x80>
 800b9fc:	3b11      	subs	r3, #17
 800b9fe:	2b19      	cmp	r3, #25
 800ba00:	d81d      	bhi.n	800ba3e <_strtol_l.constprop.0+0xba>
 800ba02:	330a      	adds	r3, #10
 800ba04:	429e      	cmp	r6, r3
 800ba06:	dd1e      	ble.n	800ba46 <_strtol_l.constprop.0+0xc2>
 800ba08:	1c54      	adds	r4, r2, #1
 800ba0a:	d009      	beq.n	800ba20 <_strtol_l.constprop.0+0x9c>
 800ba0c:	000a      	movs	r2, r1
 800ba0e:	4584      	cmp	ip, r0
 800ba10:	d306      	bcc.n	800ba20 <_strtol_l.constprop.0+0x9c>
 800ba12:	d102      	bne.n	800ba1a <_strtol_l.constprop.0+0x96>
 800ba14:	9c04      	ldr	r4, [sp, #16]
 800ba16:	429c      	cmp	r4, r3
 800ba18:	db02      	blt.n	800ba20 <_strtol_l.constprop.0+0x9c>
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	4370      	muls	r0, r6
 800ba1e:	1818      	adds	r0, r3, r0
 800ba20:	782c      	ldrb	r4, [r5, #0]
 800ba22:	3501      	adds	r5, #1
 800ba24:	e7e6      	b.n	800b9f4 <_strtol_l.constprop.0+0x70>
 800ba26:	f000 fb1d 	bl	800c064 <__errno>
 800ba2a:	2316      	movs	r3, #22
 800ba2c:	6003      	str	r3, [r0, #0]
 800ba2e:	2000      	movs	r0, #0
 800ba30:	b007      	add	sp, #28
 800ba32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba34:	2c2b      	cmp	r4, #43	; 0x2b
 800ba36:	d1c2      	bne.n	800b9be <_strtol_l.constprop.0+0x3a>
 800ba38:	781c      	ldrb	r4, [r3, #0]
 800ba3a:	1c95      	adds	r5, r2, #2
 800ba3c:	e7bf      	b.n	800b9be <_strtol_l.constprop.0+0x3a>
 800ba3e:	0023      	movs	r3, r4
 800ba40:	3b61      	subs	r3, #97	; 0x61
 800ba42:	2b19      	cmp	r3, #25
 800ba44:	d9dd      	bls.n	800ba02 <_strtol_l.constprop.0+0x7e>
 800ba46:	1c53      	adds	r3, r2, #1
 800ba48:	d109      	bne.n	800ba5e <_strtol_l.constprop.0+0xda>
 800ba4a:	2322      	movs	r3, #34	; 0x22
 800ba4c:	9a05      	ldr	r2, [sp, #20]
 800ba4e:	9803      	ldr	r0, [sp, #12]
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	9b02      	ldr	r3, [sp, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d0eb      	beq.n	800ba30 <_strtol_l.constprop.0+0xac>
 800ba58:	1e6b      	subs	r3, r5, #1
 800ba5a:	9301      	str	r3, [sp, #4]
 800ba5c:	e007      	b.n	800ba6e <_strtol_l.constprop.0+0xea>
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	d000      	beq.n	800ba64 <_strtol_l.constprop.0+0xe0>
 800ba62:	4240      	negs	r0, r0
 800ba64:	9b02      	ldr	r3, [sp, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0e2      	beq.n	800ba30 <_strtol_l.constprop.0+0xac>
 800ba6a:	2a00      	cmp	r2, #0
 800ba6c:	d1f4      	bne.n	800ba58 <_strtol_l.constprop.0+0xd4>
 800ba6e:	9b02      	ldr	r3, [sp, #8]
 800ba70:	9a01      	ldr	r2, [sp, #4]
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	e7dc      	b.n	800ba30 <_strtol_l.constprop.0+0xac>
 800ba76:	2430      	movs	r4, #48	; 0x30
 800ba78:	2e00      	cmp	r6, #0
 800ba7a:	d1ae      	bne.n	800b9da <_strtol_l.constprop.0+0x56>
 800ba7c:	3608      	adds	r6, #8
 800ba7e:	e7ac      	b.n	800b9da <_strtol_l.constprop.0+0x56>
 800ba80:	2c30      	cmp	r4, #48	; 0x30
 800ba82:	d0a2      	beq.n	800b9ca <_strtol_l.constprop.0+0x46>
 800ba84:	260a      	movs	r6, #10
 800ba86:	e7a8      	b.n	800b9da <_strtol_l.constprop.0+0x56>
 800ba88:	080145c9 	.word	0x080145c9
 800ba8c:	7fffffff 	.word	0x7fffffff

0800ba90 <_strtol_r>:
 800ba90:	b510      	push	{r4, lr}
 800ba92:	f7ff ff77 	bl	800b984 <_strtol_l.constprop.0>
 800ba96:	bd10      	pop	{r4, pc}

0800ba98 <strtol>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	4c04      	ldr	r4, [pc, #16]	; (800baac <strtol+0x14>)
 800ba9c:	0013      	movs	r3, r2
 800ba9e:	000a      	movs	r2, r1
 800baa0:	0001      	movs	r1, r0
 800baa2:	6820      	ldr	r0, [r4, #0]
 800baa4:	f7ff ff6e 	bl	800b984 <_strtol_l.constprop.0>
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	46c0      	nop			; (mov r8, r8)
 800baac:	200006d0 	.word	0x200006d0

0800bab0 <_strtoul_l.constprop.0>:
 800bab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab2:	b087      	sub	sp, #28
 800bab4:	9202      	str	r2, [sp, #8]
 800bab6:	4a3e      	ldr	r2, [pc, #248]	; (800bbb0 <_strtoul_l.constprop.0+0x100>)
 800bab8:	001e      	movs	r6, r3
 800baba:	9101      	str	r1, [sp, #4]
 800babc:	000b      	movs	r3, r1
 800babe:	4694      	mov	ip, r2
 800bac0:	2108      	movs	r1, #8
 800bac2:	9005      	str	r0, [sp, #20]
 800bac4:	001a      	movs	r2, r3
 800bac6:	4660      	mov	r0, ip
 800bac8:	7814      	ldrb	r4, [r2, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	5d00      	ldrb	r0, [r0, r4]
 800bace:	001d      	movs	r5, r3
 800bad0:	0007      	movs	r7, r0
 800bad2:	400f      	ands	r7, r1
 800bad4:	4208      	tst	r0, r1
 800bad6:	d1f5      	bne.n	800bac4 <_strtoul_l.constprop.0+0x14>
 800bad8:	2c2d      	cmp	r4, #45	; 0x2d
 800bada:	d13d      	bne.n	800bb58 <_strtoul_l.constprop.0+0xa8>
 800badc:	2701      	movs	r7, #1
 800bade:	781c      	ldrb	r4, [r3, #0]
 800bae0:	1c95      	adds	r5, r2, #2
 800bae2:	2e00      	cmp	r6, #0
 800bae4:	d05f      	beq.n	800bba6 <_strtoul_l.constprop.0+0xf6>
 800bae6:	2e10      	cmp	r6, #16
 800bae8:	d109      	bne.n	800bafe <_strtoul_l.constprop.0+0x4e>
 800baea:	2c30      	cmp	r4, #48	; 0x30
 800baec:	d107      	bne.n	800bafe <_strtoul_l.constprop.0+0x4e>
 800baee:	2220      	movs	r2, #32
 800baf0:	782b      	ldrb	r3, [r5, #0]
 800baf2:	4393      	bics	r3, r2
 800baf4:	2b58      	cmp	r3, #88	; 0x58
 800baf6:	d151      	bne.n	800bb9c <_strtoul_l.constprop.0+0xec>
 800baf8:	2610      	movs	r6, #16
 800bafa:	786c      	ldrb	r4, [r5, #1]
 800bafc:	3502      	adds	r5, #2
 800bafe:	2001      	movs	r0, #1
 800bb00:	0031      	movs	r1, r6
 800bb02:	4240      	negs	r0, r0
 800bb04:	f7f4 fb1a 	bl	800013c <__udivsi3>
 800bb08:	9003      	str	r0, [sp, #12]
 800bb0a:	2001      	movs	r0, #1
 800bb0c:	0031      	movs	r1, r6
 800bb0e:	4240      	negs	r0, r0
 800bb10:	f7f4 fb9a 	bl	8000248 <__aeabi_uidivmod>
 800bb14:	2300      	movs	r3, #0
 800bb16:	2201      	movs	r2, #1
 800bb18:	9104      	str	r1, [sp, #16]
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	0018      	movs	r0, r3
 800bb1e:	4694      	mov	ip, r2
 800bb20:	4249      	negs	r1, r1
 800bb22:	0022      	movs	r2, r4
 800bb24:	3a30      	subs	r2, #48	; 0x30
 800bb26:	2a09      	cmp	r2, #9
 800bb28:	d903      	bls.n	800bb32 <_strtoul_l.constprop.0+0x82>
 800bb2a:	3a11      	subs	r2, #17
 800bb2c:	2a19      	cmp	r2, #25
 800bb2e:	d818      	bhi.n	800bb62 <_strtoul_l.constprop.0+0xb2>
 800bb30:	320a      	adds	r2, #10
 800bb32:	4296      	cmp	r6, r2
 800bb34:	dd19      	ble.n	800bb6a <_strtoul_l.constprop.0+0xba>
 800bb36:	1c5c      	adds	r4, r3, #1
 800bb38:	d00b      	beq.n	800bb52 <_strtoul_l.constprop.0+0xa2>
 800bb3a:	9c03      	ldr	r4, [sp, #12]
 800bb3c:	000b      	movs	r3, r1
 800bb3e:	4284      	cmp	r4, r0
 800bb40:	d307      	bcc.n	800bb52 <_strtoul_l.constprop.0+0xa2>
 800bb42:	d103      	bne.n	800bb4c <_strtoul_l.constprop.0+0x9c>
 800bb44:	9c04      	ldr	r4, [sp, #16]
 800bb46:	000b      	movs	r3, r1
 800bb48:	4294      	cmp	r4, r2
 800bb4a:	db02      	blt.n	800bb52 <_strtoul_l.constprop.0+0xa2>
 800bb4c:	4663      	mov	r3, ip
 800bb4e:	4370      	muls	r0, r6
 800bb50:	1810      	adds	r0, r2, r0
 800bb52:	782c      	ldrb	r4, [r5, #0]
 800bb54:	3501      	adds	r5, #1
 800bb56:	e7e4      	b.n	800bb22 <_strtoul_l.constprop.0+0x72>
 800bb58:	2c2b      	cmp	r4, #43	; 0x2b
 800bb5a:	d1c2      	bne.n	800bae2 <_strtoul_l.constprop.0+0x32>
 800bb5c:	781c      	ldrb	r4, [r3, #0]
 800bb5e:	1c95      	adds	r5, r2, #2
 800bb60:	e7bf      	b.n	800bae2 <_strtoul_l.constprop.0+0x32>
 800bb62:	0022      	movs	r2, r4
 800bb64:	3a61      	subs	r2, #97	; 0x61
 800bb66:	2a19      	cmp	r2, #25
 800bb68:	d9e2      	bls.n	800bb30 <_strtoul_l.constprop.0+0x80>
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	d108      	bne.n	800bb80 <_strtoul_l.constprop.0+0xd0>
 800bb6e:	2222      	movs	r2, #34	; 0x22
 800bb70:	9905      	ldr	r1, [sp, #20]
 800bb72:	0018      	movs	r0, r3
 800bb74:	600a      	str	r2, [r1, #0]
 800bb76:	9a02      	ldr	r2, [sp, #8]
 800bb78:	2a00      	cmp	r2, #0
 800bb7a:	d109      	bne.n	800bb90 <_strtoul_l.constprop.0+0xe0>
 800bb7c:	b007      	add	sp, #28
 800bb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb80:	2f00      	cmp	r7, #0
 800bb82:	d000      	beq.n	800bb86 <_strtoul_l.constprop.0+0xd6>
 800bb84:	4240      	negs	r0, r0
 800bb86:	9a02      	ldr	r2, [sp, #8]
 800bb88:	2a00      	cmp	r2, #0
 800bb8a:	d0f7      	beq.n	800bb7c <_strtoul_l.constprop.0+0xcc>
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d001      	beq.n	800bb94 <_strtoul_l.constprop.0+0xe4>
 800bb90:	1e6b      	subs	r3, r5, #1
 800bb92:	9301      	str	r3, [sp, #4]
 800bb94:	9b02      	ldr	r3, [sp, #8]
 800bb96:	9a01      	ldr	r2, [sp, #4]
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	e7ef      	b.n	800bb7c <_strtoul_l.constprop.0+0xcc>
 800bb9c:	2430      	movs	r4, #48	; 0x30
 800bb9e:	2e00      	cmp	r6, #0
 800bba0:	d1ad      	bne.n	800bafe <_strtoul_l.constprop.0+0x4e>
 800bba2:	3608      	adds	r6, #8
 800bba4:	e7ab      	b.n	800bafe <_strtoul_l.constprop.0+0x4e>
 800bba6:	2c30      	cmp	r4, #48	; 0x30
 800bba8:	d0a1      	beq.n	800baee <_strtoul_l.constprop.0+0x3e>
 800bbaa:	260a      	movs	r6, #10
 800bbac:	e7a7      	b.n	800bafe <_strtoul_l.constprop.0+0x4e>
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	080145c9 	.word	0x080145c9

0800bbb4 <_strtoul_r>:
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	f7ff ff7b 	bl	800bab0 <_strtoul_l.constprop.0>
 800bbba:	bd10      	pop	{r4, pc}

0800bbbc <strtoul>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	4c04      	ldr	r4, [pc, #16]	; (800bbd0 <strtoul+0x14>)
 800bbc0:	0013      	movs	r3, r2
 800bbc2:	000a      	movs	r2, r1
 800bbc4:	0001      	movs	r1, r0
 800bbc6:	6820      	ldr	r0, [r4, #0]
 800bbc8:	f7ff ff72 	bl	800bab0 <_strtoul_l.constprop.0>
 800bbcc:	bd10      	pop	{r4, pc}
 800bbce:	46c0      	nop			; (mov r8, r8)
 800bbd0:	200006d0 	.word	0x200006d0

0800bbd4 <std>:
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	b510      	push	{r4, lr}
 800bbd8:	0004      	movs	r4, r0
 800bbda:	6003      	str	r3, [r0, #0]
 800bbdc:	6043      	str	r3, [r0, #4]
 800bbde:	6083      	str	r3, [r0, #8]
 800bbe0:	8181      	strh	r1, [r0, #12]
 800bbe2:	6643      	str	r3, [r0, #100]	; 0x64
 800bbe4:	81c2      	strh	r2, [r0, #14]
 800bbe6:	6103      	str	r3, [r0, #16]
 800bbe8:	6143      	str	r3, [r0, #20]
 800bbea:	6183      	str	r3, [r0, #24]
 800bbec:	0019      	movs	r1, r3
 800bbee:	2208      	movs	r2, #8
 800bbf0:	305c      	adds	r0, #92	; 0x5c
 800bbf2:	f000 f97d 	bl	800bef0 <memset>
 800bbf6:	4b0b      	ldr	r3, [pc, #44]	; (800bc24 <std+0x50>)
 800bbf8:	61e4      	str	r4, [r4, #28]
 800bbfa:	6223      	str	r3, [r4, #32]
 800bbfc:	4b0a      	ldr	r3, [pc, #40]	; (800bc28 <std+0x54>)
 800bbfe:	6263      	str	r3, [r4, #36]	; 0x24
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <std+0x58>)
 800bc02:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc04:	4b0a      	ldr	r3, [pc, #40]	; (800bc30 <std+0x5c>)
 800bc06:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <std+0x60>)
 800bc0a:	429c      	cmp	r4, r3
 800bc0c:	d005      	beq.n	800bc1a <std+0x46>
 800bc0e:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <std+0x64>)
 800bc10:	429c      	cmp	r4, r3
 800bc12:	d002      	beq.n	800bc1a <std+0x46>
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <std+0x68>)
 800bc16:	429c      	cmp	r4, r3
 800bc18:	d103      	bne.n	800bc22 <std+0x4e>
 800bc1a:	0020      	movs	r0, r4
 800bc1c:	3058      	adds	r0, #88	; 0x58
 800bc1e:	f000 fa4b 	bl	800c0b8 <__retarget_lock_init_recursive>
 800bc22:	bd10      	pop	{r4, pc}
 800bc24:	0800be55 	.word	0x0800be55
 800bc28:	0800be81 	.word	0x0800be81
 800bc2c:	0800beb9 	.word	0x0800beb9
 800bc30:	0800bee5 	.word	0x0800bee5
 800bc34:	20000c64 	.word	0x20000c64
 800bc38:	20000ccc 	.word	0x20000ccc
 800bc3c:	20000d34 	.word	0x20000d34

0800bc40 <stdio_exit_handler>:
 800bc40:	b510      	push	{r4, lr}
 800bc42:	4a03      	ldr	r2, [pc, #12]	; (800bc50 <stdio_exit_handler+0x10>)
 800bc44:	4903      	ldr	r1, [pc, #12]	; (800bc54 <stdio_exit_handler+0x14>)
 800bc46:	4804      	ldr	r0, [pc, #16]	; (800bc58 <stdio_exit_handler+0x18>)
 800bc48:	f000 f86c 	bl	800bd24 <_fwalk_sglue>
 800bc4c:	bd10      	pop	{r4, pc}
 800bc4e:	46c0      	nop			; (mov r8, r8)
 800bc50:	20000438 	.word	0x20000438
 800bc54:	0800fbb9 	.word	0x0800fbb9
 800bc58:	200005b0 	.word	0x200005b0

0800bc5c <cleanup_stdio>:
 800bc5c:	6841      	ldr	r1, [r0, #4]
 800bc5e:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <cleanup_stdio+0x30>)
 800bc60:	b510      	push	{r4, lr}
 800bc62:	0004      	movs	r4, r0
 800bc64:	4299      	cmp	r1, r3
 800bc66:	d001      	beq.n	800bc6c <cleanup_stdio+0x10>
 800bc68:	f003 ffa6 	bl	800fbb8 <_fclose_r>
 800bc6c:	68a1      	ldr	r1, [r4, #8]
 800bc6e:	4b08      	ldr	r3, [pc, #32]	; (800bc90 <cleanup_stdio+0x34>)
 800bc70:	4299      	cmp	r1, r3
 800bc72:	d002      	beq.n	800bc7a <cleanup_stdio+0x1e>
 800bc74:	0020      	movs	r0, r4
 800bc76:	f003 ff9f 	bl	800fbb8 <_fclose_r>
 800bc7a:	68e1      	ldr	r1, [r4, #12]
 800bc7c:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <cleanup_stdio+0x38>)
 800bc7e:	4299      	cmp	r1, r3
 800bc80:	d002      	beq.n	800bc88 <cleanup_stdio+0x2c>
 800bc82:	0020      	movs	r0, r4
 800bc84:	f003 ff98 	bl	800fbb8 <_fclose_r>
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	46c0      	nop			; (mov r8, r8)
 800bc8c:	20000c64 	.word	0x20000c64
 800bc90:	20000ccc 	.word	0x20000ccc
 800bc94:	20000d34 	.word	0x20000d34

0800bc98 <global_stdio_init.part.0>:
 800bc98:	b510      	push	{r4, lr}
 800bc9a:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <global_stdio_init.part.0+0x28>)
 800bc9c:	4a09      	ldr	r2, [pc, #36]	; (800bcc4 <global_stdio_init.part.0+0x2c>)
 800bc9e:	2104      	movs	r1, #4
 800bca0:	601a      	str	r2, [r3, #0]
 800bca2:	4809      	ldr	r0, [pc, #36]	; (800bcc8 <global_stdio_init.part.0+0x30>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	f7ff ff95 	bl	800bbd4 <std>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	2109      	movs	r1, #9
 800bcae:	4807      	ldr	r0, [pc, #28]	; (800bccc <global_stdio_init.part.0+0x34>)
 800bcb0:	f7ff ff90 	bl	800bbd4 <std>
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	2112      	movs	r1, #18
 800bcb8:	4805      	ldr	r0, [pc, #20]	; (800bcd0 <global_stdio_init.part.0+0x38>)
 800bcba:	f7ff ff8b 	bl	800bbd4 <std>
 800bcbe:	bd10      	pop	{r4, pc}
 800bcc0:	20000d9c 	.word	0x20000d9c
 800bcc4:	0800bc41 	.word	0x0800bc41
 800bcc8:	20000c64 	.word	0x20000c64
 800bccc:	20000ccc 	.word	0x20000ccc
 800bcd0:	20000d34 	.word	0x20000d34

0800bcd4 <__sfp_lock_acquire>:
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	4802      	ldr	r0, [pc, #8]	; (800bce0 <__sfp_lock_acquire+0xc>)
 800bcd8:	f000 f9f0 	bl	800c0bc <__retarget_lock_acquire_recursive>
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	46c0      	nop			; (mov r8, r8)
 800bce0:	20000da6 	.word	0x20000da6

0800bce4 <__sfp_lock_release>:
 800bce4:	b510      	push	{r4, lr}
 800bce6:	4802      	ldr	r0, [pc, #8]	; (800bcf0 <__sfp_lock_release+0xc>)
 800bce8:	f000 f9e9 	bl	800c0be <__retarget_lock_release_recursive>
 800bcec:	bd10      	pop	{r4, pc}
 800bcee:	46c0      	nop			; (mov r8, r8)
 800bcf0:	20000da6 	.word	0x20000da6

0800bcf4 <__sinit>:
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	0004      	movs	r4, r0
 800bcf8:	f7ff ffec 	bl	800bcd4 <__sfp_lock_acquire>
 800bcfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d002      	beq.n	800bd08 <__sinit+0x14>
 800bd02:	f7ff ffef 	bl	800bce4 <__sfp_lock_release>
 800bd06:	bd10      	pop	{r4, pc}
 800bd08:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <__sinit+0x28>)
 800bd0a:	6363      	str	r3, [r4, #52]	; 0x34
 800bd0c:	4b04      	ldr	r3, [pc, #16]	; (800bd20 <__sinit+0x2c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1f6      	bne.n	800bd02 <__sinit+0xe>
 800bd14:	f7ff ffc0 	bl	800bc98 <global_stdio_init.part.0>
 800bd18:	e7f3      	b.n	800bd02 <__sinit+0xe>
 800bd1a:	46c0      	nop			; (mov r8, r8)
 800bd1c:	0800bc5d 	.word	0x0800bc5d
 800bd20:	20000d9c 	.word	0x20000d9c

0800bd24 <_fwalk_sglue>:
 800bd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd26:	0014      	movs	r4, r2
 800bd28:	2600      	movs	r6, #0
 800bd2a:	9000      	str	r0, [sp, #0]
 800bd2c:	9101      	str	r1, [sp, #4]
 800bd2e:	68a5      	ldr	r5, [r4, #8]
 800bd30:	6867      	ldr	r7, [r4, #4]
 800bd32:	3f01      	subs	r7, #1
 800bd34:	d504      	bpl.n	800bd40 <_fwalk_sglue+0x1c>
 800bd36:	6824      	ldr	r4, [r4, #0]
 800bd38:	2c00      	cmp	r4, #0
 800bd3a:	d1f8      	bne.n	800bd2e <_fwalk_sglue+0xa>
 800bd3c:	0030      	movs	r0, r6
 800bd3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bd40:	89ab      	ldrh	r3, [r5, #12]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d908      	bls.n	800bd58 <_fwalk_sglue+0x34>
 800bd46:	220e      	movs	r2, #14
 800bd48:	5eab      	ldrsh	r3, [r5, r2]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	d004      	beq.n	800bd58 <_fwalk_sglue+0x34>
 800bd4e:	0029      	movs	r1, r5
 800bd50:	9800      	ldr	r0, [sp, #0]
 800bd52:	9b01      	ldr	r3, [sp, #4]
 800bd54:	4798      	blx	r3
 800bd56:	4306      	orrs	r6, r0
 800bd58:	3568      	adds	r5, #104	; 0x68
 800bd5a:	e7ea      	b.n	800bd32 <_fwalk_sglue+0xe>

0800bd5c <snprintf>:
 800bd5c:	b40c      	push	{r2, r3}
 800bd5e:	b530      	push	{r4, r5, lr}
 800bd60:	4b17      	ldr	r3, [pc, #92]	; (800bdc0 <snprintf+0x64>)
 800bd62:	000c      	movs	r4, r1
 800bd64:	681d      	ldr	r5, [r3, #0]
 800bd66:	b09d      	sub	sp, #116	; 0x74
 800bd68:	2900      	cmp	r1, #0
 800bd6a:	da08      	bge.n	800bd7e <snprintf+0x22>
 800bd6c:	238b      	movs	r3, #139	; 0x8b
 800bd6e:	2001      	movs	r0, #1
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	4240      	negs	r0, r0
 800bd74:	b01d      	add	sp, #116	; 0x74
 800bd76:	bc30      	pop	{r4, r5}
 800bd78:	bc08      	pop	{r3}
 800bd7a:	b002      	add	sp, #8
 800bd7c:	4718      	bx	r3
 800bd7e:	2382      	movs	r3, #130	; 0x82
 800bd80:	466a      	mov	r2, sp
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	8293      	strh	r3, [r2, #20]
 800bd86:	2300      	movs	r3, #0
 800bd88:	9002      	str	r0, [sp, #8]
 800bd8a:	9006      	str	r0, [sp, #24]
 800bd8c:	4299      	cmp	r1, r3
 800bd8e:	d000      	beq.n	800bd92 <snprintf+0x36>
 800bd90:	1e4b      	subs	r3, r1, #1
 800bd92:	9304      	str	r3, [sp, #16]
 800bd94:	9307      	str	r3, [sp, #28]
 800bd96:	2301      	movs	r3, #1
 800bd98:	466a      	mov	r2, sp
 800bd9a:	425b      	negs	r3, r3
 800bd9c:	82d3      	strh	r3, [r2, #22]
 800bd9e:	0028      	movs	r0, r5
 800bda0:	ab21      	add	r3, sp, #132	; 0x84
 800bda2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bda4:	a902      	add	r1, sp, #8
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f001 faa8 	bl	800d2fc <_svfprintf_r>
 800bdac:	1c43      	adds	r3, r0, #1
 800bdae:	da01      	bge.n	800bdb4 <snprintf+0x58>
 800bdb0:	238b      	movs	r3, #139	; 0x8b
 800bdb2:	602b      	str	r3, [r5, #0]
 800bdb4:	2c00      	cmp	r4, #0
 800bdb6:	d0dd      	beq.n	800bd74 <snprintf+0x18>
 800bdb8:	2200      	movs	r2, #0
 800bdba:	9b02      	ldr	r3, [sp, #8]
 800bdbc:	701a      	strb	r2, [r3, #0]
 800bdbe:	e7d9      	b.n	800bd74 <snprintf+0x18>
 800bdc0:	200006d0 	.word	0x200006d0

0800bdc4 <sprintf>:
 800bdc4:	b40e      	push	{r1, r2, r3}
 800bdc6:	b500      	push	{lr}
 800bdc8:	490b      	ldr	r1, [pc, #44]	; (800bdf8 <sprintf+0x34>)
 800bdca:	b09c      	sub	sp, #112	; 0x70
 800bdcc:	ab1d      	add	r3, sp, #116	; 0x74
 800bdce:	9002      	str	r0, [sp, #8]
 800bdd0:	9006      	str	r0, [sp, #24]
 800bdd2:	9107      	str	r1, [sp, #28]
 800bdd4:	9104      	str	r1, [sp, #16]
 800bdd6:	4809      	ldr	r0, [pc, #36]	; (800bdfc <sprintf+0x38>)
 800bdd8:	4909      	ldr	r1, [pc, #36]	; (800be00 <sprintf+0x3c>)
 800bdda:	cb04      	ldmia	r3!, {r2}
 800bddc:	9105      	str	r1, [sp, #20]
 800bdde:	6800      	ldr	r0, [r0, #0]
 800bde0:	a902      	add	r1, sp, #8
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	f001 fa8a 	bl	800d2fc <_svfprintf_r>
 800bde8:	2200      	movs	r2, #0
 800bdea:	9b02      	ldr	r3, [sp, #8]
 800bdec:	701a      	strb	r2, [r3, #0]
 800bdee:	b01c      	add	sp, #112	; 0x70
 800bdf0:	bc08      	pop	{r3}
 800bdf2:	b003      	add	sp, #12
 800bdf4:	4718      	bx	r3
 800bdf6:	46c0      	nop			; (mov r8, r8)
 800bdf8:	7fffffff 	.word	0x7fffffff
 800bdfc:	200006d0 	.word	0x200006d0
 800be00:	ffff0208 	.word	0xffff0208

0800be04 <sscanf>:
 800be04:	b40e      	push	{r1, r2, r3}
 800be06:	b530      	push	{r4, r5, lr}
 800be08:	2381      	movs	r3, #129	; 0x81
 800be0a:	b09c      	sub	sp, #112	; 0x70
 800be0c:	466a      	mov	r2, sp
 800be0e:	ac1f      	add	r4, sp, #124	; 0x7c
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	cc20      	ldmia	r4!, {r5}
 800be14:	8293      	strh	r3, [r2, #20]
 800be16:	9002      	str	r0, [sp, #8]
 800be18:	9006      	str	r0, [sp, #24]
 800be1a:	f7f4 f973 	bl	8000104 <strlen>
 800be1e:	4b0b      	ldr	r3, [pc, #44]	; (800be4c <sscanf+0x48>)
 800be20:	466a      	mov	r2, sp
 800be22:	930a      	str	r3, [sp, #40]	; 0x28
 800be24:	2300      	movs	r3, #0
 800be26:	9003      	str	r0, [sp, #12]
 800be28:	9007      	str	r0, [sp, #28]
 800be2a:	4809      	ldr	r0, [pc, #36]	; (800be50 <sscanf+0x4c>)
 800be2c:	930e      	str	r3, [sp, #56]	; 0x38
 800be2e:	9313      	str	r3, [sp, #76]	; 0x4c
 800be30:	3b01      	subs	r3, #1
 800be32:	82d3      	strh	r3, [r2, #22]
 800be34:	a902      	add	r1, sp, #8
 800be36:	0023      	movs	r3, r4
 800be38:	002a      	movs	r2, r5
 800be3a:	6800      	ldr	r0, [r0, #0]
 800be3c:	9401      	str	r4, [sp, #4]
 800be3e:	f002 fc9f 	bl	800e780 <__ssvfscanf_r>
 800be42:	b01c      	add	sp, #112	; 0x70
 800be44:	bc30      	pop	{r4, r5}
 800be46:	bc08      	pop	{r3}
 800be48:	b003      	add	sp, #12
 800be4a:	4718      	bx	r3
 800be4c:	0800be7d 	.word	0x0800be7d
 800be50:	200006d0 	.word	0x200006d0

0800be54 <__sread>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	000c      	movs	r4, r1
 800be58:	250e      	movs	r5, #14
 800be5a:	5f49      	ldrsh	r1, [r1, r5]
 800be5c:	f000 f8c8 	bl	800bff0 <_read_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	db03      	blt.n	800be6c <__sread+0x18>
 800be64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800be66:	181b      	adds	r3, r3, r0
 800be68:	6523      	str	r3, [r4, #80]	; 0x50
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	89a3      	ldrh	r3, [r4, #12]
 800be6e:	4a02      	ldr	r2, [pc, #8]	; (800be78 <__sread+0x24>)
 800be70:	4013      	ands	r3, r2
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	e7f9      	b.n	800be6a <__sread+0x16>
 800be76:	46c0      	nop			; (mov r8, r8)
 800be78:	ffffefff 	.word	0xffffefff

0800be7c <__seofread>:
 800be7c:	2000      	movs	r0, #0
 800be7e:	4770      	bx	lr

0800be80 <__swrite>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	001f      	movs	r7, r3
 800be84:	898b      	ldrh	r3, [r1, #12]
 800be86:	0005      	movs	r5, r0
 800be88:	000c      	movs	r4, r1
 800be8a:	0016      	movs	r6, r2
 800be8c:	05db      	lsls	r3, r3, #23
 800be8e:	d505      	bpl.n	800be9c <__swrite+0x1c>
 800be90:	230e      	movs	r3, #14
 800be92:	5ec9      	ldrsh	r1, [r1, r3]
 800be94:	2200      	movs	r2, #0
 800be96:	2302      	movs	r3, #2
 800be98:	f000 f896 	bl	800bfc8 <_lseek_r>
 800be9c:	89a3      	ldrh	r3, [r4, #12]
 800be9e:	4a05      	ldr	r2, [pc, #20]	; (800beb4 <__swrite+0x34>)
 800bea0:	0028      	movs	r0, r5
 800bea2:	4013      	ands	r3, r2
 800bea4:	81a3      	strh	r3, [r4, #12]
 800bea6:	0032      	movs	r2, r6
 800bea8:	230e      	movs	r3, #14
 800beaa:	5ee1      	ldrsh	r1, [r4, r3]
 800beac:	003b      	movs	r3, r7
 800beae:	f000 f8c5 	bl	800c03c <_write_r>
 800beb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb4:	ffffefff 	.word	0xffffefff

0800beb8 <__sseek>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	000c      	movs	r4, r1
 800bebc:	250e      	movs	r5, #14
 800bebe:	5f49      	ldrsh	r1, [r1, r5]
 800bec0:	f000 f882 	bl	800bfc8 <_lseek_r>
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	1c42      	adds	r2, r0, #1
 800bec8:	d103      	bne.n	800bed2 <__sseek+0x1a>
 800beca:	4a05      	ldr	r2, [pc, #20]	; (800bee0 <__sseek+0x28>)
 800becc:	4013      	ands	r3, r2
 800bece:	81a3      	strh	r3, [r4, #12]
 800bed0:	bd70      	pop	{r4, r5, r6, pc}
 800bed2:	2280      	movs	r2, #128	; 0x80
 800bed4:	0152      	lsls	r2, r2, #5
 800bed6:	4313      	orrs	r3, r2
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	6520      	str	r0, [r4, #80]	; 0x50
 800bedc:	e7f8      	b.n	800bed0 <__sseek+0x18>
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	ffffefff 	.word	0xffffefff

0800bee4 <__sclose>:
 800bee4:	b510      	push	{r4, lr}
 800bee6:	230e      	movs	r3, #14
 800bee8:	5ec9      	ldrsh	r1, [r1, r3]
 800beea:	f000 f85b 	bl	800bfa4 <_close_r>
 800beee:	bd10      	pop	{r4, pc}

0800bef0 <memset>:
 800bef0:	0003      	movs	r3, r0
 800bef2:	1882      	adds	r2, r0, r2
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d100      	bne.n	800befa <memset+0xa>
 800bef8:	4770      	bx	lr
 800befa:	7019      	strb	r1, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	e7f9      	b.n	800bef4 <memset+0x4>

0800bf00 <strchr>:
 800bf00:	b2c9      	uxtb	r1, r1
 800bf02:	7803      	ldrb	r3, [r0, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d004      	beq.n	800bf12 <strchr+0x12>
 800bf08:	428b      	cmp	r3, r1
 800bf0a:	d100      	bne.n	800bf0e <strchr+0xe>
 800bf0c:	4770      	bx	lr
 800bf0e:	3001      	adds	r0, #1
 800bf10:	e7f7      	b.n	800bf02 <strchr+0x2>
 800bf12:	424b      	negs	r3, r1
 800bf14:	4159      	adcs	r1, r3
 800bf16:	4249      	negs	r1, r1
 800bf18:	4008      	ands	r0, r1
 800bf1a:	e7f7      	b.n	800bf0c <strchr+0xc>

0800bf1c <strncmp>:
 800bf1c:	b530      	push	{r4, r5, lr}
 800bf1e:	0005      	movs	r5, r0
 800bf20:	1e10      	subs	r0, r2, #0
 800bf22:	d00b      	beq.n	800bf3c <strncmp+0x20>
 800bf24:	2400      	movs	r4, #0
 800bf26:	3a01      	subs	r2, #1
 800bf28:	5d2b      	ldrb	r3, [r5, r4]
 800bf2a:	5d08      	ldrb	r0, [r1, r4]
 800bf2c:	4283      	cmp	r3, r0
 800bf2e:	d104      	bne.n	800bf3a <strncmp+0x1e>
 800bf30:	42a2      	cmp	r2, r4
 800bf32:	d002      	beq.n	800bf3a <strncmp+0x1e>
 800bf34:	3401      	adds	r4, #1
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1f6      	bne.n	800bf28 <strncmp+0xc>
 800bf3a:	1a18      	subs	r0, r3, r0
 800bf3c:	bd30      	pop	{r4, r5, pc}

0800bf3e <strncpy>:
 800bf3e:	0003      	movs	r3, r0
 800bf40:	b530      	push	{r4, r5, lr}
 800bf42:	001d      	movs	r5, r3
 800bf44:	2a00      	cmp	r2, #0
 800bf46:	d006      	beq.n	800bf56 <strncpy+0x18>
 800bf48:	780c      	ldrb	r4, [r1, #0]
 800bf4a:	3a01      	subs	r2, #1
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	702c      	strb	r4, [r5, #0]
 800bf50:	3101      	adds	r1, #1
 800bf52:	2c00      	cmp	r4, #0
 800bf54:	d1f5      	bne.n	800bf42 <strncpy+0x4>
 800bf56:	2100      	movs	r1, #0
 800bf58:	189a      	adds	r2, r3, r2
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d100      	bne.n	800bf60 <strncpy+0x22>
 800bf5e:	bd30      	pop	{r4, r5, pc}
 800bf60:	7019      	strb	r1, [r3, #0]
 800bf62:	3301      	adds	r3, #1
 800bf64:	e7f9      	b.n	800bf5a <strncpy+0x1c>

0800bf66 <strstr>:
 800bf66:	780a      	ldrb	r2, [r1, #0]
 800bf68:	b530      	push	{r4, r5, lr}
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	d10c      	bne.n	800bf88 <strstr+0x22>
 800bf6e:	bd30      	pop	{r4, r5, pc}
 800bf70:	429a      	cmp	r2, r3
 800bf72:	d108      	bne.n	800bf86 <strstr+0x20>
 800bf74:	2301      	movs	r3, #1
 800bf76:	5ccc      	ldrb	r4, [r1, r3]
 800bf78:	2c00      	cmp	r4, #0
 800bf7a:	d0f8      	beq.n	800bf6e <strstr+0x8>
 800bf7c:	5cc5      	ldrb	r5, [r0, r3]
 800bf7e:	42a5      	cmp	r5, r4
 800bf80:	d101      	bne.n	800bf86 <strstr+0x20>
 800bf82:	3301      	adds	r3, #1
 800bf84:	e7f7      	b.n	800bf76 <strstr+0x10>
 800bf86:	3001      	adds	r0, #1
 800bf88:	7803      	ldrb	r3, [r0, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f0      	bne.n	800bf70 <strstr+0xa>
 800bf8e:	0018      	movs	r0, r3
 800bf90:	e7ed      	b.n	800bf6e <strstr+0x8>
	...

0800bf94 <__locale_mb_cur_max>:
 800bf94:	2294      	movs	r2, #148	; 0x94
 800bf96:	4b02      	ldr	r3, [pc, #8]	; (800bfa0 <__locale_mb_cur_max+0xc>)
 800bf98:	0052      	lsls	r2, r2, #1
 800bf9a:	5c98      	ldrb	r0, [r3, r2]
 800bf9c:	4770      	bx	lr
 800bf9e:	46c0      	nop			; (mov r8, r8)
 800bfa0:	20000444 	.word	0x20000444

0800bfa4 <_close_r>:
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	b570      	push	{r4, r5, r6, lr}
 800bfa8:	4d06      	ldr	r5, [pc, #24]	; (800bfc4 <_close_r+0x20>)
 800bfaa:	0004      	movs	r4, r0
 800bfac:	0008      	movs	r0, r1
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	f7f7 fe83 	bl	8003cba <_close>
 800bfb4:	1c43      	adds	r3, r0, #1
 800bfb6:	d103      	bne.n	800bfc0 <_close_r+0x1c>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d000      	beq.n	800bfc0 <_close_r+0x1c>
 800bfbe:	6023      	str	r3, [r4, #0]
 800bfc0:	bd70      	pop	{r4, r5, r6, pc}
 800bfc2:	46c0      	nop			; (mov r8, r8)
 800bfc4:	20000da0 	.word	0x20000da0

0800bfc8 <_lseek_r>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	0004      	movs	r4, r0
 800bfcc:	0008      	movs	r0, r1
 800bfce:	0011      	movs	r1, r2
 800bfd0:	001a      	movs	r2, r3
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	4d05      	ldr	r5, [pc, #20]	; (800bfec <_lseek_r+0x24>)
 800bfd6:	602b      	str	r3, [r5, #0]
 800bfd8:	f7f7 fe90 	bl	8003cfc <_lseek>
 800bfdc:	1c43      	adds	r3, r0, #1
 800bfde:	d103      	bne.n	800bfe8 <_lseek_r+0x20>
 800bfe0:	682b      	ldr	r3, [r5, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d000      	beq.n	800bfe8 <_lseek_r+0x20>
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	bd70      	pop	{r4, r5, r6, pc}
 800bfea:	46c0      	nop			; (mov r8, r8)
 800bfec:	20000da0 	.word	0x20000da0

0800bff0 <_read_r>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	0004      	movs	r4, r0
 800bff4:	0008      	movs	r0, r1
 800bff6:	0011      	movs	r1, r2
 800bff8:	001a      	movs	r2, r3
 800bffa:	2300      	movs	r3, #0
 800bffc:	4d05      	ldr	r5, [pc, #20]	; (800c014 <_read_r+0x24>)
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f7 fe22 	bl	8003c48 <_read>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d103      	bne.n	800c010 <_read_r+0x20>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d000      	beq.n	800c010 <_read_r+0x20>
 800c00e:	6023      	str	r3, [r4, #0]
 800c010:	bd70      	pop	{r4, r5, r6, pc}
 800c012:	46c0      	nop			; (mov r8, r8)
 800c014:	20000da0 	.word	0x20000da0

0800c018 <_sbrk_r>:
 800c018:	2300      	movs	r3, #0
 800c01a:	b570      	push	{r4, r5, r6, lr}
 800c01c:	4d06      	ldr	r5, [pc, #24]	; (800c038 <_sbrk_r+0x20>)
 800c01e:	0004      	movs	r4, r0
 800c020:	0008      	movs	r0, r1
 800c022:	602b      	str	r3, [r5, #0]
 800c024:	f7f7 fe76 	bl	8003d14 <_sbrk>
 800c028:	1c43      	adds	r3, r0, #1
 800c02a:	d103      	bne.n	800c034 <_sbrk_r+0x1c>
 800c02c:	682b      	ldr	r3, [r5, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d000      	beq.n	800c034 <_sbrk_r+0x1c>
 800c032:	6023      	str	r3, [r4, #0]
 800c034:	bd70      	pop	{r4, r5, r6, pc}
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	20000da0 	.word	0x20000da0

0800c03c <_write_r>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	0004      	movs	r4, r0
 800c040:	0008      	movs	r0, r1
 800c042:	0011      	movs	r1, r2
 800c044:	001a      	movs	r2, r3
 800c046:	2300      	movs	r3, #0
 800c048:	4d05      	ldr	r5, [pc, #20]	; (800c060 <_write_r+0x24>)
 800c04a:	602b      	str	r3, [r5, #0]
 800c04c:	f7f7 fe19 	bl	8003c82 <_write>
 800c050:	1c43      	adds	r3, r0, #1
 800c052:	d103      	bne.n	800c05c <_write_r+0x20>
 800c054:	682b      	ldr	r3, [r5, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d000      	beq.n	800c05c <_write_r+0x20>
 800c05a:	6023      	str	r3, [r4, #0]
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	20000da0 	.word	0x20000da0

0800c064 <__errno>:
 800c064:	4b01      	ldr	r3, [pc, #4]	; (800c06c <__errno+0x8>)
 800c066:	6818      	ldr	r0, [r3, #0]
 800c068:	4770      	bx	lr
 800c06a:	46c0      	nop			; (mov r8, r8)
 800c06c:	200006d0 	.word	0x200006d0

0800c070 <__libc_init_array>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	2600      	movs	r6, #0
 800c074:	4c0c      	ldr	r4, [pc, #48]	; (800c0a8 <__libc_init_array+0x38>)
 800c076:	4d0d      	ldr	r5, [pc, #52]	; (800c0ac <__libc_init_array+0x3c>)
 800c078:	1b64      	subs	r4, r4, r5
 800c07a:	10a4      	asrs	r4, r4, #2
 800c07c:	42a6      	cmp	r6, r4
 800c07e:	d109      	bne.n	800c094 <__libc_init_array+0x24>
 800c080:	2600      	movs	r6, #0
 800c082:	f006 fc3f 	bl	8012904 <_init>
 800c086:	4c0a      	ldr	r4, [pc, #40]	; (800c0b0 <__libc_init_array+0x40>)
 800c088:	4d0a      	ldr	r5, [pc, #40]	; (800c0b4 <__libc_init_array+0x44>)
 800c08a:	1b64      	subs	r4, r4, r5
 800c08c:	10a4      	asrs	r4, r4, #2
 800c08e:	42a6      	cmp	r6, r4
 800c090:	d105      	bne.n	800c09e <__libc_init_array+0x2e>
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	00b3      	lsls	r3, r6, #2
 800c096:	58eb      	ldr	r3, [r5, r3]
 800c098:	4798      	blx	r3
 800c09a:	3601      	adds	r6, #1
 800c09c:	e7ee      	b.n	800c07c <__libc_init_array+0xc>
 800c09e:	00b3      	lsls	r3, r6, #2
 800c0a0:	58eb      	ldr	r3, [r5, r3]
 800c0a2:	4798      	blx	r3
 800c0a4:	3601      	adds	r6, #1
 800c0a6:	e7f2      	b.n	800c08e <__libc_init_array+0x1e>
 800c0a8:	080149e4 	.word	0x080149e4
 800c0ac:	080149e4 	.word	0x080149e4
 800c0b0:	080149ec 	.word	0x080149ec
 800c0b4:	080149e4 	.word	0x080149e4

0800c0b8 <__retarget_lock_init_recursive>:
 800c0b8:	4770      	bx	lr

0800c0ba <__retarget_lock_close_recursive>:
 800c0ba:	4770      	bx	lr

0800c0bc <__retarget_lock_acquire_recursive>:
 800c0bc:	4770      	bx	lr

0800c0be <__retarget_lock_release_recursive>:
 800c0be:	4770      	bx	lr

0800c0c0 <sysconf>:
 800c0c0:	2380      	movs	r3, #128	; 0x80
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	2808      	cmp	r0, #8
 800c0c6:	d004      	beq.n	800c0d2 <sysconf+0x12>
 800c0c8:	f7ff ffcc 	bl	800c064 <__errno>
 800c0cc:	2316      	movs	r3, #22
 800c0ce:	6003      	str	r3, [r0, #0]
 800c0d0:	3b17      	subs	r3, #23
 800c0d2:	0018      	movs	r0, r3
 800c0d4:	bd10      	pop	{r4, pc}

0800c0d6 <memcpy>:
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d100      	bne.n	800c0e0 <memcpy+0xa>
 800c0de:	bd10      	pop	{r4, pc}
 800c0e0:	5ccc      	ldrb	r4, [r1, r3]
 800c0e2:	54c4      	strb	r4, [r0, r3]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	e7f8      	b.n	800c0da <memcpy+0x4>

0800c0e8 <nan>:
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	4901      	ldr	r1, [pc, #4]	; (800c0f0 <nan+0x8>)
 800c0ec:	4770      	bx	lr
 800c0ee:	46c0      	nop			; (mov r8, r8)
 800c0f0:	7ff80000 	.word	0x7ff80000

0800c0f4 <nanf>:
 800c0f4:	4800      	ldr	r0, [pc, #0]	; (800c0f8 <nanf+0x4>)
 800c0f6:	4770      	bx	lr
 800c0f8:	7fc00000 	.word	0x7fc00000

0800c0fc <register_fini>:
 800c0fc:	4b03      	ldr	r3, [pc, #12]	; (800c10c <register_fini+0x10>)
 800c0fe:	b510      	push	{r4, lr}
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <register_fini+0xe>
 800c104:	4802      	ldr	r0, [pc, #8]	; (800c110 <register_fini+0x14>)
 800c106:	f000 f805 	bl	800c114 <atexit>
 800c10a:	bd10      	pop	{r4, pc}
 800c10c:	00000000 	.word	0x00000000
 800c110:	0800fe71 	.word	0x0800fe71

0800c114 <atexit>:
 800c114:	2300      	movs	r3, #0
 800c116:	b510      	push	{r4, lr}
 800c118:	0001      	movs	r1, r0
 800c11a:	001a      	movs	r2, r3
 800c11c:	0018      	movs	r0, r3
 800c11e:	f003 fef9 	bl	800ff14 <__register_exitproc>
 800c122:	bd10      	pop	{r4, pc}

0800c124 <_malloc_trim_r>:
 800c124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c126:	0004      	movs	r4, r0
 800c128:	2008      	movs	r0, #8
 800c12a:	000d      	movs	r5, r1
 800c12c:	f7ff ffc8 	bl	800c0c0 <sysconf>
 800c130:	0006      	movs	r6, r0
 800c132:	0020      	movs	r0, r4
 800c134:	f7fe fdde 	bl	800acf4 <__malloc_lock>
 800c138:	2203      	movs	r2, #3
 800c13a:	4f21      	ldr	r7, [pc, #132]	; (800c1c0 <_malloc_trim_r+0x9c>)
 800c13c:	0031      	movs	r1, r6
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	4393      	bics	r3, r2
 800c144:	1b58      	subs	r0, r3, r5
 800c146:	3811      	subs	r0, #17
 800c148:	1980      	adds	r0, r0, r6
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	f7f3 fff6 	bl	800013c <__udivsi3>
 800c150:	1e45      	subs	r5, r0, #1
 800c152:	4375      	muls	r5, r6
 800c154:	42ae      	cmp	r6, r5
 800c156:	dd04      	ble.n	800c162 <_malloc_trim_r+0x3e>
 800c158:	0020      	movs	r0, r4
 800c15a:	f7fe fdd3 	bl	800ad04 <__malloc_unlock>
 800c15e:	2000      	movs	r0, #0
 800c160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c162:	2100      	movs	r1, #0
 800c164:	0020      	movs	r0, r4
 800c166:	f7ff ff57 	bl	800c018 <_sbrk_r>
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	9a01      	ldr	r2, [sp, #4]
 800c16e:	189b      	adds	r3, r3, r2
 800c170:	4298      	cmp	r0, r3
 800c172:	d1f1      	bne.n	800c158 <_malloc_trim_r+0x34>
 800c174:	0020      	movs	r0, r4
 800c176:	4269      	negs	r1, r5
 800c178:	f7ff ff4e 	bl	800c018 <_sbrk_r>
 800c17c:	3001      	adds	r0, #1
 800c17e:	d110      	bne.n	800c1a2 <_malloc_trim_r+0x7e>
 800c180:	2100      	movs	r1, #0
 800c182:	0020      	movs	r0, r4
 800c184:	f7ff ff48 	bl	800c018 <_sbrk_r>
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	1a81      	subs	r1, r0, r2
 800c18c:	290f      	cmp	r1, #15
 800c18e:	dde3      	ble.n	800c158 <_malloc_trim_r+0x34>
 800c190:	4d0c      	ldr	r5, [pc, #48]	; (800c1c4 <_malloc_trim_r+0xa0>)
 800c192:	4b0d      	ldr	r3, [pc, #52]	; (800c1c8 <_malloc_trim_r+0xa4>)
 800c194:	682d      	ldr	r5, [r5, #0]
 800c196:	1b40      	subs	r0, r0, r5
 800c198:	6018      	str	r0, [r3, #0]
 800c19a:	2301      	movs	r3, #1
 800c19c:	430b      	orrs	r3, r1
 800c19e:	6053      	str	r3, [r2, #4]
 800c1a0:	e7da      	b.n	800c158 <_malloc_trim_r+0x34>
 800c1a2:	2601      	movs	r6, #1
 800c1a4:	9b01      	ldr	r3, [sp, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	1b5b      	subs	r3, r3, r5
 800c1aa:	4333      	orrs	r3, r6
 800c1ac:	6053      	str	r3, [r2, #4]
 800c1ae:	4a06      	ldr	r2, [pc, #24]	; (800c1c8 <_malloc_trim_r+0xa4>)
 800c1b0:	0020      	movs	r0, r4
 800c1b2:	6813      	ldr	r3, [r2, #0]
 800c1b4:	1b5b      	subs	r3, r3, r5
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	f7fe fda4 	bl	800ad04 <__malloc_unlock>
 800c1bc:	0030      	movs	r0, r6
 800c1be:	e7cf      	b.n	800c160 <_malloc_trim_r+0x3c>
 800c1c0:	20000028 	.word	0x20000028
 800c1c4:	20000430 	.word	0x20000430
 800c1c8:	20000c30 	.word	0x20000c30

0800c1cc <_free_r>:
 800c1cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1ce:	1e0d      	subs	r5, r1, #0
 800c1d0:	9001      	str	r0, [sp, #4]
 800c1d2:	d02d      	beq.n	800c230 <_free_r+0x64>
 800c1d4:	f7fe fd8e 	bl	800acf4 <__malloc_lock>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	0029      	movs	r1, r5
 800c1dc:	469c      	mov	ip, r3
 800c1de:	3908      	subs	r1, #8
 800c1e0:	684f      	ldr	r7, [r1, #4]
 800c1e2:	4662      	mov	r2, ip
 800c1e4:	003b      	movs	r3, r7
 800c1e6:	4664      	mov	r4, ip
 800c1e8:	4393      	bics	r3, r2
 800c1ea:	18c8      	adds	r0, r1, r3
 800c1ec:	6845      	ldr	r5, [r0, #4]
 800c1ee:	3202      	adds	r2, #2
 800c1f0:	4395      	bics	r5, r2
 800c1f2:	4a4a      	ldr	r2, [pc, #296]	; (800c31c <_free_r+0x150>)
 800c1f4:	4027      	ands	r7, r4
 800c1f6:	6896      	ldr	r6, [r2, #8]
 800c1f8:	4286      	cmp	r6, r0
 800c1fa:	d11a      	bne.n	800c232 <_free_r+0x66>
 800c1fc:	195b      	adds	r3, r3, r5
 800c1fe:	2f00      	cmp	r7, #0
 800c200:	d106      	bne.n	800c210 <_free_r+0x44>
 800c202:	6808      	ldr	r0, [r1, #0]
 800c204:	1a09      	subs	r1, r1, r0
 800c206:	688d      	ldr	r5, [r1, #8]
 800c208:	181b      	adds	r3, r3, r0
 800c20a:	68c8      	ldr	r0, [r1, #12]
 800c20c:	60e8      	str	r0, [r5, #12]
 800c20e:	6085      	str	r5, [r0, #8]
 800c210:	2001      	movs	r0, #1
 800c212:	4318      	orrs	r0, r3
 800c214:	6048      	str	r0, [r1, #4]
 800c216:	6091      	str	r1, [r2, #8]
 800c218:	4a41      	ldr	r2, [pc, #260]	; (800c320 <_free_r+0x154>)
 800c21a:	6812      	ldr	r2, [r2, #0]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d804      	bhi.n	800c22a <_free_r+0x5e>
 800c220:	4b40      	ldr	r3, [pc, #256]	; (800c324 <_free_r+0x158>)
 800c222:	9801      	ldr	r0, [sp, #4]
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	f7ff ff7d 	bl	800c124 <_malloc_trim_r>
 800c22a:	9801      	ldr	r0, [sp, #4]
 800c22c:	f7fe fd6a 	bl	800ad04 <__malloc_unlock>
 800c230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c232:	2600      	movs	r6, #0
 800c234:	6045      	str	r5, [r0, #4]
 800c236:	42b7      	cmp	r7, r6
 800c238:	d109      	bne.n	800c24e <_free_r+0x82>
 800c23a:	680f      	ldr	r7, [r1, #0]
 800c23c:	4c3a      	ldr	r4, [pc, #232]	; (800c328 <_free_r+0x15c>)
 800c23e:	1bc9      	subs	r1, r1, r7
 800c240:	19db      	adds	r3, r3, r7
 800c242:	688f      	ldr	r7, [r1, #8]
 800c244:	42a7      	cmp	r7, r4
 800c246:	d02c      	beq.n	800c2a2 <_free_r+0xd6>
 800c248:	68cc      	ldr	r4, [r1, #12]
 800c24a:	60fc      	str	r4, [r7, #12]
 800c24c:	60a7      	str	r7, [r4, #8]
 800c24e:	1947      	adds	r7, r0, r5
 800c250:	687c      	ldr	r4, [r7, #4]
 800c252:	2701      	movs	r7, #1
 800c254:	423c      	tst	r4, r7
 800c256:	d10b      	bne.n	800c270 <_free_r+0xa4>
 800c258:	195b      	adds	r3, r3, r5
 800c25a:	6885      	ldr	r5, [r0, #8]
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	d122      	bne.n	800c2a6 <_free_r+0xda>
 800c260:	4c31      	ldr	r4, [pc, #196]	; (800c328 <_free_r+0x15c>)
 800c262:	42a5      	cmp	r5, r4
 800c264:	d11f      	bne.n	800c2a6 <_free_r+0xda>
 800c266:	003e      	movs	r6, r7
 800c268:	6151      	str	r1, [r2, #20]
 800c26a:	6111      	str	r1, [r2, #16]
 800c26c:	60cd      	str	r5, [r1, #12]
 800c26e:	608d      	str	r5, [r1, #8]
 800c270:	2501      	movs	r5, #1
 800c272:	0028      	movs	r0, r5
 800c274:	4318      	orrs	r0, r3
 800c276:	6048      	str	r0, [r1, #4]
 800c278:	50cb      	str	r3, [r1, r3]
 800c27a:	2e00      	cmp	r6, #0
 800c27c:	d1d5      	bne.n	800c22a <_free_r+0x5e>
 800c27e:	2080      	movs	r0, #128	; 0x80
 800c280:	0080      	lsls	r0, r0, #2
 800c282:	4283      	cmp	r3, r0
 800c284:	d213      	bcs.n	800c2ae <_free_r+0xe2>
 800c286:	08d8      	lsrs	r0, r3, #3
 800c288:	095b      	lsrs	r3, r3, #5
 800c28a:	409d      	lsls	r5, r3
 800c28c:	6853      	ldr	r3, [r2, #4]
 800c28e:	431d      	orrs	r5, r3
 800c290:	00c3      	lsls	r3, r0, #3
 800c292:	189b      	adds	r3, r3, r2
 800c294:	6055      	str	r5, [r2, #4]
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	60cb      	str	r3, [r1, #12]
 800c29a:	608a      	str	r2, [r1, #8]
 800c29c:	6099      	str	r1, [r3, #8]
 800c29e:	60d1      	str	r1, [r2, #12]
 800c2a0:	e7c3      	b.n	800c22a <_free_r+0x5e>
 800c2a2:	4666      	mov	r6, ip
 800c2a4:	e7d3      	b.n	800c24e <_free_r+0x82>
 800c2a6:	68c0      	ldr	r0, [r0, #12]
 800c2a8:	60e8      	str	r0, [r5, #12]
 800c2aa:	6085      	str	r5, [r0, #8]
 800c2ac:	e7e0      	b.n	800c270 <_free_r+0xa4>
 800c2ae:	0a5d      	lsrs	r5, r3, #9
 800c2b0:	2d04      	cmp	r5, #4
 800c2b2:	d812      	bhi.n	800c2da <_free_r+0x10e>
 800c2b4:	0998      	lsrs	r0, r3, #6
 800c2b6:	3038      	adds	r0, #56	; 0x38
 800c2b8:	00c6      	lsls	r6, r0, #3
 800c2ba:	18b6      	adds	r6, r6, r2
 800c2bc:	68b5      	ldr	r5, [r6, #8]
 800c2be:	2703      	movs	r7, #3
 800c2c0:	42ae      	cmp	r6, r5
 800c2c2:	d125      	bne.n	800c310 <_free_r+0x144>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	1080      	asrs	r0, r0, #2
 800c2c8:	4083      	lsls	r3, r0
 800c2ca:	6850      	ldr	r0, [r2, #4]
 800c2cc:	4303      	orrs	r3, r0
 800c2ce:	6053      	str	r3, [r2, #4]
 800c2d0:	60ce      	str	r6, [r1, #12]
 800c2d2:	608d      	str	r5, [r1, #8]
 800c2d4:	60b1      	str	r1, [r6, #8]
 800c2d6:	60e9      	str	r1, [r5, #12]
 800c2d8:	e7a7      	b.n	800c22a <_free_r+0x5e>
 800c2da:	2d14      	cmp	r5, #20
 800c2dc:	d802      	bhi.n	800c2e4 <_free_r+0x118>
 800c2de:	0028      	movs	r0, r5
 800c2e0:	305b      	adds	r0, #91	; 0x5b
 800c2e2:	e7e9      	b.n	800c2b8 <_free_r+0xec>
 800c2e4:	2d54      	cmp	r5, #84	; 0x54
 800c2e6:	d802      	bhi.n	800c2ee <_free_r+0x122>
 800c2e8:	0b18      	lsrs	r0, r3, #12
 800c2ea:	306e      	adds	r0, #110	; 0x6e
 800c2ec:	e7e4      	b.n	800c2b8 <_free_r+0xec>
 800c2ee:	20aa      	movs	r0, #170	; 0xaa
 800c2f0:	0040      	lsls	r0, r0, #1
 800c2f2:	4285      	cmp	r5, r0
 800c2f4:	d802      	bhi.n	800c2fc <_free_r+0x130>
 800c2f6:	0bd8      	lsrs	r0, r3, #15
 800c2f8:	3077      	adds	r0, #119	; 0x77
 800c2fa:	e7dd      	b.n	800c2b8 <_free_r+0xec>
 800c2fc:	4e0b      	ldr	r6, [pc, #44]	; (800c32c <_free_r+0x160>)
 800c2fe:	207e      	movs	r0, #126	; 0x7e
 800c300:	42b5      	cmp	r5, r6
 800c302:	d8d9      	bhi.n	800c2b8 <_free_r+0xec>
 800c304:	0c98      	lsrs	r0, r3, #18
 800c306:	307c      	adds	r0, #124	; 0x7c
 800c308:	e7d6      	b.n	800c2b8 <_free_r+0xec>
 800c30a:	68ad      	ldr	r5, [r5, #8]
 800c30c:	42ae      	cmp	r6, r5
 800c30e:	d003      	beq.n	800c318 <_free_r+0x14c>
 800c310:	686a      	ldr	r2, [r5, #4]
 800c312:	43ba      	bics	r2, r7
 800c314:	429a      	cmp	r2, r3
 800c316:	d8f8      	bhi.n	800c30a <_free_r+0x13e>
 800c318:	68ee      	ldr	r6, [r5, #12]
 800c31a:	e7d9      	b.n	800c2d0 <_free_r+0x104>
 800c31c:	20000028 	.word	0x20000028
 800c320:	20000434 	.word	0x20000434
 800c324:	20000c60 	.word	0x20000c60
 800c328:	20000030 	.word	0x20000030
 800c32c:	00000554 	.word	0x00000554

0800c330 <rshift>:
 800c330:	0002      	movs	r2, r0
 800c332:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c334:	6904      	ldr	r4, [r0, #16]
 800c336:	114b      	asrs	r3, r1, #5
 800c338:	b085      	sub	sp, #20
 800c33a:	3214      	adds	r2, #20
 800c33c:	9302      	str	r3, [sp, #8]
 800c33e:	114d      	asrs	r5, r1, #5
 800c340:	0013      	movs	r3, r2
 800c342:	42ac      	cmp	r4, r5
 800c344:	dd32      	ble.n	800c3ac <rshift+0x7c>
 800c346:	261f      	movs	r6, #31
 800c348:	000f      	movs	r7, r1
 800c34a:	114b      	asrs	r3, r1, #5
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	00a5      	lsls	r5, r4, #2
 800c350:	18d3      	adds	r3, r2, r3
 800c352:	4037      	ands	r7, r6
 800c354:	1955      	adds	r5, r2, r5
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	9701      	str	r7, [sp, #4]
 800c35a:	4231      	tst	r1, r6
 800c35c:	d10d      	bne.n	800c37a <rshift+0x4a>
 800c35e:	0016      	movs	r6, r2
 800c360:	0019      	movs	r1, r3
 800c362:	428d      	cmp	r5, r1
 800c364:	d836      	bhi.n	800c3d4 <rshift+0xa4>
 800c366:	9900      	ldr	r1, [sp, #0]
 800c368:	2300      	movs	r3, #0
 800c36a:	3903      	subs	r1, #3
 800c36c:	428d      	cmp	r5, r1
 800c36e:	d302      	bcc.n	800c376 <rshift+0x46>
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	1ae4      	subs	r4, r4, r3
 800c374:	00a3      	lsls	r3, r4, #2
 800c376:	18d3      	adds	r3, r2, r3
 800c378:	e018      	b.n	800c3ac <rshift+0x7c>
 800c37a:	2120      	movs	r1, #32
 800c37c:	9e01      	ldr	r6, [sp, #4]
 800c37e:	9f01      	ldr	r7, [sp, #4]
 800c380:	1b89      	subs	r1, r1, r6
 800c382:	9e00      	ldr	r6, [sp, #0]
 800c384:	9103      	str	r1, [sp, #12]
 800c386:	ce02      	ldmia	r6!, {r1}
 800c388:	4694      	mov	ip, r2
 800c38a:	40f9      	lsrs	r1, r7
 800c38c:	42b5      	cmp	r5, r6
 800c38e:	d816      	bhi.n	800c3be <rshift+0x8e>
 800c390:	9e00      	ldr	r6, [sp, #0]
 800c392:	2300      	movs	r3, #0
 800c394:	3601      	adds	r6, #1
 800c396:	42b5      	cmp	r5, r6
 800c398:	d303      	bcc.n	800c3a2 <rshift+0x72>
 800c39a:	9b02      	ldr	r3, [sp, #8]
 800c39c:	1ae3      	subs	r3, r4, r3
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	3b04      	subs	r3, #4
 800c3a2:	18d3      	adds	r3, r2, r3
 800c3a4:	6019      	str	r1, [r3, #0]
 800c3a6:	2900      	cmp	r1, #0
 800c3a8:	d000      	beq.n	800c3ac <rshift+0x7c>
 800c3aa:	3304      	adds	r3, #4
 800c3ac:	1a99      	subs	r1, r3, r2
 800c3ae:	1089      	asrs	r1, r1, #2
 800c3b0:	6101      	str	r1, [r0, #16]
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d101      	bne.n	800c3ba <rshift+0x8a>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	6143      	str	r3, [r0, #20]
 800c3ba:	b005      	add	sp, #20
 800c3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3be:	6837      	ldr	r7, [r6, #0]
 800c3c0:	9b03      	ldr	r3, [sp, #12]
 800c3c2:	409f      	lsls	r7, r3
 800c3c4:	430f      	orrs	r7, r1
 800c3c6:	4661      	mov	r1, ip
 800c3c8:	c180      	stmia	r1!, {r7}
 800c3ca:	468c      	mov	ip, r1
 800c3cc:	9b01      	ldr	r3, [sp, #4]
 800c3ce:	ce02      	ldmia	r6!, {r1}
 800c3d0:	40d9      	lsrs	r1, r3
 800c3d2:	e7db      	b.n	800c38c <rshift+0x5c>
 800c3d4:	c980      	ldmia	r1!, {r7}
 800c3d6:	c680      	stmia	r6!, {r7}
 800c3d8:	e7c3      	b.n	800c362 <rshift+0x32>

0800c3da <__hexdig_fun>:
 800c3da:	0002      	movs	r2, r0
 800c3dc:	3a30      	subs	r2, #48	; 0x30
 800c3de:	0003      	movs	r3, r0
 800c3e0:	2a09      	cmp	r2, #9
 800c3e2:	d802      	bhi.n	800c3ea <__hexdig_fun+0x10>
 800c3e4:	3b20      	subs	r3, #32
 800c3e6:	b2d8      	uxtb	r0, r3
 800c3e8:	4770      	bx	lr
 800c3ea:	0002      	movs	r2, r0
 800c3ec:	3a61      	subs	r2, #97	; 0x61
 800c3ee:	2a05      	cmp	r2, #5
 800c3f0:	d801      	bhi.n	800c3f6 <__hexdig_fun+0x1c>
 800c3f2:	3b47      	subs	r3, #71	; 0x47
 800c3f4:	e7f7      	b.n	800c3e6 <__hexdig_fun+0xc>
 800c3f6:	001a      	movs	r2, r3
 800c3f8:	3a41      	subs	r2, #65	; 0x41
 800c3fa:	2000      	movs	r0, #0
 800c3fc:	2a05      	cmp	r2, #5
 800c3fe:	d8f3      	bhi.n	800c3e8 <__hexdig_fun+0xe>
 800c400:	3b27      	subs	r3, #39	; 0x27
 800c402:	e7f0      	b.n	800c3e6 <__hexdig_fun+0xc>

0800c404 <__gethex>:
 800c404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c406:	b089      	sub	sp, #36	; 0x24
 800c408:	9307      	str	r3, [sp, #28]
 800c40a:	2302      	movs	r3, #2
 800c40c:	9201      	str	r2, [sp, #4]
 800c40e:	680a      	ldr	r2, [r1, #0]
 800c410:	425b      	negs	r3, r3
 800c412:	9003      	str	r0, [sp, #12]
 800c414:	9106      	str	r1, [sp, #24]
 800c416:	1c96      	adds	r6, r2, #2
 800c418:	1a9b      	subs	r3, r3, r2
 800c41a:	199a      	adds	r2, r3, r6
 800c41c:	9600      	str	r6, [sp, #0]
 800c41e:	9205      	str	r2, [sp, #20]
 800c420:	9a00      	ldr	r2, [sp, #0]
 800c422:	3601      	adds	r6, #1
 800c424:	7810      	ldrb	r0, [r2, #0]
 800c426:	2830      	cmp	r0, #48	; 0x30
 800c428:	d0f7      	beq.n	800c41a <__gethex+0x16>
 800c42a:	f7ff ffd6 	bl	800c3da <__hexdig_fun>
 800c42e:	2300      	movs	r3, #0
 800c430:	001d      	movs	r5, r3
 800c432:	9302      	str	r3, [sp, #8]
 800c434:	4298      	cmp	r0, r3
 800c436:	d11d      	bne.n	800c474 <__gethex+0x70>
 800c438:	2201      	movs	r2, #1
 800c43a:	49a6      	ldr	r1, [pc, #664]	; (800c6d4 <__gethex+0x2d0>)
 800c43c:	9800      	ldr	r0, [sp, #0]
 800c43e:	f7ff fd6d 	bl	800bf1c <strncmp>
 800c442:	0007      	movs	r7, r0
 800c444:	42a8      	cmp	r0, r5
 800c446:	d169      	bne.n	800c51c <__gethex+0x118>
 800c448:	9b00      	ldr	r3, [sp, #0]
 800c44a:	0034      	movs	r4, r6
 800c44c:	7858      	ldrb	r0, [r3, #1]
 800c44e:	f7ff ffc4 	bl	800c3da <__hexdig_fun>
 800c452:	2301      	movs	r3, #1
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	42a8      	cmp	r0, r5
 800c458:	d02f      	beq.n	800c4ba <__gethex+0xb6>
 800c45a:	9600      	str	r6, [sp, #0]
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	7818      	ldrb	r0, [r3, #0]
 800c460:	2830      	cmp	r0, #48	; 0x30
 800c462:	d009      	beq.n	800c478 <__gethex+0x74>
 800c464:	f7ff ffb9 	bl	800c3da <__hexdig_fun>
 800c468:	4242      	negs	r2, r0
 800c46a:	4142      	adcs	r2, r0
 800c46c:	2301      	movs	r3, #1
 800c46e:	0035      	movs	r5, r6
 800c470:	9202      	str	r2, [sp, #8]
 800c472:	9305      	str	r3, [sp, #20]
 800c474:	9c00      	ldr	r4, [sp, #0]
 800c476:	e004      	b.n	800c482 <__gethex+0x7e>
 800c478:	9b00      	ldr	r3, [sp, #0]
 800c47a:	3301      	adds	r3, #1
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	e7ed      	b.n	800c45c <__gethex+0x58>
 800c480:	3401      	adds	r4, #1
 800c482:	7820      	ldrb	r0, [r4, #0]
 800c484:	f7ff ffa9 	bl	800c3da <__hexdig_fun>
 800c488:	1e07      	subs	r7, r0, #0
 800c48a:	d1f9      	bne.n	800c480 <__gethex+0x7c>
 800c48c:	2201      	movs	r2, #1
 800c48e:	0020      	movs	r0, r4
 800c490:	4990      	ldr	r1, [pc, #576]	; (800c6d4 <__gethex+0x2d0>)
 800c492:	f7ff fd43 	bl	800bf1c <strncmp>
 800c496:	2800      	cmp	r0, #0
 800c498:	d10d      	bne.n	800c4b6 <__gethex+0xb2>
 800c49a:	2d00      	cmp	r5, #0
 800c49c:	d106      	bne.n	800c4ac <__gethex+0xa8>
 800c49e:	3401      	adds	r4, #1
 800c4a0:	0025      	movs	r5, r4
 800c4a2:	7820      	ldrb	r0, [r4, #0]
 800c4a4:	f7ff ff99 	bl	800c3da <__hexdig_fun>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d102      	bne.n	800c4b2 <__gethex+0xae>
 800c4ac:	1b2d      	subs	r5, r5, r4
 800c4ae:	00af      	lsls	r7, r5, #2
 800c4b0:	e003      	b.n	800c4ba <__gethex+0xb6>
 800c4b2:	3401      	adds	r4, #1
 800c4b4:	e7f5      	b.n	800c4a2 <__gethex+0x9e>
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	d1f8      	bne.n	800c4ac <__gethex+0xa8>
 800c4ba:	2220      	movs	r2, #32
 800c4bc:	7823      	ldrb	r3, [r4, #0]
 800c4be:	0026      	movs	r6, r4
 800c4c0:	4393      	bics	r3, r2
 800c4c2:	2b50      	cmp	r3, #80	; 0x50
 800c4c4:	d11d      	bne.n	800c502 <__gethex+0xfe>
 800c4c6:	7863      	ldrb	r3, [r4, #1]
 800c4c8:	2b2b      	cmp	r3, #43	; 0x2b
 800c4ca:	d02c      	beq.n	800c526 <__gethex+0x122>
 800c4cc:	2b2d      	cmp	r3, #45	; 0x2d
 800c4ce:	d02e      	beq.n	800c52e <__gethex+0x12a>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	1c66      	adds	r6, r4, #1
 800c4d4:	9304      	str	r3, [sp, #16]
 800c4d6:	7830      	ldrb	r0, [r6, #0]
 800c4d8:	f7ff ff7f 	bl	800c3da <__hexdig_fun>
 800c4dc:	1e43      	subs	r3, r0, #1
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b18      	cmp	r3, #24
 800c4e2:	d82b      	bhi.n	800c53c <__gethex+0x138>
 800c4e4:	3810      	subs	r0, #16
 800c4e6:	0005      	movs	r5, r0
 800c4e8:	7870      	ldrb	r0, [r6, #1]
 800c4ea:	f7ff ff76 	bl	800c3da <__hexdig_fun>
 800c4ee:	1e43      	subs	r3, r0, #1
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	3601      	adds	r6, #1
 800c4f4:	2b18      	cmp	r3, #24
 800c4f6:	d91c      	bls.n	800c532 <__gethex+0x12e>
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d000      	beq.n	800c500 <__gethex+0xfc>
 800c4fe:	426d      	negs	r5, r5
 800c500:	197f      	adds	r7, r7, r5
 800c502:	9b06      	ldr	r3, [sp, #24]
 800c504:	601e      	str	r6, [r3, #0]
 800c506:	9b02      	ldr	r3, [sp, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d019      	beq.n	800c540 <__gethex+0x13c>
 800c50c:	2600      	movs	r6, #0
 800c50e:	9b05      	ldr	r3, [sp, #20]
 800c510:	42b3      	cmp	r3, r6
 800c512:	d100      	bne.n	800c516 <__gethex+0x112>
 800c514:	3606      	adds	r6, #6
 800c516:	0030      	movs	r0, r6
 800c518:	b009      	add	sp, #36	; 0x24
 800c51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c51c:	2301      	movs	r3, #1
 800c51e:	2700      	movs	r7, #0
 800c520:	9c00      	ldr	r4, [sp, #0]
 800c522:	9302      	str	r3, [sp, #8]
 800c524:	e7c9      	b.n	800c4ba <__gethex+0xb6>
 800c526:	2300      	movs	r3, #0
 800c528:	9304      	str	r3, [sp, #16]
 800c52a:	1ca6      	adds	r6, r4, #2
 800c52c:	e7d3      	b.n	800c4d6 <__gethex+0xd2>
 800c52e:	2301      	movs	r3, #1
 800c530:	e7fa      	b.n	800c528 <__gethex+0x124>
 800c532:	230a      	movs	r3, #10
 800c534:	435d      	muls	r5, r3
 800c536:	182d      	adds	r5, r5, r0
 800c538:	3d10      	subs	r5, #16
 800c53a:	e7d5      	b.n	800c4e8 <__gethex+0xe4>
 800c53c:	0026      	movs	r6, r4
 800c53e:	e7e0      	b.n	800c502 <__gethex+0xfe>
 800c540:	9b00      	ldr	r3, [sp, #0]
 800c542:	9902      	ldr	r1, [sp, #8]
 800c544:	1ae3      	subs	r3, r4, r3
 800c546:	3b01      	subs	r3, #1
 800c548:	2b07      	cmp	r3, #7
 800c54a:	dc0a      	bgt.n	800c562 <__gethex+0x15e>
 800c54c:	9803      	ldr	r0, [sp, #12]
 800c54e:	f000 fa5d 	bl	800ca0c <_Balloc>
 800c552:	1e05      	subs	r5, r0, #0
 800c554:	d108      	bne.n	800c568 <__gethex+0x164>
 800c556:	002a      	movs	r2, r5
 800c558:	21e4      	movs	r1, #228	; 0xe4
 800c55a:	4b5f      	ldr	r3, [pc, #380]	; (800c6d8 <__gethex+0x2d4>)
 800c55c:	485f      	ldr	r0, [pc, #380]	; (800c6dc <__gethex+0x2d8>)
 800c55e:	f003 fd19 	bl	800ff94 <__assert_func>
 800c562:	3101      	adds	r1, #1
 800c564:	105b      	asrs	r3, r3, #1
 800c566:	e7ef      	b.n	800c548 <__gethex+0x144>
 800c568:	0003      	movs	r3, r0
 800c56a:	3314      	adds	r3, #20
 800c56c:	9302      	str	r3, [sp, #8]
 800c56e:	9305      	str	r3, [sp, #20]
 800c570:	2300      	movs	r3, #0
 800c572:	001e      	movs	r6, r3
 800c574:	9304      	str	r3, [sp, #16]
 800c576:	9b00      	ldr	r3, [sp, #0]
 800c578:	42a3      	cmp	r3, r4
 800c57a:	d33f      	bcc.n	800c5fc <__gethex+0x1f8>
 800c57c:	9c05      	ldr	r4, [sp, #20]
 800c57e:	9b02      	ldr	r3, [sp, #8]
 800c580:	c440      	stmia	r4!, {r6}
 800c582:	1ae4      	subs	r4, r4, r3
 800c584:	10a4      	asrs	r4, r4, #2
 800c586:	0030      	movs	r0, r6
 800c588:	612c      	str	r4, [r5, #16]
 800c58a:	f000 fb01 	bl	800cb90 <__hi0bits>
 800c58e:	9b01      	ldr	r3, [sp, #4]
 800c590:	0164      	lsls	r4, r4, #5
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	1a26      	subs	r6, r4, r0
 800c596:	9300      	str	r3, [sp, #0]
 800c598:	429e      	cmp	r6, r3
 800c59a:	dd51      	ble.n	800c640 <__gethex+0x23c>
 800c59c:	1af6      	subs	r6, r6, r3
 800c59e:	0031      	movs	r1, r6
 800c5a0:	0028      	movs	r0, r5
 800c5a2:	f000 fe7b 	bl	800d29c <__any_on>
 800c5a6:	1e04      	subs	r4, r0, #0
 800c5a8:	d016      	beq.n	800c5d8 <__gethex+0x1d4>
 800c5aa:	2401      	movs	r4, #1
 800c5ac:	231f      	movs	r3, #31
 800c5ae:	0020      	movs	r0, r4
 800c5b0:	1e72      	subs	r2, r6, #1
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	4098      	lsls	r0, r3
 800c5b6:	0003      	movs	r3, r0
 800c5b8:	1151      	asrs	r1, r2, #5
 800c5ba:	9802      	ldr	r0, [sp, #8]
 800c5bc:	0089      	lsls	r1, r1, #2
 800c5be:	5809      	ldr	r1, [r1, r0]
 800c5c0:	4219      	tst	r1, r3
 800c5c2:	d009      	beq.n	800c5d8 <__gethex+0x1d4>
 800c5c4:	42a2      	cmp	r2, r4
 800c5c6:	dd06      	ble.n	800c5d6 <__gethex+0x1d2>
 800c5c8:	0028      	movs	r0, r5
 800c5ca:	1eb1      	subs	r1, r6, #2
 800c5cc:	f000 fe66 	bl	800d29c <__any_on>
 800c5d0:	3402      	adds	r4, #2
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d100      	bne.n	800c5d8 <__gethex+0x1d4>
 800c5d6:	2402      	movs	r4, #2
 800c5d8:	0031      	movs	r1, r6
 800c5da:	0028      	movs	r0, r5
 800c5dc:	f7ff fea8 	bl	800c330 <rshift>
 800c5e0:	19bf      	adds	r7, r7, r6
 800c5e2:	9b01      	ldr	r3, [sp, #4]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	42bb      	cmp	r3, r7
 800c5e8:	da3a      	bge.n	800c660 <__gethex+0x25c>
 800c5ea:	0029      	movs	r1, r5
 800c5ec:	9803      	ldr	r0, [sp, #12]
 800c5ee:	f000 fa35 	bl	800ca5c <_Bfree>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c5f6:	26a3      	movs	r6, #163	; 0xa3
 800c5f8:	6013      	str	r3, [r2, #0]
 800c5fa:	e78c      	b.n	800c516 <__gethex+0x112>
 800c5fc:	3c01      	subs	r4, #1
 800c5fe:	7823      	ldrb	r3, [r4, #0]
 800c600:	2b2e      	cmp	r3, #46	; 0x2e
 800c602:	d012      	beq.n	800c62a <__gethex+0x226>
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	2b20      	cmp	r3, #32
 800c608:	d104      	bne.n	800c614 <__gethex+0x210>
 800c60a:	9b05      	ldr	r3, [sp, #20]
 800c60c:	c340      	stmia	r3!, {r6}
 800c60e:	2600      	movs	r6, #0
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	9604      	str	r6, [sp, #16]
 800c614:	7820      	ldrb	r0, [r4, #0]
 800c616:	f7ff fee0 	bl	800c3da <__hexdig_fun>
 800c61a:	230f      	movs	r3, #15
 800c61c:	4018      	ands	r0, r3
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	4098      	lsls	r0, r3
 800c622:	3304      	adds	r3, #4
 800c624:	4306      	orrs	r6, r0
 800c626:	9304      	str	r3, [sp, #16]
 800c628:	e7a5      	b.n	800c576 <__gethex+0x172>
 800c62a:	9b00      	ldr	r3, [sp, #0]
 800c62c:	42a3      	cmp	r3, r4
 800c62e:	d8e9      	bhi.n	800c604 <__gethex+0x200>
 800c630:	2201      	movs	r2, #1
 800c632:	0020      	movs	r0, r4
 800c634:	4927      	ldr	r1, [pc, #156]	; (800c6d4 <__gethex+0x2d0>)
 800c636:	f7ff fc71 	bl	800bf1c <strncmp>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	d1e2      	bne.n	800c604 <__gethex+0x200>
 800c63e:	e79a      	b.n	800c576 <__gethex+0x172>
 800c640:	9b00      	ldr	r3, [sp, #0]
 800c642:	2400      	movs	r4, #0
 800c644:	429e      	cmp	r6, r3
 800c646:	dacc      	bge.n	800c5e2 <__gethex+0x1de>
 800c648:	1b9e      	subs	r6, r3, r6
 800c64a:	0029      	movs	r1, r5
 800c64c:	0032      	movs	r2, r6
 800c64e:	9803      	ldr	r0, [sp, #12]
 800c650:	f000 fbf0 	bl	800ce34 <__lshift>
 800c654:	0003      	movs	r3, r0
 800c656:	3314      	adds	r3, #20
 800c658:	0005      	movs	r5, r0
 800c65a:	1bbf      	subs	r7, r7, r6
 800c65c:	9302      	str	r3, [sp, #8]
 800c65e:	e7c0      	b.n	800c5e2 <__gethex+0x1de>
 800c660:	9b01      	ldr	r3, [sp, #4]
 800c662:	685e      	ldr	r6, [r3, #4]
 800c664:	42be      	cmp	r6, r7
 800c666:	dd70      	ble.n	800c74a <__gethex+0x346>
 800c668:	9b00      	ldr	r3, [sp, #0]
 800c66a:	1bf6      	subs	r6, r6, r7
 800c66c:	42b3      	cmp	r3, r6
 800c66e:	dc37      	bgt.n	800c6e0 <__gethex+0x2dc>
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	2b02      	cmp	r3, #2
 800c676:	d024      	beq.n	800c6c2 <__gethex+0x2be>
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d026      	beq.n	800c6ca <__gethex+0x2c6>
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d117      	bne.n	800c6b0 <__gethex+0x2ac>
 800c680:	9b00      	ldr	r3, [sp, #0]
 800c682:	42b3      	cmp	r3, r6
 800c684:	d114      	bne.n	800c6b0 <__gethex+0x2ac>
 800c686:	2b01      	cmp	r3, #1
 800c688:	d10b      	bne.n	800c6a2 <__gethex+0x29e>
 800c68a:	9b01      	ldr	r3, [sp, #4]
 800c68c:	9a07      	ldr	r2, [sp, #28]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	2662      	movs	r6, #98	; 0x62
 800c692:	6013      	str	r3, [r2, #0]
 800c694:	2301      	movs	r3, #1
 800c696:	9a02      	ldr	r2, [sp, #8]
 800c698:	612b      	str	r3, [r5, #16]
 800c69a:	6013      	str	r3, [r2, #0]
 800c69c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c69e:	601d      	str	r5, [r3, #0]
 800c6a0:	e739      	b.n	800c516 <__gethex+0x112>
 800c6a2:	9900      	ldr	r1, [sp, #0]
 800c6a4:	0028      	movs	r0, r5
 800c6a6:	3901      	subs	r1, #1
 800c6a8:	f000 fdf8 	bl	800d29c <__any_on>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d1ec      	bne.n	800c68a <__gethex+0x286>
 800c6b0:	0029      	movs	r1, r5
 800c6b2:	9803      	ldr	r0, [sp, #12]
 800c6b4:	f000 f9d2 	bl	800ca5c <_Bfree>
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6bc:	2650      	movs	r6, #80	; 0x50
 800c6be:	6013      	str	r3, [r2, #0]
 800c6c0:	e729      	b.n	800c516 <__gethex+0x112>
 800c6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f3      	bne.n	800c6b0 <__gethex+0x2ac>
 800c6c8:	e7df      	b.n	800c68a <__gethex+0x286>
 800c6ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d1dc      	bne.n	800c68a <__gethex+0x286>
 800c6d0:	e7ee      	b.n	800c6b0 <__gethex+0x2ac>
 800c6d2:	46c0      	nop			; (mov r8, r8)
 800c6d4:	08014574 	.word	0x08014574
 800c6d8:	080146d1 	.word	0x080146d1
 800c6dc:	080146e2 	.word	0x080146e2
 800c6e0:	1e77      	subs	r7, r6, #1
 800c6e2:	2c00      	cmp	r4, #0
 800c6e4:	d12f      	bne.n	800c746 <__gethex+0x342>
 800c6e6:	2f00      	cmp	r7, #0
 800c6e8:	d004      	beq.n	800c6f4 <__gethex+0x2f0>
 800c6ea:	0039      	movs	r1, r7
 800c6ec:	0028      	movs	r0, r5
 800c6ee:	f000 fdd5 	bl	800d29c <__any_on>
 800c6f2:	0004      	movs	r4, r0
 800c6f4:	231f      	movs	r3, #31
 800c6f6:	117a      	asrs	r2, r7, #5
 800c6f8:	401f      	ands	r7, r3
 800c6fa:	3b1e      	subs	r3, #30
 800c6fc:	40bb      	lsls	r3, r7
 800c6fe:	9902      	ldr	r1, [sp, #8]
 800c700:	0092      	lsls	r2, r2, #2
 800c702:	5852      	ldr	r2, [r2, r1]
 800c704:	421a      	tst	r2, r3
 800c706:	d001      	beq.n	800c70c <__gethex+0x308>
 800c708:	2302      	movs	r3, #2
 800c70a:	431c      	orrs	r4, r3
 800c70c:	9b00      	ldr	r3, [sp, #0]
 800c70e:	0031      	movs	r1, r6
 800c710:	1b9b      	subs	r3, r3, r6
 800c712:	2602      	movs	r6, #2
 800c714:	0028      	movs	r0, r5
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	f7ff fe0a 	bl	800c330 <rshift>
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	685f      	ldr	r7, [r3, #4]
 800c720:	2c00      	cmp	r4, #0
 800c722:	d041      	beq.n	800c7a8 <__gethex+0x3a4>
 800c724:	9b01      	ldr	r3, [sp, #4]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d010      	beq.n	800c74e <__gethex+0x34a>
 800c72c:	2b03      	cmp	r3, #3
 800c72e:	d012      	beq.n	800c756 <__gethex+0x352>
 800c730:	2b01      	cmp	r3, #1
 800c732:	d106      	bne.n	800c742 <__gethex+0x33e>
 800c734:	07a2      	lsls	r2, r4, #30
 800c736:	d504      	bpl.n	800c742 <__gethex+0x33e>
 800c738:	9a02      	ldr	r2, [sp, #8]
 800c73a:	6812      	ldr	r2, [r2, #0]
 800c73c:	4314      	orrs	r4, r2
 800c73e:	421c      	tst	r4, r3
 800c740:	d10c      	bne.n	800c75c <__gethex+0x358>
 800c742:	2310      	movs	r3, #16
 800c744:	e02f      	b.n	800c7a6 <__gethex+0x3a2>
 800c746:	2401      	movs	r4, #1
 800c748:	e7d4      	b.n	800c6f4 <__gethex+0x2f0>
 800c74a:	2601      	movs	r6, #1
 800c74c:	e7e8      	b.n	800c720 <__gethex+0x31c>
 800c74e:	2301      	movs	r3, #1
 800c750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c752:	1a9b      	subs	r3, r3, r2
 800c754:	930f      	str	r3, [sp, #60]	; 0x3c
 800c756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0f2      	beq.n	800c742 <__gethex+0x33e>
 800c75c:	692b      	ldr	r3, [r5, #16]
 800c75e:	2000      	movs	r0, #0
 800c760:	9302      	str	r3, [sp, #8]
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	002b      	movs	r3, r5
 800c768:	9a04      	ldr	r2, [sp, #16]
 800c76a:	3314      	adds	r3, #20
 800c76c:	1899      	adds	r1, r3, r2
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	1c54      	adds	r4, r2, #1
 800c772:	d01e      	beq.n	800c7b2 <__gethex+0x3ae>
 800c774:	3201      	adds	r2, #1
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	002b      	movs	r3, r5
 800c77a:	3314      	adds	r3, #20
 800c77c:	2e02      	cmp	r6, #2
 800c77e:	d141      	bne.n	800c804 <__gethex+0x400>
 800c780:	9a01      	ldr	r2, [sp, #4]
 800c782:	9900      	ldr	r1, [sp, #0]
 800c784:	6812      	ldr	r2, [r2, #0]
 800c786:	3a01      	subs	r2, #1
 800c788:	428a      	cmp	r2, r1
 800c78a:	d10b      	bne.n	800c7a4 <__gethex+0x3a0>
 800c78c:	221f      	movs	r2, #31
 800c78e:	9800      	ldr	r0, [sp, #0]
 800c790:	1149      	asrs	r1, r1, #5
 800c792:	4002      	ands	r2, r0
 800c794:	2001      	movs	r0, #1
 800c796:	0004      	movs	r4, r0
 800c798:	4094      	lsls	r4, r2
 800c79a:	0089      	lsls	r1, r1, #2
 800c79c:	58cb      	ldr	r3, [r1, r3]
 800c79e:	4223      	tst	r3, r4
 800c7a0:	d000      	beq.n	800c7a4 <__gethex+0x3a0>
 800c7a2:	2601      	movs	r6, #1
 800c7a4:	2320      	movs	r3, #32
 800c7a6:	431e      	orrs	r6, r3
 800c7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7aa:	601d      	str	r5, [r3, #0]
 800c7ac:	9b07      	ldr	r3, [sp, #28]
 800c7ae:	601f      	str	r7, [r3, #0]
 800c7b0:	e6b1      	b.n	800c516 <__gethex+0x112>
 800c7b2:	c301      	stmia	r3!, {r0}
 800c7b4:	4299      	cmp	r1, r3
 800c7b6:	d8da      	bhi.n	800c76e <__gethex+0x36a>
 800c7b8:	68ab      	ldr	r3, [r5, #8]
 800c7ba:	9a02      	ldr	r2, [sp, #8]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	db18      	blt.n	800c7f2 <__gethex+0x3ee>
 800c7c0:	6869      	ldr	r1, [r5, #4]
 800c7c2:	9803      	ldr	r0, [sp, #12]
 800c7c4:	3101      	adds	r1, #1
 800c7c6:	f000 f921 	bl	800ca0c <_Balloc>
 800c7ca:	1e04      	subs	r4, r0, #0
 800c7cc:	d104      	bne.n	800c7d8 <__gethex+0x3d4>
 800c7ce:	0022      	movs	r2, r4
 800c7d0:	2184      	movs	r1, #132	; 0x84
 800c7d2:	4b1c      	ldr	r3, [pc, #112]	; (800c844 <__gethex+0x440>)
 800c7d4:	481c      	ldr	r0, [pc, #112]	; (800c848 <__gethex+0x444>)
 800c7d6:	e6c2      	b.n	800c55e <__gethex+0x15a>
 800c7d8:	0029      	movs	r1, r5
 800c7da:	692a      	ldr	r2, [r5, #16]
 800c7dc:	310c      	adds	r1, #12
 800c7de:	3202      	adds	r2, #2
 800c7e0:	0092      	lsls	r2, r2, #2
 800c7e2:	300c      	adds	r0, #12
 800c7e4:	f7ff fc77 	bl	800c0d6 <memcpy>
 800c7e8:	0029      	movs	r1, r5
 800c7ea:	9803      	ldr	r0, [sp, #12]
 800c7ec:	f000 f936 	bl	800ca5c <_Bfree>
 800c7f0:	0025      	movs	r5, r4
 800c7f2:	692b      	ldr	r3, [r5, #16]
 800c7f4:	1c5a      	adds	r2, r3, #1
 800c7f6:	612a      	str	r2, [r5, #16]
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	18eb      	adds	r3, r5, r3
 800c800:	605a      	str	r2, [r3, #4]
 800c802:	e7b9      	b.n	800c778 <__gethex+0x374>
 800c804:	692a      	ldr	r2, [r5, #16]
 800c806:	9902      	ldr	r1, [sp, #8]
 800c808:	428a      	cmp	r2, r1
 800c80a:	dd09      	ble.n	800c820 <__gethex+0x41c>
 800c80c:	2101      	movs	r1, #1
 800c80e:	0028      	movs	r0, r5
 800c810:	f7ff fd8e 	bl	800c330 <rshift>
 800c814:	9b01      	ldr	r3, [sp, #4]
 800c816:	3701      	adds	r7, #1
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	42bb      	cmp	r3, r7
 800c81c:	dac1      	bge.n	800c7a2 <__gethex+0x39e>
 800c81e:	e6e4      	b.n	800c5ea <__gethex+0x1e6>
 800c820:	221f      	movs	r2, #31
 800c822:	9c00      	ldr	r4, [sp, #0]
 800c824:	9900      	ldr	r1, [sp, #0]
 800c826:	2601      	movs	r6, #1
 800c828:	4014      	ands	r4, r2
 800c82a:	4211      	tst	r1, r2
 800c82c:	d0ba      	beq.n	800c7a4 <__gethex+0x3a0>
 800c82e:	9a04      	ldr	r2, [sp, #16]
 800c830:	189b      	adds	r3, r3, r2
 800c832:	3b04      	subs	r3, #4
 800c834:	6818      	ldr	r0, [r3, #0]
 800c836:	f000 f9ab 	bl	800cb90 <__hi0bits>
 800c83a:	2320      	movs	r3, #32
 800c83c:	1b1b      	subs	r3, r3, r4
 800c83e:	4298      	cmp	r0, r3
 800c840:	dbe4      	blt.n	800c80c <__gethex+0x408>
 800c842:	e7af      	b.n	800c7a4 <__gethex+0x3a0>
 800c844:	080146d1 	.word	0x080146d1
 800c848:	080146e2 	.word	0x080146e2

0800c84c <L_shift>:
 800c84c:	2308      	movs	r3, #8
 800c84e:	b570      	push	{r4, r5, r6, lr}
 800c850:	2520      	movs	r5, #32
 800c852:	1a9a      	subs	r2, r3, r2
 800c854:	0092      	lsls	r2, r2, #2
 800c856:	1aad      	subs	r5, r5, r2
 800c858:	6843      	ldr	r3, [r0, #4]
 800c85a:	6804      	ldr	r4, [r0, #0]
 800c85c:	001e      	movs	r6, r3
 800c85e:	40ae      	lsls	r6, r5
 800c860:	40d3      	lsrs	r3, r2
 800c862:	4334      	orrs	r4, r6
 800c864:	6004      	str	r4, [r0, #0]
 800c866:	6043      	str	r3, [r0, #4]
 800c868:	3004      	adds	r0, #4
 800c86a:	4288      	cmp	r0, r1
 800c86c:	d3f4      	bcc.n	800c858 <L_shift+0xc>
 800c86e:	bd70      	pop	{r4, r5, r6, pc}

0800c870 <__match>:
 800c870:	b530      	push	{r4, r5, lr}
 800c872:	6803      	ldr	r3, [r0, #0]
 800c874:	780c      	ldrb	r4, [r1, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	2c00      	cmp	r4, #0
 800c87a:	d102      	bne.n	800c882 <__match+0x12>
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	2001      	movs	r0, #1
 800c880:	bd30      	pop	{r4, r5, pc}
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	0015      	movs	r5, r2
 800c886:	3d41      	subs	r5, #65	; 0x41
 800c888:	2d19      	cmp	r5, #25
 800c88a:	d800      	bhi.n	800c88e <__match+0x1e>
 800c88c:	3220      	adds	r2, #32
 800c88e:	3101      	adds	r1, #1
 800c890:	42a2      	cmp	r2, r4
 800c892:	d0ef      	beq.n	800c874 <__match+0x4>
 800c894:	2000      	movs	r0, #0
 800c896:	e7f3      	b.n	800c880 <__match+0x10>

0800c898 <__hexnan>:
 800c898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c89a:	680b      	ldr	r3, [r1, #0]
 800c89c:	b08b      	sub	sp, #44	; 0x2c
 800c89e:	9201      	str	r2, [sp, #4]
 800c8a0:	9901      	ldr	r1, [sp, #4]
 800c8a2:	115a      	asrs	r2, r3, #5
 800c8a4:	0092      	lsls	r2, r2, #2
 800c8a6:	188a      	adds	r2, r1, r2
 800c8a8:	9202      	str	r2, [sp, #8]
 800c8aa:	0019      	movs	r1, r3
 800c8ac:	221f      	movs	r2, #31
 800c8ae:	4011      	ands	r1, r2
 800c8b0:	9008      	str	r0, [sp, #32]
 800c8b2:	9106      	str	r1, [sp, #24]
 800c8b4:	4213      	tst	r3, r2
 800c8b6:	d002      	beq.n	800c8be <__hexnan+0x26>
 800c8b8:	9b02      	ldr	r3, [sp, #8]
 800c8ba:	3304      	adds	r3, #4
 800c8bc:	9302      	str	r3, [sp, #8]
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	2500      	movs	r5, #0
 800c8c2:	1f1f      	subs	r7, r3, #4
 800c8c4:	003e      	movs	r6, r7
 800c8c6:	003c      	movs	r4, r7
 800c8c8:	9b08      	ldr	r3, [sp, #32]
 800c8ca:	603d      	str	r5, [r7, #0]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	9507      	str	r5, [sp, #28]
 800c8d0:	9305      	str	r3, [sp, #20]
 800c8d2:	9503      	str	r5, [sp, #12]
 800c8d4:	9b05      	ldr	r3, [sp, #20]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8da:	9b05      	ldr	r3, [sp, #20]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d028      	beq.n	800c936 <__hexnan+0x9e>
 800c8e4:	9804      	ldr	r0, [sp, #16]
 800c8e6:	f7ff fd78 	bl	800c3da <__hexdig_fun>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d154      	bne.n	800c998 <__hexnan+0x100>
 800c8ee:	9b04      	ldr	r3, [sp, #16]
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	d819      	bhi.n	800c928 <__hexnan+0x90>
 800c8f4:	9b03      	ldr	r3, [sp, #12]
 800c8f6:	9a07      	ldr	r2, [sp, #28]
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	dd12      	ble.n	800c922 <__hexnan+0x8a>
 800c8fc:	42b4      	cmp	r4, r6
 800c8fe:	d206      	bcs.n	800c90e <__hexnan+0x76>
 800c900:	2d07      	cmp	r5, #7
 800c902:	dc04      	bgt.n	800c90e <__hexnan+0x76>
 800c904:	002a      	movs	r2, r5
 800c906:	0031      	movs	r1, r6
 800c908:	0020      	movs	r0, r4
 800c90a:	f7ff ff9f 	bl	800c84c <L_shift>
 800c90e:	9b01      	ldr	r3, [sp, #4]
 800c910:	2508      	movs	r5, #8
 800c912:	429c      	cmp	r4, r3
 800c914:	d905      	bls.n	800c922 <__hexnan+0x8a>
 800c916:	1f26      	subs	r6, r4, #4
 800c918:	2500      	movs	r5, #0
 800c91a:	0034      	movs	r4, r6
 800c91c:	9b03      	ldr	r3, [sp, #12]
 800c91e:	6035      	str	r5, [r6, #0]
 800c920:	9307      	str	r3, [sp, #28]
 800c922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	e7d5      	b.n	800c8d4 <__hexnan+0x3c>
 800c928:	9b04      	ldr	r3, [sp, #16]
 800c92a:	2b29      	cmp	r3, #41	; 0x29
 800c92c:	d159      	bne.n	800c9e2 <__hexnan+0x14a>
 800c92e:	9b05      	ldr	r3, [sp, #20]
 800c930:	9a08      	ldr	r2, [sp, #32]
 800c932:	3302      	adds	r3, #2
 800c934:	6013      	str	r3, [r2, #0]
 800c936:	9b03      	ldr	r3, [sp, #12]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d052      	beq.n	800c9e2 <__hexnan+0x14a>
 800c93c:	42b4      	cmp	r4, r6
 800c93e:	d206      	bcs.n	800c94e <__hexnan+0xb6>
 800c940:	2d07      	cmp	r5, #7
 800c942:	dc04      	bgt.n	800c94e <__hexnan+0xb6>
 800c944:	002a      	movs	r2, r5
 800c946:	0031      	movs	r1, r6
 800c948:	0020      	movs	r0, r4
 800c94a:	f7ff ff7f 	bl	800c84c <L_shift>
 800c94e:	9b01      	ldr	r3, [sp, #4]
 800c950:	429c      	cmp	r4, r3
 800c952:	d935      	bls.n	800c9c0 <__hexnan+0x128>
 800c954:	001a      	movs	r2, r3
 800c956:	0023      	movs	r3, r4
 800c958:	cb02      	ldmia	r3!, {r1}
 800c95a:	c202      	stmia	r2!, {r1}
 800c95c:	429f      	cmp	r7, r3
 800c95e:	d2fb      	bcs.n	800c958 <__hexnan+0xc0>
 800c960:	9b02      	ldr	r3, [sp, #8]
 800c962:	1c62      	adds	r2, r4, #1
 800c964:	1ed9      	subs	r1, r3, #3
 800c966:	2304      	movs	r3, #4
 800c968:	4291      	cmp	r1, r2
 800c96a:	d305      	bcc.n	800c978 <__hexnan+0xe0>
 800c96c:	9b02      	ldr	r3, [sp, #8]
 800c96e:	3b04      	subs	r3, #4
 800c970:	1b1b      	subs	r3, r3, r4
 800c972:	089b      	lsrs	r3, r3, #2
 800c974:	3301      	adds	r3, #1
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	9a01      	ldr	r2, [sp, #4]
 800c97a:	18d3      	adds	r3, r2, r3
 800c97c:	2200      	movs	r2, #0
 800c97e:	c304      	stmia	r3!, {r2}
 800c980:	429f      	cmp	r7, r3
 800c982:	d2fc      	bcs.n	800c97e <__hexnan+0xe6>
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <__hexnan+0xfc>
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	429f      	cmp	r7, r3
 800c98e:	d126      	bne.n	800c9de <__hexnan+0x146>
 800c990:	2301      	movs	r3, #1
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	2005      	movs	r0, #5
 800c996:	e025      	b.n	800c9e4 <__hexnan+0x14c>
 800c998:	9b03      	ldr	r3, [sp, #12]
 800c99a:	3501      	adds	r5, #1
 800c99c:	3301      	adds	r3, #1
 800c99e:	9303      	str	r3, [sp, #12]
 800c9a0:	2d08      	cmp	r5, #8
 800c9a2:	dd06      	ble.n	800c9b2 <__hexnan+0x11a>
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	429c      	cmp	r4, r3
 800c9a8:	d9bb      	bls.n	800c922 <__hexnan+0x8a>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	2501      	movs	r5, #1
 800c9ae:	3c04      	subs	r4, #4
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	220f      	movs	r2, #15
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	4010      	ands	r0, r2
 800c9b8:	011b      	lsls	r3, r3, #4
 800c9ba:	4303      	orrs	r3, r0
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	e7b0      	b.n	800c922 <__hexnan+0x8a>
 800c9c0:	9b06      	ldr	r3, [sp, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0de      	beq.n	800c984 <__hexnan+0xec>
 800c9c6:	2320      	movs	r3, #32
 800c9c8:	9a06      	ldr	r2, [sp, #24]
 800c9ca:	9902      	ldr	r1, [sp, #8]
 800c9cc:	1a9b      	subs	r3, r3, r2
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4252      	negs	r2, r2
 800c9d2:	40da      	lsrs	r2, r3
 800c9d4:	3904      	subs	r1, #4
 800c9d6:	680b      	ldr	r3, [r1, #0]
 800c9d8:	4013      	ands	r3, r2
 800c9da:	600b      	str	r3, [r1, #0]
 800c9dc:	e7d2      	b.n	800c984 <__hexnan+0xec>
 800c9de:	3f04      	subs	r7, #4
 800c9e0:	e7d0      	b.n	800c984 <__hexnan+0xec>
 800c9e2:	2004      	movs	r0, #4
 800c9e4:	b00b      	add	sp, #44	; 0x2c
 800c9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c9e8 <__ascii_mbtowc>:
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	2900      	cmp	r1, #0
 800c9ec:	d100      	bne.n	800c9f0 <__ascii_mbtowc+0x8>
 800c9ee:	a901      	add	r1, sp, #4
 800c9f0:	1e10      	subs	r0, r2, #0
 800c9f2:	d006      	beq.n	800ca02 <__ascii_mbtowc+0x1a>
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d006      	beq.n	800ca06 <__ascii_mbtowc+0x1e>
 800c9f8:	7813      	ldrb	r3, [r2, #0]
 800c9fa:	600b      	str	r3, [r1, #0]
 800c9fc:	7810      	ldrb	r0, [r2, #0]
 800c9fe:	1e43      	subs	r3, r0, #1
 800ca00:	4198      	sbcs	r0, r3
 800ca02:	b002      	add	sp, #8
 800ca04:	4770      	bx	lr
 800ca06:	2002      	movs	r0, #2
 800ca08:	4240      	negs	r0, r0
 800ca0a:	e7fa      	b.n	800ca02 <__ascii_mbtowc+0x1a>

0800ca0c <_Balloc>:
 800ca0c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ca0e:	b570      	push	{r4, r5, r6, lr}
 800ca10:	0006      	movs	r6, r0
 800ca12:	000c      	movs	r4, r1
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d012      	beq.n	800ca3e <_Balloc+0x32>
 800ca18:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ca1a:	00a2      	lsls	r2, r4, #2
 800ca1c:	189b      	adds	r3, r3, r2
 800ca1e:	6818      	ldr	r0, [r3, #0]
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d115      	bne.n	800ca50 <_Balloc+0x44>
 800ca24:	2101      	movs	r1, #1
 800ca26:	000d      	movs	r5, r1
 800ca28:	40a5      	lsls	r5, r4
 800ca2a:	1d6a      	adds	r2, r5, #5
 800ca2c:	0030      	movs	r0, r6
 800ca2e:	0092      	lsls	r2, r2, #2
 800ca30:	f003 face 	bl	800ffd0 <_calloc_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d009      	beq.n	800ca4c <_Balloc+0x40>
 800ca38:	6044      	str	r4, [r0, #4]
 800ca3a:	6085      	str	r5, [r0, #8]
 800ca3c:	e00a      	b.n	800ca54 <_Balloc+0x48>
 800ca3e:	2221      	movs	r2, #33	; 0x21
 800ca40:	2104      	movs	r1, #4
 800ca42:	f003 fac5 	bl	800ffd0 <_calloc_r>
 800ca46:	6470      	str	r0, [r6, #68]	; 0x44
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1e5      	bne.n	800ca18 <_Balloc+0xc>
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	6802      	ldr	r2, [r0, #0]
 800ca52:	601a      	str	r2, [r3, #0]
 800ca54:	2300      	movs	r3, #0
 800ca56:	6103      	str	r3, [r0, #16]
 800ca58:	60c3      	str	r3, [r0, #12]
 800ca5a:	e7f8      	b.n	800ca4e <_Balloc+0x42>

0800ca5c <_Bfree>:
 800ca5c:	2900      	cmp	r1, #0
 800ca5e:	d006      	beq.n	800ca6e <_Bfree+0x12>
 800ca60:	684a      	ldr	r2, [r1, #4]
 800ca62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ca64:	0092      	lsls	r2, r2, #2
 800ca66:	189b      	adds	r3, r3, r2
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	600a      	str	r2, [r1, #0]
 800ca6c:	6019      	str	r1, [r3, #0]
 800ca6e:	4770      	bx	lr

0800ca70 <__multadd>:
 800ca70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca72:	000e      	movs	r6, r1
 800ca74:	9001      	str	r0, [sp, #4]
 800ca76:	000c      	movs	r4, r1
 800ca78:	001d      	movs	r5, r3
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	690f      	ldr	r7, [r1, #16]
 800ca7e:	3614      	adds	r6, #20
 800ca80:	6833      	ldr	r3, [r6, #0]
 800ca82:	3001      	adds	r0, #1
 800ca84:	b299      	uxth	r1, r3
 800ca86:	4351      	muls	r1, r2
 800ca88:	0c1b      	lsrs	r3, r3, #16
 800ca8a:	4353      	muls	r3, r2
 800ca8c:	1949      	adds	r1, r1, r5
 800ca8e:	0c0d      	lsrs	r5, r1, #16
 800ca90:	195b      	adds	r3, r3, r5
 800ca92:	0c1d      	lsrs	r5, r3, #16
 800ca94:	b289      	uxth	r1, r1
 800ca96:	041b      	lsls	r3, r3, #16
 800ca98:	185b      	adds	r3, r3, r1
 800ca9a:	c608      	stmia	r6!, {r3}
 800ca9c:	4287      	cmp	r7, r0
 800ca9e:	dcef      	bgt.n	800ca80 <__multadd+0x10>
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	d022      	beq.n	800caea <__multadd+0x7a>
 800caa4:	68a3      	ldr	r3, [r4, #8]
 800caa6:	42bb      	cmp	r3, r7
 800caa8:	dc19      	bgt.n	800cade <__multadd+0x6e>
 800caaa:	6861      	ldr	r1, [r4, #4]
 800caac:	9801      	ldr	r0, [sp, #4]
 800caae:	3101      	adds	r1, #1
 800cab0:	f7ff ffac 	bl	800ca0c <_Balloc>
 800cab4:	1e06      	subs	r6, r0, #0
 800cab6:	d105      	bne.n	800cac4 <__multadd+0x54>
 800cab8:	0032      	movs	r2, r6
 800caba:	21ba      	movs	r1, #186	; 0xba
 800cabc:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <__multadd+0x80>)
 800cabe:	480d      	ldr	r0, [pc, #52]	; (800caf4 <__multadd+0x84>)
 800cac0:	f003 fa68 	bl	800ff94 <__assert_func>
 800cac4:	0021      	movs	r1, r4
 800cac6:	6922      	ldr	r2, [r4, #16]
 800cac8:	310c      	adds	r1, #12
 800caca:	3202      	adds	r2, #2
 800cacc:	0092      	lsls	r2, r2, #2
 800cace:	300c      	adds	r0, #12
 800cad0:	f7ff fb01 	bl	800c0d6 <memcpy>
 800cad4:	0021      	movs	r1, r4
 800cad6:	9801      	ldr	r0, [sp, #4]
 800cad8:	f7ff ffc0 	bl	800ca5c <_Bfree>
 800cadc:	0034      	movs	r4, r6
 800cade:	1d3b      	adds	r3, r7, #4
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	18e3      	adds	r3, r4, r3
 800cae4:	605d      	str	r5, [r3, #4]
 800cae6:	1c7b      	adds	r3, r7, #1
 800cae8:	6123      	str	r3, [r4, #16]
 800caea:	0020      	movs	r0, r4
 800caec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800caee:	46c0      	nop			; (mov r8, r8)
 800caf0:	080146d1 	.word	0x080146d1
 800caf4:	08014742 	.word	0x08014742

0800caf8 <__s2b>:
 800caf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafa:	0006      	movs	r6, r0
 800cafc:	0018      	movs	r0, r3
 800cafe:	000c      	movs	r4, r1
 800cb00:	3008      	adds	r0, #8
 800cb02:	2109      	movs	r1, #9
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	0015      	movs	r5, r2
 800cb08:	f7f3 fba2 	bl	8000250 <__divsi3>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	2100      	movs	r1, #0
 800cb10:	4283      	cmp	r3, r0
 800cb12:	db0a      	blt.n	800cb2a <__s2b+0x32>
 800cb14:	0030      	movs	r0, r6
 800cb16:	f7ff ff79 	bl	800ca0c <_Balloc>
 800cb1a:	1e01      	subs	r1, r0, #0
 800cb1c:	d108      	bne.n	800cb30 <__s2b+0x38>
 800cb1e:	000a      	movs	r2, r1
 800cb20:	4b19      	ldr	r3, [pc, #100]	; (800cb88 <__s2b+0x90>)
 800cb22:	481a      	ldr	r0, [pc, #104]	; (800cb8c <__s2b+0x94>)
 800cb24:	31d3      	adds	r1, #211	; 0xd3
 800cb26:	f003 fa35 	bl	800ff94 <__assert_func>
 800cb2a:	005b      	lsls	r3, r3, #1
 800cb2c:	3101      	adds	r1, #1
 800cb2e:	e7ef      	b.n	800cb10 <__s2b+0x18>
 800cb30:	9b08      	ldr	r3, [sp, #32]
 800cb32:	6143      	str	r3, [r0, #20]
 800cb34:	2301      	movs	r3, #1
 800cb36:	6103      	str	r3, [r0, #16]
 800cb38:	2d09      	cmp	r5, #9
 800cb3a:	dd18      	ble.n	800cb6e <__s2b+0x76>
 800cb3c:	0023      	movs	r3, r4
 800cb3e:	3309      	adds	r3, #9
 800cb40:	001f      	movs	r7, r3
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	1964      	adds	r4, r4, r5
 800cb46:	783b      	ldrb	r3, [r7, #0]
 800cb48:	220a      	movs	r2, #10
 800cb4a:	0030      	movs	r0, r6
 800cb4c:	3b30      	subs	r3, #48	; 0x30
 800cb4e:	f7ff ff8f 	bl	800ca70 <__multadd>
 800cb52:	3701      	adds	r7, #1
 800cb54:	0001      	movs	r1, r0
 800cb56:	42a7      	cmp	r7, r4
 800cb58:	d1f5      	bne.n	800cb46 <__s2b+0x4e>
 800cb5a:	002c      	movs	r4, r5
 800cb5c:	9b00      	ldr	r3, [sp, #0]
 800cb5e:	3c08      	subs	r4, #8
 800cb60:	191c      	adds	r4, r3, r4
 800cb62:	002f      	movs	r7, r5
 800cb64:	9b01      	ldr	r3, [sp, #4]
 800cb66:	429f      	cmp	r7, r3
 800cb68:	db04      	blt.n	800cb74 <__s2b+0x7c>
 800cb6a:	0008      	movs	r0, r1
 800cb6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb6e:	2509      	movs	r5, #9
 800cb70:	340a      	adds	r4, #10
 800cb72:	e7f6      	b.n	800cb62 <__s2b+0x6a>
 800cb74:	1b63      	subs	r3, r4, r5
 800cb76:	5ddb      	ldrb	r3, [r3, r7]
 800cb78:	220a      	movs	r2, #10
 800cb7a:	0030      	movs	r0, r6
 800cb7c:	3b30      	subs	r3, #48	; 0x30
 800cb7e:	f7ff ff77 	bl	800ca70 <__multadd>
 800cb82:	3701      	adds	r7, #1
 800cb84:	0001      	movs	r1, r0
 800cb86:	e7ed      	b.n	800cb64 <__s2b+0x6c>
 800cb88:	080146d1 	.word	0x080146d1
 800cb8c:	08014742 	.word	0x08014742

0800cb90 <__hi0bits>:
 800cb90:	0003      	movs	r3, r0
 800cb92:	0c02      	lsrs	r2, r0, #16
 800cb94:	2000      	movs	r0, #0
 800cb96:	4282      	cmp	r2, r0
 800cb98:	d101      	bne.n	800cb9e <__hi0bits+0xe>
 800cb9a:	041b      	lsls	r3, r3, #16
 800cb9c:	3010      	adds	r0, #16
 800cb9e:	0e1a      	lsrs	r2, r3, #24
 800cba0:	d101      	bne.n	800cba6 <__hi0bits+0x16>
 800cba2:	3008      	adds	r0, #8
 800cba4:	021b      	lsls	r3, r3, #8
 800cba6:	0f1a      	lsrs	r2, r3, #28
 800cba8:	d101      	bne.n	800cbae <__hi0bits+0x1e>
 800cbaa:	3004      	adds	r0, #4
 800cbac:	011b      	lsls	r3, r3, #4
 800cbae:	0f9a      	lsrs	r2, r3, #30
 800cbb0:	d101      	bne.n	800cbb6 <__hi0bits+0x26>
 800cbb2:	3002      	adds	r0, #2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	db03      	blt.n	800cbc2 <__hi0bits+0x32>
 800cbba:	3001      	adds	r0, #1
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	d400      	bmi.n	800cbc2 <__hi0bits+0x32>
 800cbc0:	2020      	movs	r0, #32
 800cbc2:	4770      	bx	lr

0800cbc4 <__lo0bits>:
 800cbc4:	6803      	ldr	r3, [r0, #0]
 800cbc6:	0001      	movs	r1, r0
 800cbc8:	2207      	movs	r2, #7
 800cbca:	0018      	movs	r0, r3
 800cbcc:	4010      	ands	r0, r2
 800cbce:	4213      	tst	r3, r2
 800cbd0:	d00d      	beq.n	800cbee <__lo0bits+0x2a>
 800cbd2:	3a06      	subs	r2, #6
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	4213      	tst	r3, r2
 800cbd8:	d105      	bne.n	800cbe6 <__lo0bits+0x22>
 800cbda:	3002      	adds	r0, #2
 800cbdc:	4203      	tst	r3, r0
 800cbde:	d003      	beq.n	800cbe8 <__lo0bits+0x24>
 800cbe0:	40d3      	lsrs	r3, r2
 800cbe2:	0010      	movs	r0, r2
 800cbe4:	600b      	str	r3, [r1, #0]
 800cbe6:	4770      	bx	lr
 800cbe8:	089b      	lsrs	r3, r3, #2
 800cbea:	600b      	str	r3, [r1, #0]
 800cbec:	e7fb      	b.n	800cbe6 <__lo0bits+0x22>
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	2a00      	cmp	r2, #0
 800cbf2:	d101      	bne.n	800cbf8 <__lo0bits+0x34>
 800cbf4:	2010      	movs	r0, #16
 800cbf6:	0c1b      	lsrs	r3, r3, #16
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	2a00      	cmp	r2, #0
 800cbfc:	d101      	bne.n	800cc02 <__lo0bits+0x3e>
 800cbfe:	3008      	adds	r0, #8
 800cc00:	0a1b      	lsrs	r3, r3, #8
 800cc02:	071a      	lsls	r2, r3, #28
 800cc04:	d101      	bne.n	800cc0a <__lo0bits+0x46>
 800cc06:	3004      	adds	r0, #4
 800cc08:	091b      	lsrs	r3, r3, #4
 800cc0a:	079a      	lsls	r2, r3, #30
 800cc0c:	d101      	bne.n	800cc12 <__lo0bits+0x4e>
 800cc0e:	3002      	adds	r0, #2
 800cc10:	089b      	lsrs	r3, r3, #2
 800cc12:	07da      	lsls	r2, r3, #31
 800cc14:	d4e9      	bmi.n	800cbea <__lo0bits+0x26>
 800cc16:	3001      	adds	r0, #1
 800cc18:	085b      	lsrs	r3, r3, #1
 800cc1a:	d1e6      	bne.n	800cbea <__lo0bits+0x26>
 800cc1c:	2020      	movs	r0, #32
 800cc1e:	e7e2      	b.n	800cbe6 <__lo0bits+0x22>

0800cc20 <__i2b>:
 800cc20:	b510      	push	{r4, lr}
 800cc22:	000c      	movs	r4, r1
 800cc24:	2101      	movs	r1, #1
 800cc26:	f7ff fef1 	bl	800ca0c <_Balloc>
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d107      	bne.n	800cc3e <__i2b+0x1e>
 800cc2e:	2146      	movs	r1, #70	; 0x46
 800cc30:	4c05      	ldr	r4, [pc, #20]	; (800cc48 <__i2b+0x28>)
 800cc32:	0002      	movs	r2, r0
 800cc34:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <__i2b+0x2c>)
 800cc36:	0020      	movs	r0, r4
 800cc38:	31ff      	adds	r1, #255	; 0xff
 800cc3a:	f003 f9ab 	bl	800ff94 <__assert_func>
 800cc3e:	2301      	movs	r3, #1
 800cc40:	6144      	str	r4, [r0, #20]
 800cc42:	6103      	str	r3, [r0, #16]
 800cc44:	bd10      	pop	{r4, pc}
 800cc46:	46c0      	nop			; (mov r8, r8)
 800cc48:	08014742 	.word	0x08014742
 800cc4c:	080146d1 	.word	0x080146d1

0800cc50 <__multiply>:
 800cc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc52:	0015      	movs	r5, r2
 800cc54:	690a      	ldr	r2, [r1, #16]
 800cc56:	692b      	ldr	r3, [r5, #16]
 800cc58:	000c      	movs	r4, r1
 800cc5a:	b08b      	sub	sp, #44	; 0x2c
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	da01      	bge.n	800cc64 <__multiply+0x14>
 800cc60:	002c      	movs	r4, r5
 800cc62:	000d      	movs	r5, r1
 800cc64:	6927      	ldr	r7, [r4, #16]
 800cc66:	692e      	ldr	r6, [r5, #16]
 800cc68:	6861      	ldr	r1, [r4, #4]
 800cc6a:	19bb      	adds	r3, r7, r6
 800cc6c:	9303      	str	r3, [sp, #12]
 800cc6e:	68a3      	ldr	r3, [r4, #8]
 800cc70:	19ba      	adds	r2, r7, r6
 800cc72:	4293      	cmp	r3, r2
 800cc74:	da00      	bge.n	800cc78 <__multiply+0x28>
 800cc76:	3101      	adds	r1, #1
 800cc78:	f7ff fec8 	bl	800ca0c <_Balloc>
 800cc7c:	9002      	str	r0, [sp, #8]
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d106      	bne.n	800cc90 <__multiply+0x40>
 800cc82:	21b1      	movs	r1, #177	; 0xb1
 800cc84:	4b48      	ldr	r3, [pc, #288]	; (800cda8 <__multiply+0x158>)
 800cc86:	4849      	ldr	r0, [pc, #292]	; (800cdac <__multiply+0x15c>)
 800cc88:	9a02      	ldr	r2, [sp, #8]
 800cc8a:	0049      	lsls	r1, r1, #1
 800cc8c:	f003 f982 	bl	800ff94 <__assert_func>
 800cc90:	9b02      	ldr	r3, [sp, #8]
 800cc92:	2200      	movs	r2, #0
 800cc94:	3314      	adds	r3, #20
 800cc96:	469c      	mov	ip, r3
 800cc98:	19bb      	adds	r3, r7, r6
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4463      	add	r3, ip
 800cc9e:	9304      	str	r3, [sp, #16]
 800cca0:	4663      	mov	r3, ip
 800cca2:	9904      	ldr	r1, [sp, #16]
 800cca4:	428b      	cmp	r3, r1
 800cca6:	d32a      	bcc.n	800ccfe <__multiply+0xae>
 800cca8:	0023      	movs	r3, r4
 800ccaa:	00bf      	lsls	r7, r7, #2
 800ccac:	3314      	adds	r3, #20
 800ccae:	3514      	adds	r5, #20
 800ccb0:	9308      	str	r3, [sp, #32]
 800ccb2:	00b6      	lsls	r6, r6, #2
 800ccb4:	19db      	adds	r3, r3, r7
 800ccb6:	9305      	str	r3, [sp, #20]
 800ccb8:	19ab      	adds	r3, r5, r6
 800ccba:	9309      	str	r3, [sp, #36]	; 0x24
 800ccbc:	2304      	movs	r3, #4
 800ccbe:	9306      	str	r3, [sp, #24]
 800ccc0:	0023      	movs	r3, r4
 800ccc2:	9a05      	ldr	r2, [sp, #20]
 800ccc4:	3315      	adds	r3, #21
 800ccc6:	9501      	str	r5, [sp, #4]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d305      	bcc.n	800ccd8 <__multiply+0x88>
 800cccc:	1b13      	subs	r3, r2, r4
 800ccce:	3b15      	subs	r3, #21
 800ccd0:	089b      	lsrs	r3, r3, #2
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	009b      	lsls	r3, r3, #2
 800ccd6:	9306      	str	r3, [sp, #24]
 800ccd8:	9b01      	ldr	r3, [sp, #4]
 800ccda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d310      	bcc.n	800cd02 <__multiply+0xb2>
 800cce0:	9b03      	ldr	r3, [sp, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	dd05      	ble.n	800ccf2 <__multiply+0xa2>
 800cce6:	9b04      	ldr	r3, [sp, #16]
 800cce8:	3b04      	subs	r3, #4
 800ccea:	9304      	str	r3, [sp, #16]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d056      	beq.n	800cda0 <__multiply+0x150>
 800ccf2:	9b02      	ldr	r3, [sp, #8]
 800ccf4:	9a03      	ldr	r2, [sp, #12]
 800ccf6:	0018      	movs	r0, r3
 800ccf8:	611a      	str	r2, [r3, #16]
 800ccfa:	b00b      	add	sp, #44	; 0x2c
 800ccfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccfe:	c304      	stmia	r3!, {r2}
 800cd00:	e7cf      	b.n	800cca2 <__multiply+0x52>
 800cd02:	9b01      	ldr	r3, [sp, #4]
 800cd04:	6818      	ldr	r0, [r3, #0]
 800cd06:	b280      	uxth	r0, r0
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d01e      	beq.n	800cd4a <__multiply+0xfa>
 800cd0c:	4667      	mov	r7, ip
 800cd0e:	2500      	movs	r5, #0
 800cd10:	9e08      	ldr	r6, [sp, #32]
 800cd12:	ce02      	ldmia	r6!, {r1}
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	9307      	str	r3, [sp, #28]
 800cd18:	b28b      	uxth	r3, r1
 800cd1a:	4343      	muls	r3, r0
 800cd1c:	001a      	movs	r2, r3
 800cd1e:	466b      	mov	r3, sp
 800cd20:	8b9b      	ldrh	r3, [r3, #28]
 800cd22:	18d3      	adds	r3, r2, r3
 800cd24:	195b      	adds	r3, r3, r5
 800cd26:	0c0d      	lsrs	r5, r1, #16
 800cd28:	4345      	muls	r5, r0
 800cd2a:	9a07      	ldr	r2, [sp, #28]
 800cd2c:	0c11      	lsrs	r1, r2, #16
 800cd2e:	1869      	adds	r1, r5, r1
 800cd30:	0c1a      	lsrs	r2, r3, #16
 800cd32:	188a      	adds	r2, r1, r2
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	0c15      	lsrs	r5, r2, #16
 800cd38:	0412      	lsls	r2, r2, #16
 800cd3a:	431a      	orrs	r2, r3
 800cd3c:	9b05      	ldr	r3, [sp, #20]
 800cd3e:	c704      	stmia	r7!, {r2}
 800cd40:	42b3      	cmp	r3, r6
 800cd42:	d8e6      	bhi.n	800cd12 <__multiply+0xc2>
 800cd44:	4663      	mov	r3, ip
 800cd46:	9a06      	ldr	r2, [sp, #24]
 800cd48:	509d      	str	r5, [r3, r2]
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	6818      	ldr	r0, [r3, #0]
 800cd4e:	0c00      	lsrs	r0, r0, #16
 800cd50:	d020      	beq.n	800cd94 <__multiply+0x144>
 800cd52:	4663      	mov	r3, ip
 800cd54:	0025      	movs	r5, r4
 800cd56:	4661      	mov	r1, ip
 800cd58:	2700      	movs	r7, #0
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	3514      	adds	r5, #20
 800cd5e:	682a      	ldr	r2, [r5, #0]
 800cd60:	680e      	ldr	r6, [r1, #0]
 800cd62:	b292      	uxth	r2, r2
 800cd64:	4342      	muls	r2, r0
 800cd66:	0c36      	lsrs	r6, r6, #16
 800cd68:	1992      	adds	r2, r2, r6
 800cd6a:	19d2      	adds	r2, r2, r7
 800cd6c:	0416      	lsls	r6, r2, #16
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	431e      	orrs	r6, r3
 800cd72:	600e      	str	r6, [r1, #0]
 800cd74:	cd40      	ldmia	r5!, {r6}
 800cd76:	684b      	ldr	r3, [r1, #4]
 800cd78:	0c36      	lsrs	r6, r6, #16
 800cd7a:	4346      	muls	r6, r0
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	0c12      	lsrs	r2, r2, #16
 800cd80:	18f3      	adds	r3, r6, r3
 800cd82:	189b      	adds	r3, r3, r2
 800cd84:	9a05      	ldr	r2, [sp, #20]
 800cd86:	0c1f      	lsrs	r7, r3, #16
 800cd88:	3104      	adds	r1, #4
 800cd8a:	42aa      	cmp	r2, r5
 800cd8c:	d8e7      	bhi.n	800cd5e <__multiply+0x10e>
 800cd8e:	4662      	mov	r2, ip
 800cd90:	9906      	ldr	r1, [sp, #24]
 800cd92:	5053      	str	r3, [r2, r1]
 800cd94:	9b01      	ldr	r3, [sp, #4]
 800cd96:	3304      	adds	r3, #4
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	2304      	movs	r3, #4
 800cd9c:	449c      	add	ip, r3
 800cd9e:	e79b      	b.n	800ccd8 <__multiply+0x88>
 800cda0:	9b03      	ldr	r3, [sp, #12]
 800cda2:	3b01      	subs	r3, #1
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	e79b      	b.n	800cce0 <__multiply+0x90>
 800cda8:	080146d1 	.word	0x080146d1
 800cdac:	08014742 	.word	0x08014742

0800cdb0 <__pow5mult>:
 800cdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	0015      	movs	r5, r2
 800cdb6:	0007      	movs	r7, r0
 800cdb8:	000e      	movs	r6, r1
 800cdba:	401a      	ands	r2, r3
 800cdbc:	421d      	tst	r5, r3
 800cdbe:	d008      	beq.n	800cdd2 <__pow5mult+0x22>
 800cdc0:	491a      	ldr	r1, [pc, #104]	; (800ce2c <__pow5mult+0x7c>)
 800cdc2:	3a01      	subs	r2, #1
 800cdc4:	0092      	lsls	r2, r2, #2
 800cdc6:	5852      	ldr	r2, [r2, r1]
 800cdc8:	2300      	movs	r3, #0
 800cdca:	0031      	movs	r1, r6
 800cdcc:	f7ff fe50 	bl	800ca70 <__multadd>
 800cdd0:	0006      	movs	r6, r0
 800cdd2:	10ad      	asrs	r5, r5, #2
 800cdd4:	d027      	beq.n	800ce26 <__pow5mult+0x76>
 800cdd6:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800cdd8:	2c00      	cmp	r4, #0
 800cdda:	d107      	bne.n	800cdec <__pow5mult+0x3c>
 800cddc:	0038      	movs	r0, r7
 800cdde:	4914      	ldr	r1, [pc, #80]	; (800ce30 <__pow5mult+0x80>)
 800cde0:	f7ff ff1e 	bl	800cc20 <__i2b>
 800cde4:	2300      	movs	r3, #0
 800cde6:	0004      	movs	r4, r0
 800cde8:	6438      	str	r0, [r7, #64]	; 0x40
 800cdea:	6003      	str	r3, [r0, #0]
 800cdec:	2301      	movs	r3, #1
 800cdee:	421d      	tst	r5, r3
 800cdf0:	d00a      	beq.n	800ce08 <__pow5mult+0x58>
 800cdf2:	0031      	movs	r1, r6
 800cdf4:	0022      	movs	r2, r4
 800cdf6:	0038      	movs	r0, r7
 800cdf8:	f7ff ff2a 	bl	800cc50 <__multiply>
 800cdfc:	0031      	movs	r1, r6
 800cdfe:	9001      	str	r0, [sp, #4]
 800ce00:	0038      	movs	r0, r7
 800ce02:	f7ff fe2b 	bl	800ca5c <_Bfree>
 800ce06:	9e01      	ldr	r6, [sp, #4]
 800ce08:	106d      	asrs	r5, r5, #1
 800ce0a:	d00c      	beq.n	800ce26 <__pow5mult+0x76>
 800ce0c:	6820      	ldr	r0, [r4, #0]
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d107      	bne.n	800ce22 <__pow5mult+0x72>
 800ce12:	0022      	movs	r2, r4
 800ce14:	0021      	movs	r1, r4
 800ce16:	0038      	movs	r0, r7
 800ce18:	f7ff ff1a 	bl	800cc50 <__multiply>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	6020      	str	r0, [r4, #0]
 800ce20:	6003      	str	r3, [r0, #0]
 800ce22:	0004      	movs	r4, r0
 800ce24:	e7e2      	b.n	800cdec <__pow5mult+0x3c>
 800ce26:	0030      	movs	r0, r6
 800ce28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	08014890 	.word	0x08014890
 800ce30:	00000271 	.word	0x00000271

0800ce34 <__lshift>:
 800ce34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce36:	000c      	movs	r4, r1
 800ce38:	0017      	movs	r7, r2
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	1155      	asrs	r5, r2, #5
 800ce3e:	b087      	sub	sp, #28
 800ce40:	18eb      	adds	r3, r5, r3
 800ce42:	9302      	str	r3, [sp, #8]
 800ce44:	3301      	adds	r3, #1
 800ce46:	9301      	str	r3, [sp, #4]
 800ce48:	6849      	ldr	r1, [r1, #4]
 800ce4a:	68a3      	ldr	r3, [r4, #8]
 800ce4c:	9004      	str	r0, [sp, #16]
 800ce4e:	9a01      	ldr	r2, [sp, #4]
 800ce50:	4293      	cmp	r3, r2
 800ce52:	db10      	blt.n	800ce76 <__lshift+0x42>
 800ce54:	9804      	ldr	r0, [sp, #16]
 800ce56:	f7ff fdd9 	bl	800ca0c <_Balloc>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	0002      	movs	r2, r0
 800ce5e:	0006      	movs	r6, r0
 800ce60:	0019      	movs	r1, r3
 800ce62:	3214      	adds	r2, #20
 800ce64:	4298      	cmp	r0, r3
 800ce66:	d10c      	bne.n	800ce82 <__lshift+0x4e>
 800ce68:	31df      	adds	r1, #223	; 0xdf
 800ce6a:	0032      	movs	r2, r6
 800ce6c:	4b26      	ldr	r3, [pc, #152]	; (800cf08 <__lshift+0xd4>)
 800ce6e:	4827      	ldr	r0, [pc, #156]	; (800cf0c <__lshift+0xd8>)
 800ce70:	31ff      	adds	r1, #255	; 0xff
 800ce72:	f003 f88f 	bl	800ff94 <__assert_func>
 800ce76:	3101      	adds	r1, #1
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	e7e8      	b.n	800ce4e <__lshift+0x1a>
 800ce7c:	0098      	lsls	r0, r3, #2
 800ce7e:	5011      	str	r1, [r2, r0]
 800ce80:	3301      	adds	r3, #1
 800ce82:	42ab      	cmp	r3, r5
 800ce84:	dbfa      	blt.n	800ce7c <__lshift+0x48>
 800ce86:	43eb      	mvns	r3, r5
 800ce88:	17db      	asrs	r3, r3, #31
 800ce8a:	401d      	ands	r5, r3
 800ce8c:	211f      	movs	r1, #31
 800ce8e:	0023      	movs	r3, r4
 800ce90:	0038      	movs	r0, r7
 800ce92:	00ad      	lsls	r5, r5, #2
 800ce94:	1955      	adds	r5, r2, r5
 800ce96:	6922      	ldr	r2, [r4, #16]
 800ce98:	3314      	adds	r3, #20
 800ce9a:	0092      	lsls	r2, r2, #2
 800ce9c:	4008      	ands	r0, r1
 800ce9e:	4684      	mov	ip, r0
 800cea0:	189a      	adds	r2, r3, r2
 800cea2:	420f      	tst	r7, r1
 800cea4:	d02a      	beq.n	800cefc <__lshift+0xc8>
 800cea6:	3101      	adds	r1, #1
 800cea8:	1a09      	subs	r1, r1, r0
 800ceaa:	9105      	str	r1, [sp, #20]
 800ceac:	2100      	movs	r1, #0
 800ceae:	9503      	str	r5, [sp, #12]
 800ceb0:	4667      	mov	r7, ip
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	40b8      	lsls	r0, r7
 800ceb6:	4308      	orrs	r0, r1
 800ceb8:	9903      	ldr	r1, [sp, #12]
 800ceba:	c101      	stmia	r1!, {r0}
 800cebc:	9103      	str	r1, [sp, #12]
 800cebe:	9805      	ldr	r0, [sp, #20]
 800cec0:	cb02      	ldmia	r3!, {r1}
 800cec2:	40c1      	lsrs	r1, r0
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d8f3      	bhi.n	800ceb0 <__lshift+0x7c>
 800cec8:	0020      	movs	r0, r4
 800ceca:	3015      	adds	r0, #21
 800cecc:	2304      	movs	r3, #4
 800cece:	4282      	cmp	r2, r0
 800ced0:	d304      	bcc.n	800cedc <__lshift+0xa8>
 800ced2:	1b13      	subs	r3, r2, r4
 800ced4:	3b15      	subs	r3, #21
 800ced6:	089b      	lsrs	r3, r3, #2
 800ced8:	3301      	adds	r3, #1
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	50e9      	str	r1, [r5, r3]
 800cede:	2900      	cmp	r1, #0
 800cee0:	d002      	beq.n	800cee8 <__lshift+0xb4>
 800cee2:	9b02      	ldr	r3, [sp, #8]
 800cee4:	3302      	adds	r3, #2
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	9b01      	ldr	r3, [sp, #4]
 800ceea:	9804      	ldr	r0, [sp, #16]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	0021      	movs	r1, r4
 800cef0:	6133      	str	r3, [r6, #16]
 800cef2:	f7ff fdb3 	bl	800ca5c <_Bfree>
 800cef6:	0030      	movs	r0, r6
 800cef8:	b007      	add	sp, #28
 800cefa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cefc:	cb02      	ldmia	r3!, {r1}
 800cefe:	c502      	stmia	r5!, {r1}
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d8fb      	bhi.n	800cefc <__lshift+0xc8>
 800cf04:	e7f0      	b.n	800cee8 <__lshift+0xb4>
 800cf06:	46c0      	nop			; (mov r8, r8)
 800cf08:	080146d1 	.word	0x080146d1
 800cf0c:	08014742 	.word	0x08014742

0800cf10 <__mcmp>:
 800cf10:	b530      	push	{r4, r5, lr}
 800cf12:	690b      	ldr	r3, [r1, #16]
 800cf14:	6904      	ldr	r4, [r0, #16]
 800cf16:	0002      	movs	r2, r0
 800cf18:	1ae0      	subs	r0, r4, r3
 800cf1a:	429c      	cmp	r4, r3
 800cf1c:	d10e      	bne.n	800cf3c <__mcmp+0x2c>
 800cf1e:	3214      	adds	r2, #20
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	3114      	adds	r1, #20
 800cf24:	0014      	movs	r4, r2
 800cf26:	18c9      	adds	r1, r1, r3
 800cf28:	18d2      	adds	r2, r2, r3
 800cf2a:	3a04      	subs	r2, #4
 800cf2c:	3904      	subs	r1, #4
 800cf2e:	6815      	ldr	r5, [r2, #0]
 800cf30:	680b      	ldr	r3, [r1, #0]
 800cf32:	429d      	cmp	r5, r3
 800cf34:	d003      	beq.n	800cf3e <__mcmp+0x2e>
 800cf36:	2001      	movs	r0, #1
 800cf38:	429d      	cmp	r5, r3
 800cf3a:	d303      	bcc.n	800cf44 <__mcmp+0x34>
 800cf3c:	bd30      	pop	{r4, r5, pc}
 800cf3e:	4294      	cmp	r4, r2
 800cf40:	d3f3      	bcc.n	800cf2a <__mcmp+0x1a>
 800cf42:	e7fb      	b.n	800cf3c <__mcmp+0x2c>
 800cf44:	4240      	negs	r0, r0
 800cf46:	e7f9      	b.n	800cf3c <__mcmp+0x2c>

0800cf48 <__mdiff>:
 800cf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf4a:	000e      	movs	r6, r1
 800cf4c:	0007      	movs	r7, r0
 800cf4e:	0011      	movs	r1, r2
 800cf50:	0030      	movs	r0, r6
 800cf52:	b087      	sub	sp, #28
 800cf54:	0014      	movs	r4, r2
 800cf56:	f7ff ffdb 	bl	800cf10 <__mcmp>
 800cf5a:	1e05      	subs	r5, r0, #0
 800cf5c:	d110      	bne.n	800cf80 <__mdiff+0x38>
 800cf5e:	0001      	movs	r1, r0
 800cf60:	0038      	movs	r0, r7
 800cf62:	f7ff fd53 	bl	800ca0c <_Balloc>
 800cf66:	1e02      	subs	r2, r0, #0
 800cf68:	d104      	bne.n	800cf74 <__mdiff+0x2c>
 800cf6a:	4b3f      	ldr	r3, [pc, #252]	; (800d068 <__mdiff+0x120>)
 800cf6c:	483f      	ldr	r0, [pc, #252]	; (800d06c <__mdiff+0x124>)
 800cf6e:	4940      	ldr	r1, [pc, #256]	; (800d070 <__mdiff+0x128>)
 800cf70:	f003 f810 	bl	800ff94 <__assert_func>
 800cf74:	2301      	movs	r3, #1
 800cf76:	6145      	str	r5, [r0, #20]
 800cf78:	6103      	str	r3, [r0, #16]
 800cf7a:	0010      	movs	r0, r2
 800cf7c:	b007      	add	sp, #28
 800cf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf80:	2301      	movs	r3, #1
 800cf82:	9301      	str	r3, [sp, #4]
 800cf84:	2800      	cmp	r0, #0
 800cf86:	db04      	blt.n	800cf92 <__mdiff+0x4a>
 800cf88:	0023      	movs	r3, r4
 800cf8a:	0034      	movs	r4, r6
 800cf8c:	001e      	movs	r6, r3
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9301      	str	r3, [sp, #4]
 800cf92:	0038      	movs	r0, r7
 800cf94:	6861      	ldr	r1, [r4, #4]
 800cf96:	f7ff fd39 	bl	800ca0c <_Balloc>
 800cf9a:	1e02      	subs	r2, r0, #0
 800cf9c:	d103      	bne.n	800cfa6 <__mdiff+0x5e>
 800cf9e:	4b32      	ldr	r3, [pc, #200]	; (800d068 <__mdiff+0x120>)
 800cfa0:	4832      	ldr	r0, [pc, #200]	; (800d06c <__mdiff+0x124>)
 800cfa2:	4934      	ldr	r1, [pc, #208]	; (800d074 <__mdiff+0x12c>)
 800cfa4:	e7e4      	b.n	800cf70 <__mdiff+0x28>
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	2700      	movs	r7, #0
 800cfaa:	60c3      	str	r3, [r0, #12]
 800cfac:	6920      	ldr	r0, [r4, #16]
 800cfae:	3414      	adds	r4, #20
 800cfb0:	0083      	lsls	r3, r0, #2
 800cfb2:	18e3      	adds	r3, r4, r3
 800cfb4:	0021      	movs	r1, r4
 800cfb6:	9401      	str	r4, [sp, #4]
 800cfb8:	0034      	movs	r4, r6
 800cfba:	9302      	str	r3, [sp, #8]
 800cfbc:	6933      	ldr	r3, [r6, #16]
 800cfbe:	3414      	adds	r4, #20
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	18e3      	adds	r3, r4, r3
 800cfc4:	9303      	str	r3, [sp, #12]
 800cfc6:	0013      	movs	r3, r2
 800cfc8:	3314      	adds	r3, #20
 800cfca:	469c      	mov	ip, r3
 800cfcc:	9305      	str	r3, [sp, #20]
 800cfce:	9104      	str	r1, [sp, #16]
 800cfd0:	9b04      	ldr	r3, [sp, #16]
 800cfd2:	cc02      	ldmia	r4!, {r1}
 800cfd4:	cb20      	ldmia	r3!, {r5}
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	b2ab      	uxth	r3, r5
 800cfda:	19df      	adds	r7, r3, r7
 800cfdc:	b28b      	uxth	r3, r1
 800cfde:	1afb      	subs	r3, r7, r3
 800cfe0:	0c09      	lsrs	r1, r1, #16
 800cfe2:	0c2d      	lsrs	r5, r5, #16
 800cfe4:	1a6d      	subs	r5, r5, r1
 800cfe6:	1419      	asrs	r1, r3, #16
 800cfe8:	1869      	adds	r1, r5, r1
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	140f      	asrs	r7, r1, #16
 800cfee:	0409      	lsls	r1, r1, #16
 800cff0:	4319      	orrs	r1, r3
 800cff2:	4663      	mov	r3, ip
 800cff4:	c302      	stmia	r3!, {r1}
 800cff6:	469c      	mov	ip, r3
 800cff8:	9b03      	ldr	r3, [sp, #12]
 800cffa:	42a3      	cmp	r3, r4
 800cffc:	d8e8      	bhi.n	800cfd0 <__mdiff+0x88>
 800cffe:	0031      	movs	r1, r6
 800d000:	9c03      	ldr	r4, [sp, #12]
 800d002:	3115      	adds	r1, #21
 800d004:	2304      	movs	r3, #4
 800d006:	428c      	cmp	r4, r1
 800d008:	d304      	bcc.n	800d014 <__mdiff+0xcc>
 800d00a:	1ba3      	subs	r3, r4, r6
 800d00c:	3b15      	subs	r3, #21
 800d00e:	089b      	lsrs	r3, r3, #2
 800d010:	3301      	adds	r3, #1
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	9901      	ldr	r1, [sp, #4]
 800d016:	18cd      	adds	r5, r1, r3
 800d018:	9905      	ldr	r1, [sp, #20]
 800d01a:	002e      	movs	r6, r5
 800d01c:	18cb      	adds	r3, r1, r3
 800d01e:	469c      	mov	ip, r3
 800d020:	9902      	ldr	r1, [sp, #8]
 800d022:	428e      	cmp	r6, r1
 800d024:	d310      	bcc.n	800d048 <__mdiff+0x100>
 800d026:	9e02      	ldr	r6, [sp, #8]
 800d028:	1ee9      	subs	r1, r5, #3
 800d02a:	2400      	movs	r4, #0
 800d02c:	428e      	cmp	r6, r1
 800d02e:	d304      	bcc.n	800d03a <__mdiff+0xf2>
 800d030:	0031      	movs	r1, r6
 800d032:	3103      	adds	r1, #3
 800d034:	1b49      	subs	r1, r1, r5
 800d036:	0889      	lsrs	r1, r1, #2
 800d038:	008c      	lsls	r4, r1, #2
 800d03a:	191b      	adds	r3, r3, r4
 800d03c:	3b04      	subs	r3, #4
 800d03e:	6819      	ldr	r1, [r3, #0]
 800d040:	2900      	cmp	r1, #0
 800d042:	d00f      	beq.n	800d064 <__mdiff+0x11c>
 800d044:	6110      	str	r0, [r2, #16]
 800d046:	e798      	b.n	800cf7a <__mdiff+0x32>
 800d048:	ce02      	ldmia	r6!, {r1}
 800d04a:	b28c      	uxth	r4, r1
 800d04c:	19e4      	adds	r4, r4, r7
 800d04e:	0c0f      	lsrs	r7, r1, #16
 800d050:	1421      	asrs	r1, r4, #16
 800d052:	1879      	adds	r1, r7, r1
 800d054:	b2a4      	uxth	r4, r4
 800d056:	140f      	asrs	r7, r1, #16
 800d058:	0409      	lsls	r1, r1, #16
 800d05a:	4321      	orrs	r1, r4
 800d05c:	4664      	mov	r4, ip
 800d05e:	c402      	stmia	r4!, {r1}
 800d060:	46a4      	mov	ip, r4
 800d062:	e7dd      	b.n	800d020 <__mdiff+0xd8>
 800d064:	3801      	subs	r0, #1
 800d066:	e7e9      	b.n	800d03c <__mdiff+0xf4>
 800d068:	080146d1 	.word	0x080146d1
 800d06c:	08014742 	.word	0x08014742
 800d070:	00000237 	.word	0x00000237
 800d074:	00000245 	.word	0x00000245

0800d078 <__ulp>:
 800d078:	2000      	movs	r0, #0
 800d07a:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <__ulp+0x30>)
 800d07c:	4019      	ands	r1, r3
 800d07e:	4b0b      	ldr	r3, [pc, #44]	; (800d0ac <__ulp+0x34>)
 800d080:	18c9      	adds	r1, r1, r3
 800d082:	4281      	cmp	r1, r0
 800d084:	dc06      	bgt.n	800d094 <__ulp+0x1c>
 800d086:	4249      	negs	r1, r1
 800d088:	150b      	asrs	r3, r1, #20
 800d08a:	2b13      	cmp	r3, #19
 800d08c:	dc03      	bgt.n	800d096 <__ulp+0x1e>
 800d08e:	2180      	movs	r1, #128	; 0x80
 800d090:	0309      	lsls	r1, r1, #12
 800d092:	4119      	asrs	r1, r3
 800d094:	4770      	bx	lr
 800d096:	3b14      	subs	r3, #20
 800d098:	2001      	movs	r0, #1
 800d09a:	2b1e      	cmp	r3, #30
 800d09c:	dc02      	bgt.n	800d0a4 <__ulp+0x2c>
 800d09e:	2080      	movs	r0, #128	; 0x80
 800d0a0:	0600      	lsls	r0, r0, #24
 800d0a2:	40d8      	lsrs	r0, r3
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	e7f5      	b.n	800d094 <__ulp+0x1c>
 800d0a8:	7ff00000 	.word	0x7ff00000
 800d0ac:	fcc00000 	.word	0xfcc00000

0800d0b0 <__b2d>:
 800d0b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0b2:	0006      	movs	r6, r0
 800d0b4:	6903      	ldr	r3, [r0, #16]
 800d0b6:	3614      	adds	r6, #20
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	18f3      	adds	r3, r6, r3
 800d0bc:	1f1d      	subs	r5, r3, #4
 800d0be:	682c      	ldr	r4, [r5, #0]
 800d0c0:	000f      	movs	r7, r1
 800d0c2:	0020      	movs	r0, r4
 800d0c4:	9301      	str	r3, [sp, #4]
 800d0c6:	f7ff fd63 	bl	800cb90 <__hi0bits>
 800d0ca:	2220      	movs	r2, #32
 800d0cc:	1a12      	subs	r2, r2, r0
 800d0ce:	603a      	str	r2, [r7, #0]
 800d0d0:	0003      	movs	r3, r0
 800d0d2:	4a1c      	ldr	r2, [pc, #112]	; (800d144 <__b2d+0x94>)
 800d0d4:	280a      	cmp	r0, #10
 800d0d6:	dc15      	bgt.n	800d104 <__b2d+0x54>
 800d0d8:	210b      	movs	r1, #11
 800d0da:	0027      	movs	r7, r4
 800d0dc:	1a09      	subs	r1, r1, r0
 800d0de:	40cf      	lsrs	r7, r1
 800d0e0:	433a      	orrs	r2, r7
 800d0e2:	468c      	mov	ip, r1
 800d0e4:	0011      	movs	r1, r2
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	42ae      	cmp	r6, r5
 800d0ea:	d202      	bcs.n	800d0f2 <__b2d+0x42>
 800d0ec:	9a01      	ldr	r2, [sp, #4]
 800d0ee:	3a08      	subs	r2, #8
 800d0f0:	6812      	ldr	r2, [r2, #0]
 800d0f2:	3315      	adds	r3, #21
 800d0f4:	409c      	lsls	r4, r3
 800d0f6:	4663      	mov	r3, ip
 800d0f8:	0027      	movs	r7, r4
 800d0fa:	40da      	lsrs	r2, r3
 800d0fc:	4317      	orrs	r7, r2
 800d0fe:	0038      	movs	r0, r7
 800d100:	b003      	add	sp, #12
 800d102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d104:	2700      	movs	r7, #0
 800d106:	42ae      	cmp	r6, r5
 800d108:	d202      	bcs.n	800d110 <__b2d+0x60>
 800d10a:	9d01      	ldr	r5, [sp, #4]
 800d10c:	3d08      	subs	r5, #8
 800d10e:	682f      	ldr	r7, [r5, #0]
 800d110:	210b      	movs	r1, #11
 800d112:	4249      	negs	r1, r1
 800d114:	468c      	mov	ip, r1
 800d116:	449c      	add	ip, r3
 800d118:	2b0b      	cmp	r3, #11
 800d11a:	d010      	beq.n	800d13e <__b2d+0x8e>
 800d11c:	4661      	mov	r1, ip
 800d11e:	2320      	movs	r3, #32
 800d120:	408c      	lsls	r4, r1
 800d122:	1a5b      	subs	r3, r3, r1
 800d124:	0039      	movs	r1, r7
 800d126:	40d9      	lsrs	r1, r3
 800d128:	430c      	orrs	r4, r1
 800d12a:	4322      	orrs	r2, r4
 800d12c:	0011      	movs	r1, r2
 800d12e:	2200      	movs	r2, #0
 800d130:	42b5      	cmp	r5, r6
 800d132:	d901      	bls.n	800d138 <__b2d+0x88>
 800d134:	3d04      	subs	r5, #4
 800d136:	682a      	ldr	r2, [r5, #0]
 800d138:	4664      	mov	r4, ip
 800d13a:	40a7      	lsls	r7, r4
 800d13c:	e7dd      	b.n	800d0fa <__b2d+0x4a>
 800d13e:	4322      	orrs	r2, r4
 800d140:	0011      	movs	r1, r2
 800d142:	e7dc      	b.n	800d0fe <__b2d+0x4e>
 800d144:	3ff00000 	.word	0x3ff00000

0800d148 <__d2b>:
 800d148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d14a:	2101      	movs	r1, #1
 800d14c:	0014      	movs	r4, r2
 800d14e:	001d      	movs	r5, r3
 800d150:	9f08      	ldr	r7, [sp, #32]
 800d152:	f7ff fc5b 	bl	800ca0c <_Balloc>
 800d156:	1e06      	subs	r6, r0, #0
 800d158:	d105      	bne.n	800d166 <__d2b+0x1e>
 800d15a:	0032      	movs	r2, r6
 800d15c:	4b24      	ldr	r3, [pc, #144]	; (800d1f0 <__d2b+0xa8>)
 800d15e:	4825      	ldr	r0, [pc, #148]	; (800d1f4 <__d2b+0xac>)
 800d160:	4925      	ldr	r1, [pc, #148]	; (800d1f8 <__d2b+0xb0>)
 800d162:	f002 ff17 	bl	800ff94 <__assert_func>
 800d166:	032b      	lsls	r3, r5, #12
 800d168:	006d      	lsls	r5, r5, #1
 800d16a:	0b1b      	lsrs	r3, r3, #12
 800d16c:	0d6d      	lsrs	r5, r5, #21
 800d16e:	d125      	bne.n	800d1bc <__d2b+0x74>
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	2c00      	cmp	r4, #0
 800d174:	d028      	beq.n	800d1c8 <__d2b+0x80>
 800d176:	4668      	mov	r0, sp
 800d178:	9400      	str	r4, [sp, #0]
 800d17a:	f7ff fd23 	bl	800cbc4 <__lo0bits>
 800d17e:	9b01      	ldr	r3, [sp, #4]
 800d180:	9900      	ldr	r1, [sp, #0]
 800d182:	2800      	cmp	r0, #0
 800d184:	d01e      	beq.n	800d1c4 <__d2b+0x7c>
 800d186:	2220      	movs	r2, #32
 800d188:	001c      	movs	r4, r3
 800d18a:	1a12      	subs	r2, r2, r0
 800d18c:	4094      	lsls	r4, r2
 800d18e:	0022      	movs	r2, r4
 800d190:	40c3      	lsrs	r3, r0
 800d192:	430a      	orrs	r2, r1
 800d194:	6172      	str	r2, [r6, #20]
 800d196:	9301      	str	r3, [sp, #4]
 800d198:	9c01      	ldr	r4, [sp, #4]
 800d19a:	61b4      	str	r4, [r6, #24]
 800d19c:	1e63      	subs	r3, r4, #1
 800d19e:	419c      	sbcs	r4, r3
 800d1a0:	3401      	adds	r4, #1
 800d1a2:	6134      	str	r4, [r6, #16]
 800d1a4:	2d00      	cmp	r5, #0
 800d1a6:	d017      	beq.n	800d1d8 <__d2b+0x90>
 800d1a8:	2435      	movs	r4, #53	; 0x35
 800d1aa:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <__d2b+0xb4>)
 800d1ac:	18ed      	adds	r5, r5, r3
 800d1ae:	182d      	adds	r5, r5, r0
 800d1b0:	603d      	str	r5, [r7, #0]
 800d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1b4:	1a24      	subs	r4, r4, r0
 800d1b6:	601c      	str	r4, [r3, #0]
 800d1b8:	0030      	movs	r0, r6
 800d1ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1bc:	2280      	movs	r2, #128	; 0x80
 800d1be:	0352      	lsls	r2, r2, #13
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	e7d5      	b.n	800d170 <__d2b+0x28>
 800d1c4:	6171      	str	r1, [r6, #20]
 800d1c6:	e7e7      	b.n	800d198 <__d2b+0x50>
 800d1c8:	a801      	add	r0, sp, #4
 800d1ca:	f7ff fcfb 	bl	800cbc4 <__lo0bits>
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	2401      	movs	r4, #1
 800d1d2:	6173      	str	r3, [r6, #20]
 800d1d4:	3020      	adds	r0, #32
 800d1d6:	e7e4      	b.n	800d1a2 <__d2b+0x5a>
 800d1d8:	4b09      	ldr	r3, [pc, #36]	; (800d200 <__d2b+0xb8>)
 800d1da:	18c0      	adds	r0, r0, r3
 800d1dc:	4b09      	ldr	r3, [pc, #36]	; (800d204 <__d2b+0xbc>)
 800d1de:	6038      	str	r0, [r7, #0]
 800d1e0:	18e3      	adds	r3, r4, r3
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	18f3      	adds	r3, r6, r3
 800d1e6:	6958      	ldr	r0, [r3, #20]
 800d1e8:	f7ff fcd2 	bl	800cb90 <__hi0bits>
 800d1ec:	0164      	lsls	r4, r4, #5
 800d1ee:	e7e0      	b.n	800d1b2 <__d2b+0x6a>
 800d1f0:	080146d1 	.word	0x080146d1
 800d1f4:	08014742 	.word	0x08014742
 800d1f8:	0000030f 	.word	0x0000030f
 800d1fc:	fffffbcd 	.word	0xfffffbcd
 800d200:	fffffbce 	.word	0xfffffbce
 800d204:	3fffffff 	.word	0x3fffffff

0800d208 <__ratio>:
 800d208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d20a:	b087      	sub	sp, #28
 800d20c:	000f      	movs	r7, r1
 800d20e:	a904      	add	r1, sp, #16
 800d210:	0006      	movs	r6, r0
 800d212:	f7ff ff4d 	bl	800d0b0 <__b2d>
 800d216:	9000      	str	r0, [sp, #0]
 800d218:	9101      	str	r1, [sp, #4]
 800d21a:	9c00      	ldr	r4, [sp, #0]
 800d21c:	9d01      	ldr	r5, [sp, #4]
 800d21e:	0038      	movs	r0, r7
 800d220:	a905      	add	r1, sp, #20
 800d222:	f7ff ff45 	bl	800d0b0 <__b2d>
 800d226:	9002      	str	r0, [sp, #8]
 800d228:	9103      	str	r1, [sp, #12]
 800d22a:	9a02      	ldr	r2, [sp, #8]
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	6930      	ldr	r0, [r6, #16]
 800d230:	6939      	ldr	r1, [r7, #16]
 800d232:	9e04      	ldr	r6, [sp, #16]
 800d234:	1a40      	subs	r0, r0, r1
 800d236:	9905      	ldr	r1, [sp, #20]
 800d238:	0140      	lsls	r0, r0, #5
 800d23a:	1a71      	subs	r1, r6, r1
 800d23c:	1841      	adds	r1, r0, r1
 800d23e:	0508      	lsls	r0, r1, #20
 800d240:	2900      	cmp	r1, #0
 800d242:	dd07      	ble.n	800d254 <__ratio+0x4c>
 800d244:	9901      	ldr	r1, [sp, #4]
 800d246:	1845      	adds	r5, r0, r1
 800d248:	0020      	movs	r0, r4
 800d24a:	0029      	movs	r1, r5
 800d24c:	f7f3 fe14 	bl	8000e78 <__aeabi_ddiv>
 800d250:	b007      	add	sp, #28
 800d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d254:	9903      	ldr	r1, [sp, #12]
 800d256:	1a0b      	subs	r3, r1, r0
 800d258:	e7f6      	b.n	800d248 <__ratio+0x40>

0800d25a <__copybits>:
 800d25a:	b570      	push	{r4, r5, r6, lr}
 800d25c:	0014      	movs	r4, r2
 800d25e:	0005      	movs	r5, r0
 800d260:	3901      	subs	r1, #1
 800d262:	6913      	ldr	r3, [r2, #16]
 800d264:	1149      	asrs	r1, r1, #5
 800d266:	3101      	adds	r1, #1
 800d268:	0089      	lsls	r1, r1, #2
 800d26a:	3414      	adds	r4, #20
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	1841      	adds	r1, r0, r1
 800d270:	18e3      	adds	r3, r4, r3
 800d272:	42a3      	cmp	r3, r4
 800d274:	d80d      	bhi.n	800d292 <__copybits+0x38>
 800d276:	0014      	movs	r4, r2
 800d278:	3411      	adds	r4, #17
 800d27a:	2500      	movs	r5, #0
 800d27c:	429c      	cmp	r4, r3
 800d27e:	d803      	bhi.n	800d288 <__copybits+0x2e>
 800d280:	1a9b      	subs	r3, r3, r2
 800d282:	3b11      	subs	r3, #17
 800d284:	089b      	lsrs	r3, r3, #2
 800d286:	009d      	lsls	r5, r3, #2
 800d288:	2300      	movs	r3, #0
 800d28a:	1940      	adds	r0, r0, r5
 800d28c:	4281      	cmp	r1, r0
 800d28e:	d803      	bhi.n	800d298 <__copybits+0x3e>
 800d290:	bd70      	pop	{r4, r5, r6, pc}
 800d292:	cc40      	ldmia	r4!, {r6}
 800d294:	c540      	stmia	r5!, {r6}
 800d296:	e7ec      	b.n	800d272 <__copybits+0x18>
 800d298:	c008      	stmia	r0!, {r3}
 800d29a:	e7f7      	b.n	800d28c <__copybits+0x32>

0800d29c <__any_on>:
 800d29c:	0002      	movs	r2, r0
 800d29e:	6900      	ldr	r0, [r0, #16]
 800d2a0:	b510      	push	{r4, lr}
 800d2a2:	3214      	adds	r2, #20
 800d2a4:	114b      	asrs	r3, r1, #5
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	db13      	blt.n	800d2d2 <__any_on+0x36>
 800d2aa:	dd0c      	ble.n	800d2c6 <__any_on+0x2a>
 800d2ac:	241f      	movs	r4, #31
 800d2ae:	0008      	movs	r0, r1
 800d2b0:	4020      	ands	r0, r4
 800d2b2:	4221      	tst	r1, r4
 800d2b4:	d007      	beq.n	800d2c6 <__any_on+0x2a>
 800d2b6:	0099      	lsls	r1, r3, #2
 800d2b8:	588c      	ldr	r4, [r1, r2]
 800d2ba:	0021      	movs	r1, r4
 800d2bc:	40c1      	lsrs	r1, r0
 800d2be:	4081      	lsls	r1, r0
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	428c      	cmp	r4, r1
 800d2c4:	d104      	bne.n	800d2d0 <__any_on+0x34>
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	18d3      	adds	r3, r2, r3
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d803      	bhi.n	800d2d6 <__any_on+0x3a>
 800d2ce:	2000      	movs	r0, #0
 800d2d0:	bd10      	pop	{r4, pc}
 800d2d2:	0003      	movs	r3, r0
 800d2d4:	e7f7      	b.n	800d2c6 <__any_on+0x2a>
 800d2d6:	3b04      	subs	r3, #4
 800d2d8:	6819      	ldr	r1, [r3, #0]
 800d2da:	2900      	cmp	r1, #0
 800d2dc:	d0f5      	beq.n	800d2ca <__any_on+0x2e>
 800d2de:	2001      	movs	r0, #1
 800d2e0:	e7f6      	b.n	800d2d0 <__any_on+0x34>

0800d2e2 <__ascii_wctomb>:
 800d2e2:	0003      	movs	r3, r0
 800d2e4:	1e08      	subs	r0, r1, #0
 800d2e6:	d005      	beq.n	800d2f4 <__ascii_wctomb+0x12>
 800d2e8:	2aff      	cmp	r2, #255	; 0xff
 800d2ea:	d904      	bls.n	800d2f6 <__ascii_wctomb+0x14>
 800d2ec:	228a      	movs	r2, #138	; 0x8a
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	4240      	negs	r0, r0
 800d2f4:	4770      	bx	lr
 800d2f6:	2001      	movs	r0, #1
 800d2f8:	700a      	strb	r2, [r1, #0]
 800d2fa:	e7fb      	b.n	800d2f4 <__ascii_wctomb+0x12>

0800d2fc <_svfprintf_r>:
 800d2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fe:	b0d9      	sub	sp, #356	; 0x164
 800d300:	001c      	movs	r4, r3
 800d302:	910b      	str	r1, [sp, #44]	; 0x2c
 800d304:	9208      	str	r2, [sp, #32]
 800d306:	900a      	str	r0, [sp, #40]	; 0x28
 800d308:	f002 fdae 	bl	800fe68 <_localeconv_r>
 800d30c:	6803      	ldr	r3, [r0, #0]
 800d30e:	0018      	movs	r0, r3
 800d310:	931c      	str	r3, [sp, #112]	; 0x70
 800d312:	f7f2 fef7 	bl	8000104 <strlen>
 800d316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d318:	9016      	str	r0, [sp, #88]	; 0x58
 800d31a:	899b      	ldrh	r3, [r3, #12]
 800d31c:	061b      	lsls	r3, r3, #24
 800d31e:	d517      	bpl.n	800d350 <_svfprintf_r+0x54>
 800d320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d113      	bne.n	800d350 <_svfprintf_r+0x54>
 800d328:	2140      	movs	r1, #64	; 0x40
 800d32a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d32c:	f7fd face 	bl	800a8cc <_malloc_r>
 800d330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d332:	6018      	str	r0, [r3, #0]
 800d334:	6118      	str	r0, [r3, #16]
 800d336:	2800      	cmp	r0, #0
 800d338:	d107      	bne.n	800d34a <_svfprintf_r+0x4e>
 800d33a:	230c      	movs	r3, #12
 800d33c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	3b0d      	subs	r3, #13
 800d342:	9317      	str	r3, [sp, #92]	; 0x5c
 800d344:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d346:	b059      	add	sp, #356	; 0x164
 800d348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d34a:	2340      	movs	r3, #64	; 0x40
 800d34c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d34e:	6153      	str	r3, [r2, #20]
 800d350:	2300      	movs	r3, #0
 800d352:	2200      	movs	r2, #0
 800d354:	932e      	str	r3, [sp, #184]	; 0xb8
 800d356:	932d      	str	r3, [sp, #180]	; 0xb4
 800d358:	930e      	str	r3, [sp, #56]	; 0x38
 800d35a:	2300      	movs	r3, #0
 800d35c:	9214      	str	r2, [sp, #80]	; 0x50
 800d35e:	9315      	str	r3, [sp, #84]	; 0x54
 800d360:	2300      	movs	r3, #0
 800d362:	af2f      	add	r7, sp, #188	; 0xbc
 800d364:	972c      	str	r7, [sp, #176]	; 0xb0
 800d366:	931f      	str	r3, [sp, #124]	; 0x7c
 800d368:	931e      	str	r3, [sp, #120]	; 0x78
 800d36a:	9312      	str	r3, [sp, #72]	; 0x48
 800d36c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d36e:	931d      	str	r3, [sp, #116]	; 0x74
 800d370:	9317      	str	r3, [sp, #92]	; 0x5c
 800d372:	9d08      	ldr	r5, [sp, #32]
 800d374:	782b      	ldrb	r3, [r5, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <_svfprintf_r+0x84>
 800d37a:	2b25      	cmp	r3, #37	; 0x25
 800d37c:	d000      	beq.n	800d380 <_svfprintf_r+0x84>
 800d37e:	e091      	b.n	800d4a4 <_svfprintf_r+0x1a8>
 800d380:	9b08      	ldr	r3, [sp, #32]
 800d382:	1aee      	subs	r6, r5, r3
 800d384:	429d      	cmp	r5, r3
 800d386:	d016      	beq.n	800d3b6 <_svfprintf_r+0xba>
 800d388:	603b      	str	r3, [r7, #0]
 800d38a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800d38c:	607e      	str	r6, [r7, #4]
 800d38e:	199b      	adds	r3, r3, r6
 800d390:	932e      	str	r3, [sp, #184]	; 0xb8
 800d392:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800d394:	3708      	adds	r7, #8
 800d396:	3301      	adds	r3, #1
 800d398:	932d      	str	r3, [sp, #180]	; 0xb4
 800d39a:	2b07      	cmp	r3, #7
 800d39c:	dd08      	ble.n	800d3b0 <_svfprintf_r+0xb4>
 800d39e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d3a2:	aa2c      	add	r2, sp, #176	; 0xb0
 800d3a4:	f004 f83a 	bl	801141c <__ssprint_r>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d000      	beq.n	800d3ae <_svfprintf_r+0xb2>
 800d3ac:	e1cf      	b.n	800d74e <_svfprintf_r+0x452>
 800d3ae:	af2f      	add	r7, sp, #188	; 0xbc
 800d3b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3b2:	199b      	adds	r3, r3, r6
 800d3b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3b6:	782b      	ldrb	r3, [r5, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <_svfprintf_r+0xc4>
 800d3bc:	f001 f99e 	bl	800e6fc <_svfprintf_r+0x1400>
 800d3c0:	221b      	movs	r2, #27
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	a91e      	add	r1, sp, #120	; 0x78
 800d3c6:	1852      	adds	r2, r2, r1
 800d3c8:	7013      	strb	r3, [r2, #0]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	001e      	movs	r6, r3
 800d3ce:	4252      	negs	r2, r2
 800d3d0:	3501      	adds	r5, #1
 800d3d2:	9209      	str	r2, [sp, #36]	; 0x24
 800d3d4:	9318      	str	r3, [sp, #96]	; 0x60
 800d3d6:	1c6b      	adds	r3, r5, #1
 800d3d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3da:	782b      	ldrb	r3, [r5, #0]
 800d3dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3de:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800d3e0:	3820      	subs	r0, #32
 800d3e2:	285a      	cmp	r0, #90	; 0x5a
 800d3e4:	d901      	bls.n	800d3ea <_svfprintf_r+0xee>
 800d3e6:	f000 fe20 	bl	800e02a <_svfprintf_r+0xd2e>
 800d3ea:	f7f2 fe9d 	bl	8000128 <__gnu_thumb1_case_uhi>
 800d3ee:	0078      	.short	0x0078
 800d3f0:	061e061e 	.word	0x061e061e
 800d3f4:	061e0082 	.word	0x061e0082
 800d3f8:	061e061e 	.word	0x061e061e
 800d3fc:	061e005d 	.word	0x061e005d
 800d400:	0084061e 	.word	0x0084061e
 800d404:	061e008c 	.word	0x061e008c
 800d408:	0091008a 	.word	0x0091008a
 800d40c:	00b2061e 	.word	0x00b2061e
 800d410:	00b400b4 	.word	0x00b400b4
 800d414:	00b400b4 	.word	0x00b400b4
 800d418:	00b400b4 	.word	0x00b400b4
 800d41c:	00b400b4 	.word	0x00b400b4
 800d420:	061e00b4 	.word	0x061e00b4
 800d424:	061e061e 	.word	0x061e061e
 800d428:	061e061e 	.word	0x061e061e
 800d42c:	061e061e 	.word	0x061e061e
 800d430:	061e013b 	.word	0x061e013b
 800d434:	00f400e0 	.word	0x00f400e0
 800d438:	013b013b 	.word	0x013b013b
 800d43c:	061e013b 	.word	0x061e013b
 800d440:	061e061e 	.word	0x061e061e
 800d444:	00c7061e 	.word	0x00c7061e
 800d448:	061e061e 	.word	0x061e061e
 800d44c:	061e04c7 	.word	0x061e04c7
 800d450:	061e061e 	.word	0x061e061e
 800d454:	061e050a 	.word	0x061e050a
 800d458:	061e052a 	.word	0x061e052a
 800d45c:	055c061e 	.word	0x055c061e
 800d460:	061e061e 	.word	0x061e061e
 800d464:	061e061e 	.word	0x061e061e
 800d468:	061e061e 	.word	0x061e061e
 800d46c:	061e061e 	.word	0x061e061e
 800d470:	061e013b 	.word	0x061e013b
 800d474:	00f600e0 	.word	0x00f600e0
 800d478:	013b013b 	.word	0x013b013b
 800d47c:	00c9013b 	.word	0x00c9013b
 800d480:	00dc00f6 	.word	0x00dc00f6
 800d484:	00d5061e 	.word	0x00d5061e
 800d488:	04a7061e 	.word	0x04a7061e
 800d48c:	04fa04c9 	.word	0x04fa04c9
 800d490:	061e00dc 	.word	0x061e00dc
 800d494:	0080050a 	.word	0x0080050a
 800d498:	061e052c 	.word	0x061e052c
 800d49c:	057c061e 	.word	0x057c061e
 800d4a0:	0080061e 	.word	0x0080061e
 800d4a4:	3501      	adds	r5, #1
 800d4a6:	e765      	b.n	800d374 <_svfprintf_r+0x78>
 800d4a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d4aa:	f002 fcdd 	bl	800fe68 <_localeconv_r>
 800d4ae:	6843      	ldr	r3, [r0, #4]
 800d4b0:	0018      	movs	r0, r3
 800d4b2:	931d      	str	r3, [sp, #116]	; 0x74
 800d4b4:	f7f2 fe26 	bl	8000104 <strlen>
 800d4b8:	901b      	str	r0, [sp, #108]	; 0x6c
 800d4ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d4bc:	f002 fcd4 	bl	800fe68 <_localeconv_r>
 800d4c0:	6883      	ldr	r3, [r0, #8]
 800d4c2:	9312      	str	r3, [sp, #72]	; 0x48
 800d4c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d011      	beq.n	800d4ee <_svfprintf_r+0x1f2>
 800d4ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d00e      	beq.n	800d4ee <_svfprintf_r+0x1f2>
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00b      	beq.n	800d4ee <_svfprintf_r+0x1f2>
 800d4d6:	2380      	movs	r3, #128	; 0x80
 800d4d8:	00db      	lsls	r3, r3, #3
 800d4da:	431e      	orrs	r6, r3
 800d4dc:	e007      	b.n	800d4ee <_svfprintf_r+0x1f2>
 800d4de:	231b      	movs	r3, #27
 800d4e0:	aa1e      	add	r2, sp, #120	; 0x78
 800d4e2:	189b      	adds	r3, r3, r2
 800d4e4:	781a      	ldrb	r2, [r3, #0]
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	d101      	bne.n	800d4ee <_svfprintf_r+0x1f2>
 800d4ea:	3220      	adds	r2, #32
 800d4ec:	701a      	strb	r2, [r3, #0]
 800d4ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d4f0:	e771      	b.n	800d3d6 <_svfprintf_r+0xda>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e7f1      	b.n	800d4da <_svfprintf_r+0x1de>
 800d4f6:	cc08      	ldmia	r4!, {r3}
 800d4f8:	9318      	str	r3, [sp, #96]	; 0x60
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	daf7      	bge.n	800d4ee <_svfprintf_r+0x1f2>
 800d4fe:	425b      	negs	r3, r3
 800d500:	9318      	str	r3, [sp, #96]	; 0x60
 800d502:	2304      	movs	r3, #4
 800d504:	e7e9      	b.n	800d4da <_svfprintf_r+0x1de>
 800d506:	231b      	movs	r3, #27
 800d508:	aa1e      	add	r2, sp, #120	; 0x78
 800d50a:	189b      	adds	r3, r3, r2
 800d50c:	222b      	movs	r2, #43	; 0x2b
 800d50e:	e7ed      	b.n	800d4ec <_svfprintf_r+0x1f0>
 800d510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d514:	7812      	ldrb	r2, [r2, #0]
 800d516:	3301      	adds	r3, #1
 800d518:	920f      	str	r2, [sp, #60]	; 0x3c
 800d51a:	2a2a      	cmp	r2, #42	; 0x2a
 800d51c:	d010      	beq.n	800d540 <_svfprintf_r+0x244>
 800d51e:	2200      	movs	r2, #0
 800d520:	9209      	str	r2, [sp, #36]	; 0x24
 800d522:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d524:	9313      	str	r3, [sp, #76]	; 0x4c
 800d526:	3a30      	subs	r2, #48	; 0x30
 800d528:	2a09      	cmp	r2, #9
 800d52a:	d900      	bls.n	800d52e <_svfprintf_r+0x232>
 800d52c:	e757      	b.n	800d3de <_svfprintf_r+0xe2>
 800d52e:	200a      	movs	r0, #10
 800d530:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d532:	4341      	muls	r1, r0
 800d534:	188a      	adds	r2, r1, r2
 800d536:	9209      	str	r2, [sp, #36]	; 0x24
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	3301      	adds	r3, #1
 800d53c:	920f      	str	r2, [sp, #60]	; 0x3c
 800d53e:	e7f0      	b.n	800d522 <_svfprintf_r+0x226>
 800d540:	cc04      	ldmia	r4!, {r2}
 800d542:	9209      	str	r2, [sp, #36]	; 0x24
 800d544:	2a00      	cmp	r2, #0
 800d546:	da02      	bge.n	800d54e <_svfprintf_r+0x252>
 800d548:	2201      	movs	r2, #1
 800d54a:	4252      	negs	r2, r2
 800d54c:	9209      	str	r2, [sp, #36]	; 0x24
 800d54e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d550:	e7cd      	b.n	800d4ee <_svfprintf_r+0x1f2>
 800d552:	2380      	movs	r3, #128	; 0x80
 800d554:	e7c1      	b.n	800d4da <_svfprintf_r+0x1de>
 800d556:	2200      	movs	r2, #0
 800d558:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d55a:	9218      	str	r2, [sp, #96]	; 0x60
 800d55c:	210a      	movs	r1, #10
 800d55e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d560:	434a      	muls	r2, r1
 800d562:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d564:	3930      	subs	r1, #48	; 0x30
 800d566:	188a      	adds	r2, r1, r2
 800d568:	9218      	str	r2, [sp, #96]	; 0x60
 800d56a:	001a      	movs	r2, r3
 800d56c:	7812      	ldrb	r2, [r2, #0]
 800d56e:	3301      	adds	r3, #1
 800d570:	920f      	str	r2, [sp, #60]	; 0x3c
 800d572:	3a30      	subs	r2, #48	; 0x30
 800d574:	9313      	str	r3, [sp, #76]	; 0x4c
 800d576:	2a09      	cmp	r2, #9
 800d578:	d9f0      	bls.n	800d55c <_svfprintf_r+0x260>
 800d57a:	e730      	b.n	800d3de <_svfprintf_r+0xe2>
 800d57c:	2308      	movs	r3, #8
 800d57e:	e7ac      	b.n	800d4da <_svfprintf_r+0x1de>
 800d580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	2b68      	cmp	r3, #104	; 0x68
 800d586:	d105      	bne.n	800d594 <_svfprintf_r+0x298>
 800d588:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d58a:	3301      	adds	r3, #1
 800d58c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d58e:	2380      	movs	r3, #128	; 0x80
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	e7a2      	b.n	800d4da <_svfprintf_r+0x1de>
 800d594:	2340      	movs	r3, #64	; 0x40
 800d596:	e7a0      	b.n	800d4da <_svfprintf_r+0x1de>
 800d598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	2b6c      	cmp	r3, #108	; 0x6c
 800d59e:	d104      	bne.n	800d5aa <_svfprintf_r+0x2ae>
 800d5a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d5a6:	2320      	movs	r3, #32
 800d5a8:	e797      	b.n	800d4da <_svfprintf_r+0x1de>
 800d5aa:	2310      	movs	r3, #16
 800d5ac:	e795      	b.n	800d4da <_svfprintf_r+0x1de>
 800d5ae:	0021      	movs	r1, r4
 800d5b0:	c904      	ldmia	r1!, {r2}
 800d5b2:	ab3f      	add	r3, sp, #252	; 0xfc
 800d5b4:	910d      	str	r1, [sp, #52]	; 0x34
 800d5b6:	211b      	movs	r1, #27
 800d5b8:	701a      	strb	r2, [r3, #0]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	a81e      	add	r0, sp, #120	; 0x78
 800d5be:	1809      	adds	r1, r1, r0
 800d5c0:	700a      	strb	r2, [r1, #0]
 800d5c2:	920c      	str	r2, [sp, #48]	; 0x30
 800d5c4:	3201      	adds	r2, #1
 800d5c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	9308      	str	r3, [sp, #32]
 800d5cc:	0015      	movs	r5, r2
 800d5ce:	9219      	str	r2, [sp, #100]	; 0x64
 800d5d0:	9210      	str	r2, [sp, #64]	; 0x40
 800d5d2:	9211      	str	r2, [sp, #68]	; 0x44
 800d5d4:	e1f1      	b.n	800d9ba <_svfprintf_r+0x6be>
 800d5d6:	2310      	movs	r3, #16
 800d5d8:	431e      	orrs	r6, r3
 800d5da:	06b3      	lsls	r3, r6, #26
 800d5dc:	d531      	bpl.n	800d642 <_svfprintf_r+0x346>
 800d5de:	2307      	movs	r3, #7
 800d5e0:	3407      	adds	r4, #7
 800d5e2:	439c      	bics	r4, r3
 800d5e4:	0022      	movs	r2, r4
 800d5e6:	ca18      	ldmia	r2!, {r3, r4}
 800d5e8:	9306      	str	r3, [sp, #24]
 800d5ea:	9407      	str	r4, [sp, #28]
 800d5ec:	920d      	str	r2, [sp, #52]	; 0x34
 800d5ee:	9a07      	ldr	r2, [sp, #28]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	2a00      	cmp	r2, #0
 800d5f4:	da0b      	bge.n	800d60e <_svfprintf_r+0x312>
 800d5f6:	9c06      	ldr	r4, [sp, #24]
 800d5f8:	9d07      	ldr	r5, [sp, #28]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	4261      	negs	r1, r4
 800d5fe:	41aa      	sbcs	r2, r5
 800d600:	9106      	str	r1, [sp, #24]
 800d602:	9207      	str	r2, [sp, #28]
 800d604:	221b      	movs	r2, #27
 800d606:	a91e      	add	r1, sp, #120	; 0x78
 800d608:	1852      	adds	r2, r2, r1
 800d60a:	212d      	movs	r1, #45	; 0x2d
 800d60c:	7011      	strb	r1, [r2, #0]
 800d60e:	9907      	ldr	r1, [sp, #28]
 800d610:	9a06      	ldr	r2, [sp, #24]
 800d612:	430a      	orrs	r2, r1
 800d614:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d616:	3101      	adds	r1, #1
 800d618:	d101      	bne.n	800d61e <_svfprintf_r+0x322>
 800d61a:	f001 f87b 	bl	800e714 <_svfprintf_r+0x1418>
 800d61e:	2180      	movs	r1, #128	; 0x80
 800d620:	0034      	movs	r4, r6
 800d622:	438c      	bics	r4, r1
 800d624:	2a00      	cmp	r2, #0
 800d626:	d001      	beq.n	800d62c <_svfprintf_r+0x330>
 800d628:	f001 f879 	bl	800e71e <_svfprintf_r+0x1422>
 800d62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d62e:	2a00      	cmp	r2, #0
 800d630:	d101      	bne.n	800d636 <_svfprintf_r+0x33a>
 800d632:	f000 fcef 	bl	800e014 <_svfprintf_r+0xd18>
 800d636:	2b01      	cmp	r3, #1
 800d638:	d001      	beq.n	800d63e <_svfprintf_r+0x342>
 800d63a:	f001 f874 	bl	800e726 <_svfprintf_r+0x142a>
 800d63e:	f000 fc79 	bl	800df34 <_svfprintf_r+0xc38>
 800d642:	0022      	movs	r2, r4
 800d644:	ca08      	ldmia	r2!, {r3}
 800d646:	920d      	str	r2, [sp, #52]	; 0x34
 800d648:	06f2      	lsls	r2, r6, #27
 800d64a:	d503      	bpl.n	800d654 <_svfprintf_r+0x358>
 800d64c:	9306      	str	r3, [sp, #24]
 800d64e:	17db      	asrs	r3, r3, #31
 800d650:	9307      	str	r3, [sp, #28]
 800d652:	e7cc      	b.n	800d5ee <_svfprintf_r+0x2f2>
 800d654:	0672      	lsls	r2, r6, #25
 800d656:	d501      	bpl.n	800d65c <_svfprintf_r+0x360>
 800d658:	b21b      	sxth	r3, r3
 800d65a:	e7f7      	b.n	800d64c <_svfprintf_r+0x350>
 800d65c:	05b2      	lsls	r2, r6, #22
 800d65e:	d5f5      	bpl.n	800d64c <_svfprintf_r+0x350>
 800d660:	b25b      	sxtb	r3, r3
 800d662:	e7f3      	b.n	800d64c <_svfprintf_r+0x350>
 800d664:	2307      	movs	r3, #7
 800d666:	3407      	adds	r4, #7
 800d668:	439c      	bics	r4, r3
 800d66a:	0022      	movs	r2, r4
 800d66c:	ca18      	ldmia	r2!, {r3, r4}
 800d66e:	920d      	str	r2, [sp, #52]	; 0x34
 800d670:	2201      	movs	r2, #1
 800d672:	9314      	str	r3, [sp, #80]	; 0x50
 800d674:	9415      	str	r4, [sp, #84]	; 0x54
 800d676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d678:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d67a:	005c      	lsls	r4, r3, #1
 800d67c:	0864      	lsrs	r4, r4, #1
 800d67e:	0028      	movs	r0, r5
 800d680:	0021      	movs	r1, r4
 800d682:	4b3e      	ldr	r3, [pc, #248]	; (800d77c <_svfprintf_r+0x480>)
 800d684:	4252      	negs	r2, r2
 800d686:	f7f4 fe35 	bl	80022f4 <__aeabi_dcmpun>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d126      	bne.n	800d6dc <_svfprintf_r+0x3e0>
 800d68e:	2201      	movs	r2, #1
 800d690:	0028      	movs	r0, r5
 800d692:	0021      	movs	r1, r4
 800d694:	4b39      	ldr	r3, [pc, #228]	; (800d77c <_svfprintf_r+0x480>)
 800d696:	4252      	negs	r2, r2
 800d698:	f7f2 fee6 	bl	8000468 <__aeabi_dcmple>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d11d      	bne.n	800d6dc <_svfprintf_r+0x3e0>
 800d6a0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800d6a2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f7f2 fed4 	bl	8000454 <__aeabi_dcmplt>
 800d6ac:	2800      	cmp	r0, #0
 800d6ae:	d004      	beq.n	800d6ba <_svfprintf_r+0x3be>
 800d6b0:	231b      	movs	r3, #27
 800d6b2:	aa1e      	add	r2, sp, #120	; 0x78
 800d6b4:	189b      	adds	r3, r3, r2
 800d6b6:	222d      	movs	r2, #45	; 0x2d
 800d6b8:	701a      	strb	r2, [r3, #0]
 800d6ba:	4b31      	ldr	r3, [pc, #196]	; (800d780 <_svfprintf_r+0x484>)
 800d6bc:	9308      	str	r3, [sp, #32]
 800d6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6c0:	2b47      	cmp	r3, #71	; 0x47
 800d6c2:	dd01      	ble.n	800d6c8 <_svfprintf_r+0x3cc>
 800d6c4:	4b2f      	ldr	r3, [pc, #188]	; (800d784 <_svfprintf_r+0x488>)
 800d6c6:	9308      	str	r3, [sp, #32]
 800d6c8:	2380      	movs	r3, #128	; 0x80
 800d6ca:	439e      	bics	r6, r3
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	930c      	str	r3, [sp, #48]	; 0x30
 800d6d0:	3303      	adds	r3, #3
 800d6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	9319      	str	r3, [sp, #100]	; 0x64
 800d6d8:	f000 fc78 	bl	800dfcc <_svfprintf_r+0xcd0>
 800d6dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6e0:	0010      	movs	r0, r2
 800d6e2:	0019      	movs	r1, r3
 800d6e4:	f7f4 fe06 	bl	80022f4 <__aeabi_dcmpun>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d00e      	beq.n	800d70a <_svfprintf_r+0x40e>
 800d6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	da04      	bge.n	800d6fc <_svfprintf_r+0x400>
 800d6f2:	231b      	movs	r3, #27
 800d6f4:	aa1e      	add	r2, sp, #120	; 0x78
 800d6f6:	189b      	adds	r3, r3, r2
 800d6f8:	222d      	movs	r2, #45	; 0x2d
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	4b22      	ldr	r3, [pc, #136]	; (800d788 <_svfprintf_r+0x48c>)
 800d6fe:	9308      	str	r3, [sp, #32]
 800d700:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d702:	2b47      	cmp	r3, #71	; 0x47
 800d704:	dde0      	ble.n	800d6c8 <_svfprintf_r+0x3cc>
 800d706:	4b21      	ldr	r3, [pc, #132]	; (800d78c <_svfprintf_r+0x490>)
 800d708:	e7dd      	b.n	800d6c6 <_svfprintf_r+0x3ca>
 800d70a:	2320      	movs	r3, #32
 800d70c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d70e:	439a      	bics	r2, r3
 800d710:	9210      	str	r2, [sp, #64]	; 0x40
 800d712:	2a41      	cmp	r2, #65	; 0x41
 800d714:	d123      	bne.n	800d75e <_svfprintf_r+0x462>
 800d716:	2230      	movs	r2, #48	; 0x30
 800d718:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d71a:	ab25      	add	r3, sp, #148	; 0x94
 800d71c:	701a      	strb	r2, [r3, #0]
 800d71e:	3248      	adds	r2, #72	; 0x48
 800d720:	2961      	cmp	r1, #97	; 0x61
 800d722:	d000      	beq.n	800d726 <_svfprintf_r+0x42a>
 800d724:	3a20      	subs	r2, #32
 800d726:	705a      	strb	r2, [r3, #1]
 800d728:	2302      	movs	r3, #2
 800d72a:	431e      	orrs	r6, r3
 800d72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d72e:	2b63      	cmp	r3, #99	; 0x63
 800d730:	dd2e      	ble.n	800d790 <_svfprintf_r+0x494>
 800d732:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d734:	1c59      	adds	r1, r3, #1
 800d736:	f7fd f8c9 	bl	800a8cc <_malloc_r>
 800d73a:	9008      	str	r0, [sp, #32]
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d000      	beq.n	800d742 <_svfprintf_r+0x446>
 800d740:	e216      	b.n	800db70 <_svfprintf_r+0x874>
 800d742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d744:	899a      	ldrh	r2, [r3, #12]
 800d746:	2340      	movs	r3, #64	; 0x40
 800d748:	4313      	orrs	r3, r2
 800d74a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d74c:	8193      	strh	r3, [r2, #12]
 800d74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d750:	899b      	ldrh	r3, [r3, #12]
 800d752:	065b      	lsls	r3, r3, #25
 800d754:	d400      	bmi.n	800d758 <_svfprintf_r+0x45c>
 800d756:	e5f5      	b.n	800d344 <_svfprintf_r+0x48>
 800d758:	2301      	movs	r3, #1
 800d75a:	425b      	negs	r3, r3
 800d75c:	e5f1      	b.n	800d342 <_svfprintf_r+0x46>
 800d75e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d760:	900c      	str	r0, [sp, #48]	; 0x30
 800d762:	3301      	adds	r3, #1
 800d764:	d100      	bne.n	800d768 <_svfprintf_r+0x46c>
 800d766:	e206      	b.n	800db76 <_svfprintf_r+0x87a>
 800d768:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d76a:	2b47      	cmp	r3, #71	; 0x47
 800d76c:	d114      	bne.n	800d798 <_svfprintf_r+0x49c>
 800d76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d770:	2b00      	cmp	r3, #0
 800d772:	d111      	bne.n	800d798 <_svfprintf_r+0x49c>
 800d774:	3301      	adds	r3, #1
 800d776:	9309      	str	r3, [sp, #36]	; 0x24
 800d778:	e00e      	b.n	800d798 <_svfprintf_r+0x49c>
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	7fefffff 	.word	0x7fefffff
 800d780:	0801489c 	.word	0x0801489c
 800d784:	080148a0 	.word	0x080148a0
 800d788:	080148a4 	.word	0x080148a4
 800d78c:	080148a8 	.word	0x080148a8
 800d790:	2300      	movs	r3, #0
 800d792:	930c      	str	r3, [sp, #48]	; 0x30
 800d794:	ab3f      	add	r3, sp, #252	; 0xfc
 800d796:	9308      	str	r3, [sp, #32]
 800d798:	2380      	movs	r3, #128	; 0x80
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	4333      	orrs	r3, r6
 800d79e:	931a      	str	r3, [sp, #104]	; 0x68
 800d7a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	db00      	blt.n	800d7aa <_svfprintf_r+0x4ae>
 800d7a8:	e1e7      	b.n	800db7a <_svfprintf_r+0x87e>
 800d7aa:	2280      	movs	r2, #128	; 0x80
 800d7ac:	0612      	lsls	r2, r2, #24
 800d7ae:	4694      	mov	ip, r2
 800d7b0:	4463      	add	r3, ip
 800d7b2:	930e      	str	r3, [sp, #56]	; 0x38
 800d7b4:	232d      	movs	r3, #45	; 0x2d
 800d7b6:	9322      	str	r3, [sp, #136]	; 0x88
 800d7b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d7ba:	2b41      	cmp	r3, #65	; 0x41
 800d7bc:	d000      	beq.n	800d7c0 <_svfprintf_r+0x4c4>
 800d7be:	e1f5      	b.n	800dbac <_svfprintf_r+0x8b0>
 800d7c0:	0028      	movs	r0, r5
 800d7c2:	aa26      	add	r2, sp, #152	; 0x98
 800d7c4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d7c6:	f002 fb73 	bl	800feb0 <frexp>
 800d7ca:	23ff      	movs	r3, #255	; 0xff
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	059b      	lsls	r3, r3, #22
 800d7d0:	f7f3 ff4c 	bl	800166c <__aeabi_dmul>
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	0004      	movs	r4, r0
 800d7da:	000d      	movs	r5, r1
 800d7dc:	f7f2 fe34 	bl	8000448 <__aeabi_dcmpeq>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d001      	beq.n	800d7e8 <_svfprintf_r+0x4ec>
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	9326      	str	r3, [sp, #152]	; 0x98
 800d7e8:	4bda      	ldr	r3, [pc, #872]	; (800db54 <_svfprintf_r+0x858>)
 800d7ea:	9319      	str	r3, [sp, #100]	; 0x64
 800d7ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7ee:	2b61      	cmp	r3, #97	; 0x61
 800d7f0:	d001      	beq.n	800d7f6 <_svfprintf_r+0x4fa>
 800d7f2:	4bd9      	ldr	r3, [pc, #868]	; (800db58 <_svfprintf_r+0x85c>)
 800d7f4:	9319      	str	r3, [sp, #100]	; 0x64
 800d7f6:	9b08      	ldr	r3, [sp, #32]
 800d7f8:	930e      	str	r3, [sp, #56]	; 0x38
 800d7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	9311      	str	r3, [sp, #68]	; 0x44
 800d800:	2200      	movs	r2, #0
 800d802:	4bd6      	ldr	r3, [pc, #856]	; (800db5c <_svfprintf_r+0x860>)
 800d804:	0020      	movs	r0, r4
 800d806:	0029      	movs	r1, r5
 800d808:	f7f3 ff30 	bl	800166c <__aeabi_dmul>
 800d80c:	000d      	movs	r5, r1
 800d80e:	0004      	movs	r4, r0
 800d810:	f7f4 fd8e 	bl	8002330 <__aeabi_d2iz>
 800d814:	9021      	str	r0, [sp, #132]	; 0x84
 800d816:	f7f4 fdc1 	bl	800239c <__aeabi_i2d>
 800d81a:	0002      	movs	r2, r0
 800d81c:	000b      	movs	r3, r1
 800d81e:	0020      	movs	r0, r4
 800d820:	0029      	movs	r1, r5
 800d822:	f7f4 f9e5 	bl	8001bf0 <__aeabi_dsub>
 800d826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d828:	000d      	movs	r5, r1
 800d82a:	001a      	movs	r2, r3
 800d82c:	3201      	adds	r2, #1
 800d82e:	9921      	ldr	r1, [sp, #132]	; 0x84
 800d830:	920e      	str	r2, [sp, #56]	; 0x38
 800d832:	9223      	str	r2, [sp, #140]	; 0x8c
 800d834:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d836:	0004      	movs	r4, r0
 800d838:	5c52      	ldrb	r2, [r2, r1]
 800d83a:	701a      	strb	r2, [r3, #0]
 800d83c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d83e:	9320      	str	r3, [sp, #128]	; 0x80
 800d840:	3301      	adds	r3, #1
 800d842:	d00a      	beq.n	800d85a <_svfprintf_r+0x55e>
 800d844:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d846:	2200      	movs	r2, #0
 800d848:	3b01      	subs	r3, #1
 800d84a:	9311      	str	r3, [sp, #68]	; 0x44
 800d84c:	0020      	movs	r0, r4
 800d84e:	2300      	movs	r3, #0
 800d850:	0029      	movs	r1, r5
 800d852:	f7f2 fdf9 	bl	8000448 <__aeabi_dcmpeq>
 800d856:	2800      	cmp	r0, #0
 800d858:	d0d2      	beq.n	800d800 <_svfprintf_r+0x504>
 800d85a:	2200      	movs	r2, #0
 800d85c:	0020      	movs	r0, r4
 800d85e:	0029      	movs	r1, r5
 800d860:	4bbf      	ldr	r3, [pc, #764]	; (800db60 <_svfprintf_r+0x864>)
 800d862:	f7f2 fe0b 	bl	800047c <__aeabi_dcmpgt>
 800d866:	2800      	cmp	r0, #0
 800d868:	d10c      	bne.n	800d884 <_svfprintf_r+0x588>
 800d86a:	2200      	movs	r2, #0
 800d86c:	0020      	movs	r0, r4
 800d86e:	0029      	movs	r1, r5
 800d870:	4bbb      	ldr	r3, [pc, #748]	; (800db60 <_svfprintf_r+0x864>)
 800d872:	f7f2 fde9 	bl	8000448 <__aeabi_dcmpeq>
 800d876:	2800      	cmp	r0, #0
 800d878:	d100      	bne.n	800d87c <_svfprintf_r+0x580>
 800d87a:	e191      	b.n	800dba0 <_svfprintf_r+0x8a4>
 800d87c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d87e:	07db      	lsls	r3, r3, #31
 800d880:	d400      	bmi.n	800d884 <_svfprintf_r+0x588>
 800d882:	e18d      	b.n	800dba0 <_svfprintf_r+0x8a4>
 800d884:	2030      	movs	r0, #48	; 0x30
 800d886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d888:	932a      	str	r3, [sp, #168]	; 0xa8
 800d88a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d88c:	7bdb      	ldrb	r3, [r3, #15]
 800d88e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800d890:	3a01      	subs	r2, #1
 800d892:	922a      	str	r2, [sp, #168]	; 0xa8
 800d894:	7811      	ldrb	r1, [r2, #0]
 800d896:	4299      	cmp	r1, r3
 800d898:	d100      	bne.n	800d89c <_svfprintf_r+0x5a0>
 800d89a:	e171      	b.n	800db80 <_svfprintf_r+0x884>
 800d89c:	1c4b      	adds	r3, r1, #1
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2939      	cmp	r1, #57	; 0x39
 800d8a2:	d101      	bne.n	800d8a8 <_svfprintf_r+0x5ac>
 800d8a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8a6:	7a9b      	ldrb	r3, [r3, #10]
 800d8a8:	7013      	strb	r3, [r2, #0]
 800d8aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d8ac:	9a08      	ldr	r2, [sp, #32]
 800d8ae:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800d8b0:	1a9b      	subs	r3, r3, r2
 800d8b2:	930e      	str	r3, [sp, #56]	; 0x38
 800d8b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8b6:	2b47      	cmp	r3, #71	; 0x47
 800d8b8:	d000      	beq.n	800d8bc <_svfprintf_r+0x5c0>
 800d8ba:	e1c4      	b.n	800dc46 <_svfprintf_r+0x94a>
 800d8bc:	1ceb      	adds	r3, r5, #3
 800d8be:	db03      	blt.n	800d8c8 <_svfprintf_r+0x5cc>
 800d8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c2:	42ab      	cmp	r3, r5
 800d8c4:	db00      	blt.n	800d8c8 <_svfprintf_r+0x5cc>
 800d8c6:	e1e6      	b.n	800dc96 <_svfprintf_r+0x99a>
 800d8c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8ca:	3b02      	subs	r3, #2
 800d8cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8ce:	223c      	movs	r2, #60	; 0x3c
 800d8d0:	466b      	mov	r3, sp
 800d8d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d8d4:	189b      	adds	r3, r3, r2
 800d8d6:	1e6c      	subs	r4, r5, #1
 800d8d8:	3a1c      	subs	r2, #28
 800d8da:	2000      	movs	r0, #0
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	9426      	str	r4, [sp, #152]	; 0x98
 800d8e0:	4391      	bics	r1, r2
 800d8e2:	2941      	cmp	r1, #65	; 0x41
 800d8e4:	d102      	bne.n	800d8ec <_svfprintf_r+0x5f0>
 800d8e6:	330f      	adds	r3, #15
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	a928      	add	r1, sp, #160	; 0xa0
 800d8ee:	700b      	strb	r3, [r1, #0]
 800d8f0:	232b      	movs	r3, #43	; 0x2b
 800d8f2:	2c00      	cmp	r4, #0
 800d8f4:	da02      	bge.n	800d8fc <_svfprintf_r+0x600>
 800d8f6:	2401      	movs	r4, #1
 800d8f8:	3302      	adds	r3, #2
 800d8fa:	1b64      	subs	r4, r4, r5
 800d8fc:	704b      	strb	r3, [r1, #1]
 800d8fe:	2c09      	cmp	r4, #9
 800d900:	dc00      	bgt.n	800d904 <_svfprintf_r+0x608>
 800d902:	e1ba      	b.n	800dc7a <_svfprintf_r+0x97e>
 800d904:	2337      	movs	r3, #55	; 0x37
 800d906:	250a      	movs	r5, #10
 800d908:	aa1e      	add	r2, sp, #120	; 0x78
 800d90a:	189b      	adds	r3, r3, r2
 800d90c:	9310      	str	r3, [sp, #64]	; 0x40
 800d90e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d910:	0020      	movs	r0, r4
 800d912:	9309      	str	r3, [sp, #36]	; 0x24
 800d914:	0029      	movs	r1, r5
 800d916:	3b01      	subs	r3, #1
 800d918:	9310      	str	r3, [sp, #64]	; 0x40
 800d91a:	f7f2 fd7f 	bl	800041c <__aeabi_idivmod>
 800d91e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d920:	3130      	adds	r1, #48	; 0x30
 800d922:	7019      	strb	r1, [r3, #0]
 800d924:	0020      	movs	r0, r4
 800d926:	0029      	movs	r1, r5
 800d928:	9411      	str	r4, [sp, #68]	; 0x44
 800d92a:	f7f2 fc91 	bl	8000250 <__divsi3>
 800d92e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d930:	0004      	movs	r4, r0
 800d932:	2b63      	cmp	r3, #99	; 0x63
 800d934:	dceb      	bgt.n	800d90e <_svfprintf_r+0x612>
 800d936:	222a      	movs	r2, #42	; 0x2a
 800d938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93a:	a81e      	add	r0, sp, #120	; 0x78
 800d93c:	1e99      	subs	r1, r3, #2
 800d93e:	1812      	adds	r2, r2, r0
 800d940:	2037      	movs	r0, #55	; 0x37
 800d942:	000b      	movs	r3, r1
 800d944:	3430      	adds	r4, #48	; 0x30
 800d946:	700c      	strb	r4, [r1, #0]
 800d948:	ac1e      	add	r4, sp, #120	; 0x78
 800d94a:	1900      	adds	r0, r0, r4
 800d94c:	4283      	cmp	r3, r0
 800d94e:	d200      	bcs.n	800d952 <_svfprintf_r+0x656>
 800d950:	e18e      	b.n	800dc70 <_svfprintf_r+0x974>
 800d952:	2300      	movs	r3, #0
 800d954:	4281      	cmp	r1, r0
 800d956:	d804      	bhi.n	800d962 <_svfprintf_r+0x666>
 800d958:	aa1e      	add	r2, sp, #120	; 0x78
 800d95a:	3339      	adds	r3, #57	; 0x39
 800d95c:	189b      	adds	r3, r3, r2
 800d95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d960:	1a9b      	subs	r3, r3, r2
 800d962:	222a      	movs	r2, #42	; 0x2a
 800d964:	a91e      	add	r1, sp, #120	; 0x78
 800d966:	1852      	adds	r2, r2, r1
 800d968:	18d3      	adds	r3, r2, r3
 800d96a:	aa28      	add	r2, sp, #160	; 0xa0
 800d96c:	1a9b      	subs	r3, r3, r2
 800d96e:	931e      	str	r3, [sp, #120]	; 0x78
 800d970:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d974:	4694      	mov	ip, r2
 800d976:	4463      	add	r3, ip
 800d978:	9309      	str	r3, [sp, #36]	; 0x24
 800d97a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	dc01      	bgt.n	800d984 <_svfprintf_r+0x688>
 800d980:	07f3      	lsls	r3, r6, #31
 800d982:	d504      	bpl.n	800d98e <_svfprintf_r+0x692>
 800d984:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d988:	4694      	mov	ip, r2
 800d98a:	4463      	add	r3, ip
 800d98c:	9309      	str	r3, [sp, #36]	; 0x24
 800d98e:	2280      	movs	r2, #128	; 0x80
 800d990:	4b74      	ldr	r3, [pc, #464]	; (800db64 <_svfprintf_r+0x868>)
 800d992:	0052      	lsls	r2, r2, #1
 800d994:	4033      	ands	r3, r6
 800d996:	431a      	orrs	r2, r3
 800d998:	2300      	movs	r3, #0
 800d99a:	001d      	movs	r5, r3
 800d99c:	921a      	str	r2, [sp, #104]	; 0x68
 800d99e:	9310      	str	r3, [sp, #64]	; 0x40
 800d9a0:	9311      	str	r3, [sp, #68]	; 0x44
 800d9a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d9a4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800d9a6:	9319      	str	r3, [sp, #100]	; 0x64
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d006      	beq.n	800d9ba <_svfprintf_r+0x6be>
 800d9ac:	231b      	movs	r3, #27
 800d9ae:	aa1e      	add	r2, sp, #120	; 0x78
 800d9b0:	189b      	adds	r3, r3, r2
 800d9b2:	222d      	movs	r2, #45	; 0x2d
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	9319      	str	r3, [sp, #100]	; 0x64
 800d9ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9be:	931a      	str	r3, [sp, #104]	; 0x68
 800d9c0:	4293      	cmp	r3, r2
 800d9c2:	da00      	bge.n	800d9c6 <_svfprintf_r+0x6ca>
 800d9c4:	921a      	str	r2, [sp, #104]	; 0x68
 800d9c6:	231b      	movs	r3, #27
 800d9c8:	aa1e      	add	r2, sp, #120	; 0x78
 800d9ca:	189b      	adds	r3, r3, r2
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	1e5a      	subs	r2, r3, #1
 800d9d0:	4193      	sbcs	r3, r2
 800d9d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9d4:	18d3      	adds	r3, r2, r3
 800d9d6:	931a      	str	r3, [sp, #104]	; 0x68
 800d9d8:	0032      	movs	r2, r6
 800d9da:	2302      	movs	r3, #2
 800d9dc:	401a      	ands	r2, r3
 800d9de:	9220      	str	r2, [sp, #128]	; 0x80
 800d9e0:	421e      	tst	r6, r3
 800d9e2:	d002      	beq.n	800d9ea <_svfprintf_r+0x6ee>
 800d9e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d9e6:	3302      	adds	r3, #2
 800d9e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d9ea:	2384      	movs	r3, #132	; 0x84
 800d9ec:	0032      	movs	r2, r6
 800d9ee:	401a      	ands	r2, r3
 800d9f0:	9221      	str	r2, [sp, #132]	; 0x84
 800d9f2:	421e      	tst	r6, r3
 800d9f4:	d11f      	bne.n	800da36 <_svfprintf_r+0x73a>
 800d9f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d9f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9fa:	1a9c      	subs	r4, r3, r2
 800d9fc:	2c00      	cmp	r4, #0
 800d9fe:	dd1a      	ble.n	800da36 <_svfprintf_r+0x73a>
 800da00:	0039      	movs	r1, r7
 800da02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da04:	4858      	ldr	r0, [pc, #352]	; (800db68 <_svfprintf_r+0x86c>)
 800da06:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800da08:	3301      	adds	r3, #1
 800da0a:	3108      	adds	r1, #8
 800da0c:	6038      	str	r0, [r7, #0]
 800da0e:	2c10      	cmp	r4, #16
 800da10:	dd00      	ble.n	800da14 <_svfprintf_r+0x718>
 800da12:	e31c      	b.n	800e04e <_svfprintf_r+0xd52>
 800da14:	607c      	str	r4, [r7, #4]
 800da16:	18a4      	adds	r4, r4, r2
 800da18:	000f      	movs	r7, r1
 800da1a:	942e      	str	r4, [sp, #184]	; 0xb8
 800da1c:	932d      	str	r3, [sp, #180]	; 0xb4
 800da1e:	2b07      	cmp	r3, #7
 800da20:	dd09      	ble.n	800da36 <_svfprintf_r+0x73a>
 800da22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da24:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da26:	aa2c      	add	r2, sp, #176	; 0xb0
 800da28:	f003 fcf8 	bl	801141c <__ssprint_r>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d001      	beq.n	800da34 <_svfprintf_r+0x738>
 800da30:	f000 fe43 	bl	800e6ba <_svfprintf_r+0x13be>
 800da34:	af2f      	add	r7, sp, #188	; 0xbc
 800da36:	221b      	movs	r2, #27
 800da38:	a91e      	add	r1, sp, #120	; 0x78
 800da3a:	1852      	adds	r2, r2, r1
 800da3c:	7811      	ldrb	r1, [r2, #0]
 800da3e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800da40:	2900      	cmp	r1, #0
 800da42:	d014      	beq.n	800da6e <_svfprintf_r+0x772>
 800da44:	603a      	str	r2, [r7, #0]
 800da46:	2201      	movs	r2, #1
 800da48:	189b      	adds	r3, r3, r2
 800da4a:	932e      	str	r3, [sp, #184]	; 0xb8
 800da4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	189b      	adds	r3, r3, r2
 800da52:	932d      	str	r3, [sp, #180]	; 0xb4
 800da54:	3708      	adds	r7, #8
 800da56:	2b07      	cmp	r3, #7
 800da58:	dd09      	ble.n	800da6e <_svfprintf_r+0x772>
 800da5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da5e:	aa2c      	add	r2, sp, #176	; 0xb0
 800da60:	f003 fcdc 	bl	801141c <__ssprint_r>
 800da64:	2800      	cmp	r0, #0
 800da66:	d001      	beq.n	800da6c <_svfprintf_r+0x770>
 800da68:	f000 fe27 	bl	800e6ba <_svfprintf_r+0x13be>
 800da6c:	af2f      	add	r7, sp, #188	; 0xbc
 800da6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800da70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800da72:	2a00      	cmp	r2, #0
 800da74:	d015      	beq.n	800daa2 <_svfprintf_r+0x7a6>
 800da76:	aa25      	add	r2, sp, #148	; 0x94
 800da78:	603a      	str	r2, [r7, #0]
 800da7a:	2202      	movs	r2, #2
 800da7c:	189b      	adds	r3, r3, r2
 800da7e:	932e      	str	r3, [sp, #184]	; 0xb8
 800da80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	3301      	adds	r3, #1
 800da86:	932d      	str	r3, [sp, #180]	; 0xb4
 800da88:	3708      	adds	r7, #8
 800da8a:	2b07      	cmp	r3, #7
 800da8c:	dd09      	ble.n	800daa2 <_svfprintf_r+0x7a6>
 800da8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da90:	980a      	ldr	r0, [sp, #40]	; 0x28
 800da92:	aa2c      	add	r2, sp, #176	; 0xb0
 800da94:	f003 fcc2 	bl	801141c <__ssprint_r>
 800da98:	2800      	cmp	r0, #0
 800da9a:	d001      	beq.n	800daa0 <_svfprintf_r+0x7a4>
 800da9c:	f000 fe0d 	bl	800e6ba <_svfprintf_r+0x13be>
 800daa0:	af2f      	add	r7, sp, #188	; 0xbc
 800daa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800daa4:	2b80      	cmp	r3, #128	; 0x80
 800daa6:	d11f      	bne.n	800dae8 <_svfprintf_r+0x7ec>
 800daa8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800daaa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800daac:	1a9c      	subs	r4, r3, r2
 800daae:	2c00      	cmp	r4, #0
 800dab0:	dd1a      	ble.n	800dae8 <_svfprintf_r+0x7ec>
 800dab2:	0039      	movs	r1, r7
 800dab4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800dab6:	482d      	ldr	r0, [pc, #180]	; (800db6c <_svfprintf_r+0x870>)
 800dab8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800daba:	3301      	adds	r3, #1
 800dabc:	3108      	adds	r1, #8
 800dabe:	6038      	str	r0, [r7, #0]
 800dac0:	2c10      	cmp	r4, #16
 800dac2:	dd00      	ble.n	800dac6 <_svfprintf_r+0x7ca>
 800dac4:	e2d6      	b.n	800e074 <_svfprintf_r+0xd78>
 800dac6:	607c      	str	r4, [r7, #4]
 800dac8:	18a4      	adds	r4, r4, r2
 800daca:	000f      	movs	r7, r1
 800dacc:	942e      	str	r4, [sp, #184]	; 0xb8
 800dace:	932d      	str	r3, [sp, #180]	; 0xb4
 800dad0:	2b07      	cmp	r3, #7
 800dad2:	dd09      	ble.n	800dae8 <_svfprintf_r+0x7ec>
 800dad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dad6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dad8:	aa2c      	add	r2, sp, #176	; 0xb0
 800dada:	f003 fc9f 	bl	801141c <__ssprint_r>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d001      	beq.n	800dae6 <_svfprintf_r+0x7ea>
 800dae2:	f000 fdea 	bl	800e6ba <_svfprintf_r+0x13be>
 800dae6:	af2f      	add	r7, sp, #188	; 0xbc
 800dae8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800daea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daec:	1a9c      	subs	r4, r3, r2
 800daee:	2c00      	cmp	r4, #0
 800daf0:	dd1a      	ble.n	800db28 <_svfprintf_r+0x82c>
 800daf2:	0039      	movs	r1, r7
 800daf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800daf6:	481d      	ldr	r0, [pc, #116]	; (800db6c <_svfprintf_r+0x870>)
 800daf8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800dafa:	3301      	adds	r3, #1
 800dafc:	3108      	adds	r1, #8
 800dafe:	6038      	str	r0, [r7, #0]
 800db00:	2c10      	cmp	r4, #16
 800db02:	dd00      	ble.n	800db06 <_svfprintf_r+0x80a>
 800db04:	e2c9      	b.n	800e09a <_svfprintf_r+0xd9e>
 800db06:	18a2      	adds	r2, r4, r2
 800db08:	607c      	str	r4, [r7, #4]
 800db0a:	922e      	str	r2, [sp, #184]	; 0xb8
 800db0c:	000f      	movs	r7, r1
 800db0e:	932d      	str	r3, [sp, #180]	; 0xb4
 800db10:	2b07      	cmp	r3, #7
 800db12:	dd09      	ble.n	800db28 <_svfprintf_r+0x82c>
 800db14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800db16:	980a      	ldr	r0, [sp, #40]	; 0x28
 800db18:	aa2c      	add	r2, sp, #176	; 0xb0
 800db1a:	f003 fc7f 	bl	801141c <__ssprint_r>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d001      	beq.n	800db26 <_svfprintf_r+0x82a>
 800db22:	f000 fdca 	bl	800e6ba <_svfprintf_r+0x13be>
 800db26:	af2f      	add	r7, sp, #188	; 0xbc
 800db28:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800db2a:	9319      	str	r3, [sp, #100]	; 0x64
 800db2c:	05f3      	lsls	r3, r6, #23
 800db2e:	d500      	bpl.n	800db32 <_svfprintf_r+0x836>
 800db30:	e2ce      	b.n	800e0d0 <_svfprintf_r+0xdd4>
 800db32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db34:	9b08      	ldr	r3, [sp, #32]
 800db36:	4694      	mov	ip, r2
 800db38:	603b      	str	r3, [r7, #0]
 800db3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db3c:	607b      	str	r3, [r7, #4]
 800db3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db40:	4463      	add	r3, ip
 800db42:	932e      	str	r3, [sp, #184]	; 0xb8
 800db44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800db46:	3301      	adds	r3, #1
 800db48:	932d      	str	r3, [sp, #180]	; 0xb4
 800db4a:	2b07      	cmp	r3, #7
 800db4c:	dd00      	ble.n	800db50 <_svfprintf_r+0x854>
 800db4e:	e3a3      	b.n	800e298 <_svfprintf_r+0xf9c>
 800db50:	3708      	adds	r7, #8
 800db52:	e301      	b.n	800e158 <_svfprintf_r+0xe5c>
 800db54:	080148ac 	.word	0x080148ac
 800db58:	080148bd 	.word	0x080148bd
 800db5c:	40300000 	.word	0x40300000
 800db60:	3fe00000 	.word	0x3fe00000
 800db64:	fffffbff 	.word	0xfffffbff
 800db68:	080148d0 	.word	0x080148d0
 800db6c:	080148e0 	.word	0x080148e0
 800db70:	9b08      	ldr	r3, [sp, #32]
 800db72:	930c      	str	r3, [sp, #48]	; 0x30
 800db74:	e610      	b.n	800d798 <_svfprintf_r+0x49c>
 800db76:	2306      	movs	r3, #6
 800db78:	e5fd      	b.n	800d776 <_svfprintf_r+0x47a>
 800db7a:	930e      	str	r3, [sp, #56]	; 0x38
 800db7c:	2300      	movs	r3, #0
 800db7e:	e61a      	b.n	800d7b6 <_svfprintf_r+0x4ba>
 800db80:	7010      	strb	r0, [r2, #0]
 800db82:	e684      	b.n	800d88e <_svfprintf_r+0x592>
 800db84:	7018      	strb	r0, [r3, #0]
 800db86:	3301      	adds	r3, #1
 800db88:	1aca      	subs	r2, r1, r3
 800db8a:	d5fb      	bpl.n	800db84 <_svfprintf_r+0x888>
 800db8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800db8e:	2300      	movs	r3, #0
 800db90:	3201      	adds	r2, #1
 800db92:	db01      	blt.n	800db98 <_svfprintf_r+0x89c>
 800db94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800db96:	3301      	adds	r3, #1
 800db98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db9a:	18d3      	adds	r3, r2, r3
 800db9c:	9323      	str	r3, [sp, #140]	; 0x8c
 800db9e:	e684      	b.n	800d8aa <_svfprintf_r+0x5ae>
 800dba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dba2:	9920      	ldr	r1, [sp, #128]	; 0x80
 800dba4:	2030      	movs	r0, #48	; 0x30
 800dba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dba8:	1851      	adds	r1, r2, r1
 800dbaa:	e7ed      	b.n	800db88 <_svfprintf_r+0x88c>
 800dbac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbae:	2303      	movs	r3, #3
 800dbb0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800dbb2:	2a46      	cmp	r2, #70	; 0x46
 800dbb4:	d006      	beq.n	800dbc4 <_svfprintf_r+0x8c8>
 800dbb6:	0014      	movs	r4, r2
 800dbb8:	3c45      	subs	r4, #69	; 0x45
 800dbba:	4262      	negs	r2, r4
 800dbbc:	4154      	adcs	r4, r2
 800dbbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbc0:	3b01      	subs	r3, #1
 800dbc2:	1914      	adds	r4, r2, r4
 800dbc4:	aa2a      	add	r2, sp, #168	; 0xa8
 800dbc6:	9204      	str	r2, [sp, #16]
 800dbc8:	aa27      	add	r2, sp, #156	; 0x9c
 800dbca:	9203      	str	r2, [sp, #12]
 800dbcc:	aa26      	add	r2, sp, #152	; 0x98
 800dbce:	9202      	str	r2, [sp, #8]
 800dbd0:	9300      	str	r3, [sp, #0]
 800dbd2:	002a      	movs	r2, r5
 800dbd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbd6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dbd8:	9401      	str	r4, [sp, #4]
 800dbda:	f002 fad7 	bl	801018c <_dtoa_r>
 800dbde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbe0:	9008      	str	r0, [sp, #32]
 800dbe2:	2b47      	cmp	r3, #71	; 0x47
 800dbe4:	d103      	bne.n	800dbee <_svfprintf_r+0x8f2>
 800dbe6:	07f3      	lsls	r3, r6, #31
 800dbe8:	d401      	bmi.n	800dbee <_svfprintf_r+0x8f2>
 800dbea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dbec:	e65e      	b.n	800d8ac <_svfprintf_r+0x5b0>
 800dbee:	9b08      	ldr	r3, [sp, #32]
 800dbf0:	191b      	adds	r3, r3, r4
 800dbf2:	9311      	str	r3, [sp, #68]	; 0x44
 800dbf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dbf6:	2b46      	cmp	r3, #70	; 0x46
 800dbf8:	d112      	bne.n	800dc20 <_svfprintf_r+0x924>
 800dbfa:	9b08      	ldr	r3, [sp, #32]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	2b30      	cmp	r3, #48	; 0x30
 800dc00:	d10a      	bne.n	800dc18 <_svfprintf_r+0x91c>
 800dc02:	2200      	movs	r2, #0
 800dc04:	2300      	movs	r3, #0
 800dc06:	0028      	movs	r0, r5
 800dc08:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc0a:	f7f2 fc1d 	bl	8000448 <__aeabi_dcmpeq>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d102      	bne.n	800dc18 <_svfprintf_r+0x91c>
 800dc12:	2301      	movs	r3, #1
 800dc14:	1b1b      	subs	r3, r3, r4
 800dc16:	9326      	str	r3, [sp, #152]	; 0x98
 800dc18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dc1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800dc1c:	18d3      	adds	r3, r2, r3
 800dc1e:	9311      	str	r3, [sp, #68]	; 0x44
 800dc20:	2200      	movs	r2, #0
 800dc22:	2300      	movs	r3, #0
 800dc24:	0028      	movs	r0, r5
 800dc26:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dc28:	f7f2 fc0e 	bl	8000448 <__aeabi_dcmpeq>
 800dc2c:	2800      	cmp	r0, #0
 800dc2e:	d001      	beq.n	800dc34 <_svfprintf_r+0x938>
 800dc30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc32:	932a      	str	r3, [sp, #168]	; 0xa8
 800dc34:	2230      	movs	r2, #48	; 0x30
 800dc36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800dc38:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dc3a:	4299      	cmp	r1, r3
 800dc3c:	d9d5      	bls.n	800dbea <_svfprintf_r+0x8ee>
 800dc3e:	1c59      	adds	r1, r3, #1
 800dc40:	912a      	str	r1, [sp, #168]	; 0xa8
 800dc42:	701a      	strb	r2, [r3, #0]
 800dc44:	e7f7      	b.n	800dc36 <_svfprintf_r+0x93a>
 800dc46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc48:	2b46      	cmp	r3, #70	; 0x46
 800dc4a:	d000      	beq.n	800dc4e <_svfprintf_r+0x952>
 800dc4c:	e63f      	b.n	800d8ce <_svfprintf_r+0x5d2>
 800dc4e:	2201      	movs	r2, #1
 800dc50:	0033      	movs	r3, r6
 800dc52:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc54:	4013      	ands	r3, r2
 800dc56:	430b      	orrs	r3, r1
 800dc58:	2d00      	cmp	r5, #0
 800dc5a:	dd2c      	ble.n	800dcb6 <_svfprintf_r+0x9ba>
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d046      	beq.n	800dcee <_svfprintf_r+0x9f2>
 800dc60:	000a      	movs	r2, r1
 800dc62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc64:	18eb      	adds	r3, r5, r3
 800dc66:	18d3      	adds	r3, r2, r3
 800dc68:	9309      	str	r3, [sp, #36]	; 0x24
 800dc6a:	2366      	movs	r3, #102	; 0x66
 800dc6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc6e:	e030      	b.n	800dcd2 <_svfprintf_r+0x9d6>
 800dc70:	781c      	ldrb	r4, [r3, #0]
 800dc72:	3301      	adds	r3, #1
 800dc74:	7014      	strb	r4, [r2, #0]
 800dc76:	3201      	adds	r2, #1
 800dc78:	e668      	b.n	800d94c <_svfprintf_r+0x650>
 800dc7a:	222a      	movs	r2, #42	; 0x2a
 800dc7c:	ab1e      	add	r3, sp, #120	; 0x78
 800dc7e:	18d2      	adds	r2, r2, r3
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d104      	bne.n	800dc8e <_svfprintf_r+0x992>
 800dc84:	2330      	movs	r3, #48	; 0x30
 800dc86:	222b      	movs	r2, #43	; 0x2b
 800dc88:	708b      	strb	r3, [r1, #2]
 800dc8a:	ab1e      	add	r3, sp, #120	; 0x78
 800dc8c:	18d2      	adds	r2, r2, r3
 800dc8e:	3430      	adds	r4, #48	; 0x30
 800dc90:	1c53      	adds	r3, r2, #1
 800dc92:	7014      	strb	r4, [r2, #0]
 800dc94:	e669      	b.n	800d96a <_svfprintf_r+0x66e>
 800dc96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc98:	42ab      	cmp	r3, r5
 800dc9a:	dd12      	ble.n	800dcc2 <_svfprintf_r+0x9c6>
 800dc9c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dc9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dca0:	4694      	mov	ip, r2
 800dca2:	4463      	add	r3, ip
 800dca4:	9309      	str	r3, [sp, #36]	; 0x24
 800dca6:	2367      	movs	r3, #103	; 0x67
 800dca8:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcaa:	2d00      	cmp	r5, #0
 800dcac:	dc11      	bgt.n	800dcd2 <_svfprintf_r+0x9d6>
 800dcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb0:	1b5b      	subs	r3, r3, r5
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	e00c      	b.n	800dcd0 <_svfprintf_r+0x9d4>
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d01b      	beq.n	800dcf2 <_svfprintf_r+0x9f6>
 800dcba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dcbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	e7d1      	b.n	800dc66 <_svfprintf_r+0x96a>
 800dcc2:	2367      	movs	r3, #103	; 0x67
 800dcc4:	9509      	str	r5, [sp, #36]	; 0x24
 800dcc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcc8:	07f3      	lsls	r3, r6, #31
 800dcca:	d502      	bpl.n	800dcd2 <_svfprintf_r+0x9d6>
 800dccc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dcce:	18eb      	adds	r3, r5, r3
 800dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd2:	2380      	movs	r3, #128	; 0x80
 800dcd4:	0032      	movs	r2, r6
 800dcd6:	00db      	lsls	r3, r3, #3
 800dcd8:	401a      	ands	r2, r3
 800dcda:	9211      	str	r2, [sp, #68]	; 0x44
 800dcdc:	2200      	movs	r2, #0
 800dcde:	9210      	str	r2, [sp, #64]	; 0x40
 800dce0:	421e      	tst	r6, r3
 800dce2:	d100      	bne.n	800dce6 <_svfprintf_r+0x9ea>
 800dce4:	e65d      	b.n	800d9a2 <_svfprintf_r+0x6a6>
 800dce6:	4295      	cmp	r5, r2
 800dce8:	dc25      	bgt.n	800dd36 <_svfprintf_r+0xa3a>
 800dcea:	9211      	str	r2, [sp, #68]	; 0x44
 800dcec:	e659      	b.n	800d9a2 <_svfprintf_r+0x6a6>
 800dcee:	9509      	str	r5, [sp, #36]	; 0x24
 800dcf0:	e7bb      	b.n	800dc6a <_svfprintf_r+0x96e>
 800dcf2:	2366      	movs	r3, #102	; 0x66
 800dcf4:	9209      	str	r2, [sp, #36]	; 0x24
 800dcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcf8:	e7eb      	b.n	800dcd2 <_svfprintf_r+0x9d6>
 800dcfa:	42ab      	cmp	r3, r5
 800dcfc:	da0e      	bge.n	800dd1c <_svfprintf_r+0xa20>
 800dcfe:	1aed      	subs	r5, r5, r3
 800dd00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd02:	785b      	ldrb	r3, [r3, #1]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d012      	beq.n	800dd2e <_svfprintf_r+0xa32>
 800dd08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	9311      	str	r3, [sp, #68]	; 0x44
 800dd0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd10:	3301      	adds	r3, #1
 800dd12:	9312      	str	r3, [sp, #72]	; 0x48
 800dd14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	2bff      	cmp	r3, #255	; 0xff
 800dd1a:	d1ee      	bne.n	800dcfa <_svfprintf_r+0x9fe>
 800dd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd20:	189b      	adds	r3, r3, r2
 800dd22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dd24:	4353      	muls	r3, r2
 800dd26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd28:	189b      	adds	r3, r3, r2
 800dd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800dd2c:	e639      	b.n	800d9a2 <_svfprintf_r+0x6a6>
 800dd2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd30:	3301      	adds	r3, #1
 800dd32:	9310      	str	r3, [sp, #64]	; 0x40
 800dd34:	e7ee      	b.n	800dd14 <_svfprintf_r+0xa18>
 800dd36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd38:	9311      	str	r3, [sp, #68]	; 0x44
 800dd3a:	e7eb      	b.n	800dd14 <_svfprintf_r+0xa18>
 800dd3c:	1d23      	adds	r3, r4, #4
 800dd3e:	930d      	str	r3, [sp, #52]	; 0x34
 800dd40:	06b3      	lsls	r3, r6, #26
 800dd42:	d509      	bpl.n	800dd58 <_svfprintf_r+0xa5c>
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	17d2      	asrs	r2, r2, #31
 800dd4c:	605a      	str	r2, [r3, #4]
 800dd4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd50:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800dd52:	9308      	str	r3, [sp, #32]
 800dd54:	f7ff fb0d 	bl	800d372 <_svfprintf_r+0x76>
 800dd58:	06f3      	lsls	r3, r6, #27
 800dd5a:	d503      	bpl.n	800dd64 <_svfprintf_r+0xa68>
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	e7f4      	b.n	800dd4e <_svfprintf_r+0xa52>
 800dd64:	0673      	lsls	r3, r6, #25
 800dd66:	d503      	bpl.n	800dd70 <_svfprintf_r+0xa74>
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd6c:	801a      	strh	r2, [r3, #0]
 800dd6e:	e7ee      	b.n	800dd4e <_svfprintf_r+0xa52>
 800dd70:	05b6      	lsls	r6, r6, #22
 800dd72:	d5f3      	bpl.n	800dd5c <_svfprintf_r+0xa60>
 800dd74:	6823      	ldr	r3, [r4, #0]
 800dd76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd78:	701a      	strb	r2, [r3, #0]
 800dd7a:	e7e8      	b.n	800dd4e <_svfprintf_r+0xa52>
 800dd7c:	2310      	movs	r3, #16
 800dd7e:	431e      	orrs	r6, r3
 800dd80:	2320      	movs	r3, #32
 800dd82:	0030      	movs	r0, r6
 800dd84:	4018      	ands	r0, r3
 800dd86:	421e      	tst	r6, r3
 800dd88:	d00f      	beq.n	800ddaa <_svfprintf_r+0xaae>
 800dd8a:	3b19      	subs	r3, #25
 800dd8c:	3407      	adds	r4, #7
 800dd8e:	439c      	bics	r4, r3
 800dd90:	0022      	movs	r2, r4
 800dd92:	ca18      	ldmia	r2!, {r3, r4}
 800dd94:	9306      	str	r3, [sp, #24]
 800dd96:	9407      	str	r4, [sp, #28]
 800dd98:	920d      	str	r2, [sp, #52]	; 0x34
 800dd9a:	4bc9      	ldr	r3, [pc, #804]	; (800e0c0 <_svfprintf_r+0xdc4>)
 800dd9c:	401e      	ands	r6, r3
 800dd9e:	2300      	movs	r3, #0
 800dda0:	221b      	movs	r2, #27
 800dda2:	a91e      	add	r1, sp, #120	; 0x78
 800dda4:	1852      	adds	r2, r2, r1
 800dda6:	2100      	movs	r1, #0
 800dda8:	e430      	b.n	800d60c <_svfprintf_r+0x310>
 800ddaa:	0022      	movs	r2, r4
 800ddac:	ca08      	ldmia	r2!, {r3}
 800ddae:	0031      	movs	r1, r6
 800ddb0:	920d      	str	r2, [sp, #52]	; 0x34
 800ddb2:	2210      	movs	r2, #16
 800ddb4:	4011      	ands	r1, r2
 800ddb6:	4216      	tst	r6, r2
 800ddb8:	d002      	beq.n	800ddc0 <_svfprintf_r+0xac4>
 800ddba:	9306      	str	r3, [sp, #24]
 800ddbc:	9007      	str	r0, [sp, #28]
 800ddbe:	e7ec      	b.n	800dd9a <_svfprintf_r+0xa9e>
 800ddc0:	2240      	movs	r2, #64	; 0x40
 800ddc2:	0030      	movs	r0, r6
 800ddc4:	4010      	ands	r0, r2
 800ddc6:	4216      	tst	r6, r2
 800ddc8:	d003      	beq.n	800ddd2 <_svfprintf_r+0xad6>
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	9306      	str	r3, [sp, #24]
 800ddce:	9107      	str	r1, [sp, #28]
 800ddd0:	e7e3      	b.n	800dd9a <_svfprintf_r+0xa9e>
 800ddd2:	2280      	movs	r2, #128	; 0x80
 800ddd4:	0031      	movs	r1, r6
 800ddd6:	0092      	lsls	r2, r2, #2
 800ddd8:	4011      	ands	r1, r2
 800ddda:	4216      	tst	r6, r2
 800dddc:	d0f6      	beq.n	800ddcc <_svfprintf_r+0xad0>
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	e7eb      	b.n	800ddba <_svfprintf_r+0xabe>
 800dde2:	0023      	movs	r3, r4
 800dde4:	cb04      	ldmia	r3!, {r2}
 800dde6:	49b7      	ldr	r1, [pc, #732]	; (800e0c4 <_svfprintf_r+0xdc8>)
 800dde8:	9206      	str	r2, [sp, #24]
 800ddea:	aa25      	add	r2, sp, #148	; 0x94
 800ddec:	8011      	strh	r1, [r2, #0]
 800ddee:	4ab6      	ldr	r2, [pc, #728]	; (800e0c8 <_svfprintf_r+0xdcc>)
 800ddf0:	930d      	str	r3, [sp, #52]	; 0x34
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	921f      	str	r2, [sp, #124]	; 0x7c
 800ddf6:	2278      	movs	r2, #120	; 0x78
 800ddf8:	9307      	str	r3, [sp, #28]
 800ddfa:	3302      	adds	r3, #2
 800ddfc:	431e      	orrs	r6, r3
 800ddfe:	920f      	str	r2, [sp, #60]	; 0x3c
 800de00:	e7ce      	b.n	800dda0 <_svfprintf_r+0xaa4>
 800de02:	0023      	movs	r3, r4
 800de04:	cb04      	ldmia	r3!, {r2}
 800de06:	2400      	movs	r4, #0
 800de08:	930d      	str	r3, [sp, #52]	; 0x34
 800de0a:	231b      	movs	r3, #27
 800de0c:	9208      	str	r2, [sp, #32]
 800de0e:	aa1e      	add	r2, sp, #120	; 0x78
 800de10:	189b      	adds	r3, r3, r2
 800de12:	701c      	strb	r4, [r3, #0]
 800de14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de16:	3301      	adds	r3, #1
 800de18:	d00e      	beq.n	800de38 <_svfprintf_r+0xb3c>
 800de1a:	0021      	movs	r1, r4
 800de1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de1e:	9808      	ldr	r0, [sp, #32]
 800de20:	f002 f83a 	bl	800fe98 <memchr>
 800de24:	900c      	str	r0, [sp, #48]	; 0x30
 800de26:	42a0      	cmp	r0, r4
 800de28:	d100      	bne.n	800de2c <_svfprintf_r+0xb30>
 800de2a:	e10d      	b.n	800e048 <_svfprintf_r+0xd4c>
 800de2c:	9a08      	ldr	r2, [sp, #32]
 800de2e:	1a83      	subs	r3, r0, r2
 800de30:	9309      	str	r3, [sp, #36]	; 0x24
 800de32:	0023      	movs	r3, r4
 800de34:	940c      	str	r4, [sp, #48]	; 0x30
 800de36:	e44e      	b.n	800d6d6 <_svfprintf_r+0x3da>
 800de38:	9808      	ldr	r0, [sp, #32]
 800de3a:	f7f2 f963 	bl	8000104 <strlen>
 800de3e:	9009      	str	r0, [sp, #36]	; 0x24
 800de40:	e7f7      	b.n	800de32 <_svfprintf_r+0xb36>
 800de42:	2310      	movs	r3, #16
 800de44:	431e      	orrs	r6, r3
 800de46:	2320      	movs	r3, #32
 800de48:	0030      	movs	r0, r6
 800de4a:	4018      	ands	r0, r3
 800de4c:	421e      	tst	r6, r3
 800de4e:	d009      	beq.n	800de64 <_svfprintf_r+0xb68>
 800de50:	3b19      	subs	r3, #25
 800de52:	3407      	adds	r4, #7
 800de54:	439c      	bics	r4, r3
 800de56:	0022      	movs	r2, r4
 800de58:	ca18      	ldmia	r2!, {r3, r4}
 800de5a:	9306      	str	r3, [sp, #24]
 800de5c:	9407      	str	r4, [sp, #28]
 800de5e:	920d      	str	r2, [sp, #52]	; 0x34
 800de60:	2301      	movs	r3, #1
 800de62:	e79d      	b.n	800dda0 <_svfprintf_r+0xaa4>
 800de64:	0023      	movs	r3, r4
 800de66:	cb04      	ldmia	r3!, {r2}
 800de68:	0031      	movs	r1, r6
 800de6a:	930d      	str	r3, [sp, #52]	; 0x34
 800de6c:	2310      	movs	r3, #16
 800de6e:	4019      	ands	r1, r3
 800de70:	421e      	tst	r6, r3
 800de72:	d003      	beq.n	800de7c <_svfprintf_r+0xb80>
 800de74:	9206      	str	r2, [sp, #24]
 800de76:	9007      	str	r0, [sp, #28]
 800de78:	3b0f      	subs	r3, #15
 800de7a:	e791      	b.n	800dda0 <_svfprintf_r+0xaa4>
 800de7c:	2340      	movs	r3, #64	; 0x40
 800de7e:	0030      	movs	r0, r6
 800de80:	4018      	ands	r0, r3
 800de82:	421e      	tst	r6, r3
 800de84:	d003      	beq.n	800de8e <_svfprintf_r+0xb92>
 800de86:	b293      	uxth	r3, r2
 800de88:	9306      	str	r3, [sp, #24]
 800de8a:	9107      	str	r1, [sp, #28]
 800de8c:	e7e8      	b.n	800de60 <_svfprintf_r+0xb64>
 800de8e:	2380      	movs	r3, #128	; 0x80
 800de90:	0031      	movs	r1, r6
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	4019      	ands	r1, r3
 800de96:	421e      	tst	r6, r3
 800de98:	d003      	beq.n	800dea2 <_svfprintf_r+0xba6>
 800de9a:	b2d3      	uxtb	r3, r2
 800de9c:	9306      	str	r3, [sp, #24]
 800de9e:	9007      	str	r0, [sp, #28]
 800dea0:	e7de      	b.n	800de60 <_svfprintf_r+0xb64>
 800dea2:	9206      	str	r2, [sp, #24]
 800dea4:	e7f1      	b.n	800de8a <_svfprintf_r+0xb8e>
 800dea6:	4b89      	ldr	r3, [pc, #548]	; (800e0cc <_svfprintf_r+0xdd0>)
 800dea8:	0030      	movs	r0, r6
 800deaa:	931f      	str	r3, [sp, #124]	; 0x7c
 800deac:	2320      	movs	r3, #32
 800deae:	4018      	ands	r0, r3
 800deb0:	421e      	tst	r6, r3
 800deb2:	d01a      	beq.n	800deea <_svfprintf_r+0xbee>
 800deb4:	3b19      	subs	r3, #25
 800deb6:	3407      	adds	r4, #7
 800deb8:	439c      	bics	r4, r3
 800deba:	0022      	movs	r2, r4
 800debc:	ca18      	ldmia	r2!, {r3, r4}
 800debe:	9306      	str	r3, [sp, #24]
 800dec0:	9407      	str	r4, [sp, #28]
 800dec2:	920d      	str	r2, [sp, #52]	; 0x34
 800dec4:	07f3      	lsls	r3, r6, #31
 800dec6:	d50a      	bpl.n	800dede <_svfprintf_r+0xbe2>
 800dec8:	9b06      	ldr	r3, [sp, #24]
 800deca:	9a07      	ldr	r2, [sp, #28]
 800decc:	4313      	orrs	r3, r2
 800dece:	d006      	beq.n	800dede <_svfprintf_r+0xbe2>
 800ded0:	2230      	movs	r2, #48	; 0x30
 800ded2:	ab25      	add	r3, sp, #148	; 0x94
 800ded4:	701a      	strb	r2, [r3, #0]
 800ded6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ded8:	705a      	strb	r2, [r3, #1]
 800deda:	2302      	movs	r3, #2
 800dedc:	431e      	orrs	r6, r3
 800dede:	4b78      	ldr	r3, [pc, #480]	; (800e0c0 <_svfprintf_r+0xdc4>)
 800dee0:	401e      	ands	r6, r3
 800dee2:	2302      	movs	r3, #2
 800dee4:	e75c      	b.n	800dda0 <_svfprintf_r+0xaa4>
 800dee6:	4b78      	ldr	r3, [pc, #480]	; (800e0c8 <_svfprintf_r+0xdcc>)
 800dee8:	e7de      	b.n	800dea8 <_svfprintf_r+0xbac>
 800deea:	0023      	movs	r3, r4
 800deec:	cb04      	ldmia	r3!, {r2}
 800deee:	0031      	movs	r1, r6
 800def0:	930d      	str	r3, [sp, #52]	; 0x34
 800def2:	2310      	movs	r3, #16
 800def4:	4019      	ands	r1, r3
 800def6:	421e      	tst	r6, r3
 800def8:	d002      	beq.n	800df00 <_svfprintf_r+0xc04>
 800defa:	9206      	str	r2, [sp, #24]
 800defc:	9007      	str	r0, [sp, #28]
 800defe:	e7e1      	b.n	800dec4 <_svfprintf_r+0xbc8>
 800df00:	2340      	movs	r3, #64	; 0x40
 800df02:	0030      	movs	r0, r6
 800df04:	4018      	ands	r0, r3
 800df06:	421e      	tst	r6, r3
 800df08:	d003      	beq.n	800df12 <_svfprintf_r+0xc16>
 800df0a:	b293      	uxth	r3, r2
 800df0c:	9306      	str	r3, [sp, #24]
 800df0e:	9107      	str	r1, [sp, #28]
 800df10:	e7d8      	b.n	800dec4 <_svfprintf_r+0xbc8>
 800df12:	2380      	movs	r3, #128	; 0x80
 800df14:	0031      	movs	r1, r6
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4019      	ands	r1, r3
 800df1a:	421e      	tst	r6, r3
 800df1c:	d002      	beq.n	800df24 <_svfprintf_r+0xc28>
 800df1e:	b2d3      	uxtb	r3, r2
 800df20:	9306      	str	r3, [sp, #24]
 800df22:	e7eb      	b.n	800defc <_svfprintf_r+0xc00>
 800df24:	9206      	str	r2, [sp, #24]
 800df26:	e7f2      	b.n	800df0e <_svfprintf_r+0xc12>
 800df28:	9b07      	ldr	r3, [sp, #28]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10a      	bne.n	800df44 <_svfprintf_r+0xc48>
 800df2e:	9b06      	ldr	r3, [sp, #24]
 800df30:	2b09      	cmp	r3, #9
 800df32:	d807      	bhi.n	800df44 <_svfprintf_r+0xc48>
 800df34:	23e7      	movs	r3, #231	; 0xe7
 800df36:	aa1e      	add	r2, sp, #120	; 0x78
 800df38:	189b      	adds	r3, r3, r2
 800df3a:	9a06      	ldr	r2, [sp, #24]
 800df3c:	3230      	adds	r2, #48	; 0x30
 800df3e:	701a      	strb	r2, [r3, #0]
 800df40:	f000 fc18 	bl	800e774 <_svfprintf_r+0x1478>
 800df44:	2680      	movs	r6, #128	; 0x80
 800df46:	2300      	movs	r3, #0
 800df48:	00f6      	lsls	r6, r6, #3
 800df4a:	930e      	str	r3, [sp, #56]	; 0x38
 800df4c:	ad58      	add	r5, sp, #352	; 0x160
 800df4e:	4026      	ands	r6, r4
 800df50:	220a      	movs	r2, #10
 800df52:	9806      	ldr	r0, [sp, #24]
 800df54:	9907      	ldr	r1, [sp, #28]
 800df56:	2300      	movs	r3, #0
 800df58:	f7f2 faa4 	bl	80004a4 <__aeabi_uldivmod>
 800df5c:	1e6b      	subs	r3, r5, #1
 800df5e:	3230      	adds	r2, #48	; 0x30
 800df60:	9308      	str	r3, [sp, #32]
 800df62:	701a      	strb	r2, [r3, #0]
 800df64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df66:	900c      	str	r0, [sp, #48]	; 0x30
 800df68:	3301      	adds	r3, #1
 800df6a:	9110      	str	r1, [sp, #64]	; 0x40
 800df6c:	930e      	str	r3, [sp, #56]	; 0x38
 800df6e:	2e00      	cmp	r6, #0
 800df70:	d01d      	beq.n	800dfae <_svfprintf_r+0xcb2>
 800df72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d118      	bne.n	800dfae <_svfprintf_r+0xcb2>
 800df7c:	2aff      	cmp	r2, #255	; 0xff
 800df7e:	d016      	beq.n	800dfae <_svfprintf_r+0xcb2>
 800df80:	9b07      	ldr	r3, [sp, #28]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d102      	bne.n	800df8c <_svfprintf_r+0xc90>
 800df86:	9b06      	ldr	r3, [sp, #24]
 800df88:	2b09      	cmp	r3, #9
 800df8a:	d910      	bls.n	800dfae <_svfprintf_r+0xcb2>
 800df8c:	9b08      	ldr	r3, [sp, #32]
 800df8e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800df90:	991d      	ldr	r1, [sp, #116]	; 0x74
 800df92:	1a9b      	subs	r3, r3, r2
 800df94:	0018      	movs	r0, r3
 800df96:	9308      	str	r3, [sp, #32]
 800df98:	f7fd ffd1 	bl	800bf3e <strncpy>
 800df9c:	2200      	movs	r2, #0
 800df9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfa0:	920e      	str	r2, [sp, #56]	; 0x38
 800dfa2:	785b      	ldrb	r3, [r3, #1]
 800dfa4:	1e5a      	subs	r2, r3, #1
 800dfa6:	4193      	sbcs	r3, r2
 800dfa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dfaa:	18d3      	adds	r3, r2, r3
 800dfac:	9312      	str	r3, [sp, #72]	; 0x48
 800dfae:	9b07      	ldr	r3, [sp, #28]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d10f      	bne.n	800dfd4 <_svfprintf_r+0xcd8>
 800dfb4:	9b06      	ldr	r3, [sp, #24]
 800dfb6:	2b09      	cmp	r3, #9
 800dfb8:	d80c      	bhi.n	800dfd4 <_svfprintf_r+0xcd8>
 800dfba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfbc:	9a08      	ldr	r2, [sp, #32]
 800dfbe:	9319      	str	r3, [sp, #100]	; 0x64
 800dfc0:	ab58      	add	r3, sp, #352	; 0x160
 800dfc2:	1a9b      	subs	r3, r3, r2
 800dfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	0026      	movs	r6, r4
 800dfca:	930c      	str	r3, [sp, #48]	; 0x30
 800dfcc:	001d      	movs	r5, r3
 800dfce:	9310      	str	r3, [sp, #64]	; 0x40
 800dfd0:	9311      	str	r3, [sp, #68]	; 0x44
 800dfd2:	e4f2      	b.n	800d9ba <_svfprintf_r+0x6be>
 800dfd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfd6:	9d08      	ldr	r5, [sp, #32]
 800dfd8:	9306      	str	r3, [sp, #24]
 800dfda:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfdc:	9307      	str	r3, [sp, #28]
 800dfde:	e7b7      	b.n	800df50 <_svfprintf_r+0xc54>
 800dfe0:	200f      	movs	r0, #15
 800dfe2:	ab58      	add	r3, sp, #352	; 0x160
 800dfe4:	9308      	str	r3, [sp, #32]
 800dfe6:	9b08      	ldr	r3, [sp, #32]
 800dfe8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dfea:	3b01      	subs	r3, #1
 800dfec:	9308      	str	r3, [sp, #32]
 800dfee:	9b06      	ldr	r3, [sp, #24]
 800dff0:	4003      	ands	r3, r0
 800dff2:	5cd3      	ldrb	r3, [r2, r3]
 800dff4:	9a08      	ldr	r2, [sp, #32]
 800dff6:	7013      	strb	r3, [r2, #0]
 800dff8:	9b07      	ldr	r3, [sp, #28]
 800dffa:	0719      	lsls	r1, r3, #28
 800dffc:	9b06      	ldr	r3, [sp, #24]
 800dffe:	091a      	lsrs	r2, r3, #4
 800e000:	9b07      	ldr	r3, [sp, #28]
 800e002:	4311      	orrs	r1, r2
 800e004:	091b      	lsrs	r3, r3, #4
 800e006:	9307      	str	r3, [sp, #28]
 800e008:	000b      	movs	r3, r1
 800e00a:	9a07      	ldr	r2, [sp, #28]
 800e00c:	9106      	str	r1, [sp, #24]
 800e00e:	4313      	orrs	r3, r2
 800e010:	d1e9      	bne.n	800dfe6 <_svfprintf_r+0xcea>
 800e012:	e7d2      	b.n	800dfba <_svfprintf_r+0xcbe>
 800e014:	aa58      	add	r2, sp, #352	; 0x160
 800e016:	9208      	str	r2, [sp, #32]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1ce      	bne.n	800dfba <_svfprintf_r+0xcbe>
 800e01c:	07f6      	lsls	r6, r6, #31
 800e01e:	d5cc      	bpl.n	800dfba <_svfprintf_r+0xcbe>
 800e020:	aa1e      	add	r2, sp, #120	; 0x78
 800e022:	33e7      	adds	r3, #231	; 0xe7
 800e024:	189b      	adds	r3, r3, r2
 800e026:	2230      	movs	r2, #48	; 0x30
 800e028:	e789      	b.n	800df3e <_svfprintf_r+0xc42>
 800e02a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d100      	bne.n	800e032 <_svfprintf_r+0xd36>
 800e030:	e364      	b.n	800e6fc <_svfprintf_r+0x1400>
 800e032:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e034:	211b      	movs	r1, #27
 800e036:	ab3f      	add	r3, sp, #252	; 0xfc
 800e038:	701a      	strb	r2, [r3, #0]
 800e03a:	2200      	movs	r2, #0
 800e03c:	a81e      	add	r0, sp, #120	; 0x78
 800e03e:	1809      	adds	r1, r1, r0
 800e040:	700a      	strb	r2, [r1, #0]
 800e042:	940d      	str	r4, [sp, #52]	; 0x34
 800e044:	f7ff fabd 	bl	800d5c2 <_svfprintf_r+0x2c6>
 800e048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e04a:	f7ff fb44 	bl	800d6d6 <_svfprintf_r+0x3da>
 800e04e:	2010      	movs	r0, #16
 800e050:	1812      	adds	r2, r2, r0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	922e      	str	r2, [sp, #184]	; 0xb8
 800e056:	932d      	str	r3, [sp, #180]	; 0xb4
 800e058:	2b07      	cmp	r3, #7
 800e05a:	dd08      	ble.n	800e06e <_svfprintf_r+0xd72>
 800e05c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e05e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e060:	aa2c      	add	r2, sp, #176	; 0xb0
 800e062:	f003 f9db 	bl	801141c <__ssprint_r>
 800e066:	2800      	cmp	r0, #0
 800e068:	d000      	beq.n	800e06c <_svfprintf_r+0xd70>
 800e06a:	e326      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e06c:	a92f      	add	r1, sp, #188	; 0xbc
 800e06e:	000f      	movs	r7, r1
 800e070:	3c10      	subs	r4, #16
 800e072:	e4c5      	b.n	800da00 <_svfprintf_r+0x704>
 800e074:	2010      	movs	r0, #16
 800e076:	1812      	adds	r2, r2, r0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	922e      	str	r2, [sp, #184]	; 0xb8
 800e07c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e07e:	2b07      	cmp	r3, #7
 800e080:	dd08      	ble.n	800e094 <_svfprintf_r+0xd98>
 800e082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e084:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e086:	aa2c      	add	r2, sp, #176	; 0xb0
 800e088:	f003 f9c8 	bl	801141c <__ssprint_r>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d000      	beq.n	800e092 <_svfprintf_r+0xd96>
 800e090:	e313      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e092:	a92f      	add	r1, sp, #188	; 0xbc
 800e094:	000f      	movs	r7, r1
 800e096:	3c10      	subs	r4, #16
 800e098:	e50b      	b.n	800dab2 <_svfprintf_r+0x7b6>
 800e09a:	2010      	movs	r0, #16
 800e09c:	1812      	adds	r2, r2, r0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e0a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0a4:	2b07      	cmp	r3, #7
 800e0a6:	dd08      	ble.n	800e0ba <_svfprintf_r+0xdbe>
 800e0a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e0ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800e0ae:	f003 f9b5 	bl	801141c <__ssprint_r>
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d000      	beq.n	800e0b8 <_svfprintf_r+0xdbc>
 800e0b6:	e300      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e0b8:	a92f      	add	r1, sp, #188	; 0xbc
 800e0ba:	000f      	movs	r7, r1
 800e0bc:	3c10      	subs	r4, #16
 800e0be:	e518      	b.n	800daf2 <_svfprintf_r+0x7f6>
 800e0c0:	fffffbff 	.word	0xfffffbff
 800e0c4:	00007830 	.word	0x00007830
 800e0c8:	080148ac 	.word	0x080148ac
 800e0cc:	080148bd 	.word	0x080148bd
 800e0d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0d2:	2b65      	cmp	r3, #101	; 0x65
 800e0d4:	dc00      	bgt.n	800e0d8 <_svfprintf_r+0xddc>
 800e0d6:	e241      	b.n	800e55c <_svfprintf_r+0x1260>
 800e0d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e0da:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e0dc:	2200      	movs	r2, #0
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f7f2 f9b2 	bl	8000448 <__aeabi_dcmpeq>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d077      	beq.n	800e1d8 <_svfprintf_r+0xedc>
 800e0e8:	4bca      	ldr	r3, [pc, #808]	; (800e414 <_svfprintf_r+0x1118>)
 800e0ea:	603b      	str	r3, [r7, #0]
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	607b      	str	r3, [r7, #4]
 800e0f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	932e      	str	r3, [sp, #184]	; 0xb8
 800e0f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e0fe:	2b07      	cmp	r3, #7
 800e100:	dd08      	ble.n	800e114 <_svfprintf_r+0xe18>
 800e102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e104:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e106:	aa2c      	add	r2, sp, #176	; 0xb0
 800e108:	f003 f988 	bl	801141c <__ssprint_r>
 800e10c:	2800      	cmp	r0, #0
 800e10e:	d000      	beq.n	800e112 <_svfprintf_r+0xe16>
 800e110:	e2d3      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e112:	af2f      	add	r7, sp, #188	; 0xbc
 800e114:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e118:	4293      	cmp	r3, r2
 800e11a:	db01      	blt.n	800e120 <_svfprintf_r+0xe24>
 800e11c:	07f3      	lsls	r3, r6, #31
 800e11e:	d51b      	bpl.n	800e158 <_svfprintf_r+0xe5c>
 800e120:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e122:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e124:	603b      	str	r3, [r7, #0]
 800e126:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e128:	607b      	str	r3, [r7, #4]
 800e12a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e12c:	3708      	adds	r7, #8
 800e12e:	189b      	adds	r3, r3, r2
 800e130:	932e      	str	r3, [sp, #184]	; 0xb8
 800e132:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e134:	3301      	adds	r3, #1
 800e136:	932d      	str	r3, [sp, #180]	; 0xb4
 800e138:	2b07      	cmp	r3, #7
 800e13a:	dd08      	ble.n	800e14e <_svfprintf_r+0xe52>
 800e13c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e13e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e140:	aa2c      	add	r2, sp, #176	; 0xb0
 800e142:	f003 f96b 	bl	801141c <__ssprint_r>
 800e146:	2800      	cmp	r0, #0
 800e148:	d000      	beq.n	800e14c <_svfprintf_r+0xe50>
 800e14a:	e2b6      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e14c:	af2f      	add	r7, sp, #188	; 0xbc
 800e14e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e150:	2510      	movs	r5, #16
 800e152:	1e5c      	subs	r4, r3, #1
 800e154:	2c00      	cmp	r4, #0
 800e156:	dc2e      	bgt.n	800e1b6 <_svfprintf_r+0xeba>
 800e158:	0776      	lsls	r6, r6, #29
 800e15a:	d500      	bpl.n	800e15e <_svfprintf_r+0xe62>
 800e15c:	e290      	b.n	800e680 <_svfprintf_r+0x1384>
 800e15e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e160:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e162:	4293      	cmp	r3, r2
 800e164:	da00      	bge.n	800e168 <_svfprintf_r+0xe6c>
 800e166:	0013      	movs	r3, r2
 800e168:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e16a:	18d3      	adds	r3, r2, r3
 800e16c:	9317      	str	r3, [sp, #92]	; 0x5c
 800e16e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e170:	2b00      	cmp	r3, #0
 800e172:	d007      	beq.n	800e184 <_svfprintf_r+0xe88>
 800e174:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e176:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e178:	aa2c      	add	r2, sp, #176	; 0xb0
 800e17a:	f003 f94f 	bl	801141c <__ssprint_r>
 800e17e:	2800      	cmp	r0, #0
 800e180:	d000      	beq.n	800e184 <_svfprintf_r+0xe88>
 800e182:	e29a      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e184:	2300      	movs	r3, #0
 800e186:	932d      	str	r3, [sp, #180]	; 0xb4
 800e188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d000      	beq.n	800e190 <_svfprintf_r+0xe94>
 800e18e:	e2b0      	b.n	800e6f2 <_svfprintf_r+0x13f6>
 800e190:	af2f      	add	r7, sp, #188	; 0xbc
 800e192:	e5dc      	b.n	800dd4e <_svfprintf_r+0xa52>
 800e194:	3210      	adds	r2, #16
 800e196:	607d      	str	r5, [r7, #4]
 800e198:	922e      	str	r2, [sp, #184]	; 0xb8
 800e19a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e19c:	2b07      	cmp	r3, #7
 800e19e:	dd08      	ble.n	800e1b2 <_svfprintf_r+0xeb6>
 800e1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1a4:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1a6:	f003 f939 	bl	801141c <__ssprint_r>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d000      	beq.n	800e1b0 <_svfprintf_r+0xeb4>
 800e1ae:	e284      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e1b0:	a92f      	add	r1, sp, #188	; 0xbc
 800e1b2:	000f      	movs	r7, r1
 800e1b4:	3c10      	subs	r4, #16
 800e1b6:	0039      	movs	r1, r7
 800e1b8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1ba:	4897      	ldr	r0, [pc, #604]	; (800e418 <_svfprintf_r+0x111c>)
 800e1bc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e1be:	3301      	adds	r3, #1
 800e1c0:	3108      	adds	r1, #8
 800e1c2:	6038      	str	r0, [r7, #0]
 800e1c4:	2c10      	cmp	r4, #16
 800e1c6:	dce5      	bgt.n	800e194 <_svfprintf_r+0xe98>
 800e1c8:	607c      	str	r4, [r7, #4]
 800e1ca:	18a4      	adds	r4, r4, r2
 800e1cc:	942e      	str	r4, [sp, #184]	; 0xb8
 800e1ce:	000f      	movs	r7, r1
 800e1d0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1d2:	2b07      	cmp	r3, #7
 800e1d4:	ddc0      	ble.n	800e158 <_svfprintf_r+0xe5c>
 800e1d6:	e05f      	b.n	800e298 <_svfprintf_r+0xf9c>
 800e1d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	dc78      	bgt.n	800e2d0 <_svfprintf_r+0xfd4>
 800e1de:	4b8d      	ldr	r3, [pc, #564]	; (800e414 <_svfprintf_r+0x1118>)
 800e1e0:	603b      	str	r3, [r7, #0]
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	607b      	str	r3, [r7, #4]
 800e1e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	932e      	str	r3, [sp, #184]	; 0xb8
 800e1ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e1f4:	2b07      	cmp	r3, #7
 800e1f6:	dd08      	ble.n	800e20a <_svfprintf_r+0xf0e>
 800e1f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e1fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e1fc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e1fe:	f003 f90d 	bl	801141c <__ssprint_r>
 800e202:	2800      	cmp	r0, #0
 800e204:	d000      	beq.n	800e208 <_svfprintf_r+0xf0c>
 800e206:	e258      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e208:	af2f      	add	r7, sp, #188	; 0xbc
 800e20a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e20c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e20e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e210:	430b      	orrs	r3, r1
 800e212:	2101      	movs	r1, #1
 800e214:	4031      	ands	r1, r6
 800e216:	430b      	orrs	r3, r1
 800e218:	d09e      	beq.n	800e158 <_svfprintf_r+0xe5c>
 800e21a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e220:	607b      	str	r3, [r7, #4]
 800e222:	189a      	adds	r2, r3, r2
 800e224:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e226:	922e      	str	r2, [sp, #184]	; 0xb8
 800e228:	3301      	adds	r3, #1
 800e22a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e22c:	3708      	adds	r7, #8
 800e22e:	2b07      	cmp	r3, #7
 800e230:	dd08      	ble.n	800e244 <_svfprintf_r+0xf48>
 800e232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e234:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e236:	aa2c      	add	r2, sp, #176	; 0xb0
 800e238:	f003 f8f0 	bl	801141c <__ssprint_r>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d000      	beq.n	800e242 <_svfprintf_r+0xf46>
 800e240:	e23b      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e242:	af2f      	add	r7, sp, #188	; 0xbc
 800e244:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e246:	2c00      	cmp	r4, #0
 800e248:	da19      	bge.n	800e27e <_svfprintf_r+0xf82>
 800e24a:	0038      	movs	r0, r7
 800e24c:	2510      	movs	r5, #16
 800e24e:	4264      	negs	r4, r4
 800e250:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800e252:	4a71      	ldr	r2, [pc, #452]	; (800e418 <_svfprintf_r+0x111c>)
 800e254:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e256:	3101      	adds	r1, #1
 800e258:	3708      	adds	r7, #8
 800e25a:	6002      	str	r2, [r0, #0]
 800e25c:	2c10      	cmp	r4, #16
 800e25e:	dc25      	bgt.n	800e2ac <_svfprintf_r+0xfb0>
 800e260:	6044      	str	r4, [r0, #4]
 800e262:	18e4      	adds	r4, r4, r3
 800e264:	942e      	str	r4, [sp, #184]	; 0xb8
 800e266:	912d      	str	r1, [sp, #180]	; 0xb4
 800e268:	2907      	cmp	r1, #7
 800e26a:	dd08      	ble.n	800e27e <_svfprintf_r+0xf82>
 800e26c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e26e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e270:	aa2c      	add	r2, sp, #176	; 0xb0
 800e272:	f003 f8d3 	bl	801141c <__ssprint_r>
 800e276:	2800      	cmp	r0, #0
 800e278:	d000      	beq.n	800e27c <_svfprintf_r+0xf80>
 800e27a:	e21e      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e27c:	af2f      	add	r7, sp, #188	; 0xbc
 800e27e:	9b08      	ldr	r3, [sp, #32]
 800e280:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e282:	603b      	str	r3, [r7, #0]
 800e284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e286:	18d2      	adds	r2, r2, r3
 800e288:	922e      	str	r2, [sp, #184]	; 0xb8
 800e28a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800e28c:	607b      	str	r3, [r7, #4]
 800e28e:	3201      	adds	r2, #1
 800e290:	922d      	str	r2, [sp, #180]	; 0xb4
 800e292:	2a07      	cmp	r2, #7
 800e294:	dc00      	bgt.n	800e298 <_svfprintf_r+0xf9c>
 800e296:	e45b      	b.n	800db50 <_svfprintf_r+0x854>
 800e298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e29a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e29c:	aa2c      	add	r2, sp, #176	; 0xb0
 800e29e:	f003 f8bd 	bl	801141c <__ssprint_r>
 800e2a2:	2800      	cmp	r0, #0
 800e2a4:	d000      	beq.n	800e2a8 <_svfprintf_r+0xfac>
 800e2a6:	e208      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e2a8:	af2f      	add	r7, sp, #188	; 0xbc
 800e2aa:	e755      	b.n	800e158 <_svfprintf_r+0xe5c>
 800e2ac:	3310      	adds	r3, #16
 800e2ae:	6045      	str	r5, [r0, #4]
 800e2b0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e2b2:	912d      	str	r1, [sp, #180]	; 0xb4
 800e2b4:	2907      	cmp	r1, #7
 800e2b6:	dd08      	ble.n	800e2ca <_svfprintf_r+0xfce>
 800e2b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2bc:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2be:	f003 f8ad 	bl	801141c <__ssprint_r>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d000      	beq.n	800e2c8 <_svfprintf_r+0xfcc>
 800e2c6:	e1f8      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e2c8:	af2f      	add	r7, sp, #188	; 0xbc
 800e2ca:	0038      	movs	r0, r7
 800e2cc:	3c10      	subs	r4, #16
 800e2ce:	e7bf      	b.n	800e250 <_svfprintf_r+0xf54>
 800e2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2d2:	002c      	movs	r4, r5
 800e2d4:	429d      	cmp	r5, r3
 800e2d6:	dd00      	ble.n	800e2da <_svfprintf_r+0xfde>
 800e2d8:	001c      	movs	r4, r3
 800e2da:	2c00      	cmp	r4, #0
 800e2dc:	dd14      	ble.n	800e308 <_svfprintf_r+0x100c>
 800e2de:	9b08      	ldr	r3, [sp, #32]
 800e2e0:	607c      	str	r4, [r7, #4]
 800e2e2:	603b      	str	r3, [r7, #0]
 800e2e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	18e3      	adds	r3, r4, r3
 800e2ea:	932e      	str	r3, [sp, #184]	; 0xb8
 800e2ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e2ee:	3301      	adds	r3, #1
 800e2f0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e2f2:	2b07      	cmp	r3, #7
 800e2f4:	dd08      	ble.n	800e308 <_svfprintf_r+0x100c>
 800e2f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e2f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e2fa:	aa2c      	add	r2, sp, #176	; 0xb0
 800e2fc:	f003 f88e 	bl	801141c <__ssprint_r>
 800e300:	2800      	cmp	r0, #0
 800e302:	d000      	beq.n	800e306 <_svfprintf_r+0x100a>
 800e304:	e1d9      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e306:	af2f      	add	r7, sp, #188	; 0xbc
 800e308:	43e3      	mvns	r3, r4
 800e30a:	17db      	asrs	r3, r3, #31
 800e30c:	401c      	ands	r4, r3
 800e30e:	1b2c      	subs	r4, r5, r4
 800e310:	2c00      	cmp	r4, #0
 800e312:	dd18      	ble.n	800e346 <_svfprintf_r+0x104a>
 800e314:	0039      	movs	r1, r7
 800e316:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e318:	483f      	ldr	r0, [pc, #252]	; (800e418 <_svfprintf_r+0x111c>)
 800e31a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e31c:	3301      	adds	r3, #1
 800e31e:	3108      	adds	r1, #8
 800e320:	6038      	str	r0, [r7, #0]
 800e322:	2c10      	cmp	r4, #16
 800e324:	dc7a      	bgt.n	800e41c <_svfprintf_r+0x1120>
 800e326:	607c      	str	r4, [r7, #4]
 800e328:	18a4      	adds	r4, r4, r2
 800e32a:	000f      	movs	r7, r1
 800e32c:	942e      	str	r4, [sp, #184]	; 0xb8
 800e32e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e330:	2b07      	cmp	r3, #7
 800e332:	dd08      	ble.n	800e346 <_svfprintf_r+0x104a>
 800e334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e336:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e338:	aa2c      	add	r2, sp, #176	; 0xb0
 800e33a:	f003 f86f 	bl	801141c <__ssprint_r>
 800e33e:	2800      	cmp	r0, #0
 800e340:	d000      	beq.n	800e344 <_svfprintf_r+0x1048>
 800e342:	e1ba      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e344:	af2f      	add	r7, sp, #188	; 0xbc
 800e346:	9b08      	ldr	r3, [sp, #32]
 800e348:	195d      	adds	r5, r3, r5
 800e34a:	0573      	lsls	r3, r6, #21
 800e34c:	d50b      	bpl.n	800e366 <_svfprintf_r+0x106a>
 800e34e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e350:	2b00      	cmp	r3, #0
 800e352:	d176      	bne.n	800e442 <_svfprintf_r+0x1146>
 800e354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e356:	2b00      	cmp	r3, #0
 800e358:	d176      	bne.n	800e448 <_svfprintf_r+0x114c>
 800e35a:	9b08      	ldr	r3, [sp, #32]
 800e35c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e35e:	189b      	adds	r3, r3, r2
 800e360:	429d      	cmp	r5, r3
 800e362:	d900      	bls.n	800e366 <_svfprintf_r+0x106a>
 800e364:	001d      	movs	r5, r3
 800e366:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e36a:	4293      	cmp	r3, r2
 800e36c:	db01      	blt.n	800e372 <_svfprintf_r+0x1076>
 800e36e:	07f3      	lsls	r3, r6, #31
 800e370:	d516      	bpl.n	800e3a0 <_svfprintf_r+0x10a4>
 800e372:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e374:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e376:	603b      	str	r3, [r7, #0]
 800e378:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e37a:	607b      	str	r3, [r7, #4]
 800e37c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e37e:	3708      	adds	r7, #8
 800e380:	189b      	adds	r3, r3, r2
 800e382:	932e      	str	r3, [sp, #184]	; 0xb8
 800e384:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e386:	3301      	adds	r3, #1
 800e388:	932d      	str	r3, [sp, #180]	; 0xb4
 800e38a:	2b07      	cmp	r3, #7
 800e38c:	dd08      	ble.n	800e3a0 <_svfprintf_r+0x10a4>
 800e38e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e390:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e392:	aa2c      	add	r2, sp, #176	; 0xb0
 800e394:	f003 f842 	bl	801141c <__ssprint_r>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d000      	beq.n	800e39e <_svfprintf_r+0x10a2>
 800e39c:	e18d      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e39e:	af2f      	add	r7, sp, #188	; 0xbc
 800e3a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3a2:	9b08      	ldr	r3, [sp, #32]
 800e3a4:	4694      	mov	ip, r2
 800e3a6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e3a8:	4463      	add	r3, ip
 800e3aa:	1b5b      	subs	r3, r3, r5
 800e3ac:	1b14      	subs	r4, r2, r4
 800e3ae:	429c      	cmp	r4, r3
 800e3b0:	dd00      	ble.n	800e3b4 <_svfprintf_r+0x10b8>
 800e3b2:	001c      	movs	r4, r3
 800e3b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e3b6:	2c00      	cmp	r4, #0
 800e3b8:	dd12      	ble.n	800e3e0 <_svfprintf_r+0x10e4>
 800e3ba:	18e3      	adds	r3, r4, r3
 800e3bc:	932e      	str	r3, [sp, #184]	; 0xb8
 800e3be:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3c0:	603d      	str	r5, [r7, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	607c      	str	r4, [r7, #4]
 800e3c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	2b07      	cmp	r3, #7
 800e3cc:	dd08      	ble.n	800e3e0 <_svfprintf_r+0x10e4>
 800e3ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e3d2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e3d4:	f003 f822 	bl	801141c <__ssprint_r>
 800e3d8:	2800      	cmp	r0, #0
 800e3da:	d000      	beq.n	800e3de <_svfprintf_r+0x10e2>
 800e3dc:	e16d      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e3de:	af2f      	add	r7, sp, #188	; 0xbc
 800e3e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e3e4:	2510      	movs	r5, #16
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	43e2      	mvns	r2, r4
 800e3ea:	17d2      	asrs	r2, r2, #31
 800e3ec:	4014      	ands	r4, r2
 800e3ee:	1b1c      	subs	r4, r3, r4
 800e3f0:	2c00      	cmp	r4, #0
 800e3f2:	dc00      	bgt.n	800e3f6 <_svfprintf_r+0x10fa>
 800e3f4:	e6b0      	b.n	800e158 <_svfprintf_r+0xe5c>
 800e3f6:	0039      	movs	r1, r7
 800e3f8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e3fa:	4807      	ldr	r0, [pc, #28]	; (800e418 <_svfprintf_r+0x111c>)
 800e3fc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e3fe:	3301      	adds	r3, #1
 800e400:	3108      	adds	r1, #8
 800e402:	6038      	str	r0, [r7, #0]
 800e404:	2c10      	cmp	r4, #16
 800e406:	dd00      	ble.n	800e40a <_svfprintf_r+0x110e>
 800e408:	e096      	b.n	800e538 <_svfprintf_r+0x123c>
 800e40a:	1912      	adds	r2, r2, r4
 800e40c:	607c      	str	r4, [r7, #4]
 800e40e:	922e      	str	r2, [sp, #184]	; 0xb8
 800e410:	e6dd      	b.n	800e1ce <_svfprintf_r+0xed2>
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	080148ce 	.word	0x080148ce
 800e418:	080148e0 	.word	0x080148e0
 800e41c:	2010      	movs	r0, #16
 800e41e:	1812      	adds	r2, r2, r0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	922e      	str	r2, [sp, #184]	; 0xb8
 800e424:	932d      	str	r3, [sp, #180]	; 0xb4
 800e426:	2b07      	cmp	r3, #7
 800e428:	dd08      	ble.n	800e43c <_svfprintf_r+0x1140>
 800e42a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e42c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e42e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e430:	f002 fff4 	bl	801141c <__ssprint_r>
 800e434:	2800      	cmp	r0, #0
 800e436:	d000      	beq.n	800e43a <_svfprintf_r+0x113e>
 800e438:	e13f      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e43a:	a92f      	add	r1, sp, #188	; 0xbc
 800e43c:	000f      	movs	r7, r1
 800e43e:	3c10      	subs	r4, #16
 800e440:	e768      	b.n	800e314 <_svfprintf_r+0x1018>
 800e442:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e444:	2b00      	cmp	r3, #0
 800e446:	d05d      	beq.n	800e504 <_svfprintf_r+0x1208>
 800e448:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e44a:	3b01      	subs	r3, #1
 800e44c:	9310      	str	r3, [sp, #64]	; 0x40
 800e44e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e450:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e452:	603b      	str	r3, [r7, #0]
 800e454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e456:	607b      	str	r3, [r7, #4]
 800e458:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e45a:	3708      	adds	r7, #8
 800e45c:	189b      	adds	r3, r3, r2
 800e45e:	932e      	str	r3, [sp, #184]	; 0xb8
 800e460:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e462:	3301      	adds	r3, #1
 800e464:	932d      	str	r3, [sp, #180]	; 0xb4
 800e466:	2b07      	cmp	r3, #7
 800e468:	dd08      	ble.n	800e47c <_svfprintf_r+0x1180>
 800e46a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e46c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e46e:	aa2c      	add	r2, sp, #176	; 0xb0
 800e470:	f002 ffd4 	bl	801141c <__ssprint_r>
 800e474:	2800      	cmp	r0, #0
 800e476:	d000      	beq.n	800e47a <_svfprintf_r+0x117e>
 800e478:	e11f      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e47a:	af2f      	add	r7, sp, #188	; 0xbc
 800e47c:	9b08      	ldr	r3, [sp, #32]
 800e47e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e480:	189c      	adds	r4, r3, r2
 800e482:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e484:	1b64      	subs	r4, r4, r5
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	429c      	cmp	r4, r3
 800e48a:	dd00      	ble.n	800e48e <_svfprintf_r+0x1192>
 800e48c:	001c      	movs	r4, r3
 800e48e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e490:	2c00      	cmp	r4, #0
 800e492:	dd12      	ble.n	800e4ba <_svfprintf_r+0x11be>
 800e494:	18e3      	adds	r3, r4, r3
 800e496:	932e      	str	r3, [sp, #184]	; 0xb8
 800e498:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e49a:	603d      	str	r5, [r7, #0]
 800e49c:	3301      	adds	r3, #1
 800e49e:	607c      	str	r4, [r7, #4]
 800e4a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4a2:	3708      	adds	r7, #8
 800e4a4:	2b07      	cmp	r3, #7
 800e4a6:	dd08      	ble.n	800e4ba <_svfprintf_r+0x11be>
 800e4a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4ac:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4ae:	f002 ffb5 	bl	801141c <__ssprint_r>
 800e4b2:	2800      	cmp	r0, #0
 800e4b4:	d000      	beq.n	800e4b8 <_svfprintf_r+0x11bc>
 800e4b6:	e100      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e4b8:	af2f      	add	r7, sp, #188	; 0xbc
 800e4ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4bc:	781a      	ldrb	r2, [r3, #0]
 800e4be:	43e3      	mvns	r3, r4
 800e4c0:	17db      	asrs	r3, r3, #31
 800e4c2:	401c      	ands	r4, r3
 800e4c4:	1b14      	subs	r4, r2, r4
 800e4c6:	2c00      	cmp	r4, #0
 800e4c8:	dd18      	ble.n	800e4fc <_svfprintf_r+0x1200>
 800e4ca:	0039      	movs	r1, r7
 800e4cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e4ce:	48aa      	ldr	r0, [pc, #680]	; (800e778 <_svfprintf_r+0x147c>)
 800e4d0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	3108      	adds	r1, #8
 800e4d6:	6038      	str	r0, [r7, #0]
 800e4d8:	2c10      	cmp	r4, #16
 800e4da:	dc1a      	bgt.n	800e512 <_svfprintf_r+0x1216>
 800e4dc:	1912      	adds	r2, r2, r4
 800e4de:	607c      	str	r4, [r7, #4]
 800e4e0:	922e      	str	r2, [sp, #184]	; 0xb8
 800e4e2:	000f      	movs	r7, r1
 800e4e4:	932d      	str	r3, [sp, #180]	; 0xb4
 800e4e6:	2b07      	cmp	r3, #7
 800e4e8:	dd08      	ble.n	800e4fc <_svfprintf_r+0x1200>
 800e4ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e4ee:	aa2c      	add	r2, sp, #176	; 0xb0
 800e4f0:	f002 ff94 	bl	801141c <__ssprint_r>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d000      	beq.n	800e4fa <_svfprintf_r+0x11fe>
 800e4f8:	e0df      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e4fa:	af2f      	add	r7, sp, #188	; 0xbc
 800e4fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	18ed      	adds	r5, r5, r3
 800e502:	e724      	b.n	800e34e <_svfprintf_r+0x1052>
 800e504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e506:	3b01      	subs	r3, #1
 800e508:	9312      	str	r3, [sp, #72]	; 0x48
 800e50a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e50c:	3b01      	subs	r3, #1
 800e50e:	9311      	str	r3, [sp, #68]	; 0x44
 800e510:	e79d      	b.n	800e44e <_svfprintf_r+0x1152>
 800e512:	2010      	movs	r0, #16
 800e514:	1812      	adds	r2, r2, r0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	922e      	str	r2, [sp, #184]	; 0xb8
 800e51a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e51c:	2b07      	cmp	r3, #7
 800e51e:	dd08      	ble.n	800e532 <_svfprintf_r+0x1236>
 800e520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e522:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e524:	aa2c      	add	r2, sp, #176	; 0xb0
 800e526:	f002 ff79 	bl	801141c <__ssprint_r>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d000      	beq.n	800e530 <_svfprintf_r+0x1234>
 800e52e:	e0c4      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e530:	a92f      	add	r1, sp, #188	; 0xbc
 800e532:	000f      	movs	r7, r1
 800e534:	3c10      	subs	r4, #16
 800e536:	e7c8      	b.n	800e4ca <_svfprintf_r+0x11ce>
 800e538:	3210      	adds	r2, #16
 800e53a:	607d      	str	r5, [r7, #4]
 800e53c:	922e      	str	r2, [sp, #184]	; 0xb8
 800e53e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e540:	2b07      	cmp	r3, #7
 800e542:	dd08      	ble.n	800e556 <_svfprintf_r+0x125a>
 800e544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e546:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e548:	aa2c      	add	r2, sp, #176	; 0xb0
 800e54a:	f002 ff67 	bl	801141c <__ssprint_r>
 800e54e:	2800      	cmp	r0, #0
 800e550:	d000      	beq.n	800e554 <_svfprintf_r+0x1258>
 800e552:	e0b2      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e554:	a92f      	add	r1, sp, #188	; 0xbc
 800e556:	000f      	movs	r7, r1
 800e558:	3c10      	subs	r4, #16
 800e55a:	e74c      	b.n	800e3f6 <_svfprintf_r+0x10fa>
 800e55c:	003c      	movs	r4, r7
 800e55e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e560:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e564:	3101      	adds	r1, #1
 800e566:	3301      	adds	r3, #1
 800e568:	3408      	adds	r4, #8
 800e56a:	2a01      	cmp	r2, #1
 800e56c:	dc03      	bgt.n	800e576 <_svfprintf_r+0x127a>
 800e56e:	2201      	movs	r2, #1
 800e570:	4216      	tst	r6, r2
 800e572:	d100      	bne.n	800e576 <_svfprintf_r+0x127a>
 800e574:	e07f      	b.n	800e676 <_svfprintf_r+0x137a>
 800e576:	9a08      	ldr	r2, [sp, #32]
 800e578:	912e      	str	r1, [sp, #184]	; 0xb8
 800e57a:	603a      	str	r2, [r7, #0]
 800e57c:	2201      	movs	r2, #1
 800e57e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e580:	607a      	str	r2, [r7, #4]
 800e582:	2b07      	cmp	r3, #7
 800e584:	dd08      	ble.n	800e598 <_svfprintf_r+0x129c>
 800e586:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e588:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e58a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e58c:	f002 ff46 	bl	801141c <__ssprint_r>
 800e590:	2800      	cmp	r0, #0
 800e592:	d000      	beq.n	800e596 <_svfprintf_r+0x129a>
 800e594:	e091      	b.n	800e6ba <_svfprintf_r+0x13be>
 800e596:	ac2f      	add	r4, sp, #188	; 0xbc
 800e598:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800e59a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e59c:	6023      	str	r3, [r4, #0]
 800e59e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5a0:	6063      	str	r3, [r4, #4]
 800e5a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e5a4:	3408      	adds	r4, #8
 800e5a6:	189b      	adds	r3, r3, r2
 800e5a8:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5aa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	932d      	str	r3, [sp, #180]	; 0xb4
 800e5b0:	2b07      	cmp	r3, #7
 800e5b2:	dd07      	ble.n	800e5c4 <_svfprintf_r+0x12c8>
 800e5b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5b8:	aa2c      	add	r2, sp, #176	; 0xb0
 800e5ba:	f002 ff2f 	bl	801141c <__ssprint_r>
 800e5be:	2800      	cmp	r0, #0
 800e5c0:	d17b      	bne.n	800e6ba <_svfprintf_r+0x13be>
 800e5c2:	ac2f      	add	r4, sp, #188	; 0xbc
 800e5c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e5ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5d0:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800e5d2:	1e5d      	subs	r5, r3, #1
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	f7f1 ff37 	bl	8000448 <__aeabi_dcmpeq>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	d126      	bne.n	800e62c <_svfprintf_r+0x1330>
 800e5de:	9b08      	ldr	r3, [sp, #32]
 800e5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800e5e6:	6023      	str	r3, [r4, #0]
 800e5e8:	1e7b      	subs	r3, r7, #1
 800e5ea:	3201      	adds	r2, #1
 800e5ec:	185b      	adds	r3, r3, r1
 800e5ee:	6065      	str	r5, [r4, #4]
 800e5f0:	932e      	str	r3, [sp, #184]	; 0xb8
 800e5f2:	922d      	str	r2, [sp, #180]	; 0xb4
 800e5f4:	3408      	adds	r4, #8
 800e5f6:	2a07      	cmp	r2, #7
 800e5f8:	dd07      	ble.n	800e60a <_svfprintf_r+0x130e>
 800e5fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e5fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e5fe:	aa2c      	add	r2, sp, #176	; 0xb0
 800e600:	f002 ff0c 	bl	801141c <__ssprint_r>
 800e604:	2800      	cmp	r0, #0
 800e606:	d158      	bne.n	800e6ba <_svfprintf_r+0x13be>
 800e608:	ac2f      	add	r4, sp, #188	; 0xbc
 800e60a:	ab28      	add	r3, sp, #160	; 0xa0
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e610:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e612:	6063      	str	r3, [r4, #4]
 800e614:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e616:	189b      	adds	r3, r3, r2
 800e618:	932e      	str	r3, [sp, #184]	; 0xb8
 800e61a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e61c:	3301      	adds	r3, #1
 800e61e:	932d      	str	r3, [sp, #180]	; 0xb4
 800e620:	2b07      	cmp	r3, #7
 800e622:	dd00      	ble.n	800e626 <_svfprintf_r+0x132a>
 800e624:	e638      	b.n	800e298 <_svfprintf_r+0xf9c>
 800e626:	3408      	adds	r4, #8
 800e628:	0027      	movs	r7, r4
 800e62a:	e595      	b.n	800e158 <_svfprintf_r+0xe5c>
 800e62c:	2710      	movs	r7, #16
 800e62e:	2d00      	cmp	r5, #0
 800e630:	ddeb      	ble.n	800e60a <_svfprintf_r+0x130e>
 800e632:	0021      	movs	r1, r4
 800e634:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e636:	4850      	ldr	r0, [pc, #320]	; (800e778 <_svfprintf_r+0x147c>)
 800e638:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e63a:	3301      	adds	r3, #1
 800e63c:	3108      	adds	r1, #8
 800e63e:	6020      	str	r0, [r4, #0]
 800e640:	2d10      	cmp	r5, #16
 800e642:	dc07      	bgt.n	800e654 <_svfprintf_r+0x1358>
 800e644:	6065      	str	r5, [r4, #4]
 800e646:	000c      	movs	r4, r1
 800e648:	18ad      	adds	r5, r5, r2
 800e64a:	952e      	str	r5, [sp, #184]	; 0xb8
 800e64c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e64e:	2b07      	cmp	r3, #7
 800e650:	dddb      	ble.n	800e60a <_svfprintf_r+0x130e>
 800e652:	e7d2      	b.n	800e5fa <_svfprintf_r+0x12fe>
 800e654:	3210      	adds	r2, #16
 800e656:	6067      	str	r7, [r4, #4]
 800e658:	922e      	str	r2, [sp, #184]	; 0xb8
 800e65a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e65c:	2b07      	cmp	r3, #7
 800e65e:	dd07      	ble.n	800e670 <_svfprintf_r+0x1374>
 800e660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e662:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e664:	aa2c      	add	r2, sp, #176	; 0xb0
 800e666:	f002 fed9 	bl	801141c <__ssprint_r>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d125      	bne.n	800e6ba <_svfprintf_r+0x13be>
 800e66e:	a92f      	add	r1, sp, #188	; 0xbc
 800e670:	000c      	movs	r4, r1
 800e672:	3d10      	subs	r5, #16
 800e674:	e7dd      	b.n	800e632 <_svfprintf_r+0x1336>
 800e676:	9808      	ldr	r0, [sp, #32]
 800e678:	912e      	str	r1, [sp, #184]	; 0xb8
 800e67a:	c705      	stmia	r7!, {r0, r2}
 800e67c:	932d      	str	r3, [sp, #180]	; 0xb4
 800e67e:	e7e6      	b.n	800e64e <_svfprintf_r+0x1352>
 800e680:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e682:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800e684:	2510      	movs	r5, #16
 800e686:	1a9c      	subs	r4, r3, r2
 800e688:	2c00      	cmp	r4, #0
 800e68a:	dc00      	bgt.n	800e68e <_svfprintf_r+0x1392>
 800e68c:	e567      	b.n	800e15e <_svfprintf_r+0xe62>
 800e68e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e690:	493a      	ldr	r1, [pc, #232]	; (800e77c <_svfprintf_r+0x1480>)
 800e692:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800e694:	3301      	adds	r3, #1
 800e696:	6039      	str	r1, [r7, #0]
 800e698:	2c10      	cmp	r4, #16
 800e69a:	dc19      	bgt.n	800e6d0 <_svfprintf_r+0x13d4>
 800e69c:	607c      	str	r4, [r7, #4]
 800e69e:	18a4      	adds	r4, r4, r2
 800e6a0:	942e      	str	r4, [sp, #184]	; 0xb8
 800e6a2:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6a4:	2b07      	cmp	r3, #7
 800e6a6:	dc00      	bgt.n	800e6aa <_svfprintf_r+0x13ae>
 800e6a8:	e559      	b.n	800e15e <_svfprintf_r+0xe62>
 800e6aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6ae:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6b0:	f002 feb4 	bl	801141c <__ssprint_r>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d100      	bne.n	800e6ba <_svfprintf_r+0x13be>
 800e6b8:	e551      	b.n	800e15e <_svfprintf_r+0xe62>
 800e6ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <_svfprintf_r+0x13c8>
 800e6c0:	f7ff f845 	bl	800d74e <_svfprintf_r+0x452>
 800e6c4:	0019      	movs	r1, r3
 800e6c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6c8:	f7fd fd80 	bl	800c1cc <_free_r>
 800e6cc:	f7ff f83f 	bl	800d74e <_svfprintf_r+0x452>
 800e6d0:	3210      	adds	r2, #16
 800e6d2:	607d      	str	r5, [r7, #4]
 800e6d4:	922e      	str	r2, [sp, #184]	; 0xb8
 800e6d6:	932d      	str	r3, [sp, #180]	; 0xb4
 800e6d8:	3708      	adds	r7, #8
 800e6da:	2b07      	cmp	r3, #7
 800e6dc:	dd07      	ble.n	800e6ee <_svfprintf_r+0x13f2>
 800e6de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e6e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6e2:	aa2c      	add	r2, sp, #176	; 0xb0
 800e6e4:	f002 fe9a 	bl	801141c <__ssprint_r>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d1e6      	bne.n	800e6ba <_svfprintf_r+0x13be>
 800e6ec:	af2f      	add	r7, sp, #188	; 0xbc
 800e6ee:	3c10      	subs	r4, #16
 800e6f0:	e7cd      	b.n	800e68e <_svfprintf_r+0x1392>
 800e6f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e6f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6f6:	f7fd fd69 	bl	800c1cc <_free_r>
 800e6fa:	e549      	b.n	800e190 <_svfprintf_r+0xe94>
 800e6fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d101      	bne.n	800e706 <_svfprintf_r+0x140a>
 800e702:	f7ff f824 	bl	800d74e <_svfprintf_r+0x452>
 800e706:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e708:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e70a:	aa2c      	add	r2, sp, #176	; 0xb0
 800e70c:	f002 fe86 	bl	801141c <__ssprint_r>
 800e710:	f7ff f81d 	bl	800d74e <_svfprintf_r+0x452>
 800e714:	0034      	movs	r4, r6
 800e716:	2a00      	cmp	r2, #0
 800e718:	d101      	bne.n	800e71e <_svfprintf_r+0x1422>
 800e71a:	f7fe ff8c 	bl	800d636 <_svfprintf_r+0x33a>
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d101      	bne.n	800e726 <_svfprintf_r+0x142a>
 800e722:	f7ff fc01 	bl	800df28 <_svfprintf_r+0xc2c>
 800e726:	2b02      	cmp	r3, #2
 800e728:	d100      	bne.n	800e72c <_svfprintf_r+0x1430>
 800e72a:	e459      	b.n	800dfe0 <_svfprintf_r+0xce4>
 800e72c:	2507      	movs	r5, #7
 800e72e:	ab58      	add	r3, sp, #352	; 0x160
 800e730:	9308      	str	r3, [sp, #32]
 800e732:	9a08      	ldr	r2, [sp, #32]
 800e734:	0013      	movs	r3, r2
 800e736:	3b01      	subs	r3, #1
 800e738:	9308      	str	r3, [sp, #32]
 800e73a:	9b06      	ldr	r3, [sp, #24]
 800e73c:	9908      	ldr	r1, [sp, #32]
 800e73e:	402b      	ands	r3, r5
 800e740:	3330      	adds	r3, #48	; 0x30
 800e742:	700b      	strb	r3, [r1, #0]
 800e744:	9907      	ldr	r1, [sp, #28]
 800e746:	074e      	lsls	r6, r1, #29
 800e748:	9906      	ldr	r1, [sp, #24]
 800e74a:	08c8      	lsrs	r0, r1, #3
 800e74c:	9907      	ldr	r1, [sp, #28]
 800e74e:	4306      	orrs	r6, r0
 800e750:	08c9      	lsrs	r1, r1, #3
 800e752:	9107      	str	r1, [sp, #28]
 800e754:	0031      	movs	r1, r6
 800e756:	9807      	ldr	r0, [sp, #28]
 800e758:	9606      	str	r6, [sp, #24]
 800e75a:	4301      	orrs	r1, r0
 800e75c:	d1e9      	bne.n	800e732 <_svfprintf_r+0x1436>
 800e75e:	07e1      	lsls	r1, r4, #31
 800e760:	d400      	bmi.n	800e764 <_svfprintf_r+0x1468>
 800e762:	e42a      	b.n	800dfba <_svfprintf_r+0xcbe>
 800e764:	2b30      	cmp	r3, #48	; 0x30
 800e766:	d100      	bne.n	800e76a <_svfprintf_r+0x146e>
 800e768:	e427      	b.n	800dfba <_svfprintf_r+0xcbe>
 800e76a:	2130      	movs	r1, #48	; 0x30
 800e76c:	9b08      	ldr	r3, [sp, #32]
 800e76e:	3b01      	subs	r3, #1
 800e770:	7019      	strb	r1, [r3, #0]
 800e772:	1e93      	subs	r3, r2, #2
 800e774:	9308      	str	r3, [sp, #32]
 800e776:	e420      	b.n	800dfba <_svfprintf_r+0xcbe>
 800e778:	080148e0 	.word	0x080148e0
 800e77c:	080148d0 	.word	0x080148d0

0800e780 <__ssvfscanf_r>:
 800e780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e782:	4ca7      	ldr	r4, [pc, #668]	; (800ea20 <__ssvfscanf_r+0x2a0>)
 800e784:	44a5      	add	sp, r4
 800e786:	af02      	add	r7, sp, #8
 800e788:	633b      	str	r3, [r7, #48]	; 0x30
 800e78a:	000b      	movs	r3, r1
 800e78c:	6378      	str	r0, [r7, #52]	; 0x34
 800e78e:	6479      	str	r1, [r7, #68]	; 0x44
 800e790:	61ba      	str	r2, [r7, #24]
 800e792:	220c      	movs	r2, #12
 800e794:	5e9a      	ldrsh	r2, [r3, r2]
 800e796:	2380      	movs	r3, #128	; 0x80
 800e798:	019b      	lsls	r3, r3, #6
 800e79a:	421a      	tst	r2, r3
 800e79c:	d105      	bne.n	800e7aa <__ssvfscanf_r+0x2a>
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	818b      	strh	r3, [r1, #12]
 800e7a2:	4aa0      	ldr	r2, [pc, #640]	; (800ea24 <__ssvfscanf_r+0x2a4>)
 800e7a4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	664b      	str	r3, [r1, #100]	; 0x64
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	643b      	str	r3, [r7, #64]	; 0x40
 800e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e7b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	69ba      	ldr	r2, [r7, #24]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	3201      	adds	r2, #1
 800e7c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7c2:	61ba      	str	r2, [r7, #24]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d100      	bne.n	800e7ca <__ssvfscanf_r+0x4a>
 800e7c8:	e0d7      	b.n	800e97a <__ssvfscanf_r+0x1fa>
 800e7ca:	2608      	movs	r6, #8
 800e7cc:	2108      	movs	r1, #8
 800e7ce:	4a96      	ldr	r2, [pc, #600]	; (800ea28 <__ssvfscanf_r+0x2a8>)
 800e7d0:	5cd2      	ldrb	r2, [r2, r3]
 800e7d2:	4016      	ands	r6, r2
 800e7d4:	420a      	tst	r2, r1
 800e7d6:	d01d      	beq.n	800e814 <__ssvfscanf_r+0x94>
 800e7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	dd12      	ble.n	800e806 <__ssvfscanf_r+0x86>
 800e7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7e2:	4991      	ldr	r1, [pc, #580]	; (800ea28 <__ssvfscanf_r+0x2a8>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	781a      	ldrb	r2, [r3, #0]
 800e7e8:	5c8a      	ldrb	r2, [r1, r2]
 800e7ea:	2108      	movs	r1, #8
 800e7ec:	420a      	tst	r2, r1
 800e7ee:	d0e3      	beq.n	800e7b8 <__ssvfscanf_r+0x38>
 800e7f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7f4:	3201      	adds	r2, #1
 800e7f6:	63ba      	str	r2, [r7, #56]	; 0x38
 800e7f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	6852      	ldr	r2, [r2, #4]
 800e7fe:	600b      	str	r3, [r1, #0]
 800e800:	3a01      	subs	r2, #1
 800e802:	604a      	str	r2, [r1, #4]
 800e804:	e7e8      	b.n	800e7d8 <__ssvfscanf_r+0x58>
 800e806:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e808:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e80a:	f002 fec7 	bl	801159c <__ssrefill_r>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d0e6      	beq.n	800e7e0 <__ssvfscanf_r+0x60>
 800e812:	e7d1      	b.n	800e7b8 <__ssvfscanf_r+0x38>
 800e814:	2b25      	cmp	r3, #37	; 0x25
 800e816:	d165      	bne.n	800e8e4 <__ssvfscanf_r+0x164>
 800e818:	250a      	movs	r5, #10
 800e81a:	2480      	movs	r4, #128	; 0x80
 800e81c:	69ba      	ldr	r2, [r7, #24]
 800e81e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800e820:	3b16      	subs	r3, #22
 800e822:	69b9      	ldr	r1, [r7, #24]
 800e824:	3101      	adds	r1, #1
 800e826:	61b9      	str	r1, [r7, #24]
 800e828:	7811      	ldrb	r1, [r2, #0]
 800e82a:	0008      	movs	r0, r1
 800e82c:	3825      	subs	r0, #37	; 0x25
 800e82e:	2855      	cmp	r0, #85	; 0x55
 800e830:	d900      	bls.n	800e834 <__ssvfscanf_r+0xb4>
 800e832:	e170      	b.n	800eb16 <__ssvfscanf_r+0x396>
 800e834:	f7f1 fc78 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e838:	016f0056 	.word	0x016f0056
 800e83c:	016f016f 	.word	0x016f016f
 800e840:	0081016f 	.word	0x0081016f
 800e844:	016f016f 	.word	0x016f016f
 800e848:	016f016f 	.word	0x016f016f
 800e84c:	00b8016f 	.word	0x00b8016f
 800e850:	00b800b8 	.word	0x00b800b8
 800e854:	00b800b8 	.word	0x00b800b8
 800e858:	00b800b8 	.word	0x00b800b8
 800e85c:	00b800b8 	.word	0x00b800b8
 800e860:	016f00b8 	.word	0x016f00b8
 800e864:	016f016f 	.word	0x016f016f
 800e868:	016f016f 	.word	0x016f016f
 800e86c:	016f016f 	.word	0x016f016f
 800e870:	016f00d8 	.word	0x016f00d8
 800e874:	00c1010a 	.word	0x00c1010a
 800e878:	00d800d8 	.word	0x00d800d8
 800e87c:	016f00d8 	.word	0x016f00d8
 800e880:	016f016f 	.word	0x016f016f
 800e884:	009f016f 	.word	0x009f016f
 800e888:	016f016f 	.word	0x016f016f
 800e88c:	016f00c9 	.word	0x016f00c9
 800e890:	016f016f 	.word	0x016f016f
 800e894:	016f00f0 	.word	0x016f00f0
 800e898:	016f016f 	.word	0x016f016f
 800e89c:	00d1016f 	.word	0x00d1016f
 800e8a0:	016f016f 	.word	0x016f016f
 800e8a4:	016f00fe 	.word	0x016f00fe
 800e8a8:	016f016f 	.word	0x016f016f
 800e8ac:	016f016f 	.word	0x016f016f
 800e8b0:	016f00d8 	.word	0x016f00d8
 800e8b4:	00c3010c 	.word	0x00c3010c
 800e8b8:	00d800d8 	.word	0x00d800d8
 800e8bc:	009400d8 	.word	0x009400d8
 800e8c0:	009f012f 	.word	0x009f012f
 800e8c4:	0088016f 	.word	0x0088016f
 800e8c8:	011200a9 	.word	0x011200a9
 800e8cc:	011000cb 	.word	0x011000cb
 800e8d0:	016f016f 	.word	0x016f016f
 800e8d4:	00a600f2 	.word	0x00a600f2
 800e8d8:	016f00cf 	.word	0x016f00cf
 800e8dc:	00d1016f 	.word	0x00d1016f
 800e8e0:	00a6016f 	.word	0x00a6016f
 800e8e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	dd12      	ble.n	800e912 <__ssvfscanf_r+0x192>
 800e8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8ee:	69ba      	ldr	r2, [r7, #24]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	3a01      	subs	r2, #1
 800e8f4:	7819      	ldrb	r1, [r3, #0]
 800e8f6:	7812      	ldrb	r2, [r2, #0]
 800e8f8:	4291      	cmp	r1, r2
 800e8fa:	d13e      	bne.n	800e97a <__ssvfscanf_r+0x1fa>
 800e8fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e900:	6852      	ldr	r2, [r2, #4]
 800e902:	3301      	adds	r3, #1
 800e904:	600b      	str	r3, [r1, #0]
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	3a01      	subs	r2, #1
 800e90a:	604a      	str	r2, [r1, #4]
 800e90c:	3301      	adds	r3, #1
 800e90e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e910:	e752      	b.n	800e7b8 <__ssvfscanf_r+0x38>
 800e912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e914:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e916:	f002 fe41 	bl	801159c <__ssrefill_r>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d0e6      	beq.n	800e8ec <__ssvfscanf_r+0x16c>
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	2b00      	cmp	r3, #0
 800e922:	d003      	beq.n	800e92c <__ssvfscanf_r+0x1ac>
 800e924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e926:	899b      	ldrh	r3, [r3, #12]
 800e928:	065b      	lsls	r3, r3, #25
 800e92a:	d526      	bpl.n	800e97a <__ssvfscanf_r+0x1fa>
 800e92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d000      	beq.n	800e934 <__ssvfscanf_r+0x1b4>
 800e932:	e0f6      	b.n	800eb22 <__ssvfscanf_r+0x3a2>
 800e934:	3b01      	subs	r3, #1
 800e936:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e938:	e104      	b.n	800eb44 <__ssvfscanf_r+0x3c4>
 800e93a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e93c:	4332      	orrs	r2, r6
 800e93e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e940:	d11b      	bne.n	800e97a <__ssvfscanf_r+0x1fa>
 800e942:	2610      	movs	r6, #16
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	e76c      	b.n	800e822 <__ssvfscanf_r+0xa2>
 800e948:	421e      	tst	r6, r3
 800e94a:	d116      	bne.n	800e97a <__ssvfscanf_r+0x1fa>
 800e94c:	7851      	ldrb	r1, [r2, #1]
 800e94e:	296c      	cmp	r1, #108	; 0x6c
 800e950:	d103      	bne.n	800e95a <__ssvfscanf_r+0x1da>
 800e952:	3202      	adds	r2, #2
 800e954:	61ba      	str	r2, [r7, #24]
 800e956:	2202      	movs	r2, #2
 800e958:	e000      	b.n	800e95c <__ssvfscanf_r+0x1dc>
 800e95a:	2201      	movs	r2, #1
 800e95c:	4316      	orrs	r6, r2
 800e95e:	e7f1      	b.n	800e944 <__ssvfscanf_r+0x1c4>
 800e960:	421e      	tst	r6, r3
 800e962:	d10a      	bne.n	800e97a <__ssvfscanf_r+0x1fa>
 800e964:	7851      	ldrb	r1, [r2, #1]
 800e966:	2968      	cmp	r1, #104	; 0x68
 800e968:	d103      	bne.n	800e972 <__ssvfscanf_r+0x1f2>
 800e96a:	3202      	adds	r2, #2
 800e96c:	61ba      	str	r2, [r7, #24]
 800e96e:	2208      	movs	r2, #8
 800e970:	e7f4      	b.n	800e95c <__ssvfscanf_r+0x1dc>
 800e972:	2204      	movs	r2, #4
 800e974:	e7f2      	b.n	800e95c <__ssvfscanf_r+0x1dc>
 800e976:	421e      	tst	r6, r3
 800e978:	d0ed      	beq.n	800e956 <__ssvfscanf_r+0x1d6>
 800e97a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d000      	beq.n	800e982 <__ssvfscanf_r+0x202>
 800e980:	e0da      	b.n	800eb38 <__ssvfscanf_r+0x3b8>
 800e982:	e0df      	b.n	800eb44 <__ssvfscanf_r+0x3c4>
 800e984:	421e      	tst	r6, r3
 800e986:	d0dd      	beq.n	800e944 <__ssvfscanf_r+0x1c4>
 800e988:	e7f7      	b.n	800e97a <__ssvfscanf_r+0x1fa>
 800e98a:	228f      	movs	r2, #143	; 0x8f
 800e98c:	218f      	movs	r1, #143	; 0x8f
 800e98e:	4032      	ands	r2, r6
 800e990:	420e      	tst	r6, r1
 800e992:	d1f2      	bne.n	800e97a <__ssvfscanf_r+0x1fa>
 800e994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e996:	2900      	cmp	r1, #0
 800e998:	d104      	bne.n	800e9a4 <__ssvfscanf_r+0x224>
 800e99a:	b082      	sub	sp, #8
 800e99c:	a902      	add	r1, sp, #8
 800e99e:	6439      	str	r1, [r7, #64]	; 0x40
 800e9a0:	600a      	str	r2, [r1, #0]
 800e9a2:	604a      	str	r2, [r1, #4]
 800e9a4:	4326      	orrs	r6, r4
 800e9a6:	e7cd      	b.n	800e944 <__ssvfscanf_r+0x1c4>
 800e9a8:	228f      	movs	r2, #143	; 0x8f
 800e9aa:	4216      	tst	r6, r2
 800e9ac:	d1e5      	bne.n	800e97a <__ssvfscanf_r+0x1fa>
 800e9ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e9b0:	436a      	muls	r2, r5
 800e9b2:	3a30      	subs	r2, #48	; 0x30
 800e9b4:	188a      	adds	r2, r1, r2
 800e9b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e9b8:	e7c4      	b.n	800e944 <__ssvfscanf_r+0x1c4>
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	431e      	orrs	r6, r3
 800e9be:	4b1b      	ldr	r3, [pc, #108]	; (800ea2c <__ssvfscanf_r+0x2ac>)
 800e9c0:	617b      	str	r3, [r7, #20]
 800e9c2:	230a      	movs	r3, #10
 800e9c4:	2403      	movs	r4, #3
 800e9c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e9c8:	e00f      	b.n	800e9ea <__ssvfscanf_r+0x26a>
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	431e      	orrs	r6, r3
 800e9ce:	4b18      	ldr	r3, [pc, #96]	; (800ea30 <__ssvfscanf_r+0x2b0>)
 800e9d0:	617b      	str	r3, [r7, #20]
 800e9d2:	2308      	movs	r3, #8
 800e9d4:	e7f6      	b.n	800e9c4 <__ssvfscanf_r+0x244>
 800e9d6:	4b16      	ldr	r3, [pc, #88]	; (800ea30 <__ssvfscanf_r+0x2b0>)
 800e9d8:	e7f2      	b.n	800e9c0 <__ssvfscanf_r+0x240>
 800e9da:	2380      	movs	r3, #128	; 0x80
 800e9dc:	009b      	lsls	r3, r3, #2
 800e9de:	431e      	orrs	r6, r3
 800e9e0:	4b13      	ldr	r3, [pc, #76]	; (800ea30 <__ssvfscanf_r+0x2b0>)
 800e9e2:	617b      	str	r3, [r7, #20]
 800e9e4:	2310      	movs	r3, #16
 800e9e6:	e7ed      	b.n	800e9c4 <__ssvfscanf_r+0x244>
 800e9e8:	2404      	movs	r4, #4
 800e9ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	dd55      	ble.n	800ea9e <__ssvfscanf_r+0x31e>
 800e9f2:	0673      	lsls	r3, r6, #25
 800e9f4:	d407      	bmi.n	800ea06 <__ssvfscanf_r+0x286>
 800e9f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f8:	490b      	ldr	r1, [pc, #44]	; (800ea28 <__ssvfscanf_r+0x2a8>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	781a      	ldrb	r2, [r3, #0]
 800e9fe:	5c8a      	ldrb	r2, [r1, r2]
 800ea00:	2108      	movs	r1, #8
 800ea02:	420a      	tst	r2, r1
 800ea04:	d152      	bne.n	800eaac <__ssvfscanf_r+0x32c>
 800ea06:	1e60      	subs	r0, r4, #1
 800ea08:	2803      	cmp	r0, #3
 800ea0a:	d863      	bhi.n	800ead4 <__ssvfscanf_r+0x354>
 800ea0c:	f7f1 fb8c 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ea10:	03bd01da 	.word	0x03bd01da
 800ea14:	068a0579 	.word	0x068a0579
 800ea18:	2301      	movs	r3, #1
 800ea1a:	431e      	orrs	r6, r3
 800ea1c:	2402      	movs	r4, #2
 800ea1e:	e7e4      	b.n	800e9ea <__ssvfscanf_r+0x26a>
 800ea20:	fffffd34 	.word	0xfffffd34
 800ea24:	ffffdfff 	.word	0xffffdfff
 800ea28:	080145c9 	.word	0x080145c9
 800ea2c:	0800ba91 	.word	0x0800ba91
 800ea30:	0800bbb5 	.word	0x0800bbb5
 800ea34:	2248      	movs	r2, #72	; 0x48
 800ea36:	2318      	movs	r3, #24
 800ea38:	189b      	adds	r3, r3, r2
 800ea3a:	19d8      	adds	r0, r3, r7
 800ea3c:	69b9      	ldr	r1, [r7, #24]
 800ea3e:	f001 f9d7 	bl	800fdf0 <__sccl>
 800ea42:	2340      	movs	r3, #64	; 0x40
 800ea44:	2401      	movs	r4, #1
 800ea46:	61b8      	str	r0, [r7, #24]
 800ea48:	431e      	orrs	r6, r3
 800ea4a:	e7ce      	b.n	800e9ea <__ssvfscanf_r+0x26a>
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	431e      	orrs	r6, r3
 800ea50:	2340      	movs	r3, #64	; 0x40
 800ea52:	2400      	movs	r4, #0
 800ea54:	431e      	orrs	r6, r3
 800ea56:	e7c8      	b.n	800e9ea <__ssvfscanf_r+0x26a>
 800ea58:	2388      	movs	r3, #136	; 0x88
 800ea5a:	e7bf      	b.n	800e9dc <__ssvfscanf_r+0x25c>
 800ea5c:	06f3      	lsls	r3, r6, #27
 800ea5e:	d500      	bpl.n	800ea62 <__ssvfscanf_r+0x2e2>
 800ea60:	e6aa      	b.n	800e7b8 <__ssvfscanf_r+0x38>
 800ea62:	2108      	movs	r1, #8
 800ea64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea66:	cb04      	ldmia	r3!, {r2}
 800ea68:	420e      	tst	r6, r1
 800ea6a:	d003      	beq.n	800ea74 <__ssvfscanf_r+0x2f4>
 800ea6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea6e:	7011      	strb	r1, [r2, #0]
 800ea70:	633b      	str	r3, [r7, #48]	; 0x30
 800ea72:	e6a1      	b.n	800e7b8 <__ssvfscanf_r+0x38>
 800ea74:	0771      	lsls	r1, r6, #29
 800ea76:	d502      	bpl.n	800ea7e <__ssvfscanf_r+0x2fe>
 800ea78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea7a:	8011      	strh	r1, [r2, #0]
 800ea7c:	e7f8      	b.n	800ea70 <__ssvfscanf_r+0x2f0>
 800ea7e:	07f1      	lsls	r1, r6, #31
 800ea80:	d502      	bpl.n	800ea88 <__ssvfscanf_r+0x308>
 800ea82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea84:	6011      	str	r1, [r2, #0]
 800ea86:	e7f3      	b.n	800ea70 <__ssvfscanf_r+0x2f0>
 800ea88:	07b6      	lsls	r6, r6, #30
 800ea8a:	d5fa      	bpl.n	800ea82 <__ssvfscanf_r+0x302>
 800ea8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea8e:	6011      	str	r1, [r2, #0]
 800ea90:	17c9      	asrs	r1, r1, #31
 800ea92:	6051      	str	r1, [r2, #4]
 800ea94:	e7ec      	b.n	800ea70 <__ssvfscanf_r+0x2f0>
 800ea96:	4ba2      	ldr	r3, [pc, #648]	; (800ed20 <__ssvfscanf_r+0x5a0>)
 800ea98:	617b      	str	r3, [r7, #20]
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	e792      	b.n	800e9c4 <__ssvfscanf_r+0x244>
 800ea9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eaa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eaa2:	f002 fd7b 	bl	801159c <__ssrefill_r>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d0a3      	beq.n	800e9f2 <__ssvfscanf_r+0x272>
 800eaaa:	e738      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800eaac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eaae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eab0:	3201      	adds	r2, #1
 800eab2:	63ba      	str	r2, [r7, #56]	; 0x38
 800eab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eab6:	6852      	ldr	r2, [r2, #4]
 800eab8:	3a01      	subs	r2, #1
 800eaba:	604a      	str	r2, [r1, #4]
 800eabc:	2a00      	cmp	r2, #0
 800eabe:	dd02      	ble.n	800eac6 <__ssvfscanf_r+0x346>
 800eac0:	3301      	adds	r3, #1
 800eac2:	600b      	str	r3, [r1, #0]
 800eac4:	e797      	b.n	800e9f6 <__ssvfscanf_r+0x276>
 800eac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eac8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eaca:	f002 fd67 	bl	801159c <__ssrefill_r>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d091      	beq.n	800e9f6 <__ssvfscanf_r+0x276>
 800ead2:	e724      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800ead4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ead6:	2301      	movs	r3, #1
 800ead8:	2a00      	cmp	r2, #0
 800eada:	d100      	bne.n	800eade <__ssvfscanf_r+0x35e>
 800eadc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eade:	2210      	movs	r2, #16
 800eae0:	0034      	movs	r4, r6
 800eae2:	4032      	ands	r2, r6
 800eae4:	623a      	str	r2, [r7, #32]
 800eae6:	401c      	ands	r4, r3
 800eae8:	421e      	tst	r6, r3
 800eaea:	d100      	bne.n	800eaee <__ssvfscanf_r+0x36e>
 800eaec:	e0f3      	b.n	800ecd6 <__ssvfscanf_r+0x556>
 800eaee:	2a00      	cmp	r2, #0
 800eaf0:	d000      	beq.n	800eaf4 <__ssvfscanf_r+0x374>
 800eaf2:	e0b6      	b.n	800ec62 <__ssvfscanf_r+0x4e2>
 800eaf4:	2080      	movs	r0, #128	; 0x80
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	cb10      	ldmia	r3!, {r4}
 800eafa:	613b      	str	r3, [r7, #16]
 800eafc:	4206      	tst	r6, r0
 800eafe:	d100      	bne.n	800eb02 <__ssvfscanf_r+0x382>
 800eb00:	e0b7      	b.n	800ec72 <__ssvfscanf_r+0x4f2>
 800eb02:	2c00      	cmp	r4, #0
 800eb04:	d007      	beq.n	800eb16 <__ssvfscanf_r+0x396>
 800eb06:	f7fb fecd 	bl	800a8a4 <malloc>
 800eb0a:	6338      	str	r0, [r7, #48]	; 0x30
 800eb0c:	2800      	cmp	r0, #0
 800eb0e:	d11f      	bne.n	800eb50 <__ssvfscanf_r+0x3d0>
 800eb10:	2301      	movs	r3, #1
 800eb12:	425b      	negs	r3, r3
 800eb14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d013      	beq.n	800eb44 <__ssvfscanf_r+0x3c4>
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	3301      	adds	r3, #1
 800eb20:	d10a      	bne.n	800eb38 <__ssvfscanf_r+0x3b8>
 800eb22:	2400      	movs	r4, #0
 800eb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb26:	681d      	ldr	r5, [r3, #0]
 800eb28:	88db      	ldrh	r3, [r3, #6]
 800eb2a:	42a3      	cmp	r3, r4
 800eb2c:	dd01      	ble.n	800eb32 <__ssvfscanf_r+0x3b2>
 800eb2e:	f001 f82a 	bl	800fb86 <__ssvfscanf_r+0x1406>
 800eb32:	2301      	movs	r3, #1
 800eb34:	425b      	negs	r3, r3
 800eb36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3a:	6818      	ldr	r0, [r3, #0]
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d001      	beq.n	800eb44 <__ssvfscanf_r+0x3c4>
 800eb40:	f7fb feba 	bl	800a8b8 <free>
 800eb44:	46bd      	mov	sp, r7
 800eb46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb48:	23b1      	movs	r3, #177	; 0xb1
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	449d      	add	sp, r3
 800eb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb52:	6023      	str	r3, [r4, #0]
 800eb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb56:	88de      	ldrh	r6, [r3, #6]
 800eb58:	889d      	ldrh	r5, [r3, #4]
 800eb5a:	42ae      	cmp	r6, r5
 800eb5c:	d30e      	bcc.n	800eb7c <__ssvfscanf_r+0x3fc>
 800eb5e:	4b71      	ldr	r3, [pc, #452]	; (800ed24 <__ssvfscanf_r+0x5a4>)
 800eb60:	429d      	cmp	r5, r3
 800eb62:	d8d5      	bhi.n	800eb10 <__ssvfscanf_r+0x390>
 800eb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb66:	3508      	adds	r5, #8
 800eb68:	b2ad      	uxth	r5, r5
 800eb6a:	6818      	ldr	r0, [r3, #0]
 800eb6c:	00a9      	lsls	r1, r5, #2
 800eb6e:	f002 f901 	bl	8010d74 <realloc>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	d0cc      	beq.n	800eb10 <__ssvfscanf_r+0x390>
 800eb76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb78:	6018      	str	r0, [r3, #0]
 800eb7a:	809d      	strh	r5, [r3, #4]
 800eb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb7e:	1c72      	adds	r2, r6, #1
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	00b6      	lsls	r6, r6, #2
 800eb84:	50f4      	str	r4, [r6, r3]
 800eb86:	2320      	movs	r3, #32
 800eb88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eb8a:	0026      	movs	r6, r4
 800eb8c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800eb8e:	80ca      	strh	r2, [r1, #6]
 800eb90:	61fb      	str	r3, [r7, #28]
 800eb92:	2500      	movs	r5, #0
 800eb94:	f7fd f9fe 	bl	800bf94 <__locale_mb_cur_max>
 800eb98:	42a8      	cmp	r0, r5
 800eb9a:	d100      	bne.n	800eb9e <__ssvfscanf_r+0x41e>
 800eb9c:	e6bf      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800eb9e:	1c6a      	adds	r2, r5, #1
 800eba0:	60fa      	str	r2, [r7, #12]
 800eba2:	228c      	movs	r2, #140	; 0x8c
 800eba4:	2048      	movs	r0, #72	; 0x48
 800eba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eba8:	0052      	lsls	r2, r2, #1
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	1812      	adds	r2, r2, r0
 800ebae:	7819      	ldrb	r1, [r3, #0]
 800ebb0:	19d2      	adds	r2, r2, r7
 800ebb2:	5551      	strb	r1, [r2, r5]
 800ebb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ebb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebb8:	6852      	ldr	r2, [r2, #4]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	600b      	str	r3, [r1, #0]
 800ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc0:	3a01      	subs	r2, #1
 800ebc2:	604a      	str	r2, [r1, #4]
 800ebc4:	2b03      	cmp	r3, #3
 800ebc6:	d102      	bne.n	800ebce <__ssvfscanf_r+0x44e>
 800ebc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebca:	2b04      	cmp	r3, #4
 800ebcc:	d007      	beq.n	800ebde <__ssvfscanf_r+0x45e>
 800ebce:	2048      	movs	r0, #72	; 0x48
 800ebd0:	2310      	movs	r3, #16
 800ebd2:	181b      	adds	r3, r3, r0
 800ebd4:	2208      	movs	r2, #8
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	19d8      	adds	r0, r3, r7
 800ebda:	f7fd f989 	bl	800bef0 <memset>
 800ebde:	2148      	movs	r1, #72	; 0x48
 800ebe0:	2310      	movs	r3, #16
 800ebe2:	228c      	movs	r2, #140	; 0x8c
 800ebe4:	185b      	adds	r3, r3, r1
 800ebe6:	0052      	lsls	r2, r2, #1
 800ebe8:	19db      	adds	r3, r3, r7
 800ebea:	1852      	adds	r2, r2, r1
 800ebec:	9300      	str	r3, [sp, #0]
 800ebee:	0021      	movs	r1, r4
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ebf4:	19d2      	adds	r2, r2, r7
 800ebf6:	f002 fbd1 	bl	801139c <_mbrtowc_r>
 800ebfa:	0003      	movs	r3, r0
 800ebfc:	62b8      	str	r0, [r7, #40]	; 0x28
 800ebfe:	3301      	adds	r3, #1
 800ec00:	d100      	bne.n	800ec04 <__ssvfscanf_r+0x484>
 800ec02:	e68c      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	d139      	bne.n	800ec7c <__ssvfscanf_r+0x4fc>
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d100      	bne.n	800ec10 <__ssvfscanf_r+0x490>
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec14:	4694      	mov	ip, r2
 800ec16:	4463      	add	r3, ip
 800ec18:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	2b03      	cmp	r3, #3
 800ec1e:	d102      	bne.n	800ec26 <__ssvfscanf_r+0x4a6>
 800ec20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec22:	2b04      	cmp	r3, #4
 800ec24:	d002      	beq.n	800ec2c <__ssvfscanf_r+0x4ac>
 800ec26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec28:	3b01      	subs	r3, #1
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d115      	bne.n	800ec5e <__ssvfscanf_r+0x4de>
 800ec32:	2e00      	cmp	r6, #0
 800ec34:	d012      	beq.n	800ec5c <__ssvfscanf_r+0x4dc>
 800ec36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec38:	69fa      	ldr	r2, [r7, #28]
 800ec3a:	1ae5      	subs	r5, r4, r3
 800ec3c:	10ab      	asrs	r3, r5, #2
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d30c      	bcc.n	800ec5c <__ssvfscanf_r+0x4dc>
 800ec42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec44:	00d1      	lsls	r1, r2, #3
 800ec46:	f002 f895 	bl	8010d74 <realloc>
 800ec4a:	6338      	str	r0, [r7, #48]	; 0x30
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d100      	bne.n	800ec52 <__ssvfscanf_r+0x4d2>
 800ec50:	e75e      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	1944      	adds	r4, r0, r5
 800ec56:	005b      	lsls	r3, r3, #1
 800ec58:	6030      	str	r0, [r6, #0]
 800ec5a:	61fb      	str	r3, [r7, #28]
 800ec5c:	3404      	adds	r4, #4
 800ec5e:	2500      	movs	r5, #0
 800ec60:	e010      	b.n	800ec84 <__ssvfscanf_r+0x504>
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	613b      	str	r3, [r7, #16]
 800ec66:	2300      	movs	r3, #0
 800ec68:	001e      	movs	r6, r3
 800ec6a:	001c      	movs	r4, r3
 800ec6c:	61fb      	str	r3, [r7, #28]
 800ec6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ec70:	e78f      	b.n	800eb92 <__ssvfscanf_r+0x412>
 800ec72:	6a3b      	ldr	r3, [r7, #32]
 800ec74:	001e      	movs	r6, r3
 800ec76:	61fb      	str	r3, [r7, #28]
 800ec78:	633b      	str	r3, [r7, #48]	; 0x30
 800ec7a:	e78a      	b.n	800eb92 <__ssvfscanf_r+0x412>
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	68fd      	ldr	r5, [r7, #12]
 800ec80:	3302      	adds	r3, #2
 800ec82:	d1c5      	bne.n	800ec10 <__ssvfscanf_r+0x490>
 800ec84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec86:	685b      	ldr	r3, [r3, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc12      	bgt.n	800ecb2 <__ssvfscanf_r+0x532>
 800ec8c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec90:	f002 fc84 	bl	801159c <__ssrefill_r>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d00c      	beq.n	800ecb2 <__ssvfscanf_r+0x532>
 800ec98:	2d00      	cmp	r5, #0
 800ec9a:	d000      	beq.n	800ec9e <__ssvfscanf_r+0x51e>
 800ec9c:	e63f      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800ec9e:	2e00      	cmp	r6, #0
 800eca0:	d10c      	bne.n	800ecbc <__ssvfscanf_r+0x53c>
 800eca2:	6a3b      	ldr	r3, [r7, #32]
 800eca4:	425a      	negs	r2, r3
 800eca6:	4153      	adcs	r3, r2
 800eca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecaa:	18d3      	adds	r3, r2, r3
 800ecac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	e6de      	b.n	800ea70 <__ssvfscanf_r+0x2f0>
 800ecb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d000      	beq.n	800ecba <__ssvfscanf_r+0x53a>
 800ecb8:	e76c      	b.n	800eb94 <__ssvfscanf_r+0x414>
 800ecba:	e7f0      	b.n	800ec9e <__ssvfscanf_r+0x51e>
 800ecbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecbe:	69fa      	ldr	r2, [r7, #28]
 800ecc0:	1ae1      	subs	r1, r4, r3
 800ecc2:	108b      	asrs	r3, r1, #2
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d9ec      	bls.n	800eca2 <__ssvfscanf_r+0x522>
 800ecc8:	6830      	ldr	r0, [r6, #0]
 800ecca:	f002 f853 	bl	8010d74 <realloc>
 800ecce:	2800      	cmp	r0, #0
 800ecd0:	d0e7      	beq.n	800eca2 <__ssvfscanf_r+0x522>
 800ecd2:	6030      	str	r0, [r6, #0]
 800ecd4:	e7e5      	b.n	800eca2 <__ssvfscanf_r+0x522>
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d025      	beq.n	800ed28 <__ssvfscanf_r+0x5a8>
 800ecdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ece4:	6812      	ldr	r2, [r2, #0]
 800ece6:	4299      	cmp	r1, r3
 800ece8:	dd11      	ble.n	800ed0e <__ssvfscanf_r+0x58e>
 800ecea:	1ac9      	subs	r1, r1, r3
 800ecec:	18d2      	adds	r2, r2, r3
 800ecee:	18e4      	adds	r4, r4, r3
 800ecf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ecf2:	63f9      	str	r1, [r7, #60]	; 0x3c
 800ecf4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ecf6:	0019      	movs	r1, r3
 800ecf8:	601a      	str	r2, [r3, #0]
 800ecfa:	f002 fc4f 	bl	801159c <__ssrefill_r>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d0ec      	beq.n	800ecdc <__ssvfscanf_r+0x55c>
 800ed02:	2c00      	cmp	r4, #0
 800ed04:	d100      	bne.n	800ed08 <__ssvfscanf_r+0x588>
 800ed06:	e60a      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800ed08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0a:	191b      	adds	r3, r3, r4
 800ed0c:	e5ff      	b.n	800e90e <__ssvfscanf_r+0x18e>
 800ed0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ed10:	1a5b      	subs	r3, r3, r1
 800ed12:	1864      	adds	r4, r4, r1
 800ed14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ed16:	604b      	str	r3, [r1, #4]
 800ed18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed1a:	18d2      	adds	r2, r2, r3
 800ed1c:	600a      	str	r2, [r1, #0]
 800ed1e:	e7f3      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800ed20:	0800ba91 	.word	0x0800ba91
 800ed24:	0000fff6 	.word	0x0000fff6
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	0034      	movs	r4, r6
 800ed2c:	cb20      	ldmia	r3!, {r5}
 800ed2e:	633b      	str	r3, [r7, #48]	; 0x30
 800ed30:	2380      	movs	r3, #128	; 0x80
 800ed32:	401c      	ands	r4, r3
 800ed34:	421e      	tst	r6, r3
 800ed36:	d028      	beq.n	800ed8a <__ssvfscanf_r+0x60a>
 800ed38:	2d00      	cmp	r5, #0
 800ed3a:	d100      	bne.n	800ed3e <__ssvfscanf_r+0x5be>
 800ed3c:	e61d      	b.n	800e97a <__ssvfscanf_r+0x1fa>
 800ed3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed40:	f7fb fdb0 	bl	800a8a4 <malloc>
 800ed44:	6238      	str	r0, [r7, #32]
 800ed46:	2800      	cmp	r0, #0
 800ed48:	d100      	bne.n	800ed4c <__ssvfscanf_r+0x5cc>
 800ed4a:	e5ef      	b.n	800e92c <__ssvfscanf_r+0x1ac>
 800ed4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed4e:	6028      	str	r0, [r5, #0]
 800ed50:	88de      	ldrh	r6, [r3, #6]
 800ed52:	889c      	ldrh	r4, [r3, #4]
 800ed54:	6818      	ldr	r0, [r3, #0]
 800ed56:	42a6      	cmp	r6, r4
 800ed58:	d30e      	bcc.n	800ed78 <__ssvfscanf_r+0x5f8>
 800ed5a:	4bbf      	ldr	r3, [pc, #764]	; (800f058 <__ssvfscanf_r+0x8d8>)
 800ed5c:	429c      	cmp	r4, r3
 800ed5e:	d900      	bls.n	800ed62 <__ssvfscanf_r+0x5e2>
 800ed60:	e6df      	b.n	800eb22 <__ssvfscanf_r+0x3a2>
 800ed62:	3408      	adds	r4, #8
 800ed64:	b2a4      	uxth	r4, r4
 800ed66:	00a1      	lsls	r1, r4, #2
 800ed68:	f002 f804 	bl	8010d74 <realloc>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d100      	bne.n	800ed72 <__ssvfscanf_r+0x5f2>
 800ed70:	e6d7      	b.n	800eb22 <__ssvfscanf_r+0x3a2>
 800ed72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed74:	6018      	str	r0, [r3, #0]
 800ed76:	809c      	strh	r4, [r3, #4]
 800ed78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed7a:	1c72      	adds	r2, r6, #1
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed80:	00b6      	lsls	r6, r6, #2
 800ed82:	002c      	movs	r4, r5
 800ed84:	50f5      	str	r5, [r6, r3]
 800ed86:	6a3d      	ldr	r5, [r7, #32]
 800ed88:	80ca      	strh	r2, [r1, #6]
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8c:	0029      	movs	r1, r5
 800ed8e:	9300      	str	r3, [sp, #0]
 800ed90:	2201      	movs	r2, #1
 800ed92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ed96:	f002 fc20 	bl	80115da <_sfread_r>
 800ed9a:	1e05      	subs	r5, r0, #0
 800ed9c:	d100      	bne.n	800eda0 <__ssvfscanf_r+0x620>
 800ed9e:	e5be      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800eda0:	2c00      	cmp	r4, #0
 800eda2:	d009      	beq.n	800edb8 <__ssvfscanf_r+0x638>
 800eda4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda6:	4283      	cmp	r3, r0
 800eda8:	d906      	bls.n	800edb8 <__ssvfscanf_r+0x638>
 800edaa:	0001      	movs	r1, r0
 800edac:	6820      	ldr	r0, [r4, #0]
 800edae:	f001 ffe1 	bl	8010d74 <realloc>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d000      	beq.n	800edb8 <__ssvfscanf_r+0x638>
 800edb6:	6020      	str	r0, [r4, #0]
 800edb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edba:	195b      	adds	r3, r3, r5
 800edbc:	63bb      	str	r3, [r7, #56]	; 0x38
 800edbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edc0:	3301      	adds	r3, #1
 800edc2:	e4f8      	b.n	800e7b6 <__ssvfscanf_r+0x36>
 800edc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <__ssvfscanf_r+0x64e>
 800edca:	3b01      	subs	r3, #1
 800edcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edce:	2210      	movs	r2, #16
 800edd0:	2301      	movs	r3, #1
 800edd2:	0034      	movs	r4, r6
 800edd4:	4032      	ands	r2, r6
 800edd6:	401c      	ands	r4, r3
 800edd8:	623a      	str	r2, [r7, #32]
 800edda:	421e      	tst	r6, r3
 800eddc:	d100      	bne.n	800ede0 <__ssvfscanf_r+0x660>
 800edde:	e116      	b.n	800f00e <__ssvfscanf_r+0x88e>
 800ede0:	2a00      	cmp	r2, #0
 800ede2:	d000      	beq.n	800ede6 <__ssvfscanf_r+0x666>
 800ede4:	e0b0      	b.n	800ef48 <__ssvfscanf_r+0x7c8>
 800ede6:	2080      	movs	r0, #128	; 0x80
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	cb10      	ldmia	r3!, {r4}
 800edec:	60fb      	str	r3, [r7, #12]
 800edee:	4206      	tst	r6, r0
 800edf0:	d100      	bne.n	800edf4 <__ssvfscanf_r+0x674>
 800edf2:	e0b2      	b.n	800ef5a <__ssvfscanf_r+0x7da>
 800edf4:	2c00      	cmp	r4, #0
 800edf6:	d100      	bne.n	800edfa <__ssvfscanf_r+0x67a>
 800edf8:	e68d      	b.n	800eb16 <__ssvfscanf_r+0x396>
 800edfa:	f7fb fd53 	bl	800a8a4 <malloc>
 800edfe:	6338      	str	r0, [r7, #48]	; 0x30
 800ee00:	2800      	cmp	r0, #0
 800ee02:	d100      	bne.n	800ee06 <__ssvfscanf_r+0x686>
 800ee04:	e684      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800ee06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee0c:	88de      	ldrh	r6, [r3, #6]
 800ee0e:	889d      	ldrh	r5, [r3, #4]
 800ee10:	42ae      	cmp	r6, r5
 800ee12:	d310      	bcc.n	800ee36 <__ssvfscanf_r+0x6b6>
 800ee14:	4b90      	ldr	r3, [pc, #576]	; (800f058 <__ssvfscanf_r+0x8d8>)
 800ee16:	429d      	cmp	r5, r3
 800ee18:	d900      	bls.n	800ee1c <__ssvfscanf_r+0x69c>
 800ee1a:	e679      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800ee1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee1e:	3508      	adds	r5, #8
 800ee20:	b2ad      	uxth	r5, r5
 800ee22:	6818      	ldr	r0, [r3, #0]
 800ee24:	00a9      	lsls	r1, r5, #2
 800ee26:	f001 ffa5 	bl	8010d74 <realloc>
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d100      	bne.n	800ee30 <__ssvfscanf_r+0x6b0>
 800ee2e:	e66f      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800ee30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee32:	6018      	str	r0, [r3, #0]
 800ee34:	809d      	strh	r5, [r3, #4]
 800ee36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee38:	1c72      	adds	r2, r6, #1
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	00b6      	lsls	r6, r6, #2
 800ee3e:	50f4      	str	r4, [r6, r3]
 800ee40:	2320      	movs	r3, #32
 800ee42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee44:	0026      	movs	r6, r4
 800ee46:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800ee48:	80ca      	strh	r2, [r1, #6]
 800ee4a:	613b      	str	r3, [r7, #16]
 800ee4c:	2500      	movs	r5, #0
 800ee4e:	f7fd f8a1 	bl	800bf94 <__locale_mb_cur_max>
 800ee52:	42a8      	cmp	r0, r5
 800ee54:	d100      	bne.n	800ee58 <__ssvfscanf_r+0x6d8>
 800ee56:	e562      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800ee58:	1c6a      	adds	r2, r5, #1
 800ee5a:	61fa      	str	r2, [r7, #28]
 800ee5c:	228c      	movs	r2, #140	; 0x8c
 800ee5e:	2048      	movs	r0, #72	; 0x48
 800ee60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee62:	0052      	lsls	r2, r2, #1
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	1812      	adds	r2, r2, r0
 800ee68:	7819      	ldrb	r1, [r3, #0]
 800ee6a:	19d2      	adds	r2, r2, r7
 800ee6c:	5551      	strb	r1, [r2, r5]
 800ee6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee72:	6852      	ldr	r2, [r2, #4]
 800ee74:	3301      	adds	r3, #1
 800ee76:	600b      	str	r3, [r1, #0]
 800ee78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee7a:	3a01      	subs	r2, #1
 800ee7c:	604a      	str	r2, [r1, #4]
 800ee7e:	2b03      	cmp	r3, #3
 800ee80:	d102      	bne.n	800ee88 <__ssvfscanf_r+0x708>
 800ee82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	d006      	beq.n	800ee96 <__ssvfscanf_r+0x716>
 800ee88:	2048      	movs	r0, #72	; 0x48
 800ee8a:	2208      	movs	r2, #8
 800ee8c:	1813      	adds	r3, r2, r0
 800ee8e:	2100      	movs	r1, #0
 800ee90:	19d8      	adds	r0, r3, r7
 800ee92:	f7fd f82d 	bl	800bef0 <memset>
 800ee96:	2148      	movs	r1, #72	; 0x48
 800ee98:	2308      	movs	r3, #8
 800ee9a:	228c      	movs	r2, #140	; 0x8c
 800ee9c:	185b      	adds	r3, r3, r1
 800ee9e:	0052      	lsls	r2, r2, #1
 800eea0:	19db      	adds	r3, r3, r7
 800eea2:	1852      	adds	r2, r2, r1
 800eea4:	9300      	str	r3, [sp, #0]
 800eea6:	0021      	movs	r1, r4
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eeac:	19d2      	adds	r2, r2, r7
 800eeae:	f002 fa75 	bl	801139c <_mbrtowc_r>
 800eeb2:	0003      	movs	r3, r0
 800eeb4:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	d100      	bne.n	800eebc <__ssvfscanf_r+0x73c>
 800eeba:	e530      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d151      	bne.n	800ef64 <__ssvfscanf_r+0x7e4>
 800eec0:	6020      	str	r0, [r4, #0]
 800eec2:	2301      	movs	r3, #1
 800eec4:	6825      	ldr	r5, [r4, #0]
 800eec6:	425b      	negs	r3, r3
 800eec8:	1c6a      	adds	r2, r5, #1
 800eeca:	d01a      	beq.n	800ef02 <__ssvfscanf_r+0x782>
 800eecc:	2048      	movs	r0, #72	; 0x48
 800eece:	3311      	adds	r3, #17
 800eed0:	181b      	adds	r3, r3, r0
 800eed2:	2208      	movs	r2, #8
 800eed4:	2100      	movs	r1, #0
 800eed6:	19d8      	adds	r0, r3, r7
 800eed8:	f7fd f80a 	bl	800bef0 <memset>
 800eedc:	4b5f      	ldr	r3, [pc, #380]	; (800f05c <__ssvfscanf_r+0x8dc>)
 800eede:	2148      	movs	r1, #72	; 0x48
 800eee0:	33e0      	adds	r3, #224	; 0xe0
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	2310      	movs	r3, #16
 800eee6:	4694      	mov	ip, r2
 800eee8:	185b      	adds	r3, r3, r1
 800eeea:	002a      	movs	r2, r5
 800eeec:	19db      	adds	r3, r3, r7
 800eeee:	4665      	mov	r5, ip
 800eef0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eef2:	1879      	adds	r1, r7, r1
 800eef4:	47a8      	blx	r5
 800eef6:	2300      	movs	r3, #0
 800eef8:	2801      	cmp	r0, #1
 800eefa:	d102      	bne.n	800ef02 <__ssvfscanf_r+0x782>
 800eefc:	3348      	adds	r3, #72	; 0x48
 800eefe:	18fb      	adds	r3, r7, r3
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	2218      	movs	r2, #24
 800ef04:	2148      	movs	r1, #72	; 0x48
 800ef06:	1852      	adds	r2, r2, r1
 800ef08:	19d2      	adds	r2, r2, r7
 800ef0a:	5cd3      	ldrb	r3, [r2, r3]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d149      	bne.n	800efa4 <__ssvfscanf_r+0x824>
 800ef10:	69fb      	ldr	r3, [r7, #28]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d137      	bne.n	800ef86 <__ssvfscanf_r+0x806>
 800ef16:	6a3b      	ldr	r3, [r7, #32]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d113      	bne.n	800ef44 <__ssvfscanf_r+0x7c4>
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	2e00      	cmp	r6, #0
 800ef20:	d00d      	beq.n	800ef3e <__ssvfscanf_r+0x7be>
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	693a      	ldr	r2, [r7, #16]
 800ef26:	1ae4      	subs	r4, r4, r3
 800ef28:	10a3      	asrs	r3, r4, #2
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d906      	bls.n	800ef3e <__ssvfscanf_r+0x7be>
 800ef30:	6830      	ldr	r0, [r6, #0]
 800ef32:	1d21      	adds	r1, r4, #4
 800ef34:	f001 ff1e 	bl	8010d74 <realloc>
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d000      	beq.n	800ef3e <__ssvfscanf_r+0x7be>
 800ef3c:	6030      	str	r0, [r6, #0]
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	3301      	adds	r3, #1
 800ef42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	e593      	b.n	800ea70 <__ssvfscanf_r+0x2f0>
 800ef48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	001e      	movs	r6, r3
 800ef50:	613b      	str	r3, [r7, #16]
 800ef52:	633b      	str	r3, [r7, #48]	; 0x30
 800ef54:	334c      	adds	r3, #76	; 0x4c
 800ef56:	18fc      	adds	r4, r7, r3
 800ef58:	e778      	b.n	800ee4c <__ssvfscanf_r+0x6cc>
 800ef5a:	6a3b      	ldr	r3, [r7, #32]
 800ef5c:	001e      	movs	r6, r3
 800ef5e:	613b      	str	r3, [r7, #16]
 800ef60:	633b      	str	r3, [r7, #48]	; 0x30
 800ef62:	e773      	b.n	800ee4c <__ssvfscanf_r+0x6cc>
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	69fd      	ldr	r5, [r7, #28]
 800ef68:	3302      	adds	r3, #2
 800ef6a:	d1aa      	bne.n	800eec2 <__ssvfscanf_r+0x742>
 800ef6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	dc47      	bgt.n	800f004 <__ssvfscanf_r+0x884>
 800ef74:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ef76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef78:	f002 fb10 	bl	801159c <__ssrefill_r>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d041      	beq.n	800f004 <__ssvfscanf_r+0x884>
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	d0c8      	beq.n	800ef16 <__ssvfscanf_r+0x796>
 800ef84:	e4cb      	b.n	800e91e <__ssvfscanf_r+0x19e>
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	2248      	movs	r2, #72	; 0x48
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	61fb      	str	r3, [r7, #28]
 800ef8e:	238c      	movs	r3, #140	; 0x8c
 800ef90:	005b      	lsls	r3, r3, #1
 800ef92:	189b      	adds	r3, r3, r2
 800ef94:	69fa      	ldr	r2, [r7, #28]
 800ef96:	19db      	adds	r3, r3, r7
 800ef98:	5cd1      	ldrb	r1, [r2, r3]
 800ef9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ef9e:	f002 fac1 	bl	8011524 <_sungetc_r>
 800efa2:	e7b5      	b.n	800ef10 <__ssvfscanf_r+0x790>
 800efa4:	69fa      	ldr	r2, [r7, #28]
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	4694      	mov	ip, r2
 800efaa:	4463      	add	r3, ip
 800efac:	63bb      	str	r3, [r7, #56]	; 0x38
 800efae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb0:	2b03      	cmp	r3, #3
 800efb2:	d102      	bne.n	800efba <__ssvfscanf_r+0x83a>
 800efb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d002      	beq.n	800efc0 <__ssvfscanf_r+0x840>
 800efba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efbc:	3b01      	subs	r3, #1
 800efbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efc0:	6a3b      	ldr	r3, [r7, #32]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d11a      	bne.n	800effc <__ssvfscanf_r+0x87c>
 800efc6:	3404      	adds	r4, #4
 800efc8:	2e00      	cmp	r6, #0
 800efca:	d019      	beq.n	800f000 <__ssvfscanf_r+0x880>
 800efcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efce:	693a      	ldr	r2, [r7, #16]
 800efd0:	1ae3      	subs	r3, r4, r3
 800efd2:	61fb      	str	r3, [r7, #28]
 800efd4:	6a3d      	ldr	r5, [r7, #32]
 800efd6:	109b      	asrs	r3, r3, #2
 800efd8:	4293      	cmp	r3, r2
 800efda:	d3c7      	bcc.n	800ef6c <__ssvfscanf_r+0x7ec>
 800efdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800efde:	00d1      	lsls	r1, r2, #3
 800efe0:	f001 fec8 	bl	8010d74 <realloc>
 800efe4:	6338      	str	r0, [r7, #48]	; 0x30
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d100      	bne.n	800efec <__ssvfscanf_r+0x86c>
 800efea:	e591      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800efec:	4684      	mov	ip, r0
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	69fc      	ldr	r4, [r7, #28]
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	4464      	add	r4, ip
 800eff6:	6030      	str	r0, [r6, #0]
 800eff8:	613b      	str	r3, [r7, #16]
 800effa:	e7b7      	b.n	800ef6c <__ssvfscanf_r+0x7ec>
 800effc:	2500      	movs	r5, #0
 800effe:	e7b5      	b.n	800ef6c <__ssvfscanf_r+0x7ec>
 800f000:	0035      	movs	r5, r6
 800f002:	e7b3      	b.n	800ef6c <__ssvfscanf_r+0x7ec>
 800f004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f006:	2b00      	cmp	r3, #0
 800f008:	d000      	beq.n	800f00c <__ssvfscanf_r+0x88c>
 800f00a:	e720      	b.n	800ee4e <__ssvfscanf_r+0x6ce>
 800f00c:	e783      	b.n	800ef16 <__ssvfscanf_r+0x796>
 800f00e:	6a3b      	ldr	r3, [r7, #32]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d025      	beq.n	800f060 <__ssvfscanf_r+0x8e0>
 800f014:	2118      	movs	r1, #24
 800f016:	2048      	movs	r0, #72	; 0x48
 800f018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f01a:	1809      	adds	r1, r1, r0
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	19c9      	adds	r1, r1, r7
 800f020:	781a      	ldrb	r2, [r3, #0]
 800f022:	5c8a      	ldrb	r2, [r1, r2]
 800f024:	2a00      	cmp	r2, #0
 800f026:	d103      	bne.n	800f030 <__ssvfscanf_r+0x8b0>
 800f028:	2c00      	cmp	r4, #0
 800f02a:	d000      	beq.n	800f02e <__ssvfscanf_r+0x8ae>
 800f02c:	e66c      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800f02e:	e4a4      	b.n	800e97a <__ssvfscanf_r+0x1fa>
 800f030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f034:	6852      	ldr	r2, [r2, #4]
 800f036:	3301      	adds	r3, #1
 800f038:	600b      	str	r3, [r1, #0]
 800f03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f03c:	3a01      	subs	r2, #1
 800f03e:	3401      	adds	r4, #1
 800f040:	604a      	str	r2, [r1, #4]
 800f042:	429c      	cmp	r4, r3
 800f044:	d100      	bne.n	800f048 <__ssvfscanf_r+0x8c8>
 800f046:	e65f      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800f048:	2a00      	cmp	r2, #0
 800f04a:	dce3      	bgt.n	800f014 <__ssvfscanf_r+0x894>
 800f04c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f04e:	f002 faa5 	bl	801159c <__ssrefill_r>
 800f052:	2800      	cmp	r0, #0
 800f054:	d0de      	beq.n	800f014 <__ssvfscanf_r+0x894>
 800f056:	e657      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800f058:	0000fff6 	.word	0x0000fff6
 800f05c:	20000444 	.word	0x20000444
 800f060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f062:	0032      	movs	r2, r6
 800f064:	cb20      	ldmia	r3!, {r5}
 800f066:	61fb      	str	r3, [r7, #28]
 800f068:	2380      	movs	r3, #128	; 0x80
 800f06a:	401a      	ands	r2, r3
 800f06c:	421e      	tst	r6, r3
 800f06e:	d100      	bne.n	800f072 <__ssvfscanf_r+0x8f2>
 800f070:	e086      	b.n	800f180 <__ssvfscanf_r+0xa00>
 800f072:	2d00      	cmp	r5, #0
 800f074:	d100      	bne.n	800f078 <__ssvfscanf_r+0x8f8>
 800f076:	e480      	b.n	800e97a <__ssvfscanf_r+0x1fa>
 800f078:	2020      	movs	r0, #32
 800f07a:	f7fb fc13 	bl	800a8a4 <malloc>
 800f07e:	6338      	str	r0, [r7, #48]	; 0x30
 800f080:	2800      	cmp	r0, #0
 800f082:	d100      	bne.n	800f086 <__ssvfscanf_r+0x906>
 800f084:	e452      	b.n	800e92c <__ssvfscanf_r+0x1ac>
 800f086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f088:	6028      	str	r0, [r5, #0]
 800f08a:	88de      	ldrh	r6, [r3, #6]
 800f08c:	889c      	ldrh	r4, [r3, #4]
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	42a6      	cmp	r6, r4
 800f092:	d30e      	bcc.n	800f0b2 <__ssvfscanf_r+0x932>
 800f094:	4bc3      	ldr	r3, [pc, #780]	; (800f3a4 <__ssvfscanf_r+0xc24>)
 800f096:	429c      	cmp	r4, r3
 800f098:	d900      	bls.n	800f09c <__ssvfscanf_r+0x91c>
 800f09a:	e542      	b.n	800eb22 <__ssvfscanf_r+0x3a2>
 800f09c:	3408      	adds	r4, #8
 800f09e:	b2a4      	uxth	r4, r4
 800f0a0:	00a1      	lsls	r1, r4, #2
 800f0a2:	f001 fe67 	bl	8010d74 <realloc>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d100      	bne.n	800f0ac <__ssvfscanf_r+0x92c>
 800f0aa:	e53a      	b.n	800eb22 <__ssvfscanf_r+0x3a2>
 800f0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0ae:	6018      	str	r0, [r3, #0]
 800f0b0:	809c      	strh	r4, [r3, #4]
 800f0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0b4:	1c72      	adds	r2, r6, #1
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	00b6      	lsls	r6, r6, #2
 800f0ba:	50f5      	str	r5, [r6, r3]
 800f0bc:	2320      	movs	r3, #32
 800f0be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0c0:	002e      	movs	r6, r5
 800f0c2:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f0c4:	80ca      	strh	r2, [r1, #6]
 800f0c6:	623b      	str	r3, [r7, #32]
 800f0c8:	002c      	movs	r4, r5
 800f0ca:	2118      	movs	r1, #24
 800f0cc:	2048      	movs	r0, #72	; 0x48
 800f0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d0:	1809      	adds	r1, r1, r0
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	19c9      	adds	r1, r1, r7
 800f0d6:	781a      	ldrb	r2, [r3, #0]
 800f0d8:	5c8a      	ldrb	r2, [r1, r2]
 800f0da:	2a00      	cmp	r2, #0
 800f0dc:	d101      	bne.n	800f0e2 <__ssvfscanf_r+0x962>
 800f0de:	633d      	str	r5, [r7, #48]	; 0x30
 800f0e0:	e031      	b.n	800f146 <__ssvfscanf_r+0x9c6>
 800f0e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f0e6:	6852      	ldr	r2, [r2, #4]
 800f0e8:	3a01      	subs	r2, #1
 800f0ea:	604a      	str	r2, [r1, #4]
 800f0ec:	1c5a      	adds	r2, r3, #1
 800f0ee:	600a      	str	r2, [r1, #0]
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	1c6a      	adds	r2, r5, #1
 800f0f4:	633a      	str	r2, [r7, #48]	; 0x30
 800f0f6:	702b      	strb	r3, [r5, #0]
 800f0f8:	2e00      	cmp	r6, #0
 800f0fa:	d010      	beq.n	800f11e <__ssvfscanf_r+0x99e>
 800f0fc:	6a3b      	ldr	r3, [r7, #32]
 800f0fe:	1b15      	subs	r5, r2, r4
 800f100:	429d      	cmp	r5, r3
 800f102:	d30c      	bcc.n	800f11e <__ssvfscanf_r+0x99e>
 800f104:	005b      	lsls	r3, r3, #1
 800f106:	0020      	movs	r0, r4
 800f108:	0019      	movs	r1, r3
 800f10a:	623b      	str	r3, [r7, #32]
 800f10c:	f001 fe32 	bl	8010d74 <realloc>
 800f110:	1e04      	subs	r4, r0, #0
 800f112:	d101      	bne.n	800f118 <__ssvfscanf_r+0x998>
 800f114:	f7ff fc0a 	bl	800e92c <__ssvfscanf_r+0x1ac>
 800f118:	1943      	adds	r3, r0, r5
 800f11a:	633b      	str	r3, [r7, #48]	; 0x30
 800f11c:	6030      	str	r0, [r6, #0]
 800f11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f120:	3b01      	subs	r3, #1
 800f122:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00e      	beq.n	800f146 <__ssvfscanf_r+0x9c6>
 800f128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	dc2a      	bgt.n	800f186 <__ssvfscanf_r+0xa06>
 800f130:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f132:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f134:	f002 fa32 	bl	801159c <__ssrefill_r>
 800f138:	2800      	cmp	r0, #0
 800f13a:	d024      	beq.n	800f186 <__ssvfscanf_r+0xa06>
 800f13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13e:	42a3      	cmp	r3, r4
 800f140:	d101      	bne.n	800f146 <__ssvfscanf_r+0x9c6>
 800f142:	f7ff fbec 	bl	800e91e <__ssvfscanf_r+0x19e>
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	1b1d      	subs	r5, r3, r4
 800f14a:	42a3      	cmp	r3, r4
 800f14c:	d101      	bne.n	800f152 <__ssvfscanf_r+0x9d2>
 800f14e:	f7ff fc14 	bl	800e97a <__ssvfscanf_r+0x1fa>
 800f152:	2300      	movs	r3, #0
 800f154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f156:	7013      	strb	r3, [r2, #0]
 800f158:	429e      	cmp	r6, r3
 800f15a:	d009      	beq.n	800f170 <__ssvfscanf_r+0x9f0>
 800f15c:	6a3b      	ldr	r3, [r7, #32]
 800f15e:	1c69      	adds	r1, r5, #1
 800f160:	428b      	cmp	r3, r1
 800f162:	d905      	bls.n	800f170 <__ssvfscanf_r+0x9f0>
 800f164:	6830      	ldr	r0, [r6, #0]
 800f166:	f001 fe05 	bl	8010d74 <realloc>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d000      	beq.n	800f170 <__ssvfscanf_r+0x9f0>
 800f16e:	6030      	str	r0, [r6, #0]
 800f170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f172:	3301      	adds	r3, #1
 800f174:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f178:	195b      	adds	r3, r3, r5
 800f17a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	e477      	b.n	800ea70 <__ssvfscanf_r+0x2f0>
 800f180:	0016      	movs	r6, r2
 800f182:	623a      	str	r2, [r7, #32]
 800f184:	e7a0      	b.n	800f0c8 <__ssvfscanf_r+0x948>
 800f186:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800f188:	e79f      	b.n	800f0ca <__ssvfscanf_r+0x94a>
 800f18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <__ssvfscanf_r+0xa14>
 800f190:	3b01      	subs	r3, #1
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f194:	2210      	movs	r2, #16
 800f196:	2301      	movs	r3, #1
 800f198:	0034      	movs	r4, r6
 800f19a:	4032      	ands	r2, r6
 800f19c:	401c      	ands	r4, r3
 800f19e:	61fa      	str	r2, [r7, #28]
 800f1a0:	421e      	tst	r6, r3
 800f1a2:	d100      	bne.n	800f1a6 <__ssvfscanf_r+0xa26>
 800f1a4:	e102      	b.n	800f3ac <__ssvfscanf_r+0xc2c>
 800f1a6:	2a00      	cmp	r2, #0
 800f1a8:	d000      	beq.n	800f1ac <__ssvfscanf_r+0xa2c>
 800f1aa:	e09f      	b.n	800f2ec <__ssvfscanf_r+0xb6c>
 800f1ac:	2080      	movs	r0, #128	; 0x80
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	cb10      	ldmia	r3!, {r4}
 800f1b2:	60fb      	str	r3, [r7, #12]
 800f1b4:	4206      	tst	r6, r0
 800f1b6:	d100      	bne.n	800f1ba <__ssvfscanf_r+0xa3a>
 800f1b8:	e0a1      	b.n	800f2fe <__ssvfscanf_r+0xb7e>
 800f1ba:	2c00      	cmp	r4, #0
 800f1bc:	d100      	bne.n	800f1c0 <__ssvfscanf_r+0xa40>
 800f1be:	e4aa      	b.n	800eb16 <__ssvfscanf_r+0x396>
 800f1c0:	f7fb fb70 	bl	800a8a4 <malloc>
 800f1c4:	6338      	str	r0, [r7, #48]	; 0x30
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d100      	bne.n	800f1cc <__ssvfscanf_r+0xa4c>
 800f1ca:	e4a1      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1d2:	88de      	ldrh	r6, [r3, #6]
 800f1d4:	889d      	ldrh	r5, [r3, #4]
 800f1d6:	42ae      	cmp	r6, r5
 800f1d8:	d310      	bcc.n	800f1fc <__ssvfscanf_r+0xa7c>
 800f1da:	4b72      	ldr	r3, [pc, #456]	; (800f3a4 <__ssvfscanf_r+0xc24>)
 800f1dc:	429d      	cmp	r5, r3
 800f1de:	d900      	bls.n	800f1e2 <__ssvfscanf_r+0xa62>
 800f1e0:	e496      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800f1e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e4:	3508      	adds	r5, #8
 800f1e6:	b2ad      	uxth	r5, r5
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	00a9      	lsls	r1, r5, #2
 800f1ec:	f001 fdc2 	bl	8010d74 <realloc>
 800f1f0:	2800      	cmp	r0, #0
 800f1f2:	d100      	bne.n	800f1f6 <__ssvfscanf_r+0xa76>
 800f1f4:	e48c      	b.n	800eb10 <__ssvfscanf_r+0x390>
 800f1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f8:	6018      	str	r0, [r3, #0]
 800f1fa:	809d      	strh	r5, [r3, #4]
 800f1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1fe:	1c72      	adds	r2, r6, #1
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	00b6      	lsls	r6, r6, #2
 800f204:	50f4      	str	r4, [r6, r3]
 800f206:	2320      	movs	r3, #32
 800f208:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f20a:	0025      	movs	r5, r4
 800f20c:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f20e:	80ca      	strh	r2, [r1, #6]
 800f210:	613b      	str	r3, [r7, #16]
 800f212:	2300      	movs	r3, #0
 800f214:	623b      	str	r3, [r7, #32]
 800f216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f218:	4a63      	ldr	r2, [pc, #396]	; (800f3a8 <__ssvfscanf_r+0xc28>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	5cd3      	ldrb	r3, [r2, r3]
 800f220:	2208      	movs	r2, #8
 800f222:	4213      	tst	r3, r2
 800f224:	d149      	bne.n	800f2ba <__ssvfscanf_r+0xb3a>
 800f226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d046      	beq.n	800f2ba <__ssvfscanf_r+0xb3a>
 800f22c:	f7fc feb2 	bl	800bf94 <__locale_mb_cur_max>
 800f230:	6a3b      	ldr	r3, [r7, #32]
 800f232:	4298      	cmp	r0, r3
 800f234:	d101      	bne.n	800f23a <__ssvfscanf_r+0xaba>
 800f236:	f7ff fb72 	bl	800e91e <__ssvfscanf_r+0x19e>
 800f23a:	6a3a      	ldr	r2, [r7, #32]
 800f23c:	2048      	movs	r0, #72	; 0x48
 800f23e:	1c56      	adds	r6, r2, #1
 800f240:	228c      	movs	r2, #140	; 0x8c
 800f242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f244:	0052      	lsls	r2, r2, #1
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	1812      	adds	r2, r2, r0
 800f24a:	7819      	ldrb	r1, [r3, #0]
 800f24c:	6a38      	ldr	r0, [r7, #32]
 800f24e:	19d2      	adds	r2, r2, r7
 800f250:	5411      	strb	r1, [r2, r0]
 800f252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f254:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f256:	6852      	ldr	r2, [r2, #4]
 800f258:	3301      	adds	r3, #1
 800f25a:	600b      	str	r3, [r1, #0]
 800f25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25e:	3a01      	subs	r2, #1
 800f260:	604a      	str	r2, [r1, #4]
 800f262:	2b03      	cmp	r3, #3
 800f264:	d102      	bne.n	800f26c <__ssvfscanf_r+0xaec>
 800f266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f268:	2b04      	cmp	r3, #4
 800f26a:	d007      	beq.n	800f27c <__ssvfscanf_r+0xafc>
 800f26c:	2048      	movs	r0, #72	; 0x48
 800f26e:	2310      	movs	r3, #16
 800f270:	181b      	adds	r3, r3, r0
 800f272:	2208      	movs	r2, #8
 800f274:	2100      	movs	r1, #0
 800f276:	19d8      	adds	r0, r3, r7
 800f278:	f7fc fe3a 	bl	800bef0 <memset>
 800f27c:	2148      	movs	r1, #72	; 0x48
 800f27e:	2310      	movs	r3, #16
 800f280:	228c      	movs	r2, #140	; 0x8c
 800f282:	185b      	adds	r3, r3, r1
 800f284:	0052      	lsls	r2, r2, #1
 800f286:	19db      	adds	r3, r3, r7
 800f288:	1852      	adds	r2, r2, r1
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	0021      	movs	r1, r4
 800f28e:	0033      	movs	r3, r6
 800f290:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f292:	19d2      	adds	r2, r2, r7
 800f294:	f002 f882 	bl	801139c <_mbrtowc_r>
 800f298:	0003      	movs	r3, r0
 800f29a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f29c:	3301      	adds	r3, #1
 800f29e:	d101      	bne.n	800f2a4 <__ssvfscanf_r+0xb24>
 800f2a0:	f7ff fb3d 	bl	800e91e <__ssvfscanf_r+0x19e>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d12f      	bne.n	800f308 <__ssvfscanf_r+0xb88>
 800f2a8:	6020      	str	r0, [r4, #0]
 800f2aa:	6820      	ldr	r0, [r4, #0]
 800f2ac:	f002 f894 	bl	80113d8 <iswspace>
 800f2b0:	6238      	str	r0, [r7, #32]
 800f2b2:	2800      	cmp	r0, #0
 800f2b4:	d04a      	beq.n	800f34c <__ssvfscanf_r+0xbcc>
 800f2b6:	2e00      	cmp	r6, #0
 800f2b8:	d13c      	bne.n	800f334 <__ssvfscanf_r+0xbb4>
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d000      	beq.n	800f2c2 <__ssvfscanf_r+0xb42>
 800f2c0:	e640      	b.n	800ef44 <__ssvfscanf_r+0x7c4>
 800f2c2:	6023      	str	r3, [r4, #0]
 800f2c4:	2d00      	cmp	r5, #0
 800f2c6:	d100      	bne.n	800f2ca <__ssvfscanf_r+0xb4a>
 800f2c8:	e639      	b.n	800ef3e <__ssvfscanf_r+0x7be>
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	1ae4      	subs	r4, r4, r3
 800f2d0:	10a3      	asrs	r3, r4, #2
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d800      	bhi.n	800f2da <__ssvfscanf_r+0xb5a>
 800f2d8:	e631      	b.n	800ef3e <__ssvfscanf_r+0x7be>
 800f2da:	6828      	ldr	r0, [r5, #0]
 800f2dc:	1d21      	adds	r1, r4, #4
 800f2de:	f001 fd49 	bl	8010d74 <realloc>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d100      	bne.n	800f2e8 <__ssvfscanf_r+0xb68>
 800f2e6:	e62a      	b.n	800ef3e <__ssvfscanf_r+0x7be>
 800f2e8:	6028      	str	r0, [r5, #0]
 800f2ea:	e628      	b.n	800ef3e <__ssvfscanf_r+0x7be>
 800f2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ee:	60fb      	str	r3, [r7, #12]
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	001d      	movs	r5, r3
 800f2f4:	613b      	str	r3, [r7, #16]
 800f2f6:	633b      	str	r3, [r7, #48]	; 0x30
 800f2f8:	334c      	adds	r3, #76	; 0x4c
 800f2fa:	18fc      	adds	r4, r7, r3
 800f2fc:	e789      	b.n	800f212 <__ssvfscanf_r+0xa92>
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	001d      	movs	r5, r3
 800f302:	613b      	str	r3, [r7, #16]
 800f304:	633b      	str	r3, [r7, #48]	; 0x30
 800f306:	e784      	b.n	800f212 <__ssvfscanf_r+0xa92>
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	623e      	str	r6, [r7, #32]
 800f30c:	3302      	adds	r3, #2
 800f30e:	d1cc      	bne.n	800f2aa <__ssvfscanf_r+0xb2a>
 800f310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	2b00      	cmp	r3, #0
 800f316:	dd00      	ble.n	800f31a <__ssvfscanf_r+0xb9a>
 800f318:	e77d      	b.n	800f216 <__ssvfscanf_r+0xa96>
 800f31a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f31c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f31e:	f002 f93d 	bl	801159c <__ssrefill_r>
 800f322:	2800      	cmp	r0, #0
 800f324:	d100      	bne.n	800f328 <__ssvfscanf_r+0xba8>
 800f326:	e776      	b.n	800f216 <__ssvfscanf_r+0xa96>
 800f328:	6a3b      	ldr	r3, [r7, #32]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <__ssvfscanf_r+0xbb2>
 800f32e:	f7ff faf6 	bl	800e91e <__ssvfscanf_r+0x19e>
 800f332:	e7c2      	b.n	800f2ba <__ssvfscanf_r+0xb3a>
 800f334:	238c      	movs	r3, #140	; 0x8c
 800f336:	2248      	movs	r2, #72	; 0x48
 800f338:	005b      	lsls	r3, r3, #1
 800f33a:	189b      	adds	r3, r3, r2
 800f33c:	3e01      	subs	r6, #1
 800f33e:	19db      	adds	r3, r3, r7
 800f340:	5cf1      	ldrb	r1, [r6, r3]
 800f342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f344:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f346:	f002 f8ed 	bl	8011524 <_sungetc_r>
 800f34a:	e7b4      	b.n	800f2b6 <__ssvfscanf_r+0xb36>
 800f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34e:	199b      	adds	r3, r3, r6
 800f350:	63bb      	str	r3, [r7, #56]	; 0x38
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	2b03      	cmp	r3, #3
 800f356:	d102      	bne.n	800f35e <__ssvfscanf_r+0xbde>
 800f358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d002      	beq.n	800f364 <__ssvfscanf_r+0xbe4>
 800f35e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f360:	3b01      	subs	r3, #1
 800f362:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d1d2      	bne.n	800f310 <__ssvfscanf_r+0xb90>
 800f36a:	3404      	adds	r4, #4
 800f36c:	2d00      	cmp	r5, #0
 800f36e:	d016      	beq.n	800f39e <__ssvfscanf_r+0xc1e>
 800f370:	69fa      	ldr	r2, [r7, #28]
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	623a      	str	r2, [r7, #32]
 800f376:	693a      	ldr	r2, [r7, #16]
 800f378:	1ae6      	subs	r6, r4, r3
 800f37a:	10b3      	asrs	r3, r6, #2
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d3c7      	bcc.n	800f310 <__ssvfscanf_r+0xb90>
 800f380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f382:	00d1      	lsls	r1, r2, #3
 800f384:	f001 fcf6 	bl	8010d74 <realloc>
 800f388:	6338      	str	r0, [r7, #48]	; 0x30
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d101      	bne.n	800f392 <__ssvfscanf_r+0xc12>
 800f38e:	f7ff fbbf 	bl	800eb10 <__ssvfscanf_r+0x390>
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	1984      	adds	r4, r0, r6
 800f396:	005b      	lsls	r3, r3, #1
 800f398:	6028      	str	r0, [r5, #0]
 800f39a:	613b      	str	r3, [r7, #16]
 800f39c:	e7b8      	b.n	800f310 <__ssvfscanf_r+0xb90>
 800f39e:	623d      	str	r5, [r7, #32]
 800f3a0:	e7b6      	b.n	800f310 <__ssvfscanf_r+0xb90>
 800f3a2:	46c0      	nop			; (mov r8, r8)
 800f3a4:	0000fff6 	.word	0x0000fff6
 800f3a8:	080145c9 	.word	0x080145c9
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d01c      	beq.n	800f3ec <__ssvfscanf_r+0xc6c>
 800f3b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3b4:	49bf      	ldr	r1, [pc, #764]	; (800f6b4 <__ssvfscanf_r+0xf34>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	781a      	ldrb	r2, [r3, #0]
 800f3ba:	5c8a      	ldrb	r2, [r1, r2]
 800f3bc:	2108      	movs	r1, #8
 800f3be:	420a      	tst	r2, r1
 800f3c0:	d000      	beq.n	800f3c4 <__ssvfscanf_r+0xc44>
 800f3c2:	e4a1      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800f3c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f3c8:	6852      	ldr	r2, [r2, #4]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	600b      	str	r3, [r1, #0]
 800f3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3d0:	3a01      	subs	r2, #1
 800f3d2:	3401      	adds	r4, #1
 800f3d4:	604a      	str	r2, [r1, #4]
 800f3d6:	429c      	cmp	r4, r3
 800f3d8:	d100      	bne.n	800f3dc <__ssvfscanf_r+0xc5c>
 800f3da:	e495      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800f3dc:	2a00      	cmp	r2, #0
 800f3de:	dce8      	bgt.n	800f3b2 <__ssvfscanf_r+0xc32>
 800f3e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f3e2:	f002 f8db 	bl	801159c <__ssrefill_r>
 800f3e6:	2800      	cmp	r0, #0
 800f3e8:	d0e3      	beq.n	800f3b2 <__ssvfscanf_r+0xc32>
 800f3ea:	e48d      	b.n	800ed08 <__ssvfscanf_r+0x588>
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	0032      	movs	r2, r6
 800f3f0:	cb10      	ldmia	r3!, {r4}
 800f3f2:	61fb      	str	r3, [r7, #28]
 800f3f4:	2380      	movs	r3, #128	; 0x80
 800f3f6:	401a      	ands	r2, r3
 800f3f8:	421e      	tst	r6, r3
 800f3fa:	d039      	beq.n	800f470 <__ssvfscanf_r+0xcf0>
 800f3fc:	2c00      	cmp	r4, #0
 800f3fe:	d101      	bne.n	800f404 <__ssvfscanf_r+0xc84>
 800f400:	f7ff fabb 	bl	800e97a <__ssvfscanf_r+0x1fa>
 800f404:	2020      	movs	r0, #32
 800f406:	f7fb fa4d 	bl	800a8a4 <malloc>
 800f40a:	6338      	str	r0, [r7, #48]	; 0x30
 800f40c:	2800      	cmp	r0, #0
 800f40e:	d101      	bne.n	800f414 <__ssvfscanf_r+0xc94>
 800f410:	f7ff fa8c 	bl	800e92c <__ssvfscanf_r+0x1ac>
 800f414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f416:	6020      	str	r0, [r4, #0]
 800f418:	88de      	ldrh	r6, [r3, #6]
 800f41a:	889d      	ldrh	r5, [r3, #4]
 800f41c:	6818      	ldr	r0, [r3, #0]
 800f41e:	42ae      	cmp	r6, r5
 800f420:	d310      	bcc.n	800f444 <__ssvfscanf_r+0xcc4>
 800f422:	4ba5      	ldr	r3, [pc, #660]	; (800f6b8 <__ssvfscanf_r+0xf38>)
 800f424:	429d      	cmp	r5, r3
 800f426:	d901      	bls.n	800f42c <__ssvfscanf_r+0xcac>
 800f428:	f7ff fb7b 	bl	800eb22 <__ssvfscanf_r+0x3a2>
 800f42c:	3508      	adds	r5, #8
 800f42e:	b2ad      	uxth	r5, r5
 800f430:	00a9      	lsls	r1, r5, #2
 800f432:	f001 fc9f 	bl	8010d74 <realloc>
 800f436:	2800      	cmp	r0, #0
 800f438:	d101      	bne.n	800f43e <__ssvfscanf_r+0xcbe>
 800f43a:	f7ff fb72 	bl	800eb22 <__ssvfscanf_r+0x3a2>
 800f43e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f440:	6018      	str	r0, [r3, #0]
 800f442:	809d      	strh	r5, [r3, #4]
 800f444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f446:	1c72      	adds	r2, r6, #1
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	00b6      	lsls	r6, r6, #2
 800f44c:	50f4      	str	r4, [r6, r3]
 800f44e:	2320      	movs	r3, #32
 800f450:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f452:	0026      	movs	r6, r4
 800f454:	80ca      	strh	r2, [r1, #6]
 800f456:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800f458:	633b      	str	r3, [r7, #48]	; 0x30
 800f45a:	0025      	movs	r5, r4
 800f45c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f45e:	4995      	ldr	r1, [pc, #596]	; (800f6b4 <__ssvfscanf_r+0xf34>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	781a      	ldrb	r2, [r3, #0]
 800f464:	5c8a      	ldrb	r2, [r1, r2]
 800f466:	2108      	movs	r1, #8
 800f468:	420a      	tst	r2, r1
 800f46a:	d004      	beq.n	800f476 <__ssvfscanf_r+0xcf6>
 800f46c:	623c      	str	r4, [r7, #32]
 800f46e:	e031      	b.n	800f4d4 <__ssvfscanf_r+0xd54>
 800f470:	0016      	movs	r6, r2
 800f472:	633a      	str	r2, [r7, #48]	; 0x30
 800f474:	e7f1      	b.n	800f45a <__ssvfscanf_r+0xcda>
 800f476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f478:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f47a:	6852      	ldr	r2, [r2, #4]
 800f47c:	3a01      	subs	r2, #1
 800f47e:	604a      	str	r2, [r1, #4]
 800f480:	1c5a      	adds	r2, r3, #1
 800f482:	600a      	str	r2, [r1, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	1c62      	adds	r2, r4, #1
 800f488:	623a      	str	r2, [r7, #32]
 800f48a:	7023      	strb	r3, [r4, #0]
 800f48c:	2e00      	cmp	r6, #0
 800f48e:	d010      	beq.n	800f4b2 <__ssvfscanf_r+0xd32>
 800f490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f492:	1b54      	subs	r4, r2, r5
 800f494:	429c      	cmp	r4, r3
 800f496:	d30c      	bcc.n	800f4b2 <__ssvfscanf_r+0xd32>
 800f498:	005b      	lsls	r3, r3, #1
 800f49a:	0028      	movs	r0, r5
 800f49c:	0019      	movs	r1, r3
 800f49e:	633b      	str	r3, [r7, #48]	; 0x30
 800f4a0:	f001 fc68 	bl	8010d74 <realloc>
 800f4a4:	1e05      	subs	r5, r0, #0
 800f4a6:	d101      	bne.n	800f4ac <__ssvfscanf_r+0xd2c>
 800f4a8:	f7ff fa40 	bl	800e92c <__ssvfscanf_r+0x1ac>
 800f4ac:	1903      	adds	r3, r0, r4
 800f4ae:	623b      	str	r3, [r7, #32]
 800f4b0:	6030      	str	r0, [r6, #0]
 800f4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <__ssvfscanf_r+0xd54>
 800f4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	dd01      	ble.n	800f4c8 <__ssvfscanf_r+0xd48>
 800f4c4:	6a3c      	ldr	r4, [r7, #32]
 800f4c6:	e7c9      	b.n	800f45c <__ssvfscanf_r+0xcdc>
 800f4c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4cc:	f002 f866 	bl	801159c <__ssrefill_r>
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	d0f7      	beq.n	800f4c4 <__ssvfscanf_r+0xd44>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	6a3a      	ldr	r2, [r7, #32]
 800f4d8:	7013      	strb	r3, [r2, #0]
 800f4da:	1b55      	subs	r5, r2, r5
 800f4dc:	2e00      	cmp	r6, #0
 800f4de:	d009      	beq.n	800f4f4 <__ssvfscanf_r+0xd74>
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e2:	1c69      	adds	r1, r5, #1
 800f4e4:	428b      	cmp	r3, r1
 800f4e6:	d905      	bls.n	800f4f4 <__ssvfscanf_r+0xd74>
 800f4e8:	6830      	ldr	r0, [r6, #0]
 800f4ea:	f001 fc43 	bl	8010d74 <realloc>
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	d000      	beq.n	800f4f4 <__ssvfscanf_r+0xd74>
 800f4f2:	6030      	str	r0, [r6, #0]
 800f4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f6:	195b      	adds	r3, r3, r5
 800f4f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f500:	e63c      	b.n	800f17c <__ssvfscanf_r+0x9fc>
 800f502:	22ae      	movs	r2, #174	; 0xae
 800f504:	2100      	movs	r1, #0
 800f506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f508:	0052      	lsls	r2, r2, #1
 800f50a:	3b01      	subs	r3, #1
 800f50c:	6239      	str	r1, [r7, #32]
 800f50e:	4293      	cmp	r3, r2
 800f510:	d906      	bls.n	800f520 <__ssvfscanf_r+0xda0>
 800f512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f514:	3b5e      	subs	r3, #94	; 0x5e
 800f516:	3bff      	subs	r3, #255	; 0xff
 800f518:	623b      	str	r3, [r7, #32]
 800f51a:	235e      	movs	r3, #94	; 0x5e
 800f51c:	33ff      	adds	r3, #255	; 0xff
 800f51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f520:	24d8      	movs	r4, #216	; 0xd8
 800f522:	2300      	movs	r3, #0
 800f524:	2248      	movs	r2, #72	; 0x48
 800f526:	0124      	lsls	r4, r4, #4
 800f528:	4334      	orrs	r4, r6
 800f52a:	2680      	movs	r6, #128	; 0x80
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	3319      	adds	r3, #25
 800f530:	33ff      	adds	r3, #255	; 0xff
 800f532:	189b      	adds	r3, r3, r2
 800f534:	19dd      	adds	r5, r3, r7
 800f536:	00b6      	lsls	r6, r6, #2
 800f538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f53a:	681a      	ldr	r2, [r3, #0]
 800f53c:	7813      	ldrb	r3, [r2, #0]
 800f53e:	2b39      	cmp	r3, #57	; 0x39
 800f540:	d80f      	bhi.n	800f562 <__ssvfscanf_r+0xde2>
 800f542:	2b2a      	cmp	r3, #42	; 0x2a
 800f544:	d91b      	bls.n	800f57e <__ssvfscanf_r+0xdfe>
 800f546:	0018      	movs	r0, r3
 800f548:	382b      	subs	r0, #43	; 0x2b
 800f54a:	280e      	cmp	r0, #14
 800f54c:	d817      	bhi.n	800f57e <__ssvfscanf_r+0xdfe>
 800f54e:	f7f0 fde1 	bl	8000114 <__gnu_thumb1_case_uqi>
 800f552:	168f      	.short	0x168f
 800f554:	5416168f 	.word	0x5416168f
 800f558:	80808080 	.word	0x80808080
 800f55c:	87808080 	.word	0x87808080
 800f560:	87          	.byte	0x87
 800f561:	00          	.byte	0x00
 800f562:	2b66      	cmp	r3, #102	; 0x66
 800f564:	d83a      	bhi.n	800f5dc <__ssvfscanf_r+0xe5c>
 800f566:	2b60      	cmp	r3, #96	; 0x60
 800f568:	d803      	bhi.n	800f572 <__ssvfscanf_r+0xdf2>
 800f56a:	2b46      	cmp	r3, #70	; 0x46
 800f56c:	d805      	bhi.n	800f57a <__ssvfscanf_r+0xdfa>
 800f56e:	2b40      	cmp	r3, #64	; 0x40
 800f570:	d905      	bls.n	800f57e <__ssvfscanf_r+0xdfe>
 800f572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f574:	290a      	cmp	r1, #10
 800f576:	dc71      	bgt.n	800f65c <__ssvfscanf_r+0xedc>
 800f578:	e001      	b.n	800f57e <__ssvfscanf_r+0xdfe>
 800f57a:	2b58      	cmp	r3, #88	; 0x58
 800f57c:	d030      	beq.n	800f5e0 <__ssvfscanf_r+0xe60>
 800f57e:	05e3      	lsls	r3, r4, #23
 800f580:	d515      	bpl.n	800f5ae <__ssvfscanf_r+0xe2e>
 800f582:	238c      	movs	r3, #140	; 0x8c
 800f584:	2248      	movs	r2, #72	; 0x48
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	189b      	adds	r3, r3, r2
 800f58a:	19db      	adds	r3, r3, r7
 800f58c:	429d      	cmp	r5, r3
 800f58e:	d905      	bls.n	800f59c <__ssvfscanf_r+0xe1c>
 800f590:	3d01      	subs	r5, #1
 800f592:	7829      	ldrb	r1, [r5, #0]
 800f594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f598:	f001 ffc4 	bl	8011524 <_sungetc_r>
 800f59c:	238c      	movs	r3, #140	; 0x8c
 800f59e:	2248      	movs	r2, #72	; 0x48
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	189b      	adds	r3, r3, r2
 800f5a4:	19db      	adds	r3, r3, r7
 800f5a6:	429d      	cmp	r5, r3
 800f5a8:	d101      	bne.n	800f5ae <__ssvfscanf_r+0xe2e>
 800f5aa:	f7ff f9e6 	bl	800e97a <__ssvfscanf_r+0x1fa>
 800f5ae:	2310      	movs	r3, #16
 800f5b0:	0022      	movs	r2, r4
 800f5b2:	401a      	ands	r2, r3
 800f5b4:	421c      	tst	r4, r3
 800f5b6:	d171      	bne.n	800f69c <__ssvfscanf_r+0xf1c>
 800f5b8:	218c      	movs	r1, #140	; 0x8c
 800f5ba:	2048      	movs	r0, #72	; 0x48
 800f5bc:	0049      	lsls	r1, r1, #1
 800f5be:	1809      	adds	r1, r1, r0
 800f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5c2:	697e      	ldr	r6, [r7, #20]
 800f5c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f5c6:	19c9      	adds	r1, r1, r7
 800f5c8:	702a      	strb	r2, [r5, #0]
 800f5ca:	47b0      	blx	r6
 800f5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ce:	1d1e      	adds	r6, r3, #4
 800f5d0:	06a3      	lsls	r3, r4, #26
 800f5d2:	d559      	bpl.n	800f688 <__ssvfscanf_r+0xf08>
 800f5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	6018      	str	r0, [r3, #0]
 800f5da:	e05b      	b.n	800f694 <__ssvfscanf_r+0xf14>
 800f5dc:	2b78      	cmp	r3, #120	; 0x78
 800f5de:	d1ce      	bne.n	800f57e <__ssvfscanf_r+0xdfe>
 800f5e0:	21c0      	movs	r1, #192	; 0xc0
 800f5e2:	00c9      	lsls	r1, r1, #3
 800f5e4:	4021      	ands	r1, r4
 800f5e6:	42b1      	cmp	r1, r6
 800f5e8:	d1c9      	bne.n	800f57e <__ssvfscanf_r+0xdfe>
 800f5ea:	4934      	ldr	r1, [pc, #208]	; (800f6bc <__ssvfscanf_r+0xf3c>)
 800f5ec:	4021      	ands	r1, r4
 800f5ee:	24a0      	movs	r4, #160	; 0xa0
 800f5f0:	00e4      	lsls	r4, r4, #3
 800f5f2:	430c      	orrs	r4, r1
 800f5f4:	2110      	movs	r1, #16
 800f5f6:	6279      	str	r1, [r7, #36]	; 0x24
 800f5f8:	e00b      	b.n	800f612 <__ssvfscanf_r+0xe92>
 800f5fa:	0521      	lsls	r1, r4, #20
 800f5fc:	d509      	bpl.n	800f612 <__ssvfscanf_r+0xe92>
 800f5fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f600:	2900      	cmp	r1, #0
 800f602:	d102      	bne.n	800f60a <__ssvfscanf_r+0xe8a>
 800f604:	3108      	adds	r1, #8
 800f606:	4334      	orrs	r4, r6
 800f608:	6279      	str	r1, [r7, #36]	; 0x24
 800f60a:	0561      	lsls	r1, r4, #21
 800f60c:	d504      	bpl.n	800f618 <__ssvfscanf_r+0xe98>
 800f60e:	492c      	ldr	r1, [pc, #176]	; (800f6c0 <__ssvfscanf_r+0xf40>)
 800f610:	400c      	ands	r4, r1
 800f612:	702b      	strb	r3, [r5, #0]
 800f614:	3501      	adds	r5, #1
 800f616:	e00c      	b.n	800f632 <__ssvfscanf_r+0xeb2>
 800f618:	4b2a      	ldr	r3, [pc, #168]	; (800f6c4 <__ssvfscanf_r+0xf44>)
 800f61a:	401c      	ands	r4, r3
 800f61c:	6a3b      	ldr	r3, [r7, #32]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d004      	beq.n	800f62c <__ssvfscanf_r+0xeac>
 800f622:	3b01      	subs	r3, #1
 800f624:	623b      	str	r3, [r7, #32]
 800f626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f628:	3301      	adds	r3, #1
 800f62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	3301      	adds	r3, #1
 800f630:	61fb      	str	r3, [r7, #28]
 800f632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f634:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	3b01      	subs	r3, #1
 800f63a:	604b      	str	r3, [r1, #4]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	dd1c      	ble.n	800f67a <__ssvfscanf_r+0xefa>
 800f640:	3201      	adds	r2, #1
 800f642:	600a      	str	r2, [r1, #0]
 800f644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f646:	3b01      	subs	r3, #1
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d000      	beq.n	800f650 <__ssvfscanf_r+0xed0>
 800f64e:	e773      	b.n	800f538 <__ssvfscanf_r+0xdb8>
 800f650:	e795      	b.n	800f57e <__ssvfscanf_r+0xdfe>
 800f652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f654:	491c      	ldr	r1, [pc, #112]	; (800f6c8 <__ssvfscanf_r+0xf48>)
 800f656:	0040      	lsls	r0, r0, #1
 800f658:	5e41      	ldrsh	r1, [r0, r1]
 800f65a:	6279      	str	r1, [r7, #36]	; 0x24
 800f65c:	491b      	ldr	r1, [pc, #108]	; (800f6cc <__ssvfscanf_r+0xf4c>)
 800f65e:	e7d7      	b.n	800f610 <__ssvfscanf_r+0xe90>
 800f660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f662:	4919      	ldr	r1, [pc, #100]	; (800f6c8 <__ssvfscanf_r+0xf48>)
 800f664:	0040      	lsls	r0, r0, #1
 800f666:	5e41      	ldrsh	r1, [r0, r1]
 800f668:	6279      	str	r1, [r7, #36]	; 0x24
 800f66a:	2908      	cmp	r1, #8
 800f66c:	dcf6      	bgt.n	800f65c <__ssvfscanf_r+0xedc>
 800f66e:	e786      	b.n	800f57e <__ssvfscanf_r+0xdfe>
 800f670:	2180      	movs	r1, #128	; 0x80
 800f672:	420c      	tst	r4, r1
 800f674:	d083      	beq.n	800f57e <__ssvfscanf_r+0xdfe>
 800f676:	438c      	bics	r4, r1
 800f678:	e7cb      	b.n	800f612 <__ssvfscanf_r+0xe92>
 800f67a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f67c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f67e:	f001 ff8d 	bl	801159c <__ssrefill_r>
 800f682:	2800      	cmp	r0, #0
 800f684:	d0de      	beq.n	800f644 <__ssvfscanf_r+0xec4>
 800f686:	e77a      	b.n	800f57e <__ssvfscanf_r+0xdfe>
 800f688:	2308      	movs	r3, #8
 800f68a:	421c      	tst	r4, r3
 800f68c:	d020      	beq.n	800f6d0 <__ssvfscanf_r+0xf50>
 800f68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	7018      	strb	r0, [r3, #0]
 800f694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f696:	633e      	str	r6, [r7, #48]	; 0x30
 800f698:	3301      	adds	r3, #1
 800f69a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f69c:	238c      	movs	r3, #140	; 0x8c
 800f69e:	2248      	movs	r2, #72	; 0x48
 800f6a0:	005b      	lsls	r3, r3, #1
 800f6a2:	189b      	adds	r3, r3, r2
 800f6a4:	19db      	adds	r3, r3, r7
 800f6a6:	1aed      	subs	r5, r5, r3
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	18ed      	adds	r5, r5, r3
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	195b      	adds	r3, r3, r5
 800f6b0:	f7ff f92d 	bl	800e90e <__ssvfscanf_r+0x18e>
 800f6b4:	080145c9 	.word	0x080145c9
 800f6b8:	0000fff6 	.word	0x0000fff6
 800f6bc:	fffffdff 	.word	0xfffffdff
 800f6c0:	fffffa7f 	.word	0xfffffa7f
 800f6c4:	fffffc7f 	.word	0xfffffc7f
 800f6c8:	080148f6 	.word	0x080148f6
 800f6cc:	fffff47f 	.word	0xfffff47f
 800f6d0:	0763      	lsls	r3, r4, #29
 800f6d2:	d503      	bpl.n	800f6dc <__ssvfscanf_r+0xf5c>
 800f6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	8018      	strh	r0, [r3, #0]
 800f6da:	e7db      	b.n	800f694 <__ssvfscanf_r+0xf14>
 800f6dc:	2301      	movs	r3, #1
 800f6de:	0022      	movs	r2, r4
 800f6e0:	401a      	ands	r2, r3
 800f6e2:	421c      	tst	r4, r3
 800f6e4:	d000      	beq.n	800f6e8 <__ssvfscanf_r+0xf68>
 800f6e6:	e775      	b.n	800f5d4 <__ssvfscanf_r+0xe54>
 800f6e8:	07a4      	lsls	r4, r4, #30
 800f6ea:	d400      	bmi.n	800f6ee <__ssvfscanf_r+0xf6e>
 800f6ec:	e772      	b.n	800f5d4 <__ssvfscanf_r+0xe54>
 800f6ee:	4ba8      	ldr	r3, [pc, #672]	; (800f990 <__ssvfscanf_r+0x1210>)
 800f6f0:	6979      	ldr	r1, [r7, #20]
 800f6f2:	4299      	cmp	r1, r3
 800f6f4:	d10c      	bne.n	800f710 <__ssvfscanf_r+0xf90>
 800f6f6:	218c      	movs	r1, #140	; 0x8c
 800f6f8:	2048      	movs	r0, #72	; 0x48
 800f6fa:	0049      	lsls	r1, r1, #1
 800f6fc:	1809      	adds	r1, r1, r0
 800f6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f700:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f702:	19c9      	adds	r1, r1, r7
 800f704:	f001 fe46 	bl	8011394 <_strtoull_r>
 800f708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	c303      	stmia	r3!, {r0, r1}
 800f70e:	e7c1      	b.n	800f694 <__ssvfscanf_r+0xf14>
 800f710:	218c      	movs	r1, #140	; 0x8c
 800f712:	2048      	movs	r0, #72	; 0x48
 800f714:	0049      	lsls	r1, r1, #1
 800f716:	1809      	adds	r1, r1, r0
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f71c:	19c9      	adds	r1, r1, r7
 800f71e:	f001 fd87 	bl	8011230 <_strtoll_r>
 800f722:	e7f1      	b.n	800f708 <__ssvfscanf_r+0xf88>
 800f724:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f726:	f000 fb9f 	bl	800fe68 <_localeconv_r>
 800f72a:	22ae      	movs	r2, #174	; 0xae
 800f72c:	2100      	movs	r1, #0
 800f72e:	6803      	ldr	r3, [r0, #0]
 800f730:	0052      	lsls	r2, r2, #1
 800f732:	603b      	str	r3, [r7, #0]
 800f734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f736:	60f9      	str	r1, [r7, #12]
 800f738:	3b01      	subs	r3, #1
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d906      	bls.n	800f74c <__ssvfscanf_r+0xfcc>
 800f73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f740:	3b5e      	subs	r3, #94	; 0x5e
 800f742:	3bff      	subs	r3, #255	; 0xff
 800f744:	60fb      	str	r3, [r7, #12]
 800f746:	235e      	movs	r3, #94	; 0x5e
 800f748:	33ff      	adds	r3, #255	; 0xff
 800f74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f74c:	23f0      	movs	r3, #240	; 0xf0
 800f74e:	00db      	lsls	r3, r3, #3
 800f750:	431e      	orrs	r6, r3
 800f752:	238c      	movs	r3, #140	; 0x8c
 800f754:	2248      	movs	r2, #72	; 0x48
 800f756:	2400      	movs	r4, #0
 800f758:	005b      	lsls	r3, r3, #1
 800f75a:	189b      	adds	r3, r3, r2
 800f75c:	623c      	str	r4, [r7, #32]
 800f75e:	607c      	str	r4, [r7, #4]
 800f760:	60bc      	str	r4, [r7, #8]
 800f762:	61fc      	str	r4, [r7, #28]
 800f764:	613c      	str	r4, [r7, #16]
 800f766:	19dd      	adds	r5, r3, r7
 800f768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	781a      	ldrb	r2, [r3, #0]
 800f76e:	0010      	movs	r0, r2
 800f770:	382b      	subs	r0, #43	; 0x2b
 800f772:	284e      	cmp	r0, #78	; 0x4e
 800f774:	d900      	bls.n	800f778 <__ssvfscanf_r+0xff8>
 800f776:	e133      	b.n	800f9e0 <__ssvfscanf_r+0x1260>
 800f778:	f7f0 fcd6 	bl	8000128 <__gnu_thumb1_case_uhi>
 800f77c:	0132009b 	.word	0x0132009b
 800f780:	0132009b 	.word	0x0132009b
 800f784:	004f0132 	.word	0x004f0132
 800f788:	00720072 	.word	0x00720072
 800f78c:	00720072 	.word	0x00720072
 800f790:	00720072 	.word	0x00720072
 800f794:	00720072 	.word	0x00720072
 800f798:	01320072 	.word	0x01320072
 800f79c:	01320132 	.word	0x01320132
 800f7a0:	01320132 	.word	0x01320132
 800f7a4:	01320132 	.word	0x01320132
 800f7a8:	007b00bc 	.word	0x007b00bc
 800f7ac:	007b007b 	.word	0x007b007b
 800f7b0:	00f7012f 	.word	0x00f7012f
 800f7b4:	01320132 	.word	0x01320132
 800f7b8:	013200e3 	.word	0x013200e3
 800f7bc:	01320132 	.word	0x01320132
 800f7c0:	00a00132 	.word	0x00a00132
 800f7c4:	01120132 	.word	0x01120132
 800f7c8:	01320132 	.word	0x01320132
 800f7cc:	01010132 	.word	0x01010132
 800f7d0:	01320132 	.word	0x01320132
 800f7d4:	00820132 	.word	0x00820132
 800f7d8:	01320105 	.word	0x01320105
 800f7dc:	01320132 	.word	0x01320132
 800f7e0:	01320132 	.word	0x01320132
 800f7e4:	01320132 	.word	0x01320132
 800f7e8:	007b00bc 	.word	0x007b00bc
 800f7ec:	007b007b 	.word	0x007b007b
 800f7f0:	00f7012f 	.word	0x00f7012f
 800f7f4:	01320132 	.word	0x01320132
 800f7f8:	013200e3 	.word	0x013200e3
 800f7fc:	01320132 	.word	0x01320132
 800f800:	00a00132 	.word	0x00a00132
 800f804:	01120132 	.word	0x01120132
 800f808:	01320132 	.word	0x01320132
 800f80c:	01010132 	.word	0x01010132
 800f810:	01320132 	.word	0x01320132
 800f814:	00820132 	.word	0x00820132
 800f818:	0105      	.short	0x0105
 800f81a:	05f1      	lsls	r1, r6, #23
 800f81c:	d520      	bpl.n	800f860 <__ssvfscanf_r+0x10e0>
 800f81e:	2280      	movs	r2, #128	; 0x80
 800f820:	4396      	bics	r6, r2
 800f822:	69fa      	ldr	r2, [r7, #28]
 800f824:	3201      	adds	r2, #1
 800f826:	61fa      	str	r2, [r7, #28]
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	2a00      	cmp	r2, #0
 800f82c:	d004      	beq.n	800f838 <__ssvfscanf_r+0x10b8>
 800f82e:	3a01      	subs	r2, #1
 800f830:	60fa      	str	r2, [r7, #12]
 800f832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f834:	3201      	adds	r2, #1
 800f836:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f83a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f83c:	3a01      	subs	r2, #1
 800f83e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800f840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f842:	3201      	adds	r2, #1
 800f844:	63ba      	str	r2, [r7, #56]	; 0x38
 800f846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f848:	6852      	ldr	r2, [r2, #4]
 800f84a:	3a01      	subs	r2, #1
 800f84c:	604a      	str	r2, [r1, #4]
 800f84e:	2a00      	cmp	r2, #0
 800f850:	dc00      	bgt.n	800f854 <__ssvfscanf_r+0x10d4>
 800f852:	e0d6      	b.n	800fa02 <__ssvfscanf_r+0x1282>
 800f854:	3301      	adds	r3, #1
 800f856:	600b      	str	r3, [r1, #0]
 800f858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d184      	bne.n	800f768 <__ssvfscanf_r+0xfe8>
 800f85e:	e057      	b.n	800f910 <__ssvfscanf_r+0x1190>
 800f860:	6a39      	ldr	r1, [r7, #32]
 800f862:	1909      	adds	r1, r1, r4
 800f864:	2900      	cmp	r1, #0
 800f866:	d153      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f868:	494a      	ldr	r1, [pc, #296]	; (800f994 <__ssvfscanf_r+0x1214>)
 800f86a:	400e      	ands	r6, r1
 800f86c:	702a      	strb	r2, [r5, #0]
 800f86e:	3501      	adds	r5, #1
 800f870:	e7e2      	b.n	800f838 <__ssvfscanf_r+0x10b8>
 800f872:	0531      	lsls	r1, r6, #20
 800f874:	d54c      	bpl.n	800f910 <__ssvfscanf_r+0x1190>
 800f876:	6a39      	ldr	r1, [r7, #32]
 800f878:	1909      	adds	r1, r1, r4
 800f87a:	2900      	cmp	r1, #0
 800f87c:	d040      	beq.n	800f900 <__ssvfscanf_r+0x1180>
 800f87e:	e047      	b.n	800f910 <__ssvfscanf_r+0x1190>
 800f880:	2198      	movs	r1, #152	; 0x98
 800f882:	2080      	movs	r0, #128	; 0x80
 800f884:	0109      	lsls	r1, r1, #4
 800f886:	4031      	ands	r1, r6
 800f888:	0040      	lsls	r0, r0, #1
 800f88a:	4281      	cmp	r1, r0
 800f88c:	d140      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f88e:	69f9      	ldr	r1, [r7, #28]
 800f890:	2901      	cmp	r1, #1
 800f892:	d13d      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f894:	2080      	movs	r0, #128	; 0x80
 800f896:	4940      	ldr	r1, [pc, #256]	; (800f998 <__ssvfscanf_r+0x1218>)
 800f898:	0100      	lsls	r0, r0, #4
 800f89a:	400e      	ands	r6, r1
 800f89c:	3132      	adds	r1, #50	; 0x32
 800f89e:	31ff      	adds	r1, #255	; 0xff
 800f8a0:	7029      	strb	r1, [r5, #0]
 800f8a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f8a4:	4306      	orrs	r6, r0
 800f8a6:	3901      	subs	r1, #1
 800f8a8:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f8aa:	3501      	adds	r5, #1
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	61f9      	str	r1, [r7, #28]
 800f8b0:	e7dc      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f8b2:	2180      	movs	r1, #128	; 0x80
 800f8b4:	420e      	tst	r6, r1
 800f8b6:	d02b      	beq.n	800f910 <__ssvfscanf_r+0x1190>
 800f8b8:	438e      	bics	r6, r1
 800f8ba:	e7d7      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f8bc:	6a39      	ldr	r1, [r7, #32]
 800f8be:	2900      	cmp	r1, #0
 800f8c0:	d10d      	bne.n	800f8de <__ssvfscanf_r+0x115e>
 800f8c2:	69f9      	ldr	r1, [r7, #28]
 800f8c4:	2900      	cmp	r1, #0
 800f8c6:	d10e      	bne.n	800f8e6 <__ssvfscanf_r+0x1166>
 800f8c8:	21e0      	movs	r1, #224	; 0xe0
 800f8ca:	0030      	movs	r0, r6
 800f8cc:	00c9      	lsls	r1, r1, #3
 800f8ce:	4008      	ands	r0, r1
 800f8d0:	4288      	cmp	r0, r1
 800f8d2:	d108      	bne.n	800f8e6 <__ssvfscanf_r+0x1166>
 800f8d4:	4931      	ldr	r1, [pc, #196]	; (800f99c <__ssvfscanf_r+0x121c>)
 800f8d6:	400e      	ands	r6, r1
 800f8d8:	2101      	movs	r1, #1
 800f8da:	6239      	str	r1, [r7, #32]
 800f8dc:	e7c6      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f8de:	6a39      	ldr	r1, [r7, #32]
 800f8e0:	2902      	cmp	r1, #2
 800f8e2:	d100      	bne.n	800f8e6 <__ssvfscanf_r+0x1166>
 800f8e4:	e089      	b.n	800f9fa <__ssvfscanf_r+0x127a>
 800f8e6:	2c01      	cmp	r4, #1
 800f8e8:	d001      	beq.n	800f8ee <__ssvfscanf_r+0x116e>
 800f8ea:	2c04      	cmp	r4, #4
 800f8ec:	d110      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f8ee:	3401      	adds	r4, #1
 800f8f0:	b2e4      	uxtb	r4, r4
 800f8f2:	e7bb      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f8f4:	0531      	lsls	r1, r6, #20
 800f8f6:	d508      	bpl.n	800f90a <__ssvfscanf_r+0x118a>
 800f8f8:	6a39      	ldr	r1, [r7, #32]
 800f8fa:	1909      	adds	r1, r1, r4
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	d104      	bne.n	800f90a <__ssvfscanf_r+0x118a>
 800f900:	4824      	ldr	r0, [pc, #144]	; (800f994 <__ssvfscanf_r+0x1214>)
 800f902:	000c      	movs	r4, r1
 800f904:	4006      	ands	r6, r0
 800f906:	6239      	str	r1, [r7, #32]
 800f908:	e7b0      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f90a:	6a39      	ldr	r1, [r7, #32]
 800f90c:	2901      	cmp	r1, #1
 800f90e:	d076      	beq.n	800f9fe <__ssvfscanf_r+0x127e>
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d001      	beq.n	800f91a <__ssvfscanf_r+0x119a>
 800f916:	4b20      	ldr	r3, [pc, #128]	; (800f998 <__ssvfscanf_r+0x1218>)
 800f918:	401e      	ands	r6, r3
 800f91a:	6a3b      	ldr	r3, [r7, #32]
 800f91c:	3b01      	subs	r3, #1
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d877      	bhi.n	800fa12 <__ssvfscanf_r+0x1292>
 800f922:	238c      	movs	r3, #140	; 0x8c
 800f924:	2248      	movs	r2, #72	; 0x48
 800f926:	005b      	lsls	r3, r3, #1
 800f928:	189b      	adds	r3, r3, r2
 800f92a:	19db      	adds	r3, r3, r7
 800f92c:	429d      	cmp	r5, r3
 800f92e:	d801      	bhi.n	800f934 <__ssvfscanf_r+0x11b4>
 800f930:	f7ff f823 	bl	800e97a <__ssvfscanf_r+0x1fa>
 800f934:	3d01      	subs	r5, #1
 800f936:	7829      	ldrb	r1, [r5, #0]
 800f938:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f93a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f93c:	f001 fdf2 	bl	8011524 <_sungetc_r>
 800f940:	e7ef      	b.n	800f922 <__ssvfscanf_r+0x11a2>
 800f942:	2c00      	cmp	r4, #0
 800f944:	d10c      	bne.n	800f960 <__ssvfscanf_r+0x11e0>
 800f946:	69f9      	ldr	r1, [r7, #28]
 800f948:	2900      	cmp	r1, #0
 800f94a:	d1e4      	bne.n	800f916 <__ssvfscanf_r+0x1196>
 800f94c:	21e0      	movs	r1, #224	; 0xe0
 800f94e:	0030      	movs	r0, r6
 800f950:	00c9      	lsls	r1, r1, #3
 800f952:	4008      	ands	r0, r1
 800f954:	4288      	cmp	r0, r1
 800f956:	d1e0      	bne.n	800f91a <__ssvfscanf_r+0x119a>
 800f958:	4910      	ldr	r1, [pc, #64]	; (800f99c <__ssvfscanf_r+0x121c>)
 800f95a:	3401      	adds	r4, #1
 800f95c:	400e      	ands	r6, r1
 800f95e:	e785      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f960:	20fd      	movs	r0, #253	; 0xfd
 800f962:	1ee1      	subs	r1, r4, #3
 800f964:	4201      	tst	r1, r0
 800f966:	d1d3      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f968:	e7c1      	b.n	800f8ee <__ssvfscanf_r+0x116e>
 800f96a:	0531      	lsls	r1, r6, #20
 800f96c:	d503      	bpl.n	800f976 <__ssvfscanf_r+0x11f6>
 800f96e:	6a39      	ldr	r1, [r7, #32]
 800f970:	1909      	adds	r1, r1, r4
 800f972:	2900      	cmp	r1, #0
 800f974:	d0c4      	beq.n	800f900 <__ssvfscanf_r+0x1180>
 800f976:	2c02      	cmp	r4, #2
 800f978:	d1ca      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f97a:	2403      	movs	r4, #3
 800f97c:	e776      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f97e:	2c06      	cmp	r4, #6
 800f980:	d1c6      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f982:	2407      	movs	r4, #7
 800f984:	e772      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f986:	2c07      	cmp	r4, #7
 800f988:	d1c2      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f98a:	2408      	movs	r4, #8
 800f98c:	e76e      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f98e:	46c0      	nop			; (mov r8, r8)
 800f990:	0800bbb5 	.word	0x0800bbb5
 800f994:	fffffe7f 	.word	0xfffffe7f
 800f998:	fffffeff 	.word	0xfffffeff
 800f99c:	fffff87f 	.word	0xfffff87f
 800f9a0:	0531      	lsls	r1, r6, #20
 800f9a2:	d5b5      	bpl.n	800f910 <__ssvfscanf_r+0x1190>
 800f9a4:	21a0      	movs	r1, #160	; 0xa0
 800f9a6:	2080      	movs	r0, #128	; 0x80
 800f9a8:	00c9      	lsls	r1, r1, #3
 800f9aa:	00c0      	lsls	r0, r0, #3
 800f9ac:	4031      	ands	r1, r6
 800f9ae:	4281      	cmp	r1, r0
 800f9b0:	d004      	beq.n	800f9bc <__ssvfscanf_r+0x123c>
 800f9b2:	4206      	tst	r6, r0
 800f9b4:	d0ac      	beq.n	800f910 <__ssvfscanf_r+0x1190>
 800f9b6:	69f9      	ldr	r1, [r7, #28]
 800f9b8:	2900      	cmp	r1, #0
 800f9ba:	d0ae      	beq.n	800f91a <__ssvfscanf_r+0x119a>
 800f9bc:	2180      	movs	r1, #128	; 0x80
 800f9be:	0089      	lsls	r1, r1, #2
 800f9c0:	420e      	tst	r6, r1
 800f9c2:	d104      	bne.n	800f9ce <__ssvfscanf_r+0x124e>
 800f9c4:	69f9      	ldr	r1, [r7, #28]
 800f9c6:	6938      	ldr	r0, [r7, #16]
 800f9c8:	607d      	str	r5, [r7, #4]
 800f9ca:	1a09      	subs	r1, r1, r0
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	20c0      	movs	r0, #192	; 0xc0
 800f9d0:	4973      	ldr	r1, [pc, #460]	; (800fba0 <__ssvfscanf_r+0x1420>)
 800f9d2:	0040      	lsls	r0, r0, #1
 800f9d4:	400e      	ands	r6, r1
 800f9d6:	4306      	orrs	r6, r0
 800f9d8:	e768      	b.n	800f8ac <__ssvfscanf_r+0x112c>
 800f9da:	0531      	lsls	r1, r6, #20
 800f9dc:	d5e2      	bpl.n	800f9a4 <__ssvfscanf_r+0x1224>
 800f9de:	e74a      	b.n	800f876 <__ssvfscanf_r+0x10f6>
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	7809      	ldrb	r1, [r1, #0]
 800f9e4:	4291      	cmp	r1, r2
 800f9e6:	d193      	bne.n	800f910 <__ssvfscanf_r+0x1190>
 800f9e8:	2180      	movs	r1, #128	; 0x80
 800f9ea:	0089      	lsls	r1, r1, #2
 800f9ec:	420e      	tst	r6, r1
 800f9ee:	d08f      	beq.n	800f910 <__ssvfscanf_r+0x1190>
 800f9f0:	496c      	ldr	r1, [pc, #432]	; (800fba4 <__ssvfscanf_r+0x1424>)
 800f9f2:	400e      	ands	r6, r1
 800f9f4:	69f9      	ldr	r1, [r7, #28]
 800f9f6:	6139      	str	r1, [r7, #16]
 800f9f8:	e738      	b.n	800f86c <__ssvfscanf_r+0x10ec>
 800f9fa:	2103      	movs	r1, #3
 800f9fc:	e76d      	b.n	800f8da <__ssvfscanf_r+0x115a>
 800f9fe:	2102      	movs	r1, #2
 800fa00:	e76b      	b.n	800f8da <__ssvfscanf_r+0x115a>
 800fa02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fa04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa06:	f001 fdc9 	bl	801159c <__ssrefill_r>
 800fa0a:	2800      	cmp	r0, #0
 800fa0c:	d100      	bne.n	800fa10 <__ssvfscanf_r+0x1290>
 800fa0e:	e723      	b.n	800f858 <__ssvfscanf_r+0x10d8>
 800fa10:	e77e      	b.n	800f910 <__ssvfscanf_r+0x1190>
 800fa12:	1e63      	subs	r3, r4, #1
 800fa14:	2b06      	cmp	r3, #6
 800fa16:	d825      	bhi.n	800fa64 <__ssvfscanf_r+0x12e4>
 800fa18:	2c02      	cmp	r4, #2
 800fa1a:	d837      	bhi.n	800fa8c <__ssvfscanf_r+0x130c>
 800fa1c:	238c      	movs	r3, #140	; 0x8c
 800fa1e:	2248      	movs	r2, #72	; 0x48
 800fa20:	005b      	lsls	r3, r3, #1
 800fa22:	189b      	adds	r3, r3, r2
 800fa24:	19db      	adds	r3, r3, r7
 800fa26:	429d      	cmp	r5, r3
 800fa28:	d801      	bhi.n	800fa2e <__ssvfscanf_r+0x12ae>
 800fa2a:	f7fe ffa6 	bl	800e97a <__ssvfscanf_r+0x1fa>
 800fa2e:	3d01      	subs	r5, #1
 800fa30:	7829      	ldrb	r1, [r5, #0]
 800fa32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa36:	f001 fd75 	bl	8011524 <_sungetc_r>
 800fa3a:	e7ef      	b.n	800fa1c <__ssvfscanf_r+0x129c>
 800fa3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa40:	3b01      	subs	r3, #1
 800fa42:	7819      	ldrb	r1, [r3, #0]
 800fa44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa48:	f001 fd6c 	bl	8011524 <_sungetc_r>
 800fa4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa4e:	6a3a      	ldr	r2, [r7, #32]
 800fa50:	189b      	adds	r3, r3, r2
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b03      	cmp	r3, #3
 800fa56:	d8f1      	bhi.n	800fa3c <__ssvfscanf_r+0x12bc>
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	3c03      	subs	r4, #3
 800fa5c:	b2e4      	uxtb	r4, r4
 800fa5e:	1b1b      	subs	r3, r3, r4
 800fa60:	1b2d      	subs	r5, r5, r4
 800fa62:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa64:	05f3      	lsls	r3, r6, #23
 800fa66:	d52f      	bpl.n	800fac8 <__ssvfscanf_r+0x1348>
 800fa68:	0573      	lsls	r3, r6, #21
 800fa6a:	d514      	bpl.n	800fa96 <__ssvfscanf_r+0x1316>
 800fa6c:	238c      	movs	r3, #140	; 0x8c
 800fa6e:	2248      	movs	r2, #72	; 0x48
 800fa70:	005b      	lsls	r3, r3, #1
 800fa72:	189b      	adds	r3, r3, r2
 800fa74:	19db      	adds	r3, r3, r7
 800fa76:	429d      	cmp	r5, r3
 800fa78:	d801      	bhi.n	800fa7e <__ssvfscanf_r+0x12fe>
 800fa7a:	f7fe ff7e 	bl	800e97a <__ssvfscanf_r+0x1fa>
 800fa7e:	3d01      	subs	r5, #1
 800fa80:	7829      	ldrb	r1, [r5, #0]
 800fa82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa86:	f001 fd4d 	bl	8011524 <_sungetc_r>
 800fa8a:	e7ef      	b.n	800fa6c <__ssvfscanf_r+0x12ec>
 800fa8c:	1b63      	subs	r3, r4, r5
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	63fd      	str	r5, [r7, #60]	; 0x3c
 800fa92:	623b      	str	r3, [r7, #32]
 800fa94:	e7da      	b.n	800fa4c <__ssvfscanf_r+0x12cc>
 800fa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa98:	1e6c      	subs	r4, r5, #1
 800fa9a:	7821      	ldrb	r1, [r4, #0]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faa0:	2965      	cmp	r1, #101	; 0x65
 800faa2:	d00a      	beq.n	800faba <__ssvfscanf_r+0x133a>
 800faa4:	2945      	cmp	r1, #69	; 0x45
 800faa6:	d008      	beq.n	800faba <__ssvfscanf_r+0x133a>
 800faa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800faac:	f001 fd3a 	bl	8011524 <_sungetc_r>
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	1eac      	subs	r4, r5, #2
 800fab4:	3b02      	subs	r3, #2
 800fab6:	7821      	ldrb	r1, [r4, #0]
 800fab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faba:	0025      	movs	r5, r4
 800fabc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fabe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fac0:	f001 fd30 	bl	8011524 <_sungetc_r>
 800fac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fac6:	63bb      	str	r3, [r7, #56]	; 0x38
 800fac8:	2310      	movs	r3, #16
 800faca:	0032      	movs	r2, r6
 800facc:	401a      	ands	r2, r3
 800face:	421e      	tst	r6, r3
 800fad0:	d001      	beq.n	800fad6 <__ssvfscanf_r+0x1356>
 800fad2:	f7fe fe71 	bl	800e7b8 <__ssvfscanf_r+0x38>
 800fad6:	23c0      	movs	r3, #192	; 0xc0
 800fad8:	2180      	movs	r1, #128	; 0x80
 800fada:	00db      	lsls	r3, r3, #3
 800fadc:	702a      	strb	r2, [r5, #0]
 800fade:	4033      	ands	r3, r6
 800fae0:	00c9      	lsls	r1, r1, #3
 800fae2:	428b      	cmp	r3, r1
 800fae4:	d11f      	bne.n	800fb26 <__ssvfscanf_r+0x13a6>
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	69fa      	ldr	r2, [r7, #28]
 800faea:	69f9      	ldr	r1, [r7, #28]
 800faec:	1a9a      	subs	r2, r3, r2
 800faee:	428b      	cmp	r3, r1
 800faf0:	d125      	bne.n	800fb3e <__ssvfscanf_r+0x13be>
 800faf2:	238c      	movs	r3, #140	; 0x8c
 800faf4:	2148      	movs	r1, #72	; 0x48
 800faf6:	005b      	lsls	r3, r3, #1
 800faf8:	185b      	adds	r3, r3, r1
 800fafa:	19d9      	adds	r1, r3, r7
 800fafc:	2200      	movs	r2, #0
 800fafe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb00:	f7fb ff2a 	bl	800b958 <_strtod_r>
 800fb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb06:	0004      	movs	r4, r0
 800fb08:	3304      	adds	r3, #4
 800fb0a:	000d      	movs	r5, r1
 800fb0c:	623b      	str	r3, [r7, #32]
 800fb0e:	07f3      	lsls	r3, r6, #31
 800fb10:	d523      	bpl.n	800fb5a <__ssvfscanf_r+0x13da>
 800fb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	601c      	str	r4, [r3, #0]
 800fb18:	605d      	str	r5, [r3, #4]
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb20:	6a3b      	ldr	r3, [r7, #32]
 800fb22:	f7fe ffa5 	bl	800ea70 <__ssvfscanf_r+0x2f0>
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d0e2      	beq.n	800faf2 <__ssvfscanf_r+0x1372>
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb30:	1c59      	adds	r1, r3, #1
 800fb32:	230a      	movs	r3, #10
 800fb34:	f7fb ffac 	bl	800ba90 <_strtol_r>
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	687d      	ldr	r5, [r7, #4]
 800fb3c:	1ac2      	subs	r2, r0, r3
 800fb3e:	2148      	movs	r1, #72	; 0x48
 800fb40:	4b19      	ldr	r3, [pc, #100]	; (800fba8 <__ssvfscanf_r+0x1428>)
 800fb42:	185b      	adds	r3, r3, r1
 800fb44:	19db      	adds	r3, r3, r7
 800fb46:	429d      	cmp	r5, r3
 800fb48:	d302      	bcc.n	800fb50 <__ssvfscanf_r+0x13d0>
 800fb4a:	4b18      	ldr	r3, [pc, #96]	; (800fbac <__ssvfscanf_r+0x142c>)
 800fb4c:	185b      	adds	r3, r3, r1
 800fb4e:	19dd      	adds	r5, r3, r7
 800fb50:	0028      	movs	r0, r5
 800fb52:	4917      	ldr	r1, [pc, #92]	; (800fbb0 <__ssvfscanf_r+0x1430>)
 800fb54:	f7fc f936 	bl	800bdc4 <sprintf>
 800fb58:	e7cb      	b.n	800faf2 <__ssvfscanf_r+0x1372>
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb60:	07b6      	lsls	r6, r6, #30
 800fb62:	d4d8      	bmi.n	800fb16 <__ssvfscanf_r+0x1396>
 800fb64:	0002      	movs	r2, r0
 800fb66:	000b      	movs	r3, r1
 800fb68:	f7f2 fbc4 	bl	80022f4 <__aeabi_dcmpun>
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	d005      	beq.n	800fb7c <__ssvfscanf_r+0x13fc>
 800fb70:	4810      	ldr	r0, [pc, #64]	; (800fbb4 <__ssvfscanf_r+0x1434>)
 800fb72:	f7fc fabf 	bl	800c0f4 <nanf>
 800fb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb78:	6018      	str	r0, [r3, #0]
 800fb7a:	e7ce      	b.n	800fb1a <__ssvfscanf_r+0x139a>
 800fb7c:	0020      	movs	r0, r4
 800fb7e:	0029      	movs	r1, r5
 800fb80:	f7f2 fc62 	bl	8002448 <__aeabi_d2f>
 800fb84:	e7f7      	b.n	800fb76 <__ssvfscanf_r+0x13f6>
 800fb86:	00a3      	lsls	r3, r4, #2
 800fb88:	18ed      	adds	r5, r5, r3
 800fb8a:	682b      	ldr	r3, [r5, #0]
 800fb8c:	3401      	adds	r4, #1
 800fb8e:	6818      	ldr	r0, [r3, #0]
 800fb90:	f7fa fe92 	bl	800a8b8 <free>
 800fb94:	2200      	movs	r2, #0
 800fb96:	682b      	ldr	r3, [r5, #0]
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	f7fe ffc3 	bl	800eb24 <__ssvfscanf_r+0x3a4>
 800fb9e:	46c0      	nop			; (mov r8, r8)
 800fba0:	fffff07f 	.word	0xfffff07f
 800fba4:	fffffd7f 	.word	0xfffffd7f
 800fba8:	0000026b 	.word	0x0000026b
 800fbac:	0000026a 	.word	0x0000026a
 800fbb0:	080148f0 	.word	0x080148f0
 800fbb4:	08014953 	.word	0x08014953

0800fbb8 <_fclose_r>:
 800fbb8:	b570      	push	{r4, r5, r6, lr}
 800fbba:	0005      	movs	r5, r0
 800fbbc:	1e0c      	subs	r4, r1, #0
 800fbbe:	d102      	bne.n	800fbc6 <_fclose_r+0xe>
 800fbc0:	2600      	movs	r6, #0
 800fbc2:	0030      	movs	r0, r6
 800fbc4:	bd70      	pop	{r4, r5, r6, pc}
 800fbc6:	2800      	cmp	r0, #0
 800fbc8:	d004      	beq.n	800fbd4 <_fclose_r+0x1c>
 800fbca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d101      	bne.n	800fbd4 <_fclose_r+0x1c>
 800fbd0:	f7fc f890 	bl	800bcf4 <__sinit>
 800fbd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbd6:	07db      	lsls	r3, r3, #31
 800fbd8:	d405      	bmi.n	800fbe6 <_fclose_r+0x2e>
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	059b      	lsls	r3, r3, #22
 800fbde:	d402      	bmi.n	800fbe6 <_fclose_r+0x2e>
 800fbe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbe2:	f7fc fa6b 	bl	800c0bc <__retarget_lock_acquire_recursive>
 800fbe6:	220c      	movs	r2, #12
 800fbe8:	5ea3      	ldrsh	r3, [r4, r2]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d109      	bne.n	800fc02 <_fclose_r+0x4a>
 800fbee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	0016      	movs	r6, r2
 800fbf4:	401e      	ands	r6, r3
 800fbf6:	421a      	tst	r2, r3
 800fbf8:	d1e2      	bne.n	800fbc0 <_fclose_r+0x8>
 800fbfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fbfc:	f7fc fa5f 	bl	800c0be <__retarget_lock_release_recursive>
 800fc00:	e7df      	b.n	800fbc2 <_fclose_r+0xa>
 800fc02:	0021      	movs	r1, r4
 800fc04:	0028      	movs	r0, r5
 800fc06:	f000 f837 	bl	800fc78 <__sflush_r>
 800fc0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc0c:	0006      	movs	r6, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d006      	beq.n	800fc20 <_fclose_r+0x68>
 800fc12:	0028      	movs	r0, r5
 800fc14:	69e1      	ldr	r1, [r4, #28]
 800fc16:	4798      	blx	r3
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	da01      	bge.n	800fc20 <_fclose_r+0x68>
 800fc1c:	2601      	movs	r6, #1
 800fc1e:	4276      	negs	r6, r6
 800fc20:	89a3      	ldrh	r3, [r4, #12]
 800fc22:	061b      	lsls	r3, r3, #24
 800fc24:	d503      	bpl.n	800fc2e <_fclose_r+0x76>
 800fc26:	0028      	movs	r0, r5
 800fc28:	6921      	ldr	r1, [r4, #16]
 800fc2a:	f7fc facf 	bl	800c1cc <_free_r>
 800fc2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fc30:	2900      	cmp	r1, #0
 800fc32:	d008      	beq.n	800fc46 <_fclose_r+0x8e>
 800fc34:	0023      	movs	r3, r4
 800fc36:	3340      	adds	r3, #64	; 0x40
 800fc38:	4299      	cmp	r1, r3
 800fc3a:	d002      	beq.n	800fc42 <_fclose_r+0x8a>
 800fc3c:	0028      	movs	r0, r5
 800fc3e:	f7fc fac5 	bl	800c1cc <_free_r>
 800fc42:	2300      	movs	r3, #0
 800fc44:	6323      	str	r3, [r4, #48]	; 0x30
 800fc46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800fc48:	2900      	cmp	r1, #0
 800fc4a:	d004      	beq.n	800fc56 <_fclose_r+0x9e>
 800fc4c:	0028      	movs	r0, r5
 800fc4e:	f7fc fabd 	bl	800c1cc <_free_r>
 800fc52:	2300      	movs	r3, #0
 800fc54:	6463      	str	r3, [r4, #68]	; 0x44
 800fc56:	f7fc f83d 	bl	800bcd4 <__sfp_lock_acquire>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	81a3      	strh	r3, [r4, #12]
 800fc5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc60:	07db      	lsls	r3, r3, #31
 800fc62:	d402      	bmi.n	800fc6a <_fclose_r+0xb2>
 800fc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc66:	f7fc fa2a 	bl	800c0be <__retarget_lock_release_recursive>
 800fc6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc6c:	f7fc fa25 	bl	800c0ba <__retarget_lock_close_recursive>
 800fc70:	f7fc f838 	bl	800bce4 <__sfp_lock_release>
 800fc74:	e7a5      	b.n	800fbc2 <_fclose_r+0xa>
	...

0800fc78 <__sflush_r>:
 800fc78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	5eca      	ldrsh	r2, [r1, r3]
 800fc7e:	000c      	movs	r4, r1
 800fc80:	0005      	movs	r5, r0
 800fc82:	b291      	uxth	r1, r2
 800fc84:	0713      	lsls	r3, r2, #28
 800fc86:	d464      	bmi.n	800fd52 <__sflush_r+0xda>
 800fc88:	2380      	movs	r3, #128	; 0x80
 800fc8a:	011b      	lsls	r3, r3, #4
 800fc8c:	4313      	orrs	r3, r2
 800fc8e:	6862      	ldr	r2, [r4, #4]
 800fc90:	81a3      	strh	r3, [r4, #12]
 800fc92:	2a00      	cmp	r2, #0
 800fc94:	dc04      	bgt.n	800fca0 <__sflush_r+0x28>
 800fc96:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800fc98:	2a00      	cmp	r2, #0
 800fc9a:	dc01      	bgt.n	800fca0 <__sflush_r+0x28>
 800fc9c:	2000      	movs	r0, #0
 800fc9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fca0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fca2:	2f00      	cmp	r7, #0
 800fca4:	d0fa      	beq.n	800fc9c <__sflush_r+0x24>
 800fca6:	2200      	movs	r2, #0
 800fca8:	2080      	movs	r0, #128	; 0x80
 800fcaa:	682e      	ldr	r6, [r5, #0]
 800fcac:	602a      	str	r2, [r5, #0]
 800fcae:	001a      	movs	r2, r3
 800fcb0:	0140      	lsls	r0, r0, #5
 800fcb2:	69e1      	ldr	r1, [r4, #28]
 800fcb4:	4002      	ands	r2, r0
 800fcb6:	4203      	tst	r3, r0
 800fcb8:	d038      	beq.n	800fd2c <__sflush_r+0xb4>
 800fcba:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800fcbc:	89a3      	ldrh	r3, [r4, #12]
 800fcbe:	075b      	lsls	r3, r3, #29
 800fcc0:	d506      	bpl.n	800fcd0 <__sflush_r+0x58>
 800fcc2:	6863      	ldr	r3, [r4, #4]
 800fcc4:	1ac0      	subs	r0, r0, r3
 800fcc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <__sflush_r+0x58>
 800fccc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fcce:	1ac0      	subs	r0, r0, r3
 800fcd0:	0002      	movs	r2, r0
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	0028      	movs	r0, r5
 800fcd6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800fcd8:	69e1      	ldr	r1, [r4, #28]
 800fcda:	47b8      	blx	r7
 800fcdc:	89a2      	ldrh	r2, [r4, #12]
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	d106      	bne.n	800fcf0 <__sflush_r+0x78>
 800fce2:	6829      	ldr	r1, [r5, #0]
 800fce4:	291d      	cmp	r1, #29
 800fce6:	d830      	bhi.n	800fd4a <__sflush_r+0xd2>
 800fce8:	4b2c      	ldr	r3, [pc, #176]	; (800fd9c <__sflush_r+0x124>)
 800fcea:	410b      	asrs	r3, r1
 800fcec:	07db      	lsls	r3, r3, #31
 800fcee:	d42c      	bmi.n	800fd4a <__sflush_r+0xd2>
 800fcf0:	4b2b      	ldr	r3, [pc, #172]	; (800fda0 <__sflush_r+0x128>)
 800fcf2:	4013      	ands	r3, r2
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	6062      	str	r2, [r4, #4]
 800fcf8:	6922      	ldr	r2, [r4, #16]
 800fcfa:	b21b      	sxth	r3, r3
 800fcfc:	81a3      	strh	r3, [r4, #12]
 800fcfe:	6022      	str	r2, [r4, #0]
 800fd00:	04db      	lsls	r3, r3, #19
 800fd02:	d505      	bpl.n	800fd10 <__sflush_r+0x98>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <__sflush_r+0x96>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d100      	bne.n	800fd10 <__sflush_r+0x98>
 800fd0e:	6520      	str	r0, [r4, #80]	; 0x50
 800fd10:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fd12:	602e      	str	r6, [r5, #0]
 800fd14:	2900      	cmp	r1, #0
 800fd16:	d0c1      	beq.n	800fc9c <__sflush_r+0x24>
 800fd18:	0023      	movs	r3, r4
 800fd1a:	3340      	adds	r3, #64	; 0x40
 800fd1c:	4299      	cmp	r1, r3
 800fd1e:	d002      	beq.n	800fd26 <__sflush_r+0xae>
 800fd20:	0028      	movs	r0, r5
 800fd22:	f7fc fa53 	bl	800c1cc <_free_r>
 800fd26:	2000      	movs	r0, #0
 800fd28:	6320      	str	r0, [r4, #48]	; 0x30
 800fd2a:	e7b8      	b.n	800fc9e <__sflush_r+0x26>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	0028      	movs	r0, r5
 800fd30:	47b8      	blx	r7
 800fd32:	1c43      	adds	r3, r0, #1
 800fd34:	d1c2      	bne.n	800fcbc <__sflush_r+0x44>
 800fd36:	682b      	ldr	r3, [r5, #0]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d0bf      	beq.n	800fcbc <__sflush_r+0x44>
 800fd3c:	2b1d      	cmp	r3, #29
 800fd3e:	d001      	beq.n	800fd44 <__sflush_r+0xcc>
 800fd40:	2b16      	cmp	r3, #22
 800fd42:	d101      	bne.n	800fd48 <__sflush_r+0xd0>
 800fd44:	602e      	str	r6, [r5, #0]
 800fd46:	e7a9      	b.n	800fc9c <__sflush_r+0x24>
 800fd48:	89a2      	ldrh	r2, [r4, #12]
 800fd4a:	2340      	movs	r3, #64	; 0x40
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	81a3      	strh	r3, [r4, #12]
 800fd50:	e7a5      	b.n	800fc9e <__sflush_r+0x26>
 800fd52:	6926      	ldr	r6, [r4, #16]
 800fd54:	2e00      	cmp	r6, #0
 800fd56:	d0a1      	beq.n	800fc9c <__sflush_r+0x24>
 800fd58:	6827      	ldr	r7, [r4, #0]
 800fd5a:	6026      	str	r6, [r4, #0]
 800fd5c:	1bbb      	subs	r3, r7, r6
 800fd5e:	9301      	str	r3, [sp, #4]
 800fd60:	2300      	movs	r3, #0
 800fd62:	0789      	lsls	r1, r1, #30
 800fd64:	d100      	bne.n	800fd68 <__sflush_r+0xf0>
 800fd66:	6963      	ldr	r3, [r4, #20]
 800fd68:	60a3      	str	r3, [r4, #8]
 800fd6a:	9b01      	ldr	r3, [sp, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	dc00      	bgt.n	800fd72 <__sflush_r+0xfa>
 800fd70:	e794      	b.n	800fc9c <__sflush_r+0x24>
 800fd72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd74:	0032      	movs	r2, r6
 800fd76:	001f      	movs	r7, r3
 800fd78:	0028      	movs	r0, r5
 800fd7a:	9b01      	ldr	r3, [sp, #4]
 800fd7c:	69e1      	ldr	r1, [r4, #28]
 800fd7e:	47b8      	blx	r7
 800fd80:	2800      	cmp	r0, #0
 800fd82:	dc06      	bgt.n	800fd92 <__sflush_r+0x11a>
 800fd84:	2340      	movs	r3, #64	; 0x40
 800fd86:	2001      	movs	r0, #1
 800fd88:	89a2      	ldrh	r2, [r4, #12]
 800fd8a:	4240      	negs	r0, r0
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	e785      	b.n	800fc9e <__sflush_r+0x26>
 800fd92:	9b01      	ldr	r3, [sp, #4]
 800fd94:	1836      	adds	r6, r6, r0
 800fd96:	1a1b      	subs	r3, r3, r0
 800fd98:	9301      	str	r3, [sp, #4]
 800fd9a:	e7e6      	b.n	800fd6a <__sflush_r+0xf2>
 800fd9c:	dfbffffe 	.word	0xdfbffffe
 800fda0:	fffff7ff 	.word	0xfffff7ff

0800fda4 <_fflush_r>:
 800fda4:	b570      	push	{r4, r5, r6, lr}
 800fda6:	0005      	movs	r5, r0
 800fda8:	000c      	movs	r4, r1
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d004      	beq.n	800fdb8 <_fflush_r+0x14>
 800fdae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d101      	bne.n	800fdb8 <_fflush_r+0x14>
 800fdb4:	f7fb ff9e 	bl	800bcf4 <__sinit>
 800fdb8:	220c      	movs	r2, #12
 800fdba:	5ea3      	ldrsh	r3, [r4, r2]
 800fdbc:	1e1e      	subs	r6, r3, #0
 800fdbe:	d015      	beq.n	800fdec <_fflush_r+0x48>
 800fdc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fdc2:	07d2      	lsls	r2, r2, #31
 800fdc4:	d404      	bmi.n	800fdd0 <_fflush_r+0x2c>
 800fdc6:	059b      	lsls	r3, r3, #22
 800fdc8:	d402      	bmi.n	800fdd0 <_fflush_r+0x2c>
 800fdca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdcc:	f7fc f976 	bl	800c0bc <__retarget_lock_acquire_recursive>
 800fdd0:	0021      	movs	r1, r4
 800fdd2:	0028      	movs	r0, r5
 800fdd4:	f7ff ff50 	bl	800fc78 <__sflush_r>
 800fdd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fdda:	0006      	movs	r6, r0
 800fddc:	07db      	lsls	r3, r3, #31
 800fdde:	d405      	bmi.n	800fdec <_fflush_r+0x48>
 800fde0:	89a3      	ldrh	r3, [r4, #12]
 800fde2:	059b      	lsls	r3, r3, #22
 800fde4:	d402      	bmi.n	800fdec <_fflush_r+0x48>
 800fde6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fde8:	f7fc f969 	bl	800c0be <__retarget_lock_release_recursive>
 800fdec:	0030      	movs	r0, r6
 800fdee:	bd70      	pop	{r4, r5, r6, pc}

0800fdf0 <__sccl>:
 800fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdf2:	780b      	ldrb	r3, [r1, #0]
 800fdf4:	0004      	movs	r4, r0
 800fdf6:	2b5e      	cmp	r3, #94	; 0x5e
 800fdf8:	d019      	beq.n	800fe2e <__sccl+0x3e>
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	1c4d      	adds	r5, r1, #1
 800fdfe:	0021      	movs	r1, r4
 800fe00:	1c60      	adds	r0, r4, #1
 800fe02:	30ff      	adds	r0, #255	; 0xff
 800fe04:	700a      	strb	r2, [r1, #0]
 800fe06:	3101      	adds	r1, #1
 800fe08:	4281      	cmp	r1, r0
 800fe0a:	d1fb      	bne.n	800fe04 <__sccl+0x14>
 800fe0c:	1e68      	subs	r0, r5, #1
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d00c      	beq.n	800fe2c <__sccl+0x3c>
 800fe12:	2101      	movs	r1, #1
 800fe14:	262d      	movs	r6, #45	; 0x2d
 800fe16:	404a      	eors	r2, r1
 800fe18:	0028      	movs	r0, r5
 800fe1a:	54e2      	strb	r2, [r4, r3]
 800fe1c:	7801      	ldrb	r1, [r0, #0]
 800fe1e:	1c45      	adds	r5, r0, #1
 800fe20:	292d      	cmp	r1, #45	; 0x2d
 800fe22:	d00c      	beq.n	800fe3e <__sccl+0x4e>
 800fe24:	295d      	cmp	r1, #93	; 0x5d
 800fe26:	d01d      	beq.n	800fe64 <__sccl+0x74>
 800fe28:	2900      	cmp	r1, #0
 800fe2a:	d104      	bne.n	800fe36 <__sccl+0x46>
 800fe2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe2e:	2201      	movs	r2, #1
 800fe30:	784b      	ldrb	r3, [r1, #1]
 800fe32:	1c8d      	adds	r5, r1, #2
 800fe34:	e7e3      	b.n	800fdfe <__sccl+0xe>
 800fe36:	000b      	movs	r3, r1
 800fe38:	e7ee      	b.n	800fe18 <__sccl+0x28>
 800fe3a:	0033      	movs	r3, r6
 800fe3c:	e7ec      	b.n	800fe18 <__sccl+0x28>
 800fe3e:	7841      	ldrb	r1, [r0, #1]
 800fe40:	295d      	cmp	r1, #93	; 0x5d
 800fe42:	d0fa      	beq.n	800fe3a <__sccl+0x4a>
 800fe44:	428b      	cmp	r3, r1
 800fe46:	dcf8      	bgt.n	800fe3a <__sccl+0x4a>
 800fe48:	001d      	movs	r5, r3
 800fe4a:	3002      	adds	r0, #2
 800fe4c:	3501      	adds	r5, #1
 800fe4e:	5562      	strb	r2, [r4, r5]
 800fe50:	42a9      	cmp	r1, r5
 800fe52:	dcfb      	bgt.n	800fe4c <__sccl+0x5c>
 800fe54:	2500      	movs	r5, #0
 800fe56:	1c5f      	adds	r7, r3, #1
 800fe58:	428b      	cmp	r3, r1
 800fe5a:	da01      	bge.n	800fe60 <__sccl+0x70>
 800fe5c:	1acd      	subs	r5, r1, r3
 800fe5e:	3d01      	subs	r5, #1
 800fe60:	197b      	adds	r3, r7, r5
 800fe62:	e7db      	b.n	800fe1c <__sccl+0x2c>
 800fe64:	0028      	movs	r0, r5
 800fe66:	e7e1      	b.n	800fe2c <__sccl+0x3c>

0800fe68 <_localeconv_r>:
 800fe68:	4800      	ldr	r0, [pc, #0]	; (800fe6c <_localeconv_r+0x4>)
 800fe6a:	4770      	bx	lr
 800fe6c:	20000534 	.word	0x20000534

0800fe70 <__libc_fini_array>:
 800fe70:	b570      	push	{r4, r5, r6, lr}
 800fe72:	4c07      	ldr	r4, [pc, #28]	; (800fe90 <__libc_fini_array+0x20>)
 800fe74:	4d07      	ldr	r5, [pc, #28]	; (800fe94 <__libc_fini_array+0x24>)
 800fe76:	1b64      	subs	r4, r4, r5
 800fe78:	10a4      	asrs	r4, r4, #2
 800fe7a:	2c00      	cmp	r4, #0
 800fe7c:	d102      	bne.n	800fe84 <__libc_fini_array+0x14>
 800fe7e:	f002 fd47 	bl	8012910 <_fini>
 800fe82:	bd70      	pop	{r4, r5, r6, pc}
 800fe84:	3c01      	subs	r4, #1
 800fe86:	00a3      	lsls	r3, r4, #2
 800fe88:	58eb      	ldr	r3, [r5, r3]
 800fe8a:	4798      	blx	r3
 800fe8c:	e7f5      	b.n	800fe7a <__libc_fini_array+0xa>
 800fe8e:	46c0      	nop			; (mov r8, r8)
 800fe90:	080149f0 	.word	0x080149f0
 800fe94:	080149ec 	.word	0x080149ec

0800fe98 <memchr>:
 800fe98:	b2c9      	uxtb	r1, r1
 800fe9a:	1882      	adds	r2, r0, r2
 800fe9c:	4290      	cmp	r0, r2
 800fe9e:	d101      	bne.n	800fea4 <memchr+0xc>
 800fea0:	2000      	movs	r0, #0
 800fea2:	4770      	bx	lr
 800fea4:	7803      	ldrb	r3, [r0, #0]
 800fea6:	428b      	cmp	r3, r1
 800fea8:	d0fb      	beq.n	800fea2 <memchr+0xa>
 800feaa:	3001      	adds	r0, #1
 800feac:	e7f6      	b.n	800fe9c <memchr+0x4>
	...

0800feb0 <frexp>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	0014      	movs	r4, r2
 800feb4:	2500      	movs	r5, #0
 800feb6:	6025      	str	r5, [r4, #0]
 800feb8:	4d10      	ldr	r5, [pc, #64]	; (800fefc <frexp+0x4c>)
 800feba:	004b      	lsls	r3, r1, #1
 800febc:	000a      	movs	r2, r1
 800febe:	085b      	lsrs	r3, r3, #1
 800fec0:	42ab      	cmp	r3, r5
 800fec2:	dc1a      	bgt.n	800fefa <frexp+0x4a>
 800fec4:	001d      	movs	r5, r3
 800fec6:	4305      	orrs	r5, r0
 800fec8:	d017      	beq.n	800fefa <frexp+0x4a>
 800feca:	4d0d      	ldr	r5, [pc, #52]	; (800ff00 <frexp+0x50>)
 800fecc:	4229      	tst	r1, r5
 800fece:	d109      	bne.n	800fee4 <frexp+0x34>
 800fed0:	2200      	movs	r2, #0
 800fed2:	4b0c      	ldr	r3, [pc, #48]	; (800ff04 <frexp+0x54>)
 800fed4:	f7f1 fbca 	bl	800166c <__aeabi_dmul>
 800fed8:	2536      	movs	r5, #54	; 0x36
 800feda:	000a      	movs	r2, r1
 800fedc:	004b      	lsls	r3, r1, #1
 800fede:	426d      	negs	r5, r5
 800fee0:	085b      	lsrs	r3, r3, #1
 800fee2:	6025      	str	r5, [r4, #0]
 800fee4:	4d08      	ldr	r5, [pc, #32]	; (800ff08 <frexp+0x58>)
 800fee6:	151b      	asrs	r3, r3, #20
 800fee8:	195b      	adds	r3, r3, r5
 800feea:	6825      	ldr	r5, [r4, #0]
 800feec:	18eb      	adds	r3, r5, r3
 800feee:	6023      	str	r3, [r4, #0]
 800fef0:	4b06      	ldr	r3, [pc, #24]	; (800ff0c <frexp+0x5c>)
 800fef2:	401a      	ands	r2, r3
 800fef4:	4b06      	ldr	r3, [pc, #24]	; (800ff10 <frexp+0x60>)
 800fef6:	4313      	orrs	r3, r2
 800fef8:	0019      	movs	r1, r3
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	7fefffff 	.word	0x7fefffff
 800ff00:	7ff00000 	.word	0x7ff00000
 800ff04:	43500000 	.word	0x43500000
 800ff08:	fffffc02 	.word	0xfffffc02
 800ff0c:	800fffff 	.word	0x800fffff
 800ff10:	3fe00000 	.word	0x3fe00000

0800ff14 <__register_exitproc>:
 800ff14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff16:	4f1c      	ldr	r7, [pc, #112]	; (800ff88 <__register_exitproc+0x74>)
 800ff18:	0004      	movs	r4, r0
 800ff1a:	6838      	ldr	r0, [r7, #0]
 800ff1c:	0016      	movs	r6, r2
 800ff1e:	9301      	str	r3, [sp, #4]
 800ff20:	9100      	str	r1, [sp, #0]
 800ff22:	f7fc f8cb 	bl	800c0bc <__retarget_lock_acquire_recursive>
 800ff26:	4a19      	ldr	r2, [pc, #100]	; (800ff8c <__register_exitproc+0x78>)
 800ff28:	6813      	ldr	r3, [r2, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <__register_exitproc+0x1e>
 800ff2e:	4b18      	ldr	r3, [pc, #96]	; (800ff90 <__register_exitproc+0x7c>)
 800ff30:	6013      	str	r3, [r2, #0]
 800ff32:	685a      	ldr	r2, [r3, #4]
 800ff34:	6838      	ldr	r0, [r7, #0]
 800ff36:	2a1f      	cmp	r2, #31
 800ff38:	dd04      	ble.n	800ff44 <__register_exitproc+0x30>
 800ff3a:	f7fc f8c0 	bl	800c0be <__retarget_lock_release_recursive>
 800ff3e:	2001      	movs	r0, #1
 800ff40:	4240      	negs	r0, r0
 800ff42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ff44:	2c00      	cmp	r4, #0
 800ff46:	d014      	beq.n	800ff72 <__register_exitproc+0x5e>
 800ff48:	0091      	lsls	r1, r2, #2
 800ff4a:	1859      	adds	r1, r3, r1
 800ff4c:	000f      	movs	r7, r1
 800ff4e:	3788      	adds	r7, #136	; 0x88
 800ff50:	603e      	str	r6, [r7, #0]
 800ff52:	2701      	movs	r7, #1
 800ff54:	001e      	movs	r6, r3
 800ff56:	4097      	lsls	r7, r2
 800ff58:	3685      	adds	r6, #133	; 0x85
 800ff5a:	36ff      	adds	r6, #255	; 0xff
 800ff5c:	6875      	ldr	r5, [r6, #4]
 800ff5e:	31fc      	adds	r1, #252	; 0xfc
 800ff60:	433d      	orrs	r5, r7
 800ff62:	6075      	str	r5, [r6, #4]
 800ff64:	9d01      	ldr	r5, [sp, #4]
 800ff66:	60cd      	str	r5, [r1, #12]
 800ff68:	2c02      	cmp	r4, #2
 800ff6a:	d102      	bne.n	800ff72 <__register_exitproc+0x5e>
 800ff6c:	68b1      	ldr	r1, [r6, #8]
 800ff6e:	4339      	orrs	r1, r7
 800ff70:	60b1      	str	r1, [r6, #8]
 800ff72:	1c51      	adds	r1, r2, #1
 800ff74:	6059      	str	r1, [r3, #4]
 800ff76:	3202      	adds	r2, #2
 800ff78:	9900      	ldr	r1, [sp, #0]
 800ff7a:	0092      	lsls	r2, r2, #2
 800ff7c:	50d1      	str	r1, [r2, r3]
 800ff7e:	f7fc f89e 	bl	800c0be <__retarget_lock_release_recursive>
 800ff82:	2000      	movs	r0, #0
 800ff84:	e7dd      	b.n	800ff42 <__register_exitproc+0x2e>
 800ff86:	46c0      	nop			; (mov r8, r8)
 800ff88:	200006d4 	.word	0x200006d4
 800ff8c:	20000da8 	.word	0x20000da8
 800ff90:	20000dac 	.word	0x20000dac

0800ff94 <__assert_func>:
 800ff94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff96:	0014      	movs	r4, r2
 800ff98:	001a      	movs	r2, r3
 800ff9a:	4b09      	ldr	r3, [pc, #36]	; (800ffc0 <__assert_func+0x2c>)
 800ff9c:	0005      	movs	r5, r0
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	000e      	movs	r6, r1
 800ffa2:	68d8      	ldr	r0, [r3, #12]
 800ffa4:	4b07      	ldr	r3, [pc, #28]	; (800ffc4 <__assert_func+0x30>)
 800ffa6:	2c00      	cmp	r4, #0
 800ffa8:	d101      	bne.n	800ffae <__assert_func+0x1a>
 800ffaa:	4b07      	ldr	r3, [pc, #28]	; (800ffc8 <__assert_func+0x34>)
 800ffac:	001c      	movs	r4, r3
 800ffae:	4907      	ldr	r1, [pc, #28]	; (800ffcc <__assert_func+0x38>)
 800ffb0:	9301      	str	r3, [sp, #4]
 800ffb2:	9402      	str	r4, [sp, #8]
 800ffb4:	002b      	movs	r3, r5
 800ffb6:	9600      	str	r6, [sp, #0]
 800ffb8:	f001 fa20 	bl	80113fc <fiprintf>
 800ffbc:	f002 fb08 	bl	80125d0 <abort>
 800ffc0:	200006d0 	.word	0x200006d0
 800ffc4:	08014918 	.word	0x08014918
 800ffc8:	08014953 	.word	0x08014953
 800ffcc:	08014925 	.word	0x08014925

0800ffd0 <_calloc_r>:
 800ffd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd2:	2400      	movs	r4, #0
 800ffd4:	0c0b      	lsrs	r3, r1, #16
 800ffd6:	0c16      	lsrs	r6, r2, #16
 800ffd8:	42a3      	cmp	r3, r4
 800ffda:	d133      	bne.n	8010044 <_calloc_r+0x74>
 800ffdc:	42a6      	cmp	r6, r4
 800ffde:	d121      	bne.n	8010024 <_calloc_r+0x54>
 800ffe0:	b28b      	uxth	r3, r1
 800ffe2:	b291      	uxth	r1, r2
 800ffe4:	4359      	muls	r1, r3
 800ffe6:	f7fa fc71 	bl	800a8cc <_malloc_r>
 800ffea:	1e05      	subs	r5, r0, #0
 800ffec:	d033      	beq.n	8010056 <_calloc_r+0x86>
 800ffee:	0003      	movs	r3, r0
 800fff0:	3b08      	subs	r3, #8
 800fff2:	685a      	ldr	r2, [r3, #4]
 800fff4:	2303      	movs	r3, #3
 800fff6:	439a      	bics	r2, r3
 800fff8:	3a04      	subs	r2, #4
 800fffa:	2a24      	cmp	r2, #36	; 0x24
 800fffc:	d832      	bhi.n	8010064 <_calloc_r+0x94>
 800fffe:	0003      	movs	r3, r0
 8010000:	2a13      	cmp	r2, #19
 8010002:	d90a      	bls.n	801001a <_calloc_r+0x4a>
 8010004:	6004      	str	r4, [r0, #0]
 8010006:	6044      	str	r4, [r0, #4]
 8010008:	3308      	adds	r3, #8
 801000a:	2a1b      	cmp	r2, #27
 801000c:	d905      	bls.n	801001a <_calloc_r+0x4a>
 801000e:	6084      	str	r4, [r0, #8]
 8010010:	60c4      	str	r4, [r0, #12]
 8010012:	2a24      	cmp	r2, #36	; 0x24
 8010014:	d021      	beq.n	801005a <_calloc_r+0x8a>
 8010016:	0003      	movs	r3, r0
 8010018:	3310      	adds	r3, #16
 801001a:	2200      	movs	r2, #0
 801001c:	601a      	str	r2, [r3, #0]
 801001e:	605a      	str	r2, [r3, #4]
 8010020:	609a      	str	r2, [r3, #8]
 8010022:	e018      	b.n	8010056 <_calloc_r+0x86>
 8010024:	1c33      	adds	r3, r6, #0
 8010026:	1c0d      	adds	r5, r1, #0
 8010028:	b289      	uxth	r1, r1
 801002a:	b292      	uxth	r2, r2
 801002c:	434a      	muls	r2, r1
 801002e:	b2ad      	uxth	r5, r5
 8010030:	b299      	uxth	r1, r3
 8010032:	4369      	muls	r1, r5
 8010034:	0c13      	lsrs	r3, r2, #16
 8010036:	18c9      	adds	r1, r1, r3
 8010038:	0c0b      	lsrs	r3, r1, #16
 801003a:	d107      	bne.n	801004c <_calloc_r+0x7c>
 801003c:	0409      	lsls	r1, r1, #16
 801003e:	b292      	uxth	r2, r2
 8010040:	4311      	orrs	r1, r2
 8010042:	e7d0      	b.n	800ffe6 <_calloc_r+0x16>
 8010044:	2e00      	cmp	r6, #0
 8010046:	d101      	bne.n	801004c <_calloc_r+0x7c>
 8010048:	1c15      	adds	r5, r2, #0
 801004a:	e7ed      	b.n	8010028 <_calloc_r+0x58>
 801004c:	f7fc f80a 	bl	800c064 <__errno>
 8010050:	230c      	movs	r3, #12
 8010052:	2500      	movs	r5, #0
 8010054:	6003      	str	r3, [r0, #0]
 8010056:	0028      	movs	r0, r5
 8010058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801005a:	0003      	movs	r3, r0
 801005c:	6104      	str	r4, [r0, #16]
 801005e:	3318      	adds	r3, #24
 8010060:	6144      	str	r4, [r0, #20]
 8010062:	e7da      	b.n	801001a <_calloc_r+0x4a>
 8010064:	2100      	movs	r1, #0
 8010066:	f7fb ff43 	bl	800bef0 <memset>
 801006a:	e7f4      	b.n	8010056 <_calloc_r+0x86>

0801006c <quorem>:
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	6902      	ldr	r2, [r0, #16]
 8010070:	690b      	ldr	r3, [r1, #16]
 8010072:	b089      	sub	sp, #36	; 0x24
 8010074:	0007      	movs	r7, r0
 8010076:	9104      	str	r1, [sp, #16]
 8010078:	2000      	movs	r0, #0
 801007a:	429a      	cmp	r2, r3
 801007c:	db69      	blt.n	8010152 <quorem+0xe6>
 801007e:	3b01      	subs	r3, #1
 8010080:	009c      	lsls	r4, r3, #2
 8010082:	9301      	str	r3, [sp, #4]
 8010084:	000b      	movs	r3, r1
 8010086:	3314      	adds	r3, #20
 8010088:	9306      	str	r3, [sp, #24]
 801008a:	191b      	adds	r3, r3, r4
 801008c:	9305      	str	r3, [sp, #20]
 801008e:	003b      	movs	r3, r7
 8010090:	3314      	adds	r3, #20
 8010092:	9303      	str	r3, [sp, #12]
 8010094:	191c      	adds	r4, r3, r4
 8010096:	9b05      	ldr	r3, [sp, #20]
 8010098:	6826      	ldr	r6, [r4, #0]
 801009a:	681d      	ldr	r5, [r3, #0]
 801009c:	0030      	movs	r0, r6
 801009e:	3501      	adds	r5, #1
 80100a0:	0029      	movs	r1, r5
 80100a2:	f7f0 f84b 	bl	800013c <__udivsi3>
 80100a6:	9002      	str	r0, [sp, #8]
 80100a8:	42ae      	cmp	r6, r5
 80100aa:	d329      	bcc.n	8010100 <quorem+0x94>
 80100ac:	9b06      	ldr	r3, [sp, #24]
 80100ae:	2600      	movs	r6, #0
 80100b0:	469c      	mov	ip, r3
 80100b2:	9d03      	ldr	r5, [sp, #12]
 80100b4:	9606      	str	r6, [sp, #24]
 80100b6:	4662      	mov	r2, ip
 80100b8:	ca08      	ldmia	r2!, {r3}
 80100ba:	6828      	ldr	r0, [r5, #0]
 80100bc:	4694      	mov	ip, r2
 80100be:	9a02      	ldr	r2, [sp, #8]
 80100c0:	b299      	uxth	r1, r3
 80100c2:	4351      	muls	r1, r2
 80100c4:	0c1b      	lsrs	r3, r3, #16
 80100c6:	4353      	muls	r3, r2
 80100c8:	1989      	adds	r1, r1, r6
 80100ca:	0c0a      	lsrs	r2, r1, #16
 80100cc:	189b      	adds	r3, r3, r2
 80100ce:	9307      	str	r3, [sp, #28]
 80100d0:	0c1e      	lsrs	r6, r3, #16
 80100d2:	9b06      	ldr	r3, [sp, #24]
 80100d4:	b282      	uxth	r2, r0
 80100d6:	18d2      	adds	r2, r2, r3
 80100d8:	466b      	mov	r3, sp
 80100da:	b289      	uxth	r1, r1
 80100dc:	8b9b      	ldrh	r3, [r3, #28]
 80100de:	1a52      	subs	r2, r2, r1
 80100e0:	0c01      	lsrs	r1, r0, #16
 80100e2:	1ac9      	subs	r1, r1, r3
 80100e4:	1413      	asrs	r3, r2, #16
 80100e6:	18cb      	adds	r3, r1, r3
 80100e8:	1419      	asrs	r1, r3, #16
 80100ea:	b292      	uxth	r2, r2
 80100ec:	041b      	lsls	r3, r3, #16
 80100ee:	4313      	orrs	r3, r2
 80100f0:	c508      	stmia	r5!, {r3}
 80100f2:	9b05      	ldr	r3, [sp, #20]
 80100f4:	9106      	str	r1, [sp, #24]
 80100f6:	4563      	cmp	r3, ip
 80100f8:	d2dd      	bcs.n	80100b6 <quorem+0x4a>
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d030      	beq.n	8010162 <quorem+0xf6>
 8010100:	0038      	movs	r0, r7
 8010102:	9904      	ldr	r1, [sp, #16]
 8010104:	f7fc ff04 	bl	800cf10 <__mcmp>
 8010108:	2800      	cmp	r0, #0
 801010a:	db21      	blt.n	8010150 <quorem+0xe4>
 801010c:	0038      	movs	r0, r7
 801010e:	2600      	movs	r6, #0
 8010110:	9b02      	ldr	r3, [sp, #8]
 8010112:	9c04      	ldr	r4, [sp, #16]
 8010114:	3301      	adds	r3, #1
 8010116:	9302      	str	r3, [sp, #8]
 8010118:	3014      	adds	r0, #20
 801011a:	3414      	adds	r4, #20
 801011c:	6803      	ldr	r3, [r0, #0]
 801011e:	cc02      	ldmia	r4!, {r1}
 8010120:	b29d      	uxth	r5, r3
 8010122:	19ad      	adds	r5, r5, r6
 8010124:	b28a      	uxth	r2, r1
 8010126:	1aaa      	subs	r2, r5, r2
 8010128:	0c09      	lsrs	r1, r1, #16
 801012a:	0c1b      	lsrs	r3, r3, #16
 801012c:	1a5b      	subs	r3, r3, r1
 801012e:	1411      	asrs	r1, r2, #16
 8010130:	185b      	adds	r3, r3, r1
 8010132:	141e      	asrs	r6, r3, #16
 8010134:	b292      	uxth	r2, r2
 8010136:	041b      	lsls	r3, r3, #16
 8010138:	4313      	orrs	r3, r2
 801013a:	c008      	stmia	r0!, {r3}
 801013c:	9b05      	ldr	r3, [sp, #20]
 801013e:	42a3      	cmp	r3, r4
 8010140:	d2ec      	bcs.n	801011c <quorem+0xb0>
 8010142:	9b01      	ldr	r3, [sp, #4]
 8010144:	9a03      	ldr	r2, [sp, #12]
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	18d3      	adds	r3, r2, r3
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	2a00      	cmp	r2, #0
 801014e:	d015      	beq.n	801017c <quorem+0x110>
 8010150:	9802      	ldr	r0, [sp, #8]
 8010152:	b009      	add	sp, #36	; 0x24
 8010154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d106      	bne.n	801016a <quorem+0xfe>
 801015c:	9b01      	ldr	r3, [sp, #4]
 801015e:	3b01      	subs	r3, #1
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	9b03      	ldr	r3, [sp, #12]
 8010164:	3c04      	subs	r4, #4
 8010166:	42a3      	cmp	r3, r4
 8010168:	d3f5      	bcc.n	8010156 <quorem+0xea>
 801016a:	9b01      	ldr	r3, [sp, #4]
 801016c:	613b      	str	r3, [r7, #16]
 801016e:	e7c7      	b.n	8010100 <quorem+0x94>
 8010170:	681a      	ldr	r2, [r3, #0]
 8010172:	2a00      	cmp	r2, #0
 8010174:	d106      	bne.n	8010184 <quorem+0x118>
 8010176:	9a01      	ldr	r2, [sp, #4]
 8010178:	3a01      	subs	r2, #1
 801017a:	9201      	str	r2, [sp, #4]
 801017c:	9a03      	ldr	r2, [sp, #12]
 801017e:	3b04      	subs	r3, #4
 8010180:	429a      	cmp	r2, r3
 8010182:	d3f5      	bcc.n	8010170 <quorem+0x104>
 8010184:	9b01      	ldr	r3, [sp, #4]
 8010186:	613b      	str	r3, [r7, #16]
 8010188:	e7e2      	b.n	8010150 <quorem+0xe4>
	...

0801018c <_dtoa_r>:
 801018c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801018e:	0014      	movs	r4, r2
 8010190:	001d      	movs	r5, r3
 8010192:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8010194:	b09d      	sub	sp, #116	; 0x74
 8010196:	9408      	str	r4, [sp, #32]
 8010198:	9509      	str	r5, [sp, #36]	; 0x24
 801019a:	9e25      	ldr	r6, [sp, #148]	; 0x94
 801019c:	9004      	str	r0, [sp, #16]
 801019e:	2900      	cmp	r1, #0
 80101a0:	d009      	beq.n	80101b6 <_dtoa_r+0x2a>
 80101a2:	2301      	movs	r3, #1
 80101a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101a6:	4093      	lsls	r3, r2
 80101a8:	604a      	str	r2, [r1, #4]
 80101aa:	608b      	str	r3, [r1, #8]
 80101ac:	f7fc fc56 	bl	800ca5c <_Bfree>
 80101b0:	2300      	movs	r3, #0
 80101b2:	9a04      	ldr	r2, [sp, #16]
 80101b4:	6393      	str	r3, [r2, #56]	; 0x38
 80101b6:	2d00      	cmp	r5, #0
 80101b8:	da1e      	bge.n	80101f8 <_dtoa_r+0x6c>
 80101ba:	2301      	movs	r3, #1
 80101bc:	6033      	str	r3, [r6, #0]
 80101be:	006b      	lsls	r3, r5, #1
 80101c0:	085b      	lsrs	r3, r3, #1
 80101c2:	9309      	str	r3, [sp, #36]	; 0x24
 80101c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80101c6:	4bb5      	ldr	r3, [pc, #724]	; (801049c <_dtoa_r+0x310>)
 80101c8:	4ab4      	ldr	r2, [pc, #720]	; (801049c <_dtoa_r+0x310>)
 80101ca:	403b      	ands	r3, r7
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d116      	bne.n	80101fe <_dtoa_r+0x72>
 80101d0:	4bb3      	ldr	r3, [pc, #716]	; (80104a0 <_dtoa_r+0x314>)
 80101d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80101d4:	6013      	str	r3, [r2, #0]
 80101d6:	033b      	lsls	r3, r7, #12
 80101d8:	0b1b      	lsrs	r3, r3, #12
 80101da:	4323      	orrs	r3, r4
 80101dc:	d101      	bne.n	80101e2 <_dtoa_r+0x56>
 80101de:	f000 fdb2 	bl	8010d46 <_dtoa_r+0xbba>
 80101e2:	4bb0      	ldr	r3, [pc, #704]	; (80104a4 <_dtoa_r+0x318>)
 80101e4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80101e6:	9306      	str	r3, [sp, #24]
 80101e8:	2a00      	cmp	r2, #0
 80101ea:	d002      	beq.n	80101f2 <_dtoa_r+0x66>
 80101ec:	4bae      	ldr	r3, [pc, #696]	; (80104a8 <_dtoa_r+0x31c>)
 80101ee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80101f0:	6013      	str	r3, [r2, #0]
 80101f2:	9806      	ldr	r0, [sp, #24]
 80101f4:	b01d      	add	sp, #116	; 0x74
 80101f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f8:	2300      	movs	r3, #0
 80101fa:	6033      	str	r3, [r6, #0]
 80101fc:	e7e2      	b.n	80101c4 <_dtoa_r+0x38>
 80101fe:	9a08      	ldr	r2, [sp, #32]
 8010200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010202:	9210      	str	r2, [sp, #64]	; 0x40
 8010204:	9311      	str	r3, [sp, #68]	; 0x44
 8010206:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010208:	9911      	ldr	r1, [sp, #68]	; 0x44
 801020a:	2200      	movs	r2, #0
 801020c:	2300      	movs	r3, #0
 801020e:	f7f0 f91b 	bl	8000448 <__aeabi_dcmpeq>
 8010212:	1e06      	subs	r6, r0, #0
 8010214:	d009      	beq.n	801022a <_dtoa_r+0x9e>
 8010216:	2301      	movs	r3, #1
 8010218:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801021a:	6013      	str	r3, [r2, #0]
 801021c:	4ba3      	ldr	r3, [pc, #652]	; (80104ac <_dtoa_r+0x320>)
 801021e:	9306      	str	r3, [sp, #24]
 8010220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010222:	2b00      	cmp	r3, #0
 8010224:	d0e5      	beq.n	80101f2 <_dtoa_r+0x66>
 8010226:	4ba2      	ldr	r3, [pc, #648]	; (80104b0 <_dtoa_r+0x324>)
 8010228:	e7e1      	b.n	80101ee <_dtoa_r+0x62>
 801022a:	ab1a      	add	r3, sp, #104	; 0x68
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	ab1b      	add	r3, sp, #108	; 0x6c
 8010230:	9300      	str	r3, [sp, #0]
 8010232:	9804      	ldr	r0, [sp, #16]
 8010234:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010236:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010238:	f7fc ff86 	bl	800d148 <__d2b>
 801023c:	007a      	lsls	r2, r7, #1
 801023e:	9005      	str	r0, [sp, #20]
 8010240:	0d52      	lsrs	r2, r2, #21
 8010242:	d100      	bne.n	8010246 <_dtoa_r+0xba>
 8010244:	e07b      	b.n	801033e <_dtoa_r+0x1b2>
 8010246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010248:	9617      	str	r6, [sp, #92]	; 0x5c
 801024a:	0319      	lsls	r1, r3, #12
 801024c:	4b99      	ldr	r3, [pc, #612]	; (80104b4 <_dtoa_r+0x328>)
 801024e:	0b09      	lsrs	r1, r1, #12
 8010250:	430b      	orrs	r3, r1
 8010252:	4999      	ldr	r1, [pc, #612]	; (80104b8 <_dtoa_r+0x32c>)
 8010254:	1857      	adds	r7, r2, r1
 8010256:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010258:	9911      	ldr	r1, [sp, #68]	; 0x44
 801025a:	0019      	movs	r1, r3
 801025c:	2200      	movs	r2, #0
 801025e:	4b97      	ldr	r3, [pc, #604]	; (80104bc <_dtoa_r+0x330>)
 8010260:	f7f1 fcc6 	bl	8001bf0 <__aeabi_dsub>
 8010264:	4a96      	ldr	r2, [pc, #600]	; (80104c0 <_dtoa_r+0x334>)
 8010266:	4b97      	ldr	r3, [pc, #604]	; (80104c4 <_dtoa_r+0x338>)
 8010268:	f7f1 fa00 	bl	800166c <__aeabi_dmul>
 801026c:	4a96      	ldr	r2, [pc, #600]	; (80104c8 <_dtoa_r+0x33c>)
 801026e:	4b97      	ldr	r3, [pc, #604]	; (80104cc <_dtoa_r+0x340>)
 8010270:	f7f0 faa2 	bl	80007b8 <__aeabi_dadd>
 8010274:	0004      	movs	r4, r0
 8010276:	0038      	movs	r0, r7
 8010278:	000d      	movs	r5, r1
 801027a:	f7f2 f88f 	bl	800239c <__aeabi_i2d>
 801027e:	4a94      	ldr	r2, [pc, #592]	; (80104d0 <_dtoa_r+0x344>)
 8010280:	4b94      	ldr	r3, [pc, #592]	; (80104d4 <_dtoa_r+0x348>)
 8010282:	f7f1 f9f3 	bl	800166c <__aeabi_dmul>
 8010286:	0002      	movs	r2, r0
 8010288:	000b      	movs	r3, r1
 801028a:	0020      	movs	r0, r4
 801028c:	0029      	movs	r1, r5
 801028e:	f7f0 fa93 	bl	80007b8 <__aeabi_dadd>
 8010292:	0004      	movs	r4, r0
 8010294:	000d      	movs	r5, r1
 8010296:	f7f2 f84b 	bl	8002330 <__aeabi_d2iz>
 801029a:	2200      	movs	r2, #0
 801029c:	9003      	str	r0, [sp, #12]
 801029e:	2300      	movs	r3, #0
 80102a0:	0020      	movs	r0, r4
 80102a2:	0029      	movs	r1, r5
 80102a4:	f7f0 f8d6 	bl	8000454 <__aeabi_dcmplt>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d00b      	beq.n	80102c4 <_dtoa_r+0x138>
 80102ac:	9803      	ldr	r0, [sp, #12]
 80102ae:	f7f2 f875 	bl	800239c <__aeabi_i2d>
 80102b2:	002b      	movs	r3, r5
 80102b4:	0022      	movs	r2, r4
 80102b6:	f7f0 f8c7 	bl	8000448 <__aeabi_dcmpeq>
 80102ba:	4243      	negs	r3, r0
 80102bc:	4158      	adcs	r0, r3
 80102be:	9b03      	ldr	r3, [sp, #12]
 80102c0:	1a1b      	subs	r3, r3, r0
 80102c2:	9303      	str	r3, [sp, #12]
 80102c4:	2301      	movs	r3, #1
 80102c6:	9316      	str	r3, [sp, #88]	; 0x58
 80102c8:	9b03      	ldr	r3, [sp, #12]
 80102ca:	2b16      	cmp	r3, #22
 80102cc:	d810      	bhi.n	80102f0 <_dtoa_r+0x164>
 80102ce:	9810      	ldr	r0, [sp, #64]	; 0x40
 80102d0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80102d2:	9a03      	ldr	r2, [sp, #12]
 80102d4:	4b80      	ldr	r3, [pc, #512]	; (80104d8 <_dtoa_r+0x34c>)
 80102d6:	00d2      	lsls	r2, r2, #3
 80102d8:	189b      	adds	r3, r3, r2
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f7f0 f8b9 	bl	8000454 <__aeabi_dcmplt>
 80102e2:	2800      	cmp	r0, #0
 80102e4:	d047      	beq.n	8010376 <_dtoa_r+0x1ea>
 80102e6:	9b03      	ldr	r3, [sp, #12]
 80102e8:	3b01      	subs	r3, #1
 80102ea:	9303      	str	r3, [sp, #12]
 80102ec:	2300      	movs	r3, #0
 80102ee:	9316      	str	r3, [sp, #88]	; 0x58
 80102f0:	2200      	movs	r2, #0
 80102f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80102f4:	920a      	str	r2, [sp, #40]	; 0x28
 80102f6:	1bdb      	subs	r3, r3, r7
 80102f8:	1e5a      	subs	r2, r3, #1
 80102fa:	d53e      	bpl.n	801037a <_dtoa_r+0x1ee>
 80102fc:	2201      	movs	r2, #1
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	930a      	str	r3, [sp, #40]	; 0x28
 8010302:	2300      	movs	r3, #0
 8010304:	930c      	str	r3, [sp, #48]	; 0x30
 8010306:	9b03      	ldr	r3, [sp, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	db38      	blt.n	801037e <_dtoa_r+0x1f2>
 801030c:	9a03      	ldr	r2, [sp, #12]
 801030e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010310:	4694      	mov	ip, r2
 8010312:	4463      	add	r3, ip
 8010314:	930c      	str	r3, [sp, #48]	; 0x30
 8010316:	2300      	movs	r3, #0
 8010318:	9213      	str	r2, [sp, #76]	; 0x4c
 801031a:	930d      	str	r3, [sp, #52]	; 0x34
 801031c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801031e:	2401      	movs	r4, #1
 8010320:	2b09      	cmp	r3, #9
 8010322:	d867      	bhi.n	80103f4 <_dtoa_r+0x268>
 8010324:	2b05      	cmp	r3, #5
 8010326:	dd02      	ble.n	801032e <_dtoa_r+0x1a2>
 8010328:	2400      	movs	r4, #0
 801032a:	3b04      	subs	r3, #4
 801032c:	9322      	str	r3, [sp, #136]	; 0x88
 801032e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010330:	1e98      	subs	r0, r3, #2
 8010332:	2803      	cmp	r0, #3
 8010334:	d867      	bhi.n	8010406 <_dtoa_r+0x27a>
 8010336:	f7ef feed 	bl	8000114 <__gnu_thumb1_case_uqi>
 801033a:	3a2b      	.short	0x3a2b
 801033c:	5b38      	.short	0x5b38
 801033e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010340:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8010342:	18f6      	adds	r6, r6, r3
 8010344:	4b65      	ldr	r3, [pc, #404]	; (80104dc <_dtoa_r+0x350>)
 8010346:	18f2      	adds	r2, r6, r3
 8010348:	2a20      	cmp	r2, #32
 801034a:	dd0f      	ble.n	801036c <_dtoa_r+0x1e0>
 801034c:	2340      	movs	r3, #64	; 0x40
 801034e:	1a9b      	subs	r3, r3, r2
 8010350:	409f      	lsls	r7, r3
 8010352:	4b63      	ldr	r3, [pc, #396]	; (80104e0 <_dtoa_r+0x354>)
 8010354:	0038      	movs	r0, r7
 8010356:	18f3      	adds	r3, r6, r3
 8010358:	40dc      	lsrs	r4, r3
 801035a:	4320      	orrs	r0, r4
 801035c:	f7f2 f84e 	bl	80023fc <__aeabi_ui2d>
 8010360:	2201      	movs	r2, #1
 8010362:	4b60      	ldr	r3, [pc, #384]	; (80104e4 <_dtoa_r+0x358>)
 8010364:	1e77      	subs	r7, r6, #1
 8010366:	18cb      	adds	r3, r1, r3
 8010368:	9217      	str	r2, [sp, #92]	; 0x5c
 801036a:	e776      	b.n	801025a <_dtoa_r+0xce>
 801036c:	2320      	movs	r3, #32
 801036e:	0020      	movs	r0, r4
 8010370:	1a9b      	subs	r3, r3, r2
 8010372:	4098      	lsls	r0, r3
 8010374:	e7f2      	b.n	801035c <_dtoa_r+0x1d0>
 8010376:	9016      	str	r0, [sp, #88]	; 0x58
 8010378:	e7ba      	b.n	80102f0 <_dtoa_r+0x164>
 801037a:	920c      	str	r2, [sp, #48]	; 0x30
 801037c:	e7c3      	b.n	8010306 <_dtoa_r+0x17a>
 801037e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010380:	9a03      	ldr	r2, [sp, #12]
 8010382:	1a9b      	subs	r3, r3, r2
 8010384:	930a      	str	r3, [sp, #40]	; 0x28
 8010386:	4253      	negs	r3, r2
 8010388:	930d      	str	r3, [sp, #52]	; 0x34
 801038a:	2300      	movs	r3, #0
 801038c:	9313      	str	r3, [sp, #76]	; 0x4c
 801038e:	e7c5      	b.n	801031c <_dtoa_r+0x190>
 8010390:	2300      	movs	r3, #0
 8010392:	930f      	str	r3, [sp, #60]	; 0x3c
 8010394:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010396:	930b      	str	r3, [sp, #44]	; 0x2c
 8010398:	9307      	str	r3, [sp, #28]
 801039a:	2b00      	cmp	r3, #0
 801039c:	dc13      	bgt.n	80103c6 <_dtoa_r+0x23a>
 801039e:	2301      	movs	r3, #1
 80103a0:	001a      	movs	r2, r3
 80103a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80103a4:	9307      	str	r3, [sp, #28]
 80103a6:	9223      	str	r2, [sp, #140]	; 0x8c
 80103a8:	e00d      	b.n	80103c6 <_dtoa_r+0x23a>
 80103aa:	2301      	movs	r3, #1
 80103ac:	e7f1      	b.n	8010392 <_dtoa_r+0x206>
 80103ae:	2300      	movs	r3, #0
 80103b0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80103b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80103b4:	4694      	mov	ip, r2
 80103b6:	9b03      	ldr	r3, [sp, #12]
 80103b8:	4463      	add	r3, ip
 80103ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80103bc:	3301      	adds	r3, #1
 80103be:	9307      	str	r3, [sp, #28]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	dc00      	bgt.n	80103c6 <_dtoa_r+0x23a>
 80103c4:	2301      	movs	r3, #1
 80103c6:	2100      	movs	r1, #0
 80103c8:	2204      	movs	r2, #4
 80103ca:	0010      	movs	r0, r2
 80103cc:	3014      	adds	r0, #20
 80103ce:	4298      	cmp	r0, r3
 80103d0:	d91d      	bls.n	801040e <_dtoa_r+0x282>
 80103d2:	9b04      	ldr	r3, [sp, #16]
 80103d4:	0018      	movs	r0, r3
 80103d6:	63d9      	str	r1, [r3, #60]	; 0x3c
 80103d8:	f7fc fb18 	bl	800ca0c <_Balloc>
 80103dc:	9006      	str	r0, [sp, #24]
 80103de:	2800      	cmp	r0, #0
 80103e0:	d118      	bne.n	8010414 <_dtoa_r+0x288>
 80103e2:	21b0      	movs	r1, #176	; 0xb0
 80103e4:	4b40      	ldr	r3, [pc, #256]	; (80104e8 <_dtoa_r+0x35c>)
 80103e6:	4841      	ldr	r0, [pc, #260]	; (80104ec <_dtoa_r+0x360>)
 80103e8:	9a06      	ldr	r2, [sp, #24]
 80103ea:	31ff      	adds	r1, #255	; 0xff
 80103ec:	f7ff fdd2 	bl	800ff94 <__assert_func>
 80103f0:	2301      	movs	r3, #1
 80103f2:	e7dd      	b.n	80103b0 <_dtoa_r+0x224>
 80103f4:	2300      	movs	r3, #0
 80103f6:	940f      	str	r4, [sp, #60]	; 0x3c
 80103f8:	9322      	str	r3, [sp, #136]	; 0x88
 80103fa:	3b01      	subs	r3, #1
 80103fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80103fe:	9307      	str	r3, [sp, #28]
 8010400:	2200      	movs	r2, #0
 8010402:	3313      	adds	r3, #19
 8010404:	e7cf      	b.n	80103a6 <_dtoa_r+0x21a>
 8010406:	2301      	movs	r3, #1
 8010408:	930f      	str	r3, [sp, #60]	; 0x3c
 801040a:	3b02      	subs	r3, #2
 801040c:	e7f6      	b.n	80103fc <_dtoa_r+0x270>
 801040e:	3101      	adds	r1, #1
 8010410:	0052      	lsls	r2, r2, #1
 8010412:	e7da      	b.n	80103ca <_dtoa_r+0x23e>
 8010414:	9b04      	ldr	r3, [sp, #16]
 8010416:	9a06      	ldr	r2, [sp, #24]
 8010418:	639a      	str	r2, [r3, #56]	; 0x38
 801041a:	9b07      	ldr	r3, [sp, #28]
 801041c:	2b0e      	cmp	r3, #14
 801041e:	d900      	bls.n	8010422 <_dtoa_r+0x296>
 8010420:	e0e3      	b.n	80105ea <_dtoa_r+0x45e>
 8010422:	2c00      	cmp	r4, #0
 8010424:	d100      	bne.n	8010428 <_dtoa_r+0x29c>
 8010426:	e0e0      	b.n	80105ea <_dtoa_r+0x45e>
 8010428:	9b03      	ldr	r3, [sp, #12]
 801042a:	2b00      	cmp	r3, #0
 801042c:	dd62      	ble.n	80104f4 <_dtoa_r+0x368>
 801042e:	210f      	movs	r1, #15
 8010430:	9a03      	ldr	r2, [sp, #12]
 8010432:	4b29      	ldr	r3, [pc, #164]	; (80104d8 <_dtoa_r+0x34c>)
 8010434:	400a      	ands	r2, r1
 8010436:	00d2      	lsls	r2, r2, #3
 8010438:	189b      	adds	r3, r3, r2
 801043a:	681e      	ldr	r6, [r3, #0]
 801043c:	685f      	ldr	r7, [r3, #4]
 801043e:	9b03      	ldr	r3, [sp, #12]
 8010440:	2402      	movs	r4, #2
 8010442:	111d      	asrs	r5, r3, #4
 8010444:	05db      	lsls	r3, r3, #23
 8010446:	d50a      	bpl.n	801045e <_dtoa_r+0x2d2>
 8010448:	4b29      	ldr	r3, [pc, #164]	; (80104f0 <_dtoa_r+0x364>)
 801044a:	400d      	ands	r5, r1
 801044c:	6a1a      	ldr	r2, [r3, #32]
 801044e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010450:	9810      	ldr	r0, [sp, #64]	; 0x40
 8010452:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010454:	f7f0 fd10 	bl	8000e78 <__aeabi_ddiv>
 8010458:	9008      	str	r0, [sp, #32]
 801045a:	9109      	str	r1, [sp, #36]	; 0x24
 801045c:	3401      	adds	r4, #1
 801045e:	4b24      	ldr	r3, [pc, #144]	; (80104f0 <_dtoa_r+0x364>)
 8010460:	930e      	str	r3, [sp, #56]	; 0x38
 8010462:	2d00      	cmp	r5, #0
 8010464:	d108      	bne.n	8010478 <_dtoa_r+0x2ec>
 8010466:	9808      	ldr	r0, [sp, #32]
 8010468:	9909      	ldr	r1, [sp, #36]	; 0x24
 801046a:	0032      	movs	r2, r6
 801046c:	003b      	movs	r3, r7
 801046e:	f7f0 fd03 	bl	8000e78 <__aeabi_ddiv>
 8010472:	9008      	str	r0, [sp, #32]
 8010474:	9109      	str	r1, [sp, #36]	; 0x24
 8010476:	e058      	b.n	801052a <_dtoa_r+0x39e>
 8010478:	2301      	movs	r3, #1
 801047a:	421d      	tst	r5, r3
 801047c:	d009      	beq.n	8010492 <_dtoa_r+0x306>
 801047e:	18e4      	adds	r4, r4, r3
 8010480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010482:	0030      	movs	r0, r6
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	0039      	movs	r1, r7
 801048a:	f7f1 f8ef 	bl	800166c <__aeabi_dmul>
 801048e:	0006      	movs	r6, r0
 8010490:	000f      	movs	r7, r1
 8010492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010494:	106d      	asrs	r5, r5, #1
 8010496:	3308      	adds	r3, #8
 8010498:	e7e2      	b.n	8010460 <_dtoa_r+0x2d4>
 801049a:	46c0      	nop			; (mov r8, r8)
 801049c:	7ff00000 	.word	0x7ff00000
 80104a0:	0000270f 	.word	0x0000270f
 80104a4:	0801495d 	.word	0x0801495d
 80104a8:	08014960 	.word	0x08014960
 80104ac:	080148ce 	.word	0x080148ce
 80104b0:	080148cf 	.word	0x080148cf
 80104b4:	3ff00000 	.word	0x3ff00000
 80104b8:	fffffc01 	.word	0xfffffc01
 80104bc:	3ff80000 	.word	0x3ff80000
 80104c0:	636f4361 	.word	0x636f4361
 80104c4:	3fd287a7 	.word	0x3fd287a7
 80104c8:	8b60c8b3 	.word	0x8b60c8b3
 80104cc:	3fc68a28 	.word	0x3fc68a28
 80104d0:	509f79fb 	.word	0x509f79fb
 80104d4:	3fd34413 	.word	0x3fd34413
 80104d8:	080147c8 	.word	0x080147c8
 80104dc:	00000432 	.word	0x00000432
 80104e0:	00000412 	.word	0x00000412
 80104e4:	fe100000 	.word	0xfe100000
 80104e8:	080146d1 	.word	0x080146d1
 80104ec:	08014961 	.word	0x08014961
 80104f0:	080147a0 	.word	0x080147a0
 80104f4:	9b03      	ldr	r3, [sp, #12]
 80104f6:	2402      	movs	r4, #2
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d016      	beq.n	801052a <_dtoa_r+0x39e>
 80104fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80104fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010500:	220f      	movs	r2, #15
 8010502:	425d      	negs	r5, r3
 8010504:	402a      	ands	r2, r5
 8010506:	4bdd      	ldr	r3, [pc, #884]	; (801087c <_dtoa_r+0x6f0>)
 8010508:	00d2      	lsls	r2, r2, #3
 801050a:	189b      	adds	r3, r3, r2
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	f7f1 f8ac 	bl	800166c <__aeabi_dmul>
 8010514:	2701      	movs	r7, #1
 8010516:	2300      	movs	r3, #0
 8010518:	9008      	str	r0, [sp, #32]
 801051a:	9109      	str	r1, [sp, #36]	; 0x24
 801051c:	4ed8      	ldr	r6, [pc, #864]	; (8010880 <_dtoa_r+0x6f4>)
 801051e:	112d      	asrs	r5, r5, #4
 8010520:	2d00      	cmp	r5, #0
 8010522:	d000      	beq.n	8010526 <_dtoa_r+0x39a>
 8010524:	e091      	b.n	801064a <_dtoa_r+0x4be>
 8010526:	2b00      	cmp	r3, #0
 8010528:	d1a3      	bne.n	8010472 <_dtoa_r+0x2e6>
 801052a:	9e08      	ldr	r6, [sp, #32]
 801052c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801052e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010530:	2b00      	cmp	r3, #0
 8010532:	d100      	bne.n	8010536 <_dtoa_r+0x3aa>
 8010534:	e094      	b.n	8010660 <_dtoa_r+0x4d4>
 8010536:	2200      	movs	r2, #0
 8010538:	0030      	movs	r0, r6
 801053a:	0039      	movs	r1, r7
 801053c:	4bd1      	ldr	r3, [pc, #836]	; (8010884 <_dtoa_r+0x6f8>)
 801053e:	f7ef ff89 	bl	8000454 <__aeabi_dcmplt>
 8010542:	2800      	cmp	r0, #0
 8010544:	d100      	bne.n	8010548 <_dtoa_r+0x3bc>
 8010546:	e08b      	b.n	8010660 <_dtoa_r+0x4d4>
 8010548:	9b07      	ldr	r3, [sp, #28]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d100      	bne.n	8010550 <_dtoa_r+0x3c4>
 801054e:	e087      	b.n	8010660 <_dtoa_r+0x4d4>
 8010550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010552:	2b00      	cmp	r3, #0
 8010554:	dd45      	ble.n	80105e2 <_dtoa_r+0x456>
 8010556:	9b03      	ldr	r3, [sp, #12]
 8010558:	2200      	movs	r2, #0
 801055a:	3b01      	subs	r3, #1
 801055c:	930e      	str	r3, [sp, #56]	; 0x38
 801055e:	0030      	movs	r0, r6
 8010560:	4bc9      	ldr	r3, [pc, #804]	; (8010888 <_dtoa_r+0x6fc>)
 8010562:	0039      	movs	r1, r7
 8010564:	f7f1 f882 	bl	800166c <__aeabi_dmul>
 8010568:	9008      	str	r0, [sp, #32]
 801056a:	9109      	str	r1, [sp, #36]	; 0x24
 801056c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801056e:	3401      	adds	r4, #1
 8010570:	0020      	movs	r0, r4
 8010572:	9e08      	ldr	r6, [sp, #32]
 8010574:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010576:	9312      	str	r3, [sp, #72]	; 0x48
 8010578:	f7f1 ff10 	bl	800239c <__aeabi_i2d>
 801057c:	0032      	movs	r2, r6
 801057e:	003b      	movs	r3, r7
 8010580:	f7f1 f874 	bl	800166c <__aeabi_dmul>
 8010584:	2200      	movs	r2, #0
 8010586:	4bc1      	ldr	r3, [pc, #772]	; (801088c <_dtoa_r+0x700>)
 8010588:	f7f0 f916 	bl	80007b8 <__aeabi_dadd>
 801058c:	4ac0      	ldr	r2, [pc, #768]	; (8010890 <_dtoa_r+0x704>)
 801058e:	9014      	str	r0, [sp, #80]	; 0x50
 8010590:	9115      	str	r1, [sp, #84]	; 0x54
 8010592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010594:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8010596:	4694      	mov	ip, r2
 8010598:	9308      	str	r3, [sp, #32]
 801059a:	9409      	str	r4, [sp, #36]	; 0x24
 801059c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801059e:	4463      	add	r3, ip
 80105a0:	9318      	str	r3, [sp, #96]	; 0x60
 80105a2:	9309      	str	r3, [sp, #36]	; 0x24
 80105a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d15e      	bne.n	8010668 <_dtoa_r+0x4dc>
 80105aa:	2200      	movs	r2, #0
 80105ac:	4bb9      	ldr	r3, [pc, #740]	; (8010894 <_dtoa_r+0x708>)
 80105ae:	0030      	movs	r0, r6
 80105b0:	0039      	movs	r1, r7
 80105b2:	f7f1 fb1d 	bl	8001bf0 <__aeabi_dsub>
 80105b6:	9a08      	ldr	r2, [sp, #32]
 80105b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80105ba:	0004      	movs	r4, r0
 80105bc:	000d      	movs	r5, r1
 80105be:	f7ef ff5d 	bl	800047c <__aeabi_dcmpgt>
 80105c2:	2800      	cmp	r0, #0
 80105c4:	d000      	beq.n	80105c8 <_dtoa_r+0x43c>
 80105c6:	e2b3      	b.n	8010b30 <_dtoa_r+0x9a4>
 80105c8:	48b3      	ldr	r0, [pc, #716]	; (8010898 <_dtoa_r+0x70c>)
 80105ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 80105cc:	4684      	mov	ip, r0
 80105ce:	4461      	add	r1, ip
 80105d0:	000b      	movs	r3, r1
 80105d2:	0020      	movs	r0, r4
 80105d4:	0029      	movs	r1, r5
 80105d6:	9a08      	ldr	r2, [sp, #32]
 80105d8:	f7ef ff3c 	bl	8000454 <__aeabi_dcmplt>
 80105dc:	2800      	cmp	r0, #0
 80105de:	d000      	beq.n	80105e2 <_dtoa_r+0x456>
 80105e0:	e2a3      	b.n	8010b2a <_dtoa_r+0x99e>
 80105e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80105e6:	9308      	str	r3, [sp, #32]
 80105e8:	9409      	str	r4, [sp, #36]	; 0x24
 80105ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	da00      	bge.n	80105f2 <_dtoa_r+0x466>
 80105f0:	e179      	b.n	80108e6 <_dtoa_r+0x75a>
 80105f2:	9a03      	ldr	r2, [sp, #12]
 80105f4:	2a0e      	cmp	r2, #14
 80105f6:	dd00      	ble.n	80105fa <_dtoa_r+0x46e>
 80105f8:	e175      	b.n	80108e6 <_dtoa_r+0x75a>
 80105fa:	4ba0      	ldr	r3, [pc, #640]	; (801087c <_dtoa_r+0x6f0>)
 80105fc:	00d2      	lsls	r2, r2, #3
 80105fe:	189b      	adds	r3, r3, r2
 8010600:	681e      	ldr	r6, [r3, #0]
 8010602:	685f      	ldr	r7, [r3, #4]
 8010604:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010606:	2b00      	cmp	r3, #0
 8010608:	db00      	blt.n	801060c <_dtoa_r+0x480>
 801060a:	e0e5      	b.n	80107d8 <_dtoa_r+0x64c>
 801060c:	9b07      	ldr	r3, [sp, #28]
 801060e:	2b00      	cmp	r3, #0
 8010610:	dd00      	ble.n	8010614 <_dtoa_r+0x488>
 8010612:	e0e1      	b.n	80107d8 <_dtoa_r+0x64c>
 8010614:	d000      	beq.n	8010618 <_dtoa_r+0x48c>
 8010616:	e288      	b.n	8010b2a <_dtoa_r+0x99e>
 8010618:	2200      	movs	r2, #0
 801061a:	0030      	movs	r0, r6
 801061c:	0039      	movs	r1, r7
 801061e:	4b9d      	ldr	r3, [pc, #628]	; (8010894 <_dtoa_r+0x708>)
 8010620:	f7f1 f824 	bl	800166c <__aeabi_dmul>
 8010624:	9a08      	ldr	r2, [sp, #32]
 8010626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010628:	f7ef ff32 	bl	8000490 <__aeabi_dcmpge>
 801062c:	9e07      	ldr	r6, [sp, #28]
 801062e:	0037      	movs	r7, r6
 8010630:	2800      	cmp	r0, #0
 8010632:	d000      	beq.n	8010636 <_dtoa_r+0x4aa>
 8010634:	e25f      	b.n	8010af6 <_dtoa_r+0x96a>
 8010636:	9b06      	ldr	r3, [sp, #24]
 8010638:	9a06      	ldr	r2, [sp, #24]
 801063a:	3301      	adds	r3, #1
 801063c:	9308      	str	r3, [sp, #32]
 801063e:	2331      	movs	r3, #49	; 0x31
 8010640:	7013      	strb	r3, [r2, #0]
 8010642:	9b03      	ldr	r3, [sp, #12]
 8010644:	3301      	adds	r3, #1
 8010646:	9303      	str	r3, [sp, #12]
 8010648:	e25a      	b.n	8010b00 <_dtoa_r+0x974>
 801064a:	423d      	tst	r5, r7
 801064c:	d005      	beq.n	801065a <_dtoa_r+0x4ce>
 801064e:	6832      	ldr	r2, [r6, #0]
 8010650:	6873      	ldr	r3, [r6, #4]
 8010652:	f7f1 f80b 	bl	800166c <__aeabi_dmul>
 8010656:	003b      	movs	r3, r7
 8010658:	3401      	adds	r4, #1
 801065a:	106d      	asrs	r5, r5, #1
 801065c:	3608      	adds	r6, #8
 801065e:	e75f      	b.n	8010520 <_dtoa_r+0x394>
 8010660:	9b03      	ldr	r3, [sp, #12]
 8010662:	930e      	str	r3, [sp, #56]	; 0x38
 8010664:	9b07      	ldr	r3, [sp, #28]
 8010666:	e783      	b.n	8010570 <_dtoa_r+0x3e4>
 8010668:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801066a:	4b84      	ldr	r3, [pc, #528]	; (801087c <_dtoa_r+0x6f0>)
 801066c:	3a01      	subs	r2, #1
 801066e:	00d2      	lsls	r2, r2, #3
 8010670:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010672:	189b      	adds	r3, r3, r2
 8010674:	9c08      	ldr	r4, [sp, #32]
 8010676:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	2900      	cmp	r1, #0
 801067e:	d051      	beq.n	8010724 <_dtoa_r+0x598>
 8010680:	2000      	movs	r0, #0
 8010682:	4986      	ldr	r1, [pc, #536]	; (801089c <_dtoa_r+0x710>)
 8010684:	f7f0 fbf8 	bl	8000e78 <__aeabi_ddiv>
 8010688:	0022      	movs	r2, r4
 801068a:	002b      	movs	r3, r5
 801068c:	f7f1 fab0 	bl	8001bf0 <__aeabi_dsub>
 8010690:	9a06      	ldr	r2, [sp, #24]
 8010692:	0004      	movs	r4, r0
 8010694:	4694      	mov	ip, r2
 8010696:	000d      	movs	r5, r1
 8010698:	9b06      	ldr	r3, [sp, #24]
 801069a:	9314      	str	r3, [sp, #80]	; 0x50
 801069c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801069e:	4463      	add	r3, ip
 80106a0:	9318      	str	r3, [sp, #96]	; 0x60
 80106a2:	0039      	movs	r1, r7
 80106a4:	0030      	movs	r0, r6
 80106a6:	f7f1 fe43 	bl	8002330 <__aeabi_d2iz>
 80106aa:	9012      	str	r0, [sp, #72]	; 0x48
 80106ac:	f7f1 fe76 	bl	800239c <__aeabi_i2d>
 80106b0:	0002      	movs	r2, r0
 80106b2:	000b      	movs	r3, r1
 80106b4:	0030      	movs	r0, r6
 80106b6:	0039      	movs	r1, r7
 80106b8:	f7f1 fa9a 	bl	8001bf0 <__aeabi_dsub>
 80106bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80106be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106c0:	3301      	adds	r3, #1
 80106c2:	9308      	str	r3, [sp, #32]
 80106c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80106c6:	0006      	movs	r6, r0
 80106c8:	3330      	adds	r3, #48	; 0x30
 80106ca:	7013      	strb	r3, [r2, #0]
 80106cc:	0022      	movs	r2, r4
 80106ce:	002b      	movs	r3, r5
 80106d0:	000f      	movs	r7, r1
 80106d2:	f7ef febf 	bl	8000454 <__aeabi_dcmplt>
 80106d6:	2800      	cmp	r0, #0
 80106d8:	d174      	bne.n	80107c4 <_dtoa_r+0x638>
 80106da:	0032      	movs	r2, r6
 80106dc:	003b      	movs	r3, r7
 80106de:	2000      	movs	r0, #0
 80106e0:	4968      	ldr	r1, [pc, #416]	; (8010884 <_dtoa_r+0x6f8>)
 80106e2:	f7f1 fa85 	bl	8001bf0 <__aeabi_dsub>
 80106e6:	0022      	movs	r2, r4
 80106e8:	002b      	movs	r3, r5
 80106ea:	f7ef feb3 	bl	8000454 <__aeabi_dcmplt>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d000      	beq.n	80106f4 <_dtoa_r+0x568>
 80106f2:	e0d7      	b.n	80108a4 <_dtoa_r+0x718>
 80106f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80106f6:	9a08      	ldr	r2, [sp, #32]
 80106f8:	4293      	cmp	r3, r2
 80106fa:	d100      	bne.n	80106fe <_dtoa_r+0x572>
 80106fc:	e771      	b.n	80105e2 <_dtoa_r+0x456>
 80106fe:	2200      	movs	r2, #0
 8010700:	0020      	movs	r0, r4
 8010702:	0029      	movs	r1, r5
 8010704:	4b60      	ldr	r3, [pc, #384]	; (8010888 <_dtoa_r+0x6fc>)
 8010706:	f7f0 ffb1 	bl	800166c <__aeabi_dmul>
 801070a:	4b5f      	ldr	r3, [pc, #380]	; (8010888 <_dtoa_r+0x6fc>)
 801070c:	0004      	movs	r4, r0
 801070e:	000d      	movs	r5, r1
 8010710:	0030      	movs	r0, r6
 8010712:	0039      	movs	r1, r7
 8010714:	2200      	movs	r2, #0
 8010716:	f7f0 ffa9 	bl	800166c <__aeabi_dmul>
 801071a:	9b08      	ldr	r3, [sp, #32]
 801071c:	0006      	movs	r6, r0
 801071e:	000f      	movs	r7, r1
 8010720:	9314      	str	r3, [sp, #80]	; 0x50
 8010722:	e7be      	b.n	80106a2 <_dtoa_r+0x516>
 8010724:	0020      	movs	r0, r4
 8010726:	0029      	movs	r1, r5
 8010728:	f7f0 ffa0 	bl	800166c <__aeabi_dmul>
 801072c:	9a06      	ldr	r2, [sp, #24]
 801072e:	9b06      	ldr	r3, [sp, #24]
 8010730:	4694      	mov	ip, r2
 8010732:	9308      	str	r3, [sp, #32]
 8010734:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010736:	9014      	str	r0, [sp, #80]	; 0x50
 8010738:	9115      	str	r1, [sp, #84]	; 0x54
 801073a:	4463      	add	r3, ip
 801073c:	9319      	str	r3, [sp, #100]	; 0x64
 801073e:	0030      	movs	r0, r6
 8010740:	0039      	movs	r1, r7
 8010742:	f7f1 fdf5 	bl	8002330 <__aeabi_d2iz>
 8010746:	9018      	str	r0, [sp, #96]	; 0x60
 8010748:	f7f1 fe28 	bl	800239c <__aeabi_i2d>
 801074c:	0002      	movs	r2, r0
 801074e:	000b      	movs	r3, r1
 8010750:	0030      	movs	r0, r6
 8010752:	0039      	movs	r1, r7
 8010754:	f7f1 fa4c 	bl	8001bf0 <__aeabi_dsub>
 8010758:	9e18      	ldr	r6, [sp, #96]	; 0x60
 801075a:	9b08      	ldr	r3, [sp, #32]
 801075c:	3630      	adds	r6, #48	; 0x30
 801075e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010760:	701e      	strb	r6, [r3, #0]
 8010762:	3301      	adds	r3, #1
 8010764:	0004      	movs	r4, r0
 8010766:	000d      	movs	r5, r1
 8010768:	9308      	str	r3, [sp, #32]
 801076a:	4293      	cmp	r3, r2
 801076c:	d12d      	bne.n	80107ca <_dtoa_r+0x63e>
 801076e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8010770:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010772:	9a06      	ldr	r2, [sp, #24]
 8010774:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010776:	4694      	mov	ip, r2
 8010778:	4463      	add	r3, ip
 801077a:	2200      	movs	r2, #0
 801077c:	9308      	str	r3, [sp, #32]
 801077e:	4b47      	ldr	r3, [pc, #284]	; (801089c <_dtoa_r+0x710>)
 8010780:	f7f0 f81a 	bl	80007b8 <__aeabi_dadd>
 8010784:	0002      	movs	r2, r0
 8010786:	000b      	movs	r3, r1
 8010788:	0020      	movs	r0, r4
 801078a:	0029      	movs	r1, r5
 801078c:	f7ef fe76 	bl	800047c <__aeabi_dcmpgt>
 8010790:	2800      	cmp	r0, #0
 8010792:	d000      	beq.n	8010796 <_dtoa_r+0x60a>
 8010794:	e086      	b.n	80108a4 <_dtoa_r+0x718>
 8010796:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010798:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801079a:	2000      	movs	r0, #0
 801079c:	493f      	ldr	r1, [pc, #252]	; (801089c <_dtoa_r+0x710>)
 801079e:	f7f1 fa27 	bl	8001bf0 <__aeabi_dsub>
 80107a2:	0002      	movs	r2, r0
 80107a4:	000b      	movs	r3, r1
 80107a6:	0020      	movs	r0, r4
 80107a8:	0029      	movs	r1, r5
 80107aa:	f7ef fe53 	bl	8000454 <__aeabi_dcmplt>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d100      	bne.n	80107b4 <_dtoa_r+0x628>
 80107b2:	e716      	b.n	80105e2 <_dtoa_r+0x456>
 80107b4:	9b08      	ldr	r3, [sp, #32]
 80107b6:	001a      	movs	r2, r3
 80107b8:	3a01      	subs	r2, #1
 80107ba:	9208      	str	r2, [sp, #32]
 80107bc:	7812      	ldrb	r2, [r2, #0]
 80107be:	2a30      	cmp	r2, #48	; 0x30
 80107c0:	d0f8      	beq.n	80107b4 <_dtoa_r+0x628>
 80107c2:	9308      	str	r3, [sp, #32]
 80107c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107c6:	9303      	str	r3, [sp, #12]
 80107c8:	e046      	b.n	8010858 <_dtoa_r+0x6cc>
 80107ca:	2200      	movs	r2, #0
 80107cc:	4b2e      	ldr	r3, [pc, #184]	; (8010888 <_dtoa_r+0x6fc>)
 80107ce:	f7f0 ff4d 	bl	800166c <__aeabi_dmul>
 80107d2:	0006      	movs	r6, r0
 80107d4:	000f      	movs	r7, r1
 80107d6:	e7b2      	b.n	801073e <_dtoa_r+0x5b2>
 80107d8:	9b06      	ldr	r3, [sp, #24]
 80107da:	9a06      	ldr	r2, [sp, #24]
 80107dc:	930a      	str	r3, [sp, #40]	; 0x28
 80107de:	9b07      	ldr	r3, [sp, #28]
 80107e0:	9c08      	ldr	r4, [sp, #32]
 80107e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80107e4:	3b01      	subs	r3, #1
 80107e6:	189b      	adds	r3, r3, r2
 80107e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80107ea:	0032      	movs	r2, r6
 80107ec:	003b      	movs	r3, r7
 80107ee:	0020      	movs	r0, r4
 80107f0:	0029      	movs	r1, r5
 80107f2:	f7f0 fb41 	bl	8000e78 <__aeabi_ddiv>
 80107f6:	f7f1 fd9b 	bl	8002330 <__aeabi_d2iz>
 80107fa:	9007      	str	r0, [sp, #28]
 80107fc:	f7f1 fdce 	bl	800239c <__aeabi_i2d>
 8010800:	0032      	movs	r2, r6
 8010802:	003b      	movs	r3, r7
 8010804:	f7f0 ff32 	bl	800166c <__aeabi_dmul>
 8010808:	0002      	movs	r2, r0
 801080a:	000b      	movs	r3, r1
 801080c:	0020      	movs	r0, r4
 801080e:	0029      	movs	r1, r5
 8010810:	f7f1 f9ee 	bl	8001bf0 <__aeabi_dsub>
 8010814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010816:	001a      	movs	r2, r3
 8010818:	3201      	adds	r2, #1
 801081a:	920a      	str	r2, [sp, #40]	; 0x28
 801081c:	9208      	str	r2, [sp, #32]
 801081e:	9a07      	ldr	r2, [sp, #28]
 8010820:	3230      	adds	r2, #48	; 0x30
 8010822:	701a      	strb	r2, [r3, #0]
 8010824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010826:	429a      	cmp	r2, r3
 8010828:	d14f      	bne.n	80108ca <_dtoa_r+0x73e>
 801082a:	0002      	movs	r2, r0
 801082c:	000b      	movs	r3, r1
 801082e:	f7ef ffc3 	bl	80007b8 <__aeabi_dadd>
 8010832:	0032      	movs	r2, r6
 8010834:	003b      	movs	r3, r7
 8010836:	0004      	movs	r4, r0
 8010838:	000d      	movs	r5, r1
 801083a:	f7ef fe1f 	bl	800047c <__aeabi_dcmpgt>
 801083e:	2800      	cmp	r0, #0
 8010840:	d12e      	bne.n	80108a0 <_dtoa_r+0x714>
 8010842:	0032      	movs	r2, r6
 8010844:	003b      	movs	r3, r7
 8010846:	0020      	movs	r0, r4
 8010848:	0029      	movs	r1, r5
 801084a:	f7ef fdfd 	bl	8000448 <__aeabi_dcmpeq>
 801084e:	2800      	cmp	r0, #0
 8010850:	d002      	beq.n	8010858 <_dtoa_r+0x6cc>
 8010852:	9b07      	ldr	r3, [sp, #28]
 8010854:	07de      	lsls	r6, r3, #31
 8010856:	d423      	bmi.n	80108a0 <_dtoa_r+0x714>
 8010858:	9905      	ldr	r1, [sp, #20]
 801085a:	9804      	ldr	r0, [sp, #16]
 801085c:	f7fc f8fe 	bl	800ca5c <_Bfree>
 8010860:	2300      	movs	r3, #0
 8010862:	9a08      	ldr	r2, [sp, #32]
 8010864:	7013      	strb	r3, [r2, #0]
 8010866:	9b03      	ldr	r3, [sp, #12]
 8010868:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801086a:	3301      	adds	r3, #1
 801086c:	6013      	str	r3, [r2, #0]
 801086e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8010870:	2b00      	cmp	r3, #0
 8010872:	d100      	bne.n	8010876 <_dtoa_r+0x6ea>
 8010874:	e4bd      	b.n	80101f2 <_dtoa_r+0x66>
 8010876:	9a08      	ldr	r2, [sp, #32]
 8010878:	601a      	str	r2, [r3, #0]
 801087a:	e4ba      	b.n	80101f2 <_dtoa_r+0x66>
 801087c:	080147c8 	.word	0x080147c8
 8010880:	080147a0 	.word	0x080147a0
 8010884:	3ff00000 	.word	0x3ff00000
 8010888:	40240000 	.word	0x40240000
 801088c:	401c0000 	.word	0x401c0000
 8010890:	fcc00000 	.word	0xfcc00000
 8010894:	40140000 	.word	0x40140000
 8010898:	7cc00000 	.word	0x7cc00000
 801089c:	3fe00000 	.word	0x3fe00000
 80108a0:	9b03      	ldr	r3, [sp, #12]
 80108a2:	930e      	str	r3, [sp, #56]	; 0x38
 80108a4:	9b08      	ldr	r3, [sp, #32]
 80108a6:	9308      	str	r3, [sp, #32]
 80108a8:	3b01      	subs	r3, #1
 80108aa:	781a      	ldrb	r2, [r3, #0]
 80108ac:	2a39      	cmp	r2, #57	; 0x39
 80108ae:	d108      	bne.n	80108c2 <_dtoa_r+0x736>
 80108b0:	9a06      	ldr	r2, [sp, #24]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d1f7      	bne.n	80108a6 <_dtoa_r+0x71a>
 80108b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80108b8:	9906      	ldr	r1, [sp, #24]
 80108ba:	3201      	adds	r2, #1
 80108bc:	920e      	str	r2, [sp, #56]	; 0x38
 80108be:	2230      	movs	r2, #48	; 0x30
 80108c0:	700a      	strb	r2, [r1, #0]
 80108c2:	781a      	ldrb	r2, [r3, #0]
 80108c4:	3201      	adds	r2, #1
 80108c6:	701a      	strb	r2, [r3, #0]
 80108c8:	e77c      	b.n	80107c4 <_dtoa_r+0x638>
 80108ca:	2200      	movs	r2, #0
 80108cc:	4ba9      	ldr	r3, [pc, #676]	; (8010b74 <_dtoa_r+0x9e8>)
 80108ce:	f7f0 fecd 	bl	800166c <__aeabi_dmul>
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	0004      	movs	r4, r0
 80108d8:	000d      	movs	r5, r1
 80108da:	f7ef fdb5 	bl	8000448 <__aeabi_dcmpeq>
 80108de:	2800      	cmp	r0, #0
 80108e0:	d100      	bne.n	80108e4 <_dtoa_r+0x758>
 80108e2:	e782      	b.n	80107ea <_dtoa_r+0x65e>
 80108e4:	e7b8      	b.n	8010858 <_dtoa_r+0x6cc>
 80108e6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80108e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80108ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80108ec:	2f00      	cmp	r7, #0
 80108ee:	d012      	beq.n	8010916 <_dtoa_r+0x78a>
 80108f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80108f2:	2a01      	cmp	r2, #1
 80108f4:	dc6e      	bgt.n	80109d4 <_dtoa_r+0x848>
 80108f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80108f8:	2a00      	cmp	r2, #0
 80108fa:	d065      	beq.n	80109c8 <_dtoa_r+0x83c>
 80108fc:	4a9e      	ldr	r2, [pc, #632]	; (8010b78 <_dtoa_r+0x9ec>)
 80108fe:	189b      	adds	r3, r3, r2
 8010900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010902:	2101      	movs	r1, #1
 8010904:	18d2      	adds	r2, r2, r3
 8010906:	920a      	str	r2, [sp, #40]	; 0x28
 8010908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801090a:	9804      	ldr	r0, [sp, #16]
 801090c:	18d3      	adds	r3, r2, r3
 801090e:	930c      	str	r3, [sp, #48]	; 0x30
 8010910:	f7fc f986 	bl	800cc20 <__i2b>
 8010914:	0007      	movs	r7, r0
 8010916:	2c00      	cmp	r4, #0
 8010918:	d00e      	beq.n	8010938 <_dtoa_r+0x7ac>
 801091a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801091c:	2b00      	cmp	r3, #0
 801091e:	dd0b      	ble.n	8010938 <_dtoa_r+0x7ac>
 8010920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010922:	0023      	movs	r3, r4
 8010924:	4294      	cmp	r4, r2
 8010926:	dd00      	ble.n	801092a <_dtoa_r+0x79e>
 8010928:	0013      	movs	r3, r2
 801092a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801092c:	1ae4      	subs	r4, r4, r3
 801092e:	1ad2      	subs	r2, r2, r3
 8010930:	920a      	str	r2, [sp, #40]	; 0x28
 8010932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	930c      	str	r3, [sp, #48]	; 0x30
 8010938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801093a:	2b00      	cmp	r3, #0
 801093c:	d01e      	beq.n	801097c <_dtoa_r+0x7f0>
 801093e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010940:	2b00      	cmp	r3, #0
 8010942:	d05c      	beq.n	80109fe <_dtoa_r+0x872>
 8010944:	2d00      	cmp	r5, #0
 8010946:	dd10      	ble.n	801096a <_dtoa_r+0x7de>
 8010948:	0039      	movs	r1, r7
 801094a:	002a      	movs	r2, r5
 801094c:	9804      	ldr	r0, [sp, #16]
 801094e:	f7fc fa2f 	bl	800cdb0 <__pow5mult>
 8010952:	9a05      	ldr	r2, [sp, #20]
 8010954:	0001      	movs	r1, r0
 8010956:	0007      	movs	r7, r0
 8010958:	9804      	ldr	r0, [sp, #16]
 801095a:	f7fc f979 	bl	800cc50 <__multiply>
 801095e:	0006      	movs	r6, r0
 8010960:	9905      	ldr	r1, [sp, #20]
 8010962:	9804      	ldr	r0, [sp, #16]
 8010964:	f7fc f87a 	bl	800ca5c <_Bfree>
 8010968:	9605      	str	r6, [sp, #20]
 801096a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801096c:	1b5a      	subs	r2, r3, r5
 801096e:	42ab      	cmp	r3, r5
 8010970:	d004      	beq.n	801097c <_dtoa_r+0x7f0>
 8010972:	9905      	ldr	r1, [sp, #20]
 8010974:	9804      	ldr	r0, [sp, #16]
 8010976:	f7fc fa1b 	bl	800cdb0 <__pow5mult>
 801097a:	9005      	str	r0, [sp, #20]
 801097c:	2101      	movs	r1, #1
 801097e:	9804      	ldr	r0, [sp, #16]
 8010980:	f7fc f94e 	bl	800cc20 <__i2b>
 8010984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010986:	0006      	movs	r6, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	dd3a      	ble.n	8010a02 <_dtoa_r+0x876>
 801098c:	001a      	movs	r2, r3
 801098e:	0001      	movs	r1, r0
 8010990:	9804      	ldr	r0, [sp, #16]
 8010992:	f7fc fa0d 	bl	800cdb0 <__pow5mult>
 8010996:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010998:	0006      	movs	r6, r0
 801099a:	2500      	movs	r5, #0
 801099c:	2b01      	cmp	r3, #1
 801099e:	dc38      	bgt.n	8010a12 <_dtoa_r+0x886>
 80109a0:	2500      	movs	r5, #0
 80109a2:	9b08      	ldr	r3, [sp, #32]
 80109a4:	42ab      	cmp	r3, r5
 80109a6:	d130      	bne.n	8010a0a <_dtoa_r+0x87e>
 80109a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109aa:	031b      	lsls	r3, r3, #12
 80109ac:	42ab      	cmp	r3, r5
 80109ae:	d12c      	bne.n	8010a0a <_dtoa_r+0x87e>
 80109b0:	4b72      	ldr	r3, [pc, #456]	; (8010b7c <_dtoa_r+0x9f0>)
 80109b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109b4:	4213      	tst	r3, r2
 80109b6:	d028      	beq.n	8010a0a <_dtoa_r+0x87e>
 80109b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ba:	3501      	adds	r5, #1
 80109bc:	3301      	adds	r3, #1
 80109be:	930a      	str	r3, [sp, #40]	; 0x28
 80109c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80109c2:	3301      	adds	r3, #1
 80109c4:	930c      	str	r3, [sp, #48]	; 0x30
 80109c6:	e020      	b.n	8010a0a <_dtoa_r+0x87e>
 80109c8:	2336      	movs	r3, #54	; 0x36
 80109ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80109cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80109ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80109d0:	1a9b      	subs	r3, r3, r2
 80109d2:	e795      	b.n	8010900 <_dtoa_r+0x774>
 80109d4:	9b07      	ldr	r3, [sp, #28]
 80109d6:	1e5d      	subs	r5, r3, #1
 80109d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109da:	42ab      	cmp	r3, r5
 80109dc:	db07      	blt.n	80109ee <_dtoa_r+0x862>
 80109de:	1b5d      	subs	r5, r3, r5
 80109e0:	9b07      	ldr	r3, [sp, #28]
 80109e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	da8b      	bge.n	8010900 <_dtoa_r+0x774>
 80109e8:	1ae4      	subs	r4, r4, r3
 80109ea:	2300      	movs	r3, #0
 80109ec:	e788      	b.n	8010900 <_dtoa_r+0x774>
 80109ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80109f2:	1aeb      	subs	r3, r5, r3
 80109f4:	18d3      	adds	r3, r2, r3
 80109f6:	950d      	str	r5, [sp, #52]	; 0x34
 80109f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80109fa:	2500      	movs	r5, #0
 80109fc:	e7f0      	b.n	80109e0 <_dtoa_r+0x854>
 80109fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010a00:	e7b7      	b.n	8010972 <_dtoa_r+0x7e6>
 8010a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010a04:	2500      	movs	r5, #0
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	ddca      	ble.n	80109a0 <_dtoa_r+0x814>
 8010a0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a0c:	2001      	movs	r0, #1
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d008      	beq.n	8010a24 <_dtoa_r+0x898>
 8010a12:	6933      	ldr	r3, [r6, #16]
 8010a14:	3303      	adds	r3, #3
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	18f3      	adds	r3, r6, r3
 8010a1a:	6858      	ldr	r0, [r3, #4]
 8010a1c:	f7fc f8b8 	bl	800cb90 <__hi0bits>
 8010a20:	2320      	movs	r3, #32
 8010a22:	1a18      	subs	r0, r3, r0
 8010a24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a26:	1818      	adds	r0, r3, r0
 8010a28:	0002      	movs	r2, r0
 8010a2a:	231f      	movs	r3, #31
 8010a2c:	401a      	ands	r2, r3
 8010a2e:	4218      	tst	r0, r3
 8010a30:	d047      	beq.n	8010ac2 <_dtoa_r+0x936>
 8010a32:	3301      	adds	r3, #1
 8010a34:	1a9b      	subs	r3, r3, r2
 8010a36:	2b04      	cmp	r3, #4
 8010a38:	dd3f      	ble.n	8010aba <_dtoa_r+0x92e>
 8010a3a:	231c      	movs	r3, #28
 8010a3c:	1a9b      	subs	r3, r3, r2
 8010a3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a40:	18e4      	adds	r4, r4, r3
 8010a42:	18d2      	adds	r2, r2, r3
 8010a44:	920a      	str	r2, [sp, #40]	; 0x28
 8010a46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010a48:	18d3      	adds	r3, r2, r3
 8010a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8010a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	dd05      	ble.n	8010a5e <_dtoa_r+0x8d2>
 8010a52:	001a      	movs	r2, r3
 8010a54:	9905      	ldr	r1, [sp, #20]
 8010a56:	9804      	ldr	r0, [sp, #16]
 8010a58:	f7fc f9ec 	bl	800ce34 <__lshift>
 8010a5c:	9005      	str	r0, [sp, #20]
 8010a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	dd05      	ble.n	8010a70 <_dtoa_r+0x8e4>
 8010a64:	0031      	movs	r1, r6
 8010a66:	001a      	movs	r2, r3
 8010a68:	9804      	ldr	r0, [sp, #16]
 8010a6a:	f7fc f9e3 	bl	800ce34 <__lshift>
 8010a6e:	0006      	movs	r6, r0
 8010a70:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d027      	beq.n	8010ac6 <_dtoa_r+0x93a>
 8010a76:	0031      	movs	r1, r6
 8010a78:	9805      	ldr	r0, [sp, #20]
 8010a7a:	f7fc fa49 	bl	800cf10 <__mcmp>
 8010a7e:	2800      	cmp	r0, #0
 8010a80:	da21      	bge.n	8010ac6 <_dtoa_r+0x93a>
 8010a82:	9b03      	ldr	r3, [sp, #12]
 8010a84:	220a      	movs	r2, #10
 8010a86:	3b01      	subs	r3, #1
 8010a88:	9303      	str	r3, [sp, #12]
 8010a8a:	9905      	ldr	r1, [sp, #20]
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	9804      	ldr	r0, [sp, #16]
 8010a90:	f7fb ffee 	bl	800ca70 <__multadd>
 8010a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a96:	9005      	str	r0, [sp, #20]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d100      	bne.n	8010a9e <_dtoa_r+0x912>
 8010a9c:	e15d      	b.n	8010d5a <_dtoa_r+0xbce>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	0039      	movs	r1, r7
 8010aa2:	220a      	movs	r2, #10
 8010aa4:	9804      	ldr	r0, [sp, #16]
 8010aa6:	f7fb ffe3 	bl	800ca70 <__multadd>
 8010aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010aac:	0007      	movs	r7, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	dc49      	bgt.n	8010b46 <_dtoa_r+0x9ba>
 8010ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	dc0e      	bgt.n	8010ad6 <_dtoa_r+0x94a>
 8010ab8:	e045      	b.n	8010b46 <_dtoa_r+0x9ba>
 8010aba:	2b04      	cmp	r3, #4
 8010abc:	d0c6      	beq.n	8010a4c <_dtoa_r+0x8c0>
 8010abe:	331c      	adds	r3, #28
 8010ac0:	e7bd      	b.n	8010a3e <_dtoa_r+0x8b2>
 8010ac2:	0013      	movs	r3, r2
 8010ac4:	e7fb      	b.n	8010abe <_dtoa_r+0x932>
 8010ac6:	9b07      	ldr	r3, [sp, #28]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dc36      	bgt.n	8010b3a <_dtoa_r+0x9ae>
 8010acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	dd33      	ble.n	8010b3a <_dtoa_r+0x9ae>
 8010ad2:	9b07      	ldr	r3, [sp, #28]
 8010ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d10c      	bne.n	8010af6 <_dtoa_r+0x96a>
 8010adc:	0031      	movs	r1, r6
 8010ade:	2205      	movs	r2, #5
 8010ae0:	9804      	ldr	r0, [sp, #16]
 8010ae2:	f7fb ffc5 	bl	800ca70 <__multadd>
 8010ae6:	0006      	movs	r6, r0
 8010ae8:	0001      	movs	r1, r0
 8010aea:	9805      	ldr	r0, [sp, #20]
 8010aec:	f7fc fa10 	bl	800cf10 <__mcmp>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	dd00      	ble.n	8010af6 <_dtoa_r+0x96a>
 8010af4:	e59f      	b.n	8010636 <_dtoa_r+0x4aa>
 8010af6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010af8:	43db      	mvns	r3, r3
 8010afa:	9303      	str	r3, [sp, #12]
 8010afc:	9b06      	ldr	r3, [sp, #24]
 8010afe:	9308      	str	r3, [sp, #32]
 8010b00:	2500      	movs	r5, #0
 8010b02:	0031      	movs	r1, r6
 8010b04:	9804      	ldr	r0, [sp, #16]
 8010b06:	f7fb ffa9 	bl	800ca5c <_Bfree>
 8010b0a:	2f00      	cmp	r7, #0
 8010b0c:	d100      	bne.n	8010b10 <_dtoa_r+0x984>
 8010b0e:	e6a3      	b.n	8010858 <_dtoa_r+0x6cc>
 8010b10:	2d00      	cmp	r5, #0
 8010b12:	d005      	beq.n	8010b20 <_dtoa_r+0x994>
 8010b14:	42bd      	cmp	r5, r7
 8010b16:	d003      	beq.n	8010b20 <_dtoa_r+0x994>
 8010b18:	0029      	movs	r1, r5
 8010b1a:	9804      	ldr	r0, [sp, #16]
 8010b1c:	f7fb ff9e 	bl	800ca5c <_Bfree>
 8010b20:	0039      	movs	r1, r7
 8010b22:	9804      	ldr	r0, [sp, #16]
 8010b24:	f7fb ff9a 	bl	800ca5c <_Bfree>
 8010b28:	e696      	b.n	8010858 <_dtoa_r+0x6cc>
 8010b2a:	2600      	movs	r6, #0
 8010b2c:	0037      	movs	r7, r6
 8010b2e:	e7e2      	b.n	8010af6 <_dtoa_r+0x96a>
 8010b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b32:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8010b34:	9303      	str	r3, [sp, #12]
 8010b36:	0037      	movs	r7, r6
 8010b38:	e57d      	b.n	8010636 <_dtoa_r+0x4aa>
 8010b3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d100      	bne.n	8010b42 <_dtoa_r+0x9b6>
 8010b40:	e0c3      	b.n	8010cca <_dtoa_r+0xb3e>
 8010b42:	9b07      	ldr	r3, [sp, #28]
 8010b44:	930b      	str	r3, [sp, #44]	; 0x2c
 8010b46:	2c00      	cmp	r4, #0
 8010b48:	dd05      	ble.n	8010b56 <_dtoa_r+0x9ca>
 8010b4a:	0039      	movs	r1, r7
 8010b4c:	0022      	movs	r2, r4
 8010b4e:	9804      	ldr	r0, [sp, #16]
 8010b50:	f7fc f970 	bl	800ce34 <__lshift>
 8010b54:	0007      	movs	r7, r0
 8010b56:	0038      	movs	r0, r7
 8010b58:	2d00      	cmp	r5, #0
 8010b5a:	d024      	beq.n	8010ba6 <_dtoa_r+0xa1a>
 8010b5c:	6879      	ldr	r1, [r7, #4]
 8010b5e:	9804      	ldr	r0, [sp, #16]
 8010b60:	f7fb ff54 	bl	800ca0c <_Balloc>
 8010b64:	1e04      	subs	r4, r0, #0
 8010b66:	d111      	bne.n	8010b8c <_dtoa_r+0xa00>
 8010b68:	0022      	movs	r2, r4
 8010b6a:	4b05      	ldr	r3, [pc, #20]	; (8010b80 <_dtoa_r+0x9f4>)
 8010b6c:	4805      	ldr	r0, [pc, #20]	; (8010b84 <_dtoa_r+0x9f8>)
 8010b6e:	4906      	ldr	r1, [pc, #24]	; (8010b88 <_dtoa_r+0x9fc>)
 8010b70:	e43c      	b.n	80103ec <_dtoa_r+0x260>
 8010b72:	46c0      	nop			; (mov r8, r8)
 8010b74:	40240000 	.word	0x40240000
 8010b78:	00000433 	.word	0x00000433
 8010b7c:	7ff00000 	.word	0x7ff00000
 8010b80:	080146d1 	.word	0x080146d1
 8010b84:	08014961 	.word	0x08014961
 8010b88:	000002ef 	.word	0x000002ef
 8010b8c:	0039      	movs	r1, r7
 8010b8e:	693a      	ldr	r2, [r7, #16]
 8010b90:	310c      	adds	r1, #12
 8010b92:	3202      	adds	r2, #2
 8010b94:	0092      	lsls	r2, r2, #2
 8010b96:	300c      	adds	r0, #12
 8010b98:	f7fb fa9d 	bl	800c0d6 <memcpy>
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	0021      	movs	r1, r4
 8010ba0:	9804      	ldr	r0, [sp, #16]
 8010ba2:	f7fc f947 	bl	800ce34 <__lshift>
 8010ba6:	9b06      	ldr	r3, [sp, #24]
 8010ba8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010baa:	9307      	str	r3, [sp, #28]
 8010bac:	3b01      	subs	r3, #1
 8010bae:	189b      	adds	r3, r3, r2
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	003d      	movs	r5, r7
 8010bb4:	0007      	movs	r7, r0
 8010bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8010bb8:	9b08      	ldr	r3, [sp, #32]
 8010bba:	4013      	ands	r3, r2
 8010bbc:	930d      	str	r3, [sp, #52]	; 0x34
 8010bbe:	0031      	movs	r1, r6
 8010bc0:	9805      	ldr	r0, [sp, #20]
 8010bc2:	f7ff fa53 	bl	801006c <quorem>
 8010bc6:	0029      	movs	r1, r5
 8010bc8:	0004      	movs	r4, r0
 8010bca:	900b      	str	r0, [sp, #44]	; 0x2c
 8010bcc:	9805      	ldr	r0, [sp, #20]
 8010bce:	f7fc f99f 	bl	800cf10 <__mcmp>
 8010bd2:	003a      	movs	r2, r7
 8010bd4:	900c      	str	r0, [sp, #48]	; 0x30
 8010bd6:	0031      	movs	r1, r6
 8010bd8:	9804      	ldr	r0, [sp, #16]
 8010bda:	f7fc f9b5 	bl	800cf48 <__mdiff>
 8010bde:	2201      	movs	r2, #1
 8010be0:	68c3      	ldr	r3, [r0, #12]
 8010be2:	3430      	adds	r4, #48	; 0x30
 8010be4:	9008      	str	r0, [sp, #32]
 8010be6:	920a      	str	r2, [sp, #40]	; 0x28
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d104      	bne.n	8010bf6 <_dtoa_r+0xa6a>
 8010bec:	0001      	movs	r1, r0
 8010bee:	9805      	ldr	r0, [sp, #20]
 8010bf0:	f7fc f98e 	bl	800cf10 <__mcmp>
 8010bf4:	900a      	str	r0, [sp, #40]	; 0x28
 8010bf6:	9908      	ldr	r1, [sp, #32]
 8010bf8:	9804      	ldr	r0, [sp, #16]
 8010bfa:	f7fb ff2f 	bl	800ca5c <_Bfree>
 8010bfe:	9b07      	ldr	r3, [sp, #28]
 8010c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c02:	3301      	adds	r3, #1
 8010c04:	9308      	str	r3, [sp, #32]
 8010c06:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	d109      	bne.n	8010c24 <_dtoa_r+0xa98>
 8010c10:	2c39      	cmp	r4, #57	; 0x39
 8010c12:	d022      	beq.n	8010c5a <_dtoa_r+0xace>
 8010c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	dd01      	ble.n	8010c1e <_dtoa_r+0xa92>
 8010c1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010c1c:	3431      	adds	r4, #49	; 0x31
 8010c1e:	9b07      	ldr	r3, [sp, #28]
 8010c20:	701c      	strb	r4, [r3, #0]
 8010c22:	e76e      	b.n	8010b02 <_dtoa_r+0x976>
 8010c24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	db04      	blt.n	8010c34 <_dtoa_r+0xaa8>
 8010c2a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8010c2c:	4313      	orrs	r3, r2
 8010c2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c30:	4313      	orrs	r3, r2
 8010c32:	d11e      	bne.n	8010c72 <_dtoa_r+0xae6>
 8010c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	ddf1      	ble.n	8010c1e <_dtoa_r+0xa92>
 8010c3a:	9905      	ldr	r1, [sp, #20]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	9804      	ldr	r0, [sp, #16]
 8010c40:	f7fc f8f8 	bl	800ce34 <__lshift>
 8010c44:	0031      	movs	r1, r6
 8010c46:	9005      	str	r0, [sp, #20]
 8010c48:	f7fc f962 	bl	800cf10 <__mcmp>
 8010c4c:	2800      	cmp	r0, #0
 8010c4e:	dc02      	bgt.n	8010c56 <_dtoa_r+0xaca>
 8010c50:	d1e5      	bne.n	8010c1e <_dtoa_r+0xa92>
 8010c52:	07e3      	lsls	r3, r4, #31
 8010c54:	d5e3      	bpl.n	8010c1e <_dtoa_r+0xa92>
 8010c56:	2c39      	cmp	r4, #57	; 0x39
 8010c58:	d1df      	bne.n	8010c1a <_dtoa_r+0xa8e>
 8010c5a:	2339      	movs	r3, #57	; 0x39
 8010c5c:	9a07      	ldr	r2, [sp, #28]
 8010c5e:	7013      	strb	r3, [r2, #0]
 8010c60:	9b08      	ldr	r3, [sp, #32]
 8010c62:	9308      	str	r3, [sp, #32]
 8010c64:	3b01      	subs	r3, #1
 8010c66:	781a      	ldrb	r2, [r3, #0]
 8010c68:	2a39      	cmp	r2, #57	; 0x39
 8010c6a:	d063      	beq.n	8010d34 <_dtoa_r+0xba8>
 8010c6c:	3201      	adds	r2, #1
 8010c6e:	701a      	strb	r2, [r3, #0]
 8010c70:	e747      	b.n	8010b02 <_dtoa_r+0x976>
 8010c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dd03      	ble.n	8010c80 <_dtoa_r+0xaf4>
 8010c78:	2c39      	cmp	r4, #57	; 0x39
 8010c7a:	d0ee      	beq.n	8010c5a <_dtoa_r+0xace>
 8010c7c:	3401      	adds	r4, #1
 8010c7e:	e7ce      	b.n	8010c1e <_dtoa_r+0xa92>
 8010c80:	9b07      	ldr	r3, [sp, #28]
 8010c82:	9a07      	ldr	r2, [sp, #28]
 8010c84:	701c      	strb	r4, [r3, #0]
 8010c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d03e      	beq.n	8010d0a <_dtoa_r+0xb7e>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	220a      	movs	r2, #10
 8010c90:	9905      	ldr	r1, [sp, #20]
 8010c92:	9804      	ldr	r0, [sp, #16]
 8010c94:	f7fb feec 	bl	800ca70 <__multadd>
 8010c98:	2300      	movs	r3, #0
 8010c9a:	9005      	str	r0, [sp, #20]
 8010c9c:	220a      	movs	r2, #10
 8010c9e:	0029      	movs	r1, r5
 8010ca0:	9804      	ldr	r0, [sp, #16]
 8010ca2:	42bd      	cmp	r5, r7
 8010ca4:	d106      	bne.n	8010cb4 <_dtoa_r+0xb28>
 8010ca6:	f7fb fee3 	bl	800ca70 <__multadd>
 8010caa:	0005      	movs	r5, r0
 8010cac:	0007      	movs	r7, r0
 8010cae:	9b08      	ldr	r3, [sp, #32]
 8010cb0:	9307      	str	r3, [sp, #28]
 8010cb2:	e784      	b.n	8010bbe <_dtoa_r+0xa32>
 8010cb4:	f7fb fedc 	bl	800ca70 <__multadd>
 8010cb8:	0039      	movs	r1, r7
 8010cba:	0005      	movs	r5, r0
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	220a      	movs	r2, #10
 8010cc0:	9804      	ldr	r0, [sp, #16]
 8010cc2:	f7fb fed5 	bl	800ca70 <__multadd>
 8010cc6:	0007      	movs	r7, r0
 8010cc8:	e7f1      	b.n	8010cae <_dtoa_r+0xb22>
 8010cca:	9b07      	ldr	r3, [sp, #28]
 8010ccc:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cce:	2500      	movs	r5, #0
 8010cd0:	0031      	movs	r1, r6
 8010cd2:	9805      	ldr	r0, [sp, #20]
 8010cd4:	f7ff f9ca 	bl	801006c <quorem>
 8010cd8:	9b06      	ldr	r3, [sp, #24]
 8010cda:	3030      	adds	r0, #48	; 0x30
 8010cdc:	5558      	strb	r0, [r3, r5]
 8010cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ce0:	3501      	adds	r5, #1
 8010ce2:	0004      	movs	r4, r0
 8010ce4:	42ab      	cmp	r3, r5
 8010ce6:	dd07      	ble.n	8010cf8 <_dtoa_r+0xb6c>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	220a      	movs	r2, #10
 8010cec:	9905      	ldr	r1, [sp, #20]
 8010cee:	9804      	ldr	r0, [sp, #16]
 8010cf0:	f7fb febe 	bl	800ca70 <__multadd>
 8010cf4:	9005      	str	r0, [sp, #20]
 8010cf6:	e7eb      	b.n	8010cd0 <_dtoa_r+0xb44>
 8010cf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	2a00      	cmp	r2, #0
 8010cfe:	dd00      	ble.n	8010d02 <_dtoa_r+0xb76>
 8010d00:	0013      	movs	r3, r2
 8010d02:	2500      	movs	r5, #0
 8010d04:	9a06      	ldr	r2, [sp, #24]
 8010d06:	18d3      	adds	r3, r2, r3
 8010d08:	9308      	str	r3, [sp, #32]
 8010d0a:	9905      	ldr	r1, [sp, #20]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	9804      	ldr	r0, [sp, #16]
 8010d10:	f7fc f890 	bl	800ce34 <__lshift>
 8010d14:	0031      	movs	r1, r6
 8010d16:	9005      	str	r0, [sp, #20]
 8010d18:	f7fc f8fa 	bl	800cf10 <__mcmp>
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	dc9f      	bgt.n	8010c60 <_dtoa_r+0xad4>
 8010d20:	d101      	bne.n	8010d26 <_dtoa_r+0xb9a>
 8010d22:	07e4      	lsls	r4, r4, #31
 8010d24:	d49c      	bmi.n	8010c60 <_dtoa_r+0xad4>
 8010d26:	9b08      	ldr	r3, [sp, #32]
 8010d28:	9308      	str	r3, [sp, #32]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	781a      	ldrb	r2, [r3, #0]
 8010d2e:	2a30      	cmp	r2, #48	; 0x30
 8010d30:	d0fa      	beq.n	8010d28 <_dtoa_r+0xb9c>
 8010d32:	e6e6      	b.n	8010b02 <_dtoa_r+0x976>
 8010d34:	9a06      	ldr	r2, [sp, #24]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d193      	bne.n	8010c62 <_dtoa_r+0xad6>
 8010d3a:	9b03      	ldr	r3, [sp, #12]
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	9303      	str	r3, [sp, #12]
 8010d40:	2331      	movs	r3, #49	; 0x31
 8010d42:	7013      	strb	r3, [r2, #0]
 8010d44:	e6dd      	b.n	8010b02 <_dtoa_r+0x976>
 8010d46:	4b09      	ldr	r3, [pc, #36]	; (8010d6c <_dtoa_r+0xbe0>)
 8010d48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8010d4a:	9306      	str	r3, [sp, #24]
 8010d4c:	4b08      	ldr	r3, [pc, #32]	; (8010d70 <_dtoa_r+0xbe4>)
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	d001      	beq.n	8010d56 <_dtoa_r+0xbca>
 8010d52:	f7ff fa4c 	bl	80101ee <_dtoa_r+0x62>
 8010d56:	f7ff fa4c 	bl	80101f2 <_dtoa_r+0x66>
 8010d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	dcb6      	bgt.n	8010cce <_dtoa_r+0xb42>
 8010d60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8010d62:	2b02      	cmp	r3, #2
 8010d64:	dd00      	ble.n	8010d68 <_dtoa_r+0xbdc>
 8010d66:	e6b6      	b.n	8010ad6 <_dtoa_r+0x94a>
 8010d68:	e7b1      	b.n	8010cce <_dtoa_r+0xb42>
 8010d6a:	46c0      	nop			; (mov r8, r8)
 8010d6c:	08014954 	.word	0x08014954
 8010d70:	0801495c 	.word	0x0801495c

08010d74 <realloc>:
 8010d74:	b510      	push	{r4, lr}
 8010d76:	4b03      	ldr	r3, [pc, #12]	; (8010d84 <realloc+0x10>)
 8010d78:	000a      	movs	r2, r1
 8010d7a:	0001      	movs	r1, r0
 8010d7c:	6818      	ldr	r0, [r3, #0]
 8010d7e:	f000 f803 	bl	8010d88 <_realloc_r>
 8010d82:	bd10      	pop	{r4, pc}
 8010d84:	200006d0 	.word	0x200006d0

08010d88 <_realloc_r>:
 8010d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d8a:	b087      	sub	sp, #28
 8010d8c:	1e0c      	subs	r4, r1, #0
 8010d8e:	9001      	str	r0, [sp, #4]
 8010d90:	9205      	str	r2, [sp, #20]
 8010d92:	d106      	bne.n	8010da2 <_realloc_r+0x1a>
 8010d94:	0011      	movs	r1, r2
 8010d96:	f7f9 fd99 	bl	800a8cc <_malloc_r>
 8010d9a:	0007      	movs	r7, r0
 8010d9c:	0038      	movs	r0, r7
 8010d9e:	b007      	add	sp, #28
 8010da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da2:	9801      	ldr	r0, [sp, #4]
 8010da4:	f7f9 ffa6 	bl	800acf4 <__malloc_lock>
 8010da8:	0023      	movs	r3, r4
 8010daa:	3b08      	subs	r3, #8
 8010dac:	685f      	ldr	r7, [r3, #4]
 8010dae:	9304      	str	r3, [sp, #16]
 8010db0:	9b05      	ldr	r3, [sp, #20]
 8010db2:	330b      	adds	r3, #11
 8010db4:	2b16      	cmp	r3, #22
 8010db6:	d908      	bls.n	8010dca <_realloc_r+0x42>
 8010db8:	2207      	movs	r2, #7
 8010dba:	4393      	bics	r3, r2
 8010dbc:	9300      	str	r3, [sp, #0]
 8010dbe:	d506      	bpl.n	8010dce <_realloc_r+0x46>
 8010dc0:	230c      	movs	r3, #12
 8010dc2:	9a01      	ldr	r2, [sp, #4]
 8010dc4:	2700      	movs	r7, #0
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	e7e8      	b.n	8010d9c <_realloc_r+0x14>
 8010dca:	2310      	movs	r3, #16
 8010dcc:	9300      	str	r3, [sp, #0]
 8010dce:	9b00      	ldr	r3, [sp, #0]
 8010dd0:	9a05      	ldr	r2, [sp, #20]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d3f4      	bcc.n	8010dc0 <_realloc_r+0x38>
 8010dd6:	9b04      	ldr	r3, [sp, #16]
 8010dd8:	003a      	movs	r2, r7
 8010dda:	9302      	str	r3, [sp, #8]
 8010ddc:	2303      	movs	r3, #3
 8010dde:	439a      	bics	r2, r3
 8010de0:	9b00      	ldr	r3, [sp, #0]
 8010de2:	9203      	str	r2, [sp, #12]
 8010de4:	4293      	cmp	r3, r2
 8010de6:	dc00      	bgt.n	8010dea <_realloc_r+0x62>
 8010de8:	e169      	b.n	80110be <_realloc_r+0x336>
 8010dea:	9b04      	ldr	r3, [sp, #16]
 8010dec:	48b8      	ldr	r0, [pc, #736]	; (80110d0 <_realloc_r+0x348>)
 8010dee:	189b      	adds	r3, r3, r2
 8010df0:	6882      	ldr	r2, [r0, #8]
 8010df2:	4694      	mov	ip, r2
 8010df4:	685a      	ldr	r2, [r3, #4]
 8010df6:	459c      	cmp	ip, r3
 8010df8:	d006      	beq.n	8010e08 <_realloc_r+0x80>
 8010dfa:	2501      	movs	r5, #1
 8010dfc:	0011      	movs	r1, r2
 8010dfe:	43a9      	bics	r1, r5
 8010e00:	1859      	adds	r1, r3, r1
 8010e02:	6849      	ldr	r1, [r1, #4]
 8010e04:	4229      	tst	r1, r5
 8010e06:	d144      	bne.n	8010e92 <_realloc_r+0x10a>
 8010e08:	2103      	movs	r1, #3
 8010e0a:	438a      	bics	r2, r1
 8010e0c:	9903      	ldr	r1, [sp, #12]
 8010e0e:	188e      	adds	r6, r1, r2
 8010e10:	9900      	ldr	r1, [sp, #0]
 8010e12:	459c      	cmp	ip, r3
 8010e14:	d117      	bne.n	8010e46 <_realloc_r+0xbe>
 8010e16:	3110      	adds	r1, #16
 8010e18:	42b1      	cmp	r1, r6
 8010e1a:	dc3c      	bgt.n	8010e96 <_realloc_r+0x10e>
 8010e1c:	9a00      	ldr	r2, [sp, #0]
 8010e1e:	2101      	movs	r1, #1
 8010e20:	4694      	mov	ip, r2
 8010e22:	1ab6      	subs	r6, r6, r2
 8010e24:	0022      	movs	r2, r4
 8010e26:	9b04      	ldr	r3, [sp, #16]
 8010e28:	430e      	orrs	r6, r1
 8010e2a:	4463      	add	r3, ip
 8010e2c:	6083      	str	r3, [r0, #8]
 8010e2e:	3a08      	subs	r2, #8
 8010e30:	605e      	str	r6, [r3, #4]
 8010e32:	6853      	ldr	r3, [r2, #4]
 8010e34:	9801      	ldr	r0, [sp, #4]
 8010e36:	400b      	ands	r3, r1
 8010e38:	4661      	mov	r1, ip
 8010e3a:	430b      	orrs	r3, r1
 8010e3c:	6053      	str	r3, [r2, #4]
 8010e3e:	f7f9 ff61 	bl	800ad04 <__malloc_unlock>
 8010e42:	0027      	movs	r7, r4
 8010e44:	e7aa      	b.n	8010d9c <_realloc_r+0x14>
 8010e46:	42b1      	cmp	r1, r6
 8010e48:	dc25      	bgt.n	8010e96 <_realloc_r+0x10e>
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	60da      	str	r2, [r3, #12]
 8010e50:	6093      	str	r3, [r2, #8]
 8010e52:	9b00      	ldr	r3, [sp, #0]
 8010e54:	9a02      	ldr	r2, [sp, #8]
 8010e56:	1af4      	subs	r4, r6, r3
 8010e58:	9b02      	ldr	r3, [sp, #8]
 8010e5a:	1992      	adds	r2, r2, r6
 8010e5c:	6858      	ldr	r0, [r3, #4]
 8010e5e:	2301      	movs	r3, #1
 8010e60:	4018      	ands	r0, r3
 8010e62:	2c0f      	cmp	r4, #15
 8010e64:	d800      	bhi.n	8010e68 <_realloc_r+0xe0>
 8010e66:	e12c      	b.n	80110c2 <_realloc_r+0x33a>
 8010e68:	9d00      	ldr	r5, [sp, #0]
 8010e6a:	9902      	ldr	r1, [sp, #8]
 8010e6c:	4328      	orrs	r0, r5
 8010e6e:	1949      	adds	r1, r1, r5
 8010e70:	9d02      	ldr	r5, [sp, #8]
 8010e72:	431c      	orrs	r4, r3
 8010e74:	6068      	str	r0, [r5, #4]
 8010e76:	604c      	str	r4, [r1, #4]
 8010e78:	6850      	ldr	r0, [r2, #4]
 8010e7a:	3108      	adds	r1, #8
 8010e7c:	4303      	orrs	r3, r0
 8010e7e:	6053      	str	r3, [r2, #4]
 8010e80:	9801      	ldr	r0, [sp, #4]
 8010e82:	f7fb f9a3 	bl	800c1cc <_free_r>
 8010e86:	9801      	ldr	r0, [sp, #4]
 8010e88:	f7f9 ff3c 	bl	800ad04 <__malloc_unlock>
 8010e8c:	9f02      	ldr	r7, [sp, #8]
 8010e8e:	3708      	adds	r7, #8
 8010e90:	e784      	b.n	8010d9c <_realloc_r+0x14>
 8010e92:	2200      	movs	r2, #0
 8010e94:	0013      	movs	r3, r2
 8010e96:	07ff      	lsls	r7, r7, #31
 8010e98:	d500      	bpl.n	8010e9c <_realloc_r+0x114>
 8010e9a:	e0c6      	b.n	801102a <_realloc_r+0x2a2>
 8010e9c:	0021      	movs	r1, r4
 8010e9e:	2003      	movs	r0, #3
 8010ea0:	3908      	subs	r1, #8
 8010ea2:	680d      	ldr	r5, [r1, #0]
 8010ea4:	9904      	ldr	r1, [sp, #16]
 8010ea6:	1b4d      	subs	r5, r1, r5
 8010ea8:	6869      	ldr	r1, [r5, #4]
 8010eaa:	4381      	bics	r1, r0
 8010eac:	9803      	ldr	r0, [sp, #12]
 8010eae:	180f      	adds	r7, r1, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d100      	bne.n	8010eb6 <_realloc_r+0x12e>
 8010eb4:	e084      	b.n	8010fc0 <_realloc_r+0x238>
 8010eb6:	19d6      	adds	r6, r2, r7
 8010eb8:	459c      	cmp	ip, r3
 8010eba:	d148      	bne.n	8010f4e <_realloc_r+0x1c6>
 8010ebc:	9b00      	ldr	r3, [sp, #0]
 8010ebe:	3310      	adds	r3, #16
 8010ec0:	42b3      	cmp	r3, r6
 8010ec2:	dc7d      	bgt.n	8010fc0 <_realloc_r+0x238>
 8010ec4:	68aa      	ldr	r2, [r5, #8]
 8010ec6:	68eb      	ldr	r3, [r5, #12]
 8010ec8:	002f      	movs	r7, r5
 8010eca:	60d3      	str	r3, [r2, #12]
 8010ecc:	609a      	str	r2, [r3, #8]
 8010ece:	0002      	movs	r2, r0
 8010ed0:	3a04      	subs	r2, #4
 8010ed2:	3708      	adds	r7, #8
 8010ed4:	2a24      	cmp	r2, #36	; 0x24
 8010ed6:	d835      	bhi.n	8010f44 <_realloc_r+0x1bc>
 8010ed8:	003b      	movs	r3, r7
 8010eda:	2a13      	cmp	r2, #19
 8010edc:	d908      	bls.n	8010ef0 <_realloc_r+0x168>
 8010ede:	6823      	ldr	r3, [r4, #0]
 8010ee0:	60ab      	str	r3, [r5, #8]
 8010ee2:	6863      	ldr	r3, [r4, #4]
 8010ee4:	60eb      	str	r3, [r5, #12]
 8010ee6:	2a1b      	cmp	r2, #27
 8010ee8:	d81a      	bhi.n	8010f20 <_realloc_r+0x198>
 8010eea:	002b      	movs	r3, r5
 8010eec:	3408      	adds	r4, #8
 8010eee:	3310      	adds	r3, #16
 8010ef0:	6822      	ldr	r2, [r4, #0]
 8010ef2:	601a      	str	r2, [r3, #0]
 8010ef4:	6862      	ldr	r2, [r4, #4]
 8010ef6:	605a      	str	r2, [r3, #4]
 8010ef8:	68a2      	ldr	r2, [r4, #8]
 8010efa:	609a      	str	r2, [r3, #8]
 8010efc:	9b00      	ldr	r3, [sp, #0]
 8010efe:	4a74      	ldr	r2, [pc, #464]	; (80110d0 <_realloc_r+0x348>)
 8010f00:	18eb      	adds	r3, r5, r3
 8010f02:	6093      	str	r3, [r2, #8]
 8010f04:	9a00      	ldr	r2, [sp, #0]
 8010f06:	1ab6      	subs	r6, r6, r2
 8010f08:	2201      	movs	r2, #1
 8010f0a:	4316      	orrs	r6, r2
 8010f0c:	605e      	str	r6, [r3, #4]
 8010f0e:	686b      	ldr	r3, [r5, #4]
 8010f10:	4013      	ands	r3, r2
 8010f12:	9a00      	ldr	r2, [sp, #0]
 8010f14:	4313      	orrs	r3, r2
 8010f16:	606b      	str	r3, [r5, #4]
 8010f18:	9801      	ldr	r0, [sp, #4]
 8010f1a:	f7f9 fef3 	bl	800ad04 <__malloc_unlock>
 8010f1e:	e73d      	b.n	8010d9c <_realloc_r+0x14>
 8010f20:	68a3      	ldr	r3, [r4, #8]
 8010f22:	612b      	str	r3, [r5, #16]
 8010f24:	68e3      	ldr	r3, [r4, #12]
 8010f26:	616b      	str	r3, [r5, #20]
 8010f28:	2a24      	cmp	r2, #36	; 0x24
 8010f2a:	d003      	beq.n	8010f34 <_realloc_r+0x1ac>
 8010f2c:	002b      	movs	r3, r5
 8010f2e:	3410      	adds	r4, #16
 8010f30:	3318      	adds	r3, #24
 8010f32:	e7dd      	b.n	8010ef0 <_realloc_r+0x168>
 8010f34:	6923      	ldr	r3, [r4, #16]
 8010f36:	61ab      	str	r3, [r5, #24]
 8010f38:	002b      	movs	r3, r5
 8010f3a:	6962      	ldr	r2, [r4, #20]
 8010f3c:	3320      	adds	r3, #32
 8010f3e:	61ea      	str	r2, [r5, #28]
 8010f40:	3418      	adds	r4, #24
 8010f42:	e7d5      	b.n	8010ef0 <_realloc_r+0x168>
 8010f44:	0021      	movs	r1, r4
 8010f46:	0038      	movs	r0, r7
 8010f48:	f001 fb2f 	bl	80125aa <memmove>
 8010f4c:	e7d6      	b.n	8010efc <_realloc_r+0x174>
 8010f4e:	9a00      	ldr	r2, [sp, #0]
 8010f50:	42b2      	cmp	r2, r6
 8010f52:	dc35      	bgt.n	8010fc0 <_realloc_r+0x238>
 8010f54:	0028      	movs	r0, r5
 8010f56:	68da      	ldr	r2, [r3, #12]
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	3008      	adds	r0, #8
 8010f5c:	60da      	str	r2, [r3, #12]
 8010f5e:	6093      	str	r3, [r2, #8]
 8010f60:	68aa      	ldr	r2, [r5, #8]
 8010f62:	68eb      	ldr	r3, [r5, #12]
 8010f64:	60d3      	str	r3, [r2, #12]
 8010f66:	609a      	str	r2, [r3, #8]
 8010f68:	9a03      	ldr	r2, [sp, #12]
 8010f6a:	3a04      	subs	r2, #4
 8010f6c:	2a24      	cmp	r2, #36	; 0x24
 8010f6e:	d823      	bhi.n	8010fb8 <_realloc_r+0x230>
 8010f70:	2a13      	cmp	r2, #19
 8010f72:	d907      	bls.n	8010f84 <_realloc_r+0x1fc>
 8010f74:	6823      	ldr	r3, [r4, #0]
 8010f76:	60ab      	str	r3, [r5, #8]
 8010f78:	6863      	ldr	r3, [r4, #4]
 8010f7a:	60eb      	str	r3, [r5, #12]
 8010f7c:	2a1b      	cmp	r2, #27
 8010f7e:	d809      	bhi.n	8010f94 <_realloc_r+0x20c>
 8010f80:	3408      	adds	r4, #8
 8010f82:	3008      	adds	r0, #8
 8010f84:	6823      	ldr	r3, [r4, #0]
 8010f86:	6003      	str	r3, [r0, #0]
 8010f88:	6863      	ldr	r3, [r4, #4]
 8010f8a:	6043      	str	r3, [r0, #4]
 8010f8c:	68a3      	ldr	r3, [r4, #8]
 8010f8e:	6083      	str	r3, [r0, #8]
 8010f90:	9502      	str	r5, [sp, #8]
 8010f92:	e75e      	b.n	8010e52 <_realloc_r+0xca>
 8010f94:	68a3      	ldr	r3, [r4, #8]
 8010f96:	612b      	str	r3, [r5, #16]
 8010f98:	68e3      	ldr	r3, [r4, #12]
 8010f9a:	616b      	str	r3, [r5, #20]
 8010f9c:	2a24      	cmp	r2, #36	; 0x24
 8010f9e:	d003      	beq.n	8010fa8 <_realloc_r+0x220>
 8010fa0:	0028      	movs	r0, r5
 8010fa2:	3410      	adds	r4, #16
 8010fa4:	3018      	adds	r0, #24
 8010fa6:	e7ed      	b.n	8010f84 <_realloc_r+0x1fc>
 8010fa8:	0028      	movs	r0, r5
 8010faa:	6923      	ldr	r3, [r4, #16]
 8010fac:	3020      	adds	r0, #32
 8010fae:	61ab      	str	r3, [r5, #24]
 8010fb0:	6963      	ldr	r3, [r4, #20]
 8010fb2:	3418      	adds	r4, #24
 8010fb4:	61eb      	str	r3, [r5, #28]
 8010fb6:	e7e5      	b.n	8010f84 <_realloc_r+0x1fc>
 8010fb8:	0021      	movs	r1, r4
 8010fba:	f001 faf6 	bl	80125aa <memmove>
 8010fbe:	e7e7      	b.n	8010f90 <_realloc_r+0x208>
 8010fc0:	9b00      	ldr	r3, [sp, #0]
 8010fc2:	42bb      	cmp	r3, r7
 8010fc4:	dc31      	bgt.n	801102a <_realloc_r+0x2a2>
 8010fc6:	0028      	movs	r0, r5
 8010fc8:	68aa      	ldr	r2, [r5, #8]
 8010fca:	68eb      	ldr	r3, [r5, #12]
 8010fcc:	3008      	adds	r0, #8
 8010fce:	60d3      	str	r3, [r2, #12]
 8010fd0:	609a      	str	r2, [r3, #8]
 8010fd2:	9a03      	ldr	r2, [sp, #12]
 8010fd4:	3a04      	subs	r2, #4
 8010fd6:	2a24      	cmp	r2, #36	; 0x24
 8010fd8:	d823      	bhi.n	8011022 <_realloc_r+0x29a>
 8010fda:	2a13      	cmp	r2, #19
 8010fdc:	d907      	bls.n	8010fee <_realloc_r+0x266>
 8010fde:	6823      	ldr	r3, [r4, #0]
 8010fe0:	60ab      	str	r3, [r5, #8]
 8010fe2:	6863      	ldr	r3, [r4, #4]
 8010fe4:	60eb      	str	r3, [r5, #12]
 8010fe6:	2a1b      	cmp	r2, #27
 8010fe8:	d809      	bhi.n	8010ffe <_realloc_r+0x276>
 8010fea:	3408      	adds	r4, #8
 8010fec:	3008      	adds	r0, #8
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	6003      	str	r3, [r0, #0]
 8010ff2:	6863      	ldr	r3, [r4, #4]
 8010ff4:	6043      	str	r3, [r0, #4]
 8010ff6:	68a3      	ldr	r3, [r4, #8]
 8010ff8:	6083      	str	r3, [r0, #8]
 8010ffa:	003e      	movs	r6, r7
 8010ffc:	e7c8      	b.n	8010f90 <_realloc_r+0x208>
 8010ffe:	68a3      	ldr	r3, [r4, #8]
 8011000:	612b      	str	r3, [r5, #16]
 8011002:	68e3      	ldr	r3, [r4, #12]
 8011004:	616b      	str	r3, [r5, #20]
 8011006:	2a24      	cmp	r2, #36	; 0x24
 8011008:	d003      	beq.n	8011012 <_realloc_r+0x28a>
 801100a:	0028      	movs	r0, r5
 801100c:	3410      	adds	r4, #16
 801100e:	3018      	adds	r0, #24
 8011010:	e7ed      	b.n	8010fee <_realloc_r+0x266>
 8011012:	0028      	movs	r0, r5
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	3020      	adds	r0, #32
 8011018:	61ab      	str	r3, [r5, #24]
 801101a:	6963      	ldr	r3, [r4, #20]
 801101c:	3418      	adds	r4, #24
 801101e:	61eb      	str	r3, [r5, #28]
 8011020:	e7e5      	b.n	8010fee <_realloc_r+0x266>
 8011022:	0021      	movs	r1, r4
 8011024:	f001 fac1 	bl	80125aa <memmove>
 8011028:	e7e7      	b.n	8010ffa <_realloc_r+0x272>
 801102a:	9905      	ldr	r1, [sp, #20]
 801102c:	9801      	ldr	r0, [sp, #4]
 801102e:	f7f9 fc4d 	bl	800a8cc <_malloc_r>
 8011032:	1e07      	subs	r7, r0, #0
 8011034:	d100      	bne.n	8011038 <_realloc_r+0x2b0>
 8011036:	e76f      	b.n	8010f18 <_realloc_r+0x190>
 8011038:	0023      	movs	r3, r4
 801103a:	2201      	movs	r2, #1
 801103c:	3b08      	subs	r3, #8
 801103e:	685b      	ldr	r3, [r3, #4]
 8011040:	4393      	bics	r3, r2
 8011042:	9a04      	ldr	r2, [sp, #16]
 8011044:	18d3      	adds	r3, r2, r3
 8011046:	0002      	movs	r2, r0
 8011048:	3a08      	subs	r2, #8
 801104a:	4293      	cmp	r3, r2
 801104c:	d105      	bne.n	801105a <_realloc_r+0x2d2>
 801104e:	685e      	ldr	r6, [r3, #4]
 8011050:	2303      	movs	r3, #3
 8011052:	439e      	bics	r6, r3
 8011054:	9b03      	ldr	r3, [sp, #12]
 8011056:	18f6      	adds	r6, r6, r3
 8011058:	e6fb      	b.n	8010e52 <_realloc_r+0xca>
 801105a:	9a03      	ldr	r2, [sp, #12]
 801105c:	3a04      	subs	r2, #4
 801105e:	2a24      	cmp	r2, #36	; 0x24
 8011060:	d829      	bhi.n	80110b6 <_realloc_r+0x32e>
 8011062:	0003      	movs	r3, r0
 8011064:	0021      	movs	r1, r4
 8011066:	2a13      	cmp	r2, #19
 8011068:	d908      	bls.n	801107c <_realloc_r+0x2f4>
 801106a:	6823      	ldr	r3, [r4, #0]
 801106c:	6003      	str	r3, [r0, #0]
 801106e:	6863      	ldr	r3, [r4, #4]
 8011070:	6043      	str	r3, [r0, #4]
 8011072:	2a1b      	cmp	r2, #27
 8011074:	d80d      	bhi.n	8011092 <_realloc_r+0x30a>
 8011076:	0003      	movs	r3, r0
 8011078:	3108      	adds	r1, #8
 801107a:	3308      	adds	r3, #8
 801107c:	680a      	ldr	r2, [r1, #0]
 801107e:	601a      	str	r2, [r3, #0]
 8011080:	684a      	ldr	r2, [r1, #4]
 8011082:	605a      	str	r2, [r3, #4]
 8011084:	688a      	ldr	r2, [r1, #8]
 8011086:	609a      	str	r2, [r3, #8]
 8011088:	0021      	movs	r1, r4
 801108a:	9801      	ldr	r0, [sp, #4]
 801108c:	f7fb f89e 	bl	800c1cc <_free_r>
 8011090:	e742      	b.n	8010f18 <_realloc_r+0x190>
 8011092:	68a3      	ldr	r3, [r4, #8]
 8011094:	6083      	str	r3, [r0, #8]
 8011096:	68e3      	ldr	r3, [r4, #12]
 8011098:	60c3      	str	r3, [r0, #12]
 801109a:	2a24      	cmp	r2, #36	; 0x24
 801109c:	d003      	beq.n	80110a6 <_realloc_r+0x31e>
 801109e:	0003      	movs	r3, r0
 80110a0:	3110      	adds	r1, #16
 80110a2:	3310      	adds	r3, #16
 80110a4:	e7ea      	b.n	801107c <_realloc_r+0x2f4>
 80110a6:	6923      	ldr	r3, [r4, #16]
 80110a8:	3118      	adds	r1, #24
 80110aa:	6103      	str	r3, [r0, #16]
 80110ac:	0003      	movs	r3, r0
 80110ae:	6962      	ldr	r2, [r4, #20]
 80110b0:	3318      	adds	r3, #24
 80110b2:	6142      	str	r2, [r0, #20]
 80110b4:	e7e2      	b.n	801107c <_realloc_r+0x2f4>
 80110b6:	0021      	movs	r1, r4
 80110b8:	f001 fa77 	bl	80125aa <memmove>
 80110bc:	e7e4      	b.n	8011088 <_realloc_r+0x300>
 80110be:	9e03      	ldr	r6, [sp, #12]
 80110c0:	e6c7      	b.n	8010e52 <_realloc_r+0xca>
 80110c2:	9902      	ldr	r1, [sp, #8]
 80110c4:	4306      	orrs	r6, r0
 80110c6:	604e      	str	r6, [r1, #4]
 80110c8:	6851      	ldr	r1, [r2, #4]
 80110ca:	430b      	orrs	r3, r1
 80110cc:	6053      	str	r3, [r2, #4]
 80110ce:	e6da      	b.n	8010e86 <_realloc_r+0xfe>
 80110d0:	20000028 	.word	0x20000028

080110d4 <_strtoll_l.constprop.0>:
 80110d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110d6:	b08d      	sub	sp, #52	; 0x34
 80110d8:	9203      	str	r2, [sp, #12]
 80110da:	4a53      	ldr	r2, [pc, #332]	; (8011228 <_strtoll_l.constprop.0+0x154>)
 80110dc:	001e      	movs	r6, r3
 80110de:	9102      	str	r1, [sp, #8]
 80110e0:	000b      	movs	r3, r1
 80110e2:	4694      	mov	ip, r2
 80110e4:	2108      	movs	r1, #8
 80110e6:	900a      	str	r0, [sp, #40]	; 0x28
 80110e8:	001a      	movs	r2, r3
 80110ea:	4660      	mov	r0, ip
 80110ec:	7814      	ldrb	r4, [r2, #0]
 80110ee:	3301      	adds	r3, #1
 80110f0:	5d00      	ldrb	r0, [r0, r4]
 80110f2:	001d      	movs	r5, r3
 80110f4:	0007      	movs	r7, r0
 80110f6:	400f      	ands	r7, r1
 80110f8:	4208      	tst	r0, r1
 80110fa:	d1f5      	bne.n	80110e8 <_strtoll_l.constprop.0+0x14>
 80110fc:	2c2d      	cmp	r4, #45	; 0x2d
 80110fe:	d153      	bne.n	80111a8 <_strtoll_l.constprop.0+0xd4>
 8011100:	781c      	ldrb	r4, [r3, #0]
 8011102:	2301      	movs	r3, #1
 8011104:	1c95      	adds	r5, r2, #2
 8011106:	9301      	str	r3, [sp, #4]
 8011108:	2e00      	cmp	r6, #0
 801110a:	d100      	bne.n	801110e <_strtoll_l.constprop.0+0x3a>
 801110c:	e086      	b.n	801121c <_strtoll_l.constprop.0+0x148>
 801110e:	2e10      	cmp	r6, #16
 8011110:	d10a      	bne.n	8011128 <_strtoll_l.constprop.0+0x54>
 8011112:	2c30      	cmp	r4, #48	; 0x30
 8011114:	d108      	bne.n	8011128 <_strtoll_l.constprop.0+0x54>
 8011116:	2220      	movs	r2, #32
 8011118:	782b      	ldrb	r3, [r5, #0]
 801111a:	4393      	bics	r3, r2
 801111c:	2b58      	cmp	r3, #88	; 0x58
 801111e:	d000      	beq.n	8011122 <_strtoll_l.constprop.0+0x4e>
 8011120:	e076      	b.n	8011210 <_strtoll_l.constprop.0+0x13c>
 8011122:	2610      	movs	r6, #16
 8011124:	786c      	ldrb	r4, [r5, #1]
 8011126:	3502      	adds	r5, #2
 8011128:	2001      	movs	r0, #1
 801112a:	2300      	movs	r3, #0
 801112c:	493f      	ldr	r1, [pc, #252]	; (801122c <_strtoll_l.constprop.0+0x158>)
 801112e:	9a01      	ldr	r2, [sp, #4]
 8011130:	4240      	negs	r0, r0
 8011132:	1812      	adds	r2, r2, r0
 8011134:	414b      	adcs	r3, r1
 8011136:	9204      	str	r2, [sp, #16]
 8011138:	9305      	str	r3, [sp, #20]
 801113a:	9804      	ldr	r0, [sp, #16]
 801113c:	9905      	ldr	r1, [sp, #20]
 801113e:	17f3      	asrs	r3, r6, #31
 8011140:	0032      	movs	r2, r6
 8011142:	930b      	str	r3, [sp, #44]	; 0x2c
 8011144:	f7ef f9ae 	bl	80004a4 <__aeabi_uldivmod>
 8011148:	2300      	movs	r3, #0
 801114a:	000f      	movs	r7, r1
 801114c:	9008      	str	r0, [sp, #32]
 801114e:	2100      	movs	r1, #0
 8011150:	2000      	movs	r0, #0
 8011152:	9209      	str	r2, [sp, #36]	; 0x24
 8011154:	0022      	movs	r2, r4
 8011156:	3a30      	subs	r2, #48	; 0x30
 8011158:	2a09      	cmp	r2, #9
 801115a:	d82b      	bhi.n	80111b4 <_strtoll_l.constprop.0+0xe0>
 801115c:	0014      	movs	r4, r2
 801115e:	42a6      	cmp	r6, r4
 8011160:	dd37      	ble.n	80111d2 <_strtoll_l.constprop.0+0xfe>
 8011162:	1c5a      	adds	r2, r3, #1
 8011164:	d01d      	beq.n	80111a2 <_strtoll_l.constprop.0+0xce>
 8011166:	42b9      	cmp	r1, r7
 8011168:	d830      	bhi.n	80111cc <_strtoll_l.constprop.0+0xf8>
 801116a:	d102      	bne.n	8011172 <_strtoll_l.constprop.0+0x9e>
 801116c:	9b08      	ldr	r3, [sp, #32]
 801116e:	4298      	cmp	r0, r3
 8011170:	d82c      	bhi.n	80111cc <_strtoll_l.constprop.0+0xf8>
 8011172:	9b08      	ldr	r3, [sp, #32]
 8011174:	4283      	cmp	r3, r0
 8011176:	d106      	bne.n	8011186 <_strtoll_l.constprop.0+0xb2>
 8011178:	428f      	cmp	r7, r1
 801117a:	d104      	bne.n	8011186 <_strtoll_l.constprop.0+0xb2>
 801117c:	2301      	movs	r3, #1
 801117e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011180:	425b      	negs	r3, r3
 8011182:	42a2      	cmp	r2, r4
 8011184:	db0d      	blt.n	80111a2 <_strtoll_l.constprop.0+0xce>
 8011186:	000b      	movs	r3, r1
 8011188:	0002      	movs	r2, r0
 801118a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801118c:	0030      	movs	r0, r6
 801118e:	f7ef f9a9 	bl	80004e4 <__aeabi_lmul>
 8011192:	17e3      	asrs	r3, r4, #31
 8011194:	9406      	str	r4, [sp, #24]
 8011196:	9307      	str	r3, [sp, #28]
 8011198:	9b06      	ldr	r3, [sp, #24]
 801119a:	9c07      	ldr	r4, [sp, #28]
 801119c:	18c0      	adds	r0, r0, r3
 801119e:	4161      	adcs	r1, r4
 80111a0:	2301      	movs	r3, #1
 80111a2:	782c      	ldrb	r4, [r5, #0]
 80111a4:	3501      	adds	r5, #1
 80111a6:	e7d5      	b.n	8011154 <_strtoll_l.constprop.0+0x80>
 80111a8:	9701      	str	r7, [sp, #4]
 80111aa:	2c2b      	cmp	r4, #43	; 0x2b
 80111ac:	d1ac      	bne.n	8011108 <_strtoll_l.constprop.0+0x34>
 80111ae:	781c      	ldrb	r4, [r3, #0]
 80111b0:	1c95      	adds	r5, r2, #2
 80111b2:	e7a9      	b.n	8011108 <_strtoll_l.constprop.0+0x34>
 80111b4:	0022      	movs	r2, r4
 80111b6:	3a41      	subs	r2, #65	; 0x41
 80111b8:	2a19      	cmp	r2, #25
 80111ba:	d801      	bhi.n	80111c0 <_strtoll_l.constprop.0+0xec>
 80111bc:	3c37      	subs	r4, #55	; 0x37
 80111be:	e7ce      	b.n	801115e <_strtoll_l.constprop.0+0x8a>
 80111c0:	0022      	movs	r2, r4
 80111c2:	3a61      	subs	r2, #97	; 0x61
 80111c4:	2a19      	cmp	r2, #25
 80111c6:	d804      	bhi.n	80111d2 <_strtoll_l.constprop.0+0xfe>
 80111c8:	3c57      	subs	r4, #87	; 0x57
 80111ca:	e7c8      	b.n	801115e <_strtoll_l.constprop.0+0x8a>
 80111cc:	2301      	movs	r3, #1
 80111ce:	425b      	negs	r3, r3
 80111d0:	e7e7      	b.n	80111a2 <_strtoll_l.constprop.0+0xce>
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	d109      	bne.n	80111ea <_strtoll_l.constprop.0+0x116>
 80111d6:	9804      	ldr	r0, [sp, #16]
 80111d8:	9905      	ldr	r1, [sp, #20]
 80111da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111dc:	3323      	adds	r3, #35	; 0x23
 80111de:	6013      	str	r3, [r2, #0]
 80111e0:	9b03      	ldr	r3, [sp, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d10e      	bne.n	8011204 <_strtoll_l.constprop.0+0x130>
 80111e6:	b00d      	add	sp, #52	; 0x34
 80111e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ea:	9a01      	ldr	r2, [sp, #4]
 80111ec:	2a00      	cmp	r2, #0
 80111ee:	d004      	beq.n	80111fa <_strtoll_l.constprop.0+0x126>
 80111f0:	0006      	movs	r6, r0
 80111f2:	000f      	movs	r7, r1
 80111f4:	2100      	movs	r1, #0
 80111f6:	4270      	negs	r0, r6
 80111f8:	41b9      	sbcs	r1, r7
 80111fa:	9a03      	ldr	r2, [sp, #12]
 80111fc:	2a00      	cmp	r2, #0
 80111fe:	d0f2      	beq.n	80111e6 <_strtoll_l.constprop.0+0x112>
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <_strtoll_l.constprop.0+0x134>
 8011204:	1e6b      	subs	r3, r5, #1
 8011206:	9302      	str	r3, [sp, #8]
 8011208:	9b03      	ldr	r3, [sp, #12]
 801120a:	9a02      	ldr	r2, [sp, #8]
 801120c:	601a      	str	r2, [r3, #0]
 801120e:	e7ea      	b.n	80111e6 <_strtoll_l.constprop.0+0x112>
 8011210:	2430      	movs	r4, #48	; 0x30
 8011212:	2e00      	cmp	r6, #0
 8011214:	d000      	beq.n	8011218 <_strtoll_l.constprop.0+0x144>
 8011216:	e787      	b.n	8011128 <_strtoll_l.constprop.0+0x54>
 8011218:	3608      	adds	r6, #8
 801121a:	e785      	b.n	8011128 <_strtoll_l.constprop.0+0x54>
 801121c:	2c30      	cmp	r4, #48	; 0x30
 801121e:	d100      	bne.n	8011222 <_strtoll_l.constprop.0+0x14e>
 8011220:	e779      	b.n	8011116 <_strtoll_l.constprop.0+0x42>
 8011222:	260a      	movs	r6, #10
 8011224:	e780      	b.n	8011128 <_strtoll_l.constprop.0+0x54>
 8011226:	46c0      	nop			; (mov r8, r8)
 8011228:	080145c9 	.word	0x080145c9
 801122c:	7fffffff 	.word	0x7fffffff

08011230 <_strtoll_r>:
 8011230:	b510      	push	{r4, lr}
 8011232:	f7ff ff4f 	bl	80110d4 <_strtoll_l.constprop.0>
 8011236:	bd10      	pop	{r4, pc}

08011238 <_strtoull_l.constprop.0>:
 8011238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801123a:	b08b      	sub	sp, #44	; 0x2c
 801123c:	9202      	str	r2, [sp, #8]
 801123e:	4a54      	ldr	r2, [pc, #336]	; (8011390 <_strtoull_l.constprop.0+0x158>)
 8011240:	001e      	movs	r6, r3
 8011242:	9101      	str	r1, [sp, #4]
 8011244:	000b      	movs	r3, r1
 8011246:	4694      	mov	ip, r2
 8011248:	2108      	movs	r1, #8
 801124a:	9009      	str	r0, [sp, #36]	; 0x24
 801124c:	001a      	movs	r2, r3
 801124e:	4660      	mov	r0, ip
 8011250:	7814      	ldrb	r4, [r2, #0]
 8011252:	3301      	adds	r3, #1
 8011254:	5d00      	ldrb	r0, [r0, r4]
 8011256:	001d      	movs	r5, r3
 8011258:	0007      	movs	r7, r0
 801125a:	400f      	ands	r7, r1
 801125c:	4208      	tst	r0, r1
 801125e:	d1f5      	bne.n	801124c <_strtoull_l.constprop.0+0x14>
 8011260:	2c2d      	cmp	r4, #45	; 0x2d
 8011262:	d154      	bne.n	801130e <_strtoull_l.constprop.0+0xd6>
 8011264:	781c      	ldrb	r4, [r3, #0]
 8011266:	2301      	movs	r3, #1
 8011268:	1c95      	adds	r5, r2, #2
 801126a:	9306      	str	r3, [sp, #24]
 801126c:	2e00      	cmp	r6, #0
 801126e:	d100      	bne.n	8011272 <_strtoull_l.constprop.0+0x3a>
 8011270:	e088      	b.n	8011384 <_strtoull_l.constprop.0+0x14c>
 8011272:	2e10      	cmp	r6, #16
 8011274:	d10a      	bne.n	801128c <_strtoull_l.constprop.0+0x54>
 8011276:	2c30      	cmp	r4, #48	; 0x30
 8011278:	d108      	bne.n	801128c <_strtoull_l.constprop.0+0x54>
 801127a:	2220      	movs	r2, #32
 801127c:	782b      	ldrb	r3, [r5, #0]
 801127e:	4393      	bics	r3, r2
 8011280:	2b58      	cmp	r3, #88	; 0x58
 8011282:	d000      	beq.n	8011286 <_strtoull_l.constprop.0+0x4e>
 8011284:	e078      	b.n	8011378 <_strtoull_l.constprop.0+0x140>
 8011286:	2610      	movs	r6, #16
 8011288:	786c      	ldrb	r4, [r5, #1]
 801128a:	3502      	adds	r5, #2
 801128c:	17f7      	asrs	r7, r6, #31
 801128e:	0032      	movs	r2, r6
 8011290:	003b      	movs	r3, r7
 8011292:	2001      	movs	r0, #1
 8011294:	4240      	negs	r0, r0
 8011296:	17c1      	asrs	r1, r0, #31
 8011298:	f7ef f904 	bl	80004a4 <__aeabi_uldivmod>
 801129c:	0032      	movs	r2, r6
 801129e:	9007      	str	r0, [sp, #28]
 80112a0:	9103      	str	r1, [sp, #12]
 80112a2:	003b      	movs	r3, r7
 80112a4:	2001      	movs	r0, #1
 80112a6:	4240      	negs	r0, r0
 80112a8:	17c1      	asrs	r1, r0, #31
 80112aa:	f7ef f8fb 	bl	80004a4 <__aeabi_uldivmod>
 80112ae:	2300      	movs	r3, #0
 80112b0:	2000      	movs	r0, #0
 80112b2:	2100      	movs	r1, #0
 80112b4:	9208      	str	r2, [sp, #32]
 80112b6:	0022      	movs	r2, r4
 80112b8:	3a30      	subs	r2, #48	; 0x30
 80112ba:	2a09      	cmp	r2, #9
 80112bc:	d82d      	bhi.n	801131a <_strtoull_l.constprop.0+0xe2>
 80112be:	0014      	movs	r4, r2
 80112c0:	42a6      	cmp	r6, r4
 80112c2:	dd39      	ble.n	8011338 <_strtoull_l.constprop.0+0x100>
 80112c4:	1c5a      	adds	r2, r3, #1
 80112c6:	d01f      	beq.n	8011308 <_strtoull_l.constprop.0+0xd0>
 80112c8:	9b03      	ldr	r3, [sp, #12]
 80112ca:	4299      	cmp	r1, r3
 80112cc:	d831      	bhi.n	8011332 <_strtoull_l.constprop.0+0xfa>
 80112ce:	d102      	bne.n	80112d6 <_strtoull_l.constprop.0+0x9e>
 80112d0:	9b07      	ldr	r3, [sp, #28]
 80112d2:	4298      	cmp	r0, r3
 80112d4:	d82d      	bhi.n	8011332 <_strtoull_l.constprop.0+0xfa>
 80112d6:	9b07      	ldr	r3, [sp, #28]
 80112d8:	4283      	cmp	r3, r0
 80112da:	d107      	bne.n	80112ec <_strtoull_l.constprop.0+0xb4>
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	428b      	cmp	r3, r1
 80112e0:	d104      	bne.n	80112ec <_strtoull_l.constprop.0+0xb4>
 80112e2:	2301      	movs	r3, #1
 80112e4:	9a08      	ldr	r2, [sp, #32]
 80112e6:	425b      	negs	r3, r3
 80112e8:	42a2      	cmp	r2, r4
 80112ea:	db0d      	blt.n	8011308 <_strtoull_l.constprop.0+0xd0>
 80112ec:	000b      	movs	r3, r1
 80112ee:	0002      	movs	r2, r0
 80112f0:	0039      	movs	r1, r7
 80112f2:	0030      	movs	r0, r6
 80112f4:	f7ef f8f6 	bl	80004e4 <__aeabi_lmul>
 80112f8:	17e3      	asrs	r3, r4, #31
 80112fa:	9404      	str	r4, [sp, #16]
 80112fc:	9305      	str	r3, [sp, #20]
 80112fe:	9b04      	ldr	r3, [sp, #16]
 8011300:	9c05      	ldr	r4, [sp, #20]
 8011302:	18c0      	adds	r0, r0, r3
 8011304:	4161      	adcs	r1, r4
 8011306:	2301      	movs	r3, #1
 8011308:	782c      	ldrb	r4, [r5, #0]
 801130a:	3501      	adds	r5, #1
 801130c:	e7d3      	b.n	80112b6 <_strtoull_l.constprop.0+0x7e>
 801130e:	9706      	str	r7, [sp, #24]
 8011310:	2c2b      	cmp	r4, #43	; 0x2b
 8011312:	d1ab      	bne.n	801126c <_strtoull_l.constprop.0+0x34>
 8011314:	781c      	ldrb	r4, [r3, #0]
 8011316:	1c95      	adds	r5, r2, #2
 8011318:	e7a8      	b.n	801126c <_strtoull_l.constprop.0+0x34>
 801131a:	0022      	movs	r2, r4
 801131c:	3a41      	subs	r2, #65	; 0x41
 801131e:	2a19      	cmp	r2, #25
 8011320:	d801      	bhi.n	8011326 <_strtoull_l.constprop.0+0xee>
 8011322:	3c37      	subs	r4, #55	; 0x37
 8011324:	e7cc      	b.n	80112c0 <_strtoull_l.constprop.0+0x88>
 8011326:	0022      	movs	r2, r4
 8011328:	3a61      	subs	r2, #97	; 0x61
 801132a:	2a19      	cmp	r2, #25
 801132c:	d804      	bhi.n	8011338 <_strtoull_l.constprop.0+0x100>
 801132e:	3c57      	subs	r4, #87	; 0x57
 8011330:	e7c6      	b.n	80112c0 <_strtoull_l.constprop.0+0x88>
 8011332:	2301      	movs	r3, #1
 8011334:	425b      	negs	r3, r3
 8011336:	e7e7      	b.n	8011308 <_strtoull_l.constprop.0+0xd0>
 8011338:	1c5a      	adds	r2, r3, #1
 801133a:	d10a      	bne.n	8011352 <_strtoull_l.constprop.0+0x11a>
 801133c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801133e:	3323      	adds	r3, #35	; 0x23
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	9b02      	ldr	r3, [sp, #8]
 8011344:	2001      	movs	r0, #1
 8011346:	4240      	negs	r0, r0
 8011348:	17c1      	asrs	r1, r0, #31
 801134a:	2b00      	cmp	r3, #0
 801134c:	d10e      	bne.n	801136c <_strtoull_l.constprop.0+0x134>
 801134e:	b00b      	add	sp, #44	; 0x2c
 8011350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011352:	9a06      	ldr	r2, [sp, #24]
 8011354:	2a00      	cmp	r2, #0
 8011356:	d004      	beq.n	8011362 <_strtoull_l.constprop.0+0x12a>
 8011358:	0006      	movs	r6, r0
 801135a:	000f      	movs	r7, r1
 801135c:	2100      	movs	r1, #0
 801135e:	4270      	negs	r0, r6
 8011360:	41b9      	sbcs	r1, r7
 8011362:	9a02      	ldr	r2, [sp, #8]
 8011364:	2a00      	cmp	r2, #0
 8011366:	d0f2      	beq.n	801134e <_strtoull_l.constprop.0+0x116>
 8011368:	2b00      	cmp	r3, #0
 801136a:	d001      	beq.n	8011370 <_strtoull_l.constprop.0+0x138>
 801136c:	1e6b      	subs	r3, r5, #1
 801136e:	9301      	str	r3, [sp, #4]
 8011370:	9b02      	ldr	r3, [sp, #8]
 8011372:	9a01      	ldr	r2, [sp, #4]
 8011374:	601a      	str	r2, [r3, #0]
 8011376:	e7ea      	b.n	801134e <_strtoull_l.constprop.0+0x116>
 8011378:	2430      	movs	r4, #48	; 0x30
 801137a:	2e00      	cmp	r6, #0
 801137c:	d000      	beq.n	8011380 <_strtoull_l.constprop.0+0x148>
 801137e:	e785      	b.n	801128c <_strtoull_l.constprop.0+0x54>
 8011380:	3608      	adds	r6, #8
 8011382:	e783      	b.n	801128c <_strtoull_l.constprop.0+0x54>
 8011384:	2c30      	cmp	r4, #48	; 0x30
 8011386:	d100      	bne.n	801138a <_strtoull_l.constprop.0+0x152>
 8011388:	e777      	b.n	801127a <_strtoull_l.constprop.0+0x42>
 801138a:	260a      	movs	r6, #10
 801138c:	e77e      	b.n	801128c <_strtoull_l.constprop.0+0x54>
 801138e:	46c0      	nop			; (mov r8, r8)
 8011390:	080145c9 	.word	0x080145c9

08011394 <_strtoull_r>:
 8011394:	b510      	push	{r4, lr}
 8011396:	f7ff ff4f 	bl	8011238 <_strtoull_l.constprop.0>
 801139a:	bd10      	pop	{r4, pc}

0801139c <_mbrtowc_r>:
 801139c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801139e:	0004      	movs	r4, r0
 80113a0:	0010      	movs	r0, r2
 80113a2:	4a0b      	ldr	r2, [pc, #44]	; (80113d0 <_mbrtowc_r+0x34>)
 80113a4:	9d06      	ldr	r5, [sp, #24]
 80113a6:	32e4      	adds	r2, #228	; 0xe4
 80113a8:	6816      	ldr	r6, [r2, #0]
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d10c      	bne.n	80113c8 <_mbrtowc_r+0x2c>
 80113ae:	2301      	movs	r3, #1
 80113b0:	0001      	movs	r1, r0
 80113b2:	4a08      	ldr	r2, [pc, #32]	; (80113d4 <_mbrtowc_r+0x38>)
 80113b4:	9500      	str	r5, [sp, #0]
 80113b6:	0020      	movs	r0, r4
 80113b8:	47b0      	blx	r6
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	d103      	bne.n	80113c6 <_mbrtowc_r+0x2a>
 80113be:	2300      	movs	r3, #0
 80113c0:	602b      	str	r3, [r5, #0]
 80113c2:	338a      	adds	r3, #138	; 0x8a
 80113c4:	6023      	str	r3, [r4, #0]
 80113c6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80113c8:	0002      	movs	r2, r0
 80113ca:	9500      	str	r5, [sp, #0]
 80113cc:	e7f3      	b.n	80113b6 <_mbrtowc_r+0x1a>
 80113ce:	46c0      	nop			; (mov r8, r8)
 80113d0:	20000444 	.word	0x20000444
 80113d4:	08014953 	.word	0x08014953

080113d8 <iswspace>:
 80113d8:	b510      	push	{r4, lr}
 80113da:	2100      	movs	r1, #0
 80113dc:	f000 f802 	bl	80113e4 <iswspace_l>
 80113e0:	bd10      	pop	{r4, pc}
	...

080113e4 <iswspace_l>:
 80113e4:	0003      	movs	r3, r0
 80113e6:	2000      	movs	r0, #0
 80113e8:	2bff      	cmp	r3, #255	; 0xff
 80113ea:	d803      	bhi.n	80113f4 <iswspace_l+0x10>
 80113ec:	4a02      	ldr	r2, [pc, #8]	; (80113f8 <iswspace_l+0x14>)
 80113ee:	5cd0      	ldrb	r0, [r2, r3]
 80113f0:	2308      	movs	r3, #8
 80113f2:	4018      	ands	r0, r3
 80113f4:	4770      	bx	lr
 80113f6:	46c0      	nop			; (mov r8, r8)
 80113f8:	080145c9 	.word	0x080145c9

080113fc <fiprintf>:
 80113fc:	b40e      	push	{r1, r2, r3}
 80113fe:	b517      	push	{r0, r1, r2, r4, lr}
 8011400:	4c05      	ldr	r4, [pc, #20]	; (8011418 <fiprintf+0x1c>)
 8011402:	ab05      	add	r3, sp, #20
 8011404:	cb04      	ldmia	r3!, {r2}
 8011406:	0001      	movs	r1, r0
 8011408:	6820      	ldr	r0, [r4, #0]
 801140a:	9301      	str	r3, [sp, #4]
 801140c:	f000 f954 	bl	80116b8 <_vfiprintf_r>
 8011410:	bc1e      	pop	{r1, r2, r3, r4}
 8011412:	bc08      	pop	{r3}
 8011414:	b003      	add	sp, #12
 8011416:	4718      	bx	r3
 8011418:	200006d0 	.word	0x200006d0

0801141c <__ssprint_r>:
 801141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801141e:	6813      	ldr	r3, [r2, #0]
 8011420:	b087      	sub	sp, #28
 8011422:	0017      	movs	r7, r2
 8011424:	9303      	str	r3, [sp, #12]
 8011426:	6893      	ldr	r3, [r2, #8]
 8011428:	2200      	movs	r2, #0
 801142a:	000c      	movs	r4, r1
 801142c:	9005      	str	r0, [sp, #20]
 801142e:	9202      	str	r2, [sp, #8]
 8011430:	9201      	str	r2, [sp, #4]
 8011432:	4293      	cmp	r3, r2
 8011434:	d10d      	bne.n	8011452 <__ssprint_r+0x36>
 8011436:	2000      	movs	r0, #0
 8011438:	2300      	movs	r3, #0
 801143a:	607b      	str	r3, [r7, #4]
 801143c:	b007      	add	sp, #28
 801143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011440:	9b03      	ldr	r3, [sp, #12]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	9302      	str	r3, [sp, #8]
 8011446:	9b03      	ldr	r3, [sp, #12]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	9301      	str	r3, [sp, #4]
 801144c:	9b03      	ldr	r3, [sp, #12]
 801144e:	3308      	adds	r3, #8
 8011450:	9303      	str	r3, [sp, #12]
 8011452:	9a01      	ldr	r2, [sp, #4]
 8011454:	68a6      	ldr	r6, [r4, #8]
 8011456:	6823      	ldr	r3, [r4, #0]
 8011458:	2a00      	cmp	r2, #0
 801145a:	d0f1      	beq.n	8011440 <__ssprint_r+0x24>
 801145c:	42b2      	cmp	r2, r6
 801145e:	d32e      	bcc.n	80114be <__ssprint_r+0xa2>
 8011460:	2190      	movs	r1, #144	; 0x90
 8011462:	89a2      	ldrh	r2, [r4, #12]
 8011464:	00c9      	lsls	r1, r1, #3
 8011466:	420a      	tst	r2, r1
 8011468:	d029      	beq.n	80114be <__ssprint_r+0xa2>
 801146a:	2003      	movs	r0, #3
 801146c:	6921      	ldr	r1, [r4, #16]
 801146e:	1a5b      	subs	r3, r3, r1
 8011470:	9304      	str	r3, [sp, #16]
 8011472:	6963      	ldr	r3, [r4, #20]
 8011474:	4343      	muls	r3, r0
 8011476:	0fdd      	lsrs	r5, r3, #31
 8011478:	18ed      	adds	r5, r5, r3
 801147a:	9b04      	ldr	r3, [sp, #16]
 801147c:	9801      	ldr	r0, [sp, #4]
 801147e:	3301      	adds	r3, #1
 8011480:	181b      	adds	r3, r3, r0
 8011482:	106d      	asrs	r5, r5, #1
 8011484:	42ab      	cmp	r3, r5
 8011486:	d900      	bls.n	801148a <__ssprint_r+0x6e>
 8011488:	001d      	movs	r5, r3
 801148a:	0552      	lsls	r2, r2, #21
 801148c:	d532      	bpl.n	80114f4 <__ssprint_r+0xd8>
 801148e:	0029      	movs	r1, r5
 8011490:	9805      	ldr	r0, [sp, #20]
 8011492:	f7f9 fa1b 	bl	800a8cc <_malloc_r>
 8011496:	1e06      	subs	r6, r0, #0
 8011498:	d036      	beq.n	8011508 <__ssprint_r+0xec>
 801149a:	9a04      	ldr	r2, [sp, #16]
 801149c:	6921      	ldr	r1, [r4, #16]
 801149e:	f7fa fe1a 	bl	800c0d6 <memcpy>
 80114a2:	89a2      	ldrh	r2, [r4, #12]
 80114a4:	4b1e      	ldr	r3, [pc, #120]	; (8011520 <__ssprint_r+0x104>)
 80114a6:	401a      	ands	r2, r3
 80114a8:	2380      	movs	r3, #128	; 0x80
 80114aa:	4313      	orrs	r3, r2
 80114ac:	81a3      	strh	r3, [r4, #12]
 80114ae:	9b04      	ldr	r3, [sp, #16]
 80114b0:	6126      	str	r6, [r4, #16]
 80114b2:	18f6      	adds	r6, r6, r3
 80114b4:	6026      	str	r6, [r4, #0]
 80114b6:	6165      	str	r5, [r4, #20]
 80114b8:	9e01      	ldr	r6, [sp, #4]
 80114ba:	1aed      	subs	r5, r5, r3
 80114bc:	60a5      	str	r5, [r4, #8]
 80114be:	9b01      	ldr	r3, [sp, #4]
 80114c0:	429e      	cmp	r6, r3
 80114c2:	d900      	bls.n	80114c6 <__ssprint_r+0xaa>
 80114c4:	001e      	movs	r6, r3
 80114c6:	0032      	movs	r2, r6
 80114c8:	9902      	ldr	r1, [sp, #8]
 80114ca:	6820      	ldr	r0, [r4, #0]
 80114cc:	f001 f86d 	bl	80125aa <memmove>
 80114d0:	9a01      	ldr	r2, [sp, #4]
 80114d2:	68a3      	ldr	r3, [r4, #8]
 80114d4:	4694      	mov	ip, r2
 80114d6:	1b9b      	subs	r3, r3, r6
 80114d8:	60a3      	str	r3, [r4, #8]
 80114da:	6823      	ldr	r3, [r4, #0]
 80114dc:	199b      	adds	r3, r3, r6
 80114de:	6023      	str	r3, [r4, #0]
 80114e0:	9b02      	ldr	r3, [sp, #8]
 80114e2:	4463      	add	r3, ip
 80114e4:	9302      	str	r3, [sp, #8]
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	1a9b      	subs	r3, r3, r2
 80114ea:	60bb      	str	r3, [r7, #8]
 80114ec:	d0a3      	beq.n	8011436 <__ssprint_r+0x1a>
 80114ee:	2300      	movs	r3, #0
 80114f0:	9301      	str	r3, [sp, #4]
 80114f2:	e7ae      	b.n	8011452 <__ssprint_r+0x36>
 80114f4:	002a      	movs	r2, r5
 80114f6:	9805      	ldr	r0, [sp, #20]
 80114f8:	f7ff fc46 	bl	8010d88 <_realloc_r>
 80114fc:	1e06      	subs	r6, r0, #0
 80114fe:	d1d6      	bne.n	80114ae <__ssprint_r+0x92>
 8011500:	6921      	ldr	r1, [r4, #16]
 8011502:	9805      	ldr	r0, [sp, #20]
 8011504:	f7fa fe62 	bl	800c1cc <_free_r>
 8011508:	230c      	movs	r3, #12
 801150a:	9a05      	ldr	r2, [sp, #20]
 801150c:	2001      	movs	r0, #1
 801150e:	6013      	str	r3, [r2, #0]
 8011510:	89a2      	ldrh	r2, [r4, #12]
 8011512:	3334      	adds	r3, #52	; 0x34
 8011514:	4313      	orrs	r3, r2
 8011516:	81a3      	strh	r3, [r4, #12]
 8011518:	2300      	movs	r3, #0
 801151a:	4240      	negs	r0, r0
 801151c:	60bb      	str	r3, [r7, #8]
 801151e:	e78b      	b.n	8011438 <__ssprint_r+0x1c>
 8011520:	fffffb7f 	.word	0xfffffb7f

08011524 <_sungetc_r>:
 8011524:	b570      	push	{r4, r5, r6, lr}
 8011526:	0014      	movs	r4, r2
 8011528:	1c4b      	adds	r3, r1, #1
 801152a:	d103      	bne.n	8011534 <_sungetc_r+0x10>
 801152c:	2501      	movs	r5, #1
 801152e:	426d      	negs	r5, r5
 8011530:	0028      	movs	r0, r5
 8011532:	bd70      	pop	{r4, r5, r6, pc}
 8011534:	8993      	ldrh	r3, [r2, #12]
 8011536:	2220      	movs	r2, #32
 8011538:	4393      	bics	r3, r2
 801153a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801153c:	81a3      	strh	r3, [r4, #12]
 801153e:	b2ce      	uxtb	r6, r1
 8011540:	6863      	ldr	r3, [r4, #4]
 8011542:	b2cd      	uxtb	r5, r1
 8011544:	2a00      	cmp	r2, #0
 8011546:	d010      	beq.n	801156a <_sungetc_r+0x46>
 8011548:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801154a:	429a      	cmp	r2, r3
 801154c:	dd07      	ble.n	801155e <_sungetc_r+0x3a>
 801154e:	6823      	ldr	r3, [r4, #0]
 8011550:	3b01      	subs	r3, #1
 8011552:	6023      	str	r3, [r4, #0]
 8011554:	701e      	strb	r6, [r3, #0]
 8011556:	6863      	ldr	r3, [r4, #4]
 8011558:	3301      	adds	r3, #1
 801155a:	6063      	str	r3, [r4, #4]
 801155c:	e7e8      	b.n	8011530 <_sungetc_r+0xc>
 801155e:	0021      	movs	r1, r4
 8011560:	f000 ff1a 	bl	8012398 <__submore>
 8011564:	2800      	cmp	r0, #0
 8011566:	d0f2      	beq.n	801154e <_sungetc_r+0x2a>
 8011568:	e7e0      	b.n	801152c <_sungetc_r+0x8>
 801156a:	6921      	ldr	r1, [r4, #16]
 801156c:	6822      	ldr	r2, [r4, #0]
 801156e:	2900      	cmp	r1, #0
 8011570:	d007      	beq.n	8011582 <_sungetc_r+0x5e>
 8011572:	4291      	cmp	r1, r2
 8011574:	d205      	bcs.n	8011582 <_sungetc_r+0x5e>
 8011576:	1e51      	subs	r1, r2, #1
 8011578:	7808      	ldrb	r0, [r1, #0]
 801157a:	42a8      	cmp	r0, r5
 801157c:	d101      	bne.n	8011582 <_sungetc_r+0x5e>
 801157e:	6021      	str	r1, [r4, #0]
 8011580:	e7ea      	b.n	8011558 <_sungetc_r+0x34>
 8011582:	63e3      	str	r3, [r4, #60]	; 0x3c
 8011584:	0023      	movs	r3, r4
 8011586:	3340      	adds	r3, #64	; 0x40
 8011588:	6323      	str	r3, [r4, #48]	; 0x30
 801158a:	2303      	movs	r3, #3
 801158c:	6363      	str	r3, [r4, #52]	; 0x34
 801158e:	0023      	movs	r3, r4
 8011590:	3342      	adds	r3, #66	; 0x42
 8011592:	63a2      	str	r2, [r4, #56]	; 0x38
 8011594:	701e      	strb	r6, [r3, #0]
 8011596:	6023      	str	r3, [r4, #0]
 8011598:	2301      	movs	r3, #1
 801159a:	e7de      	b.n	801155a <_sungetc_r+0x36>

0801159c <__ssrefill_r>:
 801159c:	b510      	push	{r4, lr}
 801159e:	000c      	movs	r4, r1
 80115a0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80115a2:	2900      	cmp	r1, #0
 80115a4:	d00e      	beq.n	80115c4 <__ssrefill_r+0x28>
 80115a6:	0023      	movs	r3, r4
 80115a8:	3340      	adds	r3, #64	; 0x40
 80115aa:	4299      	cmp	r1, r3
 80115ac:	d001      	beq.n	80115b2 <__ssrefill_r+0x16>
 80115ae:	f7fa fe0d 	bl	800c1cc <_free_r>
 80115b2:	2000      	movs	r0, #0
 80115b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80115b6:	6320      	str	r0, [r4, #48]	; 0x30
 80115b8:	6063      	str	r3, [r4, #4]
 80115ba:	4283      	cmp	r3, r0
 80115bc:	d002      	beq.n	80115c4 <__ssrefill_r+0x28>
 80115be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	bd10      	pop	{r4, pc}
 80115c4:	6923      	ldr	r3, [r4, #16]
 80115c6:	2001      	movs	r0, #1
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	2300      	movs	r3, #0
 80115cc:	89a2      	ldrh	r2, [r4, #12]
 80115ce:	6063      	str	r3, [r4, #4]
 80115d0:	3320      	adds	r3, #32
 80115d2:	4313      	orrs	r3, r2
 80115d4:	81a3      	strh	r3, [r4, #12]
 80115d6:	4240      	negs	r0, r0
 80115d8:	e7f3      	b.n	80115c2 <__ssrefill_r+0x26>

080115da <_sfread_r>:
 80115da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115dc:	0014      	movs	r4, r2
 80115de:	435c      	muls	r4, r3
 80115e0:	b087      	sub	sp, #28
 80115e2:	1e26      	subs	r6, r4, #0
 80115e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115e6:	9005      	str	r0, [sp, #20]
 80115e8:	9101      	str	r1, [sp, #4]
 80115ea:	9202      	str	r2, [sp, #8]
 80115ec:	9303      	str	r3, [sp, #12]
 80115ee:	d11e      	bne.n	801162e <_sfread_r+0x54>
 80115f0:	0020      	movs	r0, r4
 80115f2:	b007      	add	sp, #28
 80115f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115f6:	003a      	movs	r2, r7
 80115f8:	9801      	ldr	r0, [sp, #4]
 80115fa:	f7fa fd6c 	bl	800c0d6 <memcpy>
 80115fe:	682b      	ldr	r3, [r5, #0]
 8011600:	0029      	movs	r1, r5
 8011602:	19db      	adds	r3, r3, r7
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	2300      	movs	r3, #0
 8011608:	606b      	str	r3, [r5, #4]
 801160a:	9b01      	ldr	r3, [sp, #4]
 801160c:	9805      	ldr	r0, [sp, #20]
 801160e:	19db      	adds	r3, r3, r7
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	1bf3      	subs	r3, r6, r7
 8011614:	9304      	str	r3, [sp, #16]
 8011616:	f7ff ffc1 	bl	801159c <__ssrefill_r>
 801161a:	2800      	cmp	r0, #0
 801161c:	d006      	beq.n	801162c <_sfread_r+0x52>
 801161e:	193c      	adds	r4, r7, r4
 8011620:	1ba0      	subs	r0, r4, r6
 8011622:	9902      	ldr	r1, [sp, #8]
 8011624:	f7ee fd8a 	bl	800013c <__udivsi3>
 8011628:	0004      	movs	r4, r0
 801162a:	e7e1      	b.n	80115f0 <_sfread_r+0x16>
 801162c:	9e04      	ldr	r6, [sp, #16]
 801162e:	686f      	ldr	r7, [r5, #4]
 8011630:	6829      	ldr	r1, [r5, #0]
 8011632:	42b7      	cmp	r7, r6
 8011634:	d3df      	bcc.n	80115f6 <_sfread_r+0x1c>
 8011636:	0032      	movs	r2, r6
 8011638:	9801      	ldr	r0, [sp, #4]
 801163a:	f7fa fd4c 	bl	800c0d6 <memcpy>
 801163e:	686b      	ldr	r3, [r5, #4]
 8011640:	9c03      	ldr	r4, [sp, #12]
 8011642:	1b9b      	subs	r3, r3, r6
 8011644:	606b      	str	r3, [r5, #4]
 8011646:	682b      	ldr	r3, [r5, #0]
 8011648:	199b      	adds	r3, r3, r6
 801164a:	602b      	str	r3, [r5, #0]
 801164c:	e7d0      	b.n	80115f0 <_sfread_r+0x16>

0801164e <__sprint_r>:
 801164e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011650:	6893      	ldr	r3, [r2, #8]
 8011652:	b085      	sub	sp, #20
 8011654:	9001      	str	r0, [sp, #4]
 8011656:	000d      	movs	r5, r1
 8011658:	0014      	movs	r4, r2
 801165a:	1e18      	subs	r0, r3, #0
 801165c:	d018      	beq.n	8011690 <__sprint_r+0x42>
 801165e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8011660:	049b      	lsls	r3, r3, #18
 8011662:	d524      	bpl.n	80116ae <__sprint_r+0x60>
 8011664:	6817      	ldr	r7, [r2, #0]
 8011666:	2600      	movs	r6, #0
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	9302      	str	r3, [sp, #8]
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	089b      	lsrs	r3, r3, #2
 8011672:	9303      	str	r3, [sp, #12]
 8011674:	9b03      	ldr	r3, [sp, #12]
 8011676:	42b3      	cmp	r3, r6
 8011678:	dc0e      	bgt.n	8011698 <__sprint_r+0x4a>
 801167a:	2203      	movs	r2, #3
 801167c:	9b00      	ldr	r3, [sp, #0]
 801167e:	68a0      	ldr	r0, [r4, #8]
 8011680:	4393      	bics	r3, r2
 8011682:	1ac0      	subs	r0, r0, r3
 8011684:	60a0      	str	r0, [r4, #8]
 8011686:	3708      	adds	r7, #8
 8011688:	2800      	cmp	r0, #0
 801168a:	d1ec      	bne.n	8011666 <__sprint_r+0x18>
 801168c:	2300      	movs	r3, #0
 801168e:	60a3      	str	r3, [r4, #8]
 8011690:	2300      	movs	r3, #0
 8011692:	6063      	str	r3, [r4, #4]
 8011694:	b005      	add	sp, #20
 8011696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011698:	9902      	ldr	r1, [sp, #8]
 801169a:	00b3      	lsls	r3, r6, #2
 801169c:	58c9      	ldr	r1, [r1, r3]
 801169e:	002a      	movs	r2, r5
 80116a0:	9801      	ldr	r0, [sp, #4]
 80116a2:	f000 ff59 	bl	8012558 <_fputwc_r>
 80116a6:	1c43      	adds	r3, r0, #1
 80116a8:	d0f0      	beq.n	801168c <__sprint_r+0x3e>
 80116aa:	3601      	adds	r6, #1
 80116ac:	e7e2      	b.n	8011674 <__sprint_r+0x26>
 80116ae:	9801      	ldr	r0, [sp, #4]
 80116b0:	f000 fd14 	bl	80120dc <__sfvwrite_r>
 80116b4:	e7ea      	b.n	801168c <__sprint_r+0x3e>
	...

080116b8 <_vfiprintf_r>:
 80116b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ba:	b0c1      	sub	sp, #260	; 0x104
 80116bc:	001c      	movs	r4, r3
 80116be:	001f      	movs	r7, r3
 80116c0:	9006      	str	r0, [sp, #24]
 80116c2:	9103      	str	r1, [sp, #12]
 80116c4:	9207      	str	r2, [sp, #28]
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d004      	beq.n	80116d4 <_vfiprintf_r+0x1c>
 80116ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d101      	bne.n	80116d4 <_vfiprintf_r+0x1c>
 80116d0:	f7fa fb10 	bl	800bcf4 <__sinit>
 80116d4:	9b03      	ldr	r3, [sp, #12]
 80116d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80116d8:	07db      	lsls	r3, r3, #31
 80116da:	d407      	bmi.n	80116ec <_vfiprintf_r+0x34>
 80116dc:	9b03      	ldr	r3, [sp, #12]
 80116de:	899b      	ldrh	r3, [r3, #12]
 80116e0:	059b      	lsls	r3, r3, #22
 80116e2:	d403      	bmi.n	80116ec <_vfiprintf_r+0x34>
 80116e4:	9b03      	ldr	r3, [sp, #12]
 80116e6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80116e8:	f7fa fce8 	bl	800c0bc <__retarget_lock_acquire_recursive>
 80116ec:	9b03      	ldr	r3, [sp, #12]
 80116ee:	220c      	movs	r2, #12
 80116f0:	5e9a      	ldrsh	r2, [r3, r2]
 80116f2:	2380      	movs	r3, #128	; 0x80
 80116f4:	019b      	lsls	r3, r3, #6
 80116f6:	421a      	tst	r2, r3
 80116f8:	d107      	bne.n	801170a <_vfiprintf_r+0x52>
 80116fa:	4313      	orrs	r3, r2
 80116fc:	9a03      	ldr	r2, [sp, #12]
 80116fe:	8193      	strh	r3, [r2, #12]
 8011700:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011702:	4aa3      	ldr	r2, [pc, #652]	; (8011990 <_vfiprintf_r+0x2d8>)
 8011704:	4013      	ands	r3, r2
 8011706:	9a03      	ldr	r2, [sp, #12]
 8011708:	6653      	str	r3, [r2, #100]	; 0x64
 801170a:	9b03      	ldr	r3, [sp, #12]
 801170c:	899b      	ldrh	r3, [r3, #12]
 801170e:	071b      	lsls	r3, r3, #28
 8011710:	d503      	bpl.n	801171a <_vfiprintf_r+0x62>
 8011712:	9b03      	ldr	r3, [sp, #12]
 8011714:	691b      	ldr	r3, [r3, #16]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d118      	bne.n	801174c <_vfiprintf_r+0x94>
 801171a:	9903      	ldr	r1, [sp, #12]
 801171c:	9806      	ldr	r0, [sp, #24]
 801171e:	f000 fe79 	bl	8012414 <__swsetup_r>
 8011722:	2800      	cmp	r0, #0
 8011724:	d012      	beq.n	801174c <_vfiprintf_r+0x94>
 8011726:	9b03      	ldr	r3, [sp, #12]
 8011728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801172a:	07db      	lsls	r3, r3, #31
 801172c:	d505      	bpl.n	801173a <_vfiprintf_r+0x82>
 801172e:	2301      	movs	r3, #1
 8011730:	425b      	negs	r3, r3
 8011732:	9308      	str	r3, [sp, #32]
 8011734:	9808      	ldr	r0, [sp, #32]
 8011736:	b041      	add	sp, #260	; 0x104
 8011738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801173a:	9b03      	ldr	r3, [sp, #12]
 801173c:	899b      	ldrh	r3, [r3, #12]
 801173e:	059b      	lsls	r3, r3, #22
 8011740:	d4f5      	bmi.n	801172e <_vfiprintf_r+0x76>
 8011742:	9b03      	ldr	r3, [sp, #12]
 8011744:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011746:	f7fa fcba 	bl	800c0be <__retarget_lock_release_recursive>
 801174a:	e7f0      	b.n	801172e <_vfiprintf_r+0x76>
 801174c:	221a      	movs	r2, #26
 801174e:	9b03      	ldr	r3, [sp, #12]
 8011750:	899b      	ldrh	r3, [r3, #12]
 8011752:	401a      	ands	r2, r3
 8011754:	2a0a      	cmp	r2, #10
 8011756:	d116      	bne.n	8011786 <_vfiprintf_r+0xce>
 8011758:	9a03      	ldr	r2, [sp, #12]
 801175a:	210e      	movs	r1, #14
 801175c:	5e52      	ldrsh	r2, [r2, r1]
 801175e:	2a00      	cmp	r2, #0
 8011760:	db11      	blt.n	8011786 <_vfiprintf_r+0xce>
 8011762:	9a03      	ldr	r2, [sp, #12]
 8011764:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8011766:	07d2      	lsls	r2, r2, #31
 8011768:	d405      	bmi.n	8011776 <_vfiprintf_r+0xbe>
 801176a:	059b      	lsls	r3, r3, #22
 801176c:	d403      	bmi.n	8011776 <_vfiprintf_r+0xbe>
 801176e:	9b03      	ldr	r3, [sp, #12]
 8011770:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011772:	f7fa fca4 	bl	800c0be <__retarget_lock_release_recursive>
 8011776:	0023      	movs	r3, r4
 8011778:	9a07      	ldr	r2, [sp, #28]
 801177a:	9903      	ldr	r1, [sp, #12]
 801177c:	9806      	ldr	r0, [sp, #24]
 801177e:	f000 fc69 	bl	8012054 <__sbprintf>
 8011782:	9008      	str	r0, [sp, #32]
 8011784:	e7d6      	b.n	8011734 <_vfiprintf_r+0x7c>
 8011786:	2300      	movs	r3, #0
 8011788:	ad17      	add	r5, sp, #92	; 0x5c
 801178a:	9514      	str	r5, [sp, #80]	; 0x50
 801178c:	9316      	str	r3, [sp, #88]	; 0x58
 801178e:	9315      	str	r3, [sp, #84]	; 0x54
 8011790:	930c      	str	r3, [sp, #48]	; 0x30
 8011792:	930d      	str	r3, [sp, #52]	; 0x34
 8011794:	930e      	str	r3, [sp, #56]	; 0x38
 8011796:	930f      	str	r3, [sp, #60]	; 0x3c
 8011798:	9308      	str	r3, [sp, #32]
 801179a:	9c07      	ldr	r4, [sp, #28]
 801179c:	7823      	ldrb	r3, [r4, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d002      	beq.n	80117a8 <_vfiprintf_r+0xf0>
 80117a2:	2b25      	cmp	r3, #37	; 0x25
 80117a4:	d000      	beq.n	80117a8 <_vfiprintf_r+0xf0>
 80117a6:	e08d      	b.n	80118c4 <_vfiprintf_r+0x20c>
 80117a8:	9b07      	ldr	r3, [sp, #28]
 80117aa:	1ae6      	subs	r6, r4, r3
 80117ac:	429c      	cmp	r4, r3
 80117ae:	d016      	beq.n	80117de <_vfiprintf_r+0x126>
 80117b0:	602b      	str	r3, [r5, #0]
 80117b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80117b4:	606e      	str	r6, [r5, #4]
 80117b6:	199b      	adds	r3, r3, r6
 80117b8:	9316      	str	r3, [sp, #88]	; 0x58
 80117ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80117bc:	3508      	adds	r5, #8
 80117be:	3301      	adds	r3, #1
 80117c0:	9315      	str	r3, [sp, #84]	; 0x54
 80117c2:	2b07      	cmp	r3, #7
 80117c4:	dd08      	ble.n	80117d8 <_vfiprintf_r+0x120>
 80117c6:	9903      	ldr	r1, [sp, #12]
 80117c8:	9806      	ldr	r0, [sp, #24]
 80117ca:	aa14      	add	r2, sp, #80	; 0x50
 80117cc:	f7ff ff3f 	bl	801164e <__sprint_r>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d000      	beq.n	80117d6 <_vfiprintf_r+0x11e>
 80117d4:	e3d9      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 80117d6:	ad17      	add	r5, sp, #92	; 0x5c
 80117d8:	9b08      	ldr	r3, [sp, #32]
 80117da:	199b      	adds	r3, r3, r6
 80117dc:	9308      	str	r3, [sp, #32]
 80117de:	7823      	ldrb	r3, [r4, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d101      	bne.n	80117e8 <_vfiprintf_r+0x130>
 80117e4:	f000 fbf6 	bl	8011fd4 <_vfiprintf_r+0x91c>
 80117e8:	2200      	movs	r2, #0
 80117ea:	a912      	add	r1, sp, #72	; 0x48
 80117ec:	70ca      	strb	r2, [r1, #3]
 80117ee:	2101      	movs	r1, #1
 80117f0:	1c63      	adds	r3, r4, #1
 80117f2:	0014      	movs	r4, r2
 80117f4:	4249      	negs	r1, r1
 80117f6:	9105      	str	r1, [sp, #20]
 80117f8:	9209      	str	r2, [sp, #36]	; 0x24
 80117fa:	1c5a      	adds	r2, r3, #1
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	9207      	str	r2, [sp, #28]
 8011800:	0018      	movs	r0, r3
 8011802:	3820      	subs	r0, #32
 8011804:	285a      	cmp	r0, #90	; 0x5a
 8011806:	d900      	bls.n	801180a <_vfiprintf_r+0x152>
 8011808:	e362      	b.n	8011ed0 <_vfiprintf_r+0x818>
 801180a:	f7ee fc8d 	bl	8000128 <__gnu_thumb1_case_uhi>
 801180e:	0078      	.short	0x0078
 8011810:	03610361 	.word	0x03610361
 8011814:	03610081 	.word	0x03610081
 8011818:	03610361 	.word	0x03610361
 801181c:	0361005d 	.word	0x0361005d
 8011820:	00830361 	.word	0x00830361
 8011824:	0361008b 	.word	0x0361008b
 8011828:	008f0089 	.word	0x008f0089
 801182c:	00ad0361 	.word	0x00ad0361
 8011830:	00af00af 	.word	0x00af00af
 8011834:	00af00af 	.word	0x00af00af
 8011838:	00af00af 	.word	0x00af00af
 801183c:	00af00af 	.word	0x00af00af
 8011840:	036100af 	.word	0x036100af
 8011844:	03610361 	.word	0x03610361
 8011848:	03610361 	.word	0x03610361
 801184c:	03610361 	.word	0x03610361
 8011850:	03610361 	.word	0x03610361
 8011854:	00e600da 	.word	0x00e600da
 8011858:	03610361 	.word	0x03610361
 801185c:	03610361 	.word	0x03610361
 8011860:	03610361 	.word	0x03610361
 8011864:	03610361 	.word	0x03610361
 8011868:	03610361 	.word	0x03610361
 801186c:	03610143 	.word	0x03610143
 8011870:	03610361 	.word	0x03610361
 8011874:	03610182 	.word	0x03610182
 8011878:	0361027c 	.word	0x0361027c
 801187c:	02ae0361 	.word	0x02ae0361
 8011880:	03610361 	.word	0x03610361
 8011884:	03610361 	.word	0x03610361
 8011888:	03610361 	.word	0x03610361
 801188c:	03610361 	.word	0x03610361
 8011890:	03610361 	.word	0x03610361
 8011894:	00e800da 	.word	0x00e800da
 8011898:	03610361 	.word	0x03610361
 801189c:	00c30361 	.word	0x00c30361
 80118a0:	00d600e8 	.word	0x00d600e8
 80118a4:	00cf0361 	.word	0x00cf0361
 80118a8:	01260361 	.word	0x01260361
 80118ac:	01740145 	.word	0x01740145
 80118b0:	036100d6 	.word	0x036100d6
 80118b4:	007f0182 	.word	0x007f0182
 80118b8:	0361027e 	.word	0x0361027e
 80118bc:	02cd0361 	.word	0x02cd0361
 80118c0:	007f0361 	.word	0x007f0361
 80118c4:	3401      	adds	r4, #1
 80118c6:	e769      	b.n	801179c <_vfiprintf_r+0xe4>
 80118c8:	9806      	ldr	r0, [sp, #24]
 80118ca:	f7fe facd 	bl	800fe68 <_localeconv_r>
 80118ce:	6843      	ldr	r3, [r0, #4]
 80118d0:	0018      	movs	r0, r3
 80118d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80118d4:	f7ee fc16 	bl	8000104 <strlen>
 80118d8:	900e      	str	r0, [sp, #56]	; 0x38
 80118da:	9806      	ldr	r0, [sp, #24]
 80118dc:	f7fe fac4 	bl	800fe68 <_localeconv_r>
 80118e0:	6883      	ldr	r3, [r0, #8]
 80118e2:	930d      	str	r3, [sp, #52]	; 0x34
 80118e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d010      	beq.n	801190c <_vfiprintf_r+0x254>
 80118ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00d      	beq.n	801190c <_vfiprintf_r+0x254>
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00a      	beq.n	801190c <_vfiprintf_r+0x254>
 80118f6:	2380      	movs	r3, #128	; 0x80
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	431c      	orrs	r4, r3
 80118fc:	e006      	b.n	801190c <_vfiprintf_r+0x254>
 80118fe:	ab12      	add	r3, sp, #72	; 0x48
 8011900:	78da      	ldrb	r2, [r3, #3]
 8011902:	3303      	adds	r3, #3
 8011904:	2a00      	cmp	r2, #0
 8011906:	d101      	bne.n	801190c <_vfiprintf_r+0x254>
 8011908:	3220      	adds	r2, #32
 801190a:	701a      	strb	r2, [r3, #0]
 801190c:	9b07      	ldr	r3, [sp, #28]
 801190e:	e774      	b.n	80117fa <_vfiprintf_r+0x142>
 8011910:	2301      	movs	r3, #1
 8011912:	e7f2      	b.n	80118fa <_vfiprintf_r+0x242>
 8011914:	cf08      	ldmia	r7!, {r3}
 8011916:	9309      	str	r3, [sp, #36]	; 0x24
 8011918:	2b00      	cmp	r3, #0
 801191a:	daf7      	bge.n	801190c <_vfiprintf_r+0x254>
 801191c:	425b      	negs	r3, r3
 801191e:	9309      	str	r3, [sp, #36]	; 0x24
 8011920:	2304      	movs	r3, #4
 8011922:	e7ea      	b.n	80118fa <_vfiprintf_r+0x242>
 8011924:	222b      	movs	r2, #43	; 0x2b
 8011926:	ab12      	add	r3, sp, #72	; 0x48
 8011928:	70da      	strb	r2, [r3, #3]
 801192a:	e7ef      	b.n	801190c <_vfiprintf_r+0x254>
 801192c:	9b07      	ldr	r3, [sp, #28]
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	2b2a      	cmp	r3, #42	; 0x2a
 8011934:	d00f      	beq.n	8011956 <_vfiprintf_r+0x29e>
 8011936:	2100      	movs	r1, #0
 8011938:	9105      	str	r1, [sp, #20]
 801193a:	0019      	movs	r1, r3
 801193c:	3930      	subs	r1, #48	; 0x30
 801193e:	9207      	str	r2, [sp, #28]
 8011940:	2909      	cmp	r1, #9
 8011942:	d900      	bls.n	8011946 <_vfiprintf_r+0x28e>
 8011944:	e75c      	b.n	8011800 <_vfiprintf_r+0x148>
 8011946:	200a      	movs	r0, #10
 8011948:	9b05      	ldr	r3, [sp, #20]
 801194a:	4343      	muls	r3, r0
 801194c:	185b      	adds	r3, r3, r1
 801194e:	9305      	str	r3, [sp, #20]
 8011950:	7813      	ldrb	r3, [r2, #0]
 8011952:	3201      	adds	r2, #1
 8011954:	e7f1      	b.n	801193a <_vfiprintf_r+0x282>
 8011956:	cf08      	ldmia	r7!, {r3}
 8011958:	9305      	str	r3, [sp, #20]
 801195a:	2b00      	cmp	r3, #0
 801195c:	da02      	bge.n	8011964 <_vfiprintf_r+0x2ac>
 801195e:	2301      	movs	r3, #1
 8011960:	425b      	negs	r3, r3
 8011962:	9305      	str	r3, [sp, #20]
 8011964:	9207      	str	r2, [sp, #28]
 8011966:	e7d1      	b.n	801190c <_vfiprintf_r+0x254>
 8011968:	2380      	movs	r3, #128	; 0x80
 801196a:	e7c6      	b.n	80118fa <_vfiprintf_r+0x242>
 801196c:	2100      	movs	r1, #0
 801196e:	9a07      	ldr	r2, [sp, #28]
 8011970:	9109      	str	r1, [sp, #36]	; 0x24
 8011972:	200a      	movs	r0, #10
 8011974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011976:	3b30      	subs	r3, #48	; 0x30
 8011978:	4341      	muls	r1, r0
 801197a:	185b      	adds	r3, r3, r1
 801197c:	9309      	str	r3, [sp, #36]	; 0x24
 801197e:	0013      	movs	r3, r2
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	3201      	adds	r2, #1
 8011984:	0019      	movs	r1, r3
 8011986:	3930      	subs	r1, #48	; 0x30
 8011988:	9207      	str	r2, [sp, #28]
 801198a:	2909      	cmp	r1, #9
 801198c:	d9f1      	bls.n	8011972 <_vfiprintf_r+0x2ba>
 801198e:	e737      	b.n	8011800 <_vfiprintf_r+0x148>
 8011990:	ffffdfff 	.word	0xffffdfff
 8011994:	9b07      	ldr	r3, [sp, #28]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	2b68      	cmp	r3, #104	; 0x68
 801199a:	d105      	bne.n	80119a8 <_vfiprintf_r+0x2f0>
 801199c:	9b07      	ldr	r3, [sp, #28]
 801199e:	3301      	adds	r3, #1
 80119a0:	9307      	str	r3, [sp, #28]
 80119a2:	2380      	movs	r3, #128	; 0x80
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	e7a8      	b.n	80118fa <_vfiprintf_r+0x242>
 80119a8:	2340      	movs	r3, #64	; 0x40
 80119aa:	e7a6      	b.n	80118fa <_vfiprintf_r+0x242>
 80119ac:	9b07      	ldr	r3, [sp, #28]
 80119ae:	781b      	ldrb	r3, [r3, #0]
 80119b0:	2b6c      	cmp	r3, #108	; 0x6c
 80119b2:	d104      	bne.n	80119be <_vfiprintf_r+0x306>
 80119b4:	9b07      	ldr	r3, [sp, #28]
 80119b6:	3301      	adds	r3, #1
 80119b8:	9307      	str	r3, [sp, #28]
 80119ba:	2320      	movs	r3, #32
 80119bc:	e79d      	b.n	80118fa <_vfiprintf_r+0x242>
 80119be:	2310      	movs	r3, #16
 80119c0:	e79b      	b.n	80118fa <_vfiprintf_r+0x242>
 80119c2:	003a      	movs	r2, r7
 80119c4:	ca08      	ldmia	r2!, {r3}
 80119c6:	ae27      	add	r6, sp, #156	; 0x9c
 80119c8:	7033      	strb	r3, [r6, #0]
 80119ca:	2300      	movs	r3, #0
 80119cc:	9204      	str	r2, [sp, #16]
 80119ce:	aa12      	add	r2, sp, #72	; 0x48
 80119d0:	70d3      	strb	r3, [r2, #3]
 80119d2:	2201      	movs	r2, #1
 80119d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80119d6:	9205      	str	r2, [sp, #20]
 80119d8:	e0b0      	b.n	8011b3c <_vfiprintf_r+0x484>
 80119da:	2310      	movs	r3, #16
 80119dc:	431c      	orrs	r4, r3
 80119de:	06a3      	lsls	r3, r4, #26
 80119e0:	d52a      	bpl.n	8011a38 <_vfiprintf_r+0x380>
 80119e2:	2307      	movs	r3, #7
 80119e4:	3707      	adds	r7, #7
 80119e6:	439f      	bics	r7, r3
 80119e8:	0039      	movs	r1, r7
 80119ea:	c90c      	ldmia	r1!, {r2, r3}
 80119ec:	9200      	str	r2, [sp, #0]
 80119ee:	9301      	str	r3, [sp, #4]
 80119f0:	9104      	str	r1, [sp, #16]
 80119f2:	9a01      	ldr	r2, [sp, #4]
 80119f4:	2301      	movs	r3, #1
 80119f6:	2a00      	cmp	r2, #0
 80119f8:	da09      	bge.n	8011a0e <_vfiprintf_r+0x356>
 80119fa:	9e00      	ldr	r6, [sp, #0]
 80119fc:	9f01      	ldr	r7, [sp, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	4271      	negs	r1, r6
 8011a02:	41ba      	sbcs	r2, r7
 8011a04:	9100      	str	r1, [sp, #0]
 8011a06:	9201      	str	r2, [sp, #4]
 8011a08:	212d      	movs	r1, #45	; 0x2d
 8011a0a:	aa12      	add	r2, sp, #72	; 0x48
 8011a0c:	70d1      	strb	r1, [r2, #3]
 8011a0e:	9901      	ldr	r1, [sp, #4]
 8011a10:	9a00      	ldr	r2, [sp, #0]
 8011a12:	430a      	orrs	r2, r1
 8011a14:	9905      	ldr	r1, [sp, #20]
 8011a16:	3101      	adds	r1, #1
 8011a18:	d100      	bne.n	8011a1c <_vfiprintf_r+0x364>
 8011a1a:	e2e9      	b.n	8011ff0 <_vfiprintf_r+0x938>
 8011a1c:	2180      	movs	r1, #128	; 0x80
 8011a1e:	0027      	movs	r7, r4
 8011a20:	438f      	bics	r7, r1
 8011a22:	2a00      	cmp	r2, #0
 8011a24:	d000      	beq.n	8011a28 <_vfiprintf_r+0x370>
 8011a26:	e2e7      	b.n	8011ff8 <_vfiprintf_r+0x940>
 8011a28:	9a05      	ldr	r2, [sp, #20]
 8011a2a:	2a00      	cmp	r2, #0
 8011a2c:	d100      	bne.n	8011a30 <_vfiprintf_r+0x378>
 8011a2e:	e243      	b.n	8011eb8 <_vfiprintf_r+0x800>
 8011a30:	2b01      	cmp	r3, #1
 8011a32:	d000      	beq.n	8011a36 <_vfiprintf_r+0x37e>
 8011a34:	e2e3      	b.n	8011ffe <_vfiprintf_r+0x946>
 8011a36:	e1e7      	b.n	8011e08 <_vfiprintf_r+0x750>
 8011a38:	003a      	movs	r2, r7
 8011a3a:	ca08      	ldmia	r2!, {r3}
 8011a3c:	9204      	str	r2, [sp, #16]
 8011a3e:	06e2      	lsls	r2, r4, #27
 8011a40:	d503      	bpl.n	8011a4a <_vfiprintf_r+0x392>
 8011a42:	9300      	str	r3, [sp, #0]
 8011a44:	17db      	asrs	r3, r3, #31
 8011a46:	9301      	str	r3, [sp, #4]
 8011a48:	e7d3      	b.n	80119f2 <_vfiprintf_r+0x33a>
 8011a4a:	0662      	lsls	r2, r4, #25
 8011a4c:	d501      	bpl.n	8011a52 <_vfiprintf_r+0x39a>
 8011a4e:	b21b      	sxth	r3, r3
 8011a50:	e7f7      	b.n	8011a42 <_vfiprintf_r+0x38a>
 8011a52:	05a2      	lsls	r2, r4, #22
 8011a54:	d5f5      	bpl.n	8011a42 <_vfiprintf_r+0x38a>
 8011a56:	b25b      	sxtb	r3, r3
 8011a58:	e7f3      	b.n	8011a42 <_vfiprintf_r+0x38a>
 8011a5a:	1d3b      	adds	r3, r7, #4
 8011a5c:	9304      	str	r3, [sp, #16]
 8011a5e:	06a3      	lsls	r3, r4, #26
 8011a60:	d506      	bpl.n	8011a70 <_vfiprintf_r+0x3b8>
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	9a08      	ldr	r2, [sp, #32]
 8011a66:	601a      	str	r2, [r3, #0]
 8011a68:	17d2      	asrs	r2, r2, #31
 8011a6a:	605a      	str	r2, [r3, #4]
 8011a6c:	9f04      	ldr	r7, [sp, #16]
 8011a6e:	e694      	b.n	801179a <_vfiprintf_r+0xe2>
 8011a70:	06e3      	lsls	r3, r4, #27
 8011a72:	d503      	bpl.n	8011a7c <_vfiprintf_r+0x3c4>
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	9a08      	ldr	r2, [sp, #32]
 8011a78:	601a      	str	r2, [r3, #0]
 8011a7a:	e7f7      	b.n	8011a6c <_vfiprintf_r+0x3b4>
 8011a7c:	0663      	lsls	r3, r4, #25
 8011a7e:	d503      	bpl.n	8011a88 <_vfiprintf_r+0x3d0>
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	9a08      	ldr	r2, [sp, #32]
 8011a84:	801a      	strh	r2, [r3, #0]
 8011a86:	e7f1      	b.n	8011a6c <_vfiprintf_r+0x3b4>
 8011a88:	05a4      	lsls	r4, r4, #22
 8011a8a:	d5f3      	bpl.n	8011a74 <_vfiprintf_r+0x3bc>
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	9a08      	ldr	r2, [sp, #32]
 8011a90:	701a      	strb	r2, [r3, #0]
 8011a92:	e7eb      	b.n	8011a6c <_vfiprintf_r+0x3b4>
 8011a94:	2310      	movs	r3, #16
 8011a96:	431c      	orrs	r4, r3
 8011a98:	2320      	movs	r3, #32
 8011a9a:	0020      	movs	r0, r4
 8011a9c:	4018      	ands	r0, r3
 8011a9e:	421c      	tst	r4, r3
 8011aa0:	d00d      	beq.n	8011abe <_vfiprintf_r+0x406>
 8011aa2:	3b19      	subs	r3, #25
 8011aa4:	3707      	adds	r7, #7
 8011aa6:	439f      	bics	r7, r3
 8011aa8:	0039      	movs	r1, r7
 8011aaa:	c90c      	ldmia	r1!, {r2, r3}
 8011aac:	9200      	str	r2, [sp, #0]
 8011aae:	9301      	str	r3, [sp, #4]
 8011ab0:	9104      	str	r1, [sp, #16]
 8011ab2:	4bcc      	ldr	r3, [pc, #816]	; (8011de4 <_vfiprintf_r+0x72c>)
 8011ab4:	401c      	ands	r4, r3
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	2100      	movs	r1, #0
 8011aba:	aa12      	add	r2, sp, #72	; 0x48
 8011abc:	e7a6      	b.n	8011a0c <_vfiprintf_r+0x354>
 8011abe:	003a      	movs	r2, r7
 8011ac0:	ca08      	ldmia	r2!, {r3}
 8011ac2:	0021      	movs	r1, r4
 8011ac4:	9204      	str	r2, [sp, #16]
 8011ac6:	2210      	movs	r2, #16
 8011ac8:	4011      	ands	r1, r2
 8011aca:	4214      	tst	r4, r2
 8011acc:	d002      	beq.n	8011ad4 <_vfiprintf_r+0x41c>
 8011ace:	9300      	str	r3, [sp, #0]
 8011ad0:	9001      	str	r0, [sp, #4]
 8011ad2:	e7ee      	b.n	8011ab2 <_vfiprintf_r+0x3fa>
 8011ad4:	2240      	movs	r2, #64	; 0x40
 8011ad6:	0020      	movs	r0, r4
 8011ad8:	4010      	ands	r0, r2
 8011ada:	4214      	tst	r4, r2
 8011adc:	d003      	beq.n	8011ae6 <_vfiprintf_r+0x42e>
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	9101      	str	r1, [sp, #4]
 8011ae4:	e7e5      	b.n	8011ab2 <_vfiprintf_r+0x3fa>
 8011ae6:	2280      	movs	r2, #128	; 0x80
 8011ae8:	0021      	movs	r1, r4
 8011aea:	0092      	lsls	r2, r2, #2
 8011aec:	4011      	ands	r1, r2
 8011aee:	4214      	tst	r4, r2
 8011af0:	d0f6      	beq.n	8011ae0 <_vfiprintf_r+0x428>
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	e7eb      	b.n	8011ace <_vfiprintf_r+0x416>
 8011af6:	003b      	movs	r3, r7
 8011af8:	cb04      	ldmia	r3!, {r2}
 8011afa:	49bb      	ldr	r1, [pc, #748]	; (8011de8 <_vfiprintf_r+0x730>)
 8011afc:	9304      	str	r3, [sp, #16]
 8011afe:	2300      	movs	r3, #0
 8011b00:	9200      	str	r2, [sp, #0]
 8011b02:	aa13      	add	r2, sp, #76	; 0x4c
 8011b04:	8011      	strh	r1, [r2, #0]
 8011b06:	4ab9      	ldr	r2, [pc, #740]	; (8011dec <_vfiprintf_r+0x734>)
 8011b08:	9301      	str	r3, [sp, #4]
 8011b0a:	3302      	adds	r3, #2
 8011b0c:	431c      	orrs	r4, r3
 8011b0e:	920c      	str	r2, [sp, #48]	; 0x30
 8011b10:	e7d2      	b.n	8011ab8 <_vfiprintf_r+0x400>
 8011b12:	003b      	movs	r3, r7
 8011b14:	2700      	movs	r7, #0
 8011b16:	cb40      	ldmia	r3!, {r6}
 8011b18:	9304      	str	r3, [sp, #16]
 8011b1a:	ab12      	add	r3, sp, #72	; 0x48
 8011b1c:	70df      	strb	r7, [r3, #3]
 8011b1e:	9b05      	ldr	r3, [sp, #20]
 8011b20:	3301      	adds	r3, #1
 8011b22:	d100      	bne.n	8011b26 <_vfiprintf_r+0x46e>
 8011b24:	e0ea      	b.n	8011cfc <_vfiprintf_r+0x644>
 8011b26:	0039      	movs	r1, r7
 8011b28:	0030      	movs	r0, r6
 8011b2a:	9a05      	ldr	r2, [sp, #20]
 8011b2c:	f7fe f9b4 	bl	800fe98 <memchr>
 8011b30:	900b      	str	r0, [sp, #44]	; 0x2c
 8011b32:	42b8      	cmp	r0, r7
 8011b34:	d002      	beq.n	8011b3c <_vfiprintf_r+0x484>
 8011b36:	1b83      	subs	r3, r0, r6
 8011b38:	9305      	str	r3, [sp, #20]
 8011b3a:	970b      	str	r7, [sp, #44]	; 0x2c
 8011b3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b3e:	9a05      	ldr	r2, [sp, #20]
 8011b40:	930a      	str	r3, [sp, #40]	; 0x28
 8011b42:	4293      	cmp	r3, r2
 8011b44:	da00      	bge.n	8011b48 <_vfiprintf_r+0x490>
 8011b46:	920a      	str	r2, [sp, #40]	; 0x28
 8011b48:	ab12      	add	r3, sp, #72	; 0x48
 8011b4a:	3303      	adds	r3, #3
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	1e5a      	subs	r2, r3, #1
 8011b50:	4193      	sbcs	r3, r2
 8011b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b54:	18d3      	adds	r3, r2, r3
 8011b56:	930a      	str	r3, [sp, #40]	; 0x28
 8011b58:	0022      	movs	r2, r4
 8011b5a:	2302      	movs	r3, #2
 8011b5c:	401a      	ands	r2, r3
 8011b5e:	9210      	str	r2, [sp, #64]	; 0x40
 8011b60:	421c      	tst	r4, r3
 8011b62:	d002      	beq.n	8011b6a <_vfiprintf_r+0x4b2>
 8011b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b66:	3302      	adds	r3, #2
 8011b68:	930a      	str	r3, [sp, #40]	; 0x28
 8011b6a:	2384      	movs	r3, #132	; 0x84
 8011b6c:	0022      	movs	r2, r4
 8011b6e:	401a      	ands	r2, r3
 8011b70:	9211      	str	r2, [sp, #68]	; 0x44
 8011b72:	421c      	tst	r4, r3
 8011b74:	d11e      	bne.n	8011bb4 <_vfiprintf_r+0x4fc>
 8011b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b7a:	1a9f      	subs	r7, r3, r2
 8011b7c:	2f00      	cmp	r7, #0
 8011b7e:	dd19      	ble.n	8011bb4 <_vfiprintf_r+0x4fc>
 8011b80:	0029      	movs	r1, r5
 8011b82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b84:	489a      	ldr	r0, [pc, #616]	; (8011df0 <_vfiprintf_r+0x738>)
 8011b86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011b88:	3301      	adds	r3, #1
 8011b8a:	3108      	adds	r1, #8
 8011b8c:	6028      	str	r0, [r5, #0]
 8011b8e:	2f10      	cmp	r7, #16
 8011b90:	dd00      	ble.n	8011b94 <_vfiprintf_r+0x4dc>
 8011b92:	e1a7      	b.n	8011ee4 <_vfiprintf_r+0x82c>
 8011b94:	606f      	str	r7, [r5, #4]
 8011b96:	18bf      	adds	r7, r7, r2
 8011b98:	000d      	movs	r5, r1
 8011b9a:	9716      	str	r7, [sp, #88]	; 0x58
 8011b9c:	9315      	str	r3, [sp, #84]	; 0x54
 8011b9e:	2b07      	cmp	r3, #7
 8011ba0:	dd08      	ble.n	8011bb4 <_vfiprintf_r+0x4fc>
 8011ba2:	9903      	ldr	r1, [sp, #12]
 8011ba4:	9806      	ldr	r0, [sp, #24]
 8011ba6:	aa14      	add	r2, sp, #80	; 0x50
 8011ba8:	f7ff fd51 	bl	801164e <__sprint_r>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d000      	beq.n	8011bb2 <_vfiprintf_r+0x4fa>
 8011bb0:	e1eb      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011bb2:	ad17      	add	r5, sp, #92	; 0x5c
 8011bb4:	a912      	add	r1, sp, #72	; 0x48
 8011bb6:	78c8      	ldrb	r0, [r1, #3]
 8011bb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bbc:	3103      	adds	r1, #3
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d012      	beq.n	8011be8 <_vfiprintf_r+0x530>
 8011bc2:	6029      	str	r1, [r5, #0]
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	1852      	adds	r2, r2, r1
 8011bca:	6069      	str	r1, [r5, #4]
 8011bcc:	9216      	str	r2, [sp, #88]	; 0x58
 8011bce:	9315      	str	r3, [sp, #84]	; 0x54
 8011bd0:	3508      	adds	r5, #8
 8011bd2:	2b07      	cmp	r3, #7
 8011bd4:	dd08      	ble.n	8011be8 <_vfiprintf_r+0x530>
 8011bd6:	9903      	ldr	r1, [sp, #12]
 8011bd8:	9806      	ldr	r0, [sp, #24]
 8011bda:	aa14      	add	r2, sp, #80	; 0x50
 8011bdc:	f7ff fd37 	bl	801164e <__sprint_r>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d000      	beq.n	8011be6 <_vfiprintf_r+0x52e>
 8011be4:	e1d1      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011be6:	ad17      	add	r5, sp, #92	; 0x5c
 8011be8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011bea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bee:	2900      	cmp	r1, #0
 8011bf0:	d013      	beq.n	8011c1a <_vfiprintf_r+0x562>
 8011bf2:	a913      	add	r1, sp, #76	; 0x4c
 8011bf4:	6029      	str	r1, [r5, #0]
 8011bf6:	2102      	movs	r1, #2
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	1852      	adds	r2, r2, r1
 8011bfc:	6069      	str	r1, [r5, #4]
 8011bfe:	9216      	str	r2, [sp, #88]	; 0x58
 8011c00:	9315      	str	r3, [sp, #84]	; 0x54
 8011c02:	3508      	adds	r5, #8
 8011c04:	2b07      	cmp	r3, #7
 8011c06:	dd08      	ble.n	8011c1a <_vfiprintf_r+0x562>
 8011c08:	9903      	ldr	r1, [sp, #12]
 8011c0a:	9806      	ldr	r0, [sp, #24]
 8011c0c:	aa14      	add	r2, sp, #80	; 0x50
 8011c0e:	f7ff fd1e 	bl	801164e <__sprint_r>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d000      	beq.n	8011c18 <_vfiprintf_r+0x560>
 8011c16:	e1b8      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011c18:	ad17      	add	r5, sp, #92	; 0x5c
 8011c1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011c1c:	2b80      	cmp	r3, #128	; 0x80
 8011c1e:	d11e      	bne.n	8011c5e <_vfiprintf_r+0x5a6>
 8011c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c24:	1a9f      	subs	r7, r3, r2
 8011c26:	2f00      	cmp	r7, #0
 8011c28:	dd19      	ble.n	8011c5e <_vfiprintf_r+0x5a6>
 8011c2a:	0029      	movs	r1, r5
 8011c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c2e:	4871      	ldr	r0, [pc, #452]	; (8011df4 <_vfiprintf_r+0x73c>)
 8011c30:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c32:	3301      	adds	r3, #1
 8011c34:	3108      	adds	r1, #8
 8011c36:	6028      	str	r0, [r5, #0]
 8011c38:	2f10      	cmp	r7, #16
 8011c3a:	dd00      	ble.n	8011c3e <_vfiprintf_r+0x586>
 8011c3c:	e164      	b.n	8011f08 <_vfiprintf_r+0x850>
 8011c3e:	606f      	str	r7, [r5, #4]
 8011c40:	18bf      	adds	r7, r7, r2
 8011c42:	000d      	movs	r5, r1
 8011c44:	9716      	str	r7, [sp, #88]	; 0x58
 8011c46:	9315      	str	r3, [sp, #84]	; 0x54
 8011c48:	2b07      	cmp	r3, #7
 8011c4a:	dd08      	ble.n	8011c5e <_vfiprintf_r+0x5a6>
 8011c4c:	9903      	ldr	r1, [sp, #12]
 8011c4e:	9806      	ldr	r0, [sp, #24]
 8011c50:	aa14      	add	r2, sp, #80	; 0x50
 8011c52:	f7ff fcfc 	bl	801164e <__sprint_r>
 8011c56:	2800      	cmp	r0, #0
 8011c58:	d000      	beq.n	8011c5c <_vfiprintf_r+0x5a4>
 8011c5a:	e196      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011c5c:	ad17      	add	r5, sp, #92	; 0x5c
 8011c5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c60:	9a05      	ldr	r2, [sp, #20]
 8011c62:	1a9f      	subs	r7, r3, r2
 8011c64:	2f00      	cmp	r7, #0
 8011c66:	dd19      	ble.n	8011c9c <_vfiprintf_r+0x5e4>
 8011c68:	0029      	movs	r1, r5
 8011c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c6c:	4861      	ldr	r0, [pc, #388]	; (8011df4 <_vfiprintf_r+0x73c>)
 8011c6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c70:	3301      	adds	r3, #1
 8011c72:	3108      	adds	r1, #8
 8011c74:	6028      	str	r0, [r5, #0]
 8011c76:	2f10      	cmp	r7, #16
 8011c78:	dd00      	ble.n	8011c7c <_vfiprintf_r+0x5c4>
 8011c7a:	e157      	b.n	8011f2c <_vfiprintf_r+0x874>
 8011c7c:	606f      	str	r7, [r5, #4]
 8011c7e:	18bf      	adds	r7, r7, r2
 8011c80:	000d      	movs	r5, r1
 8011c82:	9716      	str	r7, [sp, #88]	; 0x58
 8011c84:	9315      	str	r3, [sp, #84]	; 0x54
 8011c86:	2b07      	cmp	r3, #7
 8011c88:	dd08      	ble.n	8011c9c <_vfiprintf_r+0x5e4>
 8011c8a:	9903      	ldr	r1, [sp, #12]
 8011c8c:	9806      	ldr	r0, [sp, #24]
 8011c8e:	aa14      	add	r2, sp, #80	; 0x50
 8011c90:	f7ff fcdd 	bl	801164e <__sprint_r>
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d000      	beq.n	8011c9a <_vfiprintf_r+0x5e2>
 8011c98:	e177      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011c9a:	ad17      	add	r5, sp, #92	; 0x5c
 8011c9c:	9b05      	ldr	r3, [sp, #20]
 8011c9e:	9a05      	ldr	r2, [sp, #20]
 8011ca0:	606b      	str	r3, [r5, #4]
 8011ca2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ca4:	602e      	str	r6, [r5, #0]
 8011ca6:	189b      	adds	r3, r3, r2
 8011ca8:	9316      	str	r3, [sp, #88]	; 0x58
 8011caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cac:	3508      	adds	r5, #8
 8011cae:	3301      	adds	r3, #1
 8011cb0:	9315      	str	r3, [sp, #84]	; 0x54
 8011cb2:	2b07      	cmp	r3, #7
 8011cb4:	dd08      	ble.n	8011cc8 <_vfiprintf_r+0x610>
 8011cb6:	9903      	ldr	r1, [sp, #12]
 8011cb8:	9806      	ldr	r0, [sp, #24]
 8011cba:	aa14      	add	r2, sp, #80	; 0x50
 8011cbc:	f7ff fcc7 	bl	801164e <__sprint_r>
 8011cc0:	2800      	cmp	r0, #0
 8011cc2:	d000      	beq.n	8011cc6 <_vfiprintf_r+0x60e>
 8011cc4:	e161      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011cc6:	ad17      	add	r5, sp, #92	; 0x5c
 8011cc8:	0764      	lsls	r4, r4, #29
 8011cca:	d500      	bpl.n	8011cce <_vfiprintf_r+0x616>
 8011ccc:	e140      	b.n	8011f50 <_vfiprintf_r+0x898>
 8011cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	da00      	bge.n	8011cd8 <_vfiprintf_r+0x620>
 8011cd6:	0013      	movs	r3, r2
 8011cd8:	9a08      	ldr	r2, [sp, #32]
 8011cda:	18d3      	adds	r3, r2, r3
 8011cdc:	9308      	str	r3, [sp, #32]
 8011cde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d007      	beq.n	8011cf4 <_vfiprintf_r+0x63c>
 8011ce4:	9903      	ldr	r1, [sp, #12]
 8011ce6:	9806      	ldr	r0, [sp, #24]
 8011ce8:	aa14      	add	r2, sp, #80	; 0x50
 8011cea:	f7ff fcb0 	bl	801164e <__sprint_r>
 8011cee:	2800      	cmp	r0, #0
 8011cf0:	d000      	beq.n	8011cf4 <_vfiprintf_r+0x63c>
 8011cf2:	e14a      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	ad17      	add	r5, sp, #92	; 0x5c
 8011cf8:	9315      	str	r3, [sp, #84]	; 0x54
 8011cfa:	e6b7      	b.n	8011a6c <_vfiprintf_r+0x3b4>
 8011cfc:	0030      	movs	r0, r6
 8011cfe:	f7ee fa01 	bl	8000104 <strlen>
 8011d02:	9005      	str	r0, [sp, #20]
 8011d04:	e719      	b.n	8011b3a <_vfiprintf_r+0x482>
 8011d06:	2310      	movs	r3, #16
 8011d08:	431c      	orrs	r4, r3
 8011d0a:	2320      	movs	r3, #32
 8011d0c:	0020      	movs	r0, r4
 8011d0e:	4018      	ands	r0, r3
 8011d10:	421c      	tst	r4, r3
 8011d12:	d009      	beq.n	8011d28 <_vfiprintf_r+0x670>
 8011d14:	3b19      	subs	r3, #25
 8011d16:	3707      	adds	r7, #7
 8011d18:	439f      	bics	r7, r3
 8011d1a:	0039      	movs	r1, r7
 8011d1c:	c90c      	ldmia	r1!, {r2, r3}
 8011d1e:	9200      	str	r2, [sp, #0]
 8011d20:	9301      	str	r3, [sp, #4]
 8011d22:	9104      	str	r1, [sp, #16]
 8011d24:	2301      	movs	r3, #1
 8011d26:	e6c7      	b.n	8011ab8 <_vfiprintf_r+0x400>
 8011d28:	003b      	movs	r3, r7
 8011d2a:	cb04      	ldmia	r3!, {r2}
 8011d2c:	0021      	movs	r1, r4
 8011d2e:	9304      	str	r3, [sp, #16]
 8011d30:	2310      	movs	r3, #16
 8011d32:	4019      	ands	r1, r3
 8011d34:	421c      	tst	r4, r3
 8011d36:	d003      	beq.n	8011d40 <_vfiprintf_r+0x688>
 8011d38:	9200      	str	r2, [sp, #0]
 8011d3a:	9001      	str	r0, [sp, #4]
 8011d3c:	3b0f      	subs	r3, #15
 8011d3e:	e6bb      	b.n	8011ab8 <_vfiprintf_r+0x400>
 8011d40:	2340      	movs	r3, #64	; 0x40
 8011d42:	0020      	movs	r0, r4
 8011d44:	4018      	ands	r0, r3
 8011d46:	421c      	tst	r4, r3
 8011d48:	d003      	beq.n	8011d52 <_vfiprintf_r+0x69a>
 8011d4a:	b293      	uxth	r3, r2
 8011d4c:	9300      	str	r3, [sp, #0]
 8011d4e:	9101      	str	r1, [sp, #4]
 8011d50:	e7e8      	b.n	8011d24 <_vfiprintf_r+0x66c>
 8011d52:	2380      	movs	r3, #128	; 0x80
 8011d54:	0021      	movs	r1, r4
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	4019      	ands	r1, r3
 8011d5a:	421c      	tst	r4, r3
 8011d5c:	d003      	beq.n	8011d66 <_vfiprintf_r+0x6ae>
 8011d5e:	b2d3      	uxtb	r3, r2
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	9001      	str	r0, [sp, #4]
 8011d64:	e7de      	b.n	8011d24 <_vfiprintf_r+0x66c>
 8011d66:	9200      	str	r2, [sp, #0]
 8011d68:	e7f1      	b.n	8011d4e <_vfiprintf_r+0x696>
 8011d6a:	4a23      	ldr	r2, [pc, #140]	; (8011df8 <_vfiprintf_r+0x740>)
 8011d6c:	0020      	movs	r0, r4
 8011d6e:	920c      	str	r2, [sp, #48]	; 0x30
 8011d70:	2220      	movs	r2, #32
 8011d72:	4010      	ands	r0, r2
 8011d74:	4214      	tst	r4, r2
 8011d76:	d019      	beq.n	8011dac <_vfiprintf_r+0x6f4>
 8011d78:	3a19      	subs	r2, #25
 8011d7a:	3707      	adds	r7, #7
 8011d7c:	4397      	bics	r7, r2
 8011d7e:	0038      	movs	r0, r7
 8011d80:	c806      	ldmia	r0!, {r1, r2}
 8011d82:	9100      	str	r1, [sp, #0]
 8011d84:	9201      	str	r2, [sp, #4]
 8011d86:	9004      	str	r0, [sp, #16]
 8011d88:	07e2      	lsls	r2, r4, #31
 8011d8a:	d509      	bpl.n	8011da0 <_vfiprintf_r+0x6e8>
 8011d8c:	9a00      	ldr	r2, [sp, #0]
 8011d8e:	9901      	ldr	r1, [sp, #4]
 8011d90:	430a      	orrs	r2, r1
 8011d92:	d005      	beq.n	8011da0 <_vfiprintf_r+0x6e8>
 8011d94:	aa13      	add	r2, sp, #76	; 0x4c
 8011d96:	2130      	movs	r1, #48	; 0x30
 8011d98:	7053      	strb	r3, [r2, #1]
 8011d9a:	2302      	movs	r3, #2
 8011d9c:	7011      	strb	r1, [r2, #0]
 8011d9e:	431c      	orrs	r4, r3
 8011da0:	4b10      	ldr	r3, [pc, #64]	; (8011de4 <_vfiprintf_r+0x72c>)
 8011da2:	401c      	ands	r4, r3
 8011da4:	2302      	movs	r3, #2
 8011da6:	e687      	b.n	8011ab8 <_vfiprintf_r+0x400>
 8011da8:	4a10      	ldr	r2, [pc, #64]	; (8011dec <_vfiprintf_r+0x734>)
 8011daa:	e7df      	b.n	8011d6c <_vfiprintf_r+0x6b4>
 8011dac:	0039      	movs	r1, r7
 8011dae:	c904      	ldmia	r1!, {r2}
 8011db0:	0026      	movs	r6, r4
 8011db2:	9104      	str	r1, [sp, #16]
 8011db4:	2110      	movs	r1, #16
 8011db6:	400e      	ands	r6, r1
 8011db8:	420c      	tst	r4, r1
 8011dba:	d002      	beq.n	8011dc2 <_vfiprintf_r+0x70a>
 8011dbc:	9200      	str	r2, [sp, #0]
 8011dbe:	9001      	str	r0, [sp, #4]
 8011dc0:	e7e2      	b.n	8011d88 <_vfiprintf_r+0x6d0>
 8011dc2:	2140      	movs	r1, #64	; 0x40
 8011dc4:	0020      	movs	r0, r4
 8011dc6:	4008      	ands	r0, r1
 8011dc8:	420c      	tst	r4, r1
 8011dca:	d003      	beq.n	8011dd4 <_vfiprintf_r+0x71c>
 8011dcc:	b292      	uxth	r2, r2
 8011dce:	9200      	str	r2, [sp, #0]
 8011dd0:	9601      	str	r6, [sp, #4]
 8011dd2:	e7d9      	b.n	8011d88 <_vfiprintf_r+0x6d0>
 8011dd4:	2180      	movs	r1, #128	; 0x80
 8011dd6:	0026      	movs	r6, r4
 8011dd8:	0089      	lsls	r1, r1, #2
 8011dda:	400e      	ands	r6, r1
 8011ddc:	420c      	tst	r4, r1
 8011dde:	d0f6      	beq.n	8011dce <_vfiprintf_r+0x716>
 8011de0:	b2d2      	uxtb	r2, r2
 8011de2:	e7eb      	b.n	8011dbc <_vfiprintf_r+0x704>
 8011de4:	fffffbff 	.word	0xfffffbff
 8011de8:	00007830 	.word	0x00007830
 8011dec:	080148ac 	.word	0x080148ac
 8011df0:	080149b9 	.word	0x080149b9
 8011df4:	080149c9 	.word	0x080149c9
 8011df8:	080148bd 	.word	0x080148bd
 8011dfc:	9b01      	ldr	r3, [sp, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d109      	bne.n	8011e16 <_vfiprintf_r+0x75e>
 8011e02:	9b00      	ldr	r3, [sp, #0]
 8011e04:	2b09      	cmp	r3, #9
 8011e06:	d806      	bhi.n	8011e16 <_vfiprintf_r+0x75e>
 8011e08:	26b7      	movs	r6, #183	; 0xb7
 8011e0a:	ab12      	add	r3, sp, #72	; 0x48
 8011e0c:	18f6      	adds	r6, r6, r3
 8011e0e:	9b00      	ldr	r3, [sp, #0]
 8011e10:	3330      	adds	r3, #48	; 0x30
 8011e12:	7033      	strb	r3, [r6, #0]
 8011e14:	e115      	b.n	8012042 <_vfiprintf_r+0x98a>
 8011e16:	2380      	movs	r3, #128	; 0x80
 8011e18:	2400      	movs	r4, #0
 8011e1a:	00db      	lsls	r3, r3, #3
 8011e1c:	403b      	ands	r3, r7
 8011e1e:	ae40      	add	r6, sp, #256	; 0x100
 8011e20:	930a      	str	r3, [sp, #40]	; 0x28
 8011e22:	220a      	movs	r2, #10
 8011e24:	9800      	ldr	r0, [sp, #0]
 8011e26:	9901      	ldr	r1, [sp, #4]
 8011e28:	2300      	movs	r3, #0
 8011e2a:	f7ee fb3b 	bl	80004a4 <__aeabi_uldivmod>
 8011e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e30:	3e01      	subs	r6, #1
 8011e32:	3230      	adds	r2, #48	; 0x30
 8011e34:	900b      	str	r0, [sp, #44]	; 0x2c
 8011e36:	9110      	str	r1, [sp, #64]	; 0x40
 8011e38:	7032      	strb	r2, [r6, #0]
 8011e3a:	3401      	adds	r4, #1
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d01a      	beq.n	8011e76 <_vfiprintf_r+0x7be>
 8011e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	42a3      	cmp	r3, r4
 8011e46:	d116      	bne.n	8011e76 <_vfiprintf_r+0x7be>
 8011e48:	2cff      	cmp	r4, #255	; 0xff
 8011e4a:	d014      	beq.n	8011e76 <_vfiprintf_r+0x7be>
 8011e4c:	9b01      	ldr	r3, [sp, #4]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d102      	bne.n	8011e58 <_vfiprintf_r+0x7a0>
 8011e52:	9b00      	ldr	r3, [sp, #0]
 8011e54:	2b09      	cmp	r3, #9
 8011e56:	d90e      	bls.n	8011e76 <_vfiprintf_r+0x7be>
 8011e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011e5c:	1af6      	subs	r6, r6, r3
 8011e5e:	001a      	movs	r2, r3
 8011e60:	0030      	movs	r0, r6
 8011e62:	f7fa f86c 	bl	800bf3e <strncpy>
 8011e66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e68:	2400      	movs	r4, #0
 8011e6a:	785b      	ldrb	r3, [r3, #1]
 8011e6c:	1e5a      	subs	r2, r3, #1
 8011e6e:	4193      	sbcs	r3, r2
 8011e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e72:	18d3      	adds	r3, r2, r3
 8011e74:	930d      	str	r3, [sp, #52]	; 0x34
 8011e76:	9b01      	ldr	r3, [sp, #4]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d103      	bne.n	8011e84 <_vfiprintf_r+0x7cc>
 8011e7c:	9b00      	ldr	r3, [sp, #0]
 8011e7e:	2b09      	cmp	r3, #9
 8011e80:	d800      	bhi.n	8011e84 <_vfiprintf_r+0x7cc>
 8011e82:	e0de      	b.n	8012042 <_vfiprintf_r+0x98a>
 8011e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e86:	9300      	str	r3, [sp, #0]
 8011e88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	e7c9      	b.n	8011e22 <_vfiprintf_r+0x76a>
 8011e8e:	200f      	movs	r0, #15
 8011e90:	9b00      	ldr	r3, [sp, #0]
 8011e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e94:	4003      	ands	r3, r0
 8011e96:	5cd3      	ldrb	r3, [r2, r3]
 8011e98:	3e01      	subs	r6, #1
 8011e9a:	7033      	strb	r3, [r6, #0]
 8011e9c:	9b01      	ldr	r3, [sp, #4]
 8011e9e:	0719      	lsls	r1, r3, #28
 8011ea0:	9b00      	ldr	r3, [sp, #0]
 8011ea2:	091a      	lsrs	r2, r3, #4
 8011ea4:	9b01      	ldr	r3, [sp, #4]
 8011ea6:	4311      	orrs	r1, r2
 8011ea8:	091b      	lsrs	r3, r3, #4
 8011eaa:	9301      	str	r3, [sp, #4]
 8011eac:	000b      	movs	r3, r1
 8011eae:	9a01      	ldr	r2, [sp, #4]
 8011eb0:	9100      	str	r1, [sp, #0]
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	d1ec      	bne.n	8011e90 <_vfiprintf_r+0x7d8>
 8011eb6:	e0c4      	b.n	8012042 <_vfiprintf_r+0x98a>
 8011eb8:	ae40      	add	r6, sp, #256	; 0x100
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d000      	beq.n	8011ec0 <_vfiprintf_r+0x808>
 8011ebe:	e0c0      	b.n	8012042 <_vfiprintf_r+0x98a>
 8011ec0:	07e4      	lsls	r4, r4, #31
 8011ec2:	d400      	bmi.n	8011ec6 <_vfiprintf_r+0x80e>
 8011ec4:	e0bd      	b.n	8012042 <_vfiprintf_r+0x98a>
 8011ec6:	26b7      	movs	r6, #183	; 0xb7
 8011ec8:	ab12      	add	r3, sp, #72	; 0x48
 8011eca:	18f6      	adds	r6, r6, r3
 8011ecc:	2330      	movs	r3, #48	; 0x30
 8011ece:	e7a0      	b.n	8011e12 <_vfiprintf_r+0x75a>
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d100      	bne.n	8011ed6 <_vfiprintf_r+0x81e>
 8011ed4:	e07e      	b.n	8011fd4 <_vfiprintf_r+0x91c>
 8011ed6:	ae27      	add	r6, sp, #156	; 0x9c
 8011ed8:	7033      	strb	r3, [r6, #0]
 8011eda:	2300      	movs	r3, #0
 8011edc:	aa12      	add	r2, sp, #72	; 0x48
 8011ede:	70d3      	strb	r3, [r2, #3]
 8011ee0:	9704      	str	r7, [sp, #16]
 8011ee2:	e576      	b.n	80119d2 <_vfiprintf_r+0x31a>
 8011ee4:	2010      	movs	r0, #16
 8011ee6:	1812      	adds	r2, r2, r0
 8011ee8:	6068      	str	r0, [r5, #4]
 8011eea:	9216      	str	r2, [sp, #88]	; 0x58
 8011eec:	9315      	str	r3, [sp, #84]	; 0x54
 8011eee:	2b07      	cmp	r3, #7
 8011ef0:	dd07      	ble.n	8011f02 <_vfiprintf_r+0x84a>
 8011ef2:	9903      	ldr	r1, [sp, #12]
 8011ef4:	9806      	ldr	r0, [sp, #24]
 8011ef6:	aa14      	add	r2, sp, #80	; 0x50
 8011ef8:	f7ff fba9 	bl	801164e <__sprint_r>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	d144      	bne.n	8011f8a <_vfiprintf_r+0x8d2>
 8011f00:	a917      	add	r1, sp, #92	; 0x5c
 8011f02:	000d      	movs	r5, r1
 8011f04:	3f10      	subs	r7, #16
 8011f06:	e63b      	b.n	8011b80 <_vfiprintf_r+0x4c8>
 8011f08:	2010      	movs	r0, #16
 8011f0a:	1812      	adds	r2, r2, r0
 8011f0c:	6068      	str	r0, [r5, #4]
 8011f0e:	9216      	str	r2, [sp, #88]	; 0x58
 8011f10:	9315      	str	r3, [sp, #84]	; 0x54
 8011f12:	2b07      	cmp	r3, #7
 8011f14:	dd07      	ble.n	8011f26 <_vfiprintf_r+0x86e>
 8011f16:	9903      	ldr	r1, [sp, #12]
 8011f18:	9806      	ldr	r0, [sp, #24]
 8011f1a:	aa14      	add	r2, sp, #80	; 0x50
 8011f1c:	f7ff fb97 	bl	801164e <__sprint_r>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d132      	bne.n	8011f8a <_vfiprintf_r+0x8d2>
 8011f24:	a917      	add	r1, sp, #92	; 0x5c
 8011f26:	000d      	movs	r5, r1
 8011f28:	3f10      	subs	r7, #16
 8011f2a:	e67e      	b.n	8011c2a <_vfiprintf_r+0x572>
 8011f2c:	2010      	movs	r0, #16
 8011f2e:	1812      	adds	r2, r2, r0
 8011f30:	6068      	str	r0, [r5, #4]
 8011f32:	9216      	str	r2, [sp, #88]	; 0x58
 8011f34:	9315      	str	r3, [sp, #84]	; 0x54
 8011f36:	2b07      	cmp	r3, #7
 8011f38:	dd07      	ble.n	8011f4a <_vfiprintf_r+0x892>
 8011f3a:	9903      	ldr	r1, [sp, #12]
 8011f3c:	9806      	ldr	r0, [sp, #24]
 8011f3e:	aa14      	add	r2, sp, #80	; 0x50
 8011f40:	f7ff fb85 	bl	801164e <__sprint_r>
 8011f44:	2800      	cmp	r0, #0
 8011f46:	d120      	bne.n	8011f8a <_vfiprintf_r+0x8d2>
 8011f48:	a917      	add	r1, sp, #92	; 0x5c
 8011f4a:	000d      	movs	r5, r1
 8011f4c:	3f10      	subs	r7, #16
 8011f4e:	e68b      	b.n	8011c68 <_vfiprintf_r+0x5b0>
 8011f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f54:	2610      	movs	r6, #16
 8011f56:	1a9c      	subs	r4, r3, r2
 8011f58:	2c00      	cmp	r4, #0
 8011f5a:	dc00      	bgt.n	8011f5e <_vfiprintf_r+0x8a6>
 8011f5c:	e6b7      	b.n	8011cce <_vfiprintf_r+0x616>
 8011f5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011f60:	4a3b      	ldr	r2, [pc, #236]	; (8012050 <_vfiprintf_r+0x998>)
 8011f62:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f64:	3101      	adds	r1, #1
 8011f66:	602a      	str	r2, [r5, #0]
 8011f68:	2c10      	cmp	r4, #16
 8011f6a:	dc22      	bgt.n	8011fb2 <_vfiprintf_r+0x8fa>
 8011f6c:	606c      	str	r4, [r5, #4]
 8011f6e:	18e4      	adds	r4, r4, r3
 8011f70:	9416      	str	r4, [sp, #88]	; 0x58
 8011f72:	9115      	str	r1, [sp, #84]	; 0x54
 8011f74:	2907      	cmp	r1, #7
 8011f76:	dc00      	bgt.n	8011f7a <_vfiprintf_r+0x8c2>
 8011f78:	e6a9      	b.n	8011cce <_vfiprintf_r+0x616>
 8011f7a:	9903      	ldr	r1, [sp, #12]
 8011f7c:	9806      	ldr	r0, [sp, #24]
 8011f7e:	aa14      	add	r2, sp, #80	; 0x50
 8011f80:	f7ff fb65 	bl	801164e <__sprint_r>
 8011f84:	2800      	cmp	r0, #0
 8011f86:	d100      	bne.n	8011f8a <_vfiprintf_r+0x8d2>
 8011f88:	e6a1      	b.n	8011cce <_vfiprintf_r+0x616>
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f8e:	07db      	lsls	r3, r3, #31
 8011f90:	d407      	bmi.n	8011fa2 <_vfiprintf_r+0x8ea>
 8011f92:	9b03      	ldr	r3, [sp, #12]
 8011f94:	899b      	ldrh	r3, [r3, #12]
 8011f96:	059b      	lsls	r3, r3, #22
 8011f98:	d403      	bmi.n	8011fa2 <_vfiprintf_r+0x8ea>
 8011f9a:	9b03      	ldr	r3, [sp, #12]
 8011f9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8011f9e:	f7fa f88e 	bl	800c0be <__retarget_lock_release_recursive>
 8011fa2:	9b03      	ldr	r3, [sp, #12]
 8011fa4:	899b      	ldrh	r3, [r3, #12]
 8011fa6:	065b      	lsls	r3, r3, #25
 8011fa8:	d401      	bmi.n	8011fae <_vfiprintf_r+0x8f6>
 8011faa:	f7ff fbc3 	bl	8011734 <_vfiprintf_r+0x7c>
 8011fae:	f7ff fbbe 	bl	801172e <_vfiprintf_r+0x76>
 8011fb2:	3310      	adds	r3, #16
 8011fb4:	606e      	str	r6, [r5, #4]
 8011fb6:	9316      	str	r3, [sp, #88]	; 0x58
 8011fb8:	9115      	str	r1, [sp, #84]	; 0x54
 8011fba:	3508      	adds	r5, #8
 8011fbc:	2907      	cmp	r1, #7
 8011fbe:	dd07      	ble.n	8011fd0 <_vfiprintf_r+0x918>
 8011fc0:	9903      	ldr	r1, [sp, #12]
 8011fc2:	9806      	ldr	r0, [sp, #24]
 8011fc4:	aa14      	add	r2, sp, #80	; 0x50
 8011fc6:	f7ff fb42 	bl	801164e <__sprint_r>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d1dd      	bne.n	8011f8a <_vfiprintf_r+0x8d2>
 8011fce:	ad17      	add	r5, sp, #92	; 0x5c
 8011fd0:	3c10      	subs	r4, #16
 8011fd2:	e7c4      	b.n	8011f5e <_vfiprintf_r+0x8a6>
 8011fd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d102      	bne.n	8011fe0 <_vfiprintf_r+0x928>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9315      	str	r3, [sp, #84]	; 0x54
 8011fde:	e7d4      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011fe0:	9903      	ldr	r1, [sp, #12]
 8011fe2:	9806      	ldr	r0, [sp, #24]
 8011fe4:	aa14      	add	r2, sp, #80	; 0x50
 8011fe6:	f7ff fb32 	bl	801164e <__sprint_r>
 8011fea:	2800      	cmp	r0, #0
 8011fec:	d0f5      	beq.n	8011fda <_vfiprintf_r+0x922>
 8011fee:	e7cc      	b.n	8011f8a <_vfiprintf_r+0x8d2>
 8011ff0:	0027      	movs	r7, r4
 8011ff2:	2a00      	cmp	r2, #0
 8011ff4:	d100      	bne.n	8011ff8 <_vfiprintf_r+0x940>
 8011ff6:	e51b      	b.n	8011a30 <_vfiprintf_r+0x378>
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d100      	bne.n	8011ffe <_vfiprintf_r+0x946>
 8011ffc:	e6fe      	b.n	8011dfc <_vfiprintf_r+0x744>
 8011ffe:	ae40      	add	r6, sp, #256	; 0x100
 8012000:	2b02      	cmp	r3, #2
 8012002:	d100      	bne.n	8012006 <_vfiprintf_r+0x94e>
 8012004:	e743      	b.n	8011e8e <_vfiprintf_r+0x7d6>
 8012006:	2307      	movs	r3, #7
 8012008:	469c      	mov	ip, r3
 801200a:	4663      	mov	r3, ip
 801200c:	9900      	ldr	r1, [sp, #0]
 801200e:	0032      	movs	r2, r6
 8012010:	400b      	ands	r3, r1
 8012012:	9901      	ldr	r1, [sp, #4]
 8012014:	3e01      	subs	r6, #1
 8012016:	074c      	lsls	r4, r1, #29
 8012018:	9900      	ldr	r1, [sp, #0]
 801201a:	3330      	adds	r3, #48	; 0x30
 801201c:	08c8      	lsrs	r0, r1, #3
 801201e:	9901      	ldr	r1, [sp, #4]
 8012020:	4304      	orrs	r4, r0
 8012022:	08c9      	lsrs	r1, r1, #3
 8012024:	9101      	str	r1, [sp, #4]
 8012026:	0021      	movs	r1, r4
 8012028:	9801      	ldr	r0, [sp, #4]
 801202a:	7033      	strb	r3, [r6, #0]
 801202c:	9400      	str	r4, [sp, #0]
 801202e:	4301      	orrs	r1, r0
 8012030:	d1eb      	bne.n	801200a <_vfiprintf_r+0x952>
 8012032:	07f9      	lsls	r1, r7, #31
 8012034:	d505      	bpl.n	8012042 <_vfiprintf_r+0x98a>
 8012036:	2b30      	cmp	r3, #48	; 0x30
 8012038:	d003      	beq.n	8012042 <_vfiprintf_r+0x98a>
 801203a:	2330      	movs	r3, #48	; 0x30
 801203c:	3e01      	subs	r6, #1
 801203e:	7033      	strb	r3, [r6, #0]
 8012040:	1e96      	subs	r6, r2, #2
 8012042:	9b05      	ldr	r3, [sp, #20]
 8012044:	003c      	movs	r4, r7
 8012046:	930b      	str	r3, [sp, #44]	; 0x2c
 8012048:	ab40      	add	r3, sp, #256	; 0x100
 801204a:	1b9b      	subs	r3, r3, r6
 801204c:	9305      	str	r3, [sp, #20]
 801204e:	e575      	b.n	8011b3c <_vfiprintf_r+0x484>
 8012050:	080149b9 	.word	0x080149b9

08012054 <__sbprintf>:
 8012054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012056:	0015      	movs	r5, r2
 8012058:	2202      	movs	r2, #2
 801205a:	4c1e      	ldr	r4, [pc, #120]	; (80120d4 <__sbprintf+0x80>)
 801205c:	001f      	movs	r7, r3
 801205e:	898b      	ldrh	r3, [r1, #12]
 8012060:	44a5      	add	sp, r4
 8012062:	4393      	bics	r3, r2
 8012064:	466a      	mov	r2, sp
 8012066:	8193      	strh	r3, [r2, #12]
 8012068:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801206a:	0006      	movs	r6, r0
 801206c:	9319      	str	r3, [sp, #100]	; 0x64
 801206e:	89cb      	ldrh	r3, [r1, #14]
 8012070:	a816      	add	r0, sp, #88	; 0x58
 8012072:	81d3      	strh	r3, [r2, #14]
 8012074:	69cb      	ldr	r3, [r1, #28]
 8012076:	000c      	movs	r4, r1
 8012078:	9307      	str	r3, [sp, #28]
 801207a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801207c:	9309      	str	r3, [sp, #36]	; 0x24
 801207e:	ab1a      	add	r3, sp, #104	; 0x68
 8012080:	9300      	str	r3, [sp, #0]
 8012082:	9304      	str	r3, [sp, #16]
 8012084:	2380      	movs	r3, #128	; 0x80
 8012086:	00db      	lsls	r3, r3, #3
 8012088:	9302      	str	r3, [sp, #8]
 801208a:	9305      	str	r3, [sp, #20]
 801208c:	2300      	movs	r3, #0
 801208e:	9306      	str	r3, [sp, #24]
 8012090:	f7fa f812 	bl	800c0b8 <__retarget_lock_init_recursive>
 8012094:	002a      	movs	r2, r5
 8012096:	003b      	movs	r3, r7
 8012098:	4669      	mov	r1, sp
 801209a:	0030      	movs	r0, r6
 801209c:	f7ff fb0c 	bl	80116b8 <_vfiprintf_r>
 80120a0:	1e05      	subs	r5, r0, #0
 80120a2:	db07      	blt.n	80120b4 <__sbprintf+0x60>
 80120a4:	4669      	mov	r1, sp
 80120a6:	0030      	movs	r0, r6
 80120a8:	f7fd fe7c 	bl	800fda4 <_fflush_r>
 80120ac:	2800      	cmp	r0, #0
 80120ae:	d001      	beq.n	80120b4 <__sbprintf+0x60>
 80120b0:	2501      	movs	r5, #1
 80120b2:	426d      	negs	r5, r5
 80120b4:	466b      	mov	r3, sp
 80120b6:	899a      	ldrh	r2, [r3, #12]
 80120b8:	2340      	movs	r3, #64	; 0x40
 80120ba:	421a      	tst	r2, r3
 80120bc:	d002      	beq.n	80120c4 <__sbprintf+0x70>
 80120be:	89a2      	ldrh	r2, [r4, #12]
 80120c0:	4313      	orrs	r3, r2
 80120c2:	81a3      	strh	r3, [r4, #12]
 80120c4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80120c6:	f7f9 fff8 	bl	800c0ba <__retarget_lock_close_recursive>
 80120ca:	0028      	movs	r0, r5
 80120cc:	4b02      	ldr	r3, [pc, #8]	; (80120d8 <__sbprintf+0x84>)
 80120ce:	449d      	add	sp, r3
 80120d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120d2:	46c0      	nop			; (mov r8, r8)
 80120d4:	fffffb94 	.word	0xfffffb94
 80120d8:	0000046c 	.word	0x0000046c

080120dc <__sfvwrite_r>:
 80120dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120de:	6893      	ldr	r3, [r2, #8]
 80120e0:	b087      	sub	sp, #28
 80120e2:	000c      	movs	r4, r1
 80120e4:	9002      	str	r0, [sp, #8]
 80120e6:	9204      	str	r2, [sp, #16]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d102      	bne.n	80120f2 <__sfvwrite_r+0x16>
 80120ec:	2000      	movs	r0, #0
 80120ee:	b007      	add	sp, #28
 80120f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f2:	898b      	ldrh	r3, [r1, #12]
 80120f4:	071b      	lsls	r3, r3, #28
 80120f6:	d557      	bpl.n	80121a8 <__sfvwrite_r+0xcc>
 80120f8:	690b      	ldr	r3, [r1, #16]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d054      	beq.n	80121a8 <__sfvwrite_r+0xcc>
 80120fe:	9b04      	ldr	r3, [sp, #16]
 8012100:	2202      	movs	r2, #2
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	9301      	str	r3, [sp, #4]
 8012106:	89a3      	ldrh	r3, [r4, #12]
 8012108:	001f      	movs	r7, r3
 801210a:	4017      	ands	r7, r2
 801210c:	4213      	tst	r3, r2
 801210e:	d171      	bne.n	80121f4 <__sfvwrite_r+0x118>
 8012110:	2201      	movs	r2, #1
 8012112:	2101      	movs	r1, #1
 8012114:	401a      	ands	r2, r3
 8012116:	420b      	tst	r3, r1
 8012118:	d100      	bne.n	801211c <__sfvwrite_r+0x40>
 801211a:	e0a5      	b.n	8012268 <__sfvwrite_r+0x18c>
 801211c:	0038      	movs	r0, r7
 801211e:	003e      	movs	r6, r7
 8012120:	9703      	str	r7, [sp, #12]
 8012122:	9b03      	ldr	r3, [sp, #12]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d100      	bne.n	801212a <__sfvwrite_r+0x4e>
 8012128:	e10b      	b.n	8012342 <__sfvwrite_r+0x266>
 801212a:	2800      	cmp	r0, #0
 801212c:	d10a      	bne.n	8012144 <__sfvwrite_r+0x68>
 801212e:	001a      	movs	r2, r3
 8012130:	210a      	movs	r1, #10
 8012132:	0030      	movs	r0, r6
 8012134:	f7fd feb0 	bl	800fe98 <memchr>
 8012138:	9b03      	ldr	r3, [sp, #12]
 801213a:	1c5f      	adds	r7, r3, #1
 801213c:	2800      	cmp	r0, #0
 801213e:	d001      	beq.n	8012144 <__sfvwrite_r+0x68>
 8012140:	3001      	adds	r0, #1
 8012142:	1b87      	subs	r7, r0, r6
 8012144:	9b03      	ldr	r3, [sp, #12]
 8012146:	9705      	str	r7, [sp, #20]
 8012148:	429f      	cmp	r7, r3
 801214a:	d900      	bls.n	801214e <__sfvwrite_r+0x72>
 801214c:	9305      	str	r3, [sp, #20]
 801214e:	6820      	ldr	r0, [r4, #0]
 8012150:	6922      	ldr	r2, [r4, #16]
 8012152:	68a5      	ldr	r5, [r4, #8]
 8012154:	6963      	ldr	r3, [r4, #20]
 8012156:	4290      	cmp	r0, r2
 8012158:	d800      	bhi.n	801215c <__sfvwrite_r+0x80>
 801215a:	e0fb      	b.n	8012354 <__sfvwrite_r+0x278>
 801215c:	9a05      	ldr	r2, [sp, #20]
 801215e:	18ed      	adds	r5, r5, r3
 8012160:	42aa      	cmp	r2, r5
 8012162:	dc00      	bgt.n	8012166 <__sfvwrite_r+0x8a>
 8012164:	e0f6      	b.n	8012354 <__sfvwrite_r+0x278>
 8012166:	0031      	movs	r1, r6
 8012168:	002a      	movs	r2, r5
 801216a:	f000 fa1e 	bl	80125aa <memmove>
 801216e:	6823      	ldr	r3, [r4, #0]
 8012170:	0021      	movs	r1, r4
 8012172:	195b      	adds	r3, r3, r5
 8012174:	9802      	ldr	r0, [sp, #8]
 8012176:	6023      	str	r3, [r4, #0]
 8012178:	f7fd fe14 	bl	800fda4 <_fflush_r>
 801217c:	2800      	cmp	r0, #0
 801217e:	d16e      	bne.n	801225e <__sfvwrite_r+0x182>
 8012180:	2001      	movs	r0, #1
 8012182:	1b7f      	subs	r7, r7, r5
 8012184:	d105      	bne.n	8012192 <__sfvwrite_r+0xb6>
 8012186:	0021      	movs	r1, r4
 8012188:	9802      	ldr	r0, [sp, #8]
 801218a:	f7fd fe0b 	bl	800fda4 <_fflush_r>
 801218e:	2800      	cmp	r0, #0
 8012190:	d165      	bne.n	801225e <__sfvwrite_r+0x182>
 8012192:	9b03      	ldr	r3, [sp, #12]
 8012194:	9a04      	ldr	r2, [sp, #16]
 8012196:	1b5b      	subs	r3, r3, r5
 8012198:	9303      	str	r3, [sp, #12]
 801219a:	9b04      	ldr	r3, [sp, #16]
 801219c:	1976      	adds	r6, r6, r5
 801219e:	689b      	ldr	r3, [r3, #8]
 80121a0:	1b5b      	subs	r3, r3, r5
 80121a2:	6093      	str	r3, [r2, #8]
 80121a4:	d1bd      	bne.n	8012122 <__sfvwrite_r+0x46>
 80121a6:	e7a1      	b.n	80120ec <__sfvwrite_r+0x10>
 80121a8:	0021      	movs	r1, r4
 80121aa:	9802      	ldr	r0, [sp, #8]
 80121ac:	f000 f932 	bl	8012414 <__swsetup_r>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	d0a4      	beq.n	80120fe <__sfvwrite_r+0x22>
 80121b4:	2001      	movs	r0, #1
 80121b6:	4240      	negs	r0, r0
 80121b8:	e799      	b.n	80120ee <__sfvwrite_r+0x12>
 80121ba:	9b01      	ldr	r3, [sp, #4]
 80121bc:	681e      	ldr	r6, [r3, #0]
 80121be:	685d      	ldr	r5, [r3, #4]
 80121c0:	3308      	adds	r3, #8
 80121c2:	9301      	str	r3, [sp, #4]
 80121c4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80121c6:	69e1      	ldr	r1, [r4, #28]
 80121c8:	2d00      	cmp	r5, #0
 80121ca:	d0f6      	beq.n	80121ba <__sfvwrite_r+0xde>
 80121cc:	4a6e      	ldr	r2, [pc, #440]	; (8012388 <__sfvwrite_r+0x2ac>)
 80121ce:	002b      	movs	r3, r5
 80121d0:	4295      	cmp	r5, r2
 80121d2:	d900      	bls.n	80121d6 <__sfvwrite_r+0xfa>
 80121d4:	0013      	movs	r3, r2
 80121d6:	0032      	movs	r2, r6
 80121d8:	9802      	ldr	r0, [sp, #8]
 80121da:	47b8      	blx	r7
 80121dc:	2800      	cmp	r0, #0
 80121de:	dd3e      	ble.n	801225e <__sfvwrite_r+0x182>
 80121e0:	9b04      	ldr	r3, [sp, #16]
 80121e2:	9a04      	ldr	r2, [sp, #16]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	1836      	adds	r6, r6, r0
 80121e8:	1a1b      	subs	r3, r3, r0
 80121ea:	1a2d      	subs	r5, r5, r0
 80121ec:	6093      	str	r3, [r2, #8]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d1e8      	bne.n	80121c4 <__sfvwrite_r+0xe8>
 80121f2:	e77b      	b.n	80120ec <__sfvwrite_r+0x10>
 80121f4:	2600      	movs	r6, #0
 80121f6:	0035      	movs	r5, r6
 80121f8:	e7e4      	b.n	80121c4 <__sfvwrite_r+0xe8>
 80121fa:	9b01      	ldr	r3, [sp, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	9303      	str	r3, [sp, #12]
 8012200:	9b01      	ldr	r3, [sp, #4]
 8012202:	685d      	ldr	r5, [r3, #4]
 8012204:	3308      	adds	r3, #8
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	220c      	movs	r2, #12
 801220a:	5ea3      	ldrsh	r3, [r4, r2]
 801220c:	6820      	ldr	r0, [r4, #0]
 801220e:	68a6      	ldr	r6, [r4, #8]
 8012210:	2d00      	cmp	r5, #0
 8012212:	d0f2      	beq.n	80121fa <__sfvwrite_r+0x11e>
 8012214:	2180      	movs	r1, #128	; 0x80
 8012216:	0089      	lsls	r1, r1, #2
 8012218:	b29a      	uxth	r2, r3
 801221a:	420b      	tst	r3, r1
 801221c:	d062      	beq.n	80122e4 <__sfvwrite_r+0x208>
 801221e:	42ae      	cmp	r6, r5
 8012220:	d837      	bhi.n	8012292 <__sfvwrite_r+0x1b6>
 8012222:	2390      	movs	r3, #144	; 0x90
 8012224:	00db      	lsls	r3, r3, #3
 8012226:	421a      	tst	r2, r3
 8012228:	d033      	beq.n	8012292 <__sfvwrite_r+0x1b6>
 801222a:	6921      	ldr	r1, [r4, #16]
 801222c:	1a43      	subs	r3, r0, r1
 801222e:	2003      	movs	r0, #3
 8012230:	9305      	str	r3, [sp, #20]
 8012232:	6963      	ldr	r3, [r4, #20]
 8012234:	4343      	muls	r3, r0
 8012236:	0fdf      	lsrs	r7, r3, #31
 8012238:	18ff      	adds	r7, r7, r3
 801223a:	9b05      	ldr	r3, [sp, #20]
 801223c:	107f      	asrs	r7, r7, #1
 801223e:	3301      	adds	r3, #1
 8012240:	195b      	adds	r3, r3, r5
 8012242:	42bb      	cmp	r3, r7
 8012244:	d900      	bls.n	8012248 <__sfvwrite_r+0x16c>
 8012246:	001f      	movs	r7, r3
 8012248:	0552      	lsls	r2, r2, #21
 801224a:	d53c      	bpl.n	80122c6 <__sfvwrite_r+0x1ea>
 801224c:	0039      	movs	r1, r7
 801224e:	9802      	ldr	r0, [sp, #8]
 8012250:	f7f8 fb3c 	bl	800a8cc <_malloc_r>
 8012254:	1e06      	subs	r6, r0, #0
 8012256:	d10a      	bne.n	801226e <__sfvwrite_r+0x192>
 8012258:	230c      	movs	r3, #12
 801225a:	9a02      	ldr	r2, [sp, #8]
 801225c:	6013      	str	r3, [r2, #0]
 801225e:	2340      	movs	r3, #64	; 0x40
 8012260:	89a2      	ldrh	r2, [r4, #12]
 8012262:	4313      	orrs	r3, r2
 8012264:	81a3      	strh	r3, [r4, #12]
 8012266:	e7a5      	b.n	80121b4 <__sfvwrite_r+0xd8>
 8012268:	0015      	movs	r5, r2
 801226a:	9203      	str	r2, [sp, #12]
 801226c:	e7cc      	b.n	8012208 <__sfvwrite_r+0x12c>
 801226e:	9a05      	ldr	r2, [sp, #20]
 8012270:	6921      	ldr	r1, [r4, #16]
 8012272:	f7f9 ff30 	bl	800c0d6 <memcpy>
 8012276:	89a2      	ldrh	r2, [r4, #12]
 8012278:	4b44      	ldr	r3, [pc, #272]	; (801238c <__sfvwrite_r+0x2b0>)
 801227a:	401a      	ands	r2, r3
 801227c:	2380      	movs	r3, #128	; 0x80
 801227e:	4313      	orrs	r3, r2
 8012280:	81a3      	strh	r3, [r4, #12]
 8012282:	9b05      	ldr	r3, [sp, #20]
 8012284:	6126      	str	r6, [r4, #16]
 8012286:	18f6      	adds	r6, r6, r3
 8012288:	6026      	str	r6, [r4, #0]
 801228a:	002e      	movs	r6, r5
 801228c:	6167      	str	r7, [r4, #20]
 801228e:	1aff      	subs	r7, r7, r3
 8012290:	60a7      	str	r7, [r4, #8]
 8012292:	002f      	movs	r7, r5
 8012294:	42ae      	cmp	r6, r5
 8012296:	d900      	bls.n	801229a <__sfvwrite_r+0x1be>
 8012298:	002e      	movs	r6, r5
 801229a:	0032      	movs	r2, r6
 801229c:	9903      	ldr	r1, [sp, #12]
 801229e:	6820      	ldr	r0, [r4, #0]
 80122a0:	f000 f983 	bl	80125aa <memmove>
 80122a4:	68a3      	ldr	r3, [r4, #8]
 80122a6:	1b9b      	subs	r3, r3, r6
 80122a8:	60a3      	str	r3, [r4, #8]
 80122aa:	6823      	ldr	r3, [r4, #0]
 80122ac:	199b      	adds	r3, r3, r6
 80122ae:	6023      	str	r3, [r4, #0]
 80122b0:	9b03      	ldr	r3, [sp, #12]
 80122b2:	9a04      	ldr	r2, [sp, #16]
 80122b4:	19db      	adds	r3, r3, r7
 80122b6:	9303      	str	r3, [sp, #12]
 80122b8:	9b04      	ldr	r3, [sp, #16]
 80122ba:	1bed      	subs	r5, r5, r7
 80122bc:	689b      	ldr	r3, [r3, #8]
 80122be:	1bdb      	subs	r3, r3, r7
 80122c0:	6093      	str	r3, [r2, #8]
 80122c2:	d1a1      	bne.n	8012208 <__sfvwrite_r+0x12c>
 80122c4:	e712      	b.n	80120ec <__sfvwrite_r+0x10>
 80122c6:	003a      	movs	r2, r7
 80122c8:	9802      	ldr	r0, [sp, #8]
 80122ca:	f7fe fd5d 	bl	8010d88 <_realloc_r>
 80122ce:	1e06      	subs	r6, r0, #0
 80122d0:	d1d7      	bne.n	8012282 <__sfvwrite_r+0x1a6>
 80122d2:	6921      	ldr	r1, [r4, #16]
 80122d4:	9802      	ldr	r0, [sp, #8]
 80122d6:	f7f9 ff79 	bl	800c1cc <_free_r>
 80122da:	2280      	movs	r2, #128	; 0x80
 80122dc:	89a3      	ldrh	r3, [r4, #12]
 80122de:	4393      	bics	r3, r2
 80122e0:	81a3      	strh	r3, [r4, #12]
 80122e2:	e7b9      	b.n	8012258 <__sfvwrite_r+0x17c>
 80122e4:	6923      	ldr	r3, [r4, #16]
 80122e6:	4283      	cmp	r3, r0
 80122e8:	d302      	bcc.n	80122f0 <__sfvwrite_r+0x214>
 80122ea:	6967      	ldr	r7, [r4, #20]
 80122ec:	42af      	cmp	r7, r5
 80122ee:	d916      	bls.n	801231e <__sfvwrite_r+0x242>
 80122f0:	42ae      	cmp	r6, r5
 80122f2:	d900      	bls.n	80122f6 <__sfvwrite_r+0x21a>
 80122f4:	002e      	movs	r6, r5
 80122f6:	0032      	movs	r2, r6
 80122f8:	9903      	ldr	r1, [sp, #12]
 80122fa:	f000 f956 	bl	80125aa <memmove>
 80122fe:	68a3      	ldr	r3, [r4, #8]
 8012300:	6822      	ldr	r2, [r4, #0]
 8012302:	1b9b      	subs	r3, r3, r6
 8012304:	1992      	adds	r2, r2, r6
 8012306:	0037      	movs	r7, r6
 8012308:	60a3      	str	r3, [r4, #8]
 801230a:	6022      	str	r2, [r4, #0]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d1cf      	bne.n	80122b0 <__sfvwrite_r+0x1d4>
 8012310:	0021      	movs	r1, r4
 8012312:	9802      	ldr	r0, [sp, #8]
 8012314:	f7fd fd46 	bl	800fda4 <_fflush_r>
 8012318:	2800      	cmp	r0, #0
 801231a:	d0c9      	beq.n	80122b0 <__sfvwrite_r+0x1d4>
 801231c:	e79f      	b.n	801225e <__sfvwrite_r+0x182>
 801231e:	4b1c      	ldr	r3, [pc, #112]	; (8012390 <__sfvwrite_r+0x2b4>)
 8012320:	0028      	movs	r0, r5
 8012322:	429d      	cmp	r5, r3
 8012324:	d900      	bls.n	8012328 <__sfvwrite_r+0x24c>
 8012326:	481b      	ldr	r0, [pc, #108]	; (8012394 <__sfvwrite_r+0x2b8>)
 8012328:	0039      	movs	r1, r7
 801232a:	f7ed ff91 	bl	8000250 <__divsi3>
 801232e:	003b      	movs	r3, r7
 8012330:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012332:	4343      	muls	r3, r0
 8012334:	9a03      	ldr	r2, [sp, #12]
 8012336:	69e1      	ldr	r1, [r4, #28]
 8012338:	9802      	ldr	r0, [sp, #8]
 801233a:	47b0      	blx	r6
 801233c:	1e07      	subs	r7, r0, #0
 801233e:	dcb7      	bgt.n	80122b0 <__sfvwrite_r+0x1d4>
 8012340:	e78d      	b.n	801225e <__sfvwrite_r+0x182>
 8012342:	9b01      	ldr	r3, [sp, #4]
 8012344:	2000      	movs	r0, #0
 8012346:	681e      	ldr	r6, [r3, #0]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	9303      	str	r3, [sp, #12]
 801234c:	9b01      	ldr	r3, [sp, #4]
 801234e:	3308      	adds	r3, #8
 8012350:	9301      	str	r3, [sp, #4]
 8012352:	e6e6      	b.n	8012122 <__sfvwrite_r+0x46>
 8012354:	9a05      	ldr	r2, [sp, #20]
 8012356:	4293      	cmp	r3, r2
 8012358:	dc08      	bgt.n	801236c <__sfvwrite_r+0x290>
 801235a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801235c:	0032      	movs	r2, r6
 801235e:	69e1      	ldr	r1, [r4, #28]
 8012360:	9802      	ldr	r0, [sp, #8]
 8012362:	47a8      	blx	r5
 8012364:	1e05      	subs	r5, r0, #0
 8012366:	dd00      	ble.n	801236a <__sfvwrite_r+0x28e>
 8012368:	e70a      	b.n	8012180 <__sfvwrite_r+0xa4>
 801236a:	e778      	b.n	801225e <__sfvwrite_r+0x182>
 801236c:	9a05      	ldr	r2, [sp, #20]
 801236e:	0031      	movs	r1, r6
 8012370:	f000 f91b 	bl	80125aa <memmove>
 8012374:	9a05      	ldr	r2, [sp, #20]
 8012376:	68a3      	ldr	r3, [r4, #8]
 8012378:	0015      	movs	r5, r2
 801237a:	1a9b      	subs	r3, r3, r2
 801237c:	60a3      	str	r3, [r4, #8]
 801237e:	6823      	ldr	r3, [r4, #0]
 8012380:	189b      	adds	r3, r3, r2
 8012382:	6023      	str	r3, [r4, #0]
 8012384:	e6fc      	b.n	8012180 <__sfvwrite_r+0xa4>
 8012386:	46c0      	nop			; (mov r8, r8)
 8012388:	7ffffc00 	.word	0x7ffffc00
 801238c:	fffffb7f 	.word	0xfffffb7f
 8012390:	7ffffffe 	.word	0x7ffffffe
 8012394:	7fffffff 	.word	0x7fffffff

08012398 <__submore>:
 8012398:	000b      	movs	r3, r1
 801239a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801239c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 801239e:	3340      	adds	r3, #64	; 0x40
 80123a0:	000c      	movs	r4, r1
 80123a2:	429d      	cmp	r5, r3
 80123a4:	d11c      	bne.n	80123e0 <__submore+0x48>
 80123a6:	2680      	movs	r6, #128	; 0x80
 80123a8:	00f6      	lsls	r6, r6, #3
 80123aa:	0031      	movs	r1, r6
 80123ac:	f7f8 fa8e 	bl	800a8cc <_malloc_r>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d102      	bne.n	80123ba <__submore+0x22>
 80123b4:	2001      	movs	r0, #1
 80123b6:	4240      	negs	r0, r0
 80123b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80123ba:	0023      	movs	r3, r4
 80123bc:	6320      	str	r0, [r4, #48]	; 0x30
 80123be:	6366      	str	r6, [r4, #52]	; 0x34
 80123c0:	3342      	adds	r3, #66	; 0x42
 80123c2:	781a      	ldrb	r2, [r3, #0]
 80123c4:	4b10      	ldr	r3, [pc, #64]	; (8012408 <__submore+0x70>)
 80123c6:	54c2      	strb	r2, [r0, r3]
 80123c8:	0023      	movs	r3, r4
 80123ca:	3341      	adds	r3, #65	; 0x41
 80123cc:	781a      	ldrb	r2, [r3, #0]
 80123ce:	4b0f      	ldr	r3, [pc, #60]	; (801240c <__submore+0x74>)
 80123d0:	54c2      	strb	r2, [r0, r3]
 80123d2:	782a      	ldrb	r2, [r5, #0]
 80123d4:	4b0e      	ldr	r3, [pc, #56]	; (8012410 <__submore+0x78>)
 80123d6:	54c2      	strb	r2, [r0, r3]
 80123d8:	18c0      	adds	r0, r0, r3
 80123da:	6020      	str	r0, [r4, #0]
 80123dc:	2000      	movs	r0, #0
 80123de:	e7eb      	b.n	80123b8 <__submore+0x20>
 80123e0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80123e2:	0029      	movs	r1, r5
 80123e4:	0073      	lsls	r3, r6, #1
 80123e6:	001a      	movs	r2, r3
 80123e8:	9301      	str	r3, [sp, #4]
 80123ea:	f7fe fccd 	bl	8010d88 <_realloc_r>
 80123ee:	1e05      	subs	r5, r0, #0
 80123f0:	d0e0      	beq.n	80123b4 <__submore+0x1c>
 80123f2:	1987      	adds	r7, r0, r6
 80123f4:	0001      	movs	r1, r0
 80123f6:	0032      	movs	r2, r6
 80123f8:	0038      	movs	r0, r7
 80123fa:	f7f9 fe6c 	bl	800c0d6 <memcpy>
 80123fe:	9b01      	ldr	r3, [sp, #4]
 8012400:	6027      	str	r7, [r4, #0]
 8012402:	6325      	str	r5, [r4, #48]	; 0x30
 8012404:	6363      	str	r3, [r4, #52]	; 0x34
 8012406:	e7e9      	b.n	80123dc <__submore+0x44>
 8012408:	000003ff 	.word	0x000003ff
 801240c:	000003fe 	.word	0x000003fe
 8012410:	000003fd 	.word	0x000003fd

08012414 <__swsetup_r>:
 8012414:	4b30      	ldr	r3, [pc, #192]	; (80124d8 <__swsetup_r+0xc4>)
 8012416:	b570      	push	{r4, r5, r6, lr}
 8012418:	0005      	movs	r5, r0
 801241a:	6818      	ldr	r0, [r3, #0]
 801241c:	000c      	movs	r4, r1
 801241e:	2800      	cmp	r0, #0
 8012420:	d004      	beq.n	801242c <__swsetup_r+0x18>
 8012422:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012424:	2b00      	cmp	r3, #0
 8012426:	d101      	bne.n	801242c <__swsetup_r+0x18>
 8012428:	f7f9 fc64 	bl	800bcf4 <__sinit>
 801242c:	230c      	movs	r3, #12
 801242e:	5ee2      	ldrsh	r2, [r4, r3]
 8012430:	b293      	uxth	r3, r2
 8012432:	0711      	lsls	r1, r2, #28
 8012434:	d423      	bmi.n	801247e <__swsetup_r+0x6a>
 8012436:	06d9      	lsls	r1, r3, #27
 8012438:	d407      	bmi.n	801244a <__swsetup_r+0x36>
 801243a:	2309      	movs	r3, #9
 801243c:	2001      	movs	r0, #1
 801243e:	602b      	str	r3, [r5, #0]
 8012440:	3337      	adds	r3, #55	; 0x37
 8012442:	4313      	orrs	r3, r2
 8012444:	81a3      	strh	r3, [r4, #12]
 8012446:	4240      	negs	r0, r0
 8012448:	bd70      	pop	{r4, r5, r6, pc}
 801244a:	075b      	lsls	r3, r3, #29
 801244c:	d513      	bpl.n	8012476 <__swsetup_r+0x62>
 801244e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012450:	2900      	cmp	r1, #0
 8012452:	d008      	beq.n	8012466 <__swsetup_r+0x52>
 8012454:	0023      	movs	r3, r4
 8012456:	3340      	adds	r3, #64	; 0x40
 8012458:	4299      	cmp	r1, r3
 801245a:	d002      	beq.n	8012462 <__swsetup_r+0x4e>
 801245c:	0028      	movs	r0, r5
 801245e:	f7f9 feb5 	bl	800c1cc <_free_r>
 8012462:	2300      	movs	r3, #0
 8012464:	6323      	str	r3, [r4, #48]	; 0x30
 8012466:	2224      	movs	r2, #36	; 0x24
 8012468:	89a3      	ldrh	r3, [r4, #12]
 801246a:	4393      	bics	r3, r2
 801246c:	81a3      	strh	r3, [r4, #12]
 801246e:	2300      	movs	r3, #0
 8012470:	6063      	str	r3, [r4, #4]
 8012472:	6923      	ldr	r3, [r4, #16]
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	2308      	movs	r3, #8
 8012478:	89a2      	ldrh	r2, [r4, #12]
 801247a:	4313      	orrs	r3, r2
 801247c:	81a3      	strh	r3, [r4, #12]
 801247e:	6923      	ldr	r3, [r4, #16]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d10b      	bne.n	801249c <__swsetup_r+0x88>
 8012484:	21a0      	movs	r1, #160	; 0xa0
 8012486:	2280      	movs	r2, #128	; 0x80
 8012488:	89a3      	ldrh	r3, [r4, #12]
 801248a:	0089      	lsls	r1, r1, #2
 801248c:	0092      	lsls	r2, r2, #2
 801248e:	400b      	ands	r3, r1
 8012490:	4293      	cmp	r3, r2
 8012492:	d003      	beq.n	801249c <__swsetup_r+0x88>
 8012494:	0021      	movs	r1, r4
 8012496:	0028      	movs	r0, r5
 8012498:	f000 f8e8 	bl	801266c <__smakebuf_r>
 801249c:	220c      	movs	r2, #12
 801249e:	5ea3      	ldrsh	r3, [r4, r2]
 80124a0:	2001      	movs	r0, #1
 80124a2:	001a      	movs	r2, r3
 80124a4:	b299      	uxth	r1, r3
 80124a6:	4002      	ands	r2, r0
 80124a8:	4203      	tst	r3, r0
 80124aa:	d00f      	beq.n	80124cc <__swsetup_r+0xb8>
 80124ac:	2200      	movs	r2, #0
 80124ae:	60a2      	str	r2, [r4, #8]
 80124b0:	6962      	ldr	r2, [r4, #20]
 80124b2:	4252      	negs	r2, r2
 80124b4:	61a2      	str	r2, [r4, #24]
 80124b6:	2000      	movs	r0, #0
 80124b8:	6922      	ldr	r2, [r4, #16]
 80124ba:	4282      	cmp	r2, r0
 80124bc:	d1c4      	bne.n	8012448 <__swsetup_r+0x34>
 80124be:	0609      	lsls	r1, r1, #24
 80124c0:	d5c2      	bpl.n	8012448 <__swsetup_r+0x34>
 80124c2:	2240      	movs	r2, #64	; 0x40
 80124c4:	4313      	orrs	r3, r2
 80124c6:	81a3      	strh	r3, [r4, #12]
 80124c8:	3801      	subs	r0, #1
 80124ca:	e7bd      	b.n	8012448 <__swsetup_r+0x34>
 80124cc:	0788      	lsls	r0, r1, #30
 80124ce:	d400      	bmi.n	80124d2 <__swsetup_r+0xbe>
 80124d0:	6962      	ldr	r2, [r4, #20]
 80124d2:	60a2      	str	r2, [r4, #8]
 80124d4:	e7ef      	b.n	80124b6 <__swsetup_r+0xa2>
 80124d6:	46c0      	nop			; (mov r8, r8)
 80124d8:	200006d0 	.word	0x200006d0

080124dc <__fputwc>:
 80124dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124de:	b085      	sub	sp, #20
 80124e0:	000e      	movs	r6, r1
 80124e2:	0015      	movs	r5, r2
 80124e4:	9001      	str	r0, [sp, #4]
 80124e6:	f7f9 fd55 	bl	800bf94 <__locale_mb_cur_max>
 80124ea:	0004      	movs	r4, r0
 80124ec:	2801      	cmp	r0, #1
 80124ee:	d119      	bne.n	8012524 <__fputwc+0x48>
 80124f0:	1e73      	subs	r3, r6, #1
 80124f2:	2bfe      	cmp	r3, #254	; 0xfe
 80124f4:	d816      	bhi.n	8012524 <__fputwc+0x48>
 80124f6:	ab02      	add	r3, sp, #8
 80124f8:	711e      	strb	r6, [r3, #4]
 80124fa:	2700      	movs	r7, #0
 80124fc:	42a7      	cmp	r7, r4
 80124fe:	d020      	beq.n	8012542 <__fputwc+0x66>
 8012500:	ab03      	add	r3, sp, #12
 8012502:	5dd9      	ldrb	r1, [r3, r7]
 8012504:	68ab      	ldr	r3, [r5, #8]
 8012506:	3b01      	subs	r3, #1
 8012508:	60ab      	str	r3, [r5, #8]
 801250a:	2b00      	cmp	r3, #0
 801250c:	da04      	bge.n	8012518 <__fputwc+0x3c>
 801250e:	69aa      	ldr	r2, [r5, #24]
 8012510:	4293      	cmp	r3, r2
 8012512:	db19      	blt.n	8012548 <__fputwc+0x6c>
 8012514:	290a      	cmp	r1, #10
 8012516:	d017      	beq.n	8012548 <__fputwc+0x6c>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	602a      	str	r2, [r5, #0]
 801251e:	7019      	strb	r1, [r3, #0]
 8012520:	3701      	adds	r7, #1
 8012522:	e7eb      	b.n	80124fc <__fputwc+0x20>
 8012524:	002b      	movs	r3, r5
 8012526:	0032      	movs	r2, r6
 8012528:	9801      	ldr	r0, [sp, #4]
 801252a:	335c      	adds	r3, #92	; 0x5c
 801252c:	a903      	add	r1, sp, #12
 801252e:	f000 f857 	bl	80125e0 <_wcrtomb_r>
 8012532:	0004      	movs	r4, r0
 8012534:	1c43      	adds	r3, r0, #1
 8012536:	d1e0      	bne.n	80124fa <__fputwc+0x1e>
 8012538:	2340      	movs	r3, #64	; 0x40
 801253a:	0006      	movs	r6, r0
 801253c:	89aa      	ldrh	r2, [r5, #12]
 801253e:	4313      	orrs	r3, r2
 8012540:	81ab      	strh	r3, [r5, #12]
 8012542:	0030      	movs	r0, r6
 8012544:	b005      	add	sp, #20
 8012546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012548:	002a      	movs	r2, r5
 801254a:	9801      	ldr	r0, [sp, #4]
 801254c:	f000 f8cc 	bl	80126e8 <__swbuf_r>
 8012550:	1c43      	adds	r3, r0, #1
 8012552:	d1e5      	bne.n	8012520 <__fputwc+0x44>
 8012554:	0006      	movs	r6, r0
 8012556:	e7f4      	b.n	8012542 <__fputwc+0x66>

08012558 <_fputwc_r>:
 8012558:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801255a:	b570      	push	{r4, r5, r6, lr}
 801255c:	0005      	movs	r5, r0
 801255e:	000e      	movs	r6, r1
 8012560:	0014      	movs	r4, r2
 8012562:	07db      	lsls	r3, r3, #31
 8012564:	d405      	bmi.n	8012572 <_fputwc_r+0x1a>
 8012566:	8993      	ldrh	r3, [r2, #12]
 8012568:	059b      	lsls	r3, r3, #22
 801256a:	d402      	bmi.n	8012572 <_fputwc_r+0x1a>
 801256c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 801256e:	f7f9 fda5 	bl	800c0bc <__retarget_lock_acquire_recursive>
 8012572:	230c      	movs	r3, #12
 8012574:	5ee2      	ldrsh	r2, [r4, r3]
 8012576:	2380      	movs	r3, #128	; 0x80
 8012578:	019b      	lsls	r3, r3, #6
 801257a:	421a      	tst	r2, r3
 801257c:	d104      	bne.n	8012588 <_fputwc_r+0x30>
 801257e:	431a      	orrs	r2, r3
 8012580:	81a2      	strh	r2, [r4, #12]
 8012582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012584:	4313      	orrs	r3, r2
 8012586:	6663      	str	r3, [r4, #100]	; 0x64
 8012588:	0028      	movs	r0, r5
 801258a:	0022      	movs	r2, r4
 801258c:	0031      	movs	r1, r6
 801258e:	f7ff ffa5 	bl	80124dc <__fputwc>
 8012592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012594:	0005      	movs	r5, r0
 8012596:	07db      	lsls	r3, r3, #31
 8012598:	d405      	bmi.n	80125a6 <_fputwc_r+0x4e>
 801259a:	89a3      	ldrh	r3, [r4, #12]
 801259c:	059b      	lsls	r3, r3, #22
 801259e:	d402      	bmi.n	80125a6 <_fputwc_r+0x4e>
 80125a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80125a2:	f7f9 fd8c 	bl	800c0be <__retarget_lock_release_recursive>
 80125a6:	0028      	movs	r0, r5
 80125a8:	bd70      	pop	{r4, r5, r6, pc}

080125aa <memmove>:
 80125aa:	b510      	push	{r4, lr}
 80125ac:	4288      	cmp	r0, r1
 80125ae:	d902      	bls.n	80125b6 <memmove+0xc>
 80125b0:	188b      	adds	r3, r1, r2
 80125b2:	4298      	cmp	r0, r3
 80125b4:	d303      	bcc.n	80125be <memmove+0x14>
 80125b6:	2300      	movs	r3, #0
 80125b8:	e007      	b.n	80125ca <memmove+0x20>
 80125ba:	5c8b      	ldrb	r3, [r1, r2]
 80125bc:	5483      	strb	r3, [r0, r2]
 80125be:	3a01      	subs	r2, #1
 80125c0:	d2fb      	bcs.n	80125ba <memmove+0x10>
 80125c2:	bd10      	pop	{r4, pc}
 80125c4:	5ccc      	ldrb	r4, [r1, r3]
 80125c6:	54c4      	strb	r4, [r0, r3]
 80125c8:	3301      	adds	r3, #1
 80125ca:	429a      	cmp	r2, r3
 80125cc:	d1fa      	bne.n	80125c4 <memmove+0x1a>
 80125ce:	e7f8      	b.n	80125c2 <memmove+0x18>

080125d0 <abort>:
 80125d0:	2006      	movs	r0, #6
 80125d2:	b510      	push	{r4, lr}
 80125d4:	f000 f906 	bl	80127e4 <raise>
 80125d8:	2001      	movs	r0, #1
 80125da:	f7f1 fb29 	bl	8003c30 <_exit>
	...

080125e0 <_wcrtomb_r>:
 80125e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80125e2:	001d      	movs	r5, r3
 80125e4:	4b09      	ldr	r3, [pc, #36]	; (801260c <_wcrtomb_r+0x2c>)
 80125e6:	0004      	movs	r4, r0
 80125e8:	33e0      	adds	r3, #224	; 0xe0
 80125ea:	681e      	ldr	r6, [r3, #0]
 80125ec:	002b      	movs	r3, r5
 80125ee:	2900      	cmp	r1, #0
 80125f0:	d101      	bne.n	80125f6 <_wcrtomb_r+0x16>
 80125f2:	000a      	movs	r2, r1
 80125f4:	a901      	add	r1, sp, #4
 80125f6:	0020      	movs	r0, r4
 80125f8:	47b0      	blx	r6
 80125fa:	1c43      	adds	r3, r0, #1
 80125fc:	d103      	bne.n	8012606 <_wcrtomb_r+0x26>
 80125fe:	2300      	movs	r3, #0
 8012600:	602b      	str	r3, [r5, #0]
 8012602:	338a      	adds	r3, #138	; 0x8a
 8012604:	6023      	str	r3, [r4, #0]
 8012606:	b004      	add	sp, #16
 8012608:	bd70      	pop	{r4, r5, r6, pc}
 801260a:	46c0      	nop			; (mov r8, r8)
 801260c:	20000444 	.word	0x20000444

08012610 <__swhatbuf_r>:
 8012610:	b570      	push	{r4, r5, r6, lr}
 8012612:	000e      	movs	r6, r1
 8012614:	001d      	movs	r5, r3
 8012616:	230e      	movs	r3, #14
 8012618:	5ec9      	ldrsh	r1, [r1, r3]
 801261a:	0014      	movs	r4, r2
 801261c:	b096      	sub	sp, #88	; 0x58
 801261e:	2900      	cmp	r1, #0
 8012620:	da09      	bge.n	8012636 <__swhatbuf_r+0x26>
 8012622:	89b2      	ldrh	r2, [r6, #12]
 8012624:	2380      	movs	r3, #128	; 0x80
 8012626:	0011      	movs	r1, r2
 8012628:	4019      	ands	r1, r3
 801262a:	421a      	tst	r2, r3
 801262c:	d018      	beq.n	8012660 <__swhatbuf_r+0x50>
 801262e:	2100      	movs	r1, #0
 8012630:	3b40      	subs	r3, #64	; 0x40
 8012632:	0008      	movs	r0, r1
 8012634:	e010      	b.n	8012658 <__swhatbuf_r+0x48>
 8012636:	466a      	mov	r2, sp
 8012638:	f000 f8de 	bl	80127f8 <_fstat_r>
 801263c:	2800      	cmp	r0, #0
 801263e:	dbf0      	blt.n	8012622 <__swhatbuf_r+0x12>
 8012640:	23f0      	movs	r3, #240	; 0xf0
 8012642:	9901      	ldr	r1, [sp, #4]
 8012644:	021b      	lsls	r3, r3, #8
 8012646:	4019      	ands	r1, r3
 8012648:	4b07      	ldr	r3, [pc, #28]	; (8012668 <__swhatbuf_r+0x58>)
 801264a:	2080      	movs	r0, #128	; 0x80
 801264c:	18c9      	adds	r1, r1, r3
 801264e:	424b      	negs	r3, r1
 8012650:	4159      	adcs	r1, r3
 8012652:	2380      	movs	r3, #128	; 0x80
 8012654:	0100      	lsls	r0, r0, #4
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	6029      	str	r1, [r5, #0]
 801265a:	6023      	str	r3, [r4, #0]
 801265c:	b016      	add	sp, #88	; 0x58
 801265e:	bd70      	pop	{r4, r5, r6, pc}
 8012660:	2380      	movs	r3, #128	; 0x80
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	e7e5      	b.n	8012632 <__swhatbuf_r+0x22>
 8012666:	46c0      	nop			; (mov r8, r8)
 8012668:	ffffe000 	.word	0xffffe000

0801266c <__smakebuf_r>:
 801266c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801266e:	2602      	movs	r6, #2
 8012670:	898b      	ldrh	r3, [r1, #12]
 8012672:	0005      	movs	r5, r0
 8012674:	000c      	movs	r4, r1
 8012676:	4233      	tst	r3, r6
 8012678:	d006      	beq.n	8012688 <__smakebuf_r+0x1c>
 801267a:	0023      	movs	r3, r4
 801267c:	3343      	adds	r3, #67	; 0x43
 801267e:	6023      	str	r3, [r4, #0]
 8012680:	6123      	str	r3, [r4, #16]
 8012682:	2301      	movs	r3, #1
 8012684:	6163      	str	r3, [r4, #20]
 8012686:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8012688:	466a      	mov	r2, sp
 801268a:	ab01      	add	r3, sp, #4
 801268c:	f7ff ffc0 	bl	8012610 <__swhatbuf_r>
 8012690:	9900      	ldr	r1, [sp, #0]
 8012692:	0007      	movs	r7, r0
 8012694:	0028      	movs	r0, r5
 8012696:	f7f8 f919 	bl	800a8cc <_malloc_r>
 801269a:	2800      	cmp	r0, #0
 801269c:	d108      	bne.n	80126b0 <__smakebuf_r+0x44>
 801269e:	220c      	movs	r2, #12
 80126a0:	5ea3      	ldrsh	r3, [r4, r2]
 80126a2:	059a      	lsls	r2, r3, #22
 80126a4:	d4ef      	bmi.n	8012686 <__smakebuf_r+0x1a>
 80126a6:	2203      	movs	r2, #3
 80126a8:	4393      	bics	r3, r2
 80126aa:	431e      	orrs	r6, r3
 80126ac:	81a6      	strh	r6, [r4, #12]
 80126ae:	e7e4      	b.n	801267a <__smakebuf_r+0xe>
 80126b0:	2380      	movs	r3, #128	; 0x80
 80126b2:	89a2      	ldrh	r2, [r4, #12]
 80126b4:	6020      	str	r0, [r4, #0]
 80126b6:	4313      	orrs	r3, r2
 80126b8:	81a3      	strh	r3, [r4, #12]
 80126ba:	9b00      	ldr	r3, [sp, #0]
 80126bc:	6120      	str	r0, [r4, #16]
 80126be:	6163      	str	r3, [r4, #20]
 80126c0:	9b01      	ldr	r3, [sp, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d00c      	beq.n	80126e0 <__smakebuf_r+0x74>
 80126c6:	0028      	movs	r0, r5
 80126c8:	230e      	movs	r3, #14
 80126ca:	5ee1      	ldrsh	r1, [r4, r3]
 80126cc:	f000 f8a6 	bl	801281c <_isatty_r>
 80126d0:	2800      	cmp	r0, #0
 80126d2:	d005      	beq.n	80126e0 <__smakebuf_r+0x74>
 80126d4:	2303      	movs	r3, #3
 80126d6:	89a2      	ldrh	r2, [r4, #12]
 80126d8:	439a      	bics	r2, r3
 80126da:	3b02      	subs	r3, #2
 80126dc:	4313      	orrs	r3, r2
 80126de:	81a3      	strh	r3, [r4, #12]
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	433b      	orrs	r3, r7
 80126e4:	81a3      	strh	r3, [r4, #12]
 80126e6:	e7ce      	b.n	8012686 <__smakebuf_r+0x1a>

080126e8 <__swbuf_r>:
 80126e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126ea:	0006      	movs	r6, r0
 80126ec:	000d      	movs	r5, r1
 80126ee:	0014      	movs	r4, r2
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d004      	beq.n	80126fe <__swbuf_r+0x16>
 80126f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d101      	bne.n	80126fe <__swbuf_r+0x16>
 80126fa:	f7f9 fafb 	bl	800bcf4 <__sinit>
 80126fe:	69a3      	ldr	r3, [r4, #24]
 8012700:	60a3      	str	r3, [r4, #8]
 8012702:	89a3      	ldrh	r3, [r4, #12]
 8012704:	071b      	lsls	r3, r3, #28
 8012706:	d52e      	bpl.n	8012766 <__swbuf_r+0x7e>
 8012708:	6923      	ldr	r3, [r4, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d02b      	beq.n	8012766 <__swbuf_r+0x7e>
 801270e:	230c      	movs	r3, #12
 8012710:	5ee2      	ldrsh	r2, [r4, r3]
 8012712:	2380      	movs	r3, #128	; 0x80
 8012714:	019b      	lsls	r3, r3, #6
 8012716:	b2ef      	uxtb	r7, r5
 8012718:	b2ed      	uxtb	r5, r5
 801271a:	421a      	tst	r2, r3
 801271c:	d02c      	beq.n	8012778 <__swbuf_r+0x90>
 801271e:	6923      	ldr	r3, [r4, #16]
 8012720:	6820      	ldr	r0, [r4, #0]
 8012722:	1ac0      	subs	r0, r0, r3
 8012724:	6963      	ldr	r3, [r4, #20]
 8012726:	4283      	cmp	r3, r0
 8012728:	dc05      	bgt.n	8012736 <__swbuf_r+0x4e>
 801272a:	0021      	movs	r1, r4
 801272c:	0030      	movs	r0, r6
 801272e:	f7fd fb39 	bl	800fda4 <_fflush_r>
 8012732:	2800      	cmp	r0, #0
 8012734:	d11d      	bne.n	8012772 <__swbuf_r+0x8a>
 8012736:	68a3      	ldr	r3, [r4, #8]
 8012738:	3001      	adds	r0, #1
 801273a:	3b01      	subs	r3, #1
 801273c:	60a3      	str	r3, [r4, #8]
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	6022      	str	r2, [r4, #0]
 8012744:	701f      	strb	r7, [r3, #0]
 8012746:	6963      	ldr	r3, [r4, #20]
 8012748:	4283      	cmp	r3, r0
 801274a:	d004      	beq.n	8012756 <__swbuf_r+0x6e>
 801274c:	89a3      	ldrh	r3, [r4, #12]
 801274e:	07db      	lsls	r3, r3, #31
 8012750:	d507      	bpl.n	8012762 <__swbuf_r+0x7a>
 8012752:	2d0a      	cmp	r5, #10
 8012754:	d105      	bne.n	8012762 <__swbuf_r+0x7a>
 8012756:	0021      	movs	r1, r4
 8012758:	0030      	movs	r0, r6
 801275a:	f7fd fb23 	bl	800fda4 <_fflush_r>
 801275e:	2800      	cmp	r0, #0
 8012760:	d107      	bne.n	8012772 <__swbuf_r+0x8a>
 8012762:	0028      	movs	r0, r5
 8012764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012766:	0021      	movs	r1, r4
 8012768:	0030      	movs	r0, r6
 801276a:	f7ff fe53 	bl	8012414 <__swsetup_r>
 801276e:	2800      	cmp	r0, #0
 8012770:	d0cd      	beq.n	801270e <__swbuf_r+0x26>
 8012772:	2501      	movs	r5, #1
 8012774:	426d      	negs	r5, r5
 8012776:	e7f4      	b.n	8012762 <__swbuf_r+0x7a>
 8012778:	4313      	orrs	r3, r2
 801277a:	81a3      	strh	r3, [r4, #12]
 801277c:	4a02      	ldr	r2, [pc, #8]	; (8012788 <__swbuf_r+0xa0>)
 801277e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012780:	4013      	ands	r3, r2
 8012782:	6663      	str	r3, [r4, #100]	; 0x64
 8012784:	e7cb      	b.n	801271e <__swbuf_r+0x36>
 8012786:	46c0      	nop			; (mov r8, r8)
 8012788:	ffffdfff 	.word	0xffffdfff

0801278c <_raise_r>:
 801278c:	b570      	push	{r4, r5, r6, lr}
 801278e:	0004      	movs	r4, r0
 8012790:	000d      	movs	r5, r1
 8012792:	291f      	cmp	r1, #31
 8012794:	d904      	bls.n	80127a0 <_raise_r+0x14>
 8012796:	2316      	movs	r3, #22
 8012798:	6003      	str	r3, [r0, #0]
 801279a:	2001      	movs	r0, #1
 801279c:	4240      	negs	r0, r0
 801279e:	bd70      	pop	{r4, r5, r6, pc}
 80127a0:	0003      	movs	r3, r0
 80127a2:	33fc      	adds	r3, #252	; 0xfc
 80127a4:	69db      	ldr	r3, [r3, #28]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d004      	beq.n	80127b4 <_raise_r+0x28>
 80127aa:	008a      	lsls	r2, r1, #2
 80127ac:	189b      	adds	r3, r3, r2
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	2a00      	cmp	r2, #0
 80127b2:	d108      	bne.n	80127c6 <_raise_r+0x3a>
 80127b4:	0020      	movs	r0, r4
 80127b6:	f000 f855 	bl	8012864 <_getpid_r>
 80127ba:	002a      	movs	r2, r5
 80127bc:	0001      	movs	r1, r0
 80127be:	0020      	movs	r0, r4
 80127c0:	f000 f83e 	bl	8012840 <_kill_r>
 80127c4:	e7eb      	b.n	801279e <_raise_r+0x12>
 80127c6:	2000      	movs	r0, #0
 80127c8:	2a01      	cmp	r2, #1
 80127ca:	d0e8      	beq.n	801279e <_raise_r+0x12>
 80127cc:	1c51      	adds	r1, r2, #1
 80127ce:	d103      	bne.n	80127d8 <_raise_r+0x4c>
 80127d0:	2316      	movs	r3, #22
 80127d2:	3001      	adds	r0, #1
 80127d4:	6023      	str	r3, [r4, #0]
 80127d6:	e7e2      	b.n	801279e <_raise_r+0x12>
 80127d8:	2400      	movs	r4, #0
 80127da:	0028      	movs	r0, r5
 80127dc:	601c      	str	r4, [r3, #0]
 80127de:	4790      	blx	r2
 80127e0:	0020      	movs	r0, r4
 80127e2:	e7dc      	b.n	801279e <_raise_r+0x12>

080127e4 <raise>:
 80127e4:	b510      	push	{r4, lr}
 80127e6:	4b03      	ldr	r3, [pc, #12]	; (80127f4 <raise+0x10>)
 80127e8:	0001      	movs	r1, r0
 80127ea:	6818      	ldr	r0, [r3, #0]
 80127ec:	f7ff ffce 	bl	801278c <_raise_r>
 80127f0:	bd10      	pop	{r4, pc}
 80127f2:	46c0      	nop			; (mov r8, r8)
 80127f4:	200006d0 	.word	0x200006d0

080127f8 <_fstat_r>:
 80127f8:	2300      	movs	r3, #0
 80127fa:	b570      	push	{r4, r5, r6, lr}
 80127fc:	4d06      	ldr	r5, [pc, #24]	; (8012818 <_fstat_r+0x20>)
 80127fe:	0004      	movs	r4, r0
 8012800:	0008      	movs	r0, r1
 8012802:	0011      	movs	r1, r2
 8012804:	602b      	str	r3, [r5, #0]
 8012806:	f7f1 fa62 	bl	8003cce <_fstat>
 801280a:	1c43      	adds	r3, r0, #1
 801280c:	d103      	bne.n	8012816 <_fstat_r+0x1e>
 801280e:	682b      	ldr	r3, [r5, #0]
 8012810:	2b00      	cmp	r3, #0
 8012812:	d000      	beq.n	8012816 <_fstat_r+0x1e>
 8012814:	6023      	str	r3, [r4, #0]
 8012816:	bd70      	pop	{r4, r5, r6, pc}
 8012818:	20000da0 	.word	0x20000da0

0801281c <_isatty_r>:
 801281c:	2300      	movs	r3, #0
 801281e:	b570      	push	{r4, r5, r6, lr}
 8012820:	4d06      	ldr	r5, [pc, #24]	; (801283c <_isatty_r+0x20>)
 8012822:	0004      	movs	r4, r0
 8012824:	0008      	movs	r0, r1
 8012826:	602b      	str	r3, [r5, #0]
 8012828:	f7f1 fa5f 	bl	8003cea <_isatty>
 801282c:	1c43      	adds	r3, r0, #1
 801282e:	d103      	bne.n	8012838 <_isatty_r+0x1c>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d000      	beq.n	8012838 <_isatty_r+0x1c>
 8012836:	6023      	str	r3, [r4, #0]
 8012838:	bd70      	pop	{r4, r5, r6, pc}
 801283a:	46c0      	nop			; (mov r8, r8)
 801283c:	20000da0 	.word	0x20000da0

08012840 <_kill_r>:
 8012840:	2300      	movs	r3, #0
 8012842:	b570      	push	{r4, r5, r6, lr}
 8012844:	4d06      	ldr	r5, [pc, #24]	; (8012860 <_kill_r+0x20>)
 8012846:	0004      	movs	r4, r0
 8012848:	0008      	movs	r0, r1
 801284a:	0011      	movs	r1, r2
 801284c:	602b      	str	r3, [r5, #0]
 801284e:	f7f1 f9df 	bl	8003c10 <_kill>
 8012852:	1c43      	adds	r3, r0, #1
 8012854:	d103      	bne.n	801285e <_kill_r+0x1e>
 8012856:	682b      	ldr	r3, [r5, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d000      	beq.n	801285e <_kill_r+0x1e>
 801285c:	6023      	str	r3, [r4, #0]
 801285e:	bd70      	pop	{r4, r5, r6, pc}
 8012860:	20000da0 	.word	0x20000da0

08012864 <_getpid_r>:
 8012864:	b510      	push	{r4, lr}
 8012866:	f7f1 f9cd 	bl	8003c04 <_getpid>
 801286a:	bd10      	pop	{r4, pc}

0801286c <round>:
 801286c:	b570      	push	{r4, r5, r6, lr}
 801286e:	004a      	lsls	r2, r1, #1
 8012870:	000d      	movs	r5, r1
 8012872:	4920      	ldr	r1, [pc, #128]	; (80128f4 <round+0x88>)
 8012874:	0d52      	lsrs	r2, r2, #21
 8012876:	1851      	adds	r1, r2, r1
 8012878:	0006      	movs	r6, r0
 801287a:	2913      	cmp	r1, #19
 801287c:	dc18      	bgt.n	80128b0 <round+0x44>
 801287e:	2900      	cmp	r1, #0
 8012880:	da09      	bge.n	8012896 <round+0x2a>
 8012882:	0feb      	lsrs	r3, r5, #31
 8012884:	2200      	movs	r2, #0
 8012886:	07db      	lsls	r3, r3, #31
 8012888:	3101      	adds	r1, #1
 801288a:	d101      	bne.n	8012890 <round+0x24>
 801288c:	491a      	ldr	r1, [pc, #104]	; (80128f8 <round+0x8c>)
 801288e:	430b      	orrs	r3, r1
 8012890:	0019      	movs	r1, r3
 8012892:	0010      	movs	r0, r2
 8012894:	e017      	b.n	80128c6 <round+0x5a>
 8012896:	4c19      	ldr	r4, [pc, #100]	; (80128fc <round+0x90>)
 8012898:	410c      	asrs	r4, r1
 801289a:	0022      	movs	r2, r4
 801289c:	402a      	ands	r2, r5
 801289e:	4302      	orrs	r2, r0
 80128a0:	d013      	beq.n	80128ca <round+0x5e>
 80128a2:	2280      	movs	r2, #128	; 0x80
 80128a4:	0312      	lsls	r2, r2, #12
 80128a6:	410a      	asrs	r2, r1
 80128a8:	1953      	adds	r3, r2, r5
 80128aa:	43a3      	bics	r3, r4
 80128ac:	2200      	movs	r2, #0
 80128ae:	e7ef      	b.n	8012890 <round+0x24>
 80128b0:	2933      	cmp	r1, #51	; 0x33
 80128b2:	dd0d      	ble.n	80128d0 <round+0x64>
 80128b4:	2380      	movs	r3, #128	; 0x80
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	4299      	cmp	r1, r3
 80128ba:	d106      	bne.n	80128ca <round+0x5e>
 80128bc:	0002      	movs	r2, r0
 80128be:	002b      	movs	r3, r5
 80128c0:	0029      	movs	r1, r5
 80128c2:	f7ed ff79 	bl	80007b8 <__aeabi_dadd>
 80128c6:	0006      	movs	r6, r0
 80128c8:	000d      	movs	r5, r1
 80128ca:	0030      	movs	r0, r6
 80128cc:	0029      	movs	r1, r5
 80128ce:	bd70      	pop	{r4, r5, r6, pc}
 80128d0:	4c0b      	ldr	r4, [pc, #44]	; (8012900 <round+0x94>)
 80128d2:	1912      	adds	r2, r2, r4
 80128d4:	2401      	movs	r4, #1
 80128d6:	4264      	negs	r4, r4
 80128d8:	40d4      	lsrs	r4, r2
 80128da:	4220      	tst	r0, r4
 80128dc:	d0f5      	beq.n	80128ca <round+0x5e>
 80128de:	2233      	movs	r2, #51	; 0x33
 80128e0:	1a51      	subs	r1, r2, r1
 80128e2:	3a32      	subs	r2, #50	; 0x32
 80128e4:	408a      	lsls	r2, r1
 80128e6:	1812      	adds	r2, r2, r0
 80128e8:	4282      	cmp	r2, r0
 80128ea:	4180      	sbcs	r0, r0
 80128ec:	4240      	negs	r0, r0
 80128ee:	182b      	adds	r3, r5, r0
 80128f0:	43a2      	bics	r2, r4
 80128f2:	e7cd      	b.n	8012890 <round+0x24>
 80128f4:	fffffc01 	.word	0xfffffc01
 80128f8:	3ff00000 	.word	0x3ff00000
 80128fc:	000fffff 	.word	0x000fffff
 8012900:	fffffbed 	.word	0xfffffbed

08012904 <_init>:
 8012904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801290a:	bc08      	pop	{r3}
 801290c:	469e      	mov	lr, r3
 801290e:	4770      	bx	lr

08012910 <_fini>:
 8012910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012912:	46c0      	nop			; (mov r8, r8)
 8012914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012916:	bc08      	pop	{r3}
 8012918:	469e      	mov	lr, r3
 801291a:	4770      	bx	lr
