
nemo2.space_tracker_p_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013d84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  08013e40  08013e40  00023e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f2c  08015f2c  000306d8  2**0
                  CONTENTS
  4 .ARM          00000008  08015f2c  08015f2c  00025f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f34  08015f34  000306d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08015f34  08015f34  00025f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f3c  08015f3c  00025f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006d8  20000000  08015f40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  200006d8  08016618  000306d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  08016618  00030f54  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030700  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1f8  00000000  00000000  00030743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d08  00000000  00000000  0004d93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  00051648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001605  00000000  00000000  00053298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022203  00000000  00000000  0005489d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020b4c  00000000  00000000  00076aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc9bf  00000000  00000000  000975ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000082ec  00000000  00000000  00163fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0016c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200006d8 	.word	0x200006d8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08013e28 	.word	0x08013e28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200006dc 	.word	0x200006dc
 8000100:	08013e28 	.word	0x08013e28

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_uhi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5a09      	ldrh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f8b3 	bl	80015a4 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f803 	bl	8001454 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f8a5 	bl	80015a4 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f89b 	bl	80015a4 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f82b 	bl	80014d8 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 f821 	bl	80014d8 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f8a4 	bl	8000620 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_lmul>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	46ce      	mov	lr, r9
 80004e8:	4699      	mov	r9, r3
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	469c      	mov	ip, r3
 80004ee:	0413      	lsls	r3, r2, #16
 80004f0:	4647      	mov	r7, r8
 80004f2:	0c1b      	lsrs	r3, r3, #16
 80004f4:	001d      	movs	r5, r3
 80004f6:	000e      	movs	r6, r1
 80004f8:	4661      	mov	r1, ip
 80004fa:	0404      	lsls	r4, r0, #16
 80004fc:	0c24      	lsrs	r4, r4, #16
 80004fe:	b580      	push	{r7, lr}
 8000500:	0007      	movs	r7, r0
 8000502:	0c10      	lsrs	r0, r2, #16
 8000504:	434b      	muls	r3, r1
 8000506:	4365      	muls	r5, r4
 8000508:	4341      	muls	r1, r0
 800050a:	4360      	muls	r0, r4
 800050c:	0c2c      	lsrs	r4, r5, #16
 800050e:	18c0      	adds	r0, r0, r3
 8000510:	1820      	adds	r0, r4, r0
 8000512:	468c      	mov	ip, r1
 8000514:	4283      	cmp	r3, r0
 8000516:	d903      	bls.n	8000520 <__aeabi_lmul+0x3c>
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	025b      	lsls	r3, r3, #9
 800051c:	4698      	mov	r8, r3
 800051e:	44c4      	add	ip, r8
 8000520:	4649      	mov	r1, r9
 8000522:	4379      	muls	r1, r7
 8000524:	4356      	muls	r6, r2
 8000526:	0c03      	lsrs	r3, r0, #16
 8000528:	042d      	lsls	r5, r5, #16
 800052a:	0c2d      	lsrs	r5, r5, #16
 800052c:	1989      	adds	r1, r1, r6
 800052e:	4463      	add	r3, ip
 8000530:	0400      	lsls	r0, r0, #16
 8000532:	1940      	adds	r0, r0, r5
 8000534:	18c9      	adds	r1, r1, r3
 8000536:	bcc0      	pop	{r6, r7}
 8000538:	46b9      	mov	r9, r7
 800053a:	46b0      	mov	r8, r6
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <__aeabi_d2uiz>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	2200      	movs	r2, #0
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <__aeabi_d2uiz+0x38>)
 8000546:	0004      	movs	r4, r0
 8000548:	000d      	movs	r5, r1
 800054a:	f7ff ffa1 	bl	8000490 <__aeabi_dcmpge>
 800054e:	2800      	cmp	r0, #0
 8000550:	d104      	bne.n	800055c <__aeabi_d2uiz+0x1c>
 8000552:	0020      	movs	r0, r4
 8000554:	0029      	movs	r1, r5
 8000556:	f001 feeb 	bl	8002330 <__aeabi_d2iz>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <__aeabi_d2uiz+0x38>)
 800055e:	2200      	movs	r2, #0
 8000560:	0020      	movs	r0, r4
 8000562:	0029      	movs	r1, r5
 8000564:	f001 fb44 	bl	8001bf0 <__aeabi_dsub>
 8000568:	f001 fee2 	bl	8002330 <__aeabi_d2iz>
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	061b      	lsls	r3, r3, #24
 8000570:	469c      	mov	ip, r3
 8000572:	4460      	add	r0, ip
 8000574:	e7f1      	b.n	800055a <__aeabi_d2uiz+0x1a>
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	41e00000 	.word	0x41e00000

0800057c <__aeabi_d2lz>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	0005      	movs	r5, r0
 8000580:	000c      	movs	r4, r1
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	0028      	movs	r0, r5
 8000588:	0021      	movs	r1, r4
 800058a:	f7ff ff63 	bl	8000454 <__aeabi_dcmplt>
 800058e:	2800      	cmp	r0, #0
 8000590:	d108      	bne.n	80005a4 <__aeabi_d2lz+0x28>
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f000 f80f 	bl	80005b8 <__aeabi_d2ulz>
 800059a:	0002      	movs	r2, r0
 800059c:	000b      	movs	r3, r1
 800059e:	0010      	movs	r0, r2
 80005a0:	0019      	movs	r1, r3
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2380      	movs	r3, #128	; 0x80
 80005a6:	061b      	lsls	r3, r3, #24
 80005a8:	18e1      	adds	r1, r4, r3
 80005aa:	0028      	movs	r0, r5
 80005ac:	f000 f804 	bl	80005b8 <__aeabi_d2ulz>
 80005b0:	2300      	movs	r3, #0
 80005b2:	4242      	negs	r2, r0
 80005b4:	418b      	sbcs	r3, r1
 80005b6:	e7f2      	b.n	800059e <__aeabi_d2lz+0x22>

080005b8 <__aeabi_d2ulz>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <__aeabi_d2ulz+0x34>)
 80005be:	000d      	movs	r5, r1
 80005c0:	0004      	movs	r4, r0
 80005c2:	f001 f853 	bl	800166c <__aeabi_dmul>
 80005c6:	f7ff ffbb 	bl	8000540 <__aeabi_d2uiz>
 80005ca:	0006      	movs	r6, r0
 80005cc:	f001 ff16 	bl	80023fc <__aeabi_ui2d>
 80005d0:	2200      	movs	r2, #0
 80005d2:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <__aeabi_d2ulz+0x38>)
 80005d4:	f001 f84a 	bl	800166c <__aeabi_dmul>
 80005d8:	0002      	movs	r2, r0
 80005da:	000b      	movs	r3, r1
 80005dc:	0020      	movs	r0, r4
 80005de:	0029      	movs	r1, r5
 80005e0:	f001 fb06 	bl	8001bf0 <__aeabi_dsub>
 80005e4:	f7ff ffac 	bl	8000540 <__aeabi_d2uiz>
 80005e8:	0031      	movs	r1, r6
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	3df00000 	.word	0x3df00000
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__aeabi_l2d>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0006      	movs	r6, r0
 80005f8:	0008      	movs	r0, r1
 80005fa:	f001 fecf 	bl	800239c <__aeabi_i2d>
 80005fe:	2200      	movs	r2, #0
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <__aeabi_l2d+0x28>)
 8000602:	f001 f833 	bl	800166c <__aeabi_dmul>
 8000606:	000d      	movs	r5, r1
 8000608:	0004      	movs	r4, r0
 800060a:	0030      	movs	r0, r6
 800060c:	f001 fef6 	bl	80023fc <__aeabi_ui2d>
 8000610:	002b      	movs	r3, r5
 8000612:	0022      	movs	r2, r4
 8000614:	f000 f8d0 	bl	80007b8 <__aeabi_dadd>
 8000618:	bd70      	pop	{r4, r5, r6, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	41f00000 	.word	0x41f00000

08000620 <__udivmoddi4>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4657      	mov	r7, sl
 8000624:	464e      	mov	r6, r9
 8000626:	4645      	mov	r5, r8
 8000628:	46de      	mov	lr, fp
 800062a:	b5e0      	push	{r5, r6, r7, lr}
 800062c:	0004      	movs	r4, r0
 800062e:	000d      	movs	r5, r1
 8000630:	4692      	mov	sl, r2
 8000632:	4699      	mov	r9, r3
 8000634:	b083      	sub	sp, #12
 8000636:	428b      	cmp	r3, r1
 8000638:	d830      	bhi.n	800069c <__udivmoddi4+0x7c>
 800063a:	d02d      	beq.n	8000698 <__udivmoddi4+0x78>
 800063c:	4649      	mov	r1, r9
 800063e:	4650      	mov	r0, sl
 8000640:	f001 ffa6 	bl	8002590 <__clzdi2>
 8000644:	0029      	movs	r1, r5
 8000646:	0006      	movs	r6, r0
 8000648:	0020      	movs	r0, r4
 800064a:	f001 ffa1 	bl	8002590 <__clzdi2>
 800064e:	1a33      	subs	r3, r6, r0
 8000650:	4698      	mov	r8, r3
 8000652:	3b20      	subs	r3, #32
 8000654:	d434      	bmi.n	80006c0 <__udivmoddi4+0xa0>
 8000656:	469b      	mov	fp, r3
 8000658:	4653      	mov	r3, sl
 800065a:	465a      	mov	r2, fp
 800065c:	4093      	lsls	r3, r2
 800065e:	4642      	mov	r2, r8
 8000660:	001f      	movs	r7, r3
 8000662:	4653      	mov	r3, sl
 8000664:	4093      	lsls	r3, r2
 8000666:	001e      	movs	r6, r3
 8000668:	42af      	cmp	r7, r5
 800066a:	d83b      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800066c:	42af      	cmp	r7, r5
 800066e:	d100      	bne.n	8000672 <__udivmoddi4+0x52>
 8000670:	e079      	b.n	8000766 <__udivmoddi4+0x146>
 8000672:	465b      	mov	r3, fp
 8000674:	1ba4      	subs	r4, r4, r6
 8000676:	41bd      	sbcs	r5, r7
 8000678:	2b00      	cmp	r3, #0
 800067a:	da00      	bge.n	800067e <__udivmoddi4+0x5e>
 800067c:	e076      	b.n	800076c <__udivmoddi4+0x14c>
 800067e:	2200      	movs	r2, #0
 8000680:	2300      	movs	r3, #0
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2301      	movs	r3, #1
 8000688:	465a      	mov	r2, fp
 800068a:	4093      	lsls	r3, r2
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4093      	lsls	r3, r2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	e029      	b.n	80006ec <__udivmoddi4+0xcc>
 8000698:	4282      	cmp	r2, r0
 800069a:	d9cf      	bls.n	800063c <__udivmoddi4+0x1c>
 800069c:	2200      	movs	r2, #0
 800069e:	2300      	movs	r3, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <__udivmoddi4+0x8e>
 80006aa:	601c      	str	r4, [r3, #0]
 80006ac:	605d      	str	r5, [r3, #4]
 80006ae:	9800      	ldr	r0, [sp, #0]
 80006b0:	9901      	ldr	r1, [sp, #4]
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	4642      	mov	r2, r8
 80006c2:	469b      	mov	fp, r3
 80006c4:	2320      	movs	r3, #32
 80006c6:	1a9b      	subs	r3, r3, r2
 80006c8:	4652      	mov	r2, sl
 80006ca:	40da      	lsrs	r2, r3
 80006cc:	4641      	mov	r1, r8
 80006ce:	0013      	movs	r3, r2
 80006d0:	464a      	mov	r2, r9
 80006d2:	408a      	lsls	r2, r1
 80006d4:	0017      	movs	r7, r2
 80006d6:	4642      	mov	r2, r8
 80006d8:	431f      	orrs	r7, r3
 80006da:	4653      	mov	r3, sl
 80006dc:	4093      	lsls	r3, r2
 80006de:	001e      	movs	r6, r3
 80006e0:	42af      	cmp	r7, r5
 80006e2:	d9c3      	bls.n	800066c <__udivmoddi4+0x4c>
 80006e4:	2200      	movs	r2, #0
 80006e6:	2300      	movs	r3, #0
 80006e8:	9200      	str	r2, [sp, #0]
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0d8      	beq.n	80006a4 <__udivmoddi4+0x84>
 80006f2:	07fb      	lsls	r3, r7, #31
 80006f4:	0872      	lsrs	r2, r6, #1
 80006f6:	431a      	orrs	r2, r3
 80006f8:	4646      	mov	r6, r8
 80006fa:	087b      	lsrs	r3, r7, #1
 80006fc:	e00e      	b.n	800071c <__udivmoddi4+0xfc>
 80006fe:	42ab      	cmp	r3, r5
 8000700:	d101      	bne.n	8000706 <__udivmoddi4+0xe6>
 8000702:	42a2      	cmp	r2, r4
 8000704:	d80c      	bhi.n	8000720 <__udivmoddi4+0x100>
 8000706:	1aa4      	subs	r4, r4, r2
 8000708:	419d      	sbcs	r5, r3
 800070a:	2001      	movs	r0, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2100      	movs	r1, #0
 8000712:	3e01      	subs	r6, #1
 8000714:	1824      	adds	r4, r4, r0
 8000716:	414d      	adcs	r5, r1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d006      	beq.n	800072a <__udivmoddi4+0x10a>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d9ee      	bls.n	80006fe <__udivmoddi4+0xde>
 8000720:	3e01      	subs	r6, #1
 8000722:	1924      	adds	r4, r4, r4
 8000724:	416d      	adcs	r5, r5
 8000726:	2e00      	cmp	r6, #0
 8000728:	d1f8      	bne.n	800071c <__udivmoddi4+0xfc>
 800072a:	9800      	ldr	r0, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	465b      	mov	r3, fp
 8000730:	1900      	adds	r0, r0, r4
 8000732:	4169      	adcs	r1, r5
 8000734:	2b00      	cmp	r3, #0
 8000736:	db24      	blt.n	8000782 <__udivmoddi4+0x162>
 8000738:	002b      	movs	r3, r5
 800073a:	465a      	mov	r2, fp
 800073c:	4644      	mov	r4, r8
 800073e:	40d3      	lsrs	r3, r2
 8000740:	002a      	movs	r2, r5
 8000742:	40e2      	lsrs	r2, r4
 8000744:	001c      	movs	r4, r3
 8000746:	465b      	mov	r3, fp
 8000748:	0015      	movs	r5, r2
 800074a:	2b00      	cmp	r3, #0
 800074c:	db2a      	blt.n	80007a4 <__udivmoddi4+0x184>
 800074e:	0026      	movs	r6, r4
 8000750:	409e      	lsls	r6, r3
 8000752:	0033      	movs	r3, r6
 8000754:	0026      	movs	r6, r4
 8000756:	4647      	mov	r7, r8
 8000758:	40be      	lsls	r6, r7
 800075a:	0032      	movs	r2, r6
 800075c:	1a80      	subs	r0, r0, r2
 800075e:	4199      	sbcs	r1, r3
 8000760:	9000      	str	r0, [sp, #0]
 8000762:	9101      	str	r1, [sp, #4]
 8000764:	e79e      	b.n	80006a4 <__udivmoddi4+0x84>
 8000766:	42a3      	cmp	r3, r4
 8000768:	d8bc      	bhi.n	80006e4 <__udivmoddi4+0xc4>
 800076a:	e782      	b.n	8000672 <__udivmoddi4+0x52>
 800076c:	4642      	mov	r2, r8
 800076e:	2320      	movs	r3, #32
 8000770:	2100      	movs	r1, #0
 8000772:	1a9b      	subs	r3, r3, r2
 8000774:	2200      	movs	r2, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	9201      	str	r2, [sp, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	40da      	lsrs	r2, r3
 800077e:	9201      	str	r2, [sp, #4]
 8000780:	e785      	b.n	800068e <__udivmoddi4+0x6e>
 8000782:	4642      	mov	r2, r8
 8000784:	2320      	movs	r3, #32
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	002a      	movs	r2, r5
 800078a:	4646      	mov	r6, r8
 800078c:	409a      	lsls	r2, r3
 800078e:	0023      	movs	r3, r4
 8000790:	40f3      	lsrs	r3, r6
 8000792:	4644      	mov	r4, r8
 8000794:	4313      	orrs	r3, r2
 8000796:	002a      	movs	r2, r5
 8000798:	40e2      	lsrs	r2, r4
 800079a:	001c      	movs	r4, r3
 800079c:	465b      	mov	r3, fp
 800079e:	0015      	movs	r5, r2
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dad4      	bge.n	800074e <__udivmoddi4+0x12e>
 80007a4:	4642      	mov	r2, r8
 80007a6:	002f      	movs	r7, r5
 80007a8:	2320      	movs	r3, #32
 80007aa:	0026      	movs	r6, r4
 80007ac:	4097      	lsls	r7, r2
 80007ae:	1a9b      	subs	r3, r3, r2
 80007b0:	40de      	lsrs	r6, r3
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	e7cd      	b.n	8000754 <__udivmoddi4+0x134>

080007b8 <__aeabi_dadd>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0004      	movs	r4, r0
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	001f      	movs	r7, r3
 80007c6:	030b      	lsls	r3, r1, #12
 80007c8:	0010      	movs	r0, r2
 80007ca:	004e      	lsls	r6, r1, #1
 80007cc:	0a5b      	lsrs	r3, r3, #9
 80007ce:	0fcd      	lsrs	r5, r1, #31
 80007d0:	0f61      	lsrs	r1, r4, #29
 80007d2:	007a      	lsls	r2, r7, #1
 80007d4:	4319      	orrs	r1, r3
 80007d6:	00e3      	lsls	r3, r4, #3
 80007d8:	033c      	lsls	r4, r7, #12
 80007da:	0fff      	lsrs	r7, r7, #31
 80007dc:	46bc      	mov	ip, r7
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0f47      	lsrs	r7, r0, #29
 80007e2:	4327      	orrs	r7, r4
 80007e4:	0d76      	lsrs	r6, r6, #21
 80007e6:	0d52      	lsrs	r2, r2, #21
 80007e8:	00c0      	lsls	r0, r0, #3
 80007ea:	46b9      	mov	r9, r7
 80007ec:	4680      	mov	r8, r0
 80007ee:	1ab7      	subs	r7, r6, r2
 80007f0:	4565      	cmp	r5, ip
 80007f2:	d100      	bne.n	80007f6 <__aeabi_dadd+0x3e>
 80007f4:	e09b      	b.n	800092e <__aeabi_dadd+0x176>
 80007f6:	2f00      	cmp	r7, #0
 80007f8:	dc00      	bgt.n	80007fc <__aeabi_dadd+0x44>
 80007fa:	e084      	b.n	8000906 <__aeabi_dadd+0x14e>
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_dadd+0x4a>
 8000800:	e0be      	b.n	8000980 <__aeabi_dadd+0x1c8>
 8000802:	4ac8      	ldr	r2, [pc, #800]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000804:	4296      	cmp	r6, r2
 8000806:	d100      	bne.n	800080a <__aeabi_dadd+0x52>
 8000808:	e124      	b.n	8000a54 <__aeabi_dadd+0x29c>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	464c      	mov	r4, r9
 800080e:	0412      	lsls	r2, r2, #16
 8000810:	4314      	orrs	r4, r2
 8000812:	46a1      	mov	r9, r4
 8000814:	2f38      	cmp	r7, #56	; 0x38
 8000816:	dd00      	ble.n	800081a <__aeabi_dadd+0x62>
 8000818:	e167      	b.n	8000aea <__aeabi_dadd+0x332>
 800081a:	2f1f      	cmp	r7, #31
 800081c:	dd00      	ble.n	8000820 <__aeabi_dadd+0x68>
 800081e:	e1d6      	b.n	8000bce <__aeabi_dadd+0x416>
 8000820:	2220      	movs	r2, #32
 8000822:	464c      	mov	r4, r9
 8000824:	1bd2      	subs	r2, r2, r7
 8000826:	4094      	lsls	r4, r2
 8000828:	46a2      	mov	sl, r4
 800082a:	4644      	mov	r4, r8
 800082c:	40fc      	lsrs	r4, r7
 800082e:	0020      	movs	r0, r4
 8000830:	4654      	mov	r4, sl
 8000832:	4304      	orrs	r4, r0
 8000834:	4640      	mov	r0, r8
 8000836:	4090      	lsls	r0, r2
 8000838:	1e42      	subs	r2, r0, #1
 800083a:	4190      	sbcs	r0, r2
 800083c:	464a      	mov	r2, r9
 800083e:	40fa      	lsrs	r2, r7
 8000840:	4304      	orrs	r4, r0
 8000842:	1a89      	subs	r1, r1, r2
 8000844:	1b1c      	subs	r4, r3, r4
 8000846:	42a3      	cmp	r3, r4
 8000848:	4192      	sbcs	r2, r2
 800084a:	4252      	negs	r2, r2
 800084c:	1a8b      	subs	r3, r1, r2
 800084e:	469a      	mov	sl, r3
 8000850:	4653      	mov	r3, sl
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	d400      	bmi.n	8000858 <__aeabi_dadd+0xa0>
 8000856:	e0d4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000858:	4653      	mov	r3, sl
 800085a:	025a      	lsls	r2, r3, #9
 800085c:	0a53      	lsrs	r3, r2, #9
 800085e:	469a      	mov	sl, r3
 8000860:	4653      	mov	r3, sl
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0xb0>
 8000866:	e104      	b.n	8000a72 <__aeabi_dadd+0x2ba>
 8000868:	4650      	mov	r0, sl
 800086a:	f001 fe73 	bl	8002554 <__clzsi2>
 800086e:	0003      	movs	r3, r0
 8000870:	3b08      	subs	r3, #8
 8000872:	2220      	movs	r2, #32
 8000874:	0020      	movs	r0, r4
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	4651      	mov	r1, sl
 800087a:	40d0      	lsrs	r0, r2
 800087c:	4099      	lsls	r1, r3
 800087e:	0002      	movs	r2, r0
 8000880:	409c      	lsls	r4, r3
 8000882:	430a      	orrs	r2, r1
 8000884:	42b3      	cmp	r3, r6
 8000886:	da00      	bge.n	800088a <__aeabi_dadd+0xd2>
 8000888:	e102      	b.n	8000a90 <__aeabi_dadd+0x2d8>
 800088a:	1b9b      	subs	r3, r3, r6
 800088c:	1c59      	adds	r1, r3, #1
 800088e:	291f      	cmp	r1, #31
 8000890:	dd00      	ble.n	8000894 <__aeabi_dadd+0xdc>
 8000892:	e0a7      	b.n	80009e4 <__aeabi_dadd+0x22c>
 8000894:	2320      	movs	r3, #32
 8000896:	0010      	movs	r0, r2
 8000898:	0026      	movs	r6, r4
 800089a:	1a5b      	subs	r3, r3, r1
 800089c:	409c      	lsls	r4, r3
 800089e:	4098      	lsls	r0, r3
 80008a0:	40ce      	lsrs	r6, r1
 80008a2:	40ca      	lsrs	r2, r1
 80008a4:	1e63      	subs	r3, r4, #1
 80008a6:	419c      	sbcs	r4, r3
 80008a8:	4330      	orrs	r0, r6
 80008aa:	4692      	mov	sl, r2
 80008ac:	2600      	movs	r6, #0
 80008ae:	4304      	orrs	r4, r0
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d009      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d005      	beq.n	80008c8 <__aeabi_dadd+0x110>
 80008bc:	1d23      	adds	r3, r4, #4
 80008be:	42a3      	cmp	r3, r4
 80008c0:	41a4      	sbcs	r4, r4
 80008c2:	4264      	negs	r4, r4
 80008c4:	44a2      	add	sl, r4
 80008c6:	001c      	movs	r4, r3
 80008c8:	4653      	mov	r3, sl
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	d400      	bmi.n	80008d0 <__aeabi_dadd+0x118>
 80008ce:	e09b      	b.n	8000a08 <__aeabi_dadd+0x250>
 80008d0:	4b94      	ldr	r3, [pc, #592]	; (8000b24 <__aeabi_dadd+0x36c>)
 80008d2:	3601      	adds	r6, #1
 80008d4:	429e      	cmp	r6, r3
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x122>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x294>
 80008da:	4653      	mov	r3, sl
 80008dc:	4992      	ldr	r1, [pc, #584]	; (8000b28 <__aeabi_dadd+0x370>)
 80008de:	08e4      	lsrs	r4, r4, #3
 80008e0:	400b      	ands	r3, r1
 80008e2:	0019      	movs	r1, r3
 80008e4:	075b      	lsls	r3, r3, #29
 80008e6:	4323      	orrs	r3, r4
 80008e8:	0572      	lsls	r2, r6, #21
 80008ea:	024c      	lsls	r4, r1, #9
 80008ec:	0b24      	lsrs	r4, r4, #12
 80008ee:	0d52      	lsrs	r2, r2, #21
 80008f0:	0512      	lsls	r2, r2, #20
 80008f2:	07ed      	lsls	r5, r5, #31
 80008f4:	4322      	orrs	r2, r4
 80008f6:	432a      	orrs	r2, r5
 80008f8:	0018      	movs	r0, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	bce0      	pop	{r5, r6, r7}
 80008fe:	46ba      	mov	sl, r7
 8000900:	46b1      	mov	r9, r6
 8000902:	46a8      	mov	r8, r5
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000906:	2f00      	cmp	r7, #0
 8000908:	d048      	beq.n	800099c <__aeabi_dadd+0x1e4>
 800090a:	1b97      	subs	r7, r2, r6
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x15a>
 8000910:	e10e      	b.n	8000b30 <__aeabi_dadd+0x378>
 8000912:	000c      	movs	r4, r1
 8000914:	431c      	orrs	r4, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x162>
 8000918:	e1b7      	b.n	8000c8a <__aeabi_dadd+0x4d2>
 800091a:	1e7c      	subs	r4, r7, #1
 800091c:	2f01      	cmp	r7, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x16a>
 8000920:	e226      	b.n	8000d70 <__aeabi_dadd+0x5b8>
 8000922:	4d80      	ldr	r5, [pc, #512]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000924:	42af      	cmp	r7, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x172>
 8000928:	e1d5      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 800092a:	0027      	movs	r7, r4
 800092c:	e107      	b.n	8000b3e <__aeabi_dadd+0x386>
 800092e:	2f00      	cmp	r7, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_dadd+0x17c>
 8000932:	e0b2      	b.n	8000a9a <__aeabi_dadd+0x2e2>
 8000934:	2a00      	cmp	r2, #0
 8000936:	d047      	beq.n	80009c8 <__aeabi_dadd+0x210>
 8000938:	4a7a      	ldr	r2, [pc, #488]	; (8000b24 <__aeabi_dadd+0x36c>)
 800093a:	4296      	cmp	r6, r2
 800093c:	d100      	bne.n	8000940 <__aeabi_dadd+0x188>
 800093e:	e089      	b.n	8000a54 <__aeabi_dadd+0x29c>
 8000940:	2280      	movs	r2, #128	; 0x80
 8000942:	464c      	mov	r4, r9
 8000944:	0412      	lsls	r2, r2, #16
 8000946:	4314      	orrs	r4, r2
 8000948:	46a1      	mov	r9, r4
 800094a:	2f38      	cmp	r7, #56	; 0x38
 800094c:	dc6b      	bgt.n	8000a26 <__aeabi_dadd+0x26e>
 800094e:	2f1f      	cmp	r7, #31
 8000950:	dc00      	bgt.n	8000954 <__aeabi_dadd+0x19c>
 8000952:	e16e      	b.n	8000c32 <__aeabi_dadd+0x47a>
 8000954:	003a      	movs	r2, r7
 8000956:	4648      	mov	r0, r9
 8000958:	3a20      	subs	r2, #32
 800095a:	40d0      	lsrs	r0, r2
 800095c:	4684      	mov	ip, r0
 800095e:	2f20      	cmp	r7, #32
 8000960:	d007      	beq.n	8000972 <__aeabi_dadd+0x1ba>
 8000962:	2240      	movs	r2, #64	; 0x40
 8000964:	4648      	mov	r0, r9
 8000966:	1bd2      	subs	r2, r2, r7
 8000968:	4090      	lsls	r0, r2
 800096a:	0002      	movs	r2, r0
 800096c:	4640      	mov	r0, r8
 800096e:	4310      	orrs	r0, r2
 8000970:	4680      	mov	r8, r0
 8000972:	4640      	mov	r0, r8
 8000974:	1e42      	subs	r2, r0, #1
 8000976:	4190      	sbcs	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	0004      	movs	r4, r0
 800097c:	4314      	orrs	r4, r2
 800097e:	e057      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000980:	464a      	mov	r2, r9
 8000982:	4302      	orrs	r2, r0
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x1d0>
 8000986:	e103      	b.n	8000b90 <__aeabi_dadd+0x3d8>
 8000988:	1e7a      	subs	r2, r7, #1
 800098a:	2f01      	cmp	r7, #1
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x1d8>
 800098e:	e193      	b.n	8000cb8 <__aeabi_dadd+0x500>
 8000990:	4c64      	ldr	r4, [pc, #400]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000992:	42a7      	cmp	r7, r4
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x1e0>
 8000996:	e18a      	b.n	8000cae <__aeabi_dadd+0x4f6>
 8000998:	0017      	movs	r7, r2
 800099a:	e73b      	b.n	8000814 <__aeabi_dadd+0x5c>
 800099c:	4c63      	ldr	r4, [pc, #396]	; (8000b2c <__aeabi_dadd+0x374>)
 800099e:	1c72      	adds	r2, r6, #1
 80009a0:	4222      	tst	r2, r4
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x1ee>
 80009a4:	e0e0      	b.n	8000b68 <__aeabi_dadd+0x3b0>
 80009a6:	000a      	movs	r2, r1
 80009a8:	431a      	orrs	r2, r3
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x1f8>
 80009ae:	e174      	b.n	8000c9a <__aeabi_dadd+0x4e2>
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d100      	bne.n	80009b6 <__aeabi_dadd+0x1fe>
 80009b4:	e1d0      	b.n	8000d58 <__aeabi_dadd+0x5a0>
 80009b6:	464a      	mov	r2, r9
 80009b8:	4302      	orrs	r2, r0
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x206>
 80009bc:	e1e3      	b.n	8000d86 <__aeabi_dadd+0x5ce>
 80009be:	074a      	lsls	r2, r1, #29
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	08c9      	lsrs	r1, r1, #3
 80009c6:	e029      	b.n	8000a1c <__aeabi_dadd+0x264>
 80009c8:	464a      	mov	r2, r9
 80009ca:	4302      	orrs	r2, r0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x218>
 80009ce:	e17d      	b.n	8000ccc <__aeabi_dadd+0x514>
 80009d0:	1e7a      	subs	r2, r7, #1
 80009d2:	2f01      	cmp	r7, #1
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x220>
 80009d6:	e0e0      	b.n	8000b9a <__aeabi_dadd+0x3e2>
 80009d8:	4c52      	ldr	r4, [pc, #328]	; (8000b24 <__aeabi_dadd+0x36c>)
 80009da:	42a7      	cmp	r7, r4
 80009dc:	d100      	bne.n	80009e0 <__aeabi_dadd+0x228>
 80009de:	e166      	b.n	8000cae <__aeabi_dadd+0x4f6>
 80009e0:	0017      	movs	r7, r2
 80009e2:	e7b2      	b.n	800094a <__aeabi_dadd+0x192>
 80009e4:	0010      	movs	r0, r2
 80009e6:	3b1f      	subs	r3, #31
 80009e8:	40d8      	lsrs	r0, r3
 80009ea:	2920      	cmp	r1, #32
 80009ec:	d003      	beq.n	80009f6 <__aeabi_dadd+0x23e>
 80009ee:	2340      	movs	r3, #64	; 0x40
 80009f0:	1a5b      	subs	r3, r3, r1
 80009f2:	409a      	lsls	r2, r3
 80009f4:	4314      	orrs	r4, r2
 80009f6:	1e63      	subs	r3, r4, #1
 80009f8:	419c      	sbcs	r4, r3
 80009fa:	2300      	movs	r3, #0
 80009fc:	2600      	movs	r6, #0
 80009fe:	469a      	mov	sl, r3
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0763      	lsls	r3, r4, #29
 8000a04:	d000      	beq.n	8000a08 <__aeabi_dadd+0x250>
 8000a06:	e755      	b.n	80008b4 <__aeabi_dadd+0xfc>
 8000a08:	4652      	mov	r2, sl
 8000a0a:	08e3      	lsrs	r3, r4, #3
 8000a0c:	0752      	lsls	r2, r2, #29
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	4652      	mov	r2, sl
 8000a12:	0037      	movs	r7, r6
 8000a14:	08d1      	lsrs	r1, r2, #3
 8000a16:	4a43      	ldr	r2, [pc, #268]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a18:	4297      	cmp	r7, r2
 8000a1a:	d01f      	beq.n	8000a5c <__aeabi_dadd+0x2a4>
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	057a      	lsls	r2, r7, #21
 8000a20:	0b0c      	lsrs	r4, r1, #12
 8000a22:	0d52      	lsrs	r2, r2, #21
 8000a24:	e764      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a26:	4642      	mov	r2, r8
 8000a28:	464c      	mov	r4, r9
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	1e62      	subs	r2, r4, #1
 8000a2e:	4194      	sbcs	r4, r2
 8000a30:	18e4      	adds	r4, r4, r3
 8000a32:	429c      	cmp	r4, r3
 8000a34:	4192      	sbcs	r2, r2
 8000a36:	4252      	negs	r2, r2
 8000a38:	4692      	mov	sl, r2
 8000a3a:	448a      	add	sl, r1
 8000a3c:	4653      	mov	r3, sl
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	d5df      	bpl.n	8000a02 <__aeabi_dadd+0x24a>
 8000a42:	4b38      	ldr	r3, [pc, #224]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a44:	3601      	adds	r6, #1
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d000      	beq.n	8000a4c <__aeabi_dadd+0x294>
 8000a4a:	e0b3      	b.n	8000bb4 <__aeabi_dadd+0x3fc>
 8000a4c:	0032      	movs	r2, r6
 8000a4e:	2400      	movs	r4, #0
 8000a50:	2300      	movs	r3, #0
 8000a52:	e74d      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a54:	074a      	lsls	r2, r1, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c9      	lsrs	r1, r1, #3
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x2ac>
 8000a62:	e200      	b.n	8000e66 <__aeabi_dadd+0x6ae>
 8000a64:	2480      	movs	r4, #128	; 0x80
 8000a66:	0324      	lsls	r4, r4, #12
 8000a68:	430c      	orrs	r4, r1
 8000a6a:	0324      	lsls	r4, r4, #12
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000a6e:	0b24      	lsrs	r4, r4, #12
 8000a70:	e73e      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000a72:	0020      	movs	r0, r4
 8000a74:	f001 fd6e 	bl	8002554 <__clzsi2>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	3318      	adds	r3, #24
 8000a7c:	2b1f      	cmp	r3, #31
 8000a7e:	dc00      	bgt.n	8000a82 <__aeabi_dadd+0x2ca>
 8000a80:	e6f7      	b.n	8000872 <__aeabi_dadd+0xba>
 8000a82:	0022      	movs	r2, r4
 8000a84:	3808      	subs	r0, #8
 8000a86:	4082      	lsls	r2, r0
 8000a88:	2400      	movs	r4, #0
 8000a8a:	42b3      	cmp	r3, r6
 8000a8c:	db00      	blt.n	8000a90 <__aeabi_dadd+0x2d8>
 8000a8e:	e6fc      	b.n	800088a <__aeabi_dadd+0xd2>
 8000a90:	1af6      	subs	r6, r6, r3
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <__aeabi_dadd+0x370>)
 8000a94:	401a      	ands	r2, r3
 8000a96:	4692      	mov	sl, r2
 8000a98:	e70a      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	d02b      	beq.n	8000af6 <__aeabi_dadd+0x33e>
 8000a9e:	1b97      	subs	r7, r2, r6
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0x2ee>
 8000aa4:	e0b8      	b.n	8000c18 <__aeabi_dadd+0x460>
 8000aa6:	4c1f      	ldr	r4, [pc, #124]	; (8000b24 <__aeabi_dadd+0x36c>)
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d100      	bne.n	8000aae <__aeabi_dadd+0x2f6>
 8000aac:	e11c      	b.n	8000ce8 <__aeabi_dadd+0x530>
 8000aae:	2480      	movs	r4, #128	; 0x80
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	4321      	orrs	r1, r4
 8000ab4:	2f38      	cmp	r7, #56	; 0x38
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dadd+0x302>
 8000ab8:	e11e      	b.n	8000cf8 <__aeabi_dadd+0x540>
 8000aba:	2f1f      	cmp	r7, #31
 8000abc:	dd00      	ble.n	8000ac0 <__aeabi_dadd+0x308>
 8000abe:	e19e      	b.n	8000dfe <__aeabi_dadd+0x646>
 8000ac0:	2620      	movs	r6, #32
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	1bf6      	subs	r6, r6, r7
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	40b3      	lsls	r3, r6
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	40f8      	lsrs	r0, r7
 8000ace:	1e5e      	subs	r6, r3, #1
 8000ad0:	41b3      	sbcs	r3, r6
 8000ad2:	40f9      	lsrs	r1, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	431c      	orrs	r4, r3
 8000ad8:	4489      	add	r9, r1
 8000ada:	4444      	add	r4, r8
 8000adc:	4544      	cmp	r4, r8
 8000ade:	419b      	sbcs	r3, r3
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	444b      	add	r3, r9
 8000ae4:	469a      	mov	sl, r3
 8000ae6:	0016      	movs	r6, r2
 8000ae8:	e7a8      	b.n	8000a3c <__aeabi_dadd+0x284>
 8000aea:	4642      	mov	r2, r8
 8000aec:	464c      	mov	r4, r9
 8000aee:	4314      	orrs	r4, r2
 8000af0:	1e62      	subs	r2, r4, #1
 8000af2:	4194      	sbcs	r4, r2
 8000af4:	e6a6      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000af6:	4c0d      	ldr	r4, [pc, #52]	; (8000b2c <__aeabi_dadd+0x374>)
 8000af8:	1c72      	adds	r2, r6, #1
 8000afa:	4222      	tst	r2, r4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x348>
 8000afe:	e0a8      	b.n	8000c52 <__aeabi_dadd+0x49a>
 8000b00:	000a      	movs	r2, r1
 8000b02:	431a      	orrs	r2, r3
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x352>
 8000b08:	e10a      	b.n	8000d20 <__aeabi_dadd+0x568>
 8000b0a:	2a00      	cmp	r2, #0
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x358>
 8000b0e:	e15e      	b.n	8000dce <__aeabi_dadd+0x616>
 8000b10:	464a      	mov	r2, r9
 8000b12:	4302      	orrs	r2, r0
 8000b14:	d000      	beq.n	8000b18 <__aeabi_dadd+0x360>
 8000b16:	e161      	b.n	8000ddc <__aeabi_dadd+0x624>
 8000b18:	074a      	lsls	r2, r1, #29
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	08c9      	lsrs	r1, r1, #3
 8000b20:	e77c      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	000007ff 	.word	0x000007ff
 8000b28:	ff7fffff 	.word	0xff7fffff
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	4ccf      	ldr	r4, [pc, #828]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x380>
 8000b36:	e0ce      	b.n	8000cd6 <__aeabi_dadd+0x51e>
 8000b38:	2480      	movs	r4, #128	; 0x80
 8000b3a:	0424      	lsls	r4, r4, #16
 8000b3c:	4321      	orrs	r1, r4
 8000b3e:	2f38      	cmp	r7, #56	; 0x38
 8000b40:	dc5b      	bgt.n	8000bfa <__aeabi_dadd+0x442>
 8000b42:	2f1f      	cmp	r7, #31
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x390>
 8000b46:	e0dc      	b.n	8000d02 <__aeabi_dadd+0x54a>
 8000b48:	2520      	movs	r5, #32
 8000b4a:	000c      	movs	r4, r1
 8000b4c:	1bed      	subs	r5, r5, r7
 8000b4e:	001e      	movs	r6, r3
 8000b50:	40ab      	lsls	r3, r5
 8000b52:	40ac      	lsls	r4, r5
 8000b54:	40fe      	lsrs	r6, r7
 8000b56:	1e5d      	subs	r5, r3, #1
 8000b58:	41ab      	sbcs	r3, r5
 8000b5a:	4334      	orrs	r4, r6
 8000b5c:	40f9      	lsrs	r1, r7
 8000b5e:	431c      	orrs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	4699      	mov	r9, r3
 8000b66:	e04c      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1a1c      	subs	r4, r3, r0
 8000b6c:	1a88      	subs	r0, r1, r2
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	4192      	sbcs	r2, r2
 8000b72:	4252      	negs	r2, r2
 8000b74:	4692      	mov	sl, r2
 8000b76:	0002      	movs	r2, r0
 8000b78:	4650      	mov	r0, sl
 8000b7a:	1a12      	subs	r2, r2, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0212      	lsls	r2, r2, #8
 8000b80:	d478      	bmi.n	8000c74 <__aeabi_dadd+0x4bc>
 8000b82:	4653      	mov	r3, sl
 8000b84:	4323      	orrs	r3, r4
 8000b86:	d000      	beq.n	8000b8a <__aeabi_dadd+0x3d2>
 8000b88:	e66a      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2500      	movs	r5, #0
 8000b8e:	e745      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000b90:	074a      	lsls	r2, r1, #29
 8000b92:	08db      	lsrs	r3, r3, #3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	08c9      	lsrs	r1, r1, #3
 8000b98:	e73d      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000b9a:	181c      	adds	r4, r3, r0
 8000b9c:	429c      	cmp	r4, r3
 8000b9e:	419b      	sbcs	r3, r3
 8000ba0:	4449      	add	r1, r9
 8000ba2:	468a      	mov	sl, r1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	449a      	add	sl, r3
 8000ba8:	4653      	mov	r3, sl
 8000baa:	2601      	movs	r6, #1
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	d400      	bmi.n	8000bb2 <__aeabi_dadd+0x3fa>
 8000bb0:	e727      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000bb2:	2602      	movs	r6, #2
 8000bb4:	4652      	mov	r2, sl
 8000bb6:	4baf      	ldr	r3, [pc, #700]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	401a      	ands	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	4021      	ands	r1, r4
 8000bc0:	0862      	lsrs	r2, r4, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	07dc      	lsls	r4, r3, #31
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	469a      	mov	sl, r3
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e670      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000bce:	003a      	movs	r2, r7
 8000bd0:	464c      	mov	r4, r9
 8000bd2:	3a20      	subs	r2, #32
 8000bd4:	40d4      	lsrs	r4, r2
 8000bd6:	46a4      	mov	ip, r4
 8000bd8:	2f20      	cmp	r7, #32
 8000bda:	d007      	beq.n	8000bec <__aeabi_dadd+0x434>
 8000bdc:	2240      	movs	r2, #64	; 0x40
 8000bde:	4648      	mov	r0, r9
 8000be0:	1bd2      	subs	r2, r2, r7
 8000be2:	4090      	lsls	r0, r2
 8000be4:	0002      	movs	r2, r0
 8000be6:	4640      	mov	r0, r8
 8000be8:	4310      	orrs	r0, r2
 8000bea:	4680      	mov	r8, r0
 8000bec:	4640      	mov	r0, r8
 8000bee:	1e42      	subs	r2, r0, #1
 8000bf0:	4190      	sbcs	r0, r2
 8000bf2:	4662      	mov	r2, ip
 8000bf4:	0004      	movs	r4, r0
 8000bf6:	4314      	orrs	r4, r2
 8000bf8:	e624      	b.n	8000844 <__aeabi_dadd+0x8c>
 8000bfa:	4319      	orrs	r1, r3
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	1e63      	subs	r3, r4, #1
 8000c00:	419c      	sbcs	r4, r3
 8000c02:	4643      	mov	r3, r8
 8000c04:	1b1c      	subs	r4, r3, r4
 8000c06:	45a0      	cmp	r8, r4
 8000c08:	419b      	sbcs	r3, r3
 8000c0a:	4649      	mov	r1, r9
 8000c0c:	425b      	negs	r3, r3
 8000c0e:	1acb      	subs	r3, r1, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	4665      	mov	r5, ip
 8000c14:	0016      	movs	r6, r2
 8000c16:	e61b      	b.n	8000850 <__aeabi_dadd+0x98>
 8000c18:	000c      	movs	r4, r1
 8000c1a:	431c      	orrs	r4, r3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dadd+0x468>
 8000c1e:	e0c7      	b.n	8000db0 <__aeabi_dadd+0x5f8>
 8000c20:	1e7c      	subs	r4, r7, #1
 8000c22:	2f01      	cmp	r7, #1
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x470>
 8000c26:	e0f9      	b.n	8000e1c <__aeabi_dadd+0x664>
 8000c28:	4e91      	ldr	r6, [pc, #580]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c2a:	42b7      	cmp	r7, r6
 8000c2c:	d05c      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000c2e:	0027      	movs	r7, r4
 8000c30:	e740      	b.n	8000ab4 <__aeabi_dadd+0x2fc>
 8000c32:	2220      	movs	r2, #32
 8000c34:	464c      	mov	r4, r9
 8000c36:	4640      	mov	r0, r8
 8000c38:	1bd2      	subs	r2, r2, r7
 8000c3a:	4094      	lsls	r4, r2
 8000c3c:	40f8      	lsrs	r0, r7
 8000c3e:	4304      	orrs	r4, r0
 8000c40:	4640      	mov	r0, r8
 8000c42:	4090      	lsls	r0, r2
 8000c44:	1e42      	subs	r2, r0, #1
 8000c46:	4190      	sbcs	r0, r2
 8000c48:	464a      	mov	r2, r9
 8000c4a:	40fa      	lsrs	r2, r7
 8000c4c:	4304      	orrs	r4, r0
 8000c4e:	1889      	adds	r1, r1, r2
 8000c50:	e6ee      	b.n	8000a30 <__aeabi_dadd+0x278>
 8000c52:	4c87      	ldr	r4, [pc, #540]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000c54:	42a2      	cmp	r2, r4
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x4a2>
 8000c58:	e6f9      	b.n	8000a4e <__aeabi_dadd+0x296>
 8000c5a:	1818      	adds	r0, r3, r0
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	419b      	sbcs	r3, r3
 8000c60:	4449      	add	r1, r9
 8000c62:	425b      	negs	r3, r3
 8000c64:	18cb      	adds	r3, r1, r3
 8000c66:	07dc      	lsls	r4, r3, #31
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	085b      	lsrs	r3, r3, #1
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	0016      	movs	r6, r2
 8000c70:	4304      	orrs	r4, r0
 8000c72:	e6c6      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000c74:	4642      	mov	r2, r8
 8000c76:	1ad4      	subs	r4, r2, r3
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	4180      	sbcs	r0, r0
 8000c7c:	464b      	mov	r3, r9
 8000c7e:	4240      	negs	r0, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	1a0b      	subs	r3, r1, r0
 8000c84:	469a      	mov	sl, r3
 8000c86:	4665      	mov	r5, ip
 8000c88:	e5ea      	b.n	8000860 <__aeabi_dadd+0xa8>
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	075b      	lsls	r3, r3, #29
 8000c92:	4665      	mov	r5, ip
 8000c94:	4303      	orrs	r3, r0
 8000c96:	08d1      	lsrs	r1, r2, #3
 8000c98:	e6bd      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_dadd+0x4e8>
 8000c9e:	e08e      	b.n	8000dbe <__aeabi_dadd+0x606>
 8000ca0:	464b      	mov	r3, r9
 8000ca2:	4303      	orrs	r3, r0
 8000ca4:	d117      	bne.n	8000cd6 <__aeabi_dadd+0x51e>
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	2500      	movs	r5, #0
 8000caa:	0309      	lsls	r1, r1, #12
 8000cac:	e6da      	b.n	8000a64 <__aeabi_dadd+0x2ac>
 8000cae:	074a      	lsls	r2, r1, #29
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	08c9      	lsrs	r1, r1, #3
 8000cb6:	e6d1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	464a      	mov	r2, r9
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	419b      	sbcs	r3, r3
 8000cc0:	1a89      	subs	r1, r1, r2
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	469a      	mov	sl, r3
 8000cc8:	2601      	movs	r6, #1
 8000cca:	e5c1      	b.n	8000850 <__aeabi_dadd+0x98>
 8000ccc:	074a      	lsls	r2, r1, #29
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c9      	lsrs	r1, r1, #3
 8000cd4:	e69f      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	08d8      	lsrs	r0, r3, #3
 8000cda:	464b      	mov	r3, r9
 8000cdc:	464a      	mov	r2, r9
 8000cde:	075b      	lsls	r3, r3, #29
 8000ce0:	4665      	mov	r5, ip
 8000ce2:	4303      	orrs	r3, r0
 8000ce4:	08d1      	lsrs	r1, r2, #3
 8000ce6:	e6b9      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000ce8:	4643      	mov	r3, r8
 8000cea:	08d8      	lsrs	r0, r3, #3
 8000cec:	464b      	mov	r3, r9
 8000cee:	464a      	mov	r2, r9
 8000cf0:	075b      	lsls	r3, r3, #29
 8000cf2:	4303      	orrs	r3, r0
 8000cf4:	08d1      	lsrs	r1, r2, #3
 8000cf6:	e6b1      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	1e63      	subs	r3, r4, #1
 8000cfe:	419c      	sbcs	r4, r3
 8000d00:	e6eb      	b.n	8000ada <__aeabi_dadd+0x322>
 8000d02:	003c      	movs	r4, r7
 8000d04:	000d      	movs	r5, r1
 8000d06:	3c20      	subs	r4, #32
 8000d08:	40e5      	lsrs	r5, r4
 8000d0a:	2f20      	cmp	r7, #32
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_dadd+0x55e>
 8000d0e:	2440      	movs	r4, #64	; 0x40
 8000d10:	1be4      	subs	r4, r4, r7
 8000d12:	40a1      	lsls	r1, r4
 8000d14:	430b      	orrs	r3, r1
 8000d16:	001c      	movs	r4, r3
 8000d18:	1e63      	subs	r3, r4, #1
 8000d1a:	419c      	sbcs	r4, r3
 8000d1c:	432c      	orrs	r4, r5
 8000d1e:	e770      	b.n	8000c02 <__aeabi_dadd+0x44a>
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d0e1      	beq.n	8000ce8 <__aeabi_dadd+0x530>
 8000d24:	464a      	mov	r2, r9
 8000d26:	4302      	orrs	r2, r0
 8000d28:	d0c1      	beq.n	8000cae <__aeabi_dadd+0x4f6>
 8000d2a:	074a      	lsls	r2, r1, #29
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	08c9      	lsrs	r1, r1, #3
 8000d34:	0312      	lsls	r2, r2, #12
 8000d36:	4211      	tst	r1, r2
 8000d38:	d008      	beq.n	8000d4c <__aeabi_dadd+0x594>
 8000d3a:	4648      	mov	r0, r9
 8000d3c:	08c4      	lsrs	r4, r0, #3
 8000d3e:	4214      	tst	r4, r2
 8000d40:	d104      	bne.n	8000d4c <__aeabi_dadd+0x594>
 8000d42:	4643      	mov	r3, r8
 8000d44:	0021      	movs	r1, r4
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	0742      	lsls	r2, r0, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	0f5a      	lsrs	r2, r3, #29
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	08db      	lsrs	r3, r3, #3
 8000d54:	4313      	orrs	r3, r2
 8000d56:	e681      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000d58:	464b      	mov	r3, r9
 8000d5a:	4303      	orrs	r3, r0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dadd+0x5a8>
 8000d5e:	e714      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000d60:	464b      	mov	r3, r9
 8000d62:	464a      	mov	r2, r9
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	075b      	lsls	r3, r3, #29
 8000d68:	4665      	mov	r5, ip
 8000d6a:	4303      	orrs	r3, r0
 8000d6c:	08d1      	lsrs	r1, r2, #3
 8000d6e:	e655      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000d70:	1ac4      	subs	r4, r0, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	2601      	movs	r6, #1
 8000d84:	e564      	b.n	8000850 <__aeabi_dadd+0x98>
 8000d86:	1a1c      	subs	r4, r3, r0
 8000d88:	464a      	mov	r2, r9
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	1a8a      	subs	r2, r1, r2
 8000d90:	4240      	negs	r0, r0
 8000d92:	1a12      	subs	r2, r2, r0
 8000d94:	4692      	mov	sl, r2
 8000d96:	0212      	lsls	r2, r2, #8
 8000d98:	d549      	bpl.n	8000e2e <__aeabi_dadd+0x676>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1ad4      	subs	r4, r2, r3
 8000d9e:	45a0      	cmp	r8, r4
 8000da0:	4180      	sbcs	r0, r0
 8000da2:	464b      	mov	r3, r9
 8000da4:	4240      	negs	r0, r0
 8000da6:	1a59      	subs	r1, r3, r1
 8000da8:	1a0b      	subs	r3, r1, r0
 8000daa:	469a      	mov	sl, r3
 8000dac:	4665      	mov	r5, ip
 8000dae:	e57f      	b.n	80008b0 <__aeabi_dadd+0xf8>
 8000db0:	464b      	mov	r3, r9
 8000db2:	464a      	mov	r2, r9
 8000db4:	08c0      	lsrs	r0, r0, #3
 8000db6:	075b      	lsls	r3, r3, #29
 8000db8:	4303      	orrs	r3, r0
 8000dba:	08d1      	lsrs	r1, r2, #3
 8000dbc:	e62b      	b.n	8000a16 <__aeabi_dadd+0x25e>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	08db      	lsrs	r3, r3, #3
 8000dc2:	4302      	orrs	r2, r0
 8000dc4:	d138      	bne.n	8000e38 <__aeabi_dadd+0x680>
 8000dc6:	074a      	lsls	r2, r1, #29
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	08c9      	lsrs	r1, r1, #3
 8000dcc:	e646      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000dce:	464b      	mov	r3, r9
 8000dd0:	464a      	mov	r2, r9
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	075b      	lsls	r3, r3, #29
 8000dd6:	4303      	orrs	r3, r0
 8000dd8:	08d1      	lsrs	r1, r2, #3
 8000dda:	e61f      	b.n	8000a1c <__aeabi_dadd+0x264>
 8000ddc:	181c      	adds	r4, r3, r0
 8000dde:	429c      	cmp	r4, r3
 8000de0:	419b      	sbcs	r3, r3
 8000de2:	4449      	add	r1, r9
 8000de4:	468a      	mov	sl, r1
 8000de6:	425b      	negs	r3, r3
 8000de8:	449a      	add	sl, r3
 8000dea:	4653      	mov	r3, sl
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	d400      	bmi.n	8000df2 <__aeabi_dadd+0x63a>
 8000df0:	e607      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000df2:	4652      	mov	r2, sl
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <__aeabi_dadd+0x6bc>)
 8000df6:	2601      	movs	r6, #1
 8000df8:	401a      	ands	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	e601      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000dfe:	003c      	movs	r4, r7
 8000e00:	000e      	movs	r6, r1
 8000e02:	3c20      	subs	r4, #32
 8000e04:	40e6      	lsrs	r6, r4
 8000e06:	2f20      	cmp	r7, #32
 8000e08:	d003      	beq.n	8000e12 <__aeabi_dadd+0x65a>
 8000e0a:	2440      	movs	r4, #64	; 0x40
 8000e0c:	1be4      	subs	r4, r4, r7
 8000e0e:	40a1      	lsls	r1, r4
 8000e10:	430b      	orrs	r3, r1
 8000e12:	001c      	movs	r4, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4334      	orrs	r4, r6
 8000e1a:	e65e      	b.n	8000ada <__aeabi_dadd+0x322>
 8000e1c:	4443      	add	r3, r8
 8000e1e:	4283      	cmp	r3, r0
 8000e20:	4180      	sbcs	r0, r0
 8000e22:	4449      	add	r1, r9
 8000e24:	468a      	mov	sl, r1
 8000e26:	4240      	negs	r0, r0
 8000e28:	001c      	movs	r4, r3
 8000e2a:	4482      	add	sl, r0
 8000e2c:	e6bc      	b.n	8000ba8 <__aeabi_dadd+0x3f0>
 8000e2e:	4653      	mov	r3, sl
 8000e30:	4323      	orrs	r3, r4
 8000e32:	d100      	bne.n	8000e36 <__aeabi_dadd+0x67e>
 8000e34:	e6a9      	b.n	8000b8a <__aeabi_dadd+0x3d2>
 8000e36:	e5e4      	b.n	8000a02 <__aeabi_dadd+0x24a>
 8000e38:	074a      	lsls	r2, r1, #29
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	08c9      	lsrs	r1, r1, #3
 8000e40:	0312      	lsls	r2, r2, #12
 8000e42:	4211      	tst	r1, r2
 8000e44:	d009      	beq.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e46:	4648      	mov	r0, r9
 8000e48:	08c4      	lsrs	r4, r0, #3
 8000e4a:	4214      	tst	r4, r2
 8000e4c:	d105      	bne.n	8000e5a <__aeabi_dadd+0x6a2>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	4665      	mov	r5, ip
 8000e52:	0021      	movs	r1, r4
 8000e54:	08db      	lsrs	r3, r3, #3
 8000e56:	0742      	lsls	r2, r0, #29
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	0f5a      	lsrs	r2, r3, #29
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	0752      	lsls	r2, r2, #29
 8000e62:	4313      	orrs	r3, r2
 8000e64:	e5fa      	b.n	8000a5c <__aeabi_dadd+0x2a4>
 8000e66:	2300      	movs	r3, #0
 8000e68:	4a01      	ldr	r2, [pc, #4]	; (8000e70 <__aeabi_dadd+0x6b8>)
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	e540      	b.n	80008f0 <__aeabi_dadd+0x138>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	000007ff 	.word	0x000007ff
 8000e74:	ff7fffff 	.word	0xff7fffff

08000e78 <__aeabi_ddiv>:
 8000e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7a:	4657      	mov	r7, sl
 8000e7c:	464e      	mov	r6, r9
 8000e7e:	4645      	mov	r5, r8
 8000e80:	46de      	mov	lr, fp
 8000e82:	b5e0      	push	{r5, r6, r7, lr}
 8000e84:	030c      	lsls	r4, r1, #12
 8000e86:	001f      	movs	r7, r3
 8000e88:	004b      	lsls	r3, r1, #1
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	4692      	mov	sl, r2
 8000e8e:	0005      	movs	r5, r0
 8000e90:	b085      	sub	sp, #20
 8000e92:	0b24      	lsrs	r4, r4, #12
 8000e94:	0d5b      	lsrs	r3, r3, #21
 8000e96:	0fce      	lsrs	r6, r1, #31
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d100      	bne.n	8000e9e <__aeabi_ddiv+0x26>
 8000e9c:	e152      	b.n	8001144 <__aeabi_ddiv+0x2cc>
 8000e9e:	4ad2      	ldr	r2, [pc, #840]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x2e>
 8000ea4:	e16e      	b.n	8001184 <__aeabi_ddiv+0x30c>
 8000ea6:	0f42      	lsrs	r2, r0, #29
 8000ea8:	00e4      	lsls	r4, r4, #3
 8000eaa:	4314      	orrs	r4, r2
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	4322      	orrs	r2, r4
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4acd      	ldr	r2, [pc, #820]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eb6:	00c5      	lsls	r5, r0, #3
 8000eb8:	4693      	mov	fp, r2
 8000eba:	449b      	add	fp, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4699      	mov	r9, r3
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	033c      	lsls	r4, r7, #12
 8000ec4:	007b      	lsls	r3, r7, #1
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	0b24      	lsrs	r4, r4, #12
 8000eca:	0d5b      	lsrs	r3, r3, #21
 8000ecc:	0fff      	lsrs	r7, r7, #31
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x5c>
 8000ed2:	e11a      	b.n	800110a <__aeabi_ddiv+0x292>
 8000ed4:	4ac4      	ldr	r2, [pc, #784]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x64>
 8000eda:	e15e      	b.n	800119a <__aeabi_ddiv+0x322>
 8000edc:	0f42      	lsrs	r2, r0, #29
 8000ede:	00e4      	lsls	r4, r4, #3
 8000ee0:	4322      	orrs	r2, r4
 8000ee2:	2480      	movs	r4, #128	; 0x80
 8000ee4:	0424      	lsls	r4, r4, #16
 8000ee6:	4314      	orrs	r4, r2
 8000ee8:	4ac0      	ldr	r2, [pc, #768]	; (80011ec <__aeabi_ddiv+0x374>)
 8000eea:	00c1      	lsls	r1, r0, #3
 8000eec:	4694      	mov	ip, r2
 8000eee:	465a      	mov	r2, fp
 8000ef0:	4463      	add	r3, ip
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	0033      	movs	r3, r6
 8000efa:	407b      	eors	r3, r7
 8000efc:	469a      	mov	sl, r3
 8000efe:	464b      	mov	r3, r9
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d827      	bhi.n	8000f54 <__aeabi_ddiv+0xdc>
 8000f04:	4aba      	ldr	r2, [pc, #744]	; (80011f0 <__aeabi_ddiv+0x378>)
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	58d3      	ldr	r3, [r2, r3]
 8000f0a:	469f      	mov	pc, r3
 8000f0c:	46b2      	mov	sl, r6
 8000f0e:	9b00      	ldr	r3, [sp, #0]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d016      	beq.n	8000f42 <__aeabi_ddiv+0xca>
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0xa2>
 8000f18:	e287      	b.n	800142a <__aeabi_ddiv+0x5b2>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_ddiv+0xa8>
 8000f1e:	e0d5      	b.n	80010cc <__aeabi_ddiv+0x254>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2200      	movs	r2, #0
 8000f24:	2500      	movs	r5, #0
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	07d2      	lsls	r2, r2, #31
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	0028      	movs	r0, r5
 8000f32:	0019      	movs	r1, r3
 8000f34:	b005      	add	sp, #20
 8000f36:	bcf0      	pop	{r4, r5, r6, r7}
 8000f38:	46bb      	mov	fp, r7
 8000f3a:	46b2      	mov	sl, r6
 8000f3c:	46a9      	mov	r9, r5
 8000f3e:	46a0      	mov	r8, r4
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	2200      	movs	r2, #0
 8000f44:	2500      	movs	r5, #0
 8000f46:	4ba8      	ldr	r3, [pc, #672]	; (80011e8 <__aeabi_ddiv+0x370>)
 8000f48:	e7ed      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8000f4a:	46ba      	mov	sl, r7
 8000f4c:	46a0      	mov	r8, r4
 8000f4e:	000d      	movs	r5, r1
 8000f50:	9000      	str	r0, [sp, #0]
 8000f52:	e7dc      	b.n	8000f0e <__aeabi_ddiv+0x96>
 8000f54:	4544      	cmp	r4, r8
 8000f56:	d200      	bcs.n	8000f5a <__aeabi_ddiv+0xe2>
 8000f58:	e1c4      	b.n	80012e4 <__aeabi_ddiv+0x46c>
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_ddiv+0xe6>
 8000f5c:	e1bf      	b.n	80012de <__aeabi_ddiv+0x466>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	469c      	mov	ip, r3
 8000f64:	002e      	movs	r6, r5
 8000f66:	4640      	mov	r0, r8
 8000f68:	2500      	movs	r5, #0
 8000f6a:	44e3      	add	fp, ip
 8000f6c:	0223      	lsls	r3, r4, #8
 8000f6e:	0e0c      	lsrs	r4, r1, #24
 8000f70:	431c      	orrs	r4, r3
 8000f72:	0c1b      	lsrs	r3, r3, #16
 8000f74:	4699      	mov	r9, r3
 8000f76:	0423      	lsls	r3, r4, #16
 8000f78:	020a      	lsls	r2, r1, #8
 8000f7a:	0c1f      	lsrs	r7, r3, #16
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	9200      	str	r2, [sp, #0]
 8000f80:	9701      	str	r7, [sp, #4]
 8000f82:	f7ff f961 	bl	8000248 <__aeabi_uidivmod>
 8000f86:	0002      	movs	r2, r0
 8000f88:	437a      	muls	r2, r7
 8000f8a:	040b      	lsls	r3, r1, #16
 8000f8c:	0c31      	lsrs	r1, r6, #16
 8000f8e:	4680      	mov	r8, r0
 8000f90:	4319      	orrs	r1, r3
 8000f92:	428a      	cmp	r2, r1
 8000f94:	d907      	bls.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	1909      	adds	r1, r1, r4
 8000f9e:	44e0      	add	r8, ip
 8000fa0:	428c      	cmp	r4, r1
 8000fa2:	d800      	bhi.n	8000fa6 <__aeabi_ddiv+0x12e>
 8000fa4:	e201      	b.n	80013aa <__aeabi_ddiv+0x532>
 8000fa6:	1a88      	subs	r0, r1, r2
 8000fa8:	4649      	mov	r1, r9
 8000faa:	f7ff f94d 	bl	8000248 <__aeabi_uidivmod>
 8000fae:	9a01      	ldr	r2, [sp, #4]
 8000fb0:	0436      	lsls	r6, r6, #16
 8000fb2:	4342      	muls	r2, r0
 8000fb4:	0409      	lsls	r1, r1, #16
 8000fb6:	0c36      	lsrs	r6, r6, #16
 8000fb8:	0003      	movs	r3, r0
 8000fba:	430e      	orrs	r6, r1
 8000fbc:	42b2      	cmp	r2, r6
 8000fbe:	d904      	bls.n	8000fca <__aeabi_ddiv+0x152>
 8000fc0:	1936      	adds	r6, r6, r4
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	42b4      	cmp	r4, r6
 8000fc6:	d800      	bhi.n	8000fca <__aeabi_ddiv+0x152>
 8000fc8:	e1e9      	b.n	800139e <__aeabi_ddiv+0x526>
 8000fca:	1ab0      	subs	r0, r6, r2
 8000fcc:	4642      	mov	r2, r8
 8000fce:	9e00      	ldr	r6, [sp, #0]
 8000fd0:	0412      	lsls	r2, r2, #16
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	0c33      	lsrs	r3, r6, #16
 8000fd6:	001f      	movs	r7, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	4690      	mov	r8, r2
 8000fdc:	9302      	str	r3, [sp, #8]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0432      	lsls	r2, r6, #16
 8000fe2:	0c16      	lsrs	r6, r2, #16
 8000fe4:	0032      	movs	r2, r6
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	9603      	str	r6, [sp, #12]
 8000fec:	437b      	muls	r3, r7
 8000fee:	434e      	muls	r6, r1
 8000ff0:	4379      	muls	r1, r7
 8000ff2:	0c17      	lsrs	r7, r2, #16
 8000ff4:	46bc      	mov	ip, r7
 8000ff6:	199b      	adds	r3, r3, r6
 8000ff8:	4463      	add	r3, ip
 8000ffa:	429e      	cmp	r6, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x18e>
 8000ffe:	2680      	movs	r6, #128	; 0x80
 8001000:	0276      	lsls	r6, r6, #9
 8001002:	46b4      	mov	ip, r6
 8001004:	4461      	add	r1, ip
 8001006:	0c1e      	lsrs	r6, r3, #16
 8001008:	1871      	adds	r1, r6, r1
 800100a:	0416      	lsls	r6, r2, #16
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	0c36      	lsrs	r6, r6, #16
 8001010:	199e      	adds	r6, r3, r6
 8001012:	4288      	cmp	r0, r1
 8001014:	d302      	bcc.n	800101c <__aeabi_ddiv+0x1a4>
 8001016:	d112      	bne.n	800103e <__aeabi_ddiv+0x1c6>
 8001018:	42b5      	cmp	r5, r6
 800101a:	d210      	bcs.n	800103e <__aeabi_ddiv+0x1c6>
 800101c:	4643      	mov	r3, r8
 800101e:	1e5a      	subs	r2, r3, #1
 8001020:	9b00      	ldr	r3, [sp, #0]
 8001022:	469c      	mov	ip, r3
 8001024:	4465      	add	r5, ip
 8001026:	001f      	movs	r7, r3
 8001028:	429d      	cmp	r5, r3
 800102a:	419b      	sbcs	r3, r3
 800102c:	425b      	negs	r3, r3
 800102e:	191b      	adds	r3, r3, r4
 8001030:	18c0      	adds	r0, r0, r3
 8001032:	4284      	cmp	r4, r0
 8001034:	d200      	bcs.n	8001038 <__aeabi_ddiv+0x1c0>
 8001036:	e19e      	b.n	8001376 <__aeabi_ddiv+0x4fe>
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x1c4>
 800103a:	e199      	b.n	8001370 <__aeabi_ddiv+0x4f8>
 800103c:	4690      	mov	r8, r2
 800103e:	1bae      	subs	r6, r5, r6
 8001040:	42b5      	cmp	r5, r6
 8001042:	41ad      	sbcs	r5, r5
 8001044:	1a40      	subs	r0, r0, r1
 8001046:	426d      	negs	r5, r5
 8001048:	1b40      	subs	r0, r0, r5
 800104a:	4284      	cmp	r4, r0
 800104c:	d100      	bne.n	8001050 <__aeabi_ddiv+0x1d8>
 800104e:	e1d2      	b.n	80013f6 <__aeabi_ddiv+0x57e>
 8001050:	4649      	mov	r1, r9
 8001052:	f7ff f8f9 	bl	8000248 <__aeabi_uidivmod>
 8001056:	9a01      	ldr	r2, [sp, #4]
 8001058:	040b      	lsls	r3, r1, #16
 800105a:	4342      	muls	r2, r0
 800105c:	0c31      	lsrs	r1, r6, #16
 800105e:	0005      	movs	r5, r0
 8001060:	4319      	orrs	r1, r3
 8001062:	428a      	cmp	r2, r1
 8001064:	d900      	bls.n	8001068 <__aeabi_ddiv+0x1f0>
 8001066:	e16c      	b.n	8001342 <__aeabi_ddiv+0x4ca>
 8001068:	1a88      	subs	r0, r1, r2
 800106a:	4649      	mov	r1, r9
 800106c:	f7ff f8ec 	bl	8000248 <__aeabi_uidivmod>
 8001070:	9a01      	ldr	r2, [sp, #4]
 8001072:	0436      	lsls	r6, r6, #16
 8001074:	4342      	muls	r2, r0
 8001076:	0409      	lsls	r1, r1, #16
 8001078:	0c36      	lsrs	r6, r6, #16
 800107a:	0003      	movs	r3, r0
 800107c:	430e      	orrs	r6, r1
 800107e:	42b2      	cmp	r2, r6
 8001080:	d900      	bls.n	8001084 <__aeabi_ddiv+0x20c>
 8001082:	e153      	b.n	800132c <__aeabi_ddiv+0x4b4>
 8001084:	9803      	ldr	r0, [sp, #12]
 8001086:	1ab6      	subs	r6, r6, r2
 8001088:	0002      	movs	r2, r0
 800108a:	042d      	lsls	r5, r5, #16
 800108c:	431d      	orrs	r5, r3
 800108e:	9f02      	ldr	r7, [sp, #8]
 8001090:	042b      	lsls	r3, r5, #16
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	435a      	muls	r2, r3
 8001096:	437b      	muls	r3, r7
 8001098:	469c      	mov	ip, r3
 800109a:	0c29      	lsrs	r1, r5, #16
 800109c:	4348      	muls	r0, r1
 800109e:	0c13      	lsrs	r3, r2, #16
 80010a0:	4484      	add	ip, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	4379      	muls	r1, r7
 80010a6:	4298      	cmp	r0, r3
 80010a8:	d903      	bls.n	80010b2 <__aeabi_ddiv+0x23a>
 80010aa:	2080      	movs	r0, #128	; 0x80
 80010ac:	0240      	lsls	r0, r0, #9
 80010ae:	4684      	mov	ip, r0
 80010b0:	4461      	add	r1, ip
 80010b2:	0c18      	lsrs	r0, r3, #16
 80010b4:	0412      	lsls	r2, r2, #16
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	0c12      	lsrs	r2, r2, #16
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	189b      	adds	r3, r3, r2
 80010be:	4286      	cmp	r6, r0
 80010c0:	d200      	bcs.n	80010c4 <__aeabi_ddiv+0x24c>
 80010c2:	e100      	b.n	80012c6 <__aeabi_ddiv+0x44e>
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x250>
 80010c6:	e0fb      	b.n	80012c0 <__aeabi_ddiv+0x448>
 80010c8:	2301      	movs	r3, #1
 80010ca:	431d      	orrs	r5, r3
 80010cc:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <__aeabi_ddiv+0x37c>)
 80010ce:	445b      	add	r3, fp
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_ddiv+0x25e>
 80010d4:	e0aa      	b.n	800122c <__aeabi_ddiv+0x3b4>
 80010d6:	076a      	lsls	r2, r5, #29
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x264>
 80010da:	e13d      	b.n	8001358 <__aeabi_ddiv+0x4e0>
 80010dc:	08e9      	lsrs	r1, r5, #3
 80010de:	4642      	mov	r2, r8
 80010e0:	01d2      	lsls	r2, r2, #7
 80010e2:	d506      	bpl.n	80010f2 <__aeabi_ddiv+0x27a>
 80010e4:	4642      	mov	r2, r8
 80010e6:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <__aeabi_ddiv+0x380>)
 80010e8:	401a      	ands	r2, r3
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	4690      	mov	r8, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	445b      	add	r3, fp
 80010f2:	4a42      	ldr	r2, [pc, #264]	; (80011fc <__aeabi_ddiv+0x384>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dd00      	ble.n	80010fa <__aeabi_ddiv+0x282>
 80010f8:	e723      	b.n	8000f42 <__aeabi_ddiv+0xca>
 80010fa:	4642      	mov	r2, r8
 80010fc:	055b      	lsls	r3, r3, #21
 80010fe:	0755      	lsls	r5, r2, #29
 8001100:	0252      	lsls	r2, r2, #9
 8001102:	430d      	orrs	r5, r1
 8001104:	0b12      	lsrs	r2, r2, #12
 8001106:	0d5b      	lsrs	r3, r3, #21
 8001108:	e70d      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800110a:	4651      	mov	r1, sl
 800110c:	4321      	orrs	r1, r4
 800110e:	d100      	bne.n	8001112 <__aeabi_ddiv+0x29a>
 8001110:	e07c      	b.n	800120c <__aeabi_ddiv+0x394>
 8001112:	2c00      	cmp	r4, #0
 8001114:	d100      	bne.n	8001118 <__aeabi_ddiv+0x2a0>
 8001116:	e0fb      	b.n	8001310 <__aeabi_ddiv+0x498>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 fa1b 	bl	8002554 <__clzsi2>
 800111e:	0002      	movs	r2, r0
 8001120:	3a0b      	subs	r2, #11
 8001122:	231d      	movs	r3, #29
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	4652      	mov	r2, sl
 8001128:	0001      	movs	r1, r0
 800112a:	40da      	lsrs	r2, r3
 800112c:	4653      	mov	r3, sl
 800112e:	3908      	subs	r1, #8
 8001130:	408b      	lsls	r3, r1
 8001132:	408c      	lsls	r4, r1
 8001134:	0019      	movs	r1, r3
 8001136:	4314      	orrs	r4, r2
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <__aeabi_ddiv+0x388>)
 800113a:	4458      	add	r0, fp
 800113c:	469b      	mov	fp, r3
 800113e:	4483      	add	fp, r0
 8001140:	2000      	movs	r0, #0
 8001142:	e6d9      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 8001144:	0003      	movs	r3, r0
 8001146:	4323      	orrs	r3, r4
 8001148:	4698      	mov	r8, r3
 800114a:	d044      	beq.n	80011d6 <__aeabi_ddiv+0x35e>
 800114c:	2c00      	cmp	r4, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0x2da>
 8001150:	e0cf      	b.n	80012f2 <__aeabi_ddiv+0x47a>
 8001152:	0020      	movs	r0, r4
 8001154:	f001 f9fe 	bl	8002554 <__clzsi2>
 8001158:	0001      	movs	r1, r0
 800115a:	0002      	movs	r2, r0
 800115c:	390b      	subs	r1, #11
 800115e:	231d      	movs	r3, #29
 8001160:	1a5b      	subs	r3, r3, r1
 8001162:	4649      	mov	r1, r9
 8001164:	0010      	movs	r0, r2
 8001166:	40d9      	lsrs	r1, r3
 8001168:	3808      	subs	r0, #8
 800116a:	4084      	lsls	r4, r0
 800116c:	000b      	movs	r3, r1
 800116e:	464d      	mov	r5, r9
 8001170:	4323      	orrs	r3, r4
 8001172:	4698      	mov	r8, r3
 8001174:	4085      	lsls	r5, r0
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <__aeabi_ddiv+0x38c>)
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	469b      	mov	fp, r3
 800117c:	2300      	movs	r3, #0
 800117e:	4699      	mov	r9, r3
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	e69e      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 8001184:	0002      	movs	r2, r0
 8001186:	4322      	orrs	r2, r4
 8001188:	4690      	mov	r8, r2
 800118a:	d11d      	bne.n	80011c8 <__aeabi_ddiv+0x350>
 800118c:	2208      	movs	r2, #8
 800118e:	469b      	mov	fp, r3
 8001190:	2302      	movs	r3, #2
 8001192:	2500      	movs	r5, #0
 8001194:	4691      	mov	r9, r2
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	e693      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 800119a:	4651      	mov	r1, sl
 800119c:	4321      	orrs	r1, r4
 800119e:	d109      	bne.n	80011b4 <__aeabi_ddiv+0x33c>
 80011a0:	2302      	movs	r3, #2
 80011a2:	464a      	mov	r2, r9
 80011a4:	431a      	orrs	r2, r3
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <__aeabi_ddiv+0x390>)
 80011a8:	4691      	mov	r9, r2
 80011aa:	469c      	mov	ip, r3
 80011ac:	2400      	movs	r4, #0
 80011ae:	2002      	movs	r0, #2
 80011b0:	44e3      	add	fp, ip
 80011b2:	e6a1      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011b4:	2303      	movs	r3, #3
 80011b6:	464a      	mov	r2, r9
 80011b8:	431a      	orrs	r2, r3
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <__aeabi_ddiv+0x390>)
 80011bc:	4691      	mov	r9, r2
 80011be:	469c      	mov	ip, r3
 80011c0:	4651      	mov	r1, sl
 80011c2:	2003      	movs	r0, #3
 80011c4:	44e3      	add	fp, ip
 80011c6:	e697      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 80011c8:	220c      	movs	r2, #12
 80011ca:	469b      	mov	fp, r3
 80011cc:	2303      	movs	r3, #3
 80011ce:	46a0      	mov	r8, r4
 80011d0:	4691      	mov	r9, r2
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	e675      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011d6:	2304      	movs	r3, #4
 80011d8:	4699      	mov	r9, r3
 80011da:	2300      	movs	r3, #0
 80011dc:	469b      	mov	fp, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	2500      	movs	r5, #0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e66d      	b.n	8000ec2 <__aeabi_ddiv+0x4a>
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	000007ff 	.word	0x000007ff
 80011ec:	fffffc01 	.word	0xfffffc01
 80011f0:	0801599c 	.word	0x0801599c
 80011f4:	000003ff 	.word	0x000003ff
 80011f8:	feffffff 	.word	0xfeffffff
 80011fc:	000007fe 	.word	0x000007fe
 8001200:	000003f3 	.word	0x000003f3
 8001204:	fffffc0d 	.word	0xfffffc0d
 8001208:	fffff801 	.word	0xfffff801
 800120c:	464a      	mov	r2, r9
 800120e:	2301      	movs	r3, #1
 8001210:	431a      	orrs	r2, r3
 8001212:	4691      	mov	r9, r2
 8001214:	2400      	movs	r4, #0
 8001216:	2001      	movs	r0, #1
 8001218:	e66e      	b.n	8000ef8 <__aeabi_ddiv+0x80>
 800121a:	2300      	movs	r3, #0
 800121c:	2280      	movs	r2, #128	; 0x80
 800121e:	469a      	mov	sl, r3
 8001220:	2500      	movs	r5, #0
 8001222:	4b88      	ldr	r3, [pc, #544]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001224:	0312      	lsls	r2, r2, #12
 8001226:	e67e      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001228:	2501      	movs	r5, #1
 800122a:	426d      	negs	r5, r5
 800122c:	2201      	movs	r2, #1
 800122e:	1ad2      	subs	r2, r2, r3
 8001230:	2a38      	cmp	r2, #56	; 0x38
 8001232:	dd00      	ble.n	8001236 <__aeabi_ddiv+0x3be>
 8001234:	e674      	b.n	8000f20 <__aeabi_ddiv+0xa8>
 8001236:	2a1f      	cmp	r2, #31
 8001238:	dc00      	bgt.n	800123c <__aeabi_ddiv+0x3c4>
 800123a:	e0bd      	b.n	80013b8 <__aeabi_ddiv+0x540>
 800123c:	211f      	movs	r1, #31
 800123e:	4249      	negs	r1, r1
 8001240:	1acb      	subs	r3, r1, r3
 8001242:	4641      	mov	r1, r8
 8001244:	40d9      	lsrs	r1, r3
 8001246:	000b      	movs	r3, r1
 8001248:	2a20      	cmp	r2, #32
 800124a:	d004      	beq.n	8001256 <__aeabi_ddiv+0x3de>
 800124c:	4641      	mov	r1, r8
 800124e:	4a7e      	ldr	r2, [pc, #504]	; (8001448 <__aeabi_ddiv+0x5d0>)
 8001250:	445a      	add	r2, fp
 8001252:	4091      	lsls	r1, r2
 8001254:	430d      	orrs	r5, r1
 8001256:	0029      	movs	r1, r5
 8001258:	1e4a      	subs	r2, r1, #1
 800125a:	4191      	sbcs	r1, r2
 800125c:	4319      	orrs	r1, r3
 800125e:	2307      	movs	r3, #7
 8001260:	001d      	movs	r5, r3
 8001262:	2200      	movs	r2, #0
 8001264:	400d      	ands	r5, r1
 8001266:	420b      	tst	r3, r1
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x3f4>
 800126a:	e0d0      	b.n	800140e <__aeabi_ddiv+0x596>
 800126c:	220f      	movs	r2, #15
 800126e:	2300      	movs	r3, #0
 8001270:	400a      	ands	r2, r1
 8001272:	2a04      	cmp	r2, #4
 8001274:	d100      	bne.n	8001278 <__aeabi_ddiv+0x400>
 8001276:	e0c7      	b.n	8001408 <__aeabi_ddiv+0x590>
 8001278:	1d0a      	adds	r2, r1, #4
 800127a:	428a      	cmp	r2, r1
 800127c:	4189      	sbcs	r1, r1
 800127e:	4249      	negs	r1, r1
 8001280:	185b      	adds	r3, r3, r1
 8001282:	0011      	movs	r1, r2
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	d400      	bmi.n	800128a <__aeabi_ddiv+0x412>
 8001288:	e0be      	b.n	8001408 <__aeabi_ddiv+0x590>
 800128a:	2301      	movs	r3, #1
 800128c:	2200      	movs	r2, #0
 800128e:	2500      	movs	r5, #0
 8001290:	e649      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4643      	mov	r3, r8
 8001296:	0312      	lsls	r2, r2, #12
 8001298:	4213      	tst	r3, r2
 800129a:	d008      	beq.n	80012ae <__aeabi_ddiv+0x436>
 800129c:	4214      	tst	r4, r2
 800129e:	d106      	bne.n	80012ae <__aeabi_ddiv+0x436>
 80012a0:	4322      	orrs	r2, r4
 80012a2:	0312      	lsls	r2, r2, #12
 80012a4:	46ba      	mov	sl, r7
 80012a6:	000d      	movs	r5, r1
 80012a8:	4b66      	ldr	r3, [pc, #408]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012aa:	0b12      	lsrs	r2, r2, #12
 80012ac:	e63b      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	4643      	mov	r3, r8
 80012b2:	0312      	lsls	r2, r2, #12
 80012b4:	431a      	orrs	r2, r3
 80012b6:	0312      	lsls	r2, r2, #12
 80012b8:	46b2      	mov	sl, r6
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <__aeabi_ddiv+0x5cc>)
 80012bc:	0b12      	lsrs	r2, r2, #12
 80012be:	e632      	b.n	8000f26 <__aeabi_ddiv+0xae>
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d100      	bne.n	80012c6 <__aeabi_ddiv+0x44e>
 80012c4:	e702      	b.n	80010cc <__aeabi_ddiv+0x254>
 80012c6:	19a6      	adds	r6, r4, r6
 80012c8:	1e6a      	subs	r2, r5, #1
 80012ca:	42a6      	cmp	r6, r4
 80012cc:	d200      	bcs.n	80012d0 <__aeabi_ddiv+0x458>
 80012ce:	e089      	b.n	80013e4 <__aeabi_ddiv+0x56c>
 80012d0:	4286      	cmp	r6, r0
 80012d2:	d200      	bcs.n	80012d6 <__aeabi_ddiv+0x45e>
 80012d4:	e09f      	b.n	8001416 <__aeabi_ddiv+0x59e>
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x462>
 80012d8:	e0af      	b.n	800143a <__aeabi_ddiv+0x5c2>
 80012da:	0015      	movs	r5, r2
 80012dc:	e6f4      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80012de:	42a9      	cmp	r1, r5
 80012e0:	d900      	bls.n	80012e4 <__aeabi_ddiv+0x46c>
 80012e2:	e63c      	b.n	8000f5e <__aeabi_ddiv+0xe6>
 80012e4:	4643      	mov	r3, r8
 80012e6:	07de      	lsls	r6, r3, #31
 80012e8:	0858      	lsrs	r0, r3, #1
 80012ea:	086b      	lsrs	r3, r5, #1
 80012ec:	431e      	orrs	r6, r3
 80012ee:	07ed      	lsls	r5, r5, #31
 80012f0:	e63c      	b.n	8000f6c <__aeabi_ddiv+0xf4>
 80012f2:	f001 f92f 	bl	8002554 <__clzsi2>
 80012f6:	0001      	movs	r1, r0
 80012f8:	0002      	movs	r2, r0
 80012fa:	3115      	adds	r1, #21
 80012fc:	3220      	adds	r2, #32
 80012fe:	291c      	cmp	r1, #28
 8001300:	dc00      	bgt.n	8001304 <__aeabi_ddiv+0x48c>
 8001302:	e72c      	b.n	800115e <__aeabi_ddiv+0x2e6>
 8001304:	464b      	mov	r3, r9
 8001306:	3808      	subs	r0, #8
 8001308:	4083      	lsls	r3, r0
 800130a:	2500      	movs	r5, #0
 800130c:	4698      	mov	r8, r3
 800130e:	e732      	b.n	8001176 <__aeabi_ddiv+0x2fe>
 8001310:	f001 f920 	bl	8002554 <__clzsi2>
 8001314:	0003      	movs	r3, r0
 8001316:	001a      	movs	r2, r3
 8001318:	3215      	adds	r2, #21
 800131a:	3020      	adds	r0, #32
 800131c:	2a1c      	cmp	r2, #28
 800131e:	dc00      	bgt.n	8001322 <__aeabi_ddiv+0x4aa>
 8001320:	e6ff      	b.n	8001122 <__aeabi_ddiv+0x2aa>
 8001322:	4654      	mov	r4, sl
 8001324:	3b08      	subs	r3, #8
 8001326:	2100      	movs	r1, #0
 8001328:	409c      	lsls	r4, r3
 800132a:	e705      	b.n	8001138 <__aeabi_ddiv+0x2c0>
 800132c:	1936      	adds	r6, r6, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	42b4      	cmp	r4, r6
 8001332:	d900      	bls.n	8001336 <__aeabi_ddiv+0x4be>
 8001334:	e6a6      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001336:	42b2      	cmp	r2, r6
 8001338:	d800      	bhi.n	800133c <__aeabi_ddiv+0x4c4>
 800133a:	e6a3      	b.n	8001084 <__aeabi_ddiv+0x20c>
 800133c:	1e83      	subs	r3, r0, #2
 800133e:	1936      	adds	r6, r6, r4
 8001340:	e6a0      	b.n	8001084 <__aeabi_ddiv+0x20c>
 8001342:	1909      	adds	r1, r1, r4
 8001344:	3d01      	subs	r5, #1
 8001346:	428c      	cmp	r4, r1
 8001348:	d900      	bls.n	800134c <__aeabi_ddiv+0x4d4>
 800134a:	e68d      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 800134c:	428a      	cmp	r2, r1
 800134e:	d800      	bhi.n	8001352 <__aeabi_ddiv+0x4da>
 8001350:	e68a      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001352:	1e85      	subs	r5, r0, #2
 8001354:	1909      	adds	r1, r1, r4
 8001356:	e687      	b.n	8001068 <__aeabi_ddiv+0x1f0>
 8001358:	220f      	movs	r2, #15
 800135a:	402a      	ands	r2, r5
 800135c:	2a04      	cmp	r2, #4
 800135e:	d100      	bne.n	8001362 <__aeabi_ddiv+0x4ea>
 8001360:	e6bc      	b.n	80010dc <__aeabi_ddiv+0x264>
 8001362:	1d29      	adds	r1, r5, #4
 8001364:	42a9      	cmp	r1, r5
 8001366:	41ad      	sbcs	r5, r5
 8001368:	426d      	negs	r5, r5
 800136a:	08c9      	lsrs	r1, r1, #3
 800136c:	44a8      	add	r8, r5
 800136e:	e6b6      	b.n	80010de <__aeabi_ddiv+0x266>
 8001370:	42af      	cmp	r7, r5
 8001372:	d900      	bls.n	8001376 <__aeabi_ddiv+0x4fe>
 8001374:	e662      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001376:	4281      	cmp	r1, r0
 8001378:	d804      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 800137a:	d000      	beq.n	800137e <__aeabi_ddiv+0x506>
 800137c:	e65e      	b.n	800103c <__aeabi_ddiv+0x1c4>
 800137e:	42ae      	cmp	r6, r5
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x50c>
 8001382:	e65b      	b.n	800103c <__aeabi_ddiv+0x1c4>
 8001384:	2302      	movs	r3, #2
 8001386:	425b      	negs	r3, r3
 8001388:	469c      	mov	ip, r3
 800138a:	9b00      	ldr	r3, [sp, #0]
 800138c:	44e0      	add	r8, ip
 800138e:	469c      	mov	ip, r3
 8001390:	4465      	add	r5, ip
 8001392:	429d      	cmp	r5, r3
 8001394:	419b      	sbcs	r3, r3
 8001396:	425b      	negs	r3, r3
 8001398:	191b      	adds	r3, r3, r4
 800139a:	18c0      	adds	r0, r0, r3
 800139c:	e64f      	b.n	800103e <__aeabi_ddiv+0x1c6>
 800139e:	42b2      	cmp	r2, r6
 80013a0:	d800      	bhi.n	80013a4 <__aeabi_ddiv+0x52c>
 80013a2:	e612      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013a4:	1e83      	subs	r3, r0, #2
 80013a6:	1936      	adds	r6, r6, r4
 80013a8:	e60f      	b.n	8000fca <__aeabi_ddiv+0x152>
 80013aa:	428a      	cmp	r2, r1
 80013ac:	d800      	bhi.n	80013b0 <__aeabi_ddiv+0x538>
 80013ae:	e5fa      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b0:	1e83      	subs	r3, r0, #2
 80013b2:	4698      	mov	r8, r3
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	e5f6      	b.n	8000fa6 <__aeabi_ddiv+0x12e>
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <__aeabi_ddiv+0x5d4>)
 80013ba:	0028      	movs	r0, r5
 80013bc:	445b      	add	r3, fp
 80013be:	4641      	mov	r1, r8
 80013c0:	409d      	lsls	r5, r3
 80013c2:	4099      	lsls	r1, r3
 80013c4:	40d0      	lsrs	r0, r2
 80013c6:	1e6b      	subs	r3, r5, #1
 80013c8:	419d      	sbcs	r5, r3
 80013ca:	4643      	mov	r3, r8
 80013cc:	4301      	orrs	r1, r0
 80013ce:	4329      	orrs	r1, r5
 80013d0:	40d3      	lsrs	r3, r2
 80013d2:	074a      	lsls	r2, r1, #29
 80013d4:	d100      	bne.n	80013d8 <__aeabi_ddiv+0x560>
 80013d6:	e755      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013d8:	220f      	movs	r2, #15
 80013da:	400a      	ands	r2, r1
 80013dc:	2a04      	cmp	r2, #4
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x56a>
 80013e0:	e74a      	b.n	8001278 <__aeabi_ddiv+0x400>
 80013e2:	e74f      	b.n	8001284 <__aeabi_ddiv+0x40c>
 80013e4:	0015      	movs	r5, r2
 80013e6:	4286      	cmp	r6, r0
 80013e8:	d000      	beq.n	80013ec <__aeabi_ddiv+0x574>
 80013ea:	e66d      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013ec:	9a00      	ldr	r2, [sp, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d000      	beq.n	80013f4 <__aeabi_ddiv+0x57c>
 80013f2:	e669      	b.n	80010c8 <__aeabi_ddiv+0x250>
 80013f4:	e66a      	b.n	80010cc <__aeabi_ddiv+0x254>
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <__aeabi_ddiv+0x5d8>)
 80013f8:	445b      	add	r3, fp
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dc00      	bgt.n	8001400 <__aeabi_ddiv+0x588>
 80013fe:	e713      	b.n	8001228 <__aeabi_ddiv+0x3b0>
 8001400:	2501      	movs	r5, #1
 8001402:	2100      	movs	r1, #0
 8001404:	44a8      	add	r8, r5
 8001406:	e66a      	b.n	80010de <__aeabi_ddiv+0x266>
 8001408:	075d      	lsls	r5, r3, #29
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	0b1a      	lsrs	r2, r3, #12
 800140e:	08c9      	lsrs	r1, r1, #3
 8001410:	2300      	movs	r3, #0
 8001412:	430d      	orrs	r5, r1
 8001414:	e587      	b.n	8000f26 <__aeabi_ddiv+0xae>
 8001416:	9900      	ldr	r1, [sp, #0]
 8001418:	3d02      	subs	r5, #2
 800141a:	004a      	lsls	r2, r1, #1
 800141c:	428a      	cmp	r2, r1
 800141e:	41bf      	sbcs	r7, r7
 8001420:	427f      	negs	r7, r7
 8001422:	193f      	adds	r7, r7, r4
 8001424:	19f6      	adds	r6, r6, r7
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	e7dd      	b.n	80013e6 <__aeabi_ddiv+0x56e>
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	4643      	mov	r3, r8
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	431a      	orrs	r2, r3
 8001432:	0312      	lsls	r2, r2, #12
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <__aeabi_ddiv+0x5cc>)
 8001436:	0b12      	lsrs	r2, r2, #12
 8001438:	e575      	b.n	8000f26 <__aeabi_ddiv+0xae>
 800143a:	9900      	ldr	r1, [sp, #0]
 800143c:	4299      	cmp	r1, r3
 800143e:	d3ea      	bcc.n	8001416 <__aeabi_ddiv+0x59e>
 8001440:	0015      	movs	r5, r2
 8001442:	e7d3      	b.n	80013ec <__aeabi_ddiv+0x574>
 8001444:	000007ff 	.word	0x000007ff
 8001448:	0000043e 	.word	0x0000043e
 800144c:	0000041e 	.word	0x0000041e
 8001450:	000003ff 	.word	0x000003ff

08001454 <__eqdf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	464e      	mov	r6, r9
 8001458:	4645      	mov	r5, r8
 800145a:	46de      	mov	lr, fp
 800145c:	4657      	mov	r7, sl
 800145e:	4690      	mov	r8, r2
 8001460:	b5e0      	push	{r5, r6, r7, lr}
 8001462:	0017      	movs	r7, r2
 8001464:	031a      	lsls	r2, r3, #12
 8001466:	0b12      	lsrs	r2, r2, #12
 8001468:	0005      	movs	r5, r0
 800146a:	4684      	mov	ip, r0
 800146c:	4819      	ldr	r0, [pc, #100]	; (80014d4 <__eqdf2+0x80>)
 800146e:	030e      	lsls	r6, r1, #12
 8001470:	004c      	lsls	r4, r1, #1
 8001472:	4691      	mov	r9, r2
 8001474:	005a      	lsls	r2, r3, #1
 8001476:	0fdb      	lsrs	r3, r3, #31
 8001478:	469b      	mov	fp, r3
 800147a:	0b36      	lsrs	r6, r6, #12
 800147c:	0d64      	lsrs	r4, r4, #21
 800147e:	0fc9      	lsrs	r1, r1, #31
 8001480:	0d52      	lsrs	r2, r2, #21
 8001482:	4284      	cmp	r4, r0
 8001484:	d019      	beq.n	80014ba <__eqdf2+0x66>
 8001486:	4282      	cmp	r2, r0
 8001488:	d010      	beq.n	80014ac <__eqdf2+0x58>
 800148a:	2001      	movs	r0, #1
 800148c:	4294      	cmp	r4, r2
 800148e:	d10e      	bne.n	80014ae <__eqdf2+0x5a>
 8001490:	454e      	cmp	r6, r9
 8001492:	d10c      	bne.n	80014ae <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	45c4      	cmp	ip, r8
 8001498:	d109      	bne.n	80014ae <__eqdf2+0x5a>
 800149a:	4559      	cmp	r1, fp
 800149c:	d017      	beq.n	80014ce <__eqdf2+0x7a>
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d105      	bne.n	80014ae <__eqdf2+0x5a>
 80014a2:	0030      	movs	r0, r6
 80014a4:	4328      	orrs	r0, r5
 80014a6:	1e43      	subs	r3, r0, #1
 80014a8:	4198      	sbcs	r0, r3
 80014aa:	e000      	b.n	80014ae <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	bcf0      	pop	{r4, r5, r6, r7}
 80014b0:	46bb      	mov	fp, r7
 80014b2:	46b2      	mov	sl, r6
 80014b4:	46a9      	mov	r9, r5
 80014b6:	46a0      	mov	r8, r4
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ba:	0033      	movs	r3, r6
 80014bc:	2001      	movs	r0, #1
 80014be:	432b      	orrs	r3, r5
 80014c0:	d1f5      	bne.n	80014ae <__eqdf2+0x5a>
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d1f3      	bne.n	80014ae <__eqdf2+0x5a>
 80014c6:	464b      	mov	r3, r9
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d1f0      	bne.n	80014ae <__eqdf2+0x5a>
 80014cc:	e7e2      	b.n	8001494 <__eqdf2+0x40>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7ed      	b.n	80014ae <__eqdf2+0x5a>
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	000007ff 	.word	0x000007ff

080014d8 <__gedf2>:
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014da:	4647      	mov	r7, r8
 80014dc:	46ce      	mov	lr, r9
 80014de:	0004      	movs	r4, r0
 80014e0:	0018      	movs	r0, r3
 80014e2:	0016      	movs	r6, r2
 80014e4:	031b      	lsls	r3, r3, #12
 80014e6:	0b1b      	lsrs	r3, r3, #12
 80014e8:	4d2d      	ldr	r5, [pc, #180]	; (80015a0 <__gedf2+0xc8>)
 80014ea:	004a      	lsls	r2, r1, #1
 80014ec:	4699      	mov	r9, r3
 80014ee:	b580      	push	{r7, lr}
 80014f0:	0043      	lsls	r3, r0, #1
 80014f2:	030f      	lsls	r7, r1, #12
 80014f4:	46a4      	mov	ip, r4
 80014f6:	46b0      	mov	r8, r6
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d52      	lsrs	r2, r2, #21
 80014fc:	0fc9      	lsrs	r1, r1, #31
 80014fe:	0d5b      	lsrs	r3, r3, #21
 8001500:	0fc0      	lsrs	r0, r0, #31
 8001502:	42aa      	cmp	r2, r5
 8001504:	d021      	beq.n	800154a <__gedf2+0x72>
 8001506:	42ab      	cmp	r3, r5
 8001508:	d013      	beq.n	8001532 <__gedf2+0x5a>
 800150a:	2a00      	cmp	r2, #0
 800150c:	d122      	bne.n	8001554 <__gedf2+0x7c>
 800150e:	433c      	orrs	r4, r7
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <__gedf2+0x42>
 8001514:	464d      	mov	r5, r9
 8001516:	432e      	orrs	r6, r5
 8001518:	d022      	beq.n	8001560 <__gedf2+0x88>
 800151a:	2c00      	cmp	r4, #0
 800151c:	d010      	beq.n	8001540 <__gedf2+0x68>
 800151e:	4281      	cmp	r1, r0
 8001520:	d022      	beq.n	8001568 <__gedf2+0x90>
 8001522:	2002      	movs	r0, #2
 8001524:	3901      	subs	r1, #1
 8001526:	4008      	ands	r0, r1
 8001528:	3801      	subs	r0, #1
 800152a:	bcc0      	pop	{r6, r7}
 800152c:	46b9      	mov	r9, r7
 800152e:	46b0      	mov	r8, r6
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	464d      	mov	r5, r9
 8001534:	432e      	orrs	r6, r5
 8001536:	d129      	bne.n	800158c <__gedf2+0xb4>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d1f0      	bne.n	800151e <__gedf2+0x46>
 800153c:	433c      	orrs	r4, r7
 800153e:	d1ee      	bne.n	800151e <__gedf2+0x46>
 8001540:	2800      	cmp	r0, #0
 8001542:	d1f2      	bne.n	800152a <__gedf2+0x52>
 8001544:	2001      	movs	r0, #1
 8001546:	4240      	negs	r0, r0
 8001548:	e7ef      	b.n	800152a <__gedf2+0x52>
 800154a:	003d      	movs	r5, r7
 800154c:	4325      	orrs	r5, r4
 800154e:	d11d      	bne.n	800158c <__gedf2+0xb4>
 8001550:	4293      	cmp	r3, r2
 8001552:	d0ee      	beq.n	8001532 <__gedf2+0x5a>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1e2      	bne.n	800151e <__gedf2+0x46>
 8001558:	464c      	mov	r4, r9
 800155a:	4326      	orrs	r6, r4
 800155c:	d1df      	bne.n	800151e <__gedf2+0x46>
 800155e:	e7e0      	b.n	8001522 <__gedf2+0x4a>
 8001560:	2000      	movs	r0, #0
 8001562:	2c00      	cmp	r4, #0
 8001564:	d0e1      	beq.n	800152a <__gedf2+0x52>
 8001566:	e7dc      	b.n	8001522 <__gedf2+0x4a>
 8001568:	429a      	cmp	r2, r3
 800156a:	dc0a      	bgt.n	8001582 <__gedf2+0xaa>
 800156c:	dbe8      	blt.n	8001540 <__gedf2+0x68>
 800156e:	454f      	cmp	r7, r9
 8001570:	d8d7      	bhi.n	8001522 <__gedf2+0x4a>
 8001572:	d00e      	beq.n	8001592 <__gedf2+0xba>
 8001574:	2000      	movs	r0, #0
 8001576:	454f      	cmp	r7, r9
 8001578:	d2d7      	bcs.n	800152a <__gedf2+0x52>
 800157a:	2900      	cmp	r1, #0
 800157c:	d0e2      	beq.n	8001544 <__gedf2+0x6c>
 800157e:	0008      	movs	r0, r1
 8001580:	e7d3      	b.n	800152a <__gedf2+0x52>
 8001582:	4243      	negs	r3, r0
 8001584:	4158      	adcs	r0, r3
 8001586:	0040      	lsls	r0, r0, #1
 8001588:	3801      	subs	r0, #1
 800158a:	e7ce      	b.n	800152a <__gedf2+0x52>
 800158c:	2002      	movs	r0, #2
 800158e:	4240      	negs	r0, r0
 8001590:	e7cb      	b.n	800152a <__gedf2+0x52>
 8001592:	45c4      	cmp	ip, r8
 8001594:	d8c5      	bhi.n	8001522 <__gedf2+0x4a>
 8001596:	2000      	movs	r0, #0
 8001598:	45c4      	cmp	ip, r8
 800159a:	d2c6      	bcs.n	800152a <__gedf2+0x52>
 800159c:	e7ed      	b.n	800157a <__gedf2+0xa2>
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	000007ff 	.word	0x000007ff

080015a4 <__ledf2>:
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	4647      	mov	r7, r8
 80015a8:	46ce      	mov	lr, r9
 80015aa:	0004      	movs	r4, r0
 80015ac:	0018      	movs	r0, r3
 80015ae:	0016      	movs	r6, r2
 80015b0:	031b      	lsls	r3, r3, #12
 80015b2:	0b1b      	lsrs	r3, r3, #12
 80015b4:	4d2c      	ldr	r5, [pc, #176]	; (8001668 <__ledf2+0xc4>)
 80015b6:	004a      	lsls	r2, r1, #1
 80015b8:	4699      	mov	r9, r3
 80015ba:	b580      	push	{r7, lr}
 80015bc:	0043      	lsls	r3, r0, #1
 80015be:	030f      	lsls	r7, r1, #12
 80015c0:	46a4      	mov	ip, r4
 80015c2:	46b0      	mov	r8, r6
 80015c4:	0b3f      	lsrs	r7, r7, #12
 80015c6:	0d52      	lsrs	r2, r2, #21
 80015c8:	0fc9      	lsrs	r1, r1, #31
 80015ca:	0d5b      	lsrs	r3, r3, #21
 80015cc:	0fc0      	lsrs	r0, r0, #31
 80015ce:	42aa      	cmp	r2, r5
 80015d0:	d00d      	beq.n	80015ee <__ledf2+0x4a>
 80015d2:	42ab      	cmp	r3, r5
 80015d4:	d010      	beq.n	80015f8 <__ledf2+0x54>
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d127      	bne.n	800162a <__ledf2+0x86>
 80015da:	433c      	orrs	r4, r7
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <__ledf2+0x60>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10e      	bne.n	8001604 <__ledf2+0x60>
 80015e6:	2000      	movs	r0, #0
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d015      	beq.n	8001618 <__ledf2+0x74>
 80015ec:	e00e      	b.n	800160c <__ledf2+0x68>
 80015ee:	003d      	movs	r5, r7
 80015f0:	4325      	orrs	r5, r4
 80015f2:	d110      	bne.n	8001616 <__ledf2+0x72>
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d118      	bne.n	800162a <__ledf2+0x86>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10b      	bne.n	8001616 <__ledf2+0x72>
 80015fe:	2a00      	cmp	r2, #0
 8001600:	d102      	bne.n	8001608 <__ledf2+0x64>
 8001602:	433c      	orrs	r4, r7
 8001604:	2c00      	cmp	r4, #0
 8001606:	d00b      	beq.n	8001620 <__ledf2+0x7c>
 8001608:	4281      	cmp	r1, r0
 800160a:	d014      	beq.n	8001636 <__ledf2+0x92>
 800160c:	2002      	movs	r0, #2
 800160e:	3901      	subs	r1, #1
 8001610:	4008      	ands	r0, r1
 8001612:	3801      	subs	r0, #1
 8001614:	e000      	b.n	8001618 <__ledf2+0x74>
 8001616:	2002      	movs	r0, #2
 8001618:	bcc0      	pop	{r6, r7}
 800161a:	46b9      	mov	r9, r7
 800161c:	46b0      	mov	r8, r6
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	2800      	cmp	r0, #0
 8001622:	d1f9      	bne.n	8001618 <__ledf2+0x74>
 8001624:	2001      	movs	r0, #1
 8001626:	4240      	negs	r0, r0
 8001628:	e7f6      	b.n	8001618 <__ledf2+0x74>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1ec      	bne.n	8001608 <__ledf2+0x64>
 800162e:	464c      	mov	r4, r9
 8001630:	4326      	orrs	r6, r4
 8001632:	d1e9      	bne.n	8001608 <__ledf2+0x64>
 8001634:	e7ea      	b.n	800160c <__ledf2+0x68>
 8001636:	429a      	cmp	r2, r3
 8001638:	dd04      	ble.n	8001644 <__ledf2+0xa0>
 800163a:	4243      	negs	r3, r0
 800163c:	4158      	adcs	r0, r3
 800163e:	0040      	lsls	r0, r0, #1
 8001640:	3801      	subs	r0, #1
 8001642:	e7e9      	b.n	8001618 <__ledf2+0x74>
 8001644:	429a      	cmp	r2, r3
 8001646:	dbeb      	blt.n	8001620 <__ledf2+0x7c>
 8001648:	454f      	cmp	r7, r9
 800164a:	d8df      	bhi.n	800160c <__ledf2+0x68>
 800164c:	d006      	beq.n	800165c <__ledf2+0xb8>
 800164e:	2000      	movs	r0, #0
 8001650:	454f      	cmp	r7, r9
 8001652:	d2e1      	bcs.n	8001618 <__ledf2+0x74>
 8001654:	2900      	cmp	r1, #0
 8001656:	d0e5      	beq.n	8001624 <__ledf2+0x80>
 8001658:	0008      	movs	r0, r1
 800165a:	e7dd      	b.n	8001618 <__ledf2+0x74>
 800165c:	45c4      	cmp	ip, r8
 800165e:	d8d5      	bhi.n	800160c <__ledf2+0x68>
 8001660:	2000      	movs	r0, #0
 8001662:	45c4      	cmp	ip, r8
 8001664:	d2d8      	bcs.n	8001618 <__ledf2+0x74>
 8001666:	e7f5      	b.n	8001654 <__ledf2+0xb0>
 8001668:	000007ff 	.word	0x000007ff

0800166c <__aeabi_dmul>:
 800166c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166e:	4645      	mov	r5, r8
 8001670:	46de      	mov	lr, fp
 8001672:	4657      	mov	r7, sl
 8001674:	464e      	mov	r6, r9
 8001676:	b5e0      	push	{r5, r6, r7, lr}
 8001678:	001f      	movs	r7, r3
 800167a:	030b      	lsls	r3, r1, #12
 800167c:	0b1b      	lsrs	r3, r3, #12
 800167e:	469b      	mov	fp, r3
 8001680:	004d      	lsls	r5, r1, #1
 8001682:	0fcb      	lsrs	r3, r1, #31
 8001684:	0004      	movs	r4, r0
 8001686:	4691      	mov	r9, r2
 8001688:	4698      	mov	r8, r3
 800168a:	b087      	sub	sp, #28
 800168c:	0d6d      	lsrs	r5, r5, #21
 800168e:	d100      	bne.n	8001692 <__aeabi_dmul+0x26>
 8001690:	e1cd      	b.n	8001a2e <__aeabi_dmul+0x3c2>
 8001692:	4bce      	ldr	r3, [pc, #824]	; (80019cc <__aeabi_dmul+0x360>)
 8001694:	429d      	cmp	r5, r3
 8001696:	d100      	bne.n	800169a <__aeabi_dmul+0x2e>
 8001698:	e1e9      	b.n	8001a6e <__aeabi_dmul+0x402>
 800169a:	465a      	mov	r2, fp
 800169c:	0f43      	lsrs	r3, r0, #29
 800169e:	00d2      	lsls	r2, r2, #3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	0412      	lsls	r2, r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	00c3      	lsls	r3, r0, #3
 80016aa:	469a      	mov	sl, r3
 80016ac:	4bc8      	ldr	r3, [pc, #800]	; (80019d0 <__aeabi_dmul+0x364>)
 80016ae:	4693      	mov	fp, r2
 80016b0:	469c      	mov	ip, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	2600      	movs	r6, #0
 80016b6:	4465      	add	r5, ip
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	033c      	lsls	r4, r7, #12
 80016bc:	007b      	lsls	r3, r7, #1
 80016be:	4648      	mov	r0, r9
 80016c0:	0b24      	lsrs	r4, r4, #12
 80016c2:	0d5b      	lsrs	r3, r3, #21
 80016c4:	0fff      	lsrs	r7, r7, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dmul+0x60>
 80016ca:	e189      	b.n	80019e0 <__aeabi_dmul+0x374>
 80016cc:	4abf      	ldr	r2, [pc, #764]	; (80019cc <__aeabi_dmul+0x360>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <__aeabi_dmul+0x9a>
 80016d2:	0f42      	lsrs	r2, r0, #29
 80016d4:	00e4      	lsls	r4, r4, #3
 80016d6:	4322      	orrs	r2, r4
 80016d8:	2480      	movs	r4, #128	; 0x80
 80016da:	0424      	lsls	r4, r4, #16
 80016dc:	4314      	orrs	r4, r2
 80016de:	4abc      	ldr	r2, [pc, #752]	; (80019d0 <__aeabi_dmul+0x364>)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4694      	mov	ip, r2
 80016e4:	4642      	mov	r2, r8
 80016e6:	4463      	add	r3, ip
 80016e8:	195b      	adds	r3, r3, r5
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	9b01      	ldr	r3, [sp, #4]
 80016ee:	407a      	eors	r2, r7
 80016f0:	3301      	adds	r3, #1
 80016f2:	00c0      	lsls	r0, r0, #3
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2e0a      	cmp	r6, #10
 80016fa:	dd1c      	ble.n	8001736 <__aeabi_dmul+0xca>
 80016fc:	003a      	movs	r2, r7
 80016fe:	2e0b      	cmp	r6, #11
 8001700:	d05e      	beq.n	80017c0 <__aeabi_dmul+0x154>
 8001702:	4647      	mov	r7, r8
 8001704:	e056      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001706:	4649      	mov	r1, r9
 8001708:	4bb0      	ldr	r3, [pc, #704]	; (80019cc <__aeabi_dmul+0x360>)
 800170a:	4321      	orrs	r1, r4
 800170c:	18eb      	adds	r3, r5, r3
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	2900      	cmp	r1, #0
 8001712:	d12a      	bne.n	800176a <__aeabi_dmul+0xfe>
 8001714:	2080      	movs	r0, #128	; 0x80
 8001716:	2202      	movs	r2, #2
 8001718:	0100      	lsls	r0, r0, #4
 800171a:	002b      	movs	r3, r5
 800171c:	4684      	mov	ip, r0
 800171e:	4316      	orrs	r6, r2
 8001720:	4642      	mov	r2, r8
 8001722:	4463      	add	r3, ip
 8001724:	407a      	eors	r2, r7
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2e0a      	cmp	r6, #10
 800172c:	dd00      	ble.n	8001730 <__aeabi_dmul+0xc4>
 800172e:	e231      	b.n	8001b94 <__aeabi_dmul+0x528>
 8001730:	2000      	movs	r0, #0
 8001732:	2400      	movs	r4, #0
 8001734:	2102      	movs	r1, #2
 8001736:	2e02      	cmp	r6, #2
 8001738:	dc26      	bgt.n	8001788 <__aeabi_dmul+0x11c>
 800173a:	3e01      	subs	r6, #1
 800173c:	2e01      	cmp	r6, #1
 800173e:	d852      	bhi.n	80017e6 <__aeabi_dmul+0x17a>
 8001740:	2902      	cmp	r1, #2
 8001742:	d04c      	beq.n	80017de <__aeabi_dmul+0x172>
 8001744:	2901      	cmp	r1, #1
 8001746:	d000      	beq.n	800174a <__aeabi_dmul+0xde>
 8001748:	e118      	b.n	800197c <__aeabi_dmul+0x310>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2500      	movs	r5, #0
 8001750:	051b      	lsls	r3, r3, #20
 8001752:	4323      	orrs	r3, r4
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	4313      	orrs	r3, r2
 8001758:	0028      	movs	r0, r5
 800175a:	0019      	movs	r1, r3
 800175c:	b007      	add	sp, #28
 800175e:	bcf0      	pop	{r4, r5, r6, r7}
 8001760:	46bb      	mov	fp, r7
 8001762:	46b2      	mov	sl, r6
 8001764:	46a9      	mov	r9, r5
 8001766:	46a0      	mov	r8, r4
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	2180      	movs	r1, #128	; 0x80
 800176c:	2203      	movs	r2, #3
 800176e:	0109      	lsls	r1, r1, #4
 8001770:	002b      	movs	r3, r5
 8001772:	468c      	mov	ip, r1
 8001774:	4316      	orrs	r6, r2
 8001776:	4642      	mov	r2, r8
 8001778:	4463      	add	r3, ip
 800177a:	407a      	eors	r2, r7
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2e0a      	cmp	r6, #10
 8001782:	dd00      	ble.n	8001786 <__aeabi_dmul+0x11a>
 8001784:	e228      	b.n	8001bd8 <__aeabi_dmul+0x56c>
 8001786:	2103      	movs	r1, #3
 8001788:	2501      	movs	r5, #1
 800178a:	40b5      	lsls	r5, r6
 800178c:	46ac      	mov	ip, r5
 800178e:	26a6      	movs	r6, #166	; 0xa6
 8001790:	4663      	mov	r3, ip
 8001792:	00f6      	lsls	r6, r6, #3
 8001794:	4035      	ands	r5, r6
 8001796:	4233      	tst	r3, r6
 8001798:	d10b      	bne.n	80017b2 <__aeabi_dmul+0x146>
 800179a:	2690      	movs	r6, #144	; 0x90
 800179c:	00b6      	lsls	r6, r6, #2
 800179e:	4233      	tst	r3, r6
 80017a0:	d118      	bne.n	80017d4 <__aeabi_dmul+0x168>
 80017a2:	3eb9      	subs	r6, #185	; 0xb9
 80017a4:	3eff      	subs	r6, #255	; 0xff
 80017a6:	421e      	tst	r6, r3
 80017a8:	d01d      	beq.n	80017e6 <__aeabi_dmul+0x17a>
 80017aa:	46a3      	mov	fp, r4
 80017ac:	4682      	mov	sl, r0
 80017ae:	9100      	str	r1, [sp, #0]
 80017b0:	e000      	b.n	80017b4 <__aeabi_dmul+0x148>
 80017b2:	0017      	movs	r7, r2
 80017b4:	9900      	ldr	r1, [sp, #0]
 80017b6:	003a      	movs	r2, r7
 80017b8:	2902      	cmp	r1, #2
 80017ba:	d010      	beq.n	80017de <__aeabi_dmul+0x172>
 80017bc:	465c      	mov	r4, fp
 80017be:	4650      	mov	r0, sl
 80017c0:	2903      	cmp	r1, #3
 80017c2:	d1bf      	bne.n	8001744 <__aeabi_dmul+0xd8>
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	431c      	orrs	r4, r3
 80017ca:	0324      	lsls	r4, r4, #12
 80017cc:	0005      	movs	r5, r0
 80017ce:	4b7f      	ldr	r3, [pc, #508]	; (80019cc <__aeabi_dmul+0x360>)
 80017d0:	0b24      	lsrs	r4, r4, #12
 80017d2:	e7bd      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017d4:	2480      	movs	r4, #128	; 0x80
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <__aeabi_dmul+0x360>)
 80017da:	0324      	lsls	r4, r4, #12
 80017dc:	e7b8      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017de:	2400      	movs	r4, #0
 80017e0:	2500      	movs	r5, #0
 80017e2:	4b7a      	ldr	r3, [pc, #488]	; (80019cc <__aeabi_dmul+0x360>)
 80017e4:	e7b4      	b.n	8001750 <__aeabi_dmul+0xe4>
 80017e6:	4653      	mov	r3, sl
 80017e8:	041e      	lsls	r6, r3, #16
 80017ea:	0c36      	lsrs	r6, r6, #16
 80017ec:	0c1f      	lsrs	r7, r3, #16
 80017ee:	0033      	movs	r3, r6
 80017f0:	0c01      	lsrs	r1, r0, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c00      	lsrs	r0, r0, #16
 80017f6:	4343      	muls	r3, r0
 80017f8:	4698      	mov	r8, r3
 80017fa:	0003      	movs	r3, r0
 80017fc:	437b      	muls	r3, r7
 80017fe:	4699      	mov	r9, r3
 8001800:	0033      	movs	r3, r6
 8001802:	434b      	muls	r3, r1
 8001804:	469c      	mov	ip, r3
 8001806:	4643      	mov	r3, r8
 8001808:	000d      	movs	r5, r1
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	469a      	mov	sl, r3
 800180e:	437d      	muls	r5, r7
 8001810:	44cc      	add	ip, r9
 8001812:	44d4      	add	ip, sl
 8001814:	9500      	str	r5, [sp, #0]
 8001816:	45e1      	cmp	r9, ip
 8001818:	d904      	bls.n	8001824 <__aeabi_dmul+0x1b8>
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4699      	mov	r9, r3
 8001820:	444d      	add	r5, r9
 8001822:	9500      	str	r5, [sp, #0]
 8001824:	4663      	mov	r3, ip
 8001826:	0c1b      	lsrs	r3, r3, #16
 8001828:	001d      	movs	r5, r3
 800182a:	4663      	mov	r3, ip
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	469c      	mov	ip, r3
 8001830:	4643      	mov	r3, r8
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	4663      	mov	r3, ip
 800183a:	4443      	add	r3, r8
 800183c:	9303      	str	r3, [sp, #12]
 800183e:	0c23      	lsrs	r3, r4, #16
 8001840:	4698      	mov	r8, r3
 8001842:	0033      	movs	r3, r6
 8001844:	0424      	lsls	r4, r4, #16
 8001846:	0c24      	lsrs	r4, r4, #16
 8001848:	4363      	muls	r3, r4
 800184a:	469c      	mov	ip, r3
 800184c:	0023      	movs	r3, r4
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4643      	mov	r3, r8
 8001854:	435e      	muls	r6, r3
 8001856:	435f      	muls	r7, r3
 8001858:	444e      	add	r6, r9
 800185a:	4663      	mov	r3, ip
 800185c:	46b2      	mov	sl, r6
 800185e:	0c1e      	lsrs	r6, r3, #16
 8001860:	4456      	add	r6, sl
 8001862:	45b1      	cmp	r9, r6
 8001864:	d903      	bls.n	800186e <__aeabi_dmul+0x202>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4699      	mov	r9, r3
 800186c:	444f      	add	r7, r9
 800186e:	0c33      	lsrs	r3, r6, #16
 8001870:	4699      	mov	r9, r3
 8001872:	003b      	movs	r3, r7
 8001874:	444b      	add	r3, r9
 8001876:	9305      	str	r3, [sp, #20]
 8001878:	4663      	mov	r3, ip
 800187a:	46ac      	mov	ip, r5
 800187c:	041f      	lsls	r7, r3, #16
 800187e:	0c3f      	lsrs	r7, r7, #16
 8001880:	0436      	lsls	r6, r6, #16
 8001882:	19f6      	adds	r6, r6, r7
 8001884:	44b4      	add	ip, r6
 8001886:	4663      	mov	r3, ip
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	465b      	mov	r3, fp
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	469c      	mov	ip, r3
 8001890:	465b      	mov	r3, fp
 8001892:	041f      	lsls	r7, r3, #16
 8001894:	0c3f      	lsrs	r7, r7, #16
 8001896:	003b      	movs	r3, r7
 8001898:	4343      	muls	r3, r0
 800189a:	4699      	mov	r9, r3
 800189c:	4663      	mov	r3, ip
 800189e:	4343      	muls	r3, r0
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	4660      	mov	r0, ip
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	469b      	mov	fp, r3
 80018aa:	4348      	muls	r0, r1
 80018ac:	4379      	muls	r1, r7
 80018ae:	4451      	add	r1, sl
 80018b0:	4459      	add	r1, fp
 80018b2:	458a      	cmp	sl, r1
 80018b4:	d903      	bls.n	80018be <__aeabi_dmul+0x252>
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	469a      	mov	sl, r3
 80018bc:	4450      	add	r0, sl
 80018be:	0c0b      	lsrs	r3, r1, #16
 80018c0:	469a      	mov	sl, r3
 80018c2:	464b      	mov	r3, r9
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	4699      	mov	r9, r3
 80018ca:	003b      	movs	r3, r7
 80018cc:	4363      	muls	r3, r4
 80018ce:	0409      	lsls	r1, r1, #16
 80018d0:	4645      	mov	r5, r8
 80018d2:	4449      	add	r1, r9
 80018d4:	4699      	mov	r9, r3
 80018d6:	4663      	mov	r3, ip
 80018d8:	435c      	muls	r4, r3
 80018da:	436b      	muls	r3, r5
 80018dc:	469c      	mov	ip, r3
 80018de:	464b      	mov	r3, r9
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	436f      	muls	r7, r5
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	4447      	add	r7, r8
 80018ea:	4450      	add	r0, sl
 80018ec:	42bc      	cmp	r4, r7
 80018ee:	d903      	bls.n	80018f8 <__aeabi_dmul+0x28c>
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	025b      	lsls	r3, r3, #9
 80018f4:	4698      	mov	r8, r3
 80018f6:	44c4      	add	ip, r8
 80018f8:	9b04      	ldr	r3, [sp, #16]
 80018fa:	9d00      	ldr	r5, [sp, #0]
 80018fc:	4698      	mov	r8, r3
 80018fe:	4445      	add	r5, r8
 8001900:	42b5      	cmp	r5, r6
 8001902:	41b6      	sbcs	r6, r6
 8001904:	4273      	negs	r3, r6
 8001906:	4698      	mov	r8, r3
 8001908:	464b      	mov	r3, r9
 800190a:	041e      	lsls	r6, r3, #16
 800190c:	9b05      	ldr	r3, [sp, #20]
 800190e:	043c      	lsls	r4, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	0c36      	lsrs	r6, r6, #16
 8001914:	19a4      	adds	r4, r4, r6
 8001916:	444c      	add	r4, r9
 8001918:	46a1      	mov	r9, r4
 800191a:	4683      	mov	fp, r0
 800191c:	186e      	adds	r6, r5, r1
 800191e:	44c1      	add	r9, r8
 8001920:	428e      	cmp	r6, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	44cb      	add	fp, r9
 8001926:	465d      	mov	r5, fp
 8001928:	4249      	negs	r1, r1
 800192a:	186d      	adds	r5, r5, r1
 800192c:	429c      	cmp	r4, r3
 800192e:	41a4      	sbcs	r4, r4
 8001930:	45c1      	cmp	r9, r8
 8001932:	419b      	sbcs	r3, r3
 8001934:	4583      	cmp	fp, r0
 8001936:	4180      	sbcs	r0, r0
 8001938:	428d      	cmp	r5, r1
 800193a:	4189      	sbcs	r1, r1
 800193c:	425b      	negs	r3, r3
 800193e:	4264      	negs	r4, r4
 8001940:	431c      	orrs	r4, r3
 8001942:	4240      	negs	r0, r0
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	4249      	negs	r1, r1
 8001948:	4301      	orrs	r1, r0
 800194a:	0270      	lsls	r0, r6, #9
 800194c:	0c3f      	lsrs	r7, r7, #16
 800194e:	4318      	orrs	r0, r3
 8001950:	19e4      	adds	r4, r4, r7
 8001952:	1e47      	subs	r7, r0, #1
 8001954:	41b8      	sbcs	r0, r7
 8001956:	1864      	adds	r4, r4, r1
 8001958:	4464      	add	r4, ip
 800195a:	0df6      	lsrs	r6, r6, #23
 800195c:	0261      	lsls	r1, r4, #9
 800195e:	4330      	orrs	r0, r6
 8001960:	0dec      	lsrs	r4, r5, #23
 8001962:	026e      	lsls	r6, r5, #9
 8001964:	430c      	orrs	r4, r1
 8001966:	4330      	orrs	r0, r6
 8001968:	01c9      	lsls	r1, r1, #7
 800196a:	d400      	bmi.n	800196e <__aeabi_dmul+0x302>
 800196c:	e0f1      	b.n	8001b52 <__aeabi_dmul+0x4e6>
 800196e:	2101      	movs	r1, #1
 8001970:	0843      	lsrs	r3, r0, #1
 8001972:	4001      	ands	r1, r0
 8001974:	430b      	orrs	r3, r1
 8001976:	07e0      	lsls	r0, r4, #31
 8001978:	4318      	orrs	r0, r3
 800197a:	0864      	lsrs	r4, r4, #1
 800197c:	4915      	ldr	r1, [pc, #84]	; (80019d4 <__aeabi_dmul+0x368>)
 800197e:	9b02      	ldr	r3, [sp, #8]
 8001980:	468c      	mov	ip, r1
 8001982:	4463      	add	r3, ip
 8001984:	2b00      	cmp	r3, #0
 8001986:	dc00      	bgt.n	800198a <__aeabi_dmul+0x31e>
 8001988:	e097      	b.n	8001aba <__aeabi_dmul+0x44e>
 800198a:	0741      	lsls	r1, r0, #29
 800198c:	d009      	beq.n	80019a2 <__aeabi_dmul+0x336>
 800198e:	210f      	movs	r1, #15
 8001990:	4001      	ands	r1, r0
 8001992:	2904      	cmp	r1, #4
 8001994:	d005      	beq.n	80019a2 <__aeabi_dmul+0x336>
 8001996:	1d01      	adds	r1, r0, #4
 8001998:	4281      	cmp	r1, r0
 800199a:	4180      	sbcs	r0, r0
 800199c:	4240      	negs	r0, r0
 800199e:	1824      	adds	r4, r4, r0
 80019a0:	0008      	movs	r0, r1
 80019a2:	01e1      	lsls	r1, r4, #7
 80019a4:	d506      	bpl.n	80019b4 <__aeabi_dmul+0x348>
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	00c9      	lsls	r1, r1, #3
 80019aa:	468c      	mov	ip, r1
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <__aeabi_dmul+0x36c>)
 80019ae:	401c      	ands	r4, r3
 80019b0:	9b02      	ldr	r3, [sp, #8]
 80019b2:	4463      	add	r3, ip
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <__aeabi_dmul+0x370>)
 80019b6:	428b      	cmp	r3, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dmul+0x350>
 80019ba:	e710      	b.n	80017de <__aeabi_dmul+0x172>
 80019bc:	0761      	lsls	r1, r4, #29
 80019be:	08c5      	lsrs	r5, r0, #3
 80019c0:	0264      	lsls	r4, r4, #9
 80019c2:	055b      	lsls	r3, r3, #21
 80019c4:	430d      	orrs	r5, r1
 80019c6:	0b24      	lsrs	r4, r4, #12
 80019c8:	0d5b      	lsrs	r3, r3, #21
 80019ca:	e6c1      	b.n	8001750 <__aeabi_dmul+0xe4>
 80019cc:	000007ff 	.word	0x000007ff
 80019d0:	fffffc01 	.word	0xfffffc01
 80019d4:	000003ff 	.word	0x000003ff
 80019d8:	feffffff 	.word	0xfeffffff
 80019dc:	000007fe 	.word	0x000007fe
 80019e0:	464b      	mov	r3, r9
 80019e2:	4323      	orrs	r3, r4
 80019e4:	d059      	beq.n	8001a9a <__aeabi_dmul+0x42e>
 80019e6:	2c00      	cmp	r4, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_dmul+0x380>
 80019ea:	e0a3      	b.n	8001b34 <__aeabi_dmul+0x4c8>
 80019ec:	0020      	movs	r0, r4
 80019ee:	f000 fdb1 	bl	8002554 <__clzsi2>
 80019f2:	0001      	movs	r1, r0
 80019f4:	0003      	movs	r3, r0
 80019f6:	390b      	subs	r1, #11
 80019f8:	221d      	movs	r2, #29
 80019fa:	1a52      	subs	r2, r2, r1
 80019fc:	4649      	mov	r1, r9
 80019fe:	0018      	movs	r0, r3
 8001a00:	40d1      	lsrs	r1, r2
 8001a02:	464a      	mov	r2, r9
 8001a04:	3808      	subs	r0, #8
 8001a06:	4082      	lsls	r2, r0
 8001a08:	4084      	lsls	r4, r0
 8001a0a:	0010      	movs	r0, r2
 8001a0c:	430c      	orrs	r4, r1
 8001a0e:	4a74      	ldr	r2, [pc, #464]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a10:	1aeb      	subs	r3, r5, r3
 8001a12:	4694      	mov	ip, r2
 8001a14:	4642      	mov	r2, r8
 8001a16:	4463      	add	r3, ip
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	9b01      	ldr	r3, [sp, #4]
 8001a1c:	407a      	eors	r2, r7
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2100      	movs	r1, #0
 8001a22:	b2d2      	uxtb	r2, r2
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2e0a      	cmp	r6, #10
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dmul+0x3c0>
 8001a2a:	e667      	b.n	80016fc <__aeabi_dmul+0x90>
 8001a2c:	e683      	b.n	8001736 <__aeabi_dmul+0xca>
 8001a2e:	465b      	mov	r3, fp
 8001a30:	4303      	orrs	r3, r0
 8001a32:	469a      	mov	sl, r3
 8001a34:	d02a      	beq.n	8001a8c <__aeabi_dmul+0x420>
 8001a36:	465b      	mov	r3, fp
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d06d      	beq.n	8001b18 <__aeabi_dmul+0x4ac>
 8001a3c:	4658      	mov	r0, fp
 8001a3e:	f000 fd89 	bl	8002554 <__clzsi2>
 8001a42:	0001      	movs	r1, r0
 8001a44:	0003      	movs	r3, r0
 8001a46:	390b      	subs	r1, #11
 8001a48:	221d      	movs	r2, #29
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	0018      	movs	r0, r3
 8001a50:	465d      	mov	r5, fp
 8001a52:	40d1      	lsrs	r1, r2
 8001a54:	3808      	subs	r0, #8
 8001a56:	4085      	lsls	r5, r0
 8001a58:	000a      	movs	r2, r1
 8001a5a:	4084      	lsls	r4, r0
 8001a5c:	432a      	orrs	r2, r5
 8001a5e:	4693      	mov	fp, r2
 8001a60:	46a2      	mov	sl, r4
 8001a62:	4d5f      	ldr	r5, [pc, #380]	; (8001be0 <__aeabi_dmul+0x574>)
 8001a64:	2600      	movs	r6, #0
 8001a66:	1aed      	subs	r5, r5, r3
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e625      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a6e:	465b      	mov	r3, fp
 8001a70:	4303      	orrs	r3, r0
 8001a72:	469a      	mov	sl, r3
 8001a74:	d105      	bne.n	8001a82 <__aeabi_dmul+0x416>
 8001a76:	2300      	movs	r3, #0
 8001a78:	469b      	mov	fp, r3
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	2608      	movs	r6, #8
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e61b      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a82:	2303      	movs	r3, #3
 8001a84:	4682      	mov	sl, r0
 8001a86:	260c      	movs	r6, #12
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	e616      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	469b      	mov	fp, r3
 8001a90:	3301      	adds	r3, #1
 8001a92:	2604      	movs	r6, #4
 8001a94:	2500      	movs	r5, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	e60f      	b.n	80016ba <__aeabi_dmul+0x4e>
 8001a9a:	4642      	mov	r2, r8
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	9501      	str	r5, [sp, #4]
 8001aa0:	431e      	orrs	r6, r3
 8001aa2:	9b01      	ldr	r3, [sp, #4]
 8001aa4:	407a      	eors	r2, r7
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2400      	movs	r4, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	9302      	str	r3, [sp, #8]
 8001ab2:	2e0a      	cmp	r6, #10
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dmul+0x44c>
 8001ab6:	e621      	b.n	80016fc <__aeabi_dmul+0x90>
 8001ab8:	e63d      	b.n	8001736 <__aeabi_dmul+0xca>
 8001aba:	2101      	movs	r1, #1
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	2938      	cmp	r1, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dmul+0x458>
 8001ac2:	e642      	b.n	800174a <__aeabi_dmul+0xde>
 8001ac4:	291f      	cmp	r1, #31
 8001ac6:	dd47      	ble.n	8001b58 <__aeabi_dmul+0x4ec>
 8001ac8:	261f      	movs	r6, #31
 8001aca:	0025      	movs	r5, r4
 8001acc:	4276      	negs	r6, r6
 8001ace:	1af3      	subs	r3, r6, r3
 8001ad0:	40dd      	lsrs	r5, r3
 8001ad2:	002b      	movs	r3, r5
 8001ad4:	2920      	cmp	r1, #32
 8001ad6:	d005      	beq.n	8001ae4 <__aeabi_dmul+0x478>
 8001ad8:	4942      	ldr	r1, [pc, #264]	; (8001be4 <__aeabi_dmul+0x578>)
 8001ada:	9d02      	ldr	r5, [sp, #8]
 8001adc:	468c      	mov	ip, r1
 8001ade:	4465      	add	r5, ip
 8001ae0:	40ac      	lsls	r4, r5
 8001ae2:	4320      	orrs	r0, r4
 8001ae4:	1e41      	subs	r1, r0, #1
 8001ae6:	4188      	sbcs	r0, r1
 8001ae8:	4318      	orrs	r0, r3
 8001aea:	2307      	movs	r3, #7
 8001aec:	001d      	movs	r5, r3
 8001aee:	2400      	movs	r4, #0
 8001af0:	4005      	ands	r5, r0
 8001af2:	4203      	tst	r3, r0
 8001af4:	d04a      	beq.n	8001b8c <__aeabi_dmul+0x520>
 8001af6:	230f      	movs	r3, #15
 8001af8:	2400      	movs	r4, #0
 8001afa:	4003      	ands	r3, r0
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d042      	beq.n	8001b86 <__aeabi_dmul+0x51a>
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	4283      	cmp	r3, r0
 8001b04:	4180      	sbcs	r0, r0
 8001b06:	4240      	negs	r0, r0
 8001b08:	1824      	adds	r4, r4, r0
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	0223      	lsls	r3, r4, #8
 8001b0e:	d53a      	bpl.n	8001b86 <__aeabi_dmul+0x51a>
 8001b10:	2301      	movs	r3, #1
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e61b      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b18:	f000 fd1c 	bl	8002554 <__clzsi2>
 8001b1c:	0001      	movs	r1, r0
 8001b1e:	0003      	movs	r3, r0
 8001b20:	3115      	adds	r1, #21
 8001b22:	3320      	adds	r3, #32
 8001b24:	291c      	cmp	r1, #28
 8001b26:	dd8f      	ble.n	8001a48 <__aeabi_dmul+0x3dc>
 8001b28:	3808      	subs	r0, #8
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4692      	mov	sl, r2
 8001b30:	46a3      	mov	fp, r4
 8001b32:	e796      	b.n	8001a62 <__aeabi_dmul+0x3f6>
 8001b34:	f000 fd0e 	bl	8002554 <__clzsi2>
 8001b38:	0001      	movs	r1, r0
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	3115      	adds	r1, #21
 8001b3e:	3320      	adds	r3, #32
 8001b40:	291c      	cmp	r1, #28
 8001b42:	dc00      	bgt.n	8001b46 <__aeabi_dmul+0x4da>
 8001b44:	e758      	b.n	80019f8 <__aeabi_dmul+0x38c>
 8001b46:	0002      	movs	r2, r0
 8001b48:	464c      	mov	r4, r9
 8001b4a:	3a08      	subs	r2, #8
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	4094      	lsls	r4, r2
 8001b50:	e75d      	b.n	8001a0e <__aeabi_dmul+0x3a2>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	e711      	b.n	800197c <__aeabi_dmul+0x310>
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <__aeabi_dmul+0x57c>)
 8001b5a:	0026      	movs	r6, r4
 8001b5c:	469c      	mov	ip, r3
 8001b5e:	0003      	movs	r3, r0
 8001b60:	9d02      	ldr	r5, [sp, #8]
 8001b62:	40cb      	lsrs	r3, r1
 8001b64:	4465      	add	r5, ip
 8001b66:	40ae      	lsls	r6, r5
 8001b68:	431e      	orrs	r6, r3
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	40ab      	lsls	r3, r5
 8001b6e:	1e58      	subs	r0, r3, #1
 8001b70:	4183      	sbcs	r3, r0
 8001b72:	0030      	movs	r0, r6
 8001b74:	4318      	orrs	r0, r3
 8001b76:	40cc      	lsrs	r4, r1
 8001b78:	0743      	lsls	r3, r0, #29
 8001b7a:	d0c7      	beq.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	4003      	ands	r3, r0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d1bd      	bne.n	8001b00 <__aeabi_dmul+0x494>
 8001b84:	e7c2      	b.n	8001b0c <__aeabi_dmul+0x4a0>
 8001b86:	0765      	lsls	r5, r4, #29
 8001b88:	0264      	lsls	r4, r4, #9
 8001b8a:	0b24      	lsrs	r4, r4, #12
 8001b8c:	08c0      	lsrs	r0, r0, #3
 8001b8e:	2300      	movs	r3, #0
 8001b90:	4305      	orrs	r5, r0
 8001b92:	e5dd      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001b94:	2500      	movs	r5, #0
 8001b96:	2302      	movs	r3, #2
 8001b98:	2e0f      	cmp	r6, #15
 8001b9a:	d10c      	bne.n	8001bb6 <__aeabi_dmul+0x54a>
 8001b9c:	2480      	movs	r4, #128	; 0x80
 8001b9e:	465b      	mov	r3, fp
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4223      	tst	r3, r4
 8001ba4:	d00e      	beq.n	8001bc4 <__aeabi_dmul+0x558>
 8001ba6:	4221      	tst	r1, r4
 8001ba8:	d10c      	bne.n	8001bc4 <__aeabi_dmul+0x558>
 8001baa:	430c      	orrs	r4, r1
 8001bac:	0324      	lsls	r4, r4, #12
 8001bae:	003a      	movs	r2, r7
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <__aeabi_dmul+0x580>)
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	e5cc      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bb6:	2e0b      	cmp	r6, #11
 8001bb8:	d000      	beq.n	8001bbc <__aeabi_dmul+0x550>
 8001bba:	e5a2      	b.n	8001702 <__aeabi_dmul+0x96>
 8001bbc:	468b      	mov	fp, r1
 8001bbe:	46aa      	mov	sl, r5
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	e5f7      	b.n	80017b4 <__aeabi_dmul+0x148>
 8001bc4:	2480      	movs	r4, #128	; 0x80
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0324      	lsls	r4, r4, #12
 8001bca:	431c      	orrs	r4, r3
 8001bcc:	0324      	lsls	r4, r4, #12
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4655      	mov	r5, sl
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <__aeabi_dmul+0x580>)
 8001bd4:	0b24      	lsrs	r4, r4, #12
 8001bd6:	e5bb      	b.n	8001750 <__aeabi_dmul+0xe4>
 8001bd8:	464d      	mov	r5, r9
 8001bda:	0021      	movs	r1, r4
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e7db      	b.n	8001b98 <__aeabi_dmul+0x52c>
 8001be0:	fffffc0d 	.word	0xfffffc0d
 8001be4:	0000043e 	.word	0x0000043e
 8001be8:	0000041e 	.word	0x0000041e
 8001bec:	000007ff 	.word	0x000007ff

08001bf0 <__aeabi_dsub>:
 8001bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf2:	4657      	mov	r7, sl
 8001bf4:	464e      	mov	r6, r9
 8001bf6:	4645      	mov	r5, r8
 8001bf8:	46de      	mov	lr, fp
 8001bfa:	b5e0      	push	{r5, r6, r7, lr}
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	0004      	movs	r4, r0
 8001c00:	0019      	movs	r1, r3
 8001c02:	0010      	movs	r0, r2
 8001c04:	032b      	lsls	r3, r5, #12
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	0f62      	lsrs	r2, r4, #29
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	00e3      	lsls	r3, r4, #3
 8001c0e:	030c      	lsls	r4, r1, #12
 8001c10:	0a64      	lsrs	r4, r4, #9
 8001c12:	0f47      	lsrs	r7, r0, #29
 8001c14:	4327      	orrs	r7, r4
 8001c16:	4cd0      	ldr	r4, [pc, #832]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c18:	006e      	lsls	r6, r5, #1
 8001c1a:	4691      	mov	r9, r2
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	004a      	lsls	r2, r1, #1
 8001c20:	00c0      	lsls	r0, r0, #3
 8001c22:	4698      	mov	r8, r3
 8001c24:	46a2      	mov	sl, r4
 8001c26:	0d76      	lsrs	r6, r6, #21
 8001c28:	0fed      	lsrs	r5, r5, #31
 8001c2a:	0d52      	lsrs	r2, r2, #21
 8001c2c:	0fc9      	lsrs	r1, r1, #31
 8001c2e:	9001      	str	r0, [sp, #4]
 8001c30:	42a2      	cmp	r2, r4
 8001c32:	d100      	bne.n	8001c36 <__aeabi_dsub+0x46>
 8001c34:	e0b9      	b.n	8001daa <__aeabi_dsub+0x1ba>
 8001c36:	2401      	movs	r4, #1
 8001c38:	4061      	eors	r1, r4
 8001c3a:	468b      	mov	fp, r1
 8001c3c:	428d      	cmp	r5, r1
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x52>
 8001c40:	e08d      	b.n	8001d5e <__aeabi_dsub+0x16e>
 8001c42:	1ab4      	subs	r4, r6, r2
 8001c44:	46a4      	mov	ip, r4
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x5c>
 8001c4a:	e0b7      	b.n	8001dbc <__aeabi_dsub+0x1cc>
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_dsub+0x62>
 8001c50:	e0cb      	b.n	8001dea <__aeabi_dsub+0x1fa>
 8001c52:	4ac1      	ldr	r2, [pc, #772]	; (8001f58 <__aeabi_dsub+0x368>)
 8001c54:	4296      	cmp	r6, r2
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x6a>
 8001c58:	e186      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001c5a:	2280      	movs	r2, #128	; 0x80
 8001c5c:	0412      	lsls	r2, r2, #16
 8001c5e:	4317      	orrs	r7, r2
 8001c60:	4662      	mov	r2, ip
 8001c62:	2a38      	cmp	r2, #56	; 0x38
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0x78>
 8001c66:	e1a4      	b.n	8001fb2 <__aeabi_dsub+0x3c2>
 8001c68:	2a1f      	cmp	r2, #31
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x7e>
 8001c6c:	e21d      	b.n	80020aa <__aeabi_dsub+0x4ba>
 8001c6e:	4661      	mov	r1, ip
 8001c70:	2220      	movs	r2, #32
 8001c72:	003c      	movs	r4, r7
 8001c74:	1a52      	subs	r2, r2, r1
 8001c76:	0001      	movs	r1, r0
 8001c78:	4090      	lsls	r0, r2
 8001c7a:	4094      	lsls	r4, r2
 8001c7c:	1e42      	subs	r2, r0, #1
 8001c7e:	4190      	sbcs	r0, r2
 8001c80:	4662      	mov	r2, ip
 8001c82:	46a0      	mov	r8, r4
 8001c84:	4664      	mov	r4, ip
 8001c86:	40d7      	lsrs	r7, r2
 8001c88:	464a      	mov	r2, r9
 8001c8a:	40e1      	lsrs	r1, r4
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1bd2      	subs	r2, r2, r7
 8001c90:	4691      	mov	r9, r2
 8001c92:	430c      	orrs	r4, r1
 8001c94:	4304      	orrs	r4, r0
 8001c96:	1b1c      	subs	r4, r3, r4
 8001c98:	42a3      	cmp	r3, r4
 8001c9a:	4192      	sbcs	r2, r2
 8001c9c:	464b      	mov	r3, r9
 8001c9e:	4252      	negs	r2, r2
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	469a      	mov	sl, r3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	021b      	lsls	r3, r3, #8
 8001ca8:	d400      	bmi.n	8001cac <__aeabi_dsub+0xbc>
 8001caa:	e12b      	b.n	8001f04 <__aeabi_dsub+0x314>
 8001cac:	4653      	mov	r3, sl
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	0a53      	lsrs	r3, r2, #9
 8001cb2:	469a      	mov	sl, r3
 8001cb4:	4653      	mov	r3, sl
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0xcc>
 8001cba:	e166      	b.n	8001f8a <__aeabi_dsub+0x39a>
 8001cbc:	4650      	mov	r0, sl
 8001cbe:	f000 fc49 	bl	8002554 <__clzsi2>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	3b08      	subs	r3, #8
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	0020      	movs	r0, r4
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	4651      	mov	r1, sl
 8001cce:	40d0      	lsrs	r0, r2
 8001cd0:	4099      	lsls	r1, r3
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	409c      	lsls	r4, r3
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	429e      	cmp	r6, r3
 8001cda:	dd00      	ble.n	8001cde <__aeabi_dsub+0xee>
 8001cdc:	e164      	b.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001cde:	1b9b      	subs	r3, r3, r6
 8001ce0:	1c59      	adds	r1, r3, #1
 8001ce2:	291f      	cmp	r1, #31
 8001ce4:	dd00      	ble.n	8001ce8 <__aeabi_dsub+0xf8>
 8001ce6:	e0fe      	b.n	8001ee6 <__aeabi_dsub+0x2f6>
 8001ce8:	2320      	movs	r3, #32
 8001cea:	0010      	movs	r0, r2
 8001cec:	0026      	movs	r6, r4
 8001cee:	1a5b      	subs	r3, r3, r1
 8001cf0:	409c      	lsls	r4, r3
 8001cf2:	4098      	lsls	r0, r3
 8001cf4:	40ce      	lsrs	r6, r1
 8001cf6:	40ca      	lsrs	r2, r1
 8001cf8:	1e63      	subs	r3, r4, #1
 8001cfa:	419c      	sbcs	r4, r3
 8001cfc:	4330      	orrs	r0, r6
 8001cfe:	4692      	mov	sl, r2
 8001d00:	2600      	movs	r6, #0
 8001d02:	4304      	orrs	r4, r0
 8001d04:	0763      	lsls	r3, r4, #29
 8001d06:	d009      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d08:	230f      	movs	r3, #15
 8001d0a:	4023      	ands	r3, r4
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d005      	beq.n	8001d1c <__aeabi_dsub+0x12c>
 8001d10:	1d23      	adds	r3, r4, #4
 8001d12:	42a3      	cmp	r3, r4
 8001d14:	41a4      	sbcs	r4, r4
 8001d16:	4264      	negs	r4, r4
 8001d18:	44a2      	add	sl, r4
 8001d1a:	001c      	movs	r4, r3
 8001d1c:	4653      	mov	r3, sl
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	d400      	bmi.n	8001d24 <__aeabi_dsub+0x134>
 8001d22:	e0f2      	b.n	8001f0a <__aeabi_dsub+0x31a>
 8001d24:	4b8c      	ldr	r3, [pc, #560]	; (8001f58 <__aeabi_dsub+0x368>)
 8001d26:	3601      	adds	r6, #1
 8001d28:	429e      	cmp	r6, r3
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x13e>
 8001d2c:	e10f      	b.n	8001f4e <__aeabi_dsub+0x35e>
 8001d2e:	4653      	mov	r3, sl
 8001d30:	498a      	ldr	r1, [pc, #552]	; (8001f5c <__aeabi_dsub+0x36c>)
 8001d32:	08e4      	lsrs	r4, r4, #3
 8001d34:	400b      	ands	r3, r1
 8001d36:	0019      	movs	r1, r3
 8001d38:	075b      	lsls	r3, r3, #29
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	0572      	lsls	r2, r6, #21
 8001d3e:	024c      	lsls	r4, r1, #9
 8001d40:	0b24      	lsrs	r4, r4, #12
 8001d42:	0d52      	lsrs	r2, r2, #21
 8001d44:	0512      	lsls	r2, r2, #20
 8001d46:	4322      	orrs	r2, r4
 8001d48:	07ed      	lsls	r5, r5, #31
 8001d4a:	432a      	orrs	r2, r5
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	0011      	movs	r1, r2
 8001d50:	b003      	add	sp, #12
 8001d52:	bcf0      	pop	{r4, r5, r6, r7}
 8001d54:	46bb      	mov	fp, r7
 8001d56:	46b2      	mov	sl, r6
 8001d58:	46a9      	mov	r9, r5
 8001d5a:	46a0      	mov	r8, r4
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	1ab4      	subs	r4, r6, r2
 8001d60:	46a4      	mov	ip, r4
 8001d62:	2c00      	cmp	r4, #0
 8001d64:	dd59      	ble.n	8001e1a <__aeabi_dsub+0x22a>
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x17c>
 8001d6a:	e0b0      	b.n	8001ece <__aeabi_dsub+0x2de>
 8001d6c:	4556      	cmp	r6, sl
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x182>
 8001d70:	e0fa      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0412      	lsls	r2, r2, #16
 8001d76:	4317      	orrs	r7, r2
 8001d78:	4662      	mov	r2, ip
 8001d7a:	2a38      	cmp	r2, #56	; 0x38
 8001d7c:	dd00      	ble.n	8001d80 <__aeabi_dsub+0x190>
 8001d7e:	e0d4      	b.n	8001f2a <__aeabi_dsub+0x33a>
 8001d80:	2a1f      	cmp	r2, #31
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x196>
 8001d84:	e1c0      	b.n	8002108 <__aeabi_dsub+0x518>
 8001d86:	0039      	movs	r1, r7
 8001d88:	3a20      	subs	r2, #32
 8001d8a:	40d1      	lsrs	r1, r2
 8001d8c:	4662      	mov	r2, ip
 8001d8e:	2a20      	cmp	r2, #32
 8001d90:	d006      	beq.n	8001da0 <__aeabi_dsub+0x1b0>
 8001d92:	4664      	mov	r4, ip
 8001d94:	2240      	movs	r2, #64	; 0x40
 8001d96:	1b12      	subs	r2, r2, r4
 8001d98:	003c      	movs	r4, r7
 8001d9a:	4094      	lsls	r4, r2
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	9401      	str	r4, [sp, #4]
 8001da0:	9c01      	ldr	r4, [sp, #4]
 8001da2:	1e62      	subs	r2, r4, #1
 8001da4:	4194      	sbcs	r4, r2
 8001da6:	430c      	orrs	r4, r1
 8001da8:	e0c3      	b.n	8001f32 <__aeabi_dsub+0x342>
 8001daa:	003c      	movs	r4, r7
 8001dac:	4304      	orrs	r4, r0
 8001dae:	d02b      	beq.n	8001e08 <__aeabi_dsub+0x218>
 8001db0:	468b      	mov	fp, r1
 8001db2:	428d      	cmp	r5, r1
 8001db4:	d02e      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001db6:	4c6a      	ldr	r4, [pc, #424]	; (8001f60 <__aeabi_dsub+0x370>)
 8001db8:	46a4      	mov	ip, r4
 8001dba:	44b4      	add	ip, r6
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d05f      	beq.n	8001e82 <__aeabi_dsub+0x292>
 8001dc2:	1b94      	subs	r4, r2, r6
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	2e00      	cmp	r6, #0
 8001dc8:	d000      	beq.n	8001dcc <__aeabi_dsub+0x1dc>
 8001dca:	e120      	b.n	800200e <__aeabi_dsub+0x41e>
 8001dcc:	464c      	mov	r4, r9
 8001dce:	431c      	orrs	r4, r3
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_dsub+0x1e4>
 8001dd2:	e1c7      	b.n	8002164 <__aeabi_dsub+0x574>
 8001dd4:	4661      	mov	r1, ip
 8001dd6:	1e4c      	subs	r4, r1, #1
 8001dd8:	2901      	cmp	r1, #1
 8001dda:	d100      	bne.n	8001dde <__aeabi_dsub+0x1ee>
 8001ddc:	e223      	b.n	8002226 <__aeabi_dsub+0x636>
 8001dde:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <__aeabi_dsub+0x368>)
 8001de0:	45ac      	cmp	ip, r5
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x1f6>
 8001de4:	e1d8      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8001de6:	46a4      	mov	ip, r4
 8001de8:	e11a      	b.n	8002020 <__aeabi_dsub+0x430>
 8001dea:	003a      	movs	r2, r7
 8001dec:	4302      	orrs	r2, r0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0x202>
 8001df0:	e0e4      	b.n	8001fbc <__aeabi_dsub+0x3cc>
 8001df2:	0022      	movs	r2, r4
 8001df4:	3a01      	subs	r2, #1
 8001df6:	2c01      	cmp	r4, #1
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x20c>
 8001dfa:	e1c3      	b.n	8002184 <__aeabi_dsub+0x594>
 8001dfc:	4956      	ldr	r1, [pc, #344]	; (8001f58 <__aeabi_dsub+0x368>)
 8001dfe:	428c      	cmp	r4, r1
 8001e00:	d100      	bne.n	8001e04 <__aeabi_dsub+0x214>
 8001e02:	e0b1      	b.n	8001f68 <__aeabi_dsub+0x378>
 8001e04:	4694      	mov	ip, r2
 8001e06:	e72b      	b.n	8001c60 <__aeabi_dsub+0x70>
 8001e08:	2401      	movs	r4, #1
 8001e0a:	4061      	eors	r1, r4
 8001e0c:	468b      	mov	fp, r1
 8001e0e:	428d      	cmp	r5, r1
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dsub+0x224>
 8001e12:	e716      	b.n	8001c42 <__aeabi_dsub+0x52>
 8001e14:	4952      	ldr	r1, [pc, #328]	; (8001f60 <__aeabi_dsub+0x370>)
 8001e16:	468c      	mov	ip, r1
 8001e18:	44b4      	add	ip, r6
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	2c00      	cmp	r4, #0
 8001e1e:	d100      	bne.n	8001e22 <__aeabi_dsub+0x232>
 8001e20:	e0d3      	b.n	8001fca <__aeabi_dsub+0x3da>
 8001e22:	1b91      	subs	r1, r2, r6
 8001e24:	468c      	mov	ip, r1
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x23c>
 8001e2a:	e15e      	b.n	80020ea <__aeabi_dsub+0x4fa>
 8001e2c:	494a      	ldr	r1, [pc, #296]	; (8001f58 <__aeabi_dsub+0x368>)
 8001e2e:	428a      	cmp	r2, r1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x244>
 8001e32:	e1be      	b.n	80021b2 <__aeabi_dsub+0x5c2>
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	464c      	mov	r4, r9
 8001e38:	0409      	lsls	r1, r1, #16
 8001e3a:	430c      	orrs	r4, r1
 8001e3c:	46a1      	mov	r9, r4
 8001e3e:	4661      	mov	r1, ip
 8001e40:	2938      	cmp	r1, #56	; 0x38
 8001e42:	dd00      	ble.n	8001e46 <__aeabi_dsub+0x256>
 8001e44:	e1ba      	b.n	80021bc <__aeabi_dsub+0x5cc>
 8001e46:	291f      	cmp	r1, #31
 8001e48:	dd00      	ble.n	8001e4c <__aeabi_dsub+0x25c>
 8001e4a:	e227      	b.n	800229c <__aeabi_dsub+0x6ac>
 8001e4c:	2420      	movs	r4, #32
 8001e4e:	1a64      	subs	r4, r4, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	40a1      	lsls	r1, r4
 8001e54:	001e      	movs	r6, r3
 8001e56:	4688      	mov	r8, r1
 8001e58:	4661      	mov	r1, ip
 8001e5a:	40a3      	lsls	r3, r4
 8001e5c:	40ce      	lsrs	r6, r1
 8001e5e:	4641      	mov	r1, r8
 8001e60:	1e5c      	subs	r4, r3, #1
 8001e62:	41a3      	sbcs	r3, r4
 8001e64:	4331      	orrs	r1, r6
 8001e66:	4319      	orrs	r1, r3
 8001e68:	000c      	movs	r4, r1
 8001e6a:	4663      	mov	r3, ip
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	40d9      	lsrs	r1, r3
 8001e70:	187f      	adds	r7, r7, r1
 8001e72:	1824      	adds	r4, r4, r0
 8001e74:	4284      	cmp	r4, r0
 8001e76:	419b      	sbcs	r3, r3
 8001e78:	425b      	negs	r3, r3
 8001e7a:	469a      	mov	sl, r3
 8001e7c:	0016      	movs	r6, r2
 8001e7e:	44ba      	add	sl, r7
 8001e80:	e05d      	b.n	8001f3e <__aeabi_dsub+0x34e>
 8001e82:	4c38      	ldr	r4, [pc, #224]	; (8001f64 <__aeabi_dsub+0x374>)
 8001e84:	1c72      	adds	r2, r6, #1
 8001e86:	4222      	tst	r2, r4
 8001e88:	d000      	beq.n	8001e8c <__aeabi_dsub+0x29c>
 8001e8a:	e0df      	b.n	800204c <__aeabi_dsub+0x45c>
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	2e00      	cmp	r6, #0
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2a6>
 8001e94:	e15c      	b.n	8002150 <__aeabi_dsub+0x560>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x2ac>
 8001e9a:	e1cf      	b.n	800223c <__aeabi_dsub+0x64c>
 8001e9c:	003a      	movs	r2, r7
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x2b4>
 8001ea2:	e17f      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001ea4:	1a1c      	subs	r4, r3, r0
 8001ea6:	464a      	mov	r2, r9
 8001ea8:	42a3      	cmp	r3, r4
 8001eaa:	4189      	sbcs	r1, r1
 8001eac:	1bd2      	subs	r2, r2, r7
 8001eae:	4249      	negs	r1, r1
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	4692      	mov	sl, r2
 8001eb4:	0212      	lsls	r2, r2, #8
 8001eb6:	d400      	bmi.n	8001eba <__aeabi_dsub+0x2ca>
 8001eb8:	e20a      	b.n	80022d0 <__aeabi_dsub+0x6e0>
 8001eba:	1ac4      	subs	r4, r0, r3
 8001ebc:	42a0      	cmp	r0, r4
 8001ebe:	4180      	sbcs	r0, r0
 8001ec0:	464b      	mov	r3, r9
 8001ec2:	4240      	negs	r0, r0
 8001ec4:	1aff      	subs	r7, r7, r3
 8001ec6:	1a3b      	subs	r3, r7, r0
 8001ec8:	469a      	mov	sl, r3
 8001eca:	465d      	mov	r5, fp
 8001ecc:	e71a      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001ece:	003a      	movs	r2, r7
 8001ed0:	4302      	orrs	r2, r0
 8001ed2:	d073      	beq.n	8001fbc <__aeabi_dsub+0x3cc>
 8001ed4:	0022      	movs	r2, r4
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x2ee>
 8001edc:	e0cb      	b.n	8002076 <__aeabi_dsub+0x486>
 8001ede:	4554      	cmp	r4, sl
 8001ee0:	d042      	beq.n	8001f68 <__aeabi_dsub+0x378>
 8001ee2:	4694      	mov	ip, r2
 8001ee4:	e748      	b.n	8001d78 <__aeabi_dsub+0x188>
 8001ee6:	0010      	movs	r0, r2
 8001ee8:	3b1f      	subs	r3, #31
 8001eea:	40d8      	lsrs	r0, r3
 8001eec:	2920      	cmp	r1, #32
 8001eee:	d003      	beq.n	8001ef8 <__aeabi_dsub+0x308>
 8001ef0:	2340      	movs	r3, #64	; 0x40
 8001ef2:	1a5b      	subs	r3, r3, r1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	4314      	orrs	r4, r2
 8001ef8:	1e63      	subs	r3, r4, #1
 8001efa:	419c      	sbcs	r4, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	2600      	movs	r6, #0
 8001f00:	469a      	mov	sl, r3
 8001f02:	4304      	orrs	r4, r0
 8001f04:	0763      	lsls	r3, r4, #29
 8001f06:	d000      	beq.n	8001f0a <__aeabi_dsub+0x31a>
 8001f08:	e6fe      	b.n	8001d08 <__aeabi_dsub+0x118>
 8001f0a:	4652      	mov	r2, sl
 8001f0c:	08e3      	lsrs	r3, r4, #3
 8001f0e:	0752      	lsls	r2, r2, #29
 8001f10:	4313      	orrs	r3, r2
 8001f12:	4652      	mov	r2, sl
 8001f14:	46b4      	mov	ip, r6
 8001f16:	08d2      	lsrs	r2, r2, #3
 8001f18:	490f      	ldr	r1, [pc, #60]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f1a:	458c      	cmp	ip, r1
 8001f1c:	d02a      	beq.n	8001f74 <__aeabi_dsub+0x384>
 8001f1e:	0312      	lsls	r2, r2, #12
 8001f20:	0b14      	lsrs	r4, r2, #12
 8001f22:	4662      	mov	r2, ip
 8001f24:	0552      	lsls	r2, r2, #21
 8001f26:	0d52      	lsrs	r2, r2, #21
 8001f28:	e70c      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f2a:	003c      	movs	r4, r7
 8001f2c:	4304      	orrs	r4, r0
 8001f2e:	1e62      	subs	r2, r4, #1
 8001f30:	4194      	sbcs	r4, r2
 8001f32:	18e4      	adds	r4, r4, r3
 8001f34:	429c      	cmp	r4, r3
 8001f36:	4192      	sbcs	r2, r2
 8001f38:	4252      	negs	r2, r2
 8001f3a:	444a      	add	r2, r9
 8001f3c:	4692      	mov	sl, r2
 8001f3e:	4653      	mov	r3, sl
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	d5df      	bpl.n	8001f04 <__aeabi_dsub+0x314>
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <__aeabi_dsub+0x368>)
 8001f46:	3601      	adds	r6, #1
 8001f48:	429e      	cmp	r6, r3
 8001f4a:	d000      	beq.n	8001f4e <__aeabi_dsub+0x35e>
 8001f4c:	e0a0      	b.n	8002090 <__aeabi_dsub+0x4a0>
 8001f4e:	0032      	movs	r2, r6
 8001f50:	2400      	movs	r4, #0
 8001f52:	2300      	movs	r3, #0
 8001f54:	e6f6      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	000007ff 	.word	0x000007ff
 8001f5c:	ff7fffff 	.word	0xff7fffff
 8001f60:	fffff801 	.word	0xfffff801
 8001f64:	000007fe 	.word	0x000007fe
 8001f68:	08db      	lsrs	r3, r3, #3
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	0752      	lsls	r2, r2, #29
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	464a      	mov	r2, r9
 8001f72:	08d2      	lsrs	r2, r2, #3
 8001f74:	0019      	movs	r1, r3
 8001f76:	4311      	orrs	r1, r2
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x38c>
 8001f7a:	e1b5      	b.n	80022e8 <__aeabi_dsub+0x6f8>
 8001f7c:	2480      	movs	r4, #128	; 0x80
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	4314      	orrs	r4, r2
 8001f82:	0324      	lsls	r4, r4, #12
 8001f84:	4ad5      	ldr	r2, [pc, #852]	; (80022dc <__aeabi_dsub+0x6ec>)
 8001f86:	0b24      	lsrs	r4, r4, #12
 8001f88:	e6dc      	b.n	8001d44 <__aeabi_dsub+0x154>
 8001f8a:	0020      	movs	r0, r4
 8001f8c:	f000 fae2 	bl	8002554 <__clzsi2>
 8001f90:	0003      	movs	r3, r0
 8001f92:	3318      	adds	r3, #24
 8001f94:	2b1f      	cmp	r3, #31
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dsub+0x3aa>
 8001f98:	e695      	b.n	8001cc6 <__aeabi_dsub+0xd6>
 8001f9a:	0022      	movs	r2, r4
 8001f9c:	3808      	subs	r0, #8
 8001f9e:	4082      	lsls	r2, r0
 8001fa0:	2400      	movs	r4, #0
 8001fa2:	429e      	cmp	r6, r3
 8001fa4:	dc00      	bgt.n	8001fa8 <__aeabi_dsub+0x3b8>
 8001fa6:	e69a      	b.n	8001cde <__aeabi_dsub+0xee>
 8001fa8:	1af6      	subs	r6, r6, r3
 8001faa:	4bcd      	ldr	r3, [pc, #820]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8001fac:	401a      	ands	r2, r3
 8001fae:	4692      	mov	sl, r2
 8001fb0:	e6a8      	b.n	8001d04 <__aeabi_dsub+0x114>
 8001fb2:	003c      	movs	r4, r7
 8001fb4:	4304      	orrs	r4, r0
 8001fb6:	1e62      	subs	r2, r4, #1
 8001fb8:	4194      	sbcs	r4, r2
 8001fba:	e66c      	b.n	8001c96 <__aeabi_dsub+0xa6>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	08db      	lsrs	r3, r3, #3
 8001fc0:	0752      	lsls	r2, r2, #29
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	08d2      	lsrs	r2, r2, #3
 8001fc8:	e7a6      	b.n	8001f18 <__aeabi_dsub+0x328>
 8001fca:	4cc6      	ldr	r4, [pc, #792]	; (80022e4 <__aeabi_dsub+0x6f4>)
 8001fcc:	1c72      	adds	r2, r6, #1
 8001fce:	4222      	tst	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x3e4>
 8001fd2:	e0ac      	b.n	800212e <__aeabi_dsub+0x53e>
 8001fd4:	464a      	mov	r2, r9
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	2e00      	cmp	r6, #0
 8001fda:	d000      	beq.n	8001fde <__aeabi_dsub+0x3ee>
 8001fdc:	e105      	b.n	80021ea <__aeabi_dsub+0x5fa>
 8001fde:	2a00      	cmp	r2, #0
 8001fe0:	d100      	bne.n	8001fe4 <__aeabi_dsub+0x3f4>
 8001fe2:	e156      	b.n	8002292 <__aeabi_dsub+0x6a2>
 8001fe4:	003a      	movs	r2, r7
 8001fe6:	4302      	orrs	r2, r0
 8001fe8:	d100      	bne.n	8001fec <__aeabi_dsub+0x3fc>
 8001fea:	e0db      	b.n	80021a4 <__aeabi_dsub+0x5b4>
 8001fec:	181c      	adds	r4, r3, r0
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	444f      	add	r7, r9
 8001ff4:	46ba      	mov	sl, r7
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	449a      	add	sl, r3
 8001ffa:	4653      	mov	r3, sl
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	d400      	bmi.n	8002002 <__aeabi_dsub+0x412>
 8002000:	e780      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002002:	4652      	mov	r2, sl
 8002004:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002006:	2601      	movs	r6, #1
 8002008:	401a      	ands	r2, r3
 800200a:	4692      	mov	sl, r2
 800200c:	e77a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800200e:	4cb3      	ldr	r4, [pc, #716]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002010:	42a2      	cmp	r2, r4
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x426>
 8002014:	e0c0      	b.n	8002198 <__aeabi_dsub+0x5a8>
 8002016:	2480      	movs	r4, #128	; 0x80
 8002018:	464d      	mov	r5, r9
 800201a:	0424      	lsls	r4, r4, #16
 800201c:	4325      	orrs	r5, r4
 800201e:	46a9      	mov	r9, r5
 8002020:	4664      	mov	r4, ip
 8002022:	2c38      	cmp	r4, #56	; 0x38
 8002024:	dc53      	bgt.n	80020ce <__aeabi_dsub+0x4de>
 8002026:	4661      	mov	r1, ip
 8002028:	2c1f      	cmp	r4, #31
 800202a:	dd00      	ble.n	800202e <__aeabi_dsub+0x43e>
 800202c:	e0cd      	b.n	80021ca <__aeabi_dsub+0x5da>
 800202e:	2520      	movs	r5, #32
 8002030:	001e      	movs	r6, r3
 8002032:	1b2d      	subs	r5, r5, r4
 8002034:	464c      	mov	r4, r9
 8002036:	40ab      	lsls	r3, r5
 8002038:	40ac      	lsls	r4, r5
 800203a:	40ce      	lsrs	r6, r1
 800203c:	1e5d      	subs	r5, r3, #1
 800203e:	41ab      	sbcs	r3, r5
 8002040:	4334      	orrs	r4, r6
 8002042:	4323      	orrs	r3, r4
 8002044:	464c      	mov	r4, r9
 8002046:	40cc      	lsrs	r4, r1
 8002048:	1b3f      	subs	r7, r7, r4
 800204a:	e045      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 800204c:	464a      	mov	r2, r9
 800204e:	1a1c      	subs	r4, r3, r0
 8002050:	1bd1      	subs	r1, r2, r7
 8002052:	42a3      	cmp	r3, r4
 8002054:	4192      	sbcs	r2, r2
 8002056:	4252      	negs	r2, r2
 8002058:	4692      	mov	sl, r2
 800205a:	000a      	movs	r2, r1
 800205c:	4651      	mov	r1, sl
 800205e:	1a52      	subs	r2, r2, r1
 8002060:	4692      	mov	sl, r2
 8002062:	0212      	lsls	r2, r2, #8
 8002064:	d500      	bpl.n	8002068 <__aeabi_dsub+0x478>
 8002066:	e083      	b.n	8002170 <__aeabi_dsub+0x580>
 8002068:	4653      	mov	r3, sl
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x480>
 800206e:	e621      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002070:	2200      	movs	r2, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e753      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002076:	181c      	adds	r4, r3, r0
 8002078:	429c      	cmp	r4, r3
 800207a:	419b      	sbcs	r3, r3
 800207c:	444f      	add	r7, r9
 800207e:	46ba      	mov	sl, r7
 8002080:	425b      	negs	r3, r3
 8002082:	449a      	add	sl, r3
 8002084:	4653      	mov	r3, sl
 8002086:	2601      	movs	r6, #1
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d400      	bmi.n	800208e <__aeabi_dsub+0x49e>
 800208c:	e73a      	b.n	8001f04 <__aeabi_dsub+0x314>
 800208e:	2602      	movs	r6, #2
 8002090:	4652      	mov	r2, sl
 8002092:	4b93      	ldr	r3, [pc, #588]	; (80022e0 <__aeabi_dsub+0x6f0>)
 8002094:	2101      	movs	r1, #1
 8002096:	401a      	ands	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	4021      	ands	r1, r4
 800209c:	0862      	lsrs	r2, r4, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	07dc      	lsls	r4, r3, #31
 80020a2:	085b      	lsrs	r3, r3, #1
 80020a4:	469a      	mov	sl, r3
 80020a6:	4314      	orrs	r4, r2
 80020a8:	e62c      	b.n	8001d04 <__aeabi_dsub+0x114>
 80020aa:	0039      	movs	r1, r7
 80020ac:	3a20      	subs	r2, #32
 80020ae:	40d1      	lsrs	r1, r2
 80020b0:	4662      	mov	r2, ip
 80020b2:	2a20      	cmp	r2, #32
 80020b4:	d006      	beq.n	80020c4 <__aeabi_dsub+0x4d4>
 80020b6:	4664      	mov	r4, ip
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1b12      	subs	r2, r2, r4
 80020bc:	003c      	movs	r4, r7
 80020be:	4094      	lsls	r4, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	9401      	str	r4, [sp, #4]
 80020c4:	9c01      	ldr	r4, [sp, #4]
 80020c6:	1e62      	subs	r2, r4, #1
 80020c8:	4194      	sbcs	r4, r2
 80020ca:	430c      	orrs	r4, r1
 80020cc:	e5e3      	b.n	8001c96 <__aeabi_dsub+0xa6>
 80020ce:	4649      	mov	r1, r9
 80020d0:	4319      	orrs	r1, r3
 80020d2:	000b      	movs	r3, r1
 80020d4:	1e5c      	subs	r4, r3, #1
 80020d6:	41a3      	sbcs	r3, r4
 80020d8:	1ac4      	subs	r4, r0, r3
 80020da:	42a0      	cmp	r0, r4
 80020dc:	419b      	sbcs	r3, r3
 80020de:	425b      	negs	r3, r3
 80020e0:	1afb      	subs	r3, r7, r3
 80020e2:	469a      	mov	sl, r3
 80020e4:	465d      	mov	r5, fp
 80020e6:	0016      	movs	r6, r2
 80020e8:	e5dc      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 80020ea:	4649      	mov	r1, r9
 80020ec:	4319      	orrs	r1, r3
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dsub+0x502>
 80020f0:	e0ae      	b.n	8002250 <__aeabi_dsub+0x660>
 80020f2:	4661      	mov	r1, ip
 80020f4:	4664      	mov	r4, ip
 80020f6:	3901      	subs	r1, #1
 80020f8:	2c01      	cmp	r4, #1
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x50e>
 80020fc:	e0e0      	b.n	80022c0 <__aeabi_dsub+0x6d0>
 80020fe:	4c77      	ldr	r4, [pc, #476]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002100:	45a4      	cmp	ip, r4
 8002102:	d056      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 8002104:	468c      	mov	ip, r1
 8002106:	e69a      	b.n	8001e3e <__aeabi_dsub+0x24e>
 8002108:	4661      	mov	r1, ip
 800210a:	2220      	movs	r2, #32
 800210c:	003c      	movs	r4, r7
 800210e:	1a52      	subs	r2, r2, r1
 8002110:	4094      	lsls	r4, r2
 8002112:	0001      	movs	r1, r0
 8002114:	4090      	lsls	r0, r2
 8002116:	46a0      	mov	r8, r4
 8002118:	4664      	mov	r4, ip
 800211a:	1e42      	subs	r2, r0, #1
 800211c:	4190      	sbcs	r0, r2
 800211e:	4662      	mov	r2, ip
 8002120:	40e1      	lsrs	r1, r4
 8002122:	4644      	mov	r4, r8
 8002124:	40d7      	lsrs	r7, r2
 8002126:	430c      	orrs	r4, r1
 8002128:	4304      	orrs	r4, r0
 800212a:	44b9      	add	r9, r7
 800212c:	e701      	b.n	8001f32 <__aeabi_dsub+0x342>
 800212e:	496b      	ldr	r1, [pc, #428]	; (80022dc <__aeabi_dsub+0x6ec>)
 8002130:	428a      	cmp	r2, r1
 8002132:	d100      	bne.n	8002136 <__aeabi_dsub+0x546>
 8002134:	e70c      	b.n	8001f50 <__aeabi_dsub+0x360>
 8002136:	1818      	adds	r0, r3, r0
 8002138:	4298      	cmp	r0, r3
 800213a:	419b      	sbcs	r3, r3
 800213c:	444f      	add	r7, r9
 800213e:	425b      	negs	r3, r3
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	07dc      	lsls	r4, r3, #31
 8002144:	0840      	lsrs	r0, r0, #1
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	469a      	mov	sl, r3
 800214a:	0016      	movs	r6, r2
 800214c:	4304      	orrs	r4, r0
 800214e:	e6d9      	b.n	8001f04 <__aeabi_dsub+0x314>
 8002150:	2a00      	cmp	r2, #0
 8002152:	d000      	beq.n	8002156 <__aeabi_dsub+0x566>
 8002154:	e081      	b.n	800225a <__aeabi_dsub+0x66a>
 8002156:	003b      	movs	r3, r7
 8002158:	4303      	orrs	r3, r0
 800215a:	d11d      	bne.n	8002198 <__aeabi_dsub+0x5a8>
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2500      	movs	r5, #0
 8002160:	0312      	lsls	r2, r2, #12
 8002162:	e70b      	b.n	8001f7c <__aeabi_dsub+0x38c>
 8002164:	08c0      	lsrs	r0, r0, #3
 8002166:	077b      	lsls	r3, r7, #29
 8002168:	465d      	mov	r5, fp
 800216a:	4303      	orrs	r3, r0
 800216c:	08fa      	lsrs	r2, r7, #3
 800216e:	e6d3      	b.n	8001f18 <__aeabi_dsub+0x328>
 8002170:	1ac4      	subs	r4, r0, r3
 8002172:	42a0      	cmp	r0, r4
 8002174:	4180      	sbcs	r0, r0
 8002176:	464b      	mov	r3, r9
 8002178:	4240      	negs	r0, r0
 800217a:	1aff      	subs	r7, r7, r3
 800217c:	1a3b      	subs	r3, r7, r0
 800217e:	469a      	mov	sl, r3
 8002180:	465d      	mov	r5, fp
 8002182:	e597      	b.n	8001cb4 <__aeabi_dsub+0xc4>
 8002184:	1a1c      	subs	r4, r3, r0
 8002186:	464a      	mov	r2, r9
 8002188:	42a3      	cmp	r3, r4
 800218a:	419b      	sbcs	r3, r3
 800218c:	1bd7      	subs	r7, r2, r7
 800218e:	425b      	negs	r3, r3
 8002190:	1afb      	subs	r3, r7, r3
 8002192:	469a      	mov	sl, r3
 8002194:	2601      	movs	r6, #1
 8002196:	e585      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6e7      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021a4:	464a      	mov	r2, r9
 80021a6:	08db      	lsrs	r3, r3, #3
 80021a8:	0752      	lsls	r2, r2, #29
 80021aa:	4313      	orrs	r3, r2
 80021ac:	464a      	mov	r2, r9
 80021ae:	08d2      	lsrs	r2, r2, #3
 80021b0:	e6b5      	b.n	8001f1e <__aeabi_dsub+0x32e>
 80021b2:	08c0      	lsrs	r0, r0, #3
 80021b4:	077b      	lsls	r3, r7, #29
 80021b6:	4303      	orrs	r3, r0
 80021b8:	08fa      	lsrs	r2, r7, #3
 80021ba:	e6db      	b.n	8001f74 <__aeabi_dsub+0x384>
 80021bc:	4649      	mov	r1, r9
 80021be:	4319      	orrs	r1, r3
 80021c0:	000b      	movs	r3, r1
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	418b      	sbcs	r3, r1
 80021c6:	001c      	movs	r4, r3
 80021c8:	e653      	b.n	8001e72 <__aeabi_dsub+0x282>
 80021ca:	464d      	mov	r5, r9
 80021cc:	3c20      	subs	r4, #32
 80021ce:	40e5      	lsrs	r5, r4
 80021d0:	2920      	cmp	r1, #32
 80021d2:	d005      	beq.n	80021e0 <__aeabi_dsub+0x5f0>
 80021d4:	2440      	movs	r4, #64	; 0x40
 80021d6:	1a64      	subs	r4, r4, r1
 80021d8:	4649      	mov	r1, r9
 80021da:	40a1      	lsls	r1, r4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4698      	mov	r8, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	1e5c      	subs	r4, r3, #1
 80021e4:	41a3      	sbcs	r3, r4
 80021e6:	432b      	orrs	r3, r5
 80021e8:	e776      	b.n	80020d8 <__aeabi_dsub+0x4e8>
 80021ea:	2a00      	cmp	r2, #0
 80021ec:	d0e1      	beq.n	80021b2 <__aeabi_dsub+0x5c2>
 80021ee:	003a      	movs	r2, r7
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	4302      	orrs	r2, r0
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x608>
 80021f6:	e6b8      	b.n	8001f6a <__aeabi_dsub+0x37a>
 80021f8:	464a      	mov	r2, r9
 80021fa:	0752      	lsls	r2, r2, #29
 80021fc:	2480      	movs	r4, #128	; 0x80
 80021fe:	4313      	orrs	r3, r2
 8002200:	464a      	mov	r2, r9
 8002202:	0324      	lsls	r4, r4, #12
 8002204:	08d2      	lsrs	r2, r2, #3
 8002206:	4222      	tst	r2, r4
 8002208:	d007      	beq.n	800221a <__aeabi_dsub+0x62a>
 800220a:	08fe      	lsrs	r6, r7, #3
 800220c:	4226      	tst	r6, r4
 800220e:	d104      	bne.n	800221a <__aeabi_dsub+0x62a>
 8002210:	465d      	mov	r5, fp
 8002212:	0032      	movs	r2, r6
 8002214:	08c3      	lsrs	r3, r0, #3
 8002216:	077f      	lsls	r7, r7, #29
 8002218:	433b      	orrs	r3, r7
 800221a:	0f59      	lsrs	r1, r3, #29
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	0749      	lsls	r1, r1, #29
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	430b      	orrs	r3, r1
 8002224:	e6a6      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002226:	1ac4      	subs	r4, r0, r3
 8002228:	42a0      	cmp	r0, r4
 800222a:	4180      	sbcs	r0, r0
 800222c:	464b      	mov	r3, r9
 800222e:	4240      	negs	r0, r0
 8002230:	1aff      	subs	r7, r7, r3
 8002232:	1a3b      	subs	r3, r7, r0
 8002234:	469a      	mov	sl, r3
 8002236:	465d      	mov	r5, fp
 8002238:	2601      	movs	r6, #1
 800223a:	e533      	b.n	8001ca4 <__aeabi_dsub+0xb4>
 800223c:	003b      	movs	r3, r7
 800223e:	4303      	orrs	r3, r0
 8002240:	d100      	bne.n	8002244 <__aeabi_dsub+0x654>
 8002242:	e715      	b.n	8002070 <__aeabi_dsub+0x480>
 8002244:	08c0      	lsrs	r0, r0, #3
 8002246:	077b      	lsls	r3, r7, #29
 8002248:	465d      	mov	r5, fp
 800224a:	4303      	orrs	r3, r0
 800224c:	08fa      	lsrs	r2, r7, #3
 800224e:	e666      	b.n	8001f1e <__aeabi_dsub+0x32e>
 8002250:	08c0      	lsrs	r0, r0, #3
 8002252:	077b      	lsls	r3, r7, #29
 8002254:	4303      	orrs	r3, r0
 8002256:	08fa      	lsrs	r2, r7, #3
 8002258:	e65e      	b.n	8001f18 <__aeabi_dsub+0x328>
 800225a:	003a      	movs	r2, r7
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	4302      	orrs	r2, r0
 8002260:	d100      	bne.n	8002264 <__aeabi_dsub+0x674>
 8002262:	e682      	b.n	8001f6a <__aeabi_dsub+0x37a>
 8002264:	464a      	mov	r2, r9
 8002266:	0752      	lsls	r2, r2, #29
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	4313      	orrs	r3, r2
 800226c:	464a      	mov	r2, r9
 800226e:	0324      	lsls	r4, r4, #12
 8002270:	08d2      	lsrs	r2, r2, #3
 8002272:	4222      	tst	r2, r4
 8002274:	d007      	beq.n	8002286 <__aeabi_dsub+0x696>
 8002276:	08fe      	lsrs	r6, r7, #3
 8002278:	4226      	tst	r6, r4
 800227a:	d104      	bne.n	8002286 <__aeabi_dsub+0x696>
 800227c:	465d      	mov	r5, fp
 800227e:	0032      	movs	r2, r6
 8002280:	08c3      	lsrs	r3, r0, #3
 8002282:	077f      	lsls	r7, r7, #29
 8002284:	433b      	orrs	r3, r7
 8002286:	0f59      	lsrs	r1, r3, #29
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	0749      	lsls	r1, r1, #29
 800228e:	430b      	orrs	r3, r1
 8002290:	e670      	b.n	8001f74 <__aeabi_dsub+0x384>
 8002292:	08c0      	lsrs	r0, r0, #3
 8002294:	077b      	lsls	r3, r7, #29
 8002296:	4303      	orrs	r3, r0
 8002298:	08fa      	lsrs	r2, r7, #3
 800229a:	e640      	b.n	8001f1e <__aeabi_dsub+0x32e>
 800229c:	464c      	mov	r4, r9
 800229e:	3920      	subs	r1, #32
 80022a0:	40cc      	lsrs	r4, r1
 80022a2:	4661      	mov	r1, ip
 80022a4:	2920      	cmp	r1, #32
 80022a6:	d006      	beq.n	80022b6 <__aeabi_dsub+0x6c6>
 80022a8:	4666      	mov	r6, ip
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	1b89      	subs	r1, r1, r6
 80022ae:	464e      	mov	r6, r9
 80022b0:	408e      	lsls	r6, r1
 80022b2:	4333      	orrs	r3, r6
 80022b4:	4698      	mov	r8, r3
 80022b6:	4643      	mov	r3, r8
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	418b      	sbcs	r3, r1
 80022bc:	431c      	orrs	r4, r3
 80022be:	e5d8      	b.n	8001e72 <__aeabi_dsub+0x282>
 80022c0:	181c      	adds	r4, r3, r0
 80022c2:	4284      	cmp	r4, r0
 80022c4:	4180      	sbcs	r0, r0
 80022c6:	444f      	add	r7, r9
 80022c8:	46ba      	mov	sl, r7
 80022ca:	4240      	negs	r0, r0
 80022cc:	4482      	add	sl, r0
 80022ce:	e6d9      	b.n	8002084 <__aeabi_dsub+0x494>
 80022d0:	4653      	mov	r3, sl
 80022d2:	4323      	orrs	r3, r4
 80022d4:	d100      	bne.n	80022d8 <__aeabi_dsub+0x6e8>
 80022d6:	e6cb      	b.n	8002070 <__aeabi_dsub+0x480>
 80022d8:	e614      	b.n	8001f04 <__aeabi_dsub+0x314>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	000007ff 	.word	0x000007ff
 80022e0:	ff7fffff 	.word	0xff7fffff
 80022e4:	000007fe 	.word	0x000007fe
 80022e8:	2300      	movs	r3, #0
 80022ea:	4a01      	ldr	r2, [pc, #4]	; (80022f0 <__aeabi_dsub+0x700>)
 80022ec:	001c      	movs	r4, r3
 80022ee:	e529      	b.n	8001d44 <__aeabi_dsub+0x154>
 80022f0:	000007ff 	.word	0x000007ff

080022f4 <__aeabi_dcmpun>:
 80022f4:	b570      	push	{r4, r5, r6, lr}
 80022f6:	0005      	movs	r5, r0
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <__aeabi_dcmpun+0x38>)
 80022fa:	031c      	lsls	r4, r3, #12
 80022fc:	0016      	movs	r6, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	0049      	lsls	r1, r1, #1
 8002304:	0b12      	lsrs	r2, r2, #12
 8002306:	0d49      	lsrs	r1, r1, #21
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d5b      	lsrs	r3, r3, #21
 800230c:	4281      	cmp	r1, r0
 800230e:	d008      	beq.n	8002322 <__aeabi_dcmpun+0x2e>
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <__aeabi_dcmpun+0x38>)
 8002312:	2000      	movs	r0, #0
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002318:	0020      	movs	r0, r4
 800231a:	4330      	orrs	r0, r6
 800231c:	1e43      	subs	r3, r0, #1
 800231e:	4198      	sbcs	r0, r3
 8002320:	bd70      	pop	{r4, r5, r6, pc}
 8002322:	2001      	movs	r0, #1
 8002324:	432a      	orrs	r2, r5
 8002326:	d1fb      	bne.n	8002320 <__aeabi_dcmpun+0x2c>
 8002328:	e7f2      	b.n	8002310 <__aeabi_dcmpun+0x1c>
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	000007ff 	.word	0x000007ff

08002330 <__aeabi_d2iz>:
 8002330:	000a      	movs	r2, r1
 8002332:	b530      	push	{r4, r5, lr}
 8002334:	4c13      	ldr	r4, [pc, #76]	; (8002384 <__aeabi_d2iz+0x54>)
 8002336:	0053      	lsls	r3, r2, #1
 8002338:	0309      	lsls	r1, r1, #12
 800233a:	0005      	movs	r5, r0
 800233c:	0b09      	lsrs	r1, r1, #12
 800233e:	2000      	movs	r0, #0
 8002340:	0d5b      	lsrs	r3, r3, #21
 8002342:	0fd2      	lsrs	r2, r2, #31
 8002344:	42a3      	cmp	r3, r4
 8002346:	dd04      	ble.n	8002352 <__aeabi_d2iz+0x22>
 8002348:	480f      	ldr	r0, [pc, #60]	; (8002388 <__aeabi_d2iz+0x58>)
 800234a:	4283      	cmp	r3, r0
 800234c:	dd02      	ble.n	8002354 <__aeabi_d2iz+0x24>
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <__aeabi_d2iz+0x5c>)
 8002350:	18d0      	adds	r0, r2, r3
 8002352:	bd30      	pop	{r4, r5, pc}
 8002354:	2080      	movs	r0, #128	; 0x80
 8002356:	0340      	lsls	r0, r0, #13
 8002358:	4301      	orrs	r1, r0
 800235a:	480d      	ldr	r0, [pc, #52]	; (8002390 <__aeabi_d2iz+0x60>)
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	281f      	cmp	r0, #31
 8002360:	dd08      	ble.n	8002374 <__aeabi_d2iz+0x44>
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <__aeabi_d2iz+0x64>)
 8002364:	1ac3      	subs	r3, r0, r3
 8002366:	40d9      	lsrs	r1, r3
 8002368:	000b      	movs	r3, r1
 800236a:	4258      	negs	r0, r3
 800236c:	2a00      	cmp	r2, #0
 800236e:	d1f0      	bne.n	8002352 <__aeabi_d2iz+0x22>
 8002370:	0018      	movs	r0, r3
 8002372:	e7ee      	b.n	8002352 <__aeabi_d2iz+0x22>
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <__aeabi_d2iz+0x68>)
 8002376:	40c5      	lsrs	r5, r0
 8002378:	46a4      	mov	ip, r4
 800237a:	4463      	add	r3, ip
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	432b      	orrs	r3, r5
 8002382:	e7f2      	b.n	800236a <__aeabi_d2iz+0x3a>
 8002384:	000003fe 	.word	0x000003fe
 8002388:	0000041d 	.word	0x0000041d
 800238c:	7fffffff 	.word	0x7fffffff
 8002390:	00000433 	.word	0x00000433
 8002394:	00000413 	.word	0x00000413
 8002398:	fffffbed 	.word	0xfffffbed

0800239c <__aeabi_i2d>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	2800      	cmp	r0, #0
 80023a0:	d016      	beq.n	80023d0 <__aeabi_i2d+0x34>
 80023a2:	17c3      	asrs	r3, r0, #31
 80023a4:	18c5      	adds	r5, r0, r3
 80023a6:	405d      	eors	r5, r3
 80023a8:	0fc4      	lsrs	r4, r0, #31
 80023aa:	0028      	movs	r0, r5
 80023ac:	f000 f8d2 	bl	8002554 <__clzsi2>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <__aeabi_i2d+0x5c>)
 80023b2:	1a1b      	subs	r3, r3, r0
 80023b4:	280a      	cmp	r0, #10
 80023b6:	dc16      	bgt.n	80023e6 <__aeabi_i2d+0x4a>
 80023b8:	0002      	movs	r2, r0
 80023ba:	002e      	movs	r6, r5
 80023bc:	3215      	adds	r2, #21
 80023be:	4096      	lsls	r6, r2
 80023c0:	220b      	movs	r2, #11
 80023c2:	1a12      	subs	r2, r2, r0
 80023c4:	40d5      	lsrs	r5, r2
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	032d      	lsls	r5, r5, #12
 80023ca:	0b2d      	lsrs	r5, r5, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e003      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023d0:	2400      	movs	r4, #0
 80023d2:	2300      	movs	r3, #0
 80023d4:	2500      	movs	r5, #0
 80023d6:	2600      	movs	r6, #0
 80023d8:	051b      	lsls	r3, r3, #20
 80023da:	432b      	orrs	r3, r5
 80023dc:	07e4      	lsls	r4, r4, #31
 80023de:	4323      	orrs	r3, r4
 80023e0:	0030      	movs	r0, r6
 80023e2:	0019      	movs	r1, r3
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
 80023e6:	380b      	subs	r0, #11
 80023e8:	4085      	lsls	r5, r0
 80023ea:	055b      	lsls	r3, r3, #21
 80023ec:	032d      	lsls	r5, r5, #12
 80023ee:	2600      	movs	r6, #0
 80023f0:	0b2d      	lsrs	r5, r5, #12
 80023f2:	0d5b      	lsrs	r3, r3, #21
 80023f4:	e7f0      	b.n	80023d8 <__aeabi_i2d+0x3c>
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	0000041e 	.word	0x0000041e

080023fc <__aeabi_ui2d>:
 80023fc:	b510      	push	{r4, lr}
 80023fe:	1e04      	subs	r4, r0, #0
 8002400:	d010      	beq.n	8002424 <__aeabi_ui2d+0x28>
 8002402:	f000 f8a7 	bl	8002554 <__clzsi2>
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <__aeabi_ui2d+0x48>)
 8002408:	1a1b      	subs	r3, r3, r0
 800240a:	280a      	cmp	r0, #10
 800240c:	dc11      	bgt.n	8002432 <__aeabi_ui2d+0x36>
 800240e:	220b      	movs	r2, #11
 8002410:	0021      	movs	r1, r4
 8002412:	1a12      	subs	r2, r2, r0
 8002414:	40d1      	lsrs	r1, r2
 8002416:	3015      	adds	r0, #21
 8002418:	030a      	lsls	r2, r1, #12
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4084      	lsls	r4, r0
 800241e:	0b12      	lsrs	r2, r2, #12
 8002420:	0d5b      	lsrs	r3, r3, #21
 8002422:	e001      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	4313      	orrs	r3, r2
 800242c:	0020      	movs	r0, r4
 800242e:	0019      	movs	r1, r3
 8002430:	bd10      	pop	{r4, pc}
 8002432:	0022      	movs	r2, r4
 8002434:	380b      	subs	r0, #11
 8002436:	4082      	lsls	r2, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0312      	lsls	r2, r2, #12
 800243c:	2400      	movs	r4, #0
 800243e:	0b12      	lsrs	r2, r2, #12
 8002440:	0d5b      	lsrs	r3, r3, #21
 8002442:	e7f1      	b.n	8002428 <__aeabi_ui2d+0x2c>
 8002444:	0000041e 	.word	0x0000041e

08002448 <__aeabi_d2f>:
 8002448:	0002      	movs	r2, r0
 800244a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244c:	004b      	lsls	r3, r1, #1
 800244e:	030d      	lsls	r5, r1, #12
 8002450:	0f40      	lsrs	r0, r0, #29
 8002452:	0d5b      	lsrs	r3, r3, #21
 8002454:	0fcc      	lsrs	r4, r1, #31
 8002456:	0a6d      	lsrs	r5, r5, #9
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <__aeabi_d2f+0xfc>)
 800245a:	4305      	orrs	r5, r0
 800245c:	1c58      	adds	r0, r3, #1
 800245e:	00d7      	lsls	r7, r2, #3
 8002460:	4208      	tst	r0, r1
 8002462:	d00a      	beq.n	800247a <__aeabi_d2f+0x32>
 8002464:	4938      	ldr	r1, [pc, #224]	; (8002548 <__aeabi_d2f+0x100>)
 8002466:	1859      	adds	r1, r3, r1
 8002468:	29fe      	cmp	r1, #254	; 0xfe
 800246a:	dd16      	ble.n	800249a <__aeabi_d2f+0x52>
 800246c:	20ff      	movs	r0, #255	; 0xff
 800246e:	2200      	movs	r2, #0
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	4310      	orrs	r0, r2
 8002474:	07e4      	lsls	r4, r4, #31
 8002476:	4320      	orrs	r0, r4
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <__aeabi_d2f+0x44>
 800247e:	433d      	orrs	r5, r7
 8002480:	d026      	beq.n	80024d0 <__aeabi_d2f+0x88>
 8002482:	2205      	movs	r2, #5
 8002484:	0192      	lsls	r2, r2, #6
 8002486:	0a52      	lsrs	r2, r2, #9
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	e7f1      	b.n	8002470 <__aeabi_d2f+0x28>
 800248c:	432f      	orrs	r7, r5
 800248e:	d0ed      	beq.n	800246c <__aeabi_d2f+0x24>
 8002490:	2280      	movs	r2, #128	; 0x80
 8002492:	03d2      	lsls	r2, r2, #15
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	432a      	orrs	r2, r5
 8002498:	e7ea      	b.n	8002470 <__aeabi_d2f+0x28>
 800249a:	2900      	cmp	r1, #0
 800249c:	dd1b      	ble.n	80024d6 <__aeabi_d2f+0x8e>
 800249e:	0192      	lsls	r2, r2, #6
 80024a0:	1e50      	subs	r0, r2, #1
 80024a2:	4182      	sbcs	r2, r0
 80024a4:	00ed      	lsls	r5, r5, #3
 80024a6:	0f7f      	lsrs	r7, r7, #29
 80024a8:	432a      	orrs	r2, r5
 80024aa:	433a      	orrs	r2, r7
 80024ac:	0753      	lsls	r3, r2, #29
 80024ae:	d047      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024b0:	230f      	movs	r3, #15
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d000      	beq.n	80024ba <__aeabi_d2f+0x72>
 80024b8:	3204      	adds	r2, #4
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	04db      	lsls	r3, r3, #19
 80024be:	4013      	ands	r3, r2
 80024c0:	d03e      	beq.n	8002540 <__aeabi_d2f+0xf8>
 80024c2:	1c48      	adds	r0, r1, #1
 80024c4:	29fe      	cmp	r1, #254	; 0xfe
 80024c6:	d0d1      	beq.n	800246c <__aeabi_d2f+0x24>
 80024c8:	0192      	lsls	r2, r2, #6
 80024ca:	0a52      	lsrs	r2, r2, #9
 80024cc:	b2c0      	uxtb	r0, r0
 80024ce:	e7cf      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d0:	2000      	movs	r0, #0
 80024d2:	2200      	movs	r2, #0
 80024d4:	e7cc      	b.n	8002470 <__aeabi_d2f+0x28>
 80024d6:	000a      	movs	r2, r1
 80024d8:	3217      	adds	r2, #23
 80024da:	db2f      	blt.n	800253c <__aeabi_d2f+0xf4>
 80024dc:	2680      	movs	r6, #128	; 0x80
 80024de:	0436      	lsls	r6, r6, #16
 80024e0:	432e      	orrs	r6, r5
 80024e2:	251e      	movs	r5, #30
 80024e4:	1a6d      	subs	r5, r5, r1
 80024e6:	2d1f      	cmp	r5, #31
 80024e8:	dd11      	ble.n	800250e <__aeabi_d2f+0xc6>
 80024ea:	2202      	movs	r2, #2
 80024ec:	4252      	negs	r2, r2
 80024ee:	1a52      	subs	r2, r2, r1
 80024f0:	0031      	movs	r1, r6
 80024f2:	40d1      	lsrs	r1, r2
 80024f4:	2d20      	cmp	r5, #32
 80024f6:	d004      	beq.n	8002502 <__aeabi_d2f+0xba>
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <__aeabi_d2f+0x104>)
 80024fa:	4694      	mov	ip, r2
 80024fc:	4463      	add	r3, ip
 80024fe:	409e      	lsls	r6, r3
 8002500:	4337      	orrs	r7, r6
 8002502:	003a      	movs	r2, r7
 8002504:	1e53      	subs	r3, r2, #1
 8002506:	419a      	sbcs	r2, r3
 8002508:	430a      	orrs	r2, r1
 800250a:	2100      	movs	r1, #0
 800250c:	e7ce      	b.n	80024ac <__aeabi_d2f+0x64>
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <__aeabi_d2f+0x108>)
 8002510:	0038      	movs	r0, r7
 8002512:	4694      	mov	ip, r2
 8002514:	4463      	add	r3, ip
 8002516:	4098      	lsls	r0, r3
 8002518:	003a      	movs	r2, r7
 800251a:	1e41      	subs	r1, r0, #1
 800251c:	4188      	sbcs	r0, r1
 800251e:	409e      	lsls	r6, r3
 8002520:	40ea      	lsrs	r2, r5
 8002522:	4330      	orrs	r0, r6
 8002524:	4302      	orrs	r2, r0
 8002526:	2100      	movs	r1, #0
 8002528:	0753      	lsls	r3, r2, #29
 800252a:	d1c1      	bne.n	80024b0 <__aeabi_d2f+0x68>
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0013      	movs	r3, r2
 8002530:	04c9      	lsls	r1, r1, #19
 8002532:	2001      	movs	r0, #1
 8002534:	400b      	ands	r3, r1
 8002536:	420a      	tst	r2, r1
 8002538:	d1c6      	bne.n	80024c8 <__aeabi_d2f+0x80>
 800253a:	e7a3      	b.n	8002484 <__aeabi_d2f+0x3c>
 800253c:	2300      	movs	r3, #0
 800253e:	e7a0      	b.n	8002482 <__aeabi_d2f+0x3a>
 8002540:	000b      	movs	r3, r1
 8002542:	e79f      	b.n	8002484 <__aeabi_d2f+0x3c>
 8002544:	000007fe 	.word	0x000007fe
 8002548:	fffffc80 	.word	0xfffffc80
 800254c:	fffffca2 	.word	0xfffffca2
 8002550:	fffffc82 	.word	0xfffffc82

08002554 <__clzsi2>:
 8002554:	211c      	movs	r1, #28
 8002556:	2301      	movs	r3, #1
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	4298      	cmp	r0, r3
 800255c:	d301      	bcc.n	8002562 <__clzsi2+0xe>
 800255e:	0c00      	lsrs	r0, r0, #16
 8002560:	3910      	subs	r1, #16
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	4298      	cmp	r0, r3
 8002566:	d301      	bcc.n	800256c <__clzsi2+0x18>
 8002568:	0a00      	lsrs	r0, r0, #8
 800256a:	3908      	subs	r1, #8
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	4298      	cmp	r0, r3
 8002570:	d301      	bcc.n	8002576 <__clzsi2+0x22>
 8002572:	0900      	lsrs	r0, r0, #4
 8002574:	3904      	subs	r1, #4
 8002576:	a202      	add	r2, pc, #8	; (adr r2, 8002580 <__clzsi2+0x2c>)
 8002578:	5c10      	ldrb	r0, [r2, r0]
 800257a:	1840      	adds	r0, r0, r1
 800257c:	4770      	bx	lr
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	02020304 	.word	0x02020304
 8002584:	01010101 	.word	0x01010101
	...

08002590 <__clzdi2>:
 8002590:	b510      	push	{r4, lr}
 8002592:	2900      	cmp	r1, #0
 8002594:	d103      	bne.n	800259e <__clzdi2+0xe>
 8002596:	f7ff ffdd 	bl	8002554 <__clzsi2>
 800259a:	3020      	adds	r0, #32
 800259c:	e002      	b.n	80025a4 <__clzdi2+0x14>
 800259e:	0008      	movs	r0, r1
 80025a0:	f7ff ffd8 	bl	8002554 <__clzsi2>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	46ce      	mov	lr, r9
 80025ac:	4647      	mov	r7, r8
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fefc 	bl	80043b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 f9f6 	bl	80029a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fc88 	bl	8002ed0 <MX_GPIO_Init>
  MX_RTC_Init();
 80025c0:	f000 fa48 	bl	8002a54 <MX_RTC_Init>
  MX_TIM6_Init();
 80025c4:	f000 fb28 	bl	8002c18 <MX_TIM6_Init>
  MX_SPI1_Init();
 80025c8:	f000 fae8 	bl	8002b9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80025cc:	f000 fb62 	bl	8002c94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80025d0:	f000 fbae 	bl	8002d30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80025d4:	f000 fbfa 	bl	8002dcc <MX_USART3_UART_Init>
  MX_USART5_UART_Init();
 80025d8:	f000 fc46 	bl	8002e68 <MX_USART5_UART_Init>
  /* USER CODE BEGIN 2 */

  send_debug_logs ( hello ) ;
 80025dc:	4bda      	ldr	r3, [pc, #872]	; (8002948 <main+0x3a0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fd81 	bl	80030e8 <send_debug_logs>

  my_sys_init () ;
 80025e6:	f000 fdaf 	bl	8003148 <my_sys_init>
  sprintf ( dbg_payload , "System mode: %u" , (uint16_t) sys_mode ) ;
 80025ea:	4bd8      	ldr	r3, [pc, #864]	; (800294c <main+0x3a4>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	001a      	movs	r2, r3
 80025f0:	49d7      	ldr	r1, [pc, #860]	; (8002950 <main+0x3a8>)
 80025f2:	4bd8      	ldr	r3, [pc, #864]	; (8002954 <main+0x3ac>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f00a fe3d 	bl	800d274 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 80025fa:	4bd6      	ldr	r3, [pc, #856]	; (8002954 <main+0x3ac>)
 80025fc:	0018      	movs	r0, r3
 80025fe:	f000 fd73 	bl	80030e8 <send_debug_logs>

  my_tim_init () ;
 8002602:	f001 fad7 	bl	8003bb4 <my_tim_init>
  my_ant_sw_pos ( 2 ) ;
 8002606:	2002      	movs	r0, #2
 8002608:	f001 f90c 	bl	8003824 <my_ant_sw_pos>

  // my_gnss_verbose ( 15 ) ;

  my_gnss_sw_on () ;
 800260c:	f001 f93c 	bl	8003888 <my_gnss_sw_on>
  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002610:	4bd1      	ldr	r3, [pc, #836]	; (8002958 <main+0x3b0>)
 8002612:	0018      	movs	r0, r3
 8002614:	f008 fa5a 	bl	800aacc <my_gnss_acq_coordinates>
 8002618:	0003      	movs	r3, r0
 800261a:	001a      	movs	r2, r3
 800261c:	4bcf      	ldr	r3, [pc, #828]	; (800295c <main+0x3b4>)
 800261e:	701a      	strb	r2, [r3, #0]
  my_gnss_sw_off () ;
 8002620:	f001 f94c 	bl	80038bc <my_gnss_sw_off>
  my_rtc_get_dt_s ( rtc_dt_s ) ;
 8002624:	4bce      	ldr	r3, [pc, #824]	; (8002960 <main+0x3b8>)
 8002626:	0018      	movs	r0, r3
 8002628:	f008 fbd6 	bl	800add8 <my_rtc_get_dt_s>
  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 800262c:	4bca      	ldr	r3, [pc, #808]	; (8002958 <main+0x3b0>)
 800262e:	7c1b      	ldrb	r3, [r3, #16]
 8002630:	001e      	movs	r6, r3
 8002632:	4bc9      	ldr	r3, [pc, #804]	; (8002958 <main+0x3b0>)
 8002634:	689c      	ldr	r4, [r3, #8]
 8002636:	68dd      	ldr	r5, [r3, #12]
 8002638:	4bc7      	ldr	r3, [pc, #796]	; (8002958 <main+0x3b0>)
 800263a:	8a5b      	ldrh	r3, [r3, #18]
 800263c:	4698      	mov	r8, r3
 800263e:	4bc6      	ldr	r3, [pc, #792]	; (8002958 <main+0x3b0>)
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	213c      	movs	r1, #60	; 0x3c
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd79 	bl	800013c <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	4ac5      	ldr	r2, [pc, #788]	; (8002964 <main+0x3bc>)
 800264e:	49c6      	ldr	r1, [pc, #792]	; (8002968 <main+0x3c0>)
 8002650:	48c0      	ldr	r0, [pc, #768]	; (8002954 <main+0x3ac>)
 8002652:	9305      	str	r3, [sp, #20]
 8002654:	4643      	mov	r3, r8
 8002656:	9304      	str	r3, [sp, #16]
 8002658:	9402      	str	r4, [sp, #8]
 800265a:	9503      	str	r5, [sp, #12]
 800265c:	9601      	str	r6, [sp, #4]
 800265e:	4bc0      	ldr	r3, [pc, #768]	; (8002960 <main+0x3b8>)
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	23c4      	movs	r3, #196	; 0xc4
 8002664:	f00a fe06 	bl	800d274 <sprintf>
  send_debug_logs ( dbg_payload ) ;
 8002668:	4bba      	ldr	r3, [pc, #744]	; (8002954 <main+0x3ac>)
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fd3c 	bl	80030e8 <send_debug_logs>
  if ( !my_gnss_3dfix_flag )
 8002670:	4bba      	ldr	r3, [pc, #744]	; (800295c <main+0x3b4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4053      	eors	r3, r2
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d027      	beq.n	80026ce <main+0x126>
  {
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 800267e:	4bbb      	ldr	r3, [pc, #748]	; (800296c <main+0x3c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0018      	movs	r0, r3
 8002684:	f008 fbea 	bl	800ae5c <my_rtc_set_alarm>
 8002688:	1e03      	subs	r3, r0, #0
 800268a:	d020      	beq.n	80026ce <main+0x126>
	  {
		  sprintf ( dbg_payload , "%s,%d,HAL_PWR_EnterSTANDBYMode" , __FILE__ , __LINE__ ) ;
 800268c:	4ab5      	ldr	r2, [pc, #724]	; (8002964 <main+0x3bc>)
 800268e:	49b8      	ldr	r1, [pc, #736]	; (8002970 <main+0x3c8>)
 8002690:	48b0      	ldr	r0, [pc, #704]	; (8002954 <main+0x3ac>)
 8002692:	23ca      	movs	r3, #202	; 0xca
 8002694:	f00a fdee 	bl	800d274 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002698:	4bae      	ldr	r3, [pc, #696]	; (8002954 <main+0x3ac>)
 800269a:	0018      	movs	r0, r3
 800269c:	f000 fd24 	bl	80030e8 <send_debug_logs>
		  my_tim_stop () ;
 80026a0:	f001 faa4 	bl	8003bec <my_tim_stop>
		  my_rtc_alarm_flag = false ;
 80026a4:	4bb3      	ldr	r3, [pc, #716]	; (8002974 <main+0x3cc>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
		  HAL_PWR_EnterSTANDBYMode () ;
 80026aa:	f002 fb49 	bl	8004d40 <HAL_PWR_EnterSTANDBYMode>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 80026ae:	4bac      	ldr	r3, [pc, #688]	; (8002960 <main+0x3b8>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f008 fb91 	bl	800add8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 80026b6:	4aab      	ldr	r2, [pc, #684]	; (8002964 <main+0x3bc>)
 80026b8:	49af      	ldr	r1, [pc, #700]	; (8002978 <main+0x3d0>)
 80026ba:	48a6      	ldr	r0, [pc, #664]	; (8002954 <main+0x3ac>)
 80026bc:	4ba8      	ldr	r3, [pc, #672]	; (8002960 <main+0x3b8>)
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	23d0      	movs	r3, #208	; 0xd0
 80026c2:	f00a fdd7 	bl	800d274 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026c6:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <main+0x3ac>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 fd0d 	bl	80030e8 <send_debug_logs>
	  }
  }

  my_acc_problem_flag = my_acc_init () ;
 80026ce:	f001 f93d 	bl	800394c <my_acc_init>
 80026d2:	0003      	movs	r3, r0
 80026d4:	001a      	movs	r2, r3
 80026d6:	4ba9      	ldr	r3, [pc, #676]	; (800297c <main+0x3d4>)
 80026d8:	701a      	strb	r2, [r3, #0]

  if ( !my_astro_init () )
 80026da:	f008 f944 	bl	800a966 <my_astro_init>
 80026de:	0003      	movs	r3, r0
 80026e0:	001a      	movs	r2, r3
 80026e2:	2301      	movs	r3, #1
 80026e4:	4053      	eors	r3, r2
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00e      	beq.n	800270a <main+0x162>
	  my_sys_restart () ;
 80026ec:	f000 fdca 	bl	8003284 <my_sys_restart>
 80026f0:	e087      	b.n	8002802 <main+0x25a>
  else
  {
	  while ( my_astro_evt_pin () )
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80026f2:	4a9c      	ldr	r2, [pc, #624]	; (8002964 <main+0x3bc>)
 80026f4:	49a2      	ldr	r1, [pc, #648]	; (8002980 <main+0x3d8>)
 80026f6:	4897      	ldr	r0, [pc, #604]	; (8002954 <main+0x3ac>)
 80026f8:	23dd      	movs	r3, #221	; 0xdd
 80026fa:	f00a fdbb 	bl	800d274 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80026fe:	4b95      	ldr	r3, [pc, #596]	; (8002954 <main+0x3ac>)
 8002700:	0018      	movs	r0, r3
 8002702:	f000 fcf1 	bl	80030e8 <send_debug_logs>
		  my_astro_handle_evt () ;
 8002706:	f008 f98f 	bl	800aa28 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 800270a:	f001 f9c1 	bl	8003a90 <my_astro_evt_pin>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d1ef      	bne.n	80026f2 <main+0x14a>
	  }
	  if ( sys_mode == 0 ) // Present sys_mode if other than production
 8002712:	4b8e      	ldr	r3, [pc, #568]	; (800294c <main+0x3a4>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d11d      	bne.n	8002756 <main+0x1ae>
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv ) ;
 800271a:	4b9a      	ldr	r3, [pc, #616]	; (8002984 <main+0x3dc>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	4698      	mov	r8, r3
 8002720:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <main+0x3b0>)
 8002722:	689c      	ldr	r4, [r3, #8]
 8002724:	68dd      	ldr	r5, [r3, #12]
 8002726:	4b8c      	ldr	r3, [pc, #560]	; (8002958 <main+0x3b0>)
 8002728:	8a5b      	ldrh	r3, [r3, #18]
 800272a:	001e      	movs	r6, r3
 800272c:	4b8a      	ldr	r3, [pc, #552]	; (8002958 <main+0x3b0>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	213c      	movs	r1, #60	; 0x3c
 8002732:	0018      	movs	r0, r3
 8002734:	f7fd fd02 	bl	800013c <__udivsi3>
 8002738:	0003      	movs	r3, r0
 800273a:	001a      	movs	r2, r3
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <main+0x3e0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4992      	ldr	r1, [pc, #584]	; (800298c <main+0x3e4>)
 8002742:	4893      	ldr	r0, [pc, #588]	; (8002990 <main+0x3e8>)
 8002744:	9304      	str	r3, [sp, #16]
 8002746:	9203      	str	r2, [sp, #12]
 8002748:	9602      	str	r6, [sp, #8]
 800274a:	9400      	str	r4, [sp, #0]
 800274c:	9501      	str	r5, [sp, #4]
 800274e:	4642      	mov	r2, r8
 8002750:	f00a fd90 	bl	800d274 <sprintf>
 8002754:	e020      	b.n	8002798 <main+0x1f0>
	  else
		  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%s,%u" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fv , (uint16_t) sys_mode ) ;
 8002756:	4b8b      	ldr	r3, [pc, #556]	; (8002984 <main+0x3dc>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	4698      	mov	r8, r3
 800275c:	4b7e      	ldr	r3, [pc, #504]	; (8002958 <main+0x3b0>)
 800275e:	689c      	ldr	r4, [r3, #8]
 8002760:	68dd      	ldr	r5, [r3, #12]
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <main+0x3b0>)
 8002764:	8a5b      	ldrh	r3, [r3, #18]
 8002766:	001e      	movs	r6, r3
 8002768:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <main+0x3b0>)
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	213c      	movs	r1, #60	; 0x3c
 800276e:	0018      	movs	r0, r3
 8002770:	f7fd fce4 	bl	800013c <__udivsi3>
 8002774:	0003      	movs	r3, r0
 8002776:	469c      	mov	ip, r3
 8002778:	4b83      	ldr	r3, [pc, #524]	; (8002988 <main+0x3e0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a73      	ldr	r2, [pc, #460]	; (800294c <main+0x3a4>)
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	4984      	ldr	r1, [pc, #528]	; (8002994 <main+0x3ec>)
 8002782:	4883      	ldr	r0, [pc, #524]	; (8002990 <main+0x3e8>)
 8002784:	9205      	str	r2, [sp, #20]
 8002786:	9304      	str	r3, [sp, #16]
 8002788:	4663      	mov	r3, ip
 800278a:	9303      	str	r3, [sp, #12]
 800278c:	9602      	str	r6, [sp, #8]
 800278e:	9400      	str	r4, [sp, #0]
 8002790:	9501      	str	r5, [sp, #4]
 8002792:	4642      	mov	r2, r8
 8002794:	f00a fd6e 	bl	800d274 <sprintf>
	  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8002798:	4a72      	ldr	r2, [pc, #456]	; (8002964 <main+0x3bc>)
 800279a:	497f      	ldr	r1, [pc, #508]	; (8002998 <main+0x3f0>)
 800279c:	486d      	ldr	r0, [pc, #436]	; (8002954 <main+0x3ac>)
 800279e:	4b7c      	ldr	r3, [pc, #496]	; (8002990 <main+0x3e8>)
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	23e5      	movs	r3, #229	; 0xe5
 80027a4:	f00a fd66 	bl	800d274 <sprintf>
	  send_debug_logs ( dbg_payload ) ;
 80027a8:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <main+0x3ac>)
 80027aa:	0018      	movs	r0, r3
 80027ac:	f000 fc9c 	bl	80030e8 <send_debug_logs>
	  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80027b0:	4b69      	ldr	r3, [pc, #420]	; (8002958 <main+0x3b0>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b68      	ldr	r3, [pc, #416]	; (8002958 <main+0x3b0>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f008 f976 	bl	800aaac <my_astro_write_coordinates>
	  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80027c0:	4b70      	ldr	r3, [pc, #448]	; (8002984 <main+0x3dc>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	b291      	uxth	r1, r2
 80027c8:	4a6e      	ldr	r2, [pc, #440]	; (8002984 <main+0x3dc>)
 80027ca:	8011      	strh	r1, [r2, #0]
 80027cc:	4a70      	ldr	r2, [pc, #448]	; (8002990 <main+0x3e8>)
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f008 f901 	bl	800a9d8 <my_astro_add_payload_2_queue>
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <main+0x3c4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0018      	movs	r0, r3
 80027dc:	f008 fb3e 	bl	800ae5c <my_rtc_set_alarm>
 80027e0:	1e03      	subs	r3, r0, #0
 80027e2:	d00e      	beq.n	8002802 <main+0x25a>
	  {
		  my_sys_deepsleep () ;
 80027e4:	f000 fd72 	bl	80032cc <my_sys_deepsleep>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( my_astro_evt_pin () )
 80027e8:	e00b      	b.n	8002802 <main+0x25a>
	  {
		  sprintf ( dbg_payload , "%s,%d,my_astro_evt_pin" , __FILE__ , __LINE__ ) ;
 80027ea:	4a5e      	ldr	r2, [pc, #376]	; (8002964 <main+0x3bc>)
 80027ec:	4964      	ldr	r1, [pc, #400]	; (8002980 <main+0x3d8>)
 80027ee:	4859      	ldr	r0, [pc, #356]	; (8002954 <main+0x3ac>)
 80027f0:	23f7      	movs	r3, #247	; 0xf7
 80027f2:	f00a fd3f 	bl	800d274 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 80027f6:	4b57      	ldr	r3, [pc, #348]	; (8002954 <main+0x3ac>)
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fc75 	bl	80030e8 <send_debug_logs>
		  my_astro_handle_evt () ;
 80027fe:	f008 f913 	bl	800aa28 <my_astro_handle_evt>
	  while ( my_astro_evt_pin () )
 8002802:	f001 f945 	bl	8003a90 <my_astro_evt_pin>
 8002806:	1e03      	subs	r3, r0, #0
 8002808:	d1ef      	bne.n	80027ea <main+0x242>
	  }
	  if ( astro_rcv_cmd_flag )
 800280a:	4b64      	ldr	r3, [pc, #400]	; (800299c <main+0x3f4>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <main+0x27a>
	  {
		  astro_rcv_cmd_flag = false ;
 8002812:	4b62      	ldr	r3, [pc, #392]	; (800299c <main+0x3f4>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
		  my_tracker_handle_cmd () ;
 8002818:	f000 fe2c 	bl	8003474 <my_tracker_handle_cmd>
		  my_astro_rcv_cmd[0] = 0 ;
 800281c:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <main+0x3f8>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
	  }
	  if ( my_rtc_alarm_flag )
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <main+0x3cc>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <main+0x284>
 800282a:	e081      	b.n	8002930 <main+0x388>
	  {
		  my_rtc_alarm_flag = false ;
 800282c:	4b51      	ldr	r3, [pc, #324]	; (8002974 <main+0x3cc>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_on () ;
 8002832:	f001 f829 	bl	8003888 <my_gnss_sw_on>
		  my_gnss_3dfix_flag = my_gnss_acq_coordinates ( &fix3d ) ;
 8002836:	4b48      	ldr	r3, [pc, #288]	; (8002958 <main+0x3b0>)
 8002838:	0018      	movs	r0, r3
 800283a:	f008 f947 	bl	800aacc <my_gnss_acq_coordinates>
 800283e:	0003      	movs	r3, r0
 8002840:	001a      	movs	r2, r3
 8002842:	4b46      	ldr	r3, [pc, #280]	; (800295c <main+0x3b4>)
 8002844:	701a      	strb	r2, [r3, #0]
		  my_gnss_sw_off () ;
 8002846:	f001 f839 	bl	80038bc <my_gnss_sw_off>
		  my_rtc_get_dt_s ( rtc_dt_s ) ;
 800284a:	4b45      	ldr	r3, [pc, #276]	; (8002960 <main+0x3b8>)
 800284c:	0018      	movs	r0, r3
 800284e:	f008 fac3 	bl	800add8 <my_rtc_get_dt_s>
		  sprintf ( dbg_payload , "%s,%d,%s,fix_mode=%c,pdop=%.1f,acq_time=%u,acq_total_time=%lu" , __FILE__ , __LINE__ , rtc_dt_s , fix3d.fix_mode , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) ) ;
 8002852:	4b41      	ldr	r3, [pc, #260]	; (8002958 <main+0x3b0>)
 8002854:	7c1b      	ldrb	r3, [r3, #16]
 8002856:	4698      	mov	r8, r3
 8002858:	4b3f      	ldr	r3, [pc, #252]	; (8002958 <main+0x3b0>)
 800285a:	689c      	ldr	r4, [r3, #8]
 800285c:	68dd      	ldr	r5, [r3, #12]
 800285e:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <main+0x3b0>)
 8002860:	8a5b      	ldrh	r3, [r3, #18]
 8002862:	4699      	mov	r9, r3
 8002864:	4b3c      	ldr	r3, [pc, #240]	; (8002958 <main+0x3b0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	213c      	movs	r1, #60	; 0x3c
 800286a:	0018      	movs	r0, r3
 800286c:	f7fd fc66 	bl	800013c <__udivsi3>
 8002870:	0003      	movs	r3, r0
 8002872:	469c      	mov	ip, r3
 8002874:	2384      	movs	r3, #132	; 0x84
 8002876:	005e      	lsls	r6, r3, #1
 8002878:	4a3a      	ldr	r2, [pc, #232]	; (8002964 <main+0x3bc>)
 800287a:	493b      	ldr	r1, [pc, #236]	; (8002968 <main+0x3c0>)
 800287c:	4835      	ldr	r0, [pc, #212]	; (8002954 <main+0x3ac>)
 800287e:	4663      	mov	r3, ip
 8002880:	9305      	str	r3, [sp, #20]
 8002882:	464b      	mov	r3, r9
 8002884:	9304      	str	r3, [sp, #16]
 8002886:	9402      	str	r4, [sp, #8]
 8002888:	9503      	str	r5, [sp, #12]
 800288a:	4643      	mov	r3, r8
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <main+0x3b8>)
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	0033      	movs	r3, r6
 8002894:	f00a fcee 	bl	800d274 <sprintf>
		  send_debug_logs ( dbg_payload ) ;
 8002898:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <main+0x3ac>)
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fc24 	bl	80030e8 <send_debug_logs>
		  if ( my_gnss_3dfix_flag )
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <main+0x3b4>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d043      	beq.n	8002930 <main+0x388>
		  {
			  my_astro_write_coordinates ( fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <main+0x3b0>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b2a      	ldr	r3, [pc, #168]	; (8002958 <main+0x3b0>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	0019      	movs	r1, r3
 80028b2:	0010      	movs	r0, r2
 80028b4:	f008 f8fa 	bl	800aaac <my_astro_write_coordinates>
			  sprintf ( my_astro_payload , "%u,%.1f,%u,%lu,%ld,%ld" , uplink_id , fix3d.pdop , fix3d.acq_time , (uint32_t) ( fix3d.acq_total_time / 60 ) , fix3d.latitude_astro_geo_wr , fix3d.longitude_astro_geo_wr ) ;
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <main+0x3dc>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	4698      	mov	r8, r3
 80028be:	4b26      	ldr	r3, [pc, #152]	; (8002958 <main+0x3b0>)
 80028c0:	689c      	ldr	r4, [r3, #8]
 80028c2:	68dd      	ldr	r5, [r3, #12]
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <main+0x3b0>)
 80028c6:	8a5b      	ldrh	r3, [r3, #18]
 80028c8:	001e      	movs	r6, r3
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <main+0x3b0>)
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	213c      	movs	r1, #60	; 0x3c
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fd fc33 	bl	800013c <__udivsi3>
 80028d6:	0003      	movs	r3, r0
 80028d8:	469c      	mov	ip, r3
 80028da:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <main+0x3b0>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <main+0x3b0>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4930      	ldr	r1, [pc, #192]	; (80029a4 <main+0x3fc>)
 80028e4:	482a      	ldr	r0, [pc, #168]	; (8002990 <main+0x3e8>)
 80028e6:	9305      	str	r3, [sp, #20]
 80028e8:	9204      	str	r2, [sp, #16]
 80028ea:	4663      	mov	r3, ip
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	9602      	str	r6, [sp, #8]
 80028f0:	9400      	str	r4, [sp, #0]
 80028f2:	9501      	str	r5, [sp, #4]
 80028f4:	4642      	mov	r2, r8
 80028f6:	f00a fcbd 	bl	800d274 <sprintf>
			  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <main+0x3dc>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	b291      	uxth	r1, r2
 8002902:	4a20      	ldr	r2, [pc, #128]	; (8002984 <main+0x3dc>)
 8002904:	8011      	strh	r1, [r2, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <main+0x3e8>)
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f008 f864 	bl	800a9d8 <my_astro_add_payload_2_queue>
			  my_astro_turn_payload_id_counter () ;
 8002910:	f001 f8d0 	bl	8003ab4 <my_astro_turn_payload_id_counter>
			  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ;
 8002914:	2388      	movs	r3, #136	; 0x88
 8002916:	005c      	lsls	r4, r3, #1
 8002918:	4a12      	ldr	r2, [pc, #72]	; (8002964 <main+0x3bc>)
 800291a:	491f      	ldr	r1, [pc, #124]	; (8002998 <main+0x3f0>)
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <main+0x3ac>)
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <main+0x3e8>)
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	0023      	movs	r3, r4
 8002924:	f00a fca6 	bl	800d274 <sprintf>
			  send_debug_logs ( dbg_payload ) ;
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <main+0x3ac>)
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fbdc 	bl	80030e8 <send_debug_logs>
		  }
	  }
	  if ( my_rtc_set_alarm ( my_rtc_alarmA_time ) )
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <main+0x3c4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0018      	movs	r0, r3
 8002936:	f008 fa91 	bl	800ae5c <my_rtc_set_alarm>
 800293a:	1e03      	subs	r3, r0, #0
 800293c:	d100      	bne.n	8002940 <main+0x398>
 800293e:	e760      	b.n	8002802 <main+0x25a>
	  {
		  my_sys_deepsleep () ;
 8002940:	f000 fcc4 	bl	80032cc <my_sys_deepsleep>
	  while ( my_astro_evt_pin () )
 8002944:	e75d      	b.n	8002802 <main+0x25a>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	20000000 	.word	0x20000000
 800294c:	20000a22 	.word	0x20000a22
 8002950:	08013e70 	.word	0x08013e70
 8002954:	20000b20 	.word	0x20000b20
 8002958:	20000ae8 	.word	0x20000ae8
 800295c:	20000b11 	.word	0x20000b11
 8002960:	20000a24 	.word	0x20000a24
 8002964:	08013e80 	.word	0x08013e80
 8002968:	08013e94 	.word	0x08013e94
 800296c:	2000000c 	.word	0x2000000c
 8002970:	08013ed4 	.word	0x08013ed4
 8002974:	20000b10 	.word	0x20000b10
 8002978:	08013ef4 	.word	0x08013ef4
 800297c:	20000b12 	.word	0x20000b12
 8002980:	08013f00 	.word	0x08013f00
 8002984:	20000ae4 	.word	0x20000ae4
 8002988:	20000004 	.word	0x20000004
 800298c:	08013f18 	.word	0x08013f18
 8002990:	20000a38 	.word	0x20000a38
 8002994:	08013f2c 	.word	0x08013f2c
 8002998:	08013f44 	.word	0x08013f44
 800299c:	20000c1a 	.word	0x20000c1a
 80029a0:	20000c1c 	.word	0x20000c1c
 80029a4:	08013f58 	.word	0x08013f58

080029a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b095      	sub	sp, #84	; 0x54
 80029ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029ae:	2414      	movs	r4, #20
 80029b0:	193b      	adds	r3, r7, r4
 80029b2:	0018      	movs	r0, r3
 80029b4:	233c      	movs	r3, #60	; 0x3c
 80029b6:	001a      	movs	r2, r3
 80029b8:	2100      	movs	r1, #0
 80029ba:	f00a fcf1 	bl	800d3a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	0018      	movs	r0, r3
 80029c2:	2310      	movs	r3, #16
 80029c4:	001a      	movs	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	f00a fcea 	bl	800d3a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f002 f9cf 	bl	8004d74 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80029d6:	f002 f96d 	bl	8004cb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <SystemClock_Config+0xa8>)
 80029dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029de:	4b1c      	ldr	r3, [pc, #112]	; (8002a50 <SystemClock_Config+0xa8>)
 80029e0:	2118      	movs	r1, #24
 80029e2:	438a      	bics	r2, r1
 80029e4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80029e6:	193b      	adds	r3, r7, r4
 80029e8:	2206      	movs	r2, #6
 80029ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2201      	movs	r2, #1
 80029f0:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0052      	lsls	r2, r2, #1
 80029f8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2240      	movs	r2, #64	; 0x40
 8002a04:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a0c:	193b      	adds	r3, r7, r4
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f002 f9fc 	bl	8004e0c <HAL_RCC_OscConfig>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d001      	beq.n	8002a1c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002a18:	f001 f92e 	bl	8003c78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	2207      	movs	r2, #7
 8002a20:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	2100      	movs	r1, #0
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f002 fd47 	bl	80054cc <HAL_RCC_ClockConfig>
 8002a3e:	1e03      	subs	r3, r0, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002a42:	f001 f919 	bl	8003c78 <Error_Handler>
  }
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b015      	add	sp, #84	; 0x54
 8002a4c:	bd90      	pop	{r4, r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	40021000 	.word	0x40021000

08002a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b090      	sub	sp, #64	; 0x40
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002a5a:	232c      	movs	r3, #44	; 0x2c
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2314      	movs	r3, #20
 8002a62:	001a      	movs	r2, r3
 8002a64:	2100      	movs	r1, #0
 8002a66:	f00a fc9b 	bl	800d3a0 <memset>
  RTC_DateTypeDef sDate = {0};
 8002a6a:	2328      	movs	r3, #40	; 0x28
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002a72:	003b      	movs	r3, r7
 8002a74:	0018      	movs	r0, r3
 8002a76:	2328      	movs	r3, #40	; 0x28
 8002a78:	001a      	movs	r2, r3
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f00a fc90 	bl	800d3a0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a80:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a82:	4a45      	ldr	r2, [pc, #276]	; (8002b98 <MX_RTC_Init+0x144>)
 8002a84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a86:	4b43      	ldr	r3, [pc, #268]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002a8c:	4b41      	ldr	r3, [pc, #260]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a8e:	227f      	movs	r2, #127	; 0x7f
 8002a90:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002a92:	4b40      	ldr	r3, [pc, #256]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a98:	4b3e      	ldr	r3, [pc, #248]	; (8002b94 <MX_RTC_Init+0x140>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	05d2      	lsls	r2, r2, #23
 8002ab0:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002ab2:	4b38      	ldr	r3, [pc, #224]	; (8002b94 <MX_RTC_Init+0x140>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <MX_RTC_Init+0x140>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f003 f8ec 	bl	8005c98 <HAL_RTC_Init>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002ac4:	f001 f8d8 	bl	8003c78 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002aee:	1879      	adds	r1, r7, r1
 8002af0:	4b28      	ldr	r3, [pc, #160]	; (8002b94 <MX_RTC_Init+0x140>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	0018      	movs	r0, r3
 8002af6:	f003 f971 	bl	8005ddc <HAL_RTC_SetTime>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d001      	beq.n	8002b02 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002afe:	f001 f8bb 	bl	8003c78 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002b02:	2128      	movs	r1, #40	; 0x28
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2206      	movs	r2, #6
 8002b08:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2201      	movs	r2, #1
 8002b14:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b1c:	1879      	adds	r1, r7, r1
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <MX_RTC_Init+0x140>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	0018      	movs	r0, r3
 8002b24:	f003 fa5e 	bl	8005fe4 <HAL_RTC_SetDate>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002b2c:	f001 f8a4 	bl	8003c78 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002b30:	003b      	movs	r3, r7
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002b36:	003b      	movs	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b42:	003b      	movs	r3, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b48:	003b      	movs	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b5a:	003b      	movs	r3, r7
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b60:	003b      	movs	r3, r7
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002b66:	003b      	movs	r3, r7
 8002b68:	2220      	movs	r2, #32
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8002b6e:	003b      	movs	r3, r7
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b76:	0039      	movs	r1, r7
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <MX_RTC_Init+0x140>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f003 fb11 	bl	80061a4 <HAL_RTC_SetAlarm_IT>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d001      	beq.n	8002b8a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8002b86:	f001 f877 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b010      	add	sp, #64	; 0x40
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	200006f4 	.word	0x200006f4
 8002b98:	40002800 	.word	0x40002800

08002b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <MX_SPI1_Init+0x78>)
 8002ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002ba8:	2282      	movs	r2, #130	; 0x82
 8002baa:	0052      	lsls	r2, r2, #1
 8002bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002bb4:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bb6:	22e0      	movs	r2, #224	; 0xe0
 8002bb8:	00d2      	lsls	r2, r2, #3
 8002bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bd0:	4b0f      	ldr	r3, [pc, #60]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bea:	2207      	movs	r2, #7
 8002bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <MX_SPI1_Init+0x74>)
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f003 fdb1 	bl	8006764 <HAL_SPI_Init>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d001      	beq.n	8002c0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c06:	f001 f837 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000720 	.word	0x20000720
 8002c14:	40013000 	.word	0x40013000

08002c18 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1e:	1d3b      	adds	r3, r7, #4
 8002c20:	0018      	movs	r0, r3
 8002c22:	230c      	movs	r3, #12
 8002c24:	001a      	movs	r2, r3
 8002c26:	2100      	movs	r1, #0
 8002c28:	f00a fbba 	bl	800d3a0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c2e:	4a16      	ldr	r2, [pc, #88]	; (8002c88 <MX_TIM6_Init+0x70>)
 8002c30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 8002c32:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <MX_TIM6_Init+0x74>)
 8002c36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <MX_TIM6_Init+0x78>)
 8002c42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f004 fca9 	bl	80075a4 <HAL_TIM_Base_Init>
 8002c52:	1e03      	subs	r3, r0, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c56:	f001 f80f 	bl	8003c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_TIM6_Init+0x6c>)
 8002c6a:	0011      	movs	r1, r2
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f004 ff41 	bl	8007af4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c76:	f000 ffff 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	20000784 	.word	0x20000784
 8002c88:	40001000 	.word	0x40001000
 8002c8c:	00003e7f 	.word	0x00003e7f
 8002c90:	000003e7 	.word	0x000003e7

08002c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002c9a:	4a24      	ldr	r2, [pc, #144]	; (8002d2c <MX_USART1_UART_Init+0x98>)
 8002c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca0:	22e1      	movs	r2, #225	; 0xe1
 8002ca2:	0252      	lsls	r2, r2, #9
 8002ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f004 ff96 	bl	8007c10 <HAL_UART_Init>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ce8:	f000 ffc6 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f005 ff71 	bl	8008bd8 <HAL_UARTEx_SetTxFifoThreshold>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cfa:	f000 ffbd 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	0018      	movs	r0, r3
 8002d04:	f005 ffa8 	bl	8008c58 <HAL_UARTEx_SetRxFifoThreshold>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d0c:	f000 ffb4 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f005 ff26 	bl	8008b64 <HAL_UARTEx_DisableFifoMode>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d1c:	f000 ffac 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	200007d0 	.word	0x200007d0
 8002d2c:	40013800 	.word	0x40013800

08002d30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d34:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <MX_USART2_UART_Init+0x98>)
 8002d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d3c:	22e1      	movs	r2, #225	; 0xe1
 8002d3e:	0252      	lsls	r2, r2, #9
 8002d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d56:	220c      	movs	r2, #12
 8002d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f004 ff48 	bl	8007c10 <HAL_UART_Init>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002d84:	f000 ff78 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f005 ff23 	bl	8008bd8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002d96:	f000 ff6f 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f005 ff5a 	bl	8008c58 <HAL_UARTEx_SetRxFifoThreshold>
 8002da4:	1e03      	subs	r3, r0, #0
 8002da6:	d001      	beq.n	8002dac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002da8:	f000 ff66 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <MX_USART2_UART_Init+0x94>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f005 fed8 	bl	8008b64 <HAL_UARTEx_DisableFifoMode>
 8002db4:	1e03      	subs	r3, r0, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002db8:	f000 ff5e 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000864 	.word	0x20000864
 8002dc8:	40004400 	.word	0x40004400

08002dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dd2:	4a24      	ldr	r2, [pc, #144]	; (8002e64 <MX_USART3_UART_Init+0x98>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002dd6:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dd8:	2296      	movs	r2, #150	; 0x96
 8002dda:	0192      	lsls	r2, r2, #6
 8002ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b20      	ldr	r3, [pc, #128]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b1d      	ldr	r3, [pc, #116]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	4b17      	ldr	r3, [pc, #92]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e16:	0018      	movs	r0, r3
 8002e18:	f004 fefa 	bl	8007c10 <HAL_UART_Init>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e20:	f000 ff2a 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f005 fed5 	bl	8008bd8 <HAL_UARTEx_SetTxFifoThreshold>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e32:	f000 ff21 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e38:	2100      	movs	r1, #0
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f005 ff0c 	bl	8008c58 <HAL_UARTEx_SetRxFifoThreshold>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d001      	beq.n	8002e48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e44:	f000 ff18 	bl	8003c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <MX_USART3_UART_Init+0x94>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f005 fe8a 	bl	8008b64 <HAL_UARTEx_DisableFifoMode>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d001      	beq.n	8002e58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e54:	f000 ff10 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e58:	46c0      	nop			; (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	200008f8 	.word	0x200008f8
 8002e64:	40004800 	.word	0x40004800

08002e68 <MX_USART5_UART_Init>:
  * @brief USART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART5_UART_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART5_Init 0 */

  /* USER CODE BEGIN USART5_Init 1 */

  /* USER CODE END USART5_Init 1 */
  huart5.Instance = USART5;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e6e:	4a17      	ldr	r2, [pc, #92]	; (8002ecc <MX_USART5_UART_Init+0x64>)
 8002e70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e74:	2296      	movs	r2, #150	; 0x96
 8002e76:	0192      	lsls	r2, r2, #6
 8002e78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e8e:	220c      	movs	r2, #12
 8002e90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <MX_USART5_UART_Init+0x60>)
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f004 feac 	bl	8007c10 <HAL_UART_Init>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_USART5_UART_Init+0x58>
  {
    Error_Handler();
 8002ebc:	f000 fedc 	bl	8003c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART5_Init 2 */

  /* USER CODE END USART5_Init 2 */

}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	2000098c 	.word	0x2000098c
 8002ecc:	40005000 	.word	0x40005000

08002ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b08b      	sub	sp, #44	; 0x2c
 8002ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed6:	2414      	movs	r4, #20
 8002ed8:	193b      	adds	r3, r7, r4
 8002eda:	0018      	movs	r0, r3
 8002edc:	2314      	movs	r3, #20
 8002ede:	001a      	movs	r2, r3
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	f00a fa5d 	bl	800d3a0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002eec:	2104      	movs	r1, #4
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ef2:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	4013      	ands	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	4b74      	ldr	r3, [pc, #464]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0a:	4b71      	ldr	r3, [pc, #452]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0e:	2201      	movs	r2, #1
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	4b6e      	ldr	r3, [pc, #440]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f1a:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	635a      	str	r2, [r3, #52]	; 0x34
 8002f22:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	2202      	movs	r2, #2
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f2e:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f34:	2108      	movs	r1, #8
 8002f36:	430a      	orrs	r2, r1
 8002f38:	635a      	str	r2, [r3, #52]	; 0x34
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <MX_GPIO_Init+0x200>)
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	2208      	movs	r2, #8
 8002f40:	4013      	ands	r3, r2
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACC_SPI1_CS_GPIO_Port, ACC_SPI1_CS_Pin, GPIO_PIN_RESET);
 8002f46:	23a0      	movs	r3, #160	; 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f001 fe5f 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|GNSS_RST_Pin
 8002f54:	495f      	ldr	r1, [pc, #380]	; (80030d4 <MX_GPIO_Init+0x204>)
 8002f56:	4b60      	ldr	r3, [pc, #384]	; (80030d8 <MX_GPIO_Init+0x208>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f001 fe59 	bl	8004c12 <HAL_GPIO_WritePin>
                          |GNSS_PWR_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW_CTL1_GPIO_Port, RF_SW_CTL1_Pin, GPIO_PIN_SET);
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	485c      	ldr	r0, [pc, #368]	; (80030d8 <MX_GPIO_Init+0x208>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	0019      	movs	r1, r3
 8002f6a:	f001 fe52 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LDG_Pin|LDB_Pin, GPIO_PIN_RESET);
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	; (80030dc <MX_GPIO_Init+0x20c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	2103      	movs	r1, #3
 8002f74:	0018      	movs	r0, r3
 8002f76:	f001 fe4c 	bl	8004c12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ACC_INT1_IT0_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_IT0_Pin;
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2288      	movs	r2, #136	; 0x88
 8002f84:	0352      	lsls	r2, r2, #13
 8002f86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	193b      	adds	r3, r7, r4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT1_IT0_GPIO_Port, &GPIO_InitStruct);
 8002f8e:	193a      	adds	r2, r7, r4
 8002f90:	23a0      	movs	r3, #160	; 0xa0
 8002f92:	05db      	lsls	r3, r3, #23
 8002f94:	0011      	movs	r1, r2
 8002f96:	0018      	movs	r0, r3
 8002f98:	f001 fbda 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa2:	193b      	adds	r3, r7, r4
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8002fae:	193a      	adds	r2, r7, r4
 8002fb0:	23a0      	movs	r3, #160	; 0xa0
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	0011      	movs	r1, r2
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f001 fbca 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = ACC_SPI1_CS_Pin;
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fce:	193b      	adds	r3, r7, r4
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ACC_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	193a      	adds	r2, r7, r4
 8002fd6:	23a0      	movs	r3, #160	; 0xa0
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	0011      	movs	r1, r2
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f001 fbb7 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_WKUP_Pin ASTRO_RST_Pin RF_SW_CTL2_Pin RF_SW_CTL1_Pin
                           GNSS_PWR_SW_Pin */
  GPIO_InitStruct.Pin = ASTRO_WKUP_Pin|ASTRO_RST_Pin|RF_SW_CTL2_Pin|RF_SW_CTL1_Pin
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	4a3e      	ldr	r2, [pc, #248]	; (80030e0 <MX_GPIO_Init+0x210>)
 8002fe6:	601a      	str	r2, [r3, #0]
                          |GNSS_PWR_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	2201      	movs	r2, #1
 8002fec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	4a36      	ldr	r2, [pc, #216]	; (80030d8 <MX_GPIO_Init+0x208>)
 8002ffe:	0019      	movs	r1, r3
 8003000:	0010      	movs	r0, r2
 8003002:	f001 fba5 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_EVT_Pin GNSS_3DFIX_IT5_Pin */
  GPIO_InitStruct.Pin = ASTRO_EVT_Pin|GNSS_3DFIX_IT5_Pin;
 8003006:	0021      	movs	r1, r4
 8003008:	187b      	adds	r3, r7, r1
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800300e:	187b      	adds	r3, r7, r1
 8003010:	2288      	movs	r2, #136	; 0x88
 8003012:	0352      	lsls	r2, r2, #13
 8003014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003016:	187b      	adds	r3, r7, r1
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301c:	000c      	movs	r4, r1
 800301e:	187b      	adds	r3, r7, r1
 8003020:	4a2d      	ldr	r2, [pc, #180]	; (80030d8 <MX_GPIO_Init+0x208>)
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f001 fb93 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pin : GNSS_RST_Pin */
  GPIO_InitStruct.Pin = GNSS_RST_Pin;
 800302a:	0021      	movs	r1, r4
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0192      	lsls	r2, r2, #6
 8003032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003034:	000c      	movs	r4, r1
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2211      	movs	r2, #17
 800303a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GNSS_RST_GPIO_Port, &GPIO_InitStruct);
 8003048:	193b      	adds	r3, r7, r4
 800304a:	4a23      	ldr	r2, [pc, #140]	; (80030d8 <MX_GPIO_Init+0x208>)
 800304c:	0019      	movs	r1, r3
 800304e:	0010      	movs	r0, r2
 8003050:	f001 fb7e 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ASTRO_ANT_USE_Pin GNSS_JAM_Pin */
  GPIO_InitStruct.Pin = ASTRO_ANT_USE_Pin|GNSS_JAM_Pin;
 8003054:	193b      	adds	r3, r7, r4
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <MX_GPIO_Init+0x214>)
 8003058:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305a:	193b      	adds	r3, r7, r4
 800305c:	2200      	movs	r2, #0
 800305e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	193b      	adds	r3, r7, r4
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003066:	193b      	adds	r3, r7, r4
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <MX_GPIO_Init+0x208>)
 800306a:	0019      	movs	r1, r3
 800306c:	0010      	movs	r0, r2
 800306e:	f001 fb6f 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : LDG_Pin LDB_Pin */
  GPIO_InitStruct.Pin = LDG_Pin|LDB_Pin;
 8003072:	193b      	adds	r3, r7, r4
 8003074:	2203      	movs	r2, #3
 8003076:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003078:	193b      	adds	r3, r7, r4
 800307a:	2201      	movs	r2, #1
 800307c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	193b      	adds	r3, r7, r4
 8003086:	2200      	movs	r2, #0
 8003088:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800308a:	193b      	adds	r3, r7, r4
 800308c:	4a13      	ldr	r2, [pc, #76]	; (80030dc <MX_GPIO_Init+0x20c>)
 800308e:	0019      	movs	r1, r3
 8003090:	0010      	movs	r0, r2
 8003092:	f001 fb5d 	bl	8004750 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 8003096:	0021      	movs	r1, r4
 8003098:	187b      	adds	r3, r7, r1
 800309a:	220c      	movs	r2, #12
 800309c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2201      	movs	r2, #1
 80030a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	4a0b      	ldr	r2, [pc, #44]	; (80030dc <MX_GPIO_Init+0x20c>)
 80030ae:	0019      	movs	r1, r3
 80030b0:	0010      	movs	r0, r2
 80030b2:	f001 fb4d 	bl	8004750 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2100      	movs	r1, #0
 80030ba:	2006      	movs	r0, #6
 80030bc:	f001 fb12 	bl	80046e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80030c0:	2006      	movs	r0, #6
 80030c2:	f001 fb24 	bl	800470e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b00b      	add	sp, #44	; 0x2c
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	40021000 	.word	0x40021000
 80030d4:	0000a403 	.word	0x0000a403
 80030d8:	50000400 	.word	0x50000400
 80030dc:	50000c00 	.word	0x50000c00
 80030e0:	00008c03 	.word	0x00008c03
 80030e4:	00004040 	.word	0x00004040

080030e8 <send_debug_logs>:

// *** HARDWARE OPERATIONS

// ** SYSTEM OPERATION
void send_debug_logs ( char* p_tx_buffer )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
    uint32_t length = strlen ( p_tx_buffer ) ;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd f806 	bl	8000104 <strlen>
 80030f8:	0003      	movs	r3, r0
 80030fa:	60fb      	str	r3, [r7, #12]

    if ( length > UART_TX_MAX_BUFF_SIZE )
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2bfa      	cmp	r3, #250	; 0xfa
 8003100:	d908      	bls.n	8003114 <send_debug_logs+0x2c>
    {
        HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "[ERROR] UART buffer reached max length.\n" , 42 , 1000 ) ;
 8003102:	23fa      	movs	r3, #250	; 0xfa
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <send_debug_logs+0x54>)
 8003108:	480d      	ldr	r0, [pc, #52]	; (8003140 <send_debug_logs+0x58>)
 800310a:	222a      	movs	r2, #42	; 0x2a
 800310c:	f004 fe16 	bl	8007d3c <HAL_UART_Transmit>
        length = UART_TX_MAX_BUFF_SIZE;
 8003110:	23fa      	movs	r3, #250	; 0xfa
 8003112:	60fb      	str	r3, [r7, #12]
    }

    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) p_tx_buffer , length , 1000 ) ;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	b29a      	uxth	r2, r3
 8003118:	23fa      	movs	r3, #250	; 0xfa
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4808      	ldr	r0, [pc, #32]	; (8003140 <send_debug_logs+0x58>)
 8003120:	f004 fe0c 	bl	8007d3c <HAL_UART_Transmit>
    HAL_UART_Transmit ( &HUART_DBG , ( uint8_t* ) "\n" , 1 , 1000 ) ;
 8003124:	23fa      	movs	r3, #250	; 0xfa
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <send_debug_logs+0x5c>)
 800312a:	4805      	ldr	r0, [pc, #20]	; (8003140 <send_debug_logs+0x58>)
 800312c:	2201      	movs	r2, #1
 800312e:	f004 fe05 	bl	8007d3c <HAL_UART_Transmit>
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	08013f70 	.word	0x08013f70
 8003140:	20000864 	.word	0x20000864
 8003144:	08013f9c 	.word	0x08013f9c

08003148 <my_sys_init>:
// SYS functions
void my_sys_init ( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
	fix3d.acq_time = 0 ;
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <my_sys_init+0x114>)
 800314e:	2200      	movs	r2, #0
 8003150:	825a      	strh	r2, [r3, #18]
	fix3d.acq_total_time = 0 ;
 8003152:	4b42      	ldr	r3, [pc, #264]	; (800325c <my_sys_init+0x114>)
 8003154:	2200      	movs	r2, #0
 8003156:	615a      	str	r2, [r3, #20]
	sw1 = HAL_GPIO_ReadPin ( SW1_GPIO_Port , SW1_Pin ) ;
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <my_sys_init+0x118>)
 800315a:	2104      	movs	r1, #4
 800315c:	0018      	movs	r0, r3
 800315e:	f001 fd3b 	bl	8004bd8 <HAL_GPIO_ReadPin>
 8003162:	0003      	movs	r3, r0
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	4193      	sbcs	r3, r2
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <my_sys_init+0x11c>)
 800316c:	701a      	strb	r2, [r3, #0]
	sw2 = HAL_GPIO_ReadPin ( SW2_GPIO_Port , SW2_Pin ) ;
 800316e:	4b3c      	ldr	r3, [pc, #240]	; (8003260 <my_sys_init+0x118>)
 8003170:	2108      	movs	r1, #8
 8003172:	0018      	movs	r0, r3
 8003174:	f001 fd30 	bl	8004bd8 <HAL_GPIO_ReadPin>
 8003178:	0003      	movs	r3, r0
 800317a:	1e5a      	subs	r2, r3, #1
 800317c:	4193      	sbcs	r3, r2
 800317e:	b2da      	uxtb	r2, r3
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <my_sys_init+0x120>)
 8003182:	701a      	strb	r2, [r3, #0]
	if ( !sw1 && !sw2 )
 8003184:	4b37      	ldr	r3, [pc, #220]	; (8003264 <my_sys_init+0x11c>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2201      	movs	r2, #1
 800318a:	4053      	eors	r3, r2
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d019      	beq.n	80031c6 <my_sys_init+0x7e>
 8003192:	4b35      	ldr	r3, [pc, #212]	; (8003268 <my_sys_init+0x120>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	4053      	eors	r3, r2
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <my_sys_init+0x7e>
	{
		sys_mode = 0 ;
 80031a0:	4b32      	ldr	r3, [pc, #200]	; (800326c <my_sys_init+0x124>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <my_sys_init+0x128>)
 80031a8:	22e1      	movs	r2, #225	; 0xe1
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <my_sys_init+0x12c>)
 80031b0:	2278      	movs	r2, #120	; 0x78
 80031b2:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <my_sys_init+0x130>)
 80031b6:	221e      	movs	r2, #30
 80031b8:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031ba:	4930      	ldr	r1, [pc, #192]	; (800327c <my_sys_init+0x134>)
 80031bc:	2200      	movs	r2, #0
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	600a      	str	r2, [r1, #0]
 80031c4:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && !sw2 )
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <my_sys_init+0x11c>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d019      	beq.n	8003202 <my_sys_init+0xba>
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <my_sys_init+0x120>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4053      	eors	r3, r2
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d012      	beq.n	8003202 <my_sys_init+0xba>
	{
		sys_mode = 1 ;
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <my_sys_init+0x124>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_1_H ;
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <my_sys_init+0x128>)
 80031e4:	22e1      	movs	r2, #225	; 0xe1
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_2_MIN ;
 80031ea:	4b22      	ldr	r3, [pc, #136]	; (8003274 <my_sys_init+0x12c>)
 80031ec:	2278      	movs	r2, #120	; 0x78
 80031ee:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_30_SEC ;
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <my_sys_init+0x130>)
 80031f2:	221e      	movs	r2, #30
 80031f4:	801a      	strh	r2, [r3, #0]
		pdop_ths = PDOP_THS ;
 80031f6:	4921      	ldr	r1, [pc, #132]	; (800327c <my_sys_init+0x134>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	600a      	str	r2, [r1, #0]
 8003200:	604b      	str	r3, [r1, #4]
	}
	if ( !sw1 && sw2 )
 8003202:	4b18      	ldr	r3, [pc, #96]	; (8003264 <my_sys_init+0x11c>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2201      	movs	r2, #1
 8003208:	4053      	eors	r3, r2
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d016      	beq.n	800323e <my_sys_init+0xf6>
 8003210:	4b15      	ldr	r3, [pc, #84]	; (8003268 <my_sys_init+0x120>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d012      	beq.n	800323e <my_sys_init+0xf6>
	{
		sys_mode = 2 ;
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <my_sys_init+0x124>)
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
		my_rtc_alarmA_time = TIME_THS_5_MIN ;
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <my_sys_init+0x128>)
 8003220:	2296      	movs	r2, #150	; 0x96
 8003222:	0052      	lsls	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
		fix_acq_ths = TIME_THS_10_MIN ;
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <my_sys_init+0x12c>)
 8003228:	2296      	movs	r2, #150	; 0x96
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	801a      	strh	r2, [r3, #0]
		min_tns_time_ths = TIME_THS_1_MIN ;
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <my_sys_init+0x130>)
 8003230:	223c      	movs	r2, #60	; 0x3c
 8003232:	801a      	strh	r2, [r3, #0]
		pdop_ths = 10 ;
 8003234:	4911      	ldr	r1, [pc, #68]	; (800327c <my_sys_init+0x134>)
 8003236:	2200      	movs	r2, #0
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <my_sys_init+0x138>)
 800323a:	600a      	str	r2, [r1, #0]
 800323c:	604b      	str	r3, [r1, #4]
	}
	if ( sw1 && sw2 )
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <my_sys_init+0x11c>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d006      	beq.n	8003254 <my_sys_init+0x10c>
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <my_sys_init+0x120>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <my_sys_init+0x10c>
	{
		sys_mode = 3 ;
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <my_sys_init+0x124>)
 8003250:	2203      	movs	r2, #3
 8003252:	701a      	strb	r2, [r3, #0]
	}
}
 8003254:	46c0      	nop			; (mov r8, r8)
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	20000ae8 	.word	0x20000ae8
 8003260:	50000c00 	.word	0x50000c00
 8003264:	20000a20 	.word	0x20000a20
 8003268:	20000a21 	.word	0x20000a21
 800326c:	20000a22 	.word	0x20000a22
 8003270:	2000000c 	.word	0x2000000c
 8003274:	2000001a 	.word	0x2000001a
 8003278:	2000001c 	.word	0x2000001c
 800327c:	20000020 	.word	0x20000020
 8003280:	40240000 	.word	0x40240000

08003284 <my_sys_restart>:
	send_debug_logs ( rtc_dt_s ) ;
	return ( yyyy >= FIRMWARE_RELEASE_YEAR ) ? true : false ;
}

void my_sys_restart ( void )
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b083      	sub	sp, #12
 8003288:	af02      	add	r7, sp, #8
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <my_sys_restart+0x38>)
 800328c:	0018      	movs	r0, r3
 800328e:	f007 fda3 	bl	800add8 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,HAL_NVIC_SystemReset" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 8003292:	23d2      	movs	r3, #210	; 0xd2
 8003294:	009c      	lsls	r4, r3, #2
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <my_sys_restart+0x3c>)
 8003298:	490a      	ldr	r1, [pc, #40]	; (80032c4 <my_sys_restart+0x40>)
 800329a:	480b      	ldr	r0, [pc, #44]	; (80032c8 <my_sys_restart+0x44>)
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <my_sys_restart+0x38>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	0023      	movs	r3, r4
 80032a2:	f009 ffe7 	bl	800d274 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032a6:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <my_sys_restart+0x44>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ff1d 	bl	80030e8 <send_debug_logs>
	HAL_NVIC_SystemReset () ;
 80032ae:	f001 fa3e 	bl	800472e <HAL_NVIC_SystemReset>
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b001      	add	sp, #4
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	20000a24 	.word	0x20000a24
 80032c0:	08013e80 	.word	0x08013e80
 80032c4:	08013fa0 	.word	0x08013fa0
 80032c8:	20000b20 	.word	0x20000b20

080032cc <my_sys_deepsleep>:
	sprintf ( dbg_payload , "%s,%d,%s, Wake-up after Standby" , __FILE__ , __LINE__ , rtc_dt_s ) ;
	send_debug_logs ( dbg_payload ) ;
}

void my_sys_deepsleep ( void )
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af02      	add	r7, sp, #8
	sprintf ( dbg_payload , "%s,%d,PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFE" , __FILE__ , __LINE__ ) ;
 80032d2:	4b17      	ldr	r3, [pc, #92]	; (8003330 <my_sys_deepsleep+0x64>)
 80032d4:	4a17      	ldr	r2, [pc, #92]	; (8003334 <my_sys_deepsleep+0x68>)
 80032d6:	4918      	ldr	r1, [pc, #96]	; (8003338 <my_sys_deepsleep+0x6c>)
 80032d8:	4818      	ldr	r0, [pc, #96]	; (800333c <my_sys_deepsleep+0x70>)
 80032da:	f009 ffcb 	bl	800d274 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <my_sys_deepsleep+0x70>)
 80032e0:	0018      	movs	r0, r3
 80032e2:	f7ff ff01 	bl	80030e8 <send_debug_logs>
	my_tim_stop () ;
 80032e6:	f000 fc81 	bl	8003bec <my_tim_stop>
	HAL_SuspendTick () ;
 80032ea:	f001 f90b 	bl	8004504 <HAL_SuspendTick>
	my_rtc_alarm_flag = false ;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <my_sys_deepsleep+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	HAL_PWR_EnterSTOPMode ( PWR_LOWPOWERREGULATOR_ON , PWR_STOPENTRY_WFE ) ;
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	01db      	lsls	r3, r3, #7
 80032f8:	2102      	movs	r1, #2
 80032fa:	0018      	movs	r0, r3
 80032fc:	f001 fce8 	bl	8004cd0 <HAL_PWR_EnterSTOPMode>
	HAL_ResumeTick () ;
 8003300:	f001 f90e 	bl	8004520 <HAL_ResumeTick>
	my_rtc_get_dt_s ( rtc_dt_s ) ;
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <my_sys_deepsleep+0x78>)
 8003306:	0018      	movs	r0, r3
 8003308:	f007 fd66 	bl	800add8 <my_rtc_get_dt_s>
	sprintf ( dbg_payload , "%s,%d,%s,Wake-up after deepsleep" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800330c:	4c0e      	ldr	r4, [pc, #56]	; (8003348 <my_sys_deepsleep+0x7c>)
 800330e:	4a09      	ldr	r2, [pc, #36]	; (8003334 <my_sys_deepsleep+0x68>)
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <my_sys_deepsleep+0x80>)
 8003312:	480a      	ldr	r0, [pc, #40]	; (800333c <my_sys_deepsleep+0x70>)
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <my_sys_deepsleep+0x78>)
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	0023      	movs	r3, r4
 800331a:	f009 ffab 	bl	800d274 <sprintf>
	send_debug_logs ( dbg_payload ) ;
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <my_sys_deepsleep+0x70>)
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fee1 	bl	80030e8 <send_debug_logs>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b001      	add	sp, #4
 800332c:	bd90      	pop	{r4, r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	0000035b 	.word	0x0000035b
 8003334:	08013e80 	.word	0x08013e80
 8003338:	08013fe0 	.word	0x08013fe0
 800333c:	20000b20 	.word	0x20000b20
 8003340:	20000b10 	.word	0x20000b10
 8003344:	20000a24 	.word	0x20000a24
 8003348:	00000363 	.word	0x00000363
 800334c:	08014014 	.word	0x08014014

08003350 <my_sys_change_watchdog_time_ths>:

void my_sys_change_watchdog_time_ths ( uint32_t t )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_1_H )
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	2396      	movs	r3, #150	; 0x96
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	429a      	cmp	r2, r3
 8003360:	d30b      	bcc.n	800337a <my_sys_change_watchdog_time_ths+0x2a>
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	23e1      	movs	r3, #225	; 0xe1
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	429a      	cmp	r2, r3
 800336a:	d806      	bhi.n	800337a <my_sys_change_watchdog_time_ths+0x2a>
	{
		sys_watchdog_time_ths = t ;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	b29a      	uxth	r2, r3
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <my_sys_change_watchdog_time_ths+0x34>)
 8003372:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <my_sys_change_watchdog_time_ths+0x38>)
 8003376:	2201      	movs	r2, #1
 8003378:	721a      	strb	r2, [r3, #8]
	}
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}
 8003382:	46c0      	nop			; (mov r8, r8)
 8003384:	20000008 	.word	0x20000008
 8003388:	20000ad8 	.word	0x20000ad8

0800338c <my_sys_change_AlarmA_time>:
void my_sys_change_AlarmA_time ( uint32_t t )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_5_MIN && t <= TIME_THS_100_D )
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	2396      	movs	r3, #150	; 0x96
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	429a      	cmp	r2, r3
 800339c:	d309      	bcc.n	80033b2 <my_sys_change_AlarmA_time+0x26>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a06      	ldr	r2, [pc, #24]	; (80033bc <my_sys_change_AlarmA_time+0x30>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d805      	bhi.n	80033b2 <my_sys_change_AlarmA_time+0x26>
	{
		my_rtc_alarmA_time = t ;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <my_sys_change_AlarmA_time+0x34>)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <my_sys_change_AlarmA_time+0x38>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	721a      	strb	r2, [r3, #8]
	}
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	0083d600 	.word	0x0083d600
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	20000ad8 	.word	0x20000ad8

080033c8 <my_sys_change_fix_acq_ths>:
void my_sys_change_fix_acq_ths ( uint32_t t )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_45_SEC && t <= TIME_THS_10_MIN )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b2c      	cmp	r3, #44	; 0x2c
 80033d4:	d90b      	bls.n	80033ee <my_sys_change_fix_acq_ths+0x26>
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	2396      	movs	r3, #150	; 0x96
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d806      	bhi.n	80033ee <my_sys_change_fix_acq_ths+0x26>
	{
		fix_acq_ths = t ;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <my_sys_change_fix_acq_ths+0x30>)
 80033e6:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <my_sys_change_fix_acq_ths+0x34>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	721a      	strb	r2, [r3, #8]
	}
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b002      	add	sp, #8
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	2000001a 	.word	0x2000001a
 80033fc:	20000ad8 	.word	0x20000ad8

08003400 <my_sys_change_min_tns_time_ths>:
void my_sys_change_min_tns_time_ths ( uint32_t t )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	if ( t >= TIME_THS_15_SEC && t <= TIME_THS_10_MIN )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b0e      	cmp	r3, #14
 800340c:	d90b      	bls.n	8003426 <my_sys_change_min_tns_time_ths+0x26>
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	2396      	movs	r3, #150	; 0x96
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	429a      	cmp	r2, r3
 8003416:	d806      	bhi.n	8003426 <my_sys_change_min_tns_time_ths+0x26>
	{
		min_tns_time_ths = t ;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b04      	ldr	r3, [pc, #16]	; (8003430 <my_sys_change_min_tns_time_ths+0x30>)
 800341e:	801a      	strh	r2, [r3, #0]
		my_astro_cmd.is_executed = true ;
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <my_sys_change_min_tns_time_ths+0x34>)
 8003422:	2201      	movs	r2, #1
 8003424:	721a      	strb	r2, [r3, #8]
	}
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	b002      	add	sp, #8
 800342c:	bd80      	pop	{r7, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	2000001c 	.word	0x2000001c
 8003434:	20000ad8 	.word	0x20000ad8

08003438 <my_sys_change_pdop_ths>:
void my_sys_change_pdop_ths ( uint32_t p )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	if ( p >= 0.01 && p <= 100 )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <my_sys_change_pdop_ths+0x2a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d80a      	bhi.n	8003462 <my_sys_change_pdop_ths+0x2a>
	{
		pdop_ths = p ;
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fe ffd5 	bl	80023fc <__aeabi_ui2d>
 8003452:	0002      	movs	r2, r0
 8003454:	000b      	movs	r3, r1
 8003456:	4905      	ldr	r1, [pc, #20]	; (800346c <my_sys_change_pdop_ths+0x34>)
 8003458:	600a      	str	r2, [r1, #0]
 800345a:	604b      	str	r3, [r1, #4]
		my_astro_cmd.is_executed = true ;
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <my_sys_change_pdop_ths+0x38>)
 800345e:	2201      	movs	r2, #1
 8003460:	721a      	strb	r2, [r3, #8]
	}
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	46bd      	mov	sp, r7
 8003466:	b002      	add	sp, #8
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	20000020 	.word	0x20000020
 8003470:	20000ad8 	.word	0x20000ad8

08003474 <my_tracker_handle_cmd>:
bool my_tracker_handle_cmd ( void )
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	46d6      	mov	lr, sl
 8003478:	464f      	mov	r7, r9
 800347a:	4646      	mov	r6, r8
 800347c:	b5c0      	push	{r6, r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af08      	add	r7, sp, #32
	if ( my_tracker_api_is_cmd ( my_astro_rcv_cmd ) )
 8003482:	4bd1      	ldr	r3, [pc, #836]	; (80037c8 <my_tracker_handle_cmd+0x354>)
 8003484:	0018      	movs	r0, r3
 8003486:	f008 fbb7 	bl	800bbf8 <my_tracker_api_is_cmd>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d100      	bne.n	8003490 <my_tracker_handle_cmd+0x1c>
 800348e:	e192      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
	{
		if ( my_tracker_api_parse_cmd ( &my_astro_cmd , my_astro_rcv_cmd ) )
 8003490:	4acd      	ldr	r2, [pc, #820]	; (80037c8 <my_tracker_handle_cmd+0x354>)
 8003492:	4bce      	ldr	r3, [pc, #824]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003494:	0011      	movs	r1, r2
 8003496:	0018      	movs	r0, r3
 8003498:	f008 fc18 	bl	800bccc <my_tracker_api_parse_cmd>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d100      	bne.n	80034a2 <my_tracker_handle_cmd+0x2e>
 80034a0:	e189      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
		{
			switch ( my_astro_cmd.code )
 80034a2:	4bca      	ldr	r3, [pc, #808]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d900      	bls.n	80034ac <my_tracker_handle_cmd+0x38>
 80034aa:	e151      	b.n	8003750 <my_tracker_handle_cmd+0x2dc>
 80034ac:	009a      	lsls	r2, r3, #2
 80034ae:	4bc8      	ldr	r3, [pc, #800]	; (80037d0 <my_tracker_handle_cmd+0x35c>)
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	469f      	mov	pc, r3
			{
			  case 1:
				  my_sys_change_watchdog_time_ths ( my_astro_cmd.value ) ;
 80034b6:	4bc5      	ldr	r3, [pc, #788]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff ff48 	bl	8003350 <my_sys_change_watchdog_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80034c0:	4bc4      	ldr	r3, [pc, #784]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	001c      	movs	r4, r3
 80034c6:	4bc1      	ldr	r3, [pc, #772]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80034c8:	7a1b      	ldrb	r3, [r3, #8]
 80034ca:	001d      	movs	r5, r3
 80034cc:	4bbf      	ldr	r3, [pc, #764]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	001a      	movs	r2, r3
 80034d2:	4bbe      	ldr	r3, [pc, #760]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	49c0      	ldr	r1, [pc, #768]	; (80037d8 <my_tracker_handle_cmd+0x364>)
 80034d8:	48c0      	ldr	r0, [pc, #768]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80034da:	9301      	str	r3, [sp, #4]
 80034dc:	9200      	str	r2, [sp, #0]
 80034de:	002b      	movs	r3, r5
 80034e0:	0022      	movs	r2, r4
 80034e2:	f009 fec7 	bl	800d274 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80034e6:	4cbe      	ldr	r4, [pc, #760]	; (80037e0 <my_tracker_handle_cmd+0x36c>)
 80034e8:	4abe      	ldr	r2, [pc, #760]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 80034ea:	49bf      	ldr	r1, [pc, #764]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 80034ec:	48bf      	ldr	r0, [pc, #764]	; (80037ec <my_tracker_handle_cmd+0x378>)
 80034ee:	4bbb      	ldr	r3, [pc, #748]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	0023      	movs	r3, r4
 80034f4:	f009 febe 	bl	800d274 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80034f8:	4bbc      	ldr	r3, [pc, #752]	; (80037ec <my_tracker_handle_cmd+0x378>)
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff fdf4 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003500:	4bb4      	ldr	r3, [pc, #720]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	b291      	uxth	r1, r2
 8003508:	4ab2      	ldr	r2, [pc, #712]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 800350a:	8011      	strh	r1, [r2, #0]
 800350c:	4ab3      	ldr	r2, [pc, #716]	; (80037dc <my_tracker_handle_cmd+0x368>)
 800350e:	0011      	movs	r1, r2
 8003510:	0018      	movs	r0, r3
 8003512:	f007 fa61 	bl	800a9d8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003516:	f000 facd 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  break ;
 800351a:	e14c      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
			  case 2:
				  my_sys_change_AlarmA_time ( my_astro_cmd.value ) ;
 800351c:	4bab      	ldr	r3, [pc, #684]	; (80037cc <my_tracker_handle_cmd+0x358>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	0018      	movs	r0, r3
 8003522:	f7ff ff33 	bl	800338c <my_sys_change_AlarmA_time>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003526:	4bab      	ldr	r3, [pc, #684]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	001c      	movs	r4, r3
 800352c:	4ba7      	ldr	r3, [pc, #668]	; (80037cc <my_tracker_handle_cmd+0x358>)
 800352e:	7a1b      	ldrb	r3, [r3, #8]
 8003530:	001d      	movs	r5, r3
 8003532:	4ba6      	ldr	r3, [pc, #664]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	001a      	movs	r2, r3
 8003538:	4ba4      	ldr	r3, [pc, #656]	; (80037cc <my_tracker_handle_cmd+0x358>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	49a6      	ldr	r1, [pc, #664]	; (80037d8 <my_tracker_handle_cmd+0x364>)
 800353e:	48a7      	ldr	r0, [pc, #668]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	9200      	str	r2, [sp, #0]
 8003544:	002b      	movs	r3, r5
 8003546:	0022      	movs	r2, r4
 8003548:	f009 fe94 	bl	800d274 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800354c:	4ca8      	ldr	r4, [pc, #672]	; (80037f0 <my_tracker_handle_cmd+0x37c>)
 800354e:	4aa5      	ldr	r2, [pc, #660]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 8003550:	49a5      	ldr	r1, [pc, #660]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 8003552:	48a6      	ldr	r0, [pc, #664]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003554:	4ba1      	ldr	r3, [pc, #644]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	0023      	movs	r3, r4
 800355a:	f009 fe8b 	bl	800d274 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800355e:	4ba3      	ldr	r3, [pc, #652]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003560:	0018      	movs	r0, r3
 8003562:	f7ff fdc1 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003566:	4b9b      	ldr	r3, [pc, #620]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	b291      	uxth	r1, r2
 800356e:	4a99      	ldr	r2, [pc, #612]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003570:	8011      	strh	r1, [r2, #0]
 8003572:	4a9a      	ldr	r2, [pc, #616]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f007 fa2e 	bl	800a9d8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 800357c:	f000 fa9a 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  break ;
 8003580:	e119      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
			  case 3:
				  my_sys_change_fix_acq_ths ( my_astro_cmd.value ) ;
 8003582:	4b92      	ldr	r3, [pc, #584]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0018      	movs	r0, r3
 8003588:	f7ff ff1e 	bl	80033c8 <my_sys_change_fix_acq_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 800358c:	4b91      	ldr	r3, [pc, #580]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	001c      	movs	r4, r3
 8003592:	4b8e      	ldr	r3, [pc, #568]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003594:	7a1b      	ldrb	r3, [r3, #8]
 8003596:	001d      	movs	r5, r3
 8003598:	4b8c      	ldr	r3, [pc, #560]	; (80037cc <my_tracker_handle_cmd+0x358>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	001a      	movs	r2, r3
 800359e:	4b8b      	ldr	r3, [pc, #556]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	498d      	ldr	r1, [pc, #564]	; (80037d8 <my_tracker_handle_cmd+0x364>)
 80035a4:	488d      	ldr	r0, [pc, #564]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	9200      	str	r2, [sp, #0]
 80035aa:	002b      	movs	r3, r5
 80035ac:	0022      	movs	r2, r4
 80035ae:	f009 fe61 	bl	800d274 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 80035b2:	4c90      	ldr	r4, [pc, #576]	; (80037f4 <my_tracker_handle_cmd+0x380>)
 80035b4:	4a8b      	ldr	r2, [pc, #556]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 80035b6:	498c      	ldr	r1, [pc, #560]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 80035b8:	488c      	ldr	r0, [pc, #560]	; (80037ec <my_tracker_handle_cmd+0x378>)
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	0023      	movs	r3, r4
 80035c0:	f009 fe58 	bl	800d274 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 80035c4:	4b89      	ldr	r3, [pc, #548]	; (80037ec <my_tracker_handle_cmd+0x378>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f7ff fd8e 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 80035cc:	4b81      	ldr	r3, [pc, #516]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	b291      	uxth	r1, r2
 80035d4:	4a7f      	ldr	r2, [pc, #508]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 80035d6:	8011      	strh	r1, [r2, #0]
 80035d8:	4a80      	ldr	r2, [pc, #512]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80035da:	0011      	movs	r1, r2
 80035dc:	0018      	movs	r0, r3
 80035de:	f007 f9fb 	bl	800a9d8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80035e2:	f000 fa67 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  break ;
 80035e6:	e0e6      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
			  case 4:
				  my_sys_change_min_tns_time_ths ( my_astro_cmd.value ) ;
 80035e8:	4b78      	ldr	r3, [pc, #480]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff ff07 	bl	8003400 <my_sys_change_min_tns_time_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 80035f2:	4b78      	ldr	r3, [pc, #480]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	001c      	movs	r4, r3
 80035f8:	4b74      	ldr	r3, [pc, #464]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80035fa:	7a1b      	ldrb	r3, [r3, #8]
 80035fc:	001d      	movs	r5, r3
 80035fe:	4b73      	ldr	r3, [pc, #460]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	001a      	movs	r2, r3
 8003604:	4b71      	ldr	r3, [pc, #452]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	4973      	ldr	r1, [pc, #460]	; (80037d8 <my_tracker_handle_cmd+0x364>)
 800360a:	4874      	ldr	r0, [pc, #464]	; (80037dc <my_tracker_handle_cmd+0x368>)
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	9200      	str	r2, [sp, #0]
 8003610:	002b      	movs	r3, r5
 8003612:	0022      	movs	r2, r4
 8003614:	f009 fe2e 	bl	800d274 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003618:	4c77      	ldr	r4, [pc, #476]	; (80037f8 <my_tracker_handle_cmd+0x384>)
 800361a:	4a72      	ldr	r2, [pc, #456]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 800361c:	4972      	ldr	r1, [pc, #456]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 800361e:	4873      	ldr	r0, [pc, #460]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003620:	4b6e      	ldr	r3, [pc, #440]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	0023      	movs	r3, r4
 8003626:	f009 fe25 	bl	800d274 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800362a:	4b70      	ldr	r3, [pc, #448]	; (80037ec <my_tracker_handle_cmd+0x378>)
 800362c:	0018      	movs	r0, r3
 800362e:	f7ff fd5b 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003632:	4b68      	ldr	r3, [pc, #416]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	b291      	uxth	r1, r2
 800363a:	4a66      	ldr	r2, [pc, #408]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 800363c:	8011      	strh	r1, [r2, #0]
 800363e:	4a67      	ldr	r2, [pc, #412]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003640:	0011      	movs	r1, r2
 8003642:	0018      	movs	r0, r3
 8003644:	f007 f9c8 	bl	800a9d8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 8003648:	f000 fa34 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  break ;
 800364c:	e0b3      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
			  case 5:
				  my_sys_change_pdop_ths ( my_astro_cmd.value ) ;
 800364e:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff fef0 	bl	8003438 <my_sys_change_pdop_ths>
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003658:	4b5e      	ldr	r3, [pc, #376]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	001c      	movs	r4, r3
 800365e:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003660:	7a1b      	ldrb	r3, [r3, #8]
 8003662:	001d      	movs	r5, r3
 8003664:	4b59      	ldr	r3, [pc, #356]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	001a      	movs	r2, r3
 800366a:	4b58      	ldr	r3, [pc, #352]	; (80037cc <my_tracker_handle_cmd+0x358>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	495a      	ldr	r1, [pc, #360]	; (80037d8 <my_tracker_handle_cmd+0x364>)
 8003670:	485a      	ldr	r0, [pc, #360]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003672:	9301      	str	r3, [sp, #4]
 8003674:	9200      	str	r2, [sp, #0]
 8003676:	002b      	movs	r3, r5
 8003678:	0022      	movs	r2, r4
 800367a:	f009 fdfb 	bl	800d274 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800367e:	4c5f      	ldr	r4, [pc, #380]	; (80037fc <my_tracker_handle_cmd+0x388>)
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 8003682:	4959      	ldr	r1, [pc, #356]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 8003684:	4859      	ldr	r0, [pc, #356]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	0023      	movs	r3, r4
 800368c:	f009 fdf2 	bl	800d274 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003692:	0018      	movs	r0, r3
 8003694:	f7ff fd28 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003698:	4b4e      	ldr	r3, [pc, #312]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	b291      	uxth	r1, r2
 80036a0:	4a4c      	ldr	r2, [pc, #304]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 80036a2:	8011      	strh	r1, [r2, #0]
 80036a4:	4a4d      	ldr	r2, [pc, #308]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80036a6:	0011      	movs	r1, r2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f007 f995 	bl	800a9d8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80036ae:	f000 fa01 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  break ;
 80036b2:	e080      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
			  case 8:
				  if ( my_astro_cmd.value == (uint32_t) GET_SYS_CFG )
 80036b4:	4b45      	ldr	r3, [pc, #276]	; (80037cc <my_tracker_handle_cmd+0x358>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d000      	beq.n	80036be <my_tracker_handle_cmd+0x24a>
 80036bc:	e078      	b.n	80037b0 <my_tracker_handle_cmd+0x33c>
				  {
					  sprintf ( my_astro_payload , "%u,%s,%u,%u,%lu,%u,%u,%.1f" , uplink_id , fv , (uint16_t) sys_mode , sys_watchdog_time_ths , my_rtc_alarmA_time , fix_acq_ths , min_tns_time_ths , pdop_ths ) ;
 80036be:	4b45      	ldr	r3, [pc, #276]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	469a      	mov	sl, r3
 80036c4:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <my_tracker_handle_cmd+0x38c>)
 80036c6:	681d      	ldr	r5, [r3, #0]
 80036c8:	4b4e      	ldr	r3, [pc, #312]	; (8003804 <my_tracker_handle_cmd+0x390>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	001e      	movs	r6, r3
 80036ce:	4b4e      	ldr	r3, [pc, #312]	; (8003808 <my_tracker_handle_cmd+0x394>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	469c      	mov	ip, r3
 80036d4:	4b4d      	ldr	r3, [pc, #308]	; (800380c <my_tracker_handle_cmd+0x398>)
 80036d6:	6819      	ldr	r1, [r3, #0]
 80036d8:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <my_tracker_handle_cmd+0x39c>)
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	4698      	mov	r8, r3
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <my_tracker_handle_cmd+0x3a0>)
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	4699      	mov	r9, r3
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <my_tracker_handle_cmd+0x3a4>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4c4c      	ldr	r4, [pc, #304]	; (800381c <my_tracker_handle_cmd+0x3a8>)
 80036ec:	483b      	ldr	r0, [pc, #236]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80036ee:	9206      	str	r2, [sp, #24]
 80036f0:	9307      	str	r3, [sp, #28]
 80036f2:	464b      	mov	r3, r9
 80036f4:	9304      	str	r3, [sp, #16]
 80036f6:	4643      	mov	r3, r8
 80036f8:	9303      	str	r3, [sp, #12]
 80036fa:	9102      	str	r1, [sp, #8]
 80036fc:	4663      	mov	r3, ip
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	9600      	str	r6, [sp, #0]
 8003702:	002b      	movs	r3, r5
 8003704:	4652      	mov	r2, sl
 8003706:	0021      	movs	r1, r4
 8003708:	f009 fdb4 	bl	800d274 <sprintf>
					  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 800370c:	4c44      	ldr	r4, [pc, #272]	; (8003820 <my_tracker_handle_cmd+0x3ac>)
 800370e:	4a35      	ldr	r2, [pc, #212]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 8003710:	4935      	ldr	r1, [pc, #212]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 8003712:	4836      	ldr	r0, [pc, #216]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003714:	4b31      	ldr	r3, [pc, #196]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	0023      	movs	r3, r4
 800371a:	f009 fdab 	bl	800d274 <sprintf>
					  send_debug_logs ( dbg_payload ) ;
 800371e:	4b33      	ldr	r3, [pc, #204]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff fce1 	bl	80030e8 <send_debug_logs>
					  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003726:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	b291      	uxth	r1, r2
 800372e:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003730:	8011      	strh	r1, [r2, #0]
 8003732:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003734:	0011      	movs	r1, r2
 8003736:	0018      	movs	r0, r3
 8003738:	f007 f94e 	bl	800a9d8 <my_astro_add_payload_2_queue>
					  my_astro_turn_payload_id_counter () ;
 800373c:	f000 f9ba 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  }
				  break ;
 8003740:	e036      	b.n	80037b0 <my_tracker_handle_cmd+0x33c>
			  case 9:
				  // Tutaj wyjątkowo nie musi być uplink confimration, bo kolejny pakiet będzie miał id = 0, a logi będą wysłane w funkcji
				  if ( my_astro_cmd.value == (uint32_t) RESET_SYS_CMD_VALUE )
 8003742:	4b22      	ldr	r3, [pc, #136]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d134      	bne.n	80037b4 <my_tracker_handle_cmd+0x340>
					  my_sys_restart () ;
 800374a:	f7ff fd9b 	bl	8003284 <my_sys_restart>
				  break ;
 800374e:	e031      	b.n	80037b4 <my_tracker_handle_cmd+0x340>
			  default:
				  sprintf ( my_astro_payload , "%u,%u,%u,%lu" , uplink_id , (uint16_t) my_astro_cmd.is_executed , my_astro_cmd.code , my_astro_cmd.value ) ;
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	001c      	movs	r4, r3
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003758:	7a1b      	ldrb	r3, [r3, #8]
 800375a:	001d      	movs	r5, r3
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <my_tracker_handle_cmd+0x358>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	001a      	movs	r2, r3
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <my_tracker_handle_cmd+0x358>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	491c      	ldr	r1, [pc, #112]	; (80037d8 <my_tracker_handle_cmd+0x364>)
 8003768:	481c      	ldr	r0, [pc, #112]	; (80037dc <my_tracker_handle_cmd+0x368>)
 800376a:	9301      	str	r3, [sp, #4]
 800376c:	9200      	str	r2, [sp, #0]
 800376e:	002b      	movs	r3, r5
 8003770:	0022      	movs	r2, r4
 8003772:	f009 fd7f 	bl	800d274 <sprintf>
				  sprintf ( dbg_payload , "%s,%d,payload: %s" , __FILE__ , __LINE__ , my_astro_payload ) ; // Żeby astro_payload_id był taki jak wysłany, bo po wysłaniu będzie zwiększony
 8003776:	23f4      	movs	r3, #244	; 0xf4
 8003778:	009c      	lsls	r4, r3, #2
 800377a:	4a1a      	ldr	r2, [pc, #104]	; (80037e4 <my_tracker_handle_cmd+0x370>)
 800377c:	491a      	ldr	r1, [pc, #104]	; (80037e8 <my_tracker_handle_cmd+0x374>)
 800377e:	481b      	ldr	r0, [pc, #108]	; (80037ec <my_tracker_handle_cmd+0x378>)
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <my_tracker_handle_cmd+0x368>)
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	0023      	movs	r3, r4
 8003786:	f009 fd75 	bl	800d274 <sprintf>
				  send_debug_logs ( dbg_payload ) ;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <my_tracker_handle_cmd+0x378>)
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff fcab 	bl	80030e8 <send_debug_logs>
				  my_astro_add_payload_2_queue ( uplink_id++ , my_astro_payload ) ;
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	b291      	uxth	r1, r2
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <my_tracker_handle_cmd+0x360>)
 800379c:	8011      	strh	r1, [r2, #0]
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <my_tracker_handle_cmd+0x368>)
 80037a0:	0011      	movs	r1, r2
 80037a2:	0018      	movs	r0, r3
 80037a4:	f007 f918 	bl	800a9d8 <my_astro_add_payload_2_queue>
				  my_astro_turn_payload_id_counter () ;
 80037a8:	f000 f984 	bl	8003ab4 <my_astro_turn_payload_id_counter>
				  return false ;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e003      	b.n	80037b8 <my_tracker_handle_cmd+0x344>
				  break ;
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	e000      	b.n	80037b6 <my_tracker_handle_cmd+0x342>
				  break ;
 80037b4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return true ;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	0018      	movs	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bce0      	pop	{r5, r6, r7}
 80037be:	46ba      	mov	sl, r7
 80037c0:	46b1      	mov	r9, r6
 80037c2:	46a8      	mov	r8, r5
 80037c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000c1c 	.word	0x20000c1c
 80037cc:	20000ad8 	.word	0x20000ad8
 80037d0:	080159dc 	.word	0x080159dc
 80037d4:	20000ae4 	.word	0x20000ae4
 80037d8:	08014038 	.word	0x08014038
 80037dc:	20000a38 	.word	0x20000a38
 80037e0:	0000039a 	.word	0x0000039a
 80037e4:	08013e80 	.word	0x08013e80
 80037e8:	08013f44 	.word	0x08013f44
 80037ec:	20000b20 	.word	0x20000b20
 80037f0:	000003a2 	.word	0x000003a2
 80037f4:	000003aa 	.word	0x000003aa
 80037f8:	000003b2 	.word	0x000003b2
 80037fc:	000003ba 	.word	0x000003ba
 8003800:	20000004 	.word	0x20000004
 8003804:	20000a22 	.word	0x20000a22
 8003808:	20000008 	.word	0x20000008
 800380c:	2000000c 	.word	0x2000000c
 8003810:	2000001a 	.word	0x2000001a
 8003814:	2000001c 	.word	0x2000001c
 8003818:	20000020 	.word	0x20000020
 800381c:	08014048 	.word	0x08014048
 8003820:	000003c3 	.word	0x000003c3

08003824 <my_ant_sw_pos>:
	}
}

// ** ANT SW Operations
void my_ant_sw_pos ( uint8_t pos )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	0002      	movs	r2, r0
 800382c:	1dfb      	adds	r3, r7, #7
 800382e:	701a      	strb	r2, [r3, #0]
	if ( pos == 1 ) // Włączenie GNSS czyli ustawienie RF_SW_CTL1 = LOW i RF_SW_CTL2 = HIGH
 8003830:	1dfb      	adds	r3, r7, #7
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10e      	bne.n	8003856 <my_ant_sw_pos+0x32>
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_RESET ) ;
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4811      	ldr	r0, [pc, #68]	; (8003884 <my_ant_sw_pos+0x60>)
 800383e:	2200      	movs	r2, #0
 8003840:	0019      	movs	r1, r3
 8003842:	f001 f9e6 	bl	8004c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_SET ) ;
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	480e      	ldr	r0, [pc, #56]	; (8003884 <my_ant_sw_pos+0x60>)
 800384c:	2201      	movs	r2, #1
 800384e:	0019      	movs	r1, r3
 8003850:	f001 f9df 	bl	8004c12 <HAL_GPIO_WritePin>
	else if ( pos == 2 )
	{
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
	}
}
 8003854:	e011      	b.n	800387a <my_ant_sw_pos+0x56>
	else if ( pos == 2 )
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d10d      	bne.n	800387a <my_ant_sw_pos+0x56>
		HAL_GPIO_WritePin ( RF_SW_CTL1_GPIO_Port , RF_SW_CTL1_Pin , GPIO_PIN_SET ) ;
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4808      	ldr	r0, [pc, #32]	; (8003884 <my_ant_sw_pos+0x60>)
 8003864:	2201      	movs	r2, #1
 8003866:	0019      	movs	r1, r3
 8003868:	f001 f9d3 	bl	8004c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( RF_SW_CTL2_GPIO_Port , RF_SW_CTL2_Pin , GPIO_PIN_RESET ) ;
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4804      	ldr	r0, [pc, #16]	; (8003884 <my_ant_sw_pos+0x60>)
 8003872:	2200      	movs	r2, #0
 8003874:	0019      	movs	r1, r3
 8003876:	f001 f9cc 	bl	8004c12 <HAL_GPIO_WritePin>
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	50000400 	.word	0x50000400

08003888 <my_gnss_sw_on>:


// ** GNSS Operations
void my_gnss_sw_on ( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 1 ) ;
 800388c:	2001      	movs	r0, #1
 800388e:	f7ff ffc9 	bl	8003824 <my_ant_sw_pos>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_SET ) ;
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	4808      	ldr	r0, [pc, #32]	; (80038b8 <my_gnss_sw_on+0x30>)
 8003898:	2201      	movs	r2, #1
 800389a:	0019      	movs	r1, r3
 800389c:	f001 f9b9 	bl	8004c12 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_SET ) ;
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	4804      	ldr	r0, [pc, #16]	; (80038b8 <my_gnss_sw_on+0x30>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	0019      	movs	r1, r3
 80038aa:	f001 f9b2 	bl	8004c12 <HAL_GPIO_WritePin>
	MX_USART5_UART_Init () ;
 80038ae:	f7ff fadb 	bl	8002e68 <MX_USART5_UART_Init>
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	50000400 	.word	0x50000400

080038bc <my_gnss_sw_off>:
void my_gnss_sw_off ( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
	my_ant_sw_pos ( 2 ) ;
 80038c0:	2002      	movs	r0, #2
 80038c2:	f7ff ffaf 	bl	8003824 <my_ant_sw_pos>
	if ( sys_mode < 2 )
 80038c6:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <my_gnss_sw_off+0x3c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d811      	bhi.n	80038f2 <my_gnss_sw_off+0x36>
	{
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_PWR_SW_Pin , GPIO_PIN_RESET ) ;
 80038ce:	2380      	movs	r3, #128	; 0x80
 80038d0:	021b      	lsls	r3, r3, #8
 80038d2:	480a      	ldr	r0, [pc, #40]	; (80038fc <my_gnss_sw_off+0x40>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	0019      	movs	r1, r3
 80038d8:	f001 f99b 	bl	8004c12 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin ( GNSS_PWR_SW_GPIO_Port , GNSS_RST_Pin , GPIO_PIN_RESET ) ;
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	019b      	lsls	r3, r3, #6
 80038e0:	4806      	ldr	r0, [pc, #24]	; (80038fc <my_gnss_sw_off+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	0019      	movs	r1, r3
 80038e6:	f001 f994 	bl	8004c12 <HAL_GPIO_WritePin>
		HAL_UART_DeInit ( &HUART_GNSS ) ;
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <my_gnss_sw_off+0x44>)
 80038ec:	0018      	movs	r0, r3
 80038ee:	f004 f9e5 	bl	8007cbc <HAL_UART_DeInit>
	}
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000a22 	.word	0x20000a22
 80038fc:	50000400 	.word	0x50000400
 8003900:	2000098c 	.word	0x2000098c

08003904 <my_gnss_receive_byte>:
void my_gnss_receive_byte ( uint8_t* rx_byte , bool verbose )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	000a      	movs	r2, r1
 800390e:	1cfb      	adds	r3, r7, #3
 8003910:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive ( &HUART_GNSS , rx_byte , 1 , UART_TIMEOUT ) ;
 8003912:	23fa      	movs	r3, #250	; 0xfa
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4809      	ldr	r0, [pc, #36]	; (8003940 <my_gnss_receive_byte+0x3c>)
 800391a:	2201      	movs	r2, #1
 800391c:	f004 fab2 	bl	8007e84 <HAL_UART_Receive>
	if ( sys_mode > 0 )
 8003920:	4b08      	ldr	r3, [pc, #32]	; (8003944 <my_gnss_receive_byte+0x40>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d006      	beq.n	8003936 <my_gnss_receive_byte+0x32>
		HAL_UART_Transmit ( &HUART_DBG , rx_byte , 1 , UART_TIMEOUT ) ;
 8003928:	23fa      	movs	r3, #250	; 0xfa
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4806      	ldr	r0, [pc, #24]	; (8003948 <my_gnss_receive_byte+0x44>)
 8003930:	2201      	movs	r2, #1
 8003932:	f004 fa03 	bl	8007d3c <HAL_UART_Transmit>
}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	b002      	add	sp, #8
 800393c:	bd80      	pop	{r7, pc}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	2000098c 	.word	0x2000098c
 8003944:	20000a22 	.word	0x20000a22
 8003948:	20000864 	.word	0x20000864

0800394c <my_acc_init>:
	  my_gnss_sw_off () ;
}

// ACC
bool my_acc_init ( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
	uint8_t id = 0 ;
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]

	iis2dh_device_id_get ( &my_acc_ctx , &id ) ;
 8003958:	1dfa      	adds	r2, r7, #7
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <my_acc_init+0x60>)
 800395c:	0011      	movs	r1, r2
 800395e:	0018      	movs	r0, r3
 8003960:	f006 ffef 	bl	800a942 <iis2dh_device_id_get>
	if ( id != IIS2DH_ID )
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b33      	cmp	r3, #51	; 0x33
 800396a:	d001      	beq.n	8003970 <my_acc_init+0x24>
		return false ;
 800396c:	2300      	movs	r3, #0
 800396e:	e018      	b.n	80039a2 <my_acc_init+0x56>

	my_acc_ctx.write_reg = my_st_acc_platform_write ;
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <my_acc_init+0x60>)
 8003972:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <my_acc_init+0x64>)
 8003974:	601a      	str	r2, [r3, #0]
	my_acc_ctx.read_reg = my_st_acc_platform_read ;
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <my_acc_init+0x60>)
 8003978:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <my_acc_init+0x68>)
 800397a:	605a      	str	r2, [r3, #4]
	my_acc_ctx.handle = &hspi1 ;
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <my_acc_init+0x60>)
 800397e:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <my_acc_init+0x6c>)
 8003980:	60da      	str	r2, [r3, #12]

	iis2dh_full_scale_set ( &my_acc_ctx , IIS2DH_2g ) ;
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <my_acc_init+0x60>)
 8003984:	2100      	movs	r1, #0
 8003986:	0018      	movs	r0, r3
 8003988:	f006 ffab 	bl	800a8e2 <iis2dh_full_scale_set>
	iis2dh_operating_mode_set ( &my_acc_ctx , IIS2DH_LP_8bit ) ;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <my_acc_init+0x60>)
 800398e:	2102      	movs	r1, #2
 8003990:	0018      	movs	r0, r3
 8003992:	f006 ff0f 	bl	800a7b4 <iis2dh_operating_mode_set>
	iis2dh_data_rate_set ( &my_acc_ctx , IIS2DH_ODR_10Hz ) ;
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <my_acc_init+0x60>)
 8003998:	2102      	movs	r1, #2
 800399a:	0018      	movs	r0, r3
 800399c:	f006 ff73 	bl	800a886 <iis2dh_data_rate_set>

	return true ;
 80039a0:	2301      	movs	r3, #1
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b002      	add	sp, #8
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	20000b00 	.word	0x20000b00
 80039b0:	08003ad1 	.word	0x08003ad1
 80039b4:	08003b3b 	.word	0x08003b3b
 80039b8:	20000720 	.word	0x20000720

080039bc <my_astronode_reset>:

// ** ASTRO Operations
void my_astronode_reset ( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_SET ) ;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <my_astronode_reset+0x30>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	2102      	movs	r1, #2
 80039c6:	0018      	movs	r0, r3
 80039c8:	f001 f923 	bl	8004c12 <HAL_GPIO_WritePin>
    HAL_Delay ( 1 ) ;
 80039cc:	2001      	movs	r0, #1
 80039ce:	f000 fd75 	bl	80044bc <HAL_Delay>
    HAL_GPIO_WritePin ( ASTRO_RST_GPIO_Port , ASTRO_RST_Pin , GPIO_PIN_RESET ) ;
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <my_astronode_reset+0x30>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	2102      	movs	r1, #2
 80039d8:	0018      	movs	r0, r3
 80039da:	f001 f91a 	bl	8004c12 <HAL_GPIO_WritePin>
    HAL_Delay ( 250 ) ;
 80039de:	20fa      	movs	r0, #250	; 0xfa
 80039e0:	f000 fd6c 	bl	80044bc <HAL_Delay>
}
 80039e4:	46c0      	nop			; (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	50000400 	.word	0x50000400

080039f0 <send_astronode_request>:
void send_astronode_request ( uint8_t* p_tx_buffer , uint32_t length )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    send_debug_logs ( "Message sent to the Astronode --> " ) ;
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <send_astronode_request+0x34>)
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff fb73 	bl	80030e8 <send_debug_logs>
    send_debug_logs ( ( char* ) p_tx_buffer ) ;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff fb6f 	bl	80030e8 <send_debug_logs>
    HAL_UART_Transmit ( &HUART_ASTRO , p_tx_buffer , length , 1000 ) ;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	23fa      	movs	r3, #250	; 0xfa
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4804      	ldr	r0, [pc, #16]	; (8003a28 <send_astronode_request+0x38>)
 8003a16:	f004 f991 	bl	8007d3c <HAL_UART_Transmit>
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	0801406c 	.word	0x0801406c
 8003a28:	200008f8 	.word	0x200008f8

08003a2c <get_systick>:
uint32_t get_systick ( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
    return HAL_GetTick() ;
 8003a30:	f000 fd3a 	bl	80044a8 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <is_systick_timeout_over>:
bool is_systick_timeout_over ( uint32_t starting_value , uint16_t duration )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	000a      	movs	r2, r1
 8003a46:	1cbb      	adds	r3, r7, #2
 8003a48:	801a      	strh	r2, [r3, #0]
    return ( get_systick () - starting_value > duration ) ? true : false ;
 8003a4a:	f7ff ffef 	bl	8003a2c <get_systick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	1cba      	adds	r2, r7, #2
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	419b      	sbcs	r3, r3
 8003a5c:	425b      	negs	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <is_astronode_character_received>:
bool is_astronode_character_received ( uint8_t* p_rx_char )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
    return ( HAL_UART_Receive ( &HUART_ASTRO , p_rx_char , 1 , 100 ) == HAL_OK ? true : false ) ;
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4806      	ldr	r0, [pc, #24]	; (8003a8c <is_astronode_character_received+0x24>)
 8003a74:	2364      	movs	r3, #100	; 0x64
 8003a76:	2201      	movs	r2, #1
 8003a78:	f004 fa04 	bl	8007e84 <HAL_UART_Receive>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	425a      	negs	r2, r3
 8003a80:	4153      	adcs	r3, r2
 8003a82:	b2db      	uxtb	r3, r3
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200008f8 	.word	0x200008f8

08003a90 <my_astro_evt_pin>:
bool my_astro_evt_pin ()
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	return ( HAL_GPIO_ReadPin ( ASTRO_EVT_GPIO_Port , ASTRO_EVT_Pin ) == GPIO_PIN_SET ? true : false);
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <my_astro_evt_pin+0x20>)
 8003a96:	2104      	movs	r1, #4
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f001 f89d 	bl	8004bd8 <HAL_GPIO_ReadPin>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	425a      	negs	r2, r3
 8003aa4:	4153      	adcs	r3, r2
 8003aa6:	b2db      	uxtb	r3, r3
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	50000400 	.word	0x50000400

08003ab4 <my_astro_turn_payload_id_counter>:
void my_astro_turn_payload_id_counter ( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
	if ( uplink_id > 99 )
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <my_astro_turn_payload_id_counter+0x18>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	2b63      	cmp	r3, #99	; 0x63
 8003abe:	d902      	bls.n	8003ac6 <my_astro_turn_payload_id_counter+0x12>
		uplink_id = 1 ;
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <my_astro_turn_payload_id_counter+0x18>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	801a      	strh	r2, [r3, #0]
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000ae4 	.word	0x20000ae4

08003ad0 <my_st_acc_platform_write>:

// ACC LL Function
int32_t my_st_acc_platform_write ( void* handle , uint8_t reg , const uint8_t* bufp , uint16_t len )
{
 8003ad0:	b5b0      	push	{r4, r5, r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	0008      	movs	r0, r1
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	0019      	movs	r1, r3
 8003ade:	240b      	movs	r4, #11
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	1c02      	adds	r2, r0, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	2508      	movs	r5, #8
 8003ae8:	197b      	adds	r3, r7, r5
 8003aea:	1c0a      	adds	r2, r1, #0
 8003aec:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET ) ;
 8003aee:	23a0      	movs	r3, #160	; 0xa0
 8003af0:	05db      	lsls	r3, r3, #23
 8003af2:	2200      	movs	r2, #0
 8003af4:	2110      	movs	r1, #16
 8003af6:	0018      	movs	r0, r3
 8003af8:	f001 f88b 	bl	8004c12 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003afc:	2014      	movs	r0, #20
 8003afe:	f000 fcdd 	bl	80044bc <HAL_Delay>
	HAL_SPI_Transmit	( handle , &reg , 1 , 1000 ) ;
 8003b02:	23fa      	movs	r3, #250	; 0xfa
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	1939      	adds	r1, r7, r4
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f002 fee2 	bl	80068d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit	( handle , (uint8_t*) bufp , len , 1000 ) ;
 8003b10:	23fa      	movs	r3, #250	; 0xfa
 8003b12:	009c      	lsls	r4, r3, #2
 8003b14:	197b      	adds	r3, r7, r5
 8003b16:	881a      	ldrh	r2, [r3, #0]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	0023      	movs	r3, r4
 8003b1e:	f002 fed9 	bl	80068d4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin	( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003b22:	23a0      	movs	r3, #160	; 0xa0
 8003b24:	05db      	lsls	r3, r3, #23
 8003b26:	2201      	movs	r2, #1
 8003b28:	2110      	movs	r1, #16
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f001 f871 	bl	8004c12 <HAL_GPIO_WritePin>

	return 0 ;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b004      	add	sp, #16
 8003b38:	bdb0      	pop	{r4, r5, r7, pc}

08003b3a <my_st_acc_platform_read>:

int32_t my_st_acc_platform_read ( void* handle , uint8_t reg , uint8_t* bufp , uint16_t len )
{
 8003b3a:	b5b0      	push	{r4, r5, r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	0008      	movs	r0, r1
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	0019      	movs	r1, r3
 8003b48:	240b      	movs	r4, #11
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	1c02      	adds	r2, r0, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	2508      	movs	r5, #8
 8003b52:	197b      	adds	r3, r7, r5
 8003b54:	1c0a      	adds	r2, r1, #0
 8003b56:	801a      	strh	r2, [r3, #0]
	reg |= 0x80;
 8003b58:	193b      	adds	r3, r7, r4
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2280      	movs	r2, #128	; 0x80
 8003b5e:	4252      	negs	r2, r2
 8003b60:	4313      	orrs	r3, r2
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	193b      	adds	r3, r7, r4
 8003b66:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_RESET) ;
 8003b68:	23a0      	movs	r3, #160	; 0xa0
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2110      	movs	r1, #16
 8003b70:	0018      	movs	r0, r3
 8003b72:	f001 f84e 	bl	8004c12 <HAL_GPIO_WritePin>
	HAL_Delay ( 20 ) ;
 8003b76:	2014      	movs	r0, #20
 8003b78:	f000 fca0 	bl	80044bc <HAL_Delay>
	HAL_SPI_Transmit ( handle , &reg , 1 , 1000 ) ;
 8003b7c:	23fa      	movs	r3, #250	; 0xfa
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	1939      	adds	r1, r7, r4
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f002 fea5 	bl	80068d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive ( handle , bufp , len , 1000 ) ;
 8003b8a:	23fa      	movs	r3, #250	; 0xfa
 8003b8c:	009c      	lsls	r4, r3, #2
 8003b8e:	197b      	adds	r3, r7, r5
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	0023      	movs	r3, r4
 8003b98:	f002 fffc 	bl	8006b94 <HAL_SPI_Receive>
	HAL_GPIO_WritePin ( ACC_SPI1_CS_GPIO_Port , ACC_SPI1_CS_Pin , GPIO_PIN_SET) ;
 8003b9c:	23a0      	movs	r3, #160	; 0xa0
 8003b9e:	05db      	lsls	r3, r3, #23
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	2110      	movs	r1, #16
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f001 f834 	bl	8004c12 <HAL_GPIO_WritePin>

	return 0 ;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	0018      	movs	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	b004      	add	sp, #16
 8003bb2:	bdb0      	pop	{r4, r5, r7, pc}

08003bb4 <my_tim_init>:

// TIM operations
void my_tim_init ()
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT ( &TIM , TIM_IT_UPDATE ) ;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <my_tim_init+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	4252      	negs	r2, r2
 8003bc0:	611a      	str	r2, [r3, #16]
}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000784 	.word	0x20000784

08003bcc <my_tim_start>:

void my_tim_start ()
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
	tim_seconds = 0 ;
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <my_tim_start+0x18>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Start_IT ( &TIM ) ;
 8003bd6:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <my_tim_start+0x1c>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f003 fd3b 	bl	8007654 <HAL_TIM_Base_Start_IT>
}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000c44 	.word	0x20000c44
 8003be8:	20000784 	.word	0x20000784

08003bec <my_tim_stop>:

void my_tim_stop ()
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT ( &TIM ) ;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <my_tim_stop+0x14>)
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f003 fd90 	bl	8007718 <HAL_TIM_Base_Stop_IT>
}
 8003bf8:	46c0      	nop			; (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	20000784 	.word	0x20000784

08003c04 <HAL_TIM_PeriodElapsedCallback>:

// *** CALBACKS

// TIM Callback
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef *htim )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	if ( htim->Instance == TIM6 )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	; (8003c3c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10d      	bne.n	8003c32 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		tim_seconds++ ;
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c20:	801a      	strh	r2, [r3, #0]
		if ( tim_seconds > sys_watchdog_time_ths )
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c24:	881a      	ldrh	r2, [r3, #0]
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d901      	bls.n	8003c32 <HAL_TIM_PeriodElapsedCallback+0x2e>
			my_sys_restart () ;
 8003c2e:	f7ff fb29 	bl	8003284 <my_sys_restart>
	}
}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b002      	add	sp, #8
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	40001000 	.word	0x40001000
 8003c40:	20000c44 	.word	0x20000c44
 8003c44:	20000008 	.word	0x20000008

08003c48 <HAL_RTC_AlarmAEventCallback>:

// RTC Callbacks
void HAL_RTC_AlarmAEventCallback ( RTC_HandleTypeDef* hrtc )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	// is_rtc_alarm_a_flag = true ;
	//__HAL_RTC_ALARM_CLEAR_FLAG ( hrtc , RTC_FLAG_ALRAF ) ;  // Wyczyść flagę alarmu
	my_rtc_alarm_flag = true ;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RTC_AlarmAEventCallback+0x18>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	701a      	strb	r2, [r3, #0]
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b002      	add	sp, #8
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	20000b10 	.word	0x20000b10

08003c64 <HAL_GPIO_EXTI_Rising_Callback>:

// ASTRO EVT Callbacks
void HAL_GPIO_EXTI_Rising_Callback ( uint16_t GPIO_Pin )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	1dbb      	adds	r3, r7, #6
 8003c6e:	801a      	strh	r2, [r3, #0]

}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c7c:	b672      	cpsid	i
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c80:	e7fe      	b.n	8003c80 <Error_Handler+0x8>
	...

08003c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c8a:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003c90:	2101      	movs	r1, #1
 8003c92:	430a      	orrs	r2, r1
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca2:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003ca4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0549      	lsls	r1, r1, #21
 8003cac:	430a      	orrs	r2, r1
 8003cae:	63da      	str	r2, [r3, #60]	; 0x3c
 8003cb0:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <HAL_MspInit+0x4c>)
 8003cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	055b      	lsls	r3, r3, #21
 8003cb8:	4013      	ands	r3, r2
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003cbe:	23c0      	movs	r3, #192	; 0xc0
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fc3a 	bl	800453c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40021000 	.word	0x40021000

08003cd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b097      	sub	sp, #92	; 0x5c
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cdc:	240c      	movs	r4, #12
 8003cde:	193b      	adds	r3, r7, r4
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	234c      	movs	r3, #76	; 0x4c
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f009 fb5a 	bl	800d3a0 <memset>
  if(hrtc->Instance==RTC)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <HAL_RTC_MspInit+0x84>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d12c      	bne.n	8003d50 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003cf6:	193b      	adds	r3, r7, r4
 8003cf8:	2280      	movs	r2, #128	; 0x80
 8003cfa:	0292      	lsls	r2, r2, #10
 8003cfc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cfe:	193b      	adds	r3, r7, r4
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	0052      	lsls	r2, r2, #1
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d06:	193b      	adds	r3, r7, r4
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f001 fd89 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 8003d0e:	1e03      	subs	r3, r0, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d12:	f7ff ffb1 	bl	8003c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_RTC_MspInit+0x88>)
 8003d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <HAL_RTC_MspInit+0x88>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	0209      	lsls	r1, r1, #8
 8003d20:	430a      	orrs	r2, r1
 8003d22:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_RTC_MspInit+0x88>)
 8003d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RTC_MspInit+0x88>)
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	00c9      	lsls	r1, r1, #3
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <HAL_RTC_MspInit+0x88>)
 8003d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 3, 0);
 8003d40:	2200      	movs	r2, #0
 8003d42:	2103      	movs	r1, #3
 8003d44:	2002      	movs	r0, #2
 8003d46:	f000 fccd 	bl	80046e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8003d4a:	2002      	movs	r0, #2
 8003d4c:	f000 fcdf 	bl	800470e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d50:	46c0      	nop			; (mov r8, r8)
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b017      	add	sp, #92	; 0x5c
 8003d56:	bd90      	pop	{r4, r7, pc}
 8003d58:	40002800 	.word	0x40002800
 8003d5c:	40021000 	.word	0x40021000

08003d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d60:	b590      	push	{r4, r7, lr}
 8003d62:	b08b      	sub	sp, #44	; 0x2c
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d68:	2414      	movs	r4, #20
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	2314      	movs	r3, #20
 8003d70:	001a      	movs	r2, r3
 8003d72:	2100      	movs	r1, #0
 8003d74:	f009 fb14 	bl	800d3a0 <memset>
  if(hspi->Instance==SPI1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	; (8003dec <HAL_SPI_MspInit+0x8c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d130      	bne.n	8003de4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d82:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_SPI_MspInit+0x90>)
 8003d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_SPI_MspInit+0x90>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0149      	lsls	r1, r1, #5
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d90:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <HAL_SPI_MspInit+0x90>)
 8003d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	015b      	lsls	r3, r3, #5
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <HAL_SPI_MspInit+0x90>)
 8003da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <HAL_SPI_MspInit+0x90>)
 8003da4:	2101      	movs	r1, #1
 8003da6:	430a      	orrs	r2, r1
 8003da8:	635a      	str	r2, [r3, #52]	; 0x34
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <HAL_SPI_MspInit+0x90>)
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	2201      	movs	r2, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ACC_SPI1_SCK_Pin|ACC_SPI1_MISO_Pin|ACC_SPI1_MOSI_Pin;
 8003db6:	0021      	movs	r1, r4
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	22e0      	movs	r2, #224	; 0xe0
 8003dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2200      	movs	r2, #0
 8003dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd6:	187a      	adds	r2, r7, r1
 8003dd8:	23a0      	movs	r3, #160	; 0xa0
 8003dda:	05db      	lsls	r3, r3, #23
 8003ddc:	0011      	movs	r1, r2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 fcb6 	bl	8004750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b00b      	add	sp, #44	; 0x2c
 8003dea:	bd90      	pop	{r4, r7, pc}
 8003dec:	40013000 	.word	0x40013000
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <HAL_TIM_Base_MspInit+0x44>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d113      	bne.n	8003e2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <HAL_TIM_Base_MspInit+0x48>)
 8003e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_TIM_Base_MspInit+0x48>)
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_TIM_Base_MspInit+0x48>)
 8003e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e16:	2210      	movs	r2, #16
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, 2, 0);
 8003e1e:	2200      	movs	r2, #0
 8003e20:	2102      	movs	r1, #2
 8003e22:	2011      	movs	r0, #17
 8003e24:	f000 fc5e 	bl	80046e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8003e28:	2011      	movs	r0, #17
 8003e2a:	f000 fc70 	bl	800470e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	46bd      	mov	sp, r7
 8003e32:	b004      	add	sp, #16
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	40001000 	.word	0x40001000
 8003e3c:	40021000 	.word	0x40021000

08003e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b0a3      	sub	sp, #140	; 0x8c
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	2374      	movs	r3, #116	; 0x74
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	2314      	movs	r3, #20
 8003e50:	001a      	movs	r2, r3
 8003e52:	2100      	movs	r1, #0
 8003e54:	f009 faa4 	bl	800d3a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e58:	2428      	movs	r4, #40	; 0x28
 8003e5a:	193b      	adds	r3, r7, r4
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	234c      	movs	r3, #76	; 0x4c
 8003e60:	001a      	movs	r2, r3
 8003e62:	2100      	movs	r1, #0
 8003e64:	f009 fa9c 	bl	800d3a0 <memset>
  if(huart->Instance==USART1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a84      	ldr	r2, [pc, #528]	; (8004080 <HAL_UART_MspInit+0x240>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d140      	bne.n	8003ef4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003e78:	193b      	adds	r3, r7, r4
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e7e:	193b      	adds	r3, r7, r4
 8003e80:	0018      	movs	r0, r3
 8003e82:	f001 fccd 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e8a:	f7ff fef5 	bl	8003c78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e8e:	4b7d      	ldr	r3, [pc, #500]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e92:	4b7c      	ldr	r3, [pc, #496]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	01c9      	lsls	r1, r1, #7
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e9c:	4b79      	ldr	r3, [pc, #484]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea0:	2380      	movs	r3, #128	; 0x80
 8003ea2:	01db      	lsls	r3, r3, #7
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eaa:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eae:	4b75      	ldr	r3, [pc, #468]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8003eb6:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	2201      	movs	r2, #1
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG2_TX_Pin|DBG2_RX_Pin;
 8003ec2:	2174      	movs	r1, #116	; 0x74
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	22c0      	movs	r2, #192	; 0xc0
 8003ec8:	00d2      	lsls	r2, r2, #3
 8003eca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2202      	movs	r2, #2
 8003ed0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2200      	movs	r2, #0
 8003edc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee4:	187a      	adds	r2, r7, r1
 8003ee6:	23a0      	movs	r3, #160	; 0xa0
 8003ee8:	05db      	lsls	r3, r3, #23
 8003eea:	0011      	movs	r1, r2
 8003eec:	0018      	movs	r0, r3
 8003eee:	f000 fc2f 	bl	8004750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART5_MspInit 1 */

  /* USER CODE END USART5_MspInit 1 */
  }

}
 8003ef2:	e0c0      	b.n	8004076 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a63      	ldr	r2, [pc, #396]	; (8004088 <HAL_UART_MspInit+0x248>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d140      	bne.n	8003f80 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003efe:	2128      	movs	r1, #40	; 0x28
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	2202      	movs	r2, #2
 8003f04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f001 fc86 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 8003f14:	1e03      	subs	r3, r0, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_UART_MspInit+0xdc>
      Error_Handler();
 8003f18:	f7ff feae 	bl	8003c78 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f1c:	4b59      	ldr	r3, [pc, #356]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f20:	4b58      	ldr	r3, [pc, #352]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	0289      	lsls	r1, r1, #10
 8003f26:	430a      	orrs	r2, r1
 8003f28:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f2a:	4b56      	ldr	r3, [pc, #344]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	029b      	lsls	r3, r3, #10
 8003f32:	4013      	ands	r3, r2
 8003f34:	61fb      	str	r3, [r7, #28]
 8003f36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f38:	4b52      	ldr	r3, [pc, #328]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3c:	4b51      	ldr	r3, [pc, #324]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34
 8003f44:	4b4f      	ldr	r3, [pc, #316]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	2201      	movs	r2, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8003f50:	2174      	movs	r1, #116	; 0x74
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	220c      	movs	r2, #12
 8003f56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	187b      	adds	r3, r7, r1
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f70:	187a      	adds	r2, r7, r1
 8003f72:	23a0      	movs	r3, #160	; 0xa0
 8003f74:	05db      	lsls	r3, r3, #23
 8003f76:	0011      	movs	r1, r2
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 fbe9 	bl	8004750 <HAL_GPIO_Init>
}
 8003f7e:	e07a      	b.n	8004076 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART3)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a41      	ldr	r2, [pc, #260]	; (800408c <HAL_UART_MspInit+0x24c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d140      	bne.n	800400c <HAL_UART_MspInit+0x1cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f8a:	2128      	movs	r1, #40	; 0x28
 8003f8c:	187b      	adds	r3, r7, r1
 8003f8e:	2204      	movs	r2, #4
 8003f90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f92:	187b      	adds	r3, r7, r1
 8003f94:	2200      	movs	r2, #0
 8003f96:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f98:	187b      	adds	r3, r7, r1
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f001 fc40 	bl	8005820 <HAL_RCCEx_PeriphCLKConfig>
 8003fa0:	1e03      	subs	r3, r0, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_UART_MspInit+0x168>
      Error_Handler();
 8003fa4:	f7ff fe68 	bl	8003c78 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fa8:	4b36      	ldr	r3, [pc, #216]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003fae:	2180      	movs	r1, #128	; 0x80
 8003fb0:	02c9      	lsls	r1, r1, #11
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8003fb6:	4b33      	ldr	r3, [pc, #204]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fba:	2380      	movs	r3, #128	; 0x80
 8003fbc:	02db      	lsls	r3, r3, #11
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc4:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	4b2e      	ldr	r3, [pc, #184]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003fca:	2102      	movs	r1, #2
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34
 8003fd0:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_UART_MspInit+0x244>)
 8003fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
 8003fda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ASTRO_TX_Pin|ASTRO_RX_Pin;
 8003fdc:	2174      	movs	r1, #116	; 0x74
 8003fde:	187b      	adds	r3, r7, r1
 8003fe0:	22c0      	movs	r2, #192	; 0xc0
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2202      	movs	r2, #2
 8003fea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8003ff8:	187b      	adds	r3, r7, r1
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffe:	187b      	adds	r3, r7, r1
 8004000:	4a23      	ldr	r2, [pc, #140]	; (8004090 <HAL_UART_MspInit+0x250>)
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f000 fba3 	bl	8004750 <HAL_GPIO_Init>
}
 800400a:	e034      	b.n	8004076 <HAL_UART_MspInit+0x236>
  else if(huart->Instance==USART5)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a20      	ldr	r2, [pc, #128]	; (8004094 <HAL_UART_MspInit+0x254>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d12f      	bne.n	8004076 <HAL_UART_MspInit+0x236>
    __HAL_RCC_USART5_CLK_ENABLE();
 8004016:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_UART_MspInit+0x244>)
 8004018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401a:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <HAL_UART_MspInit+0x244>)
 800401c:	2180      	movs	r1, #128	; 0x80
 800401e:	0049      	lsls	r1, r1, #1
 8004020:	430a      	orrs	r2, r1
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c
 8004024:	4b17      	ldr	r3, [pc, #92]	; (8004084 <HAL_UART_MspInit+0x244>)
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	2380      	movs	r3, #128	; 0x80
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004032:	4b14      	ldr	r3, [pc, #80]	; (8004084 <HAL_UART_MspInit+0x244>)
 8004034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_UART_MspInit+0x244>)
 8004038:	2102      	movs	r1, #2
 800403a:	430a      	orrs	r2, r1
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_UART_MspInit+0x244>)
 8004040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004042:	2202      	movs	r2, #2
 8004044:	4013      	ands	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GNSS_TX_Pin|GNSS_RX_Pin;
 800404a:	2174      	movs	r1, #116	; 0x74
 800404c:	187b      	adds	r3, r7, r1
 800404e:	2218      	movs	r2, #24
 8004050:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2202      	movs	r2, #2
 8004056:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	2200      	movs	r2, #0
 800405c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2200      	movs	r2, #0
 8004062:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART5;
 8004064:	187b      	adds	r3, r7, r1
 8004066:	2203      	movs	r2, #3
 8004068:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406a:	187b      	adds	r3, r7, r1
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_UART_MspInit+0x250>)
 800406e:	0019      	movs	r1, r3
 8004070:	0010      	movs	r0, r2
 8004072:	f000 fb6d 	bl	8004750 <HAL_GPIO_Init>
}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	46bd      	mov	sp, r7
 800407a:	b023      	add	sp, #140	; 0x8c
 800407c:	bd90      	pop	{r4, r7, pc}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	40013800 	.word	0x40013800
 8004084:	40021000 	.word	0x40021000
 8004088:	40004400 	.word	0x40004400
 800408c:	40004800 	.word	0x40004800
 8004090:	50000400 	.word	0x50000400
 8004094:	40005000 	.word	0x40005000

08004098 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a25      	ldr	r2, [pc, #148]	; (800413c <HAL_UART_MspDeInit+0xa4>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10e      	bne.n	80040c8 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80040aa:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 80040ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 80040b0:	4924      	ldr	r1, [pc, #144]	; (8004144 <HAL_UART_MspDeInit+0xac>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	641a      	str	r2, [r3, #64]	; 0x40

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, DBG2_TX_Pin|DBG2_RX_Pin);
 80040b6:	23c0      	movs	r3, #192	; 0xc0
 80040b8:	00da      	lsls	r2, r3, #3
 80040ba:	23a0      	movs	r3, #160	; 0xa0
 80040bc:	05db      	lsls	r3, r3, #23
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 fcb1 	bl	8004a28 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART5_MspDeInit 1 */

  /* USER CODE END USART5_MspDeInit 1 */
  }

}
 80040c6:	e034      	b.n	8004132 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_UART_MspDeInit+0xb0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d10c      	bne.n	80040ec <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART2_CLK_DISABLE();
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 80040d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 80040d8:	491c      	ldr	r1, [pc, #112]	; (800414c <HAL_UART_MspDeInit+0xb4>)
 80040da:	400a      	ands	r2, r1
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOA, DBG_TX_Pin|DBG_RX_Pin);
 80040de:	23a0      	movs	r3, #160	; 0xa0
 80040e0:	05db      	lsls	r3, r3, #23
 80040e2:	210c      	movs	r1, #12
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 fc9f 	bl	8004a28 <HAL_GPIO_DeInit>
}
 80040ea:	e022      	b.n	8004132 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a17      	ldr	r2, [pc, #92]	; (8004150 <HAL_UART_MspDeInit+0xb8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10d      	bne.n	8004112 <HAL_UART_MspDeInit+0x7a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 80040f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 80040fc:	4915      	ldr	r1, [pc, #84]	; (8004154 <HAL_UART_MspDeInit+0xbc>)
 80040fe:	400a      	ands	r2, r1
 8004100:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, ASTRO_TX_Pin|ASTRO_RX_Pin);
 8004102:	23c0      	movs	r3, #192	; 0xc0
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4a14      	ldr	r2, [pc, #80]	; (8004158 <HAL_UART_MspDeInit+0xc0>)
 8004108:	0019      	movs	r1, r3
 800410a:	0010      	movs	r0, r2
 800410c:	f000 fc8c 	bl	8004a28 <HAL_GPIO_DeInit>
}
 8004110:	e00f      	b.n	8004132 <HAL_UART_MspDeInit+0x9a>
  else if(huart->Instance==USART5)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <HAL_UART_MspDeInit+0xc4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10a      	bne.n	8004132 <HAL_UART_MspDeInit+0x9a>
    __HAL_RCC_USART5_CLK_DISABLE();
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 800411e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <HAL_UART_MspDeInit+0xa8>)
 8004122:	490f      	ldr	r1, [pc, #60]	; (8004160 <HAL_UART_MspDeInit+0xc8>)
 8004124:	400a      	ands	r2, r1
 8004126:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_GPIO_DeInit(GPIOB, GNSS_TX_Pin|GNSS_RX_Pin);
 8004128:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_UART_MspDeInit+0xc0>)
 800412a:	2118      	movs	r1, #24
 800412c:	0018      	movs	r0, r3
 800412e:	f000 fc7b 	bl	8004a28 <HAL_GPIO_DeInit>
}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	40013800 	.word	0x40013800
 8004140:	40021000 	.word	0x40021000
 8004144:	ffffbfff 	.word	0xffffbfff
 8004148:	40004400 	.word	0x40004400
 800414c:	fffdffff 	.word	0xfffdffff
 8004150:	40004800 	.word	0x40004800
 8004154:	fffbffff 	.word	0xfffbffff
 8004158:	50000400 	.word	0x50000400
 800415c:	40005000 	.word	0x40005000
 8004160:	fffffeff 	.word	0xfffffeff

08004164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004168:	e7fe      	b.n	8004168 <NMI_Handler+0x4>

0800416a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800416e:	e7fe      	b.n	800416e <HardFault_Handler+0x4>

08004170 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004188:	f000 f97c 	bl	8004484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004198:	4b03      	ldr	r3, [pc, #12]	; (80041a8 <RTC_TAMP_IRQHandler+0x14>)
 800419a:	0018      	movs	r0, r3
 800419c:	f002 f942 	bl	8006424 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200006f4 	.word	0x200006f4

080041ac <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ASTRO_EVT_Pin);
 80041b0:	2004      	movs	r0, #4
 80041b2:	f000 fd4b 	bl	8004c4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 80041c2:	0018      	movs	r0, r3
 80041c4:	f003 fad6 	bl	8007774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000784 	.word	0x20000784

080041d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  return 1;
 80041d8:	2301      	movs	r3, #1
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_kill>:

int _kill(int pid, int sig)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80041ea:	f009 f9cd 	bl	800d588 <__errno>
 80041ee:	0003      	movs	r3, r0
 80041f0:	2216      	movs	r2, #22
 80041f2:	601a      	str	r2, [r3, #0]
  return -1;
 80041f4:	2301      	movs	r3, #1
 80041f6:	425b      	negs	r3, r3
}
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b002      	add	sp, #8
 80041fe:	bd80      	pop	{r7, pc}

08004200 <_exit>:

void _exit (int status)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004208:	2301      	movs	r3, #1
 800420a:	425a      	negs	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	0011      	movs	r1, r2
 8004210:	0018      	movs	r0, r3
 8004212:	f7ff ffe5 	bl	80041e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004216:	e7fe      	b.n	8004216 <_exit+0x16>

08004218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e00a      	b.n	8004240 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800422a:	e000      	b.n	800422e <_read+0x16>
 800422c:	bf00      	nop
 800422e:	0001      	movs	r1, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60ba      	str	r2, [r7, #8]
 8004236:	b2ca      	uxtb	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3301      	adds	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	dbf0      	blt.n	800422a <_read+0x12>
  }

  return len;
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b006      	add	sp, #24
 8004250:	bd80      	pop	{r7, pc}

08004252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e009      	b.n	8004278 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	60ba      	str	r2, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	0018      	movs	r0, r3
 800426e:	e000      	b.n	8004272 <_write+0x20>
 8004270:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3301      	adds	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbf1      	blt.n	8004264 <_write+0x12>
  }
  return len;
 8004280:	687b      	ldr	r3, [r7, #4]
}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bd80      	pop	{r7, pc}

0800428a <_close>:

int _close(int file)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004292:	2301      	movs	r3, #1
 8004294:	425b      	negs	r3, r3
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b002      	add	sp, #8
 800429c:	bd80      	pop	{r7, pc}

0800429e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2280      	movs	r2, #128	; 0x80
 80042ac:	0192      	lsls	r2, r2, #6
 80042ae:	605a      	str	r2, [r3, #4]
  return 0;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_isatty>:

int _isatty(int file)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042c2:	2301      	movs	r3, #1
}
 80042c4:	0018      	movs	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b002      	add	sp, #8
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	0018      	movs	r0, r3
 80042dc:	46bd      	mov	sp, r7
 80042de:	b004      	add	sp, #16
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <_sbrk+0x5c>)
 80042ee:	4b15      	ldr	r3, [pc, #84]	; (8004344 <_sbrk+0x60>)
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042f8:	4b13      	ldr	r3, [pc, #76]	; (8004348 <_sbrk+0x64>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004300:	4b11      	ldr	r3, [pc, #68]	; (8004348 <_sbrk+0x64>)
 8004302:	4a12      	ldr	r2, [pc, #72]	; (800434c <_sbrk+0x68>)
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <_sbrk+0x64>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	429a      	cmp	r2, r3
 8004312:	d207      	bcs.n	8004324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004314:	f009 f938 	bl	800d588 <__errno>
 8004318:	0003      	movs	r3, r0
 800431a:	220c      	movs	r2, #12
 800431c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800431e:	2301      	movs	r3, #1
 8004320:	425b      	negs	r3, r3
 8004322:	e009      	b.n	8004338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004324:	4b08      	ldr	r3, [pc, #32]	; (8004348 <_sbrk+0x64>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800432a:	4b07      	ldr	r3, [pc, #28]	; (8004348 <_sbrk+0x64>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	18d2      	adds	r2, r2, r3
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <_sbrk+0x64>)
 8004334:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	0018      	movs	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	b006      	add	sp, #24
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20024000 	.word	0x20024000
 8004344:	00000400 	.word	0x00000400
 8004348:	20000b14 	.word	0x20000b14
 800434c:	20000f58 	.word	0x20000f58

08004350 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004354:	46c0      	nop			; (mov r8, r8)
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800435c:	480d      	ldr	r0, [pc, #52]	; (8004394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800435e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004360:	f7ff fff6 	bl	8004350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004364:	480c      	ldr	r0, [pc, #48]	; (8004398 <LoopForever+0x6>)
  ldr r1, =_edata
 8004366:	490d      	ldr	r1, [pc, #52]	; (800439c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004368:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <LoopForever+0xe>)
  movs r3, #0
 800436a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800436c:	e002      	b.n	8004374 <LoopCopyDataInit>

0800436e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800436e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004372:	3304      	adds	r3, #4

08004374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004378:	d3f9      	bcc.n	800436e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800437c:	4c0a      	ldr	r4, [pc, #40]	; (80043a8 <LoopForever+0x16>)
  movs r3, #0
 800437e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004380:	e001      	b.n	8004386 <LoopFillZerobss>

08004382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004384:	3204      	adds	r2, #4

08004386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004388:	d3fb      	bcc.n	8004382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800438a:	f009 f903 	bl	800d594 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800438e:	f7fe f90b 	bl	80025a8 <main>

08004392 <LoopForever>:

LoopForever:
  b LoopForever
 8004392:	e7fe      	b.n	8004392 <LoopForever>
  ldr   r0, =_estack
 8004394:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800439c:	200006d8 	.word	0x200006d8
  ldr r2, =_sidata
 80043a0:	08015f40 	.word	0x08015f40
  ldr r2, =_sbss
 80043a4:	200006d8 	.word	0x200006d8
  ldr r4, =_ebss
 80043a8:	20000f54 	.word	0x20000f54

080043ac <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043ac:	e7fe      	b.n	80043ac <ADC1_COMP_IRQHandler>
	...

080043b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <HAL_Init+0x3c>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <HAL_Init+0x3c>)
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	0049      	lsls	r1, r1, #1
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043ca:	2003      	movs	r0, #3
 80043cc:	f000 f810 	bl	80043f0 <HAL_InitTick>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d003      	beq.n	80043dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80043d4:	1dfb      	adds	r3, r7, #7
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	e001      	b.n	80043e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80043dc:	f7ff fc52 	bl	8003c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043e0:	1dfb      	adds	r3, r7, #7
 80043e2:	781b      	ldrb	r3, [r3, #0]
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043f8:	230f      	movs	r3, #15
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004400:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <HAL_InitTick+0x88>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d02b      	beq.n	8004460 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004408:	4b1c      	ldr	r3, [pc, #112]	; (800447c <HAL_InitTick+0x8c>)
 800440a:	681c      	ldr	r4, [r3, #0]
 800440c:	4b1a      	ldr	r3, [pc, #104]	; (8004478 <HAL_InitTick+0x88>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	0019      	movs	r1, r3
 8004412:	23fa      	movs	r3, #250	; 0xfa
 8004414:	0098      	lsls	r0, r3, #2
 8004416:	f7fb fe91 	bl	800013c <__udivsi3>
 800441a:	0003      	movs	r3, r0
 800441c:	0019      	movs	r1, r3
 800441e:	0020      	movs	r0, r4
 8004420:	f7fb fe8c 	bl	800013c <__udivsi3>
 8004424:	0003      	movs	r3, r0
 8004426:	0018      	movs	r0, r3
 8004428:	f000 f985 	bl	8004736 <HAL_SYSTICK_Config>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d112      	bne.n	8004456 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d80a      	bhi.n	800444c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	2301      	movs	r3, #1
 800443a:	425b      	negs	r3, r3
 800443c:	2200      	movs	r2, #0
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f950 	bl	80046e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HAL_InitTick+0x90>)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e00d      	b.n	8004468 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800444c:	230f      	movs	r3, #15
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e008      	b.n	8004468 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004456:	230f      	movs	r3, #15
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	2201      	movs	r2, #1
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e003      	b.n	8004468 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004460:	230f      	movs	r3, #15
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004468:	230f      	movs	r3, #15
 800446a:	18fb      	adds	r3, r7, r3
 800446c:	781b      	ldrb	r3, [r3, #0]
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b005      	add	sp, #20
 8004474:	bd90      	pop	{r4, r7, pc}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	20000018 	.word	0x20000018
 800447c:	20000010 	.word	0x20000010
 8004480:	20000014 	.word	0x20000014

08004484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <HAL_IncTick+0x1c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	001a      	movs	r2, r3
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_IncTick+0x20>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	18d2      	adds	r2, r2, r3
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_IncTick+0x20>)
 8004496:	601a      	str	r2, [r3, #0]
}
 8004498:	46c0      	nop			; (mov r8, r8)
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	20000018 	.word	0x20000018
 80044a4:	20000b18 	.word	0x20000b18

080044a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  return uwTick;
 80044ac:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <HAL_GetTick+0x10>)
 80044ae:	681b      	ldr	r3, [r3, #0]
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	20000b18 	.word	0x20000b18

080044bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7ff fff0 	bl	80044a8 <HAL_GetTick>
 80044c8:	0003      	movs	r3, r0
 80044ca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	d005      	beq.n	80044e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_Delay+0x44>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	001a      	movs	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044e2:	46c0      	nop			; (mov r8, r8)
 80044e4:	f7ff ffe0 	bl	80044a8 <HAL_GetTick>
 80044e8:	0002      	movs	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d8f7      	bhi.n	80044e4 <HAL_Delay+0x28>
  {
  }
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b004      	add	sp, #16
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	20000018 	.word	0x20000018

08004504 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <HAL_SuspendTick+0x18>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_SuspendTick+0x18>)
 800450e:	2102      	movs	r1, #2
 8004510:	438a      	bics	r2, r1
 8004512:	601a      	str	r2, [r3, #0]
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	e000e010 	.word	0xe000e010

08004520 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_ResumeTick+0x18>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b03      	ldr	r3, [pc, #12]	; (8004538 <HAL_ResumeTick+0x18>)
 800452a:	2102      	movs	r1, #2
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
}
 8004530:	46c0      	nop			; (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	46c0      	nop			; (mov r8, r8)
 8004538:	e000e010 	.word	0xe000e010

0800453c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a06      	ldr	r2, [pc, #24]	; (8004564 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	4b04      	ldr	r3, [pc, #16]	; (8004560 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	430a      	orrs	r2, r1
 8004554:	601a      	str	r2, [r3, #0]
}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	46bd      	mov	sp, r7
 800455a:	b002      	add	sp, #8
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	40010000 	.word	0x40010000
 8004564:	fffff9ff 	.word	0xfffff9ff

08004568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	0002      	movs	r2, r0
 8004570:	1dfb      	adds	r3, r7, #7
 8004572:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004574:	1dfb      	adds	r3, r7, #7
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b7f      	cmp	r3, #127	; 0x7f
 800457a:	d809      	bhi.n	8004590 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800457c:	1dfb      	adds	r3, r7, #7
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	001a      	movs	r2, r3
 8004582:	231f      	movs	r3, #31
 8004584:	401a      	ands	r2, r3
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <__NVIC_EnableIRQ+0x30>)
 8004588:	2101      	movs	r1, #1
 800458a:	4091      	lsls	r1, r2
 800458c:	000a      	movs	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}
 8004598:	e000e100 	.word	0xe000e100

0800459c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	0002      	movs	r2, r0
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	1dfb      	adds	r3, r7, #7
 80045a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045aa:	1dfb      	adds	r3, r7, #7
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	2b7f      	cmp	r3, #127	; 0x7f
 80045b0:	d828      	bhi.n	8004604 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045b2:	4a2f      	ldr	r2, [pc, #188]	; (8004670 <__NVIC_SetPriority+0xd4>)
 80045b4:	1dfb      	adds	r3, r7, #7
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	33c0      	adds	r3, #192	; 0xc0
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	589b      	ldr	r3, [r3, r2]
 80045c2:	1dfa      	adds	r2, r7, #7
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	0011      	movs	r1, r2
 80045c8:	2203      	movs	r2, #3
 80045ca:	400a      	ands	r2, r1
 80045cc:	00d2      	lsls	r2, r2, #3
 80045ce:	21ff      	movs	r1, #255	; 0xff
 80045d0:	4091      	lsls	r1, r2
 80045d2:	000a      	movs	r2, r1
 80045d4:	43d2      	mvns	r2, r2
 80045d6:	401a      	ands	r2, r3
 80045d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	019b      	lsls	r3, r3, #6
 80045de:	22ff      	movs	r2, #255	; 0xff
 80045e0:	401a      	ands	r2, r3
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	0018      	movs	r0, r3
 80045e8:	2303      	movs	r3, #3
 80045ea:	4003      	ands	r3, r0
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045f0:	481f      	ldr	r0, [pc, #124]	; (8004670 <__NVIC_SetPriority+0xd4>)
 80045f2:	1dfb      	adds	r3, r7, #7
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b25b      	sxtb	r3, r3
 80045f8:	089b      	lsrs	r3, r3, #2
 80045fa:	430a      	orrs	r2, r1
 80045fc:	33c0      	adds	r3, #192	; 0xc0
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004602:	e031      	b.n	8004668 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <__NVIC_SetPriority+0xd8>)
 8004606:	1dfb      	adds	r3, r7, #7
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	0019      	movs	r1, r3
 800460c:	230f      	movs	r3, #15
 800460e:	400b      	ands	r3, r1
 8004610:	3b08      	subs	r3, #8
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	3306      	adds	r3, #6
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	3304      	adds	r3, #4
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1dfa      	adds	r2, r7, #7
 8004620:	7812      	ldrb	r2, [r2, #0]
 8004622:	0011      	movs	r1, r2
 8004624:	2203      	movs	r2, #3
 8004626:	400a      	ands	r2, r1
 8004628:	00d2      	lsls	r2, r2, #3
 800462a:	21ff      	movs	r1, #255	; 0xff
 800462c:	4091      	lsls	r1, r2
 800462e:	000a      	movs	r2, r1
 8004630:	43d2      	mvns	r2, r2
 8004632:	401a      	ands	r2, r3
 8004634:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	019b      	lsls	r3, r3, #6
 800463a:	22ff      	movs	r2, #255	; 0xff
 800463c:	401a      	ands	r2, r3
 800463e:	1dfb      	adds	r3, r7, #7
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	0018      	movs	r0, r3
 8004644:	2303      	movs	r3, #3
 8004646:	4003      	ands	r3, r0
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800464c:	4809      	ldr	r0, [pc, #36]	; (8004674 <__NVIC_SetPriority+0xd8>)
 800464e:	1dfb      	adds	r3, r7, #7
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	001c      	movs	r4, r3
 8004654:	230f      	movs	r3, #15
 8004656:	4023      	ands	r3, r4
 8004658:	3b08      	subs	r3, #8
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	430a      	orrs	r2, r1
 800465e:	3306      	adds	r3, #6
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	18c3      	adds	r3, r0, r3
 8004664:	3304      	adds	r3, #4
 8004666:	601a      	str	r2, [r3, #0]
}
 8004668:	46c0      	nop			; (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b003      	add	sp, #12
 800466e:	bd90      	pop	{r4, r7, pc}
 8004670:	e000e100 	.word	0xe000e100
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800467c:	f3bf 8f4f 	dsb	sy
}
 8004680:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004682:	4b04      	ldr	r3, [pc, #16]	; (8004694 <__NVIC_SystemReset+0x1c>)
 8004684:	4a04      	ldr	r2, [pc, #16]	; (8004698 <__NVIC_SystemReset+0x20>)
 8004686:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004688:	f3bf 8f4f 	dsb	sy
}
 800468c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	e7fd      	b.n	800468e <__NVIC_SystemReset+0x16>
 8004692:	46c0      	nop			; (mov r8, r8)
 8004694:	e000ed00 	.word	0xe000ed00
 8004698:	05fa0004 	.word	0x05fa0004

0800469c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	045b      	lsls	r3, r3, #17
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d301      	bcc.n	80046b4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046b0:	2301      	movs	r3, #1
 80046b2:	e010      	b.n	80046d6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <SysTick_Config+0x44>)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	3a01      	subs	r2, #1
 80046ba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046bc:	2301      	movs	r3, #1
 80046be:	425b      	negs	r3, r3
 80046c0:	2103      	movs	r1, #3
 80046c2:	0018      	movs	r0, r3
 80046c4:	f7ff ff6a 	bl	800459c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <SysTick_Config+0x44>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ce:	4b04      	ldr	r3, [pc, #16]	; (80046e0 <SysTick_Config+0x44>)
 80046d0:	2207      	movs	r2, #7
 80046d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	e000e010 	.word	0xe000e010

080046e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	210f      	movs	r1, #15
 80046f0:	187b      	adds	r3, r7, r1
 80046f2:	1c02      	adds	r2, r0, #0
 80046f4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b25b      	sxtb	r3, r3
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff ff4b 	bl	800459c <__NVIC_SetPriority>
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b004      	add	sp, #16
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	0002      	movs	r2, r0
 8004716:	1dfb      	adds	r3, r7, #7
 8004718:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800471a:	1dfb      	adds	r3, r7, #7
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b25b      	sxtb	r3, r3
 8004720:	0018      	movs	r0, r3
 8004722:	f7ff ff21 	bl	8004568 <__NVIC_EnableIRQ>
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b002      	add	sp, #8
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004732:	f7ff ffa1 	bl	8004678 <__NVIC_SystemReset>

08004736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0018      	movs	r0, r3
 8004742:	f7ff ffab 	bl	800469c <SysTick_Config>
 8004746:	0003      	movs	r3, r0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b002      	add	sp, #8
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800475e:	e14d      	b.n	80049fc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2101      	movs	r1, #1
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4091      	lsls	r1, r2
 800476a:	000a      	movs	r2, r1
 800476c:	4013      	ands	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d100      	bne.n	8004778 <HAL_GPIO_Init+0x28>
 8004776:	e13e      	b.n	80049f6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2203      	movs	r2, #3
 800477e:	4013      	ands	r3, r2
 8004780:	2b01      	cmp	r3, #1
 8004782:	d005      	beq.n	8004790 <HAL_GPIO_Init+0x40>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2203      	movs	r2, #3
 800478a:	4013      	ands	r3, r2
 800478c:	2b02      	cmp	r3, #2
 800478e:	d130      	bne.n	80047f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	409a      	lsls	r2, r3
 800479e:	0013      	movs	r3, r2
 80047a0:	43da      	mvns	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	0013      	movs	r3, r2
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c6:	2201      	movs	r2, #1
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	409a      	lsls	r2, r3
 80047cc:	0013      	movs	r3, r2
 80047ce:	43da      	mvns	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	091b      	lsrs	r3, r3, #4
 80047dc:	2201      	movs	r2, #1
 80047de:	401a      	ands	r2, r3
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	409a      	lsls	r2, r3
 80047e4:	0013      	movs	r3, r2
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2203      	movs	r2, #3
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d017      	beq.n	800482e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	2203      	movs	r2, #3
 800480a:	409a      	lsls	r2, r3
 800480c:	0013      	movs	r3, r2
 800480e:	43da      	mvns	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4013      	ands	r3, r2
 8004814:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689a      	ldr	r2, [r3, #8]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	409a      	lsls	r2, r3
 8004820:	0013      	movs	r3, r2
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2203      	movs	r2, #3
 8004834:	4013      	ands	r3, r2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d123      	bne.n	8004882 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	08da      	lsrs	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3208      	adds	r2, #8
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	58d3      	ldr	r3, [r2, r3]
 8004846:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2207      	movs	r2, #7
 800484c:	4013      	ands	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	220f      	movs	r2, #15
 8004852:	409a      	lsls	r2, r3
 8004854:	0013      	movs	r3, r2
 8004856:	43da      	mvns	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2107      	movs	r1, #7
 8004866:	400b      	ands	r3, r1
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	409a      	lsls	r2, r3
 800486c:	0013      	movs	r3, r2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	08da      	lsrs	r2, r3, #3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3208      	adds	r2, #8
 800487c:	0092      	lsls	r2, r2, #2
 800487e:	6939      	ldr	r1, [r7, #16]
 8004880:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	2203      	movs	r2, #3
 800488e:	409a      	lsls	r2, r3
 8004890:	0013      	movs	r3, r2
 8004892:	43da      	mvns	r2, r3
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4013      	ands	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2203      	movs	r2, #3
 80048a0:	401a      	ands	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	0013      	movs	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	23c0      	movs	r3, #192	; 0xc0
 80048bc:	029b      	lsls	r3, r3, #10
 80048be:	4013      	ands	r3, r2
 80048c0:	d100      	bne.n	80048c4 <HAL_GPIO_Init+0x174>
 80048c2:	e098      	b.n	80049f6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80048c4:	4a53      	ldr	r2, [pc, #332]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	3318      	adds	r3, #24
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	589b      	ldr	r3, [r3, r2]
 80048d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2203      	movs	r2, #3
 80048d6:	4013      	ands	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	220f      	movs	r2, #15
 80048dc:	409a      	lsls	r2, r3
 80048de:	0013      	movs	r3, r2
 80048e0:	43da      	mvns	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4013      	ands	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	23a0      	movs	r3, #160	; 0xa0
 80048ec:	05db      	lsls	r3, r3, #23
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d019      	beq.n	8004926 <HAL_GPIO_Init+0x1d6>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a48      	ldr	r2, [pc, #288]	; (8004a18 <HAL_GPIO_Init+0x2c8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_GPIO_Init+0x1d2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <HAL_GPIO_Init+0x2cc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00d      	beq.n	800491e <HAL_GPIO_Init+0x1ce>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a46      	ldr	r2, [pc, #280]	; (8004a20 <HAL_GPIO_Init+0x2d0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <HAL_GPIO_Init+0x1ca>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a45      	ldr	r2, [pc, #276]	; (8004a24 <HAL_GPIO_Init+0x2d4>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_GPIO_Init+0x1c6>
 8004912:	2304      	movs	r3, #4
 8004914:	e008      	b.n	8004928 <HAL_GPIO_Init+0x1d8>
 8004916:	2305      	movs	r3, #5
 8004918:	e006      	b.n	8004928 <HAL_GPIO_Init+0x1d8>
 800491a:	2303      	movs	r3, #3
 800491c:	e004      	b.n	8004928 <HAL_GPIO_Init+0x1d8>
 800491e:	2302      	movs	r3, #2
 8004920:	e002      	b.n	8004928 <HAL_GPIO_Init+0x1d8>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_GPIO_Init+0x1d8>
 8004926:	2300      	movs	r3, #0
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	2103      	movs	r1, #3
 800492c:	400a      	ands	r2, r1
 800492e:	00d2      	lsls	r2, r2, #3
 8004930:	4093      	lsls	r3, r2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004938:	4936      	ldr	r1, [pc, #216]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	3318      	adds	r3, #24
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004946:	4b33      	ldr	r3, [pc, #204]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	43da      	mvns	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4013      	ands	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	035b      	lsls	r3, r3, #13
 800495e:	4013      	ands	r3, r2
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004970:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	43da      	mvns	r2, r3
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	039b      	lsls	r3, r3, #14
 8004988:	4013      	ands	r3, r2
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 800499c:	2384      	movs	r3, #132	; 0x84
 800499e:	58d3      	ldr	r3, [r2, r3]
 80049a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	43da      	mvns	r2, r3
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4013      	ands	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	029b      	lsls	r3, r3, #10
 80049b4:	4013      	ands	r3, r2
 80049b6:	d003      	beq.n	80049c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049c0:	4914      	ldr	r1, [pc, #80]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 80049c2:	2284      	movs	r2, #132	; 0x84
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80049c8:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	58d3      	ldr	r3, [r2, r3]
 80049ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	43da      	mvns	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4013      	ands	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	025b      	lsls	r3, r3, #9
 80049e2:	4013      	ands	r3, r2
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049ee:	4909      	ldr	r1, [pc, #36]	; (8004a14 <HAL_GPIO_Init+0x2c4>)
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	3301      	adds	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	40da      	lsrs	r2, r3
 8004a04:	1e13      	subs	r3, r2, #0
 8004a06:	d000      	beq.n	8004a0a <HAL_GPIO_Init+0x2ba>
 8004a08:	e6aa      	b.n	8004760 <HAL_GPIO_Init+0x10>
  }
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46c0      	nop			; (mov r8, r8)
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b006      	add	sp, #24
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021800 	.word	0x40021800
 8004a18:	50000400 	.word	0x50000400
 8004a1c:	50000800 	.word	0x50000800
 8004a20:	50000c00 	.word	0x50000c00
 8004a24:	50001000 	.word	0x50001000

08004a28 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004a36:	e0ba      	b.n	8004bae <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a38:	2201      	movs	r2, #1
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d100      	bne.n	8004a4c <HAL_GPIO_DeInit+0x24>
 8004a4a:	e0ad      	b.n	8004ba8 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8004a4c:	4a5d      	ldr	r2, [pc, #372]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3318      	adds	r3, #24
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	589b      	ldr	r3, [r3, r2]
 8004a58:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	4013      	ands	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	220f      	movs	r2, #15
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	23a0      	movs	r3, #160	; 0xa0
 8004a70:	05db      	lsls	r3, r3, #23
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d019      	beq.n	8004aaa <HAL_GPIO_DeInit+0x82>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a53      	ldr	r2, [pc, #332]	; (8004bc8 <HAL_GPIO_DeInit+0x1a0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <HAL_GPIO_DeInit+0x7e>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_GPIO_DeInit+0x1a4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00d      	beq.n	8004aa2 <HAL_GPIO_DeInit+0x7a>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a51      	ldr	r2, [pc, #324]	; (8004bd0 <HAL_GPIO_DeInit+0x1a8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <HAL_GPIO_DeInit+0x76>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a50      	ldr	r2, [pc, #320]	; (8004bd4 <HAL_GPIO_DeInit+0x1ac>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d101      	bne.n	8004a9a <HAL_GPIO_DeInit+0x72>
 8004a96:	2304      	movs	r3, #4
 8004a98:	e008      	b.n	8004aac <HAL_GPIO_DeInit+0x84>
 8004a9a:	2305      	movs	r3, #5
 8004a9c:	e006      	b.n	8004aac <HAL_GPIO_DeInit+0x84>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e004      	b.n	8004aac <HAL_GPIO_DeInit+0x84>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e002      	b.n	8004aac <HAL_GPIO_DeInit+0x84>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_GPIO_DeInit+0x84>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	2103      	movs	r1, #3
 8004ab0:	400a      	ands	r2, r1
 8004ab2:	00d2      	lsls	r2, r2, #3
 8004ab4:	4093      	lsls	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d136      	bne.n	8004b2a <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004abc:	4a41      	ldr	r2, [pc, #260]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	58d3      	ldr	r3, [r2, r3]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	43d2      	mvns	r2, r2
 8004ac6:	493f      	ldr	r1, [pc, #252]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004ace:	4a3d      	ldr	r2, [pc, #244]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004ad0:	2384      	movs	r3, #132	; 0x84
 8004ad2:	58d3      	ldr	r3, [r2, r3]
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	43d2      	mvns	r2, r2
 8004ad8:	493a      	ldr	r1, [pc, #232]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	2284      	movs	r2, #132	; 0x84
 8004ade:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004ae0:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004aee:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	43d9      	mvns	r1, r3
 8004af6:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2203      	movs	r2, #3
 8004b00:	4013      	ands	r3, r2
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	220f      	movs	r2, #15
 8004b06:	409a      	lsls	r2, r3
 8004b08:	0013      	movs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	089b      	lsrs	r3, r3, #2
 8004b12:	3318      	adds	r3, #24
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	589a      	ldr	r2, [r3, r2]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	43d9      	mvns	r1, r3
 8004b1c:	4829      	ldr	r0, [pc, #164]	; (8004bc4 <HAL_GPIO_DeInit+0x19c>)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	400a      	ands	r2, r1
 8004b24:	3318      	adds	r3, #24
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2103      	movs	r1, #3
 8004b34:	4099      	lsls	r1, r3
 8004b36:	000b      	movs	r3, r1
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	08da      	lsrs	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3208      	adds	r2, #8
 8004b46:	0092      	lsls	r2, r2, #2
 8004b48:	58d3      	ldr	r3, [r2, r3]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	2107      	movs	r1, #7
 8004b4e:	400a      	ands	r2, r1
 8004b50:	0092      	lsls	r2, r2, #2
 8004b52:	210f      	movs	r1, #15
 8004b54:	4091      	lsls	r1, r2
 8004b56:	000a      	movs	r2, r1
 8004b58:	43d1      	mvns	r1, r2
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	08d2      	lsrs	r2, r2, #3
 8004b5e:	4019      	ands	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3208      	adds	r2, #8
 8004b64:	0092      	lsls	r2, r2, #2
 8004b66:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	0052      	lsls	r2, r2, #1
 8004b70:	2103      	movs	r1, #3
 8004b72:	4091      	lsls	r1, r2
 8004b74:	000a      	movs	r2, r1
 8004b76:	43d2      	mvns	r2, r2
 8004b78:	401a      	ands	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2101      	movs	r1, #1
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4091      	lsls	r1, r2
 8004b88:	000a      	movs	r2, r1
 8004b8a:	43d2      	mvns	r2, r2
 8004b8c:	401a      	ands	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	0052      	lsls	r2, r2, #1
 8004b9a:	2103      	movs	r1, #3
 8004b9c:	4091      	lsls	r1, r2
 8004b9e:	000a      	movs	r2, r1
 8004ba0:	43d2      	mvns	r2, r2
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	40da      	lsrs	r2, r3
 8004bb4:	1e13      	subs	r3, r2, #0
 8004bb6:	d000      	beq.n	8004bba <HAL_GPIO_DeInit+0x192>
 8004bb8:	e73e      	b.n	8004a38 <HAL_GPIO_DeInit+0x10>
  }
}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	46c0      	nop			; (mov r8, r8)
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b006      	add	sp, #24
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021800 	.word	0x40021800
 8004bc8:	50000400 	.word	0x50000400
 8004bcc:	50000800 	.word	0x50000800
 8004bd0:	50000c00 	.word	0x50000c00
 8004bd4:	50001000 	.word	0x50001000

08004bd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	000a      	movs	r2, r1
 8004be2:	1cbb      	adds	r3, r7, #2
 8004be4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	1cba      	adds	r2, r7, #2
 8004bec:	8812      	ldrh	r2, [r2, #0]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004bf2:	230f      	movs	r3, #15
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e003      	b.n	8004c04 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bfc:	230f      	movs	r3, #15
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004c04:	230f      	movs	r3, #15
 8004c06:	18fb      	adds	r3, r7, r3
 8004c08:	781b      	ldrb	r3, [r3, #0]
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	0008      	movs	r0, r1
 8004c1c:	0011      	movs	r1, r2
 8004c1e:	1cbb      	adds	r3, r7, #2
 8004c20:	1c02      	adds	r2, r0, #0
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	1c7b      	adds	r3, r7, #1
 8004c26:	1c0a      	adds	r2, r1, #0
 8004c28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c2a:	1c7b      	adds	r3, r7, #1
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d004      	beq.n	8004c3c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c32:	1cbb      	adds	r3, r7, #2
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c3a:	e003      	b.n	8004c44 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c3c:	1cbb      	adds	r3, r7, #2
 8004c3e:	881a      	ldrh	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	0002      	movs	r2, r0
 8004c54:	1dbb      	adds	r3, r7, #6
 8004c56:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004c58:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	1dba      	adds	r2, r7, #6
 8004c5e:	8812      	ldrh	r2, [r2, #0]
 8004c60:	4013      	ands	r3, r2
 8004c62:	d008      	beq.n	8004c76 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c66:	1dba      	adds	r2, r7, #6
 8004c68:	8812      	ldrh	r2, [r2, #0]
 8004c6a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004c6c:	1dbb      	adds	r3, r7, #6
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7fe fff7 	bl	8003c64 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004c76:	4b09      	ldr	r3, [pc, #36]	; (8004c9c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	1dba      	adds	r2, r7, #6
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d008      	beq.n	8004c94 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004c82:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c84:	1dba      	adds	r2, r7, #6
 8004c86:	8812      	ldrh	r2, [r2, #0]
 8004c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004c8a:	1dbb      	adds	r3, r7, #6
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 f806 	bl	8004ca0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004c94:	46c0      	nop			; (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40021800 	.word	0x40021800

08004ca0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	0002      	movs	r2, r0
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	0049      	lsls	r1, r1, #1
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40007000 	.word	0x40007000

08004cd0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	000a      	movs	r2, r1
 8004cda:	1cfb      	adds	r3, r7, #3
 8004cdc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8004ce4:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <HAL_PWR_EnterSTOPMode+0x68>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2207      	movs	r2, #7
 8004cea:	4393      	bics	r3, r2
 8004cec:	001a      	movs	r2, r3
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	e005      	b.n	8004d04 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <HAL_PWR_EnterSTOPMode+0x68>)
 8004cfe:	2107      	movs	r1, #7
 8004d00:	438a      	bics	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d04:	4b0d      	ldr	r3, [pc, #52]	; (8004d3c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d0a:	2104      	movs	r1, #4
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004d10:	1cfb      	adds	r3, r7, #3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d18:	bf30      	wfi
 8004d1a:	e002      	b.n	8004d22 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d1c:	bf40      	sev
    __WFE();
 8004d1e:	bf20      	wfe
    __WFE();
 8004d20:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d22:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_PWR_EnterSTOPMode+0x6c>)
 8004d28:	2104      	movs	r1, #4
 8004d2a:	438a      	bics	r2, r1
 8004d2c:	611a      	str	r2, [r3, #16]
}
 8004d2e:	46c0      	nop			; (mov r8, r8)
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b002      	add	sp, #8
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	40007000 	.word	0x40007000
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <HAL_PWR_EnterSTANDBYMode>:
  *         APC bit is set through HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @note   Sram content can be kept setting RRS through HAL_PWREx_EnableSRAMRetention()
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STANDBY);
 8004d44:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2207      	movs	r2, #7
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004d50:	2103      	movs	r1, #3
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8004d62:	bf30      	wfi
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004d7c:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a19      	ldr	r2, [pc, #100]	; (8004de8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d11f      	bne.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004d98:	4b14      	ldr	r3, [pc, #80]	; (8004dec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4912      	ldr	r1, [pc, #72]	; (8004df0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004da6:	0018      	movs	r0, r3
 8004da8:	f7fb f9c8 	bl	800013c <__udivsi3>
 8004dac:	0003      	movs	r3, r0
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004db2:	e008      	b.n	8004dc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e001      	b.n	8004dc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e009      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	00db      	lsls	r3, r3, #3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	2380      	movs	r3, #128	; 0x80
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d0ed      	beq.n	8004db4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	0018      	movs	r0, r3
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	40007000 	.word	0x40007000
 8004de8:	fffff9ff 	.word	0xfffff9ff
 8004dec:	20000010 	.word	0x20000010
 8004df0:	000f4240 	.word	0x000f4240

08004df4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004df8:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	23e0      	movs	r3, #224	; 0xe0
 8004dfe:	01db      	lsls	r3, r3, #7
 8004e00:	4013      	ands	r3, r2
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40021000 	.word	0x40021000

08004e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d102      	bne.n	8004e20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f000 fb50 	bl	80054c0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2201      	movs	r2, #1
 8004e26:	4013      	ands	r3, r2
 8004e28:	d100      	bne.n	8004e2c <HAL_RCC_OscConfig+0x20>
 8004e2a:	e07c      	b.n	8004f26 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e2c:	4bc3      	ldr	r3, [pc, #780]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2238      	movs	r2, #56	; 0x38
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e36:	4bc1      	ldr	r3, [pc, #772]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d102      	bne.n	8004e4c <HAL_RCC_OscConfig+0x40>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d002      	beq.n	8004e52 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d10b      	bne.n	8004e6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e52:	4bba      	ldr	r3, [pc, #744]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	2380      	movs	r3, #128	; 0x80
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d062      	beq.n	8004f24 <HAL_RCC_OscConfig+0x118>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d15e      	bne.n	8004f24 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e32a      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	025b      	lsls	r3, r3, #9
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_OscConfig+0x7a>
 8004e76:	4bb1      	ldr	r3, [pc, #708]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	4bb0      	ldr	r3, [pc, #704]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e7c:	2180      	movs	r1, #128	; 0x80
 8004e7e:	0249      	lsls	r1, r1, #9
 8004e80:	430a      	orrs	r2, r1
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e020      	b.n	8004ec8 <HAL_RCC_OscConfig+0xbc>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	23a0      	movs	r3, #160	; 0xa0
 8004e8c:	02db      	lsls	r3, r3, #11
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d10e      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xa4>
 8004e92:	4baa      	ldr	r3, [pc, #680]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4ba9      	ldr	r3, [pc, #676]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	02c9      	lsls	r1, r1, #11
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	4ba6      	ldr	r3, [pc, #664]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4ba5      	ldr	r3, [pc, #660]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	0249      	lsls	r1, r1, #9
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e00b      	b.n	8004ec8 <HAL_RCC_OscConfig+0xbc>
 8004eb0:	4ba2      	ldr	r3, [pc, #648]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4ba1      	ldr	r3, [pc, #644]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004eb6:	49a2      	ldr	r1, [pc, #648]	; (8005140 <HAL_RCC_OscConfig+0x334>)
 8004eb8:	400a      	ands	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	4b9f      	ldr	r3, [pc, #636]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4b9e      	ldr	r3, [pc, #632]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004ec2:	49a0      	ldr	r1, [pc, #640]	; (8005144 <HAL_RCC_OscConfig+0x338>)
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d014      	beq.n	8004efa <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed0:	f7ff faea 	bl	80044a8 <HAL_GetTick>
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eda:	f7ff fae5 	bl	80044a8 <HAL_GetTick>
 8004ede:	0002      	movs	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b64      	cmp	r3, #100	; 0x64
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e2e9      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eec:	4b93      	ldr	r3, [pc, #588]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	029b      	lsls	r3, r3, #10
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0xce>
 8004ef8:	e015      	b.n	8004f26 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7ff fad5 	bl	80044a8 <HAL_GetTick>
 8004efe:	0003      	movs	r3, r0
 8004f00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f04:	f7ff fad0 	bl	80044a8 <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e2d4      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f16:	4b89      	ldr	r3, [pc, #548]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0xf8>
 8004f22:	e000      	b.n	8004f26 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d100      	bne.n	8004f32 <HAL_RCC_OscConfig+0x126>
 8004f30:	e099      	b.n	8005066 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f32:	4b82      	ldr	r3, [pc, #520]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2238      	movs	r2, #56	; 0x38
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f3c:	4b7f      	ldr	r3, [pc, #508]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	2203      	movs	r2, #3
 8004f42:	4013      	ands	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d102      	bne.n	8004f52 <HAL_RCC_OscConfig+0x146>
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d002      	beq.n	8004f58 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d135      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f58:	4b78      	ldr	r3, [pc, #480]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4013      	ands	r3, r2
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_OscConfig+0x164>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e2a7      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b72      	ldr	r3, [pc, #456]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a74      	ldr	r2, [pc, #464]	; (8005148 <HAL_RCC_OscConfig+0x33c>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	021a      	lsls	r2, r3, #8
 8004f80:	4b6e      	ldr	r3, [pc, #440]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d112      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004f8c:	4b6b      	ldr	r3, [pc, #428]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a6e      	ldr	r2, [pc, #440]	; (800514c <HAL_RCC_OscConfig+0x340>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	0019      	movs	r1, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691a      	ldr	r2, [r3, #16]
 8004f9a:	4b68      	ldr	r3, [pc, #416]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fa0:	4b66      	ldr	r3, [pc, #408]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0adb      	lsrs	r3, r3, #11
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	4013      	ands	r3, r2
 8004faa:	4a69      	ldr	r2, [pc, #420]	; (8005150 <HAL_RCC_OscConfig+0x344>)
 8004fac:	40da      	lsrs	r2, r3
 8004fae:	4b69      	ldr	r3, [pc, #420]	; (8005154 <HAL_RCC_OscConfig+0x348>)
 8004fb0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fb2:	4b69      	ldr	r3, [pc, #420]	; (8005158 <HAL_RCC_OscConfig+0x34c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	0018      	movs	r0, r3
 8004fb8:	f7ff fa1a 	bl	80043f0 <HAL_InitTick>
 8004fbc:	1e03      	subs	r3, r0, #0
 8004fbe:	d051      	beq.n	8005064 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e27d      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d030      	beq.n	800502e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fcc:	4b5b      	ldr	r3, [pc, #364]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a5e      	ldr	r2, [pc, #376]	; (800514c <HAL_RCC_OscConfig+0x340>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	0019      	movs	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	4b58      	ldr	r3, [pc, #352]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b56      	ldr	r3, [pc, #344]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b55      	ldr	r3, [pc, #340]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8004fe6:	2180      	movs	r1, #128	; 0x80
 8004fe8:	0049      	lsls	r1, r1, #1
 8004fea:	430a      	orrs	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7ff fa5b 	bl	80044a8 <HAL_GetTick>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff8:	f7ff fa56 	bl	80044a8 <HAL_GetTick>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e25a      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800500a:	4b4c      	ldr	r3, [pc, #304]	; (800513c <HAL_RCC_OscConfig+0x330>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4013      	ands	r3, r2
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b49      	ldr	r3, [pc, #292]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4a4b      	ldr	r2, [pc, #300]	; (8005148 <HAL_RCC_OscConfig+0x33c>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	4b45      	ldr	r3, [pc, #276]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	e01b      	b.n	8005066 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800502e:	4b43      	ldr	r3, [pc, #268]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b42      	ldr	r3, [pc, #264]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005034:	4949      	ldr	r1, [pc, #292]	; (800515c <HAL_RCC_OscConfig+0x350>)
 8005036:	400a      	ands	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7ff fa35 	bl	80044a8 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005044:	f7ff fa30 	bl	80044a8 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e234      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4013      	ands	r3, r2
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x238>
 8005062:	e000      	b.n	8005066 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005064:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2208      	movs	r2, #8
 800506c:	4013      	ands	r3, r2
 800506e:	d047      	beq.n	8005100 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005070:	4b32      	ldr	r3, [pc, #200]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2238      	movs	r2, #56	; 0x38
 8005076:	4013      	ands	r3, r2
 8005078:	2b18      	cmp	r3, #24
 800507a:	d10a      	bne.n	8005092 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800507c:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCC_OscConfig+0x330>)
 800507e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005080:	2202      	movs	r2, #2
 8005082:	4013      	ands	r3, r2
 8005084:	d03c      	beq.n	8005100 <HAL_RCC_OscConfig+0x2f4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d138      	bne.n	8005100 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e216      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d019      	beq.n	80050ce <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800509a:	4b28      	ldr	r3, [pc, #160]	; (800513c <HAL_RCC_OscConfig+0x330>)
 800509c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800509e:	4b27      	ldr	r3, [pc, #156]	; (800513c <HAL_RCC_OscConfig+0x330>)
 80050a0:	2101      	movs	r1, #1
 80050a2:	430a      	orrs	r2, r1
 80050a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a6:	f7ff f9ff 	bl	80044a8 <HAL_GetTick>
 80050aa:	0003      	movs	r3, r0
 80050ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b0:	f7ff f9fa 	bl	80044a8 <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e1fe      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <HAL_RCC_OscConfig+0x330>)
 80050c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c6:	2202      	movs	r2, #2
 80050c8:	4013      	ands	r3, r2
 80050ca:	d0f1      	beq.n	80050b0 <HAL_RCC_OscConfig+0x2a4>
 80050cc:	e018      	b.n	8005100 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050ce:	4b1b      	ldr	r3, [pc, #108]	; (800513c <HAL_RCC_OscConfig+0x330>)
 80050d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80050d2:	4b1a      	ldr	r3, [pc, #104]	; (800513c <HAL_RCC_OscConfig+0x330>)
 80050d4:	2101      	movs	r1, #1
 80050d6:	438a      	bics	r2, r1
 80050d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050da:	f7ff f9e5 	bl	80044a8 <HAL_GetTick>
 80050de:	0003      	movs	r3, r0
 80050e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050e2:	e008      	b.n	80050f6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050e4:	f7ff f9e0 	bl	80044a8 <HAL_GetTick>
 80050e8:	0002      	movs	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e1e4      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <HAL_RCC_OscConfig+0x330>)
 80050f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fa:	2202      	movs	r2, #2
 80050fc:	4013      	ands	r3, r2
 80050fe:	d1f1      	bne.n	80050e4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2204      	movs	r2, #4
 8005106:	4013      	ands	r3, r2
 8005108:	d100      	bne.n	800510c <HAL_RCC_OscConfig+0x300>
 800510a:	e0c7      	b.n	800529c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510c:	231f      	movs	r3, #31
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2238      	movs	r2, #56	; 0x38
 800511a:	4013      	ands	r3, r2
 800511c:	2b20      	cmp	r3, #32
 800511e:	d11f      	bne.n	8005160 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <HAL_RCC_OscConfig+0x330>)
 8005122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005124:	2202      	movs	r2, #2
 8005126:	4013      	ands	r3, r2
 8005128:	d100      	bne.n	800512c <HAL_RCC_OscConfig+0x320>
 800512a:	e0b7      	b.n	800529c <HAL_RCC_OscConfig+0x490>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d000      	beq.n	8005136 <HAL_RCC_OscConfig+0x32a>
 8005134:	e0b2      	b.n	800529c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e1c2      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	40021000 	.word	0x40021000
 8005140:	fffeffff 	.word	0xfffeffff
 8005144:	fffbffff 	.word	0xfffbffff
 8005148:	ffff80ff 	.word	0xffff80ff
 800514c:	ffffc7ff 	.word	0xffffc7ff
 8005150:	00f42400 	.word	0x00f42400
 8005154:	20000010 	.word	0x20000010
 8005158:	20000014 	.word	0x20000014
 800515c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005160:	4bb5      	ldr	r3, [pc, #724]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	055b      	lsls	r3, r3, #21
 8005168:	4013      	ands	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_RCC_OscConfig+0x364>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x366>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d011      	beq.n	800519a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005176:	4bb0      	ldr	r3, [pc, #704]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005178:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800517a:	4baf      	ldr	r3, [pc, #700]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800517c:	2180      	movs	r1, #128	; 0x80
 800517e:	0549      	lsls	r1, r1, #21
 8005180:	430a      	orrs	r2, r1
 8005182:	63da      	str	r2, [r3, #60]	; 0x3c
 8005184:	4bac      	ldr	r3, [pc, #688]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	055b      	lsls	r3, r3, #21
 800518c:	4013      	ands	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005192:	231f      	movs	r3, #31
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	2201      	movs	r2, #1
 8005198:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800519a:	4ba8      	ldr	r3, [pc, #672]	; (800543c <HAL_RCC_OscConfig+0x630>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4013      	ands	r3, r2
 80051a4:	d11a      	bne.n	80051dc <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051a6:	4ba5      	ldr	r3, [pc, #660]	; (800543c <HAL_RCC_OscConfig+0x630>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4ba4      	ldr	r3, [pc, #656]	; (800543c <HAL_RCC_OscConfig+0x630>)
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	0049      	lsls	r1, r1, #1
 80051b0:	430a      	orrs	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051b4:	f7ff f978 	bl	80044a8 <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051be:	f7ff f973 	bl	80044a8 <HAL_GetTick>
 80051c2:	0002      	movs	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e177      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d0:	4b9a      	ldr	r3, [pc, #616]	; (800543c <HAL_RCC_OscConfig+0x630>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_OscConfig+0x3e6>
 80051e4:	4b94      	ldr	r3, [pc, #592]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80051e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051e8:	4b93      	ldr	r3, [pc, #588]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80051ea:	2101      	movs	r1, #1
 80051ec:	430a      	orrs	r2, r1
 80051ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80051f0:	e01c      	b.n	800522c <HAL_RCC_OscConfig+0x420>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x408>
 80051fa:	4b8f      	ldr	r3, [pc, #572]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80051fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051fe:	4b8e      	ldr	r3, [pc, #568]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005200:	2104      	movs	r1, #4
 8005202:	430a      	orrs	r2, r1
 8005204:	65da      	str	r2, [r3, #92]	; 0x5c
 8005206:	4b8c      	ldr	r3, [pc, #560]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005208:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800520a:	4b8b      	ldr	r3, [pc, #556]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800520c:	2101      	movs	r1, #1
 800520e:	430a      	orrs	r2, r1
 8005210:	65da      	str	r2, [r3, #92]	; 0x5c
 8005212:	e00b      	b.n	800522c <HAL_RCC_OscConfig+0x420>
 8005214:	4b88      	ldr	r3, [pc, #544]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005218:	4b87      	ldr	r3, [pc, #540]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800521a:	2101      	movs	r1, #1
 800521c:	438a      	bics	r2, r1
 800521e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005220:	4b85      	ldr	r3, [pc, #532]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005222:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005224:	4b84      	ldr	r3, [pc, #528]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005226:	2104      	movs	r1, #4
 8005228:	438a      	bics	r2, r1
 800522a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d014      	beq.n	800525e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7ff f938 	bl	80044a8 <HAL_GetTick>
 8005238:	0003      	movs	r3, r0
 800523a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800523c:	e009      	b.n	8005252 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800523e:	f7ff f933 	bl	80044a8 <HAL_GetTick>
 8005242:	0002      	movs	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	4a7d      	ldr	r2, [pc, #500]	; (8005440 <HAL_RCC_OscConfig+0x634>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e136      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005252:	4b79      	ldr	r3, [pc, #484]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005256:	2202      	movs	r2, #2
 8005258:	4013      	ands	r3, r2
 800525a:	d0f0      	beq.n	800523e <HAL_RCC_OscConfig+0x432>
 800525c:	e013      	b.n	8005286 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525e:	f7ff f923 	bl	80044a8 <HAL_GetTick>
 8005262:	0003      	movs	r3, r0
 8005264:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005266:	e009      	b.n	800527c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7ff f91e 	bl	80044a8 <HAL_GetTick>
 800526c:	0002      	movs	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	4a73      	ldr	r2, [pc, #460]	; (8005440 <HAL_RCC_OscConfig+0x634>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e121      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800527c:	4b6e      	ldr	r3, [pc, #440]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005286:	231f      	movs	r3, #31
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b69      	ldr	r3, [pc, #420]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005294:	4b68      	ldr	r3, [pc, #416]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005296:	496b      	ldr	r1, [pc, #428]	; (8005444 <HAL_RCC_OscConfig+0x638>)
 8005298:	400a      	ands	r2, r1
 800529a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2220      	movs	r2, #32
 80052a2:	4013      	ands	r3, r2
 80052a4:	d039      	beq.n	800531a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d01b      	beq.n	80052e6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052ae:	4b62      	ldr	r3, [pc, #392]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b61      	ldr	r3, [pc, #388]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80052b4:	2180      	movs	r1, #128	; 0x80
 80052b6:	03c9      	lsls	r1, r1, #15
 80052b8:	430a      	orrs	r2, r1
 80052ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052bc:	f7ff f8f4 	bl	80044a8 <HAL_GetTick>
 80052c0:	0003      	movs	r3, r0
 80052c2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052c6:	f7ff f8ef 	bl	80044a8 <HAL_GetTick>
 80052ca:	0002      	movs	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e0f3      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80052d8:	4b57      	ldr	r3, [pc, #348]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	4013      	ands	r3, r2
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x4ba>
 80052e4:	e019      	b.n	800531a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052e6:	4b54      	ldr	r3, [pc, #336]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b53      	ldr	r3, [pc, #332]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80052ec:	4956      	ldr	r1, [pc, #344]	; (8005448 <HAL_RCC_OscConfig+0x63c>)
 80052ee:	400a      	ands	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7ff f8d9 	bl	80044a8 <HAL_GetTick>
 80052f6:	0003      	movs	r3, r0
 80052f8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052fc:	f7ff f8d4 	bl	80044a8 <HAL_GetTick>
 8005300:	0002      	movs	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0d8      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800530e:	4b4a      	ldr	r3, [pc, #296]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	2380      	movs	r3, #128	; 0x80
 8005314:	041b      	lsls	r3, r3, #16
 8005316:	4013      	ands	r3, r2
 8005318:	d1f0      	bne.n	80052fc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d100      	bne.n	8005324 <HAL_RCC_OscConfig+0x518>
 8005322:	e0cc      	b.n	80054be <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005324:	4b44      	ldr	r3, [pc, #272]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2238      	movs	r2, #56	; 0x38
 800532a:	4013      	ands	r3, r2
 800532c:	2b10      	cmp	r3, #16
 800532e:	d100      	bne.n	8005332 <HAL_RCC_OscConfig+0x526>
 8005330:	e07b      	b.n	800542a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d156      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533a:	4b3f      	ldr	r3, [pc, #252]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	4b3e      	ldr	r3, [pc, #248]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005340:	4942      	ldr	r1, [pc, #264]	; (800544c <HAL_RCC_OscConfig+0x640>)
 8005342:	400a      	ands	r2, r1
 8005344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005346:	f7ff f8af 	bl	80044a8 <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005350:	f7ff f8aa 	bl	80044a8 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0ae      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005362:	4b35      	ldr	r3, [pc, #212]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	049b      	lsls	r3, r3, #18
 800536a:	4013      	ands	r3, r2
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800536e:	4b32      	ldr	r3, [pc, #200]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	4a37      	ldr	r2, [pc, #220]	; (8005450 <HAL_RCC_OscConfig+0x644>)
 8005374:	4013      	ands	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	431a      	orrs	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	431a      	orrs	r2, r3
 800539c:	4b26      	ldr	r3, [pc, #152]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800539e:	430a      	orrs	r2, r1
 80053a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a2:	4b25      	ldr	r3, [pc, #148]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	4b24      	ldr	r3, [pc, #144]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053a8:	2180      	movs	r1, #128	; 0x80
 80053aa:	0449      	lsls	r1, r1, #17
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	4b20      	ldr	r3, [pc, #128]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053b6:	2180      	movs	r1, #128	; 0x80
 80053b8:	0549      	lsls	r1, r1, #21
 80053ba:	430a      	orrs	r2, r1
 80053bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7ff f873 	bl	80044a8 <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c8:	f7ff f86e 	bl	80044a8 <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e072      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	4b17      	ldr	r3, [pc, #92]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	2380      	movs	r3, #128	; 0x80
 80053e0:	049b      	lsls	r3, r3, #18
 80053e2:	4013      	ands	r3, r2
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x5bc>
 80053e6:	e06a      	b.n	80054be <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	4b12      	ldr	r3, [pc, #72]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 80053ee:	4917      	ldr	r1, [pc, #92]	; (800544c <HAL_RCC_OscConfig+0x640>)
 80053f0:	400a      	ands	r2, r1
 80053f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7ff f858 	bl	80044a8 <HAL_GetTick>
 80053f8:	0003      	movs	r3, r0
 80053fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fe:	f7ff f853 	bl	80044a8 <HAL_GetTick>
 8005402:	0002      	movs	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e057      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005410:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2380      	movs	r3, #128	; 0x80
 8005416:	049b      	lsls	r3, r3, #18
 8005418:	4013      	ands	r3, r2
 800541a:	d1f0      	bne.n	80053fe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_OscConfig+0x62c>)
 8005422:	490c      	ldr	r1, [pc, #48]	; (8005454 <HAL_RCC_OscConfig+0x648>)
 8005424:	400a      	ands	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e049      	b.n	80054be <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d112      	bne.n	8005458 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e044      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	40021000 	.word	0x40021000
 800543c:	40007000 	.word	0x40007000
 8005440:	00001388 	.word	0x00001388
 8005444:	efffffff 	.word	0xefffffff
 8005448:	ffbfffff 	.word	0xffbfffff
 800544c:	feffffff 	.word	0xfeffffff
 8005450:	11c1808c 	.word	0x11c1808c
 8005454:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005458:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <HAL_RCC_OscConfig+0x6bc>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2203      	movs	r2, #3
 8005462:	401a      	ands	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	429a      	cmp	r2, r3
 800546a:	d126      	bne.n	80054ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2270      	movs	r2, #112	; 0x70
 8005470:	401a      	ands	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005476:	429a      	cmp	r2, r3
 8005478:	d11f      	bne.n	80054ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	23fe      	movs	r3, #254	; 0xfe
 800547e:	01db      	lsls	r3, r3, #7
 8005480:	401a      	ands	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d116      	bne.n	80054ba <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	23f8      	movs	r3, #248	; 0xf8
 8005490:	039b      	lsls	r3, r3, #14
 8005492:	401a      	ands	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d10e      	bne.n	80054ba <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	23e0      	movs	r3, #224	; 0xe0
 80054a0:	051b      	lsls	r3, r3, #20
 80054a2:	401a      	ands	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d106      	bne.n	80054ba <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	0f5b      	lsrs	r3, r3, #29
 80054b0:	075a      	lsls	r2, r3, #29
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d001      	beq.n	80054be <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b008      	add	sp, #32
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40021000 	.word	0x40021000

080054cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e0e9      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e0:	4b76      	ldr	r3, [pc, #472]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2207      	movs	r2, #7
 80054e6:	4013      	ands	r3, r2
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d91e      	bls.n	800552c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ee:	4b73      	ldr	r3, [pc, #460]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2207      	movs	r2, #7
 80054f4:	4393      	bics	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	4b70      	ldr	r3, [pc, #448]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005500:	f7fe ffd2 	bl	80044a8 <HAL_GetTick>
 8005504:	0003      	movs	r3, r0
 8005506:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005508:	e009      	b.n	800551e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550a:	f7fe ffcd 	bl	80044a8 <HAL_GetTick>
 800550e:	0002      	movs	r2, r0
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	4a6a      	ldr	r2, [pc, #424]	; (80056c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d901      	bls.n	800551e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e0ca      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800551e:	4b67      	ldr	r3, [pc, #412]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2207      	movs	r2, #7
 8005524:	4013      	ands	r3, r2
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d1ee      	bne.n	800550a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2202      	movs	r2, #2
 8005532:	4013      	ands	r3, r2
 8005534:	d015      	beq.n	8005562 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2204      	movs	r2, #4
 800553c:	4013      	ands	r3, r2
 800553e:	d006      	beq.n	800554e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005540:	4b60      	ldr	r3, [pc, #384]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	4b5f      	ldr	r3, [pc, #380]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005546:	21e0      	movs	r1, #224	; 0xe0
 8005548:	01c9      	lsls	r1, r1, #7
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554e:	4b5d      	ldr	r3, [pc, #372]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4a5d      	ldr	r2, [pc, #372]	; (80056c8 <HAL_RCC_ClockConfig+0x1fc>)
 8005554:	4013      	ands	r3, r2
 8005556:	0019      	movs	r1, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 800555e:	430a      	orrs	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	4013      	ands	r3, r2
 800556a:	d057      	beq.n	800561c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d107      	bne.n	8005584 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	4013      	ands	r3, r2
 800557e:	d12b      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e097      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d107      	bne.n	800559c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	049b      	lsls	r3, r3, #18
 8005594:	4013      	ands	r3, r2
 8005596:	d11f      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e08b      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a4:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4013      	ands	r3, r2
 80055ae:	d113      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e07f      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d106      	bne.n	80055ca <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055bc:	4b41      	ldr	r3, [pc, #260]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 80055be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d108      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e074      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ca:	4b3e      	ldr	r3, [pc, #248]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 80055cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ce:	2202      	movs	r2, #2
 80055d0:	4013      	ands	r3, r2
 80055d2:	d101      	bne.n	80055d8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e06d      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055d8:	4b3a      	ldr	r3, [pc, #232]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2207      	movs	r2, #7
 80055de:	4393      	bics	r3, r2
 80055e0:	0019      	movs	r1, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4b37      	ldr	r3, [pc, #220]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ec:	f7fe ff5c 	bl	80044a8 <HAL_GetTick>
 80055f0:	0003      	movs	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f4:	e009      	b.n	800560a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f6:	f7fe ff57 	bl	80044a8 <HAL_GetTick>
 80055fa:	0002      	movs	r2, r0
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e054      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	4b2e      	ldr	r3, [pc, #184]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	2238      	movs	r2, #56	; 0x38
 8005610:	401a      	ands	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	429a      	cmp	r2, r3
 800561a:	d1ec      	bne.n	80055f6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2207      	movs	r2, #7
 8005622:	4013      	ands	r3, r2
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d21e      	bcs.n	8005668 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2207      	movs	r2, #7
 8005630:	4393      	bics	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800563c:	f7fe ff34 	bl	80044a8 <HAL_GetTick>
 8005640:	0003      	movs	r3, r0
 8005642:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005644:	e009      	b.n	800565a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005646:	f7fe ff2f 	bl	80044a8 <HAL_GetTick>
 800564a:	0002      	movs	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_RCC_ClockConfig+0x1f4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e02c      	b.n	80056b4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800565a:	4b18      	ldr	r3, [pc, #96]	; (80056bc <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2207      	movs	r2, #7
 8005660:	4013      	ands	r3, r2
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d1ee      	bne.n	8005646 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2204      	movs	r2, #4
 800566e:	4013      	ands	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4a15      	ldr	r2, [pc, #84]	; (80056cc <HAL_RCC_ClockConfig+0x200>)
 8005678:	4013      	ands	r3, r2
 800567a:	0019      	movs	r1, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	4b10      	ldr	r3, [pc, #64]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005686:	f000 f829 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800568a:	0001      	movs	r1, r0
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <HAL_RCC_ClockConfig+0x1f8>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	0a1b      	lsrs	r3, r3, #8
 8005692:	220f      	movs	r2, #15
 8005694:	401a      	ands	r2, r3
 8005696:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <HAL_RCC_ClockConfig+0x204>)
 8005698:	0092      	lsls	r2, r2, #2
 800569a:	58d3      	ldr	r3, [r2, r3]
 800569c:	221f      	movs	r2, #31
 800569e:	4013      	ands	r3, r2
 80056a0:	000a      	movs	r2, r1
 80056a2:	40da      	lsrs	r2, r3
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <HAL_RCC_ClockConfig+0x208>)
 80056a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <HAL_RCC_ClockConfig+0x20c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	0018      	movs	r0, r3
 80056ae:	f7fe fe9f 	bl	80043f0 <HAL_InitTick>
 80056b2:	0003      	movs	r3, r0
}
 80056b4:	0018      	movs	r0, r3
 80056b6:	46bd      	mov	sp, r7
 80056b8:	b004      	add	sp, #16
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40022000 	.word	0x40022000
 80056c0:	00001388 	.word	0x00001388
 80056c4:	40021000 	.word	0x40021000
 80056c8:	fffff0ff 	.word	0xfffff0ff
 80056cc:	ffff8fff 	.word	0xffff8fff
 80056d0:	08015a04 	.word	0x08015a04
 80056d4:	20000010 	.word	0x20000010
 80056d8:	20000014 	.word	0x20000014

080056dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056e2:	4b3c      	ldr	r3, [pc, #240]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2238      	movs	r2, #56	; 0x38
 80056e8:	4013      	ands	r3, r2
 80056ea:	d10f      	bne.n	800570c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80056ec:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	0adb      	lsrs	r3, r3, #11
 80056f2:	2207      	movs	r2, #7
 80056f4:	4013      	ands	r3, r2
 80056f6:	2201      	movs	r2, #1
 80056f8:	409a      	lsls	r2, r3
 80056fa:	0013      	movs	r3, r2
 80056fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	4835      	ldr	r0, [pc, #212]	; (80057d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005702:	f7fa fd1b 	bl	800013c <__udivsi3>
 8005706:	0003      	movs	r3, r0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	e05d      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800570c:	4b31      	ldr	r3, [pc, #196]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2238      	movs	r2, #56	; 0x38
 8005712:	4013      	ands	r3, r2
 8005714:	2b08      	cmp	r3, #8
 8005716:	d102      	bne.n	800571e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005718:	4b30      	ldr	r3, [pc, #192]	; (80057dc <HAL_RCC_GetSysClockFreq+0x100>)
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	e054      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800571e:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2238      	movs	r2, #56	; 0x38
 8005724:	4013      	ands	r3, r2
 8005726:	2b10      	cmp	r3, #16
 8005728:	d138      	bne.n	800579c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800572a:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	2203      	movs	r2, #3
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005734:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	091b      	lsrs	r3, r3, #4
 800573a:	2207      	movs	r2, #7
 800573c:	4013      	ands	r3, r2
 800573e:	3301      	adds	r3, #1
 8005740:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d10d      	bne.n	8005764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	4824      	ldr	r0, [pc, #144]	; (80057dc <HAL_RCC_GetSysClockFreq+0x100>)
 800574c:	f7fa fcf6 	bl	800013c <__udivsi3>
 8005750:	0003      	movs	r3, r0
 8005752:	0019      	movs	r1, r3
 8005754:	4b1f      	ldr	r3, [pc, #124]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	227f      	movs	r2, #127	; 0x7f
 800575c:	4013      	ands	r3, r2
 800575e:	434b      	muls	r3, r1
 8005760:	617b      	str	r3, [r7, #20]
        break;
 8005762:	e00d      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	481c      	ldr	r0, [pc, #112]	; (80057d8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005768:	f7fa fce8 	bl	800013c <__udivsi3>
 800576c:	0003      	movs	r3, r0
 800576e:	0019      	movs	r1, r3
 8005770:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	0a1b      	lsrs	r3, r3, #8
 8005776:	227f      	movs	r2, #127	; 0x7f
 8005778:	4013      	ands	r3, r2
 800577a:	434b      	muls	r3, r1
 800577c:	617b      	str	r3, [r7, #20]
        break;
 800577e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005780:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	0f5b      	lsrs	r3, r3, #29
 8005786:	2207      	movs	r2, #7
 8005788:	4013      	ands	r3, r2
 800578a:	3301      	adds	r3, #1
 800578c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	6978      	ldr	r0, [r7, #20]
 8005792:	f7fa fcd3 	bl	800013c <__udivsi3>
 8005796:	0003      	movs	r3, r0
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e015      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	2238      	movs	r2, #56	; 0x38
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d103      	bne.n	80057b0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057a8:	2380      	movs	r3, #128	; 0x80
 80057aa:	021b      	lsls	r3, r3, #8
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	e00b      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2238      	movs	r2, #56	; 0x38
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b18      	cmp	r3, #24
 80057ba:	d103      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80057bc:	23fa      	movs	r3, #250	; 0xfa
 80057be:	01db      	lsls	r3, r3, #7
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e001      	b.n	80057c8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057c8:	693b      	ldr	r3, [r7, #16]
}
 80057ca:	0018      	movs	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	b006      	add	sp, #24
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	40021000 	.word	0x40021000
 80057d8:	00f42400 	.word	0x00f42400
 80057dc:	007a1200 	.word	0x007a1200

080057e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	20000010 	.word	0x20000010

080057f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057f4:	b5b0      	push	{r4, r5, r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80057f8:	f7ff fff2 	bl	80057e0 <HAL_RCC_GetHCLKFreq>
 80057fc:	0004      	movs	r4, r0
 80057fe:	f7ff faf9 	bl	8004df4 <LL_RCC_GetAPB1Prescaler>
 8005802:	0003      	movs	r3, r0
 8005804:	0b1a      	lsrs	r2, r3, #12
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005808:	0092      	lsls	r2, r2, #2
 800580a:	58d3      	ldr	r3, [r2, r3]
 800580c:	221f      	movs	r2, #31
 800580e:	4013      	ands	r3, r2
 8005810:	40dc      	lsrs	r4, r3
 8005812:	0023      	movs	r3, r4
}
 8005814:	0018      	movs	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	bdb0      	pop	{r4, r5, r7, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	08015a44 	.word	0x08015a44

08005820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005828:	2313      	movs	r3, #19
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005830:	2312      	movs	r3, #18
 8005832:	18fb      	adds	r3, r7, r3
 8005834:	2200      	movs	r2, #0
 8005836:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	029b      	lsls	r3, r3, #10
 8005840:	4013      	ands	r3, r2
 8005842:	d100      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005844:	e0ad      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005846:	2011      	movs	r0, #17
 8005848:	183b      	adds	r3, r7, r0
 800584a:	2200      	movs	r2, #0
 800584c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	055b      	lsls	r3, r3, #21
 8005856:	4013      	ands	r3, r2
 8005858:	d110      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800585a:	4b44      	ldr	r3, [pc, #272]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800585c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800585e:	4b43      	ldr	r3, [pc, #268]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005860:	2180      	movs	r1, #128	; 0x80
 8005862:	0549      	lsls	r1, r1, #21
 8005864:	430a      	orrs	r2, r1
 8005866:	63da      	str	r2, [r3, #60]	; 0x3c
 8005868:	4b40      	ldr	r3, [pc, #256]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800586a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	055b      	lsls	r3, r3, #21
 8005870:	4013      	ands	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]
 8005874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005876:	183b      	adds	r3, r7, r0
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587c:	4b3c      	ldr	r3, [pc, #240]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	0049      	lsls	r1, r1, #1
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800588a:	f7fe fe0d 	bl	80044a8 <HAL_GetTick>
 800588e:	0003      	movs	r3, r0
 8005890:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005892:	e00b      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005894:	f7fe fe08 	bl	80044a8 <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d904      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80058a2:	2313      	movs	r3, #19
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	2203      	movs	r2, #3
 80058a8:	701a      	strb	r2, [r3, #0]
        break;
 80058aa:	e005      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058ac:	4b30      	ldr	r3, [pc, #192]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	; 0x80
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4013      	ands	r3, r2
 80058b6:	d0ed      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80058b8:	2313      	movs	r3, #19
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d15e      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058c2:	4b2a      	ldr	r3, [pc, #168]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058c6:	23c0      	movs	r3, #192	; 0xc0
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4013      	ands	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d019      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d014      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058de:	4b23      	ldr	r3, [pc, #140]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	4a24      	ldr	r2, [pc, #144]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058e8:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058ec:	4b1f      	ldr	r3, [pc, #124]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	0249      	lsls	r1, r1, #9
 80058f2:	430a      	orrs	r2, r1
 80058f4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80058fc:	491e      	ldr	r1, [pc, #120]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80058fe:	400a      	ands	r2, r1
 8005900:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2201      	movs	r2, #1
 800590c:	4013      	ands	r3, r2
 800590e:	d016      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005910:	f7fe fdca 	bl	80044a8 <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005918:	e00c      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591a:	f7fe fdc5 	bl	80044a8 <HAL_GetTick>
 800591e:	0002      	movs	r2, r0
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	4a15      	ldr	r2, [pc, #84]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d904      	bls.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800592a:	2313      	movs	r3, #19
 800592c:	18fb      	adds	r3, r7, r3
 800592e:	2203      	movs	r2, #3
 8005930:	701a      	strb	r2, [r3, #0]
            break;
 8005932:	e004      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	2202      	movs	r2, #2
 800593a:	4013      	ands	r3, r2
 800593c:	d0ed      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800593e:	2313      	movs	r3, #19
 8005940:	18fb      	adds	r3, r7, r3
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005948:	4b08      	ldr	r3, [pc, #32]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800594a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800594e:	4013      	ands	r3, r2
 8005950:	0019      	movs	r1, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005958:	430a      	orrs	r2, r1
 800595a:	65da      	str	r2, [r3, #92]	; 0x5c
 800595c:	e016      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800595e:	2312      	movs	r3, #18
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	2213      	movs	r2, #19
 8005964:	18ba      	adds	r2, r7, r2
 8005966:	7812      	ldrb	r2, [r2, #0]
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e00f      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800596c:	40021000 	.word	0x40021000
 8005970:	40007000 	.word	0x40007000
 8005974:	fffffcff 	.word	0xfffffcff
 8005978:	fffeffff 	.word	0xfffeffff
 800597c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	2312      	movs	r3, #18
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	2213      	movs	r2, #19
 8005986:	18ba      	adds	r2, r7, r2
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800598c:	2311      	movs	r3, #17
 800598e:	18fb      	adds	r3, r7, r3
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d105      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005996:	4bb6      	ldr	r3, [pc, #728]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800599a:	4bb5      	ldr	r3, [pc, #724]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800599c:	49b5      	ldr	r1, [pc, #724]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800599e:	400a      	ands	r2, r1
 80059a0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	4013      	ands	r3, r2
 80059aa:	d009      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059ac:	4bb0      	ldr	r3, [pc, #704]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b0:	2203      	movs	r2, #3
 80059b2:	4393      	bics	r3, r2
 80059b4:	0019      	movs	r1, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	4bad      	ldr	r3, [pc, #692]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059bc:	430a      	orrs	r2, r1
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2202      	movs	r2, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	d009      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059ca:	4ba9      	ldr	r3, [pc, #676]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	220c      	movs	r2, #12
 80059d0:	4393      	bics	r3, r2
 80059d2:	0019      	movs	r1, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	4ba5      	ldr	r3, [pc, #660]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059da:	430a      	orrs	r2, r1
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2204      	movs	r2, #4
 80059e4:	4013      	ands	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059e8:	4ba1      	ldr	r3, [pc, #644]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	2230      	movs	r2, #48	; 0x30
 80059ee:	4393      	bics	r3, r2
 80059f0:	0019      	movs	r1, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	4b9e      	ldr	r3, [pc, #632]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059f8:	430a      	orrs	r2, r1
 80059fa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2210      	movs	r2, #16
 8005a02:	4013      	ands	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a06:	4b9a      	ldr	r3, [pc, #616]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	4a9b      	ldr	r2, [pc, #620]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	0019      	movs	r1, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	4b96      	ldr	r3, [pc, #600]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a16:	430a      	orrs	r2, r1
 8005a18:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	015b      	lsls	r3, r3, #5
 8005a22:	4013      	ands	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005a26:	4b92      	ldr	r3, [pc, #584]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	4a94      	ldr	r2, [pc, #592]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	4b8e      	ldr	r3, [pc, #568]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a36:	430a      	orrs	r2, r1
 8005a38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	2380      	movs	r3, #128	; 0x80
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4013      	ands	r3, r2
 8005a44:	d009      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a46:	4b8a      	ldr	r3, [pc, #552]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	4a8d      	ldr	r2, [pc, #564]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a54:	4b86      	ldr	r3, [pc, #536]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a56:	430a      	orrs	r2, r1
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	2380      	movs	r3, #128	; 0x80
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4013      	ands	r3, r2
 8005a64:	d009      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a66:	4b82      	ldr	r3, [pc, #520]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6a:	4a86      	ldr	r2, [pc, #536]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	0019      	movs	r1, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4b7e      	ldr	r3, [pc, #504]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a76:	430a      	orrs	r2, r1
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	4013      	ands	r3, r2
 8005a82:	d009      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a84:	4b7a      	ldr	r3, [pc, #488]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	4a7f      	ldr	r2, [pc, #508]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	0019      	movs	r1, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	4b77      	ldr	r3, [pc, #476]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a94:	430a      	orrs	r2, r1
 8005a96:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2240      	movs	r2, #64	; 0x40
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aa2:	4b73      	ldr	r3, [pc, #460]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	4a79      	ldr	r2, [pc, #484]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	4b6f      	ldr	r3, [pc, #444]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	01db      	lsls	r3, r3, #7
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d015      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ac2:	4b6b      	ldr	r3, [pc, #428]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	0899      	lsrs	r1, r3, #2
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ace:	4b68      	ldr	r3, [pc, #416]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ad8:	2380      	movs	r3, #128	; 0x80
 8005ada:	05db      	lsls	r3, r3, #23
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d106      	bne.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ae0:	4b63      	ldr	r3, [pc, #396]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	4b62      	ldr	r3, [pc, #392]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	0249      	lsls	r1, r1, #9
 8005aea:	430a      	orrs	r2, r1
 8005aec:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	4013      	ands	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005afa:	4b5d      	ldr	r3, [pc, #372]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afe:	2240      	movs	r2, #64	; 0x40
 8005b00:	4393      	bics	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b08:	4b59      	ldr	r3, [pc, #356]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	039b      	lsls	r3, r3, #14
 8005b16:	4013      	ands	r3, r2
 8005b18:	d016      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b1a:	4b55      	ldr	r3, [pc, #340]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1e:	4a5c      	ldr	r2, [pc, #368]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	0019      	movs	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b28:	4b51      	ldr	r3, [pc, #324]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	03db      	lsls	r3, r3, #15
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d106      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b3a:	4b4d      	ldr	r3, [pc, #308]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	4b4c      	ldr	r3, [pc, #304]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b40:	2180      	movs	r1, #128	; 0x80
 8005b42:	0449      	lsls	r1, r1, #17
 8005b44:	430a      	orrs	r2, r1
 8005b46:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	2380      	movs	r3, #128	; 0x80
 8005b4e:	03db      	lsls	r3, r3, #15
 8005b50:	4013      	ands	r3, r2
 8005b52:	d016      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005b54:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b58:	4a4e      	ldr	r2, [pc, #312]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b62:	4b43      	ldr	r3, [pc, #268]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b64:	430a      	orrs	r2, r1
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	045b      	lsls	r3, r3, #17
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d106      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005b74:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	4b3d      	ldr	r3, [pc, #244]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	0449      	lsls	r1, r1, #17
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d014      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005b8e:	4b38      	ldr	r3, [pc, #224]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b92:	2203      	movs	r2, #3
 8005b94:	4393      	bics	r3, r2
 8005b96:	0019      	movs	r1, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1a      	ldr	r2, [r3, #32]
 8005b9c:	4b34      	ldr	r3, [pc, #208]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005baa:	4b31      	ldr	r3, [pc, #196]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	4b30      	ldr	r3, [pc, #192]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	0249      	lsls	r1, r1, #9
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	2380      	movs	r3, #128	; 0x80
 8005bbe:	019b      	lsls	r3, r3, #6
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d014      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005bc4:	4b2a      	ldr	r3, [pc, #168]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc8:	220c      	movs	r2, #12
 8005bca:	4393      	bics	r3, r2
 8005bcc:	0019      	movs	r1, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd2:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d106      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005be0:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	0249      	lsls	r1, r1, #9
 8005bea:	430a      	orrs	r2, r1
 8005bec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	045b      	lsls	r3, r3, #17
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d016      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	0019      	movs	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c08:	4b19      	ldr	r3, [pc, #100]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c12:	2380      	movs	r3, #128	; 0x80
 8005c14:	019b      	lsls	r3, r3, #6
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d106      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c1a:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	4b14      	ldr	r3, [pc, #80]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	0449      	lsls	r1, r1, #17
 8005c24:	430a      	orrs	r2, r1
 8005c26:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	049b      	lsls	r3, r3, #18
 8005c30:	4013      	ands	r3, r2
 8005c32:	d016      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c34:	4b0e      	ldr	r3, [pc, #56]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c38:	4a10      	ldr	r2, [pc, #64]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c42:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c44:	430a      	orrs	r2, r1
 8005c46:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d106      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005c54:	4b06      	ldr	r3, [pc, #24]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c5a:	2180      	movs	r1, #128	; 0x80
 8005c5c:	0449      	lsls	r1, r1, #17
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c62:	2312      	movs	r3, #18
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	781b      	ldrb	r3, [r3, #0]
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b006      	add	sp, #24
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000
 8005c74:	efffffff 	.word	0xefffffff
 8005c78:	fffff3ff 	.word	0xfffff3ff
 8005c7c:	fffffcff 	.word	0xfffffcff
 8005c80:	fff3ffff 	.word	0xfff3ffff
 8005c84:	ffcfffff 	.word	0xffcfffff
 8005c88:	ffffcfff 	.word	0xffffcfff
 8005c8c:	ffff3fff 	.word	0xffff3fff
 8005c90:	ffbfffff 	.word	0xffbfffff
 8005c94:	feffffff 	.word	0xfeffffff

08005c98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c98:	b5b0      	push	{r4, r5, r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ca0:	230f      	movs	r3, #15
 8005ca2:	18fb      	adds	r3, r7, r3
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d100      	bne.n	8005cb0 <HAL_RTC_Init+0x18>
 8005cae:	e08c      	b.n	8005dca <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2229      	movs	r2, #41	; 0x29
 8005cb4:	5c9b      	ldrb	r3, [r3, r2]
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2228      	movs	r2, #40	; 0x28
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2288      	movs	r2, #136	; 0x88
 8005cc8:	0212      	lsls	r2, r2, #8
 8005cca:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f7fe f800 	bl	8003cd4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2229      	movs	r2, #41	; 0x29
 8005cd8:	2102      	movs	r1, #2
 8005cda:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d062      	beq.n	8005db0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	22ca      	movs	r2, #202	; 0xca
 8005cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2253      	movs	r2, #83	; 0x53
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005cfa:	250f      	movs	r5, #15
 8005cfc:	197c      	adds	r4, r7, r5
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 fbf3 	bl	80064ec <RTC_EnterInitMode>
 8005d06:	0003      	movs	r3, r0
 8005d08:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005d0a:	0028      	movs	r0, r5
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d12c      	bne.n	8005d6e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	492e      	ldr	r1, [pc, #184]	; (8005dd8 <HAL_RTC_Init+0x140>)
 8005d20:	400a      	ands	r2, r1
 8005d22:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6999      	ldr	r1, [r3, #24]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6912      	ldr	r2, [r2, #16]
 8005d4a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	041a      	lsls	r2, r3, #16
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005d60:	183c      	adds	r4, r7, r0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 fc03 	bl	8006570 <RTC_ExitInitMode>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005d6e:	230f      	movs	r3, #15
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d116      	bne.n	8005da6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	00d2      	lsls	r2, r2, #3
 8005d84:	08d2      	lsrs	r2, r2, #3
 8005d86:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	22ff      	movs	r2, #255	; 0xff
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24
 8005dae:	e003      	b.n	8005db8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005db0:	230f      	movs	r3, #15
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005db8:	230f      	movs	r3, #15
 8005dba:	18fb      	adds	r3, r7, r3
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2229      	movs	r2, #41	; 0x29
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005dca:	230f      	movs	r3, #15
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	781b      	ldrb	r3, [r3, #0]
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b004      	add	sp, #16
 8005dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd8:	fb8fffbf 	.word	0xfb8fffbf

08005ddc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ddc:	b5b0      	push	{r4, r5, r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2228      	movs	r2, #40	; 0x28
 8005dec:	5c9b      	ldrb	r3, [r3, r2]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_RTC_SetTime+0x1a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e092      	b.n	8005f1c <HAL_RTC_SetTime+0x140>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2228      	movs	r2, #40	; 0x28
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2229      	movs	r2, #41	; 0x29
 8005e02:	2102      	movs	r1, #2
 8005e04:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	22ca      	movs	r2, #202	; 0xca
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2253      	movs	r2, #83	; 0x53
 8005e14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e16:	2513      	movs	r5, #19
 8005e18:	197c      	adds	r4, r7, r5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 fb65 	bl	80064ec <RTC_EnterInitMode>
 8005e22:	0003      	movs	r3, r0
 8005e24:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005e26:	197b      	adds	r3, r7, r5
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d162      	bne.n	8005ef4 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d125      	bne.n	8005e80 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	2240      	movs	r2, #64	; 0x40
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d102      	bne.n	8005e46 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2200      	movs	r2, #0
 8005e44:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f000 fbd4 	bl	80065f8 <RTC_ByteToBcd2>
 8005e50:	0003      	movs	r3, r0
 8005e52:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 fbcd 	bl	80065f8 <RTC_ByteToBcd2>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e62:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	0018      	movs	r0, r3
 8005e6a:	f000 fbc5 	bl	80065f8 <RTC_ByteToBcd2>
 8005e6e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e70:	0022      	movs	r2, r4
 8005e72:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	78db      	ldrb	r3, [r3, #3]
 8005e78:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e017      	b.n	8005eb0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	2240      	movs	r2, #64	; 0x40
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d102      	bne.n	8005e92 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	785b      	ldrb	r3, [r3, #1]
 8005e9c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005e9e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005ea4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	78db      	ldrb	r3, [r3, #3]
 8005eaa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	491b      	ldr	r1, [pc, #108]	; (8005f24 <HAL_RTC_SetTime+0x148>)
 8005eb8:	400a      	ands	r2, r1
 8005eba:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4918      	ldr	r1, [pc, #96]	; (8005f28 <HAL_RTC_SetTime+0x14c>)
 8005ec8:	400a      	ands	r2, r1
 8005eca:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6999      	ldr	r1, [r3, #24]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ee4:	2313      	movs	r3, #19
 8005ee6:	18fc      	adds	r4, r7, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	0018      	movs	r0, r3
 8005eec:	f000 fb40 	bl	8006570 <RTC_ExitInitMode>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	22ff      	movs	r2, #255	; 0xff
 8005efa:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8005efc:	2313      	movs	r3, #19
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2229      	movs	r2, #41	; 0x29
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2228      	movs	r2, #40	; 0x28
 8005f12:	2100      	movs	r1, #0
 8005f14:	5499      	strb	r1, [r3, r2]

  return status;
 8005f16:	2313      	movs	r3, #19
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	781b      	ldrb	r3, [r3, #0]
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	b006      	add	sp, #24
 8005f22:	bdb0      	pop	{r4, r5, r7, pc}
 8005f24:	007f7f7f 	.word	0x007f7f7f
 8005f28:	fffbffff 	.word	0xfffbffff

08005f2c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	045b      	lsls	r3, r3, #17
 8005f4a:	0c5a      	lsrs	r2, r3, #17
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <HAL_RTC_GetTime+0xb4>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	0c1b      	lsrs	r3, r3, #16
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	223f      	movs	r2, #63	; 0x3f
 8005f64:	4013      	ands	r3, r2
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	227f      	movs	r2, #127	; 0x7f
 8005f74:	4013      	ands	r3, r2
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	227f      	movs	r2, #127	; 0x7f
 8005f82:	4013      	ands	r3, r2
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	0d9b      	lsrs	r3, r3, #22
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2201      	movs	r2, #1
 8005f92:	4013      	ands	r3, r2
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11a      	bne.n	8005fd6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 fb4f 	bl	8006648 <RTC_Bcd2ToByte>
 8005faa:	0003      	movs	r3, r0
 8005fac:	001a      	movs	r2, r3
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f000 fb46 	bl	8006648 <RTC_Bcd2ToByte>
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	789b      	ldrb	r3, [r3, #2]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 fb3d 	bl	8006648 <RTC_Bcd2ToByte>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	001a      	movs	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	0018      	movs	r0, r3
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b006      	add	sp, #24
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	007f7f7f 	.word	0x007f7f7f

08005fe4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005fe4:	b5b0      	push	{r4, r5, r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2228      	movs	r2, #40	; 0x28
 8005ff4:	5c9b      	ldrb	r3, [r3, r2]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_RTC_SetDate+0x1a>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e07e      	b.n	80060fc <HAL_RTC_SetDate+0x118>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2228      	movs	r2, #40	; 0x28
 8006002:	2101      	movs	r1, #1
 8006004:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2229      	movs	r2, #41	; 0x29
 800600a:	2102      	movs	r1, #2
 800600c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10e      	bne.n	8006032 <HAL_RTC_SetDate+0x4e>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	001a      	movs	r2, r3
 800601a:	2310      	movs	r3, #16
 800601c:	4013      	ands	r3, r2
 800601e:	d008      	beq.n	8006032 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	785b      	ldrb	r3, [r3, #1]
 8006024:	2210      	movs	r2, #16
 8006026:	4393      	bics	r3, r2
 8006028:	b2db      	uxtb	r3, r3
 800602a:	330a      	adds	r3, #10
 800602c:	b2da      	uxtb	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11c      	bne.n	8006072 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	78db      	ldrb	r3, [r3, #3]
 800603c:	0018      	movs	r0, r3
 800603e:	f000 fadb 	bl	80065f8 <RTC_ByteToBcd2>
 8006042:	0003      	movs	r3, r0
 8006044:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	785b      	ldrb	r3, [r3, #1]
 800604a:	0018      	movs	r0, r3
 800604c:	f000 fad4 	bl	80065f8 <RTC_ByteToBcd2>
 8006050:	0003      	movs	r3, r0
 8006052:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006054:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	789b      	ldrb	r3, [r3, #2]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 facc 	bl	80065f8 <RTC_ByteToBcd2>
 8006060:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006062:	0022      	movs	r2, r4
 8006064:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e00e      	b.n	8006090 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	78db      	ldrb	r3, [r3, #3]
 8006076:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800607e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006084:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ca      	movs	r2, #202	; 0xca
 8006096:	625a      	str	r2, [r3, #36]	; 0x24
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2253      	movs	r2, #83	; 0x53
 800609e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80060a0:	2513      	movs	r5, #19
 80060a2:	197c      	adds	r4, r7, r5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f000 fa20 	bl	80064ec <RTC_EnterInitMode>
 80060ac:	0003      	movs	r3, r0
 80060ae:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80060b0:	0028      	movs	r0, r5
 80060b2:	183b      	adds	r3, r7, r0
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4910      	ldr	r1, [pc, #64]	; (8006104 <HAL_RTC_SetDate+0x120>)
 80060c2:	400a      	ands	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80060c6:	183c      	adds	r4, r7, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	0018      	movs	r0, r3
 80060cc:	f000 fa50 	bl	8006570 <RTC_ExitInitMode>
 80060d0:	0003      	movs	r3, r0
 80060d2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	22ff      	movs	r2, #255	; 0xff
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80060dc:	2313      	movs	r3, #19
 80060de:	18fb      	adds	r3, r7, r3
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2229      	movs	r2, #41	; 0x29
 80060ea:	2101      	movs	r1, #1
 80060ec:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2228      	movs	r2, #40	; 0x28
 80060f2:	2100      	movs	r1, #0
 80060f4:	5499      	strb	r1, [r3, r2]

  return status;
 80060f6:	2313      	movs	r3, #19
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	781b      	ldrb	r3, [r3, #0]
}
 80060fc:	0018      	movs	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	b006      	add	sp, #24
 8006102:	bdb0      	pop	{r4, r5, r7, pc}
 8006104:	00ffff3f 	.word	0x00ffff3f

08006108 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	4a21      	ldr	r2, [pc, #132]	; (80061a0 <HAL_RTC_GetDate+0x98>)
 800611c:	4013      	ands	r3, r2
 800611e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	0c1b      	lsrs	r3, r3, #16
 8006124:	b2da      	uxtb	r2, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b2db      	uxtb	r3, r3
 8006130:	221f      	movs	r2, #31
 8006132:	4013      	ands	r3, r2
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	223f      	movs	r2, #63	; 0x3f
 8006140:	4013      	ands	r3, r2
 8006142:	b2da      	uxtb	r2, r3
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	0b5b      	lsrs	r3, r3, #13
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2207      	movs	r2, #7
 8006150:	4013      	ands	r3, r2
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11a      	bne.n	8006194 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	78db      	ldrb	r3, [r3, #3]
 8006162:	0018      	movs	r0, r3
 8006164:	f000 fa70 	bl	8006648 <RTC_Bcd2ToByte>
 8006168:	0003      	movs	r3, r0
 800616a:	001a      	movs	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	785b      	ldrb	r3, [r3, #1]
 8006174:	0018      	movs	r0, r3
 8006176:	f000 fa67 	bl	8006648 <RTC_Bcd2ToByte>
 800617a:	0003      	movs	r3, r0
 800617c:	001a      	movs	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	789b      	ldrb	r3, [r3, #2]
 8006186:	0018      	movs	r0, r3
 8006188:	f000 fa5e 	bl	8006648 <RTC_Bcd2ToByte>
 800618c:	0003      	movs	r3, r0
 800618e:	001a      	movs	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b006      	add	sp, #24
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	00ffff3f 	.word	0x00ffff3f

080061a4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b089      	sub	sp, #36	; 0x24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2228      	movs	r2, #40	; 0x28
 80061b4:	5c9b      	ldrb	r3, [r3, r2]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_RTC_SetAlarm_IT+0x1a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e127      	b.n	800640e <HAL_RTC_SetAlarm_IT+0x26a>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2228      	movs	r2, #40	; 0x28
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2229      	movs	r2, #41	; 0x29
 80061ca:	2102      	movs	r1, #2
 80061cc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d136      	bne.n	8006242 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	2240      	movs	r2, #64	; 0x40
 80061dc:	4013      	ands	r3, r2
 80061de:	d102      	bne.n	80061e6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2200      	movs	r2, #0
 80061e4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	0018      	movs	r0, r3
 80061ec:	f000 fa04 	bl	80065f8 <RTC_ByteToBcd2>
 80061f0:	0003      	movs	r3, r0
 80061f2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	0018      	movs	r0, r3
 80061fa:	f000 f9fd 	bl	80065f8 <RTC_ByteToBcd2>
 80061fe:	0003      	movs	r3, r0
 8006200:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006202:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	789b      	ldrb	r3, [r3, #2]
 8006208:	0018      	movs	r0, r3
 800620a:	f000 f9f5 	bl	80065f8 <RTC_ByteToBcd2>
 800620e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006210:	0022      	movs	r2, r4
 8006212:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	78db      	ldrb	r3, [r3, #3]
 8006218:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800621a:	431a      	orrs	r2, r3
 800621c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2220      	movs	r2, #32
 8006222:	5c9b      	ldrb	r3, [r3, r2]
 8006224:	0018      	movs	r0, r3
 8006226:	f000 f9e7 	bl	80065f8 <RTC_ByteToBcd2>
 800622a:	0003      	movs	r3, r0
 800622c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800622e:	0022      	movs	r2, r4
 8006230:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006236:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800623c:	4313      	orrs	r3, r2
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	e022      	b.n	8006288 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	2240      	movs	r2, #64	; 0x40
 800624a:	4013      	ands	r3, r2
 800624c:	d102      	bne.n	8006254 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	785b      	ldrb	r3, [r3, #1]
 800625e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006260:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006266:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	78db      	ldrb	r3, [r3, #3]
 800626c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800626e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2120      	movs	r1, #32
 8006274:	5c5b      	ldrb	r3, [r3, r1]
 8006276:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006278:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800627e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006284:	4313      	orrs	r3, r2
 8006286:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	4313      	orrs	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	22ca      	movs	r2, #202	; 0xca
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2253      	movs	r2, #83	; 0x53
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d14c      	bne.n	800634a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4957      	ldr	r1, [pc, #348]	; (8006418 <HAL_RTC_SetAlarm_IT+0x274>)
 80062bc:	400a      	ands	r2, r1
 80062be:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2101      	movs	r1, #1
 80062cc:	430a      	orrs	r2, r1
 80062ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 80062d0:	f7fe f8ea 	bl	80044a8 <HAL_GetTick>
 80062d4:	0003      	movs	r3, r0
 80062d6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80062d8:	e016      	b.n	8006308 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062da:	f7fe f8e5 	bl	80044a8 <HAL_GetTick>
 80062de:	0002      	movs	r2, r0
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	23fa      	movs	r3, #250	; 0xfa
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d90d      	bls.n	8006308 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	22ff      	movs	r2, #255	; 0xff
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2229      	movs	r2, #41	; 0x29
 80062f8:	2103      	movs	r1, #3
 80062fa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2228      	movs	r2, #40	; 0x28
 8006300:	2100      	movs	r1, #0
 8006302:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e082      	b.n	800640e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2201      	movs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	d0e2      	beq.n	80062da <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2180      	movs	r1, #128	; 0x80
 8006330:	0049      	lsls	r1, r1, #1
 8006332:	430a      	orrs	r2, r1
 8006334:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699a      	ldr	r2, [r3, #24]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2180      	movs	r1, #128	; 0x80
 8006342:	0149      	lsls	r1, r1, #5
 8006344:	430a      	orrs	r2, r1
 8006346:	619a      	str	r2, [r3, #24]
 8006348:	e04b      	b.n	80063e2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	699a      	ldr	r2, [r3, #24]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4931      	ldr	r1, [pc, #196]	; (800641c <HAL_RTC_SetAlarm_IT+0x278>)
 8006356:	400a      	ands	r2, r1
 8006358:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2102      	movs	r1, #2
 8006366:	430a      	orrs	r2, r1
 8006368:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800636a:	f7fe f89d 	bl	80044a8 <HAL_GetTick>
 800636e:	0003      	movs	r3, r0
 8006370:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006372:	e016      	b.n	80063a2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006374:	f7fe f898 	bl	80044a8 <HAL_GetTick>
 8006378:	0002      	movs	r2, r0
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	1ad2      	subs	r2, r2, r3
 800637e:	23fa      	movs	r3, #250	; 0xfa
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	429a      	cmp	r2, r3
 8006384:	d90d      	bls.n	80063a2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	22ff      	movs	r2, #255	; 0xff
 800638c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2229      	movs	r2, #41	; 0x29
 8006392:	2103      	movs	r1, #3
 8006394:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2228      	movs	r2, #40	; 0x28
 800639a:	2100      	movs	r1, #0
 800639c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e035      	b.n	800640e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2202      	movs	r2, #2
 80063aa:	4013      	ands	r3, r2
 80063ac:	d0e2      	beq.n	8006374 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2180      	movs	r1, #128	; 0x80
 80063ca:	0089      	lsls	r1, r1, #2
 80063cc:	430a      	orrs	r2, r1
 80063ce:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	0189      	lsls	r1, r1, #6
 80063de:	430a      	orrs	r2, r1
 80063e0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063e2:	4a0f      	ldr	r2, [pc, #60]	; (8006420 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	58d3      	ldr	r3, [r2, r3]
 80063e8:	490d      	ldr	r1, [pc, #52]	; (8006420 <HAL_RTC_SetAlarm_IT+0x27c>)
 80063ea:	2280      	movs	r2, #128	; 0x80
 80063ec:	0312      	lsls	r2, r2, #12
 80063ee:	4313      	orrs	r3, r2
 80063f0:	2280      	movs	r2, #128	; 0x80
 80063f2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	22ff      	movs	r2, #255	; 0xff
 80063fa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2229      	movs	r2, #41	; 0x29
 8006400:	2101      	movs	r1, #1
 8006402:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2228      	movs	r2, #40	; 0x28
 8006408:	2100      	movs	r1, #0
 800640a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	0018      	movs	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	b009      	add	sp, #36	; 0x24
 8006414:	bd90      	pop	{r4, r7, pc}
 8006416:	46c0      	nop			; (mov r8, r8)
 8006418:	fffffeff 	.word	0xfffffeff
 800641c:	fffffdff 	.word	0xfffffdff
 8006420:	40021800 	.word	0x40021800

08006424 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	2380      	movs	r3, #128	; 0x80
 8006434:	015b      	lsls	r3, r3, #5
 8006436:	4013      	ands	r3, r2
 8006438:	d011      	beq.n	800645e <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006440:	2201      	movs	r2, #1
 8006442:	4013      	ands	r3, r2
 8006444:	d00b      	beq.n	800645e <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2101      	movs	r1, #1
 8006452:	430a      	orrs	r2, r1
 8006454:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0018      	movs	r0, r3
 800645a:	f7fd fbf5 	bl	8003c48 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	4013      	ands	r3, r2
 800646a:	d011      	beq.n	8006490 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	2202      	movs	r2, #2
 8006474:	4013      	ands	r3, r2
 8006476:	d00b      	beq.n	8006490 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2102      	movs	r1, #2
 8006484:	430a      	orrs	r2, r1
 8006486:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	0018      	movs	r0, r3
 800648c:	f000 f961 	bl	8006752 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2229      	movs	r2, #41	; 0x29
 8006494:	2101      	movs	r1, #1
 8006496:	5499      	strb	r1, [r3, r2]
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	b002      	add	sp, #8
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a0e      	ldr	r2, [pc, #56]	; (80064e8 <HAL_RTC_WaitForSynchro+0x48>)
 80064ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80064b0:	f7fd fffa 	bl	80044a8 <HAL_GetTick>
 80064b4:	0003      	movs	r3, r0
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80064b8:	e00a      	b.n	80064d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064ba:	f7fd fff5 	bl	80044a8 <HAL_GetTick>
 80064be:	0002      	movs	r2, r0
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	1ad2      	subs	r2, r2, r3
 80064c4:	23fa      	movs	r3, #250	; 0xfa
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d901      	bls.n	80064d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e006      	b.n	80064de <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	4013      	ands	r3, r2
 80064da:	d0ee      	beq.n	80064ba <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b004      	add	sp, #16
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	0001005f 	.word	0x0001005f

080064ec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80064f4:	230f      	movs	r3, #15
 80064f6:	18fb      	adds	r3, r7, r3
 80064f8:	2200      	movs	r2, #0
 80064fa:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2240      	movs	r2, #64	; 0x40
 8006504:	4013      	ands	r3, r2
 8006506:	d12c      	bne.n	8006562 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2180      	movs	r1, #128	; 0x80
 8006514:	430a      	orrs	r2, r1
 8006516:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006518:	f7fd ffc6 	bl	80044a8 <HAL_GetTick>
 800651c:	0003      	movs	r3, r0
 800651e:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006520:	e014      	b.n	800654c <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006522:	f7fd ffc1 	bl	80044a8 <HAL_GetTick>
 8006526:	0002      	movs	r2, r0
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	1ad2      	subs	r2, r2, r3
 800652c:	200f      	movs	r0, #15
 800652e:	183b      	adds	r3, r7, r0
 8006530:	1839      	adds	r1, r7, r0
 8006532:	7809      	ldrb	r1, [r1, #0]
 8006534:	7019      	strb	r1, [r3, #0]
 8006536:	23fa      	movs	r3, #250	; 0xfa
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	429a      	cmp	r2, r3
 800653c:	d906      	bls.n	800654c <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800653e:	183b      	adds	r3, r7, r0
 8006540:	2203      	movs	r2, #3
 8006542:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2229      	movs	r2, #41	; 0x29
 8006548:	2103      	movs	r1, #3
 800654a:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	4013      	ands	r3, r2
 8006556:	d104      	bne.n	8006562 <RTC_EnterInitMode+0x76>
 8006558:	230f      	movs	r3, #15
 800655a:	18fb      	adds	r3, r7, r3
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b03      	cmp	r3, #3
 8006560:	d1df      	bne.n	8006522 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006562:	230f      	movs	r3, #15
 8006564:	18fb      	adds	r3, r7, r3
 8006566:	781b      	ldrb	r3, [r3, #0]
}
 8006568:	0018      	movs	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	b004      	add	sp, #16
 800656e:	bd80      	pop	{r7, pc}

08006570 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006570:	b590      	push	{r4, r7, lr}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006578:	240f      	movs	r4, #15
 800657a:	193b      	adds	r3, r7, r4
 800657c:	2200      	movs	r2, #0
 800657e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006580:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <RTC_ExitInitMode+0x84>)
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <RTC_ExitInitMode+0x84>)
 8006586:	2180      	movs	r1, #128	; 0x80
 8006588:	438a      	bics	r2, r1
 800658a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800658c:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <RTC_ExitInitMode+0x84>)
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2220      	movs	r2, #32
 8006592:	4013      	ands	r3, r2
 8006594:	d10d      	bne.n	80065b2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	0018      	movs	r0, r3
 800659a:	f7ff ff81 	bl	80064a0 <HAL_RTC_WaitForSynchro>
 800659e:	1e03      	subs	r3, r0, #0
 80065a0:	d021      	beq.n	80065e6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2229      	movs	r2, #41	; 0x29
 80065a6:	2103      	movs	r1, #3
 80065a8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80065aa:	193b      	adds	r3, r7, r4
 80065ac:	2203      	movs	r2, #3
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	e019      	b.n	80065e6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065b2:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <RTC_ExitInitMode+0x84>)
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <RTC_ExitInitMode+0x84>)
 80065b8:	2120      	movs	r1, #32
 80065ba:	438a      	bics	r2, r1
 80065bc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7ff ff6d 	bl	80064a0 <HAL_RTC_WaitForSynchro>
 80065c6:	1e03      	subs	r3, r0, #0
 80065c8:	d007      	beq.n	80065da <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2229      	movs	r2, #41	; 0x29
 80065ce:	2103      	movs	r1, #3
 80065d0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80065d2:	230f      	movs	r3, #15
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	2203      	movs	r2, #3
 80065d8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065da:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <RTC_ExitInitMode+0x84>)
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <RTC_ExitInitMode+0x84>)
 80065e0:	2120      	movs	r1, #32
 80065e2:	430a      	orrs	r2, r1
 80065e4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80065e6:	230f      	movs	r3, #15
 80065e8:	18fb      	adds	r3, r7, r3
 80065ea:	781b      	ldrb	r3, [r3, #0]
}
 80065ec:	0018      	movs	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b005      	add	sp, #20
 80065f2:	bd90      	pop	{r4, r7, pc}
 80065f4:	40002800 	.word	0x40002800

080065f8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	0002      	movs	r2, r0
 8006600:	1dfb      	adds	r3, r7, #7
 8006602:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006608:	230b      	movs	r3, #11
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	1dfa      	adds	r2, r7, #7
 800660e:	7812      	ldrb	r2, [r2, #0]
 8006610:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006612:	e008      	b.n	8006626 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3301      	adds	r3, #1
 8006618:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800661a:	220b      	movs	r2, #11
 800661c:	18bb      	adds	r3, r7, r2
 800661e:	18ba      	adds	r2, r7, r2
 8006620:	7812      	ldrb	r2, [r2, #0]
 8006622:	3a0a      	subs	r2, #10
 8006624:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006626:	210b      	movs	r1, #11
 8006628:	187b      	adds	r3, r7, r1
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b09      	cmp	r3, #9
 800662e:	d8f1      	bhi.n	8006614 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	b2da      	uxtb	r2, r3
 8006638:	187b      	adds	r3, r7, r1
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	4313      	orrs	r3, r2
 800663e:	b2db      	uxtb	r3, r3
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b004      	add	sp, #16
 8006646:	bd80      	pop	{r7, pc}

08006648 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	0002      	movs	r2, r0
 8006650:	1dfb      	adds	r3, r7, #7
 8006652:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006654:	1dfb      	adds	r3, r7, #7
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	091b      	lsrs	r3, r3, #4
 800665a:	b2db      	uxtb	r3, r3
 800665c:	001a      	movs	r2, r3
 800665e:	0013      	movs	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	189b      	adds	r3, r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	b2da      	uxtb	r2, r3
 800666c:	1dfb      	adds	r3, r7, #7
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	210f      	movs	r1, #15
 8006672:	400b      	ands	r3, r1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	18d3      	adds	r3, r2, r3
 8006678:	b2db      	uxtb	r3, r3
}
 800667a:	0018      	movs	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	b004      	add	sp, #16
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b082      	sub	sp, #8
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2228      	movs	r2, #40	; 0x28
 800668e:	5c9b      	ldrb	r3, [r3, r2]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006694:	2302      	movs	r3, #2
 8006696:	e024      	b.n	80066e2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2228      	movs	r2, #40	; 0x28
 800669c:	2101      	movs	r1, #1
 800669e:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2229      	movs	r2, #41	; 0x29
 80066a4:	2102      	movs	r1, #2
 80066a6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	22ca      	movs	r2, #202	; 0xca
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2253      	movs	r2, #83	; 0x53
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2120      	movs	r1, #32
 80066c4:	430a      	orrs	r2, r1
 80066c6:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	22ff      	movs	r2, #255	; 0xff
 80066ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2229      	movs	r2, #41	; 0x29
 80066d4:	2101      	movs	r1, #1
 80066d6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2228      	movs	r2, #40	; 0x28
 80066dc:	2100      	movs	r1, #0
 80066de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	0018      	movs	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b002      	add	sp, #8
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_RTCEx_DisableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DisableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2228      	movs	r2, #40	; 0x28
 80066f6:	5c9b      	ldrb	r3, [r3, r2]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_RTCEx_DisableBypassShadow+0x16>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e024      	b.n	800674a <HAL_RTCEx_DisableBypassShadow+0x60>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2228      	movs	r2, #40	; 0x28
 8006704:	2101      	movs	r1, #1
 8006706:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2229      	movs	r2, #41	; 0x29
 800670c:	2102      	movs	r1, #2
 800670e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	22ca      	movs	r2, #202	; 0xca
 8006716:	625a      	str	r2, [r3, #36]	; 0x24
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2253      	movs	r2, #83	; 0x53
 800671e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset the BYPSHAD bit */
  hrtc->Instance->CR &= ((uint8_t)~RTC_CR_BYPSHAD);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	21df      	movs	r1, #223	; 0xdf
 800672c:	400a      	ands	r2, r1
 800672e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	22ff      	movs	r2, #255	; 0xff
 8006736:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2229      	movs	r2, #41	; 0x29
 800673c:	2101      	movs	r1, #1
 800673e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2228      	movs	r2, #40	; 0x28
 8006744:	2100      	movs	r1, #0
 8006746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b002      	add	sp, #8
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	46bd      	mov	sp, r7
 800675e:	b002      	add	sp, #8
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e0a8      	b.n	80068c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	2382      	movs	r3, #130	; 0x82
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	429a      	cmp	r2, r3
 8006788:	d009      	beq.n	800679e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	61da      	str	r2, [r3, #28]
 8006790:	e005      	b.n	800679e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	225d      	movs	r2, #93	; 0x5d
 80067a8:	5c9b      	ldrb	r3, [r3, r2]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d107      	bne.n	80067c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	225c      	movs	r2, #92	; 0x5c
 80067b4:	2100      	movs	r1, #0
 80067b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	0018      	movs	r0, r3
 80067bc:	f7fd fad0 	bl	8003d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	225d      	movs	r2, #93	; 0x5d
 80067c4:	2102      	movs	r1, #2
 80067c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2140      	movs	r1, #64	; 0x40
 80067d4:	438a      	bics	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	23e0      	movs	r3, #224	; 0xe0
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d902      	bls.n	80067ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e002      	b.n	80067f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	015b      	lsls	r3, r3, #5
 80067ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	23f0      	movs	r3, #240	; 0xf0
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d008      	beq.n	800680e <HAL_SPI_Init+0xaa>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	23e0      	movs	r3, #224	; 0xe0
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	429a      	cmp	r2, r3
 8006806:	d002      	beq.n	800680e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	2382      	movs	r3, #130	; 0x82
 8006814:	005b      	lsls	r3, r3, #1
 8006816:	401a      	ands	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6899      	ldr	r1, [r3, #8]
 800681c:	2384      	movs	r3, #132	; 0x84
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	400b      	ands	r3, r1
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2102      	movs	r1, #2
 800682a:	400b      	ands	r3, r1
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2101      	movs	r1, #1
 8006834:	400b      	ands	r3, r1
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6999      	ldr	r1, [r3, #24]
 800683c:	2380      	movs	r3, #128	; 0x80
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	400b      	ands	r3, r1
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	2138      	movs	r1, #56	; 0x38
 800684a:	400b      	ands	r3, r1
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	2180      	movs	r1, #128	; 0x80
 8006854:	400b      	ands	r3, r1
 8006856:	431a      	orrs	r2, r3
 8006858:	0011      	movs	r1, r2
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	401a      	ands	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	0c1b      	lsrs	r3, r3, #16
 8006872:	2204      	movs	r2, #4
 8006874:	401a      	ands	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	2110      	movs	r1, #16
 800687c:	400b      	ands	r3, r1
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006884:	2108      	movs	r1, #8
 8006886:	400b      	ands	r3, r1
 8006888:	431a      	orrs	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68d9      	ldr	r1, [r3, #12]
 800688e:	23f0      	movs	r3, #240	; 0xf0
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	400b      	ands	r3, r1
 8006894:	431a      	orrs	r2, r3
 8006896:	0011      	movs	r1, r2
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	2380      	movs	r3, #128	; 0x80
 800689c:	015b      	lsls	r3, r3, #5
 800689e:	401a      	ands	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69da      	ldr	r2, [r3, #28]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4907      	ldr	r1, [pc, #28]	; (80068d0 <HAL_SPI_Init+0x16c>)
 80068b4:	400a      	ands	r2, r1
 80068b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	225d      	movs	r2, #93	; 0x5d
 80068c2:	2101      	movs	r1, #1
 80068c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b004      	add	sp, #16
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	fffff7ff 	.word	0xfffff7ff

080068d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	1dbb      	adds	r3, r7, #6
 80068e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068e4:	231f      	movs	r3, #31
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	2200      	movs	r2, #0
 80068ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	225c      	movs	r2, #92	; 0x5c
 80068f0:	5c9b      	ldrb	r3, [r3, r2]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_SPI_Transmit+0x26>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e147      	b.n	8006b8a <HAL_SPI_Transmit+0x2b6>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	225c      	movs	r2, #92	; 0x5c
 80068fe:	2101      	movs	r1, #1
 8006900:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006902:	f7fd fdd1 	bl	80044a8 <HAL_GetTick>
 8006906:	0003      	movs	r3, r0
 8006908:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800690a:	2316      	movs	r3, #22
 800690c:	18fb      	adds	r3, r7, r3
 800690e:	1dba      	adds	r2, r7, #6
 8006910:	8812      	ldrh	r2, [r2, #0]
 8006912:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	225d      	movs	r2, #93	; 0x5d
 8006918:	5c9b      	ldrb	r3, [r3, r2]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d004      	beq.n	800692a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006920:	231f      	movs	r3, #31
 8006922:	18fb      	adds	r3, r7, r3
 8006924:	2202      	movs	r2, #2
 8006926:	701a      	strb	r2, [r3, #0]
    goto error;
 8006928:	e128      	b.n	8006b7c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <HAL_SPI_Transmit+0x64>
 8006930:	1dbb      	adds	r3, r7, #6
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006938:	231f      	movs	r3, #31
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	2201      	movs	r2, #1
 800693e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006940:	e11c      	b.n	8006b7c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	225d      	movs	r2, #93	; 0x5d
 8006946:	2103      	movs	r1, #3
 8006948:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	1dba      	adds	r2, r7, #6
 800695a:	8812      	ldrh	r2, [r2, #0]
 800695c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1dba      	adds	r2, r7, #6
 8006962:	8812      	ldrh	r2, [r2, #0]
 8006964:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2244      	movs	r2, #68	; 0x44
 8006970:	2100      	movs	r1, #0
 8006972:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2246      	movs	r2, #70	; 0x46
 8006978:	2100      	movs	r1, #0
 800697a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	429a      	cmp	r2, r3
 8006992:	d110      	bne.n	80069b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2140      	movs	r1, #64	; 0x40
 80069a0:	438a      	bics	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	01c9      	lsls	r1, r1, #7
 80069b2:	430a      	orrs	r2, r1
 80069b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2240      	movs	r2, #64	; 0x40
 80069be:	4013      	ands	r3, r2
 80069c0:	2b40      	cmp	r3, #64	; 0x40
 80069c2:	d007      	beq.n	80069d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2140      	movs	r1, #64	; 0x40
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	23e0      	movs	r3, #224	; 0xe0
 80069da:	00db      	lsls	r3, r3, #3
 80069dc:	429a      	cmp	r2, r3
 80069de:	d952      	bls.n	8006a86 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_SPI_Transmit+0x11e>
 80069e8:	2316      	movs	r3, #22
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d143      	bne.n	8006a7a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f6:	881a      	ldrh	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a02:	1c9a      	adds	r2, r3, #2
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a16:	e030      	b.n	8006a7a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	4013      	ands	r3, r2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d112      	bne.n	8006a4c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a4a:	e016      	b.n	8006a7a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a4c:	f7fd fd2c 	bl	80044a8 <HAL_GetTick>
 8006a50:	0002      	movs	r2, r0
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d802      	bhi.n	8006a62 <HAL_SPI_Transmit+0x18e>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	d102      	bne.n	8006a68 <HAL_SPI_Transmit+0x194>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d108      	bne.n	8006a7a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006a68:	231f      	movs	r3, #31
 8006a6a:	18fb      	adds	r3, r7, r3
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	225d      	movs	r2, #93	; 0x5d
 8006a74:	2101      	movs	r1, #1
 8006a76:	5499      	strb	r1, [r3, r2]
          goto error;
 8006a78:	e080      	b.n	8006b7c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1c9      	bne.n	8006a18 <HAL_SPI_Transmit+0x144>
 8006a84:	e053      	b.n	8006b2e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <HAL_SPI_Transmit+0x1c4>
 8006a8e:	2316      	movs	r3, #22
 8006a90:	18fb      	adds	r3, r7, r3
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d145      	bne.n	8006b24 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	330c      	adds	r3, #12
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006abe:	e031      	b.n	8006b24 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	4013      	ands	r3, r2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d113      	bne.n	8006af6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	7812      	ldrb	r2, [r2, #0]
 8006ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006af4:	e016      	b.n	8006b24 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af6:	f7fd fcd7 	bl	80044a8 <HAL_GetTick>
 8006afa:	0002      	movs	r2, r0
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d802      	bhi.n	8006b0c <HAL_SPI_Transmit+0x238>
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	d102      	bne.n	8006b12 <HAL_SPI_Transmit+0x23e>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d108      	bne.n	8006b24 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006b12:	231f      	movs	r3, #31
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	2203      	movs	r2, #3
 8006b18:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	225d      	movs	r2, #93	; 0x5d
 8006b1e:	2101      	movs	r1, #1
 8006b20:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b22:	e02b      	b.n	8006b7c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1c8      	bne.n	8006ac0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	0018      	movs	r0, r3
 8006b36:	f000 fcef 	bl	8007518 <SPI_EndRxTxTransaction>
 8006b3a:	1e03      	subs	r3, r0, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	613b      	str	r3, [r7, #16]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006b6a:	231f      	movs	r3, #31
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	2201      	movs	r2, #1
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	e003      	b.n	8006b7c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	225d      	movs	r2, #93	; 0x5d
 8006b78:	2101      	movs	r1, #1
 8006b7a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	225c      	movs	r2, #92	; 0x5c
 8006b80:	2100      	movs	r1, #0
 8006b82:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b84:	231f      	movs	r3, #31
 8006b86:	18fb      	adds	r3, r7, r3
 8006b88:	781b      	ldrb	r3, [r3, #0]
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b008      	add	sp, #32
 8006b90:	bd80      	pop	{r7, pc}
	...

08006b94 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b94:	b590      	push	{r4, r7, lr}
 8006b96:	b089      	sub	sp, #36	; 0x24
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	1dbb      	adds	r3, r7, #6
 8006ba2:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ba4:	2117      	movs	r1, #23
 8006ba6:	187b      	adds	r3, r7, r1
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	225d      	movs	r2, #93	; 0x5d
 8006bb0:	5c9b      	ldrb	r3, [r3, r2]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d003      	beq.n	8006bc0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	2202      	movs	r2, #2
 8006bbc:	701a      	strb	r2, [r3, #0]
    goto error;
 8006bbe:	e12b      	b.n	8006e18 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	2382      	movs	r3, #130	; 0x82
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d113      	bne.n	8006bf4 <HAL_SPI_Receive+0x60>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	225d      	movs	r2, #93	; 0x5d
 8006bd8:	2104      	movs	r1, #4
 8006bda:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006bdc:	1dbb      	adds	r3, r7, #6
 8006bde:	881c      	ldrh	r4, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	0023      	movs	r3, r4
 8006bec:	f000 f924 	bl	8006e38 <HAL_SPI_TransmitReceive>
 8006bf0:	0003      	movs	r3, r0
 8006bf2:	e118      	b.n	8006e26 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	225c      	movs	r2, #92	; 0x5c
 8006bf8:	5c9b      	ldrb	r3, [r3, r2]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_SPI_Receive+0x6e>
 8006bfe:	2302      	movs	r3, #2
 8006c00:	e111      	b.n	8006e26 <HAL_SPI_Receive+0x292>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	225c      	movs	r2, #92	; 0x5c
 8006c06:	2101      	movs	r1, #1
 8006c08:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c0a:	f7fd fc4d 	bl	80044a8 <HAL_GetTick>
 8006c0e:	0003      	movs	r3, r0
 8006c10:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <HAL_SPI_Receive+0x8c>
 8006c18:	1dbb      	adds	r3, r7, #6
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8006c20:	2317      	movs	r3, #23
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	2201      	movs	r2, #1
 8006c26:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c28:	e0f6      	b.n	8006e18 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	225d      	movs	r2, #93	; 0x5d
 8006c2e:	2104      	movs	r1, #4
 8006c30:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1dba      	adds	r2, r7, #6
 8006c42:	2144      	movs	r1, #68	; 0x44
 8006c44:	8812      	ldrh	r2, [r2, #0]
 8006c46:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	1dba      	adds	r2, r7, #6
 8006c4c:	2146      	movs	r1, #70	; 0x46
 8006c4e:	8812      	ldrh	r2, [r2, #0]
 8006c50:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	23e0      	movs	r3, #224	; 0xe0
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d908      	bls.n	8006c8e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	496a      	ldr	r1, [pc, #424]	; (8006e30 <HAL_SPI_Receive+0x29c>)
 8006c88:	400a      	ands	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	e008      	b.n	8006ca0 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2180      	movs	r1, #128	; 0x80
 8006c9a:	0149      	lsls	r1, r1, #5
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	2380      	movs	r3, #128	; 0x80
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d10f      	bne.n	8006ccc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2140      	movs	r1, #64	; 0x40
 8006cb8:	438a      	bics	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	495b      	ldr	r1, [pc, #364]	; (8006e34 <HAL_SPI_Receive+0x2a0>)
 8006cc8:	400a      	ands	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2240      	movs	r2, #64	; 0x40
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d007      	beq.n	8006cea <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2140      	movs	r1, #64	; 0x40
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	23e0      	movs	r3, #224	; 0xe0
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d900      	bls.n	8006cf8 <HAL_SPI_Receive+0x164>
 8006cf6:	e071      	b.n	8006ddc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006cf8:	e035      	b.n	8006d66 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2201      	movs	r2, #1
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d117      	bne.n	8006d38 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	001a      	movs	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	7812      	ldrb	r2, [r2, #0]
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2246      	movs	r2, #70	; 0x46
 8006d28:	5a9b      	ldrh	r3, [r3, r2]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	b299      	uxth	r1, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2246      	movs	r2, #70	; 0x46
 8006d34:	5299      	strh	r1, [r3, r2]
 8006d36:	e016      	b.n	8006d66 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d38:	f7fd fbb6 	bl	80044a8 <HAL_GetTick>
 8006d3c:	0002      	movs	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d802      	bhi.n	8006d4e <HAL_SPI_Receive+0x1ba>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	d102      	bne.n	8006d54 <HAL_SPI_Receive+0x1c0>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8006d54:	2317      	movs	r3, #23
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	2203      	movs	r2, #3
 8006d5a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	225d      	movs	r2, #93	; 0x5d
 8006d60:	2101      	movs	r1, #1
 8006d62:	5499      	strb	r1, [r3, r2]
          goto error;
 8006d64:	e058      	b.n	8006e18 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2246      	movs	r2, #70	; 0x46
 8006d6a:	5a9b      	ldrh	r3, [r3, r2]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1c3      	bne.n	8006cfa <HAL_SPI_Receive+0x166>
 8006d72:	e039      	b.n	8006de8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d115      	bne.n	8006dae <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	1c9a      	adds	r2, r3, #2
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2246      	movs	r2, #70	; 0x46
 8006d9e:	5a9b      	ldrh	r3, [r3, r2]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b299      	uxth	r1, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2246      	movs	r2, #70	; 0x46
 8006daa:	5299      	strh	r1, [r3, r2]
 8006dac:	e016      	b.n	8006ddc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dae:	f7fd fb7b 	bl	80044a8 <HAL_GetTick>
 8006db2:	0002      	movs	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	683a      	ldr	r2, [r7, #0]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d802      	bhi.n	8006dc4 <HAL_SPI_Receive+0x230>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	d102      	bne.n	8006dca <HAL_SPI_Receive+0x236>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d108      	bne.n	8006ddc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8006dca:	2317      	movs	r3, #23
 8006dcc:	18fb      	adds	r3, r7, r3
 8006dce:	2203      	movs	r2, #3
 8006dd0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	225d      	movs	r2, #93	; 0x5d
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	5499      	strb	r1, [r3, r2]
          goto error;
 8006dda:	e01d      	b.n	8006e18 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2246      	movs	r2, #70	; 0x46
 8006de0:	5a9b      	ldrh	r3, [r3, r2]
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1c5      	bne.n	8006d74 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	6839      	ldr	r1, [r7, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	0018      	movs	r0, r3
 8006df0:	f000 fb34 	bl	800745c <SPI_EndRxTransaction>
 8006df4:	1e03      	subs	r3, r0, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8006e06:	2317      	movs	r3, #23
 8006e08:	18fb      	adds	r3, r7, r3
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	e003      	b.n	8006e18 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	225d      	movs	r2, #93	; 0x5d
 8006e14:	2101      	movs	r1, #1
 8006e16:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	225c      	movs	r2, #92	; 0x5c
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e20:	2317      	movs	r3, #23
 8006e22:	18fb      	adds	r3, r7, r3
 8006e24:	781b      	ldrb	r3, [r3, #0]
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b007      	add	sp, #28
 8006e2c:	bd90      	pop	{r4, r7, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	ffffefff 	.word	0xffffefff
 8006e34:	ffffbfff 	.word	0xffffbfff

08006e38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08a      	sub	sp, #40	; 0x28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	001a      	movs	r2, r3
 8006e46:	1cbb      	adds	r3, r7, #2
 8006e48:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e4e:	2323      	movs	r3, #35	; 0x23
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	2200      	movs	r2, #0
 8006e54:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	225c      	movs	r2, #92	; 0x5c
 8006e5a:	5c9b      	ldrb	r3, [r3, r2]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_SPI_TransmitReceive+0x2c>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e1c4      	b.n	80071ee <HAL_SPI_TransmitReceive+0x3b6>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	225c      	movs	r2, #92	; 0x5c
 8006e68:	2101      	movs	r1, #1
 8006e6a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e6c:	f7fd fb1c 	bl	80044a8 <HAL_GetTick>
 8006e70:	0003      	movs	r3, r0
 8006e72:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006e74:	201b      	movs	r0, #27
 8006e76:	183b      	adds	r3, r7, r0
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	215d      	movs	r1, #93	; 0x5d
 8006e7c:	5c52      	ldrb	r2, [r2, r1]
 8006e7e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006e86:	2312      	movs	r3, #18
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	1cba      	adds	r2, r7, #2
 8006e8c:	8812      	ldrh	r2, [r2, #0]
 8006e8e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e90:	183b      	adds	r3, r7, r0
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d011      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x84>
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	2382      	movs	r3, #130	; 0x82
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d107      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x7a>
 8006eaa:	183b      	adds	r3, r7, r0
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d004      	beq.n	8006ebc <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006eb2:	2323      	movs	r3, #35	; 0x23
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	701a      	strb	r2, [r3, #0]
    goto error;
 8006eba:	e191      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x98>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_SPI_TransmitReceive+0x98>
 8006ec8:	1cbb      	adds	r3, r7, #2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d104      	bne.n	8006eda <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006ed0:	2323      	movs	r3, #35	; 0x23
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ed8:	e182      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	225d      	movs	r2, #93	; 0x5d
 8006ede:	5c9b      	ldrb	r3, [r3, r2]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b04      	cmp	r3, #4
 8006ee4:	d003      	beq.n	8006eee <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	225d      	movs	r2, #93	; 0x5d
 8006eea:	2105      	movs	r1, #5
 8006eec:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	1cba      	adds	r2, r7, #2
 8006efe:	2146      	movs	r1, #70	; 0x46
 8006f00:	8812      	ldrh	r2, [r2, #0]
 8006f02:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	1cba      	adds	r2, r7, #2
 8006f08:	2144      	movs	r1, #68	; 0x44
 8006f0a:	8812      	ldrh	r2, [r2, #0]
 8006f0c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	1cba      	adds	r2, r7, #2
 8006f18:	8812      	ldrh	r2, [r2, #0]
 8006f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	1cba      	adds	r2, r7, #2
 8006f20:	8812      	ldrh	r2, [r2, #0]
 8006f22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	23e0      	movs	r3, #224	; 0xe0
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d908      	bls.n	8006f4e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	49ac      	ldr	r1, [pc, #688]	; (80071f8 <HAL_SPI_TransmitReceive+0x3c0>)
 8006f48:	400a      	ands	r2, r1
 8006f4a:	605a      	str	r2, [r3, #4]
 8006f4c:	e008      	b.n	8006f60 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2180      	movs	r1, #128	; 0x80
 8006f5a:	0149      	lsls	r1, r1, #5
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2240      	movs	r2, #64	; 0x40
 8006f68:	4013      	ands	r3, r2
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d007      	beq.n	8006f7e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2140      	movs	r1, #64	; 0x40
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	23e0      	movs	r3, #224	; 0xe0
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d800      	bhi.n	8006f8c <HAL_SPI_TransmitReceive+0x154>
 8006f8a:	e083      	b.n	8007094 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x168>
 8006f94:	2312      	movs	r3, #18
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d000      	beq.n	8006fa0 <HAL_SPI_TransmitReceive+0x168>
 8006f9e:	e06d      	b.n	800707c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	881a      	ldrh	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fc4:	e05a      	b.n	800707c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d11b      	bne.n	800700c <HAL_SPI_TransmitReceive+0x1d4>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d016      	beq.n	800700c <HAL_SPI_TransmitReceive+0x1d4>
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d113      	bne.n	800700c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	881a      	ldrh	r2, [r3, #0]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	1c9a      	adds	r2, r3, #2
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	2201      	movs	r2, #1
 8007014:	4013      	ands	r3, r2
 8007016:	2b01      	cmp	r3, #1
 8007018:	d11c      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x21c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2246      	movs	r2, #70	; 0x46
 800701e:	5a9b      	ldrh	r3, [r3, r2]
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	b292      	uxth	r2, r2
 8007032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	1c9a      	adds	r2, r3, #2
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2246      	movs	r2, #70	; 0x46
 8007042:	5a9b      	ldrh	r3, [r3, r2]
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b299      	uxth	r1, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2246      	movs	r2, #70	; 0x46
 800704e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007050:	2301      	movs	r3, #1
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007054:	f7fd fa28 	bl	80044a8 <HAL_GetTick>
 8007058:	0002      	movs	r2, r0
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007060:	429a      	cmp	r2, r3
 8007062:	d80b      	bhi.n	800707c <HAL_SPI_TransmitReceive+0x244>
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	3301      	adds	r3, #1
 8007068:	d008      	beq.n	800707c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800706a:	2323      	movs	r3, #35	; 0x23
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	2203      	movs	r2, #3
 8007070:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	225d      	movs	r2, #93	; 0x5d
 8007076:	2101      	movs	r1, #1
 8007078:	5499      	strb	r1, [r3, r2]
        goto error;
 800707a:	e0b1      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d19f      	bne.n	8006fc6 <HAL_SPI_TransmitReceive+0x18e>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2246      	movs	r2, #70	; 0x46
 800708a:	5a9b      	ldrh	r3, [r3, r2]
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d199      	bne.n	8006fc6 <HAL_SPI_TransmitReceive+0x18e>
 8007092:	e089      	b.n	80071a8 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_SPI_TransmitReceive+0x270>
 800709c:	2312      	movs	r3, #18
 800709e:	18fb      	adds	r3, r7, r3
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d000      	beq.n	80070a8 <HAL_SPI_TransmitReceive+0x270>
 80070a6:	e074      	b.n	8007192 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	330c      	adds	r3, #12
 80070b2:	7812      	ldrb	r2, [r2, #0]
 80070b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	1c5a      	adds	r2, r3, #1
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ce:	e060      	b.n	8007192 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2202      	movs	r2, #2
 80070d8:	4013      	ands	r3, r2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d11c      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2e0>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d017      	beq.n	8007118 <HAL_SPI_TransmitReceive+0x2e0>
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d114      	bne.n	8007118 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2201      	movs	r2, #1
 8007120:	4013      	ands	r3, r2
 8007122:	2b01      	cmp	r3, #1
 8007124:	d11e      	bne.n	8007164 <HAL_SPI_TransmitReceive+0x32c>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2246      	movs	r2, #70	; 0x46
 800712a:	5a9b      	ldrh	r3, [r3, r2]
 800712c:	b29b      	uxth	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d018      	beq.n	8007164 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	001a      	movs	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2246      	movs	r2, #70	; 0x46
 8007152:	5a9b      	ldrh	r3, [r3, r2]
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b299      	uxth	r1, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2246      	movs	r2, #70	; 0x46
 800715e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007160:	2301      	movs	r3, #1
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007164:	f7fd f9a0 	bl	80044a8 <HAL_GetTick>
 8007168:	0002      	movs	r2, r0
 800716a:	69fb      	ldr	r3, [r7, #28]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007170:	429a      	cmp	r2, r3
 8007172:	d802      	bhi.n	800717a <HAL_SPI_TransmitReceive+0x342>
 8007174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007176:	3301      	adds	r3, #1
 8007178:	d102      	bne.n	8007180 <HAL_SPI_TransmitReceive+0x348>
 800717a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717c:	2b00      	cmp	r3, #0
 800717e:	d108      	bne.n	8007192 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8007180:	2323      	movs	r3, #35	; 0x23
 8007182:	18fb      	adds	r3, r7, r3
 8007184:	2203      	movs	r2, #3
 8007186:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	225d      	movs	r2, #93	; 0x5d
 800718c:	2101      	movs	r1, #1
 800718e:	5499      	strb	r1, [r3, r2]
        goto error;
 8007190:	e026      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d199      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x298>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2246      	movs	r2, #70	; 0x46
 80071a0:	5a9b      	ldrh	r3, [r3, r2]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d193      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	0018      	movs	r0, r3
 80071b0:	f000 f9b2 	bl	8007518 <SPI_EndRxTxTransaction>
 80071b4:	1e03      	subs	r3, r0, #0
 80071b6:	d006      	beq.n	80071c6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80071b8:	2323      	movs	r3, #35	; 0x23
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	2201      	movs	r2, #1
 80071be:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80071ce:	2323      	movs	r3, #35	; 0x23
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
 80071d6:	e003      	b.n	80071e0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	225d      	movs	r2, #93	; 0x5d
 80071dc:	2101      	movs	r1, #1
 80071de:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	225c      	movs	r2, #92	; 0x5c
 80071e4:	2100      	movs	r1, #0
 80071e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071e8:	2323      	movs	r3, #35	; 0x23
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	781b      	ldrb	r3, [r3, #0]
}
 80071ee:	0018      	movs	r0, r3
 80071f0:	46bd      	mov	sp, r7
 80071f2:	b00a      	add	sp, #40	; 0x28
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	ffffefff 	.word	0xffffefff

080071fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b088      	sub	sp, #32
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	1dfb      	adds	r3, r7, #7
 800720a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800720c:	f7fd f94c 	bl	80044a8 <HAL_GetTick>
 8007210:	0002      	movs	r2, r0
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	18d3      	adds	r3, r2, r3
 800721a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800721c:	f7fd f944 	bl	80044a8 <HAL_GetTick>
 8007220:	0003      	movs	r3, r0
 8007222:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007224:	4b3a      	ldr	r3, [pc, #232]	; (8007310 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	015b      	lsls	r3, r3, #5
 800722a:	0d1b      	lsrs	r3, r3, #20
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	4353      	muls	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	e058      	b.n	80072e6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	d055      	beq.n	80072e6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800723a:	f7fd f935 	bl	80044a8 <HAL_GetTick>
 800723e:	0002      	movs	r2, r0
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	429a      	cmp	r2, r3
 8007248:	d902      	bls.n	8007250 <SPI_WaitFlagStateUntilTimeout+0x54>
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d142      	bne.n	80072d6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	21e0      	movs	r1, #224	; 0xe0
 800725c:	438a      	bics	r2, r1
 800725e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	2382      	movs	r3, #130	; 0x82
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	429a      	cmp	r2, r3
 800726a:	d113      	bne.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x98>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	429a      	cmp	r2, r3
 8007276:	d005      	beq.n	8007284 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	2380      	movs	r3, #128	; 0x80
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	429a      	cmp	r2, r3
 8007282:	d107      	bne.n	8007294 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2140      	movs	r1, #64	; 0x40
 8007290:	438a      	bics	r2, r1
 8007292:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007298:	2380      	movs	r3, #128	; 0x80
 800729a:	019b      	lsls	r3, r3, #6
 800729c:	429a      	cmp	r2, r3
 800729e:	d110      	bne.n	80072c2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	491a      	ldr	r1, [pc, #104]	; (8007314 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2180      	movs	r1, #128	; 0x80
 80072bc:	0189      	lsls	r1, r1, #6
 80072be:	430a      	orrs	r2, r1
 80072c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	225d      	movs	r2, #93	; 0x5d
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	225c      	movs	r2, #92	; 0x5c
 80072ce:	2100      	movs	r1, #0
 80072d0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e017      	b.n	8007306 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	4013      	ands	r3, r2
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	425a      	negs	r2, r3
 80072f6:	4153      	adcs	r3, r2
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	001a      	movs	r2, r3
 80072fc:	1dfb      	adds	r3, r7, #7
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	429a      	cmp	r2, r3
 8007302:	d197      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	0018      	movs	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	b008      	add	sp, #32
 800730c:	bd80      	pop	{r7, pc}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	20000010 	.word	0x20000010
 8007314:	ffffdfff 	.word	0xffffdfff

08007318 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	; 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007326:	2317      	movs	r3, #23
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800732e:	f7fd f8bb 	bl	80044a8 <HAL_GetTick>
 8007332:	0002      	movs	r2, r0
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	1a9b      	subs	r3, r3, r2
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	18d3      	adds	r3, r2, r3
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800733e:	f7fd f8b3 	bl	80044a8 <HAL_GetTick>
 8007342:	0003      	movs	r3, r0
 8007344:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800734e:	4b41      	ldr	r3, [pc, #260]	; (8007454 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	0013      	movs	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	189b      	adds	r3, r3, r2
 8007358:	00da      	lsls	r2, r3, #3
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	0d1b      	lsrs	r3, r3, #20
 800735e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007360:	4353      	muls	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007364:	e068      	b.n	8007438 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	23c0      	movs	r3, #192	; 0xc0
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	429a      	cmp	r2, r3
 800736e:	d10a      	bne.n	8007386 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d107      	bne.n	8007386 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	2117      	movs	r1, #23
 800737e:	187b      	adds	r3, r7, r1
 8007380:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007382:	187b      	adds	r3, r7, r1
 8007384:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	3301      	adds	r3, #1
 800738a:	d055      	beq.n	8007438 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800738c:	f7fd f88c 	bl	80044a8 <HAL_GetTick>
 8007390:	0002      	movs	r2, r0
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007398:	429a      	cmp	r2, r3
 800739a:	d902      	bls.n	80073a2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d142      	bne.n	8007428 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	21e0      	movs	r1, #224	; 0xe0
 80073ae:	438a      	bics	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	2382      	movs	r3, #130	; 0x82
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d113      	bne.n	80073e6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	2380      	movs	r3, #128	; 0x80
 80073c4:	021b      	lsls	r3, r3, #8
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d005      	beq.n	80073d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	2380      	movs	r3, #128	; 0x80
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d107      	bne.n	80073e6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2140      	movs	r1, #64	; 0x40
 80073e2:	438a      	bics	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ea:	2380      	movs	r3, #128	; 0x80
 80073ec:	019b      	lsls	r3, r3, #6
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d110      	bne.n	8007414 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4916      	ldr	r1, [pc, #88]	; (8007458 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80073fe:	400a      	ands	r2, r1
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2180      	movs	r1, #128	; 0x80
 800740e:	0189      	lsls	r1, r1, #6
 8007410:	430a      	orrs	r2, r1
 8007412:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	225d      	movs	r2, #93	; 0x5d
 8007418:	2101      	movs	r1, #1
 800741a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	225c      	movs	r2, #92	; 0x5c
 8007420:	2100      	movs	r1, #0
 8007422:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e010      	b.n	800744a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	3b01      	subs	r3, #1
 8007436:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	429a      	cmp	r2, r3
 8007446:	d18e      	bne.n	8007366 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	0018      	movs	r0, r3
 800744c:	46bd      	mov	sp, r7
 800744e:	b00a      	add	sp, #40	; 0x28
 8007450:	bd80      	pop	{r7, pc}
 8007452:	46c0      	nop			; (mov r8, r8)
 8007454:	20000010 	.word	0x20000010
 8007458:	ffffdfff 	.word	0xffffdfff

0800745c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	2382      	movs	r3, #130	; 0x82
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	429a      	cmp	r2, r3
 8007472:	d113      	bne.n	800749c <SPI_EndRxTransaction+0x40>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	429a      	cmp	r2, r3
 800747e:	d005      	beq.n	800748c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	2380      	movs	r3, #128	; 0x80
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	429a      	cmp	r2, r3
 800748a:	d107      	bne.n	800749c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2140      	movs	r1, #64	; 0x40
 8007498:	438a      	bics	r2, r1
 800749a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	0013      	movs	r3, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	2180      	movs	r1, #128	; 0x80
 80074aa:	f7ff fea7 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 80074ae:	1e03      	subs	r3, r0, #0
 80074b0:	d007      	beq.n	80074c2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b6:	2220      	movs	r2, #32
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e026      	b.n	8007510 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	2382      	movs	r3, #130	; 0x82
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d11f      	bne.n	800750e <SPI_EndRxTransaction+0xb2>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	2380      	movs	r3, #128	; 0x80
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d005      	beq.n	80074e6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d113      	bne.n	800750e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	23c0      	movs	r3, #192	; 0xc0
 80074ea:	00d9      	lsls	r1, r3, #3
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	0013      	movs	r3, r2
 80074f4:	2200      	movs	r2, #0
 80074f6:	f7ff ff0f 	bl	8007318 <SPI_WaitFifoStateUntilTimeout>
 80074fa:	1e03      	subs	r3, r0, #0
 80074fc:	d007      	beq.n	800750e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007502:	2220      	movs	r2, #32
 8007504:	431a      	orrs	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e000      	b.n	8007510 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	0018      	movs	r0, r3
 8007512:	46bd      	mov	sp, r7
 8007514:	b004      	add	sp, #16
 8007516:	bd80      	pop	{r7, pc}

08007518 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	23c0      	movs	r3, #192	; 0xc0
 8007528:	0159      	lsls	r1, r3, #5
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	0013      	movs	r3, r2
 8007532:	2200      	movs	r2, #0
 8007534:	f7ff fef0 	bl	8007318 <SPI_WaitFifoStateUntilTimeout>
 8007538:	1e03      	subs	r3, r0, #0
 800753a:	d007      	beq.n	800754c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007540:	2220      	movs	r2, #32
 8007542:	431a      	orrs	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e027      	b.n	800759c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	0013      	movs	r3, r2
 8007556:	2200      	movs	r2, #0
 8007558:	2180      	movs	r1, #128	; 0x80
 800755a:	f7ff fe4f 	bl	80071fc <SPI_WaitFlagStateUntilTimeout>
 800755e:	1e03      	subs	r3, r0, #0
 8007560:	d007      	beq.n	8007572 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007566:	2220      	movs	r2, #32
 8007568:	431a      	orrs	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e014      	b.n	800759c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	23c0      	movs	r3, #192	; 0xc0
 8007576:	00d9      	lsls	r1, r3, #3
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	0013      	movs	r3, r2
 8007580:	2200      	movs	r2, #0
 8007582:	f7ff fec9 	bl	8007318 <SPI_WaitFifoStateUntilTimeout>
 8007586:	1e03      	subs	r3, r0, #0
 8007588:	d007      	beq.n	800759a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758e:	2220      	movs	r2, #32
 8007590:	431a      	orrs	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e000      	b.n	800759c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	0018      	movs	r0, r3
 800759e:	46bd      	mov	sp, r7
 80075a0:	b004      	add	sp, #16
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e04a      	b.n	800764c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	223d      	movs	r2, #61	; 0x3d
 80075ba:	5c9b      	ldrb	r3, [r3, r2]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d107      	bne.n	80075d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	223c      	movs	r2, #60	; 0x3c
 80075c6:	2100      	movs	r1, #0
 80075c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	0018      	movs	r0, r3
 80075ce:	f7fc fc11 	bl	8003df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	223d      	movs	r2, #61	; 0x3d
 80075d6:	2102      	movs	r1, #2
 80075d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	0019      	movs	r1, r3
 80075e4:	0010      	movs	r0, r2
 80075e6:	f000 f9ed 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2248      	movs	r2, #72	; 0x48
 80075ee:	2101      	movs	r1, #1
 80075f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	223e      	movs	r2, #62	; 0x3e
 80075f6:	2101      	movs	r1, #1
 80075f8:	5499      	strb	r1, [r3, r2]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	223f      	movs	r2, #63	; 0x3f
 80075fe:	2101      	movs	r1, #1
 8007600:	5499      	strb	r1, [r3, r2]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2240      	movs	r2, #64	; 0x40
 8007606:	2101      	movs	r1, #1
 8007608:	5499      	strb	r1, [r3, r2]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2241      	movs	r2, #65	; 0x41
 800760e:	2101      	movs	r1, #1
 8007610:	5499      	strb	r1, [r3, r2]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2242      	movs	r2, #66	; 0x42
 8007616:	2101      	movs	r1, #1
 8007618:	5499      	strb	r1, [r3, r2]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2243      	movs	r2, #67	; 0x43
 800761e:	2101      	movs	r1, #1
 8007620:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2244      	movs	r2, #68	; 0x44
 8007626:	2101      	movs	r1, #1
 8007628:	5499      	strb	r1, [r3, r2]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2245      	movs	r2, #69	; 0x45
 800762e:	2101      	movs	r1, #1
 8007630:	5499      	strb	r1, [r3, r2]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2246      	movs	r2, #70	; 0x46
 8007636:	2101      	movs	r1, #1
 8007638:	5499      	strb	r1, [r3, r2]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2247      	movs	r2, #71	; 0x47
 800763e:	2101      	movs	r1, #1
 8007640:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	223d      	movs	r2, #61	; 0x3d
 8007646:	2101      	movs	r1, #1
 8007648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	0018      	movs	r0, r3
 800764e:	46bd      	mov	sp, r7
 8007650:	b002      	add	sp, #8
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	223d      	movs	r2, #61	; 0x3d
 8007660:	5c9b      	ldrb	r3, [r3, r2]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d001      	beq.n	800766c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e047      	b.n	80076fc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	223d      	movs	r2, #61	; 0x3d
 8007670:	2102      	movs	r1, #2
 8007672:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68da      	ldr	r2, [r3, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2101      	movs	r1, #1
 8007680:	430a      	orrs	r2, r1
 8007682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <HAL_TIM_Base_Start_IT+0xb0>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d014      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x64>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	2380      	movs	r3, #128	; 0x80
 8007694:	05db      	lsls	r3, r3, #23
 8007696:	429a      	cmp	r2, r3
 8007698:	d00e      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x64>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <HAL_TIM_Base_Start_IT+0xb4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d009      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x64>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <HAL_TIM_Base_Start_IT+0xb8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d004      	beq.n	80076b8 <HAL_TIM_Base_Start_IT+0x64>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a17      	ldr	r2, [pc, #92]	; (8007710 <HAL_TIM_Base_Start_IT+0xbc>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d116      	bne.n	80076e6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	4a15      	ldr	r2, [pc, #84]	; (8007714 <HAL_TIM_Base_Start_IT+0xc0>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b06      	cmp	r3, #6
 80076c8:	d016      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0xa4>
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	2380      	movs	r3, #128	; 0x80
 80076ce:	025b      	lsls	r3, r3, #9
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d011      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2101      	movs	r1, #1
 80076e0:	430a      	orrs	r2, r1
 80076e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e4:	e008      	b.n	80076f8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2101      	movs	r1, #1
 80076f2:	430a      	orrs	r2, r1
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e000      	b.n	80076fa <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076f8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	0018      	movs	r0, r3
 80076fe:	46bd      	mov	sp, r7
 8007700:	b004      	add	sp, #16
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40012c00 	.word	0x40012c00
 8007708:	40000400 	.word	0x40000400
 800770c:	40000800 	.word	0x40000800
 8007710:	40014000 	.word	0x40014000
 8007714:	00010007 	.word	0x00010007

08007718 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2101      	movs	r1, #1
 800772c:	438a      	bics	r2, r1
 800772e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	4a0d      	ldr	r2, [pc, #52]	; (800776c <HAL_TIM_Base_Stop_IT+0x54>)
 8007738:	4013      	ands	r3, r2
 800773a:	d10d      	bne.n	8007758 <HAL_TIM_Base_Stop_IT+0x40>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <HAL_TIM_Base_Stop_IT+0x58>)
 8007744:	4013      	ands	r3, r2
 8007746:	d107      	bne.n	8007758 <HAL_TIM_Base_Stop_IT+0x40>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2101      	movs	r1, #1
 8007754:	438a      	bics	r2, r1
 8007756:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	223d      	movs	r2, #61	; 0x3d
 800775c:	2101      	movs	r1, #1
 800775e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b002      	add	sp, #8
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	00001111 	.word	0x00001111
 8007770:	00000444 	.word	0x00000444

08007774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2202      	movs	r2, #2
 8007790:	4013      	ands	r3, r2
 8007792:	d021      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2202      	movs	r2, #2
 8007798:	4013      	ands	r3, r2
 800779a:	d01d      	beq.n	80077d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2203      	movs	r2, #3
 80077a2:	4252      	negs	r2, r2
 80077a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	2203      	movs	r2, #3
 80077b4:	4013      	ands	r3, r2
 80077b6:	d004      	beq.n	80077c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	0018      	movs	r0, r3
 80077bc:	f000 f8ea 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 80077c0:	e007      	b.n	80077d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	0018      	movs	r0, r3
 80077c6:	f000 f8dd 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	0018      	movs	r0, r3
 80077ce:	f000 f8e9 	bl	80079a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2204      	movs	r2, #4
 80077dc:	4013      	ands	r3, r2
 80077de:	d022      	beq.n	8007826 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2204      	movs	r2, #4
 80077e4:	4013      	ands	r3, r2
 80077e6:	d01e      	beq.n	8007826 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2205      	movs	r2, #5
 80077ee:	4252      	negs	r2, r2
 80077f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2202      	movs	r2, #2
 80077f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699a      	ldr	r2, [r3, #24]
 80077fe:	23c0      	movs	r3, #192	; 0xc0
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4013      	ands	r3, r2
 8007804:	d004      	beq.n	8007810 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	0018      	movs	r0, r3
 800780a:	f000 f8c3 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 800780e:	e007      	b.n	8007820 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	0018      	movs	r0, r3
 8007814:	f000 f8b6 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	0018      	movs	r0, r3
 800781c:	f000 f8c2 	bl	80079a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2208      	movs	r2, #8
 800782a:	4013      	ands	r3, r2
 800782c:	d021      	beq.n	8007872 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2208      	movs	r2, #8
 8007832:	4013      	ands	r3, r2
 8007834:	d01d      	beq.n	8007872 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2209      	movs	r2, #9
 800783c:	4252      	negs	r2, r2
 800783e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2204      	movs	r2, #4
 8007844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69db      	ldr	r3, [r3, #28]
 800784c:	2203      	movs	r2, #3
 800784e:	4013      	ands	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	0018      	movs	r0, r3
 8007856:	f000 f89d 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 800785a:	e007      	b.n	800786c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	0018      	movs	r0, r3
 8007860:	f000 f890 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	0018      	movs	r0, r3
 8007868:	f000 f89c 	bl	80079a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2210      	movs	r2, #16
 8007876:	4013      	ands	r3, r2
 8007878:	d022      	beq.n	80078c0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2210      	movs	r2, #16
 800787e:	4013      	ands	r3, r2
 8007880:	d01e      	beq.n	80078c0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2211      	movs	r2, #17
 8007888:	4252      	negs	r2, r2
 800788a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2208      	movs	r2, #8
 8007890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	23c0      	movs	r3, #192	; 0xc0
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4013      	ands	r3, r2
 800789e:	d004      	beq.n	80078aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	0018      	movs	r0, r3
 80078a4:	f000 f876 	bl	8007994 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e007      	b.n	80078ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	0018      	movs	r0, r3
 80078ae:	f000 f869 	bl	8007984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	0018      	movs	r0, r3
 80078b6:	f000 f875 	bl	80079a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2201      	movs	r2, #1
 80078c4:	4013      	ands	r3, r2
 80078c6:	d00c      	beq.n	80078e2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	4013      	ands	r3, r2
 80078ce:	d008      	beq.n	80078e2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2202      	movs	r2, #2
 80078d6:	4252      	negs	r2, r2
 80078d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	0018      	movs	r0, r3
 80078de:	f7fc f991 	bl	8003c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2280      	movs	r2, #128	; 0x80
 80078e6:	4013      	ands	r3, r2
 80078e8:	d104      	bne.n	80078f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	2380      	movs	r3, #128	; 0x80
 80078ee:	019b      	lsls	r3, r3, #6
 80078f0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80078f2:	d00b      	beq.n	800790c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2280      	movs	r2, #128	; 0x80
 80078f8:	4013      	ands	r3, r2
 80078fa:	d007      	beq.n	800790c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <HAL_TIM_IRQHandler+0x208>)
 8007902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	0018      	movs	r0, r3
 8007908:	f000 f972 	bl	8007bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	2380      	movs	r3, #128	; 0x80
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4013      	ands	r3, r2
 8007914:	d00b      	beq.n	800792e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2280      	movs	r2, #128	; 0x80
 800791a:	4013      	ands	r3, r2
 800791c:	d007      	beq.n	800792e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a17      	ldr	r2, [pc, #92]	; (8007980 <HAL_TIM_IRQHandler+0x20c>)
 8007924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	0018      	movs	r0, r3
 800792a:	f000 f969 	bl	8007c00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2240      	movs	r2, #64	; 0x40
 8007932:	4013      	ands	r3, r2
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2240      	movs	r2, #64	; 0x40
 800793a:	4013      	ands	r3, r2
 800793c:	d008      	beq.n	8007950 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2241      	movs	r2, #65	; 0x41
 8007944:	4252      	negs	r2, r2
 8007946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	0018      	movs	r0, r3
 800794c:	f000 f832 	bl	80079b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2220      	movs	r2, #32
 8007954:	4013      	ands	r3, r2
 8007956:	d00c      	beq.n	8007972 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	4013      	ands	r3, r2
 800795e:	d008      	beq.n	8007972 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2221      	movs	r2, #33	; 0x21
 8007966:	4252      	negs	r2, r2
 8007968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	0018      	movs	r0, r3
 800796e:	f000 f937 	bl	8007be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007972:	46c0      	nop			; (mov r8, r8)
 8007974:	46bd      	mov	sp, r7
 8007976:	b004      	add	sp, #16
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			; (mov r8, r8)
 800797c:	ffffdf7f 	.word	0xffffdf7f
 8007980:	fffffeff 	.word	0xfffffeff

08007984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800798c:	46c0      	nop			; (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800799c:	46c0      	nop			; (mov r8, r8)
 800799e:	46bd      	mov	sp, r7
 80079a0:	b002      	add	sp, #8
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079ac:	46c0      	nop			; (mov r8, r8)
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b002      	add	sp, #8
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079bc:	46c0      	nop			; (mov r8, r8)
 80079be:	46bd      	mov	sp, r7
 80079c0:	b002      	add	sp, #8
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3f      	ldr	r2, [pc, #252]	; (8007ad4 <TIM_Base_SetConfig+0x110>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00c      	beq.n	80079f6 <TIM_Base_SetConfig+0x32>
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	2380      	movs	r3, #128	; 0x80
 80079e0:	05db      	lsls	r3, r3, #23
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d007      	beq.n	80079f6 <TIM_Base_SetConfig+0x32>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a3b      	ldr	r2, [pc, #236]	; (8007ad8 <TIM_Base_SetConfig+0x114>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_Base_SetConfig+0x32>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a3a      	ldr	r2, [pc, #232]	; (8007adc <TIM_Base_SetConfig+0x118>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d108      	bne.n	8007a08 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2270      	movs	r2, #112	; 0x70
 80079fa:	4393      	bics	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a32      	ldr	r2, [pc, #200]	; (8007ad4 <TIM_Base_SetConfig+0x110>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d01c      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	2380      	movs	r3, #128	; 0x80
 8007a14:	05db      	lsls	r3, r3, #23
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d017      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a2e      	ldr	r2, [pc, #184]	; (8007ad8 <TIM_Base_SetConfig+0x114>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d013      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a2d      	ldr	r2, [pc, #180]	; (8007adc <TIM_Base_SetConfig+0x118>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00f      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2c      	ldr	r2, [pc, #176]	; (8007ae0 <TIM_Base_SetConfig+0x11c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2b      	ldr	r2, [pc, #172]	; (8007ae4 <TIM_Base_SetConfig+0x120>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2a      	ldr	r2, [pc, #168]	; (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a29      	ldr	r2, [pc, #164]	; (8007aec <TIM_Base_SetConfig+0x128>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4a28      	ldr	r2, [pc, #160]	; (8007af0 <TIM_Base_SetConfig+0x12c>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	4393      	bics	r3, r2
 8007a62:	001a      	movs	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a13      	ldr	r2, [pc, #76]	; (8007ad4 <TIM_Base_SetConfig+0x110>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00b      	beq.n	8007aa2 <TIM_Base_SetConfig+0xde>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a15      	ldr	r2, [pc, #84]	; (8007ae4 <TIM_Base_SetConfig+0x120>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d007      	beq.n	8007aa2 <TIM_Base_SetConfig+0xde>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_Base_SetConfig+0xde>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a13      	ldr	r2, [pc, #76]	; (8007aec <TIM_Base_SetConfig+0x128>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d103      	bne.n	8007aaa <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d106      	bne.n	8007aca <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	4393      	bics	r3, r2
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	611a      	str	r2, [r3, #16]
  }
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b004      	add	sp, #16
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	40012c00 	.word	0x40012c00
 8007ad8:	40000400 	.word	0x40000400
 8007adc:	40000800 	.word	0x40000800
 8007ae0:	40002000 	.word	0x40002000
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40014400 	.word	0x40014400
 8007aec:	40014800 	.word	0x40014800
 8007af0:	fffffcff 	.word	0xfffffcff

08007af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	223c      	movs	r2, #60	; 0x3c
 8007b02:	5c9b      	ldrb	r3, [r3, r2]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e05a      	b.n	8007bc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	223c      	movs	r2, #60	; 0x3c
 8007b10:	2101      	movs	r1, #1
 8007b12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	223d      	movs	r2, #61	; 0x3d
 8007b18:	2102      	movs	r1, #2
 8007b1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a26      	ldr	r2, [pc, #152]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d108      	bne.n	8007b48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	4a25      	ldr	r2, [pc, #148]	; (8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2270      	movs	r2, #112	; 0x70
 8007b4c:	4393      	bics	r3, r2
 8007b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d014      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	05db      	lsls	r3, r3, #23
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d00e      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d009      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a12      	ldr	r2, [pc, #72]	; (8007bdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d10c      	bne.n	8007bb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2280      	movs	r2, #128	; 0x80
 8007b9a:	4393      	bics	r3, r2
 8007b9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	223d      	movs	r2, #61	; 0x3d
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	223c      	movs	r2, #60	; 0x3c
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	b004      	add	sp, #16
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	46c0      	nop			; (mov r8, r8)
 8007bcc:	40012c00 	.word	0x40012c00
 8007bd0:	ff0fffff 	.word	0xff0fffff
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40014000 	.word	0x40014000

08007be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be8:	46c0      	nop			; (mov r8, r8)
 8007bea:	46bd      	mov	sp, r7
 8007bec:	b002      	add	sp, #8
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf8:	46c0      	nop			; (mov r8, r8)
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b002      	add	sp, #8
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c08:	46c0      	nop			; (mov r8, r8)
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b002      	add	sp, #8
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e046      	b.n	8007cb0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2288      	movs	r2, #136	; 0x88
 8007c26:	589b      	ldr	r3, [r3, r2]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d107      	bne.n	8007c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2284      	movs	r2, #132	; 0x84
 8007c30:	2100      	movs	r1, #0
 8007c32:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	0018      	movs	r0, r3
 8007c38:	f7fc f902 	bl	8003e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2288      	movs	r2, #136	; 0x88
 8007c40:	2124      	movs	r1, #36	; 0x24
 8007c42:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2101      	movs	r1, #1
 8007c50:	438a      	bics	r2, r1
 8007c52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	0018      	movs	r0, r3
 8007c60:	f000 fd4c 	bl	80086fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	0018      	movs	r0, r3
 8007c68:	f000 f9f2 	bl	8008050 <UART_SetConfig>
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e01c      	b.n	8007cb0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	490d      	ldr	r1, [pc, #52]	; (8007cb8 <HAL_UART_Init+0xa8>)
 8007c82:	400a      	ands	r2, r1
 8007c84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	212a      	movs	r1, #42	; 0x2a
 8007c92:	438a      	bics	r2, r1
 8007c94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f000 fddb 	bl	8008864 <UART_CheckIdleState>
 8007cae:	0003      	movs	r3, r0
}
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	b002      	add	sp, #8
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	ffffb7ff 	.word	0xffffb7ff

08007cbc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e032      	b.n	8007d34 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2288      	movs	r2, #136	; 0x88
 8007cd2:	2124      	movs	r1, #36	; 0x24
 8007cd4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	438a      	bics	r2, r1
 8007ce4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	0018      	movs	r0, r3
 8007d02:	f7fc f9c9 	bl	8004098 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2290      	movs	r2, #144	; 0x90
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2288      	movs	r2, #136	; 0x88
 8007d12:	2100      	movs	r1, #0
 8007d14:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	228c      	movs	r2, #140	; 0x8c
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2284      	movs	r2, #132	; 0x84
 8007d2e:	2100      	movs	r1, #0
 8007d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	0018      	movs	r0, r3
 8007d36:	46bd      	mov	sp, r7
 8007d38:	b002      	add	sp, #8
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	1dbb      	adds	r3, r7, #6
 8007d4a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2288      	movs	r2, #136	; 0x88
 8007d50:	589b      	ldr	r3, [r3, r2]
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d000      	beq.n	8007d58 <HAL_UART_Transmit+0x1c>
 8007d56:	e090      	b.n	8007e7a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d003      	beq.n	8007d66 <HAL_UART_Transmit+0x2a>
 8007d5e:	1dbb      	adds	r3, r7, #6
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e088      	b.n	8007e7c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	2380      	movs	r3, #128	; 0x80
 8007d70:	015b      	lsls	r3, r3, #5
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d109      	bne.n	8007d8a <HAL_UART_Transmit+0x4e>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d105      	bne.n	8007d8a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2201      	movs	r2, #1
 8007d82:	4013      	ands	r3, r2
 8007d84:	d001      	beq.n	8007d8a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e078      	b.n	8007e7c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2290      	movs	r2, #144	; 0x90
 8007d8e:	2100      	movs	r1, #0
 8007d90:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2288      	movs	r2, #136	; 0x88
 8007d96:	2121      	movs	r1, #33	; 0x21
 8007d98:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d9a:	f7fc fb85 	bl	80044a8 <HAL_GetTick>
 8007d9e:	0003      	movs	r3, r0
 8007da0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	1dba      	adds	r2, r7, #6
 8007da6:	2154      	movs	r1, #84	; 0x54
 8007da8:	8812      	ldrh	r2, [r2, #0]
 8007daa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	1dba      	adds	r2, r7, #6
 8007db0:	2156      	movs	r1, #86	; 0x56
 8007db2:	8812      	ldrh	r2, [r2, #0]
 8007db4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	2380      	movs	r3, #128	; 0x80
 8007dbc:	015b      	lsls	r3, r3, #5
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d108      	bne.n	8007dd4 <HAL_UART_Transmit+0x98>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e003      	b.n	8007ddc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ddc:	e030      	b.n	8007e40 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	0013      	movs	r3, r2
 8007de8:	2200      	movs	r2, #0
 8007dea:	2180      	movs	r1, #128	; 0x80
 8007dec:	f000 fde4 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 8007df0:	1e03      	subs	r3, r0, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2288      	movs	r2, #136	; 0x88
 8007df8:	2120      	movs	r1, #32
 8007dfa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e03d      	b.n	8007e7c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	05d2      	lsls	r2, r2, #23
 8007e12:	0dd2      	lsrs	r2, r2, #23
 8007e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	3302      	adds	r3, #2
 8007e1a:	61bb      	str	r3, [r7, #24]
 8007e1c:	e007      	b.n	8007e2e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	781a      	ldrb	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2256      	movs	r2, #86	; 0x56
 8007e32:	5a9b      	ldrh	r3, [r3, r2]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b299      	uxth	r1, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2256      	movs	r2, #86	; 0x56
 8007e3e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2256      	movs	r2, #86	; 0x56
 8007e44:	5a9b      	ldrh	r3, [r3, r2]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1c8      	bne.n	8007dde <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	0013      	movs	r3, r2
 8007e56:	2200      	movs	r2, #0
 8007e58:	2140      	movs	r1, #64	; 0x40
 8007e5a:	f000 fdad 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 8007e5e:	1e03      	subs	r3, r0, #0
 8007e60:	d005      	beq.n	8007e6e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2288      	movs	r2, #136	; 0x88
 8007e66:	2120      	movs	r1, #32
 8007e68:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e006      	b.n	8007e7c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2288      	movs	r2, #136	; 0x88
 8007e72:	2120      	movs	r1, #32
 8007e74:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007e76:	2300      	movs	r3, #0
 8007e78:	e000      	b.n	8007e7c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007e7a:	2302      	movs	r3, #2
  }
}
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b008      	add	sp, #32
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08a      	sub	sp, #40	; 0x28
 8007e88:	af02      	add	r7, sp, #8
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	603b      	str	r3, [r7, #0]
 8007e90:	1dbb      	adds	r3, r7, #6
 8007e92:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	228c      	movs	r2, #140	; 0x8c
 8007e98:	589b      	ldr	r3, [r3, r2]
 8007e9a:	2b20      	cmp	r3, #32
 8007e9c:	d000      	beq.n	8007ea0 <HAL_UART_Receive+0x1c>
 8007e9e:	e0d0      	b.n	8008042 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_UART_Receive+0x2a>
 8007ea6:	1dbb      	adds	r3, r7, #6
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e0c8      	b.n	8008044 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	2380      	movs	r3, #128	; 0x80
 8007eb8:	015b      	lsls	r3, r3, #5
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d109      	bne.n	8007ed2 <HAL_UART_Receive+0x4e>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d105      	bne.n	8007ed2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4013      	ands	r3, r2
 8007ecc:	d001      	beq.n	8007ed2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e0b8      	b.n	8008044 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2290      	movs	r2, #144	; 0x90
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	228c      	movs	r2, #140	; 0x8c
 8007ede:	2122      	movs	r1, #34	; 0x22
 8007ee0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ee8:	f7fc fade 	bl	80044a8 <HAL_GetTick>
 8007eec:	0003      	movs	r3, r0
 8007eee:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	1dba      	adds	r2, r7, #6
 8007ef4:	215c      	movs	r1, #92	; 0x5c
 8007ef6:	8812      	ldrh	r2, [r2, #0]
 8007ef8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	1dba      	adds	r2, r7, #6
 8007efe:	215e      	movs	r1, #94	; 0x5e
 8007f00:	8812      	ldrh	r2, [r2, #0]
 8007f02:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	2380      	movs	r3, #128	; 0x80
 8007f0a:	015b      	lsls	r3, r3, #5
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d10d      	bne.n	8007f2c <HAL_UART_Receive+0xa8>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <HAL_UART_Receive+0x9e>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2260      	movs	r2, #96	; 0x60
 8007f1c:	494b      	ldr	r1, [pc, #300]	; (800804c <HAL_UART_Receive+0x1c8>)
 8007f1e:	5299      	strh	r1, [r3, r2]
 8007f20:	e02e      	b.n	8007f80 <HAL_UART_Receive+0xfc>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2260      	movs	r2, #96	; 0x60
 8007f26:	21ff      	movs	r1, #255	; 0xff
 8007f28:	5299      	strh	r1, [r3, r2]
 8007f2a:	e029      	b.n	8007f80 <HAL_UART_Receive+0xfc>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10d      	bne.n	8007f50 <HAL_UART_Receive+0xcc>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d104      	bne.n	8007f46 <HAL_UART_Receive+0xc2>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2260      	movs	r2, #96	; 0x60
 8007f40:	21ff      	movs	r1, #255	; 0xff
 8007f42:	5299      	strh	r1, [r3, r2]
 8007f44:	e01c      	b.n	8007f80 <HAL_UART_Receive+0xfc>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2260      	movs	r2, #96	; 0x60
 8007f4a:	217f      	movs	r1, #127	; 0x7f
 8007f4c:	5299      	strh	r1, [r3, r2]
 8007f4e:	e017      	b.n	8007f80 <HAL_UART_Receive+0xfc>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	055b      	lsls	r3, r3, #21
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d10d      	bne.n	8007f78 <HAL_UART_Receive+0xf4>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <HAL_UART_Receive+0xea>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2260      	movs	r2, #96	; 0x60
 8007f68:	217f      	movs	r1, #127	; 0x7f
 8007f6a:	5299      	strh	r1, [r3, r2]
 8007f6c:	e008      	b.n	8007f80 <HAL_UART_Receive+0xfc>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2260      	movs	r2, #96	; 0x60
 8007f72:	213f      	movs	r1, #63	; 0x3f
 8007f74:	5299      	strh	r1, [r3, r2]
 8007f76:	e003      	b.n	8007f80 <HAL_UART_Receive+0xfc>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2260      	movs	r2, #96	; 0x60
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007f80:	2312      	movs	r3, #18
 8007f82:	18fb      	adds	r3, r7, r3
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	2160      	movs	r1, #96	; 0x60
 8007f88:	5a52      	ldrh	r2, [r2, r1]
 8007f8a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	2380      	movs	r3, #128	; 0x80
 8007f92:	015b      	lsls	r3, r3, #5
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d108      	bne.n	8007faa <HAL_UART_Receive+0x126>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d104      	bne.n	8007faa <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	61bb      	str	r3, [r7, #24]
 8007fa8:	e003      	b.n	8007fb2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007fb2:	e03a      	b.n	800802a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	0013      	movs	r3, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2120      	movs	r1, #32
 8007fc2:	f000 fcf9 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 8007fc6:	1e03      	subs	r3, r0, #0
 8007fc8:	d005      	beq.n	8007fd6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	228c      	movs	r2, #140	; 0x8c
 8007fce:	2120      	movs	r1, #32
 8007fd0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e036      	b.n	8008044 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10e      	bne.n	8007ffa <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2212      	movs	r2, #18
 8007fe6:	18ba      	adds	r2, r7, r2
 8007fe8:	8812      	ldrh	r2, [r2, #0]
 8007fea:	4013      	ands	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	e00e      	b.n	8008018 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2212      	movs	r2, #18
 8008004:	18ba      	adds	r2, r7, r2
 8008006:	8812      	ldrh	r2, [r2, #0]
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	4013      	ands	r3, r2
 800800c:	b2da      	uxtb	r2, r3
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	3301      	adds	r3, #1
 8008016:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	225e      	movs	r2, #94	; 0x5e
 800801c:	5a9b      	ldrh	r3, [r3, r2]
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b299      	uxth	r1, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	225e      	movs	r2, #94	; 0x5e
 8008028:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	225e      	movs	r2, #94	; 0x5e
 800802e:	5a9b      	ldrh	r3, [r3, r2]
 8008030:	b29b      	uxth	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1be      	bne.n	8007fb4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	228c      	movs	r2, #140	; 0x8c
 800803a:	2120      	movs	r1, #32
 800803c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e000      	b.n	8008044 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	0018      	movs	r0, r3
 8008046:	46bd      	mov	sp, r7
 8008048:	b008      	add	sp, #32
 800804a:	bd80      	pop	{r7, pc}
 800804c:	000001ff 	.word	0x000001ff

08008050 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008050:	b5b0      	push	{r4, r5, r7, lr}
 8008052:	b090      	sub	sp, #64	; 0x40
 8008054:	af00      	add	r7, sp, #0
 8008056:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008058:	231a      	movs	r3, #26
 800805a:	2220      	movs	r2, #32
 800805c:	189b      	adds	r3, r3, r2
 800805e:	19db      	adds	r3, r3, r7
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	431a      	orrs	r2, r3
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	431a      	orrs	r2, r3
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4313      	orrs	r3, r2
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4ac1      	ldr	r2, [pc, #772]	; (8008388 <UART_SetConfig+0x338>)
 8008084:	4013      	ands	r3, r2
 8008086:	0019      	movs	r1, r3
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	430b      	orrs	r3, r1
 8008090:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4abc      	ldr	r2, [pc, #752]	; (800838c <UART_SetConfig+0x33c>)
 800809a:	4013      	ands	r3, r2
 800809c:	0018      	movs	r0, r3
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	68d9      	ldr	r1, [r3, #12]
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	0003      	movs	r3, r0
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	699b      	ldr	r3, [r3, #24]
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4ab6      	ldr	r2, [pc, #728]	; (8008390 <UART_SetConfig+0x340>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d009      	beq.n	80080d0 <UART_SetConfig+0x80>
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4ab4      	ldr	r2, [pc, #720]	; (8008394 <UART_SetConfig+0x344>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d004      	beq.n	80080d0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080cc:	4313      	orrs	r3, r2
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	4ab0      	ldr	r2, [pc, #704]	; (8008398 <UART_SetConfig+0x348>)
 80080d8:	4013      	ands	r3, r2
 80080da:	0019      	movs	r1, r3
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080e2:	430b      	orrs	r3, r1
 80080e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	220f      	movs	r2, #15
 80080ee:	4393      	bics	r3, r2
 80080f0:	0018      	movs	r0, r3
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	0003      	movs	r3, r0
 80080fc:	430b      	orrs	r3, r1
 80080fe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4aa5      	ldr	r2, [pc, #660]	; (800839c <UART_SetConfig+0x34c>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d131      	bne.n	800816e <UART_SetConfig+0x11e>
 800810a:	4ba5      	ldr	r3, [pc, #660]	; (80083a0 <UART_SetConfig+0x350>)
 800810c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810e:	2203      	movs	r2, #3
 8008110:	4013      	ands	r3, r2
 8008112:	2b03      	cmp	r3, #3
 8008114:	d01d      	beq.n	8008152 <UART_SetConfig+0x102>
 8008116:	d823      	bhi.n	8008160 <UART_SetConfig+0x110>
 8008118:	2b02      	cmp	r3, #2
 800811a:	d00c      	beq.n	8008136 <UART_SetConfig+0xe6>
 800811c:	d820      	bhi.n	8008160 <UART_SetConfig+0x110>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <UART_SetConfig+0xd8>
 8008122:	2b01      	cmp	r3, #1
 8008124:	d00e      	beq.n	8008144 <UART_SetConfig+0xf4>
 8008126:	e01b      	b.n	8008160 <UART_SetConfig+0x110>
 8008128:	231b      	movs	r3, #27
 800812a:	2220      	movs	r2, #32
 800812c:	189b      	adds	r3, r3, r2
 800812e:	19db      	adds	r3, r3, r7
 8008130:	2200      	movs	r2, #0
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	e154      	b.n	80083e0 <UART_SetConfig+0x390>
 8008136:	231b      	movs	r3, #27
 8008138:	2220      	movs	r2, #32
 800813a:	189b      	adds	r3, r3, r2
 800813c:	19db      	adds	r3, r3, r7
 800813e:	2202      	movs	r2, #2
 8008140:	701a      	strb	r2, [r3, #0]
 8008142:	e14d      	b.n	80083e0 <UART_SetConfig+0x390>
 8008144:	231b      	movs	r3, #27
 8008146:	2220      	movs	r2, #32
 8008148:	189b      	adds	r3, r3, r2
 800814a:	19db      	adds	r3, r3, r7
 800814c:	2204      	movs	r2, #4
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e146      	b.n	80083e0 <UART_SetConfig+0x390>
 8008152:	231b      	movs	r3, #27
 8008154:	2220      	movs	r2, #32
 8008156:	189b      	adds	r3, r3, r2
 8008158:	19db      	adds	r3, r3, r7
 800815a:	2208      	movs	r2, #8
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e13f      	b.n	80083e0 <UART_SetConfig+0x390>
 8008160:	231b      	movs	r3, #27
 8008162:	2220      	movs	r2, #32
 8008164:	189b      	adds	r3, r3, r2
 8008166:	19db      	adds	r3, r3, r7
 8008168:	2210      	movs	r2, #16
 800816a:	701a      	strb	r2, [r3, #0]
 800816c:	e138      	b.n	80083e0 <UART_SetConfig+0x390>
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a8c      	ldr	r2, [pc, #560]	; (80083a4 <UART_SetConfig+0x354>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d131      	bne.n	80081dc <UART_SetConfig+0x18c>
 8008178:	4b89      	ldr	r3, [pc, #548]	; (80083a0 <UART_SetConfig+0x350>)
 800817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817c:	220c      	movs	r2, #12
 800817e:	4013      	ands	r3, r2
 8008180:	2b0c      	cmp	r3, #12
 8008182:	d01d      	beq.n	80081c0 <UART_SetConfig+0x170>
 8008184:	d823      	bhi.n	80081ce <UART_SetConfig+0x17e>
 8008186:	2b08      	cmp	r3, #8
 8008188:	d00c      	beq.n	80081a4 <UART_SetConfig+0x154>
 800818a:	d820      	bhi.n	80081ce <UART_SetConfig+0x17e>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <UART_SetConfig+0x146>
 8008190:	2b04      	cmp	r3, #4
 8008192:	d00e      	beq.n	80081b2 <UART_SetConfig+0x162>
 8008194:	e01b      	b.n	80081ce <UART_SetConfig+0x17e>
 8008196:	231b      	movs	r3, #27
 8008198:	2220      	movs	r2, #32
 800819a:	189b      	adds	r3, r3, r2
 800819c:	19db      	adds	r3, r3, r7
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
 80081a2:	e11d      	b.n	80083e0 <UART_SetConfig+0x390>
 80081a4:	231b      	movs	r3, #27
 80081a6:	2220      	movs	r2, #32
 80081a8:	189b      	adds	r3, r3, r2
 80081aa:	19db      	adds	r3, r3, r7
 80081ac:	2202      	movs	r2, #2
 80081ae:	701a      	strb	r2, [r3, #0]
 80081b0:	e116      	b.n	80083e0 <UART_SetConfig+0x390>
 80081b2:	231b      	movs	r3, #27
 80081b4:	2220      	movs	r2, #32
 80081b6:	189b      	adds	r3, r3, r2
 80081b8:	19db      	adds	r3, r3, r7
 80081ba:	2204      	movs	r2, #4
 80081bc:	701a      	strb	r2, [r3, #0]
 80081be:	e10f      	b.n	80083e0 <UART_SetConfig+0x390>
 80081c0:	231b      	movs	r3, #27
 80081c2:	2220      	movs	r2, #32
 80081c4:	189b      	adds	r3, r3, r2
 80081c6:	19db      	adds	r3, r3, r7
 80081c8:	2208      	movs	r2, #8
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	e108      	b.n	80083e0 <UART_SetConfig+0x390>
 80081ce:	231b      	movs	r3, #27
 80081d0:	2220      	movs	r2, #32
 80081d2:	189b      	adds	r3, r3, r2
 80081d4:	19db      	adds	r3, r3, r7
 80081d6:	2210      	movs	r2, #16
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e101      	b.n	80083e0 <UART_SetConfig+0x390>
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a71      	ldr	r2, [pc, #452]	; (80083a8 <UART_SetConfig+0x358>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d131      	bne.n	800824a <UART_SetConfig+0x1fa>
 80081e6:	4b6e      	ldr	r3, [pc, #440]	; (80083a0 <UART_SetConfig+0x350>)
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	2230      	movs	r2, #48	; 0x30
 80081ec:	4013      	ands	r3, r2
 80081ee:	2b30      	cmp	r3, #48	; 0x30
 80081f0:	d01d      	beq.n	800822e <UART_SetConfig+0x1de>
 80081f2:	d823      	bhi.n	800823c <UART_SetConfig+0x1ec>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	d00c      	beq.n	8008212 <UART_SetConfig+0x1c2>
 80081f8:	d820      	bhi.n	800823c <UART_SetConfig+0x1ec>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <UART_SetConfig+0x1b4>
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d00e      	beq.n	8008220 <UART_SetConfig+0x1d0>
 8008202:	e01b      	b.n	800823c <UART_SetConfig+0x1ec>
 8008204:	231b      	movs	r3, #27
 8008206:	2220      	movs	r2, #32
 8008208:	189b      	adds	r3, r3, r2
 800820a:	19db      	adds	r3, r3, r7
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
 8008210:	e0e6      	b.n	80083e0 <UART_SetConfig+0x390>
 8008212:	231b      	movs	r3, #27
 8008214:	2220      	movs	r2, #32
 8008216:	189b      	adds	r3, r3, r2
 8008218:	19db      	adds	r3, r3, r7
 800821a:	2202      	movs	r2, #2
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e0df      	b.n	80083e0 <UART_SetConfig+0x390>
 8008220:	231b      	movs	r3, #27
 8008222:	2220      	movs	r2, #32
 8008224:	189b      	adds	r3, r3, r2
 8008226:	19db      	adds	r3, r3, r7
 8008228:	2204      	movs	r2, #4
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	e0d8      	b.n	80083e0 <UART_SetConfig+0x390>
 800822e:	231b      	movs	r3, #27
 8008230:	2220      	movs	r2, #32
 8008232:	189b      	adds	r3, r3, r2
 8008234:	19db      	adds	r3, r3, r7
 8008236:	2208      	movs	r2, #8
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e0d1      	b.n	80083e0 <UART_SetConfig+0x390>
 800823c:	231b      	movs	r3, #27
 800823e:	2220      	movs	r2, #32
 8008240:	189b      	adds	r3, r3, r2
 8008242:	19db      	adds	r3, r3, r7
 8008244:	2210      	movs	r2, #16
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e0ca      	b.n	80083e0 <UART_SetConfig+0x390>
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a57      	ldr	r2, [pc, #348]	; (80083ac <UART_SetConfig+0x35c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d106      	bne.n	8008262 <UART_SetConfig+0x212>
 8008254:	231b      	movs	r3, #27
 8008256:	2220      	movs	r2, #32
 8008258:	189b      	adds	r3, r3, r2
 800825a:	19db      	adds	r3, r3, r7
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]
 8008260:	e0be      	b.n	80083e0 <UART_SetConfig+0x390>
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a52      	ldr	r2, [pc, #328]	; (80083b0 <UART_SetConfig+0x360>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d106      	bne.n	800827a <UART_SetConfig+0x22a>
 800826c:	231b      	movs	r3, #27
 800826e:	2220      	movs	r2, #32
 8008270:	189b      	adds	r3, r3, r2
 8008272:	19db      	adds	r3, r3, r7
 8008274:	2200      	movs	r2, #0
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e0b2      	b.n	80083e0 <UART_SetConfig+0x390>
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4d      	ldr	r2, [pc, #308]	; (80083b4 <UART_SetConfig+0x364>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d106      	bne.n	8008292 <UART_SetConfig+0x242>
 8008284:	231b      	movs	r3, #27
 8008286:	2220      	movs	r2, #32
 8008288:	189b      	adds	r3, r3, r2
 800828a:	19db      	adds	r3, r3, r7
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e0a6      	b.n	80083e0 <UART_SetConfig+0x390>
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a3e      	ldr	r2, [pc, #248]	; (8008390 <UART_SetConfig+0x340>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d13e      	bne.n	800831a <UART_SetConfig+0x2ca>
 800829c:	4b40      	ldr	r3, [pc, #256]	; (80083a0 <UART_SetConfig+0x350>)
 800829e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082a0:	23c0      	movs	r3, #192	; 0xc0
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	4013      	ands	r3, r2
 80082a6:	22c0      	movs	r2, #192	; 0xc0
 80082a8:	0112      	lsls	r2, r2, #4
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d027      	beq.n	80082fe <UART_SetConfig+0x2ae>
 80082ae:	22c0      	movs	r2, #192	; 0xc0
 80082b0:	0112      	lsls	r2, r2, #4
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d82a      	bhi.n	800830c <UART_SetConfig+0x2bc>
 80082b6:	2280      	movs	r2, #128	; 0x80
 80082b8:	0112      	lsls	r2, r2, #4
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d011      	beq.n	80082e2 <UART_SetConfig+0x292>
 80082be:	2280      	movs	r2, #128	; 0x80
 80082c0:	0112      	lsls	r2, r2, #4
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d822      	bhi.n	800830c <UART_SetConfig+0x2bc>
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <UART_SetConfig+0x284>
 80082ca:	2280      	movs	r2, #128	; 0x80
 80082cc:	00d2      	lsls	r2, r2, #3
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d00e      	beq.n	80082f0 <UART_SetConfig+0x2a0>
 80082d2:	e01b      	b.n	800830c <UART_SetConfig+0x2bc>
 80082d4:	231b      	movs	r3, #27
 80082d6:	2220      	movs	r2, #32
 80082d8:	189b      	adds	r3, r3, r2
 80082da:	19db      	adds	r3, r3, r7
 80082dc:	2200      	movs	r2, #0
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	e07e      	b.n	80083e0 <UART_SetConfig+0x390>
 80082e2:	231b      	movs	r3, #27
 80082e4:	2220      	movs	r2, #32
 80082e6:	189b      	adds	r3, r3, r2
 80082e8:	19db      	adds	r3, r3, r7
 80082ea:	2202      	movs	r2, #2
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	e077      	b.n	80083e0 <UART_SetConfig+0x390>
 80082f0:	231b      	movs	r3, #27
 80082f2:	2220      	movs	r2, #32
 80082f4:	189b      	adds	r3, r3, r2
 80082f6:	19db      	adds	r3, r3, r7
 80082f8:	2204      	movs	r2, #4
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e070      	b.n	80083e0 <UART_SetConfig+0x390>
 80082fe:	231b      	movs	r3, #27
 8008300:	2220      	movs	r2, #32
 8008302:	189b      	adds	r3, r3, r2
 8008304:	19db      	adds	r3, r3, r7
 8008306:	2208      	movs	r2, #8
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e069      	b.n	80083e0 <UART_SetConfig+0x390>
 800830c:	231b      	movs	r3, #27
 800830e:	2220      	movs	r2, #32
 8008310:	189b      	adds	r3, r3, r2
 8008312:	19db      	adds	r3, r3, r7
 8008314:	2210      	movs	r2, #16
 8008316:	701a      	strb	r2, [r3, #0]
 8008318:	e062      	b.n	80083e0 <UART_SetConfig+0x390>
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1d      	ldr	r2, [pc, #116]	; (8008394 <UART_SetConfig+0x344>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d157      	bne.n	80083d4 <UART_SetConfig+0x384>
 8008324:	4b1e      	ldr	r3, [pc, #120]	; (80083a0 <UART_SetConfig+0x350>)
 8008326:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008328:	23c0      	movs	r3, #192	; 0xc0
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4013      	ands	r3, r2
 800832e:	22c0      	movs	r2, #192	; 0xc0
 8008330:	0092      	lsls	r2, r2, #2
 8008332:	4293      	cmp	r3, r2
 8008334:	d040      	beq.n	80083b8 <UART_SetConfig+0x368>
 8008336:	22c0      	movs	r2, #192	; 0xc0
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	4293      	cmp	r3, r2
 800833c:	d843      	bhi.n	80083c6 <UART_SetConfig+0x376>
 800833e:	2280      	movs	r2, #128	; 0x80
 8008340:	0092      	lsls	r2, r2, #2
 8008342:	4293      	cmp	r3, r2
 8008344:	d011      	beq.n	800836a <UART_SetConfig+0x31a>
 8008346:	2280      	movs	r2, #128	; 0x80
 8008348:	0092      	lsls	r2, r2, #2
 800834a:	4293      	cmp	r3, r2
 800834c:	d83b      	bhi.n	80083c6 <UART_SetConfig+0x376>
 800834e:	2b00      	cmp	r3, #0
 8008350:	d004      	beq.n	800835c <UART_SetConfig+0x30c>
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	0052      	lsls	r2, r2, #1
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <UART_SetConfig+0x328>
 800835a:	e034      	b.n	80083c6 <UART_SetConfig+0x376>
 800835c:	231b      	movs	r3, #27
 800835e:	2220      	movs	r2, #32
 8008360:	189b      	adds	r3, r3, r2
 8008362:	19db      	adds	r3, r3, r7
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]
 8008368:	e03a      	b.n	80083e0 <UART_SetConfig+0x390>
 800836a:	231b      	movs	r3, #27
 800836c:	2220      	movs	r2, #32
 800836e:	189b      	adds	r3, r3, r2
 8008370:	19db      	adds	r3, r3, r7
 8008372:	2202      	movs	r2, #2
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e033      	b.n	80083e0 <UART_SetConfig+0x390>
 8008378:	231b      	movs	r3, #27
 800837a:	2220      	movs	r2, #32
 800837c:	189b      	adds	r3, r3, r2
 800837e:	19db      	adds	r3, r3, r7
 8008380:	2204      	movs	r2, #4
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e02c      	b.n	80083e0 <UART_SetConfig+0x390>
 8008386:	46c0      	nop			; (mov r8, r8)
 8008388:	cfff69f3 	.word	0xcfff69f3
 800838c:	ffffcfff 	.word	0xffffcfff
 8008390:	40008000 	.word	0x40008000
 8008394:	40008400 	.word	0x40008400
 8008398:	11fff4ff 	.word	0x11fff4ff
 800839c:	40013800 	.word	0x40013800
 80083a0:	40021000 	.word	0x40021000
 80083a4:	40004400 	.word	0x40004400
 80083a8:	40004800 	.word	0x40004800
 80083ac:	40004c00 	.word	0x40004c00
 80083b0:	40005000 	.word	0x40005000
 80083b4:	40013c00 	.word	0x40013c00
 80083b8:	231b      	movs	r3, #27
 80083ba:	2220      	movs	r2, #32
 80083bc:	189b      	adds	r3, r3, r2
 80083be:	19db      	adds	r3, r3, r7
 80083c0:	2208      	movs	r2, #8
 80083c2:	701a      	strb	r2, [r3, #0]
 80083c4:	e00c      	b.n	80083e0 <UART_SetConfig+0x390>
 80083c6:	231b      	movs	r3, #27
 80083c8:	2220      	movs	r2, #32
 80083ca:	189b      	adds	r3, r3, r2
 80083cc:	19db      	adds	r3, r3, r7
 80083ce:	2210      	movs	r2, #16
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e005      	b.n	80083e0 <UART_SetConfig+0x390>
 80083d4:	231b      	movs	r3, #27
 80083d6:	2220      	movs	r2, #32
 80083d8:	189b      	adds	r3, r3, r2
 80083da:	19db      	adds	r3, r3, r7
 80083dc:	2210      	movs	r2, #16
 80083de:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4ac1      	ldr	r2, [pc, #772]	; (80086ec <UART_SetConfig+0x69c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d005      	beq.n	80083f6 <UART_SetConfig+0x3a6>
 80083ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4ac0      	ldr	r2, [pc, #768]	; (80086f0 <UART_SetConfig+0x6a0>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d000      	beq.n	80083f6 <UART_SetConfig+0x3a6>
 80083f4:	e093      	b.n	800851e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083f6:	231b      	movs	r3, #27
 80083f8:	2220      	movs	r2, #32
 80083fa:	189b      	adds	r3, r3, r2
 80083fc:	19db      	adds	r3, r3, r7
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b08      	cmp	r3, #8
 8008402:	d015      	beq.n	8008430 <UART_SetConfig+0x3e0>
 8008404:	dc18      	bgt.n	8008438 <UART_SetConfig+0x3e8>
 8008406:	2b04      	cmp	r3, #4
 8008408:	d00d      	beq.n	8008426 <UART_SetConfig+0x3d6>
 800840a:	dc15      	bgt.n	8008438 <UART_SetConfig+0x3e8>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d002      	beq.n	8008416 <UART_SetConfig+0x3c6>
 8008410:	2b02      	cmp	r3, #2
 8008412:	d005      	beq.n	8008420 <UART_SetConfig+0x3d0>
 8008414:	e010      	b.n	8008438 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008416:	f7fd f9ed 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 800841a:	0003      	movs	r3, r0
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800841e:	e014      	b.n	800844a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008420:	4bb4      	ldr	r3, [pc, #720]	; (80086f4 <UART_SetConfig+0x6a4>)
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008424:	e011      	b.n	800844a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008426:	f7fd f959 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 800842a:	0003      	movs	r3, r0
 800842c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800842e:	e00c      	b.n	800844a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008436:	e008      	b.n	800844a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800843c:	231a      	movs	r3, #26
 800843e:	2220      	movs	r2, #32
 8008440:	189b      	adds	r3, r3, r2
 8008442:	19db      	adds	r3, r3, r7
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
        break;
 8008448:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844c:	2b00      	cmp	r3, #0
 800844e:	d100      	bne.n	8008452 <UART_SetConfig+0x402>
 8008450:	e135      	b.n	80086be <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008456:	4ba8      	ldr	r3, [pc, #672]	; (80086f8 <UART_SetConfig+0x6a8>)
 8008458:	0052      	lsls	r2, r2, #1
 800845a:	5ad3      	ldrh	r3, [r2, r3]
 800845c:	0019      	movs	r1, r3
 800845e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008460:	f7f7 fe6c 	bl	800013c <__udivsi3>
 8008464:	0003      	movs	r3, r0
 8008466:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	0013      	movs	r3, r2
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	189b      	adds	r3, r3, r2
 8008472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008474:	429a      	cmp	r2, r3
 8008476:	d305      	bcc.n	8008484 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800847e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008480:	429a      	cmp	r2, r3
 8008482:	d906      	bls.n	8008492 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008484:	231a      	movs	r3, #26
 8008486:	2220      	movs	r2, #32
 8008488:	189b      	adds	r3, r3, r2
 800848a:	19db      	adds	r3, r3, r7
 800848c:	2201      	movs	r2, #1
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e044      	b.n	800851c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008494:	61bb      	str	r3, [r7, #24]
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800849e:	4b96      	ldr	r3, [pc, #600]	; (80086f8 <UART_SetConfig+0x6a8>)
 80084a0:	0052      	lsls	r2, r2, #1
 80084a2:	5ad3      	ldrh	r3, [r2, r3]
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	69b8      	ldr	r0, [r7, #24]
 80084b0:	69f9      	ldr	r1, [r7, #28]
 80084b2:	f7f7 fff7 	bl	80004a4 <__aeabi_uldivmod>
 80084b6:	0002      	movs	r2, r0
 80084b8:	000b      	movs	r3, r1
 80084ba:	0e11      	lsrs	r1, r2, #24
 80084bc:	021d      	lsls	r5, r3, #8
 80084be:	430d      	orrs	r5, r1
 80084c0:	0214      	lsls	r4, r2, #8
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	60bb      	str	r3, [r7, #8]
 80084ca:	2300      	movs	r3, #0
 80084cc:	60fb      	str	r3, [r7, #12]
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	1900      	adds	r0, r0, r4
 80084d4:	4169      	adcs	r1, r5
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	2300      	movs	r3, #0
 80084de:	607b      	str	r3, [r7, #4]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f7f7 ffde 	bl	80004a4 <__aeabi_uldivmod>
 80084e8:	0002      	movs	r2, r0
 80084ea:	000b      	movs	r3, r1
 80084ec:	0013      	movs	r3, r2
 80084ee:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f2:	23c0      	movs	r3, #192	; 0xc0
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d309      	bcc.n	800850e <UART_SetConfig+0x4be>
 80084fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	035b      	lsls	r3, r3, #13
 8008500:	429a      	cmp	r2, r3
 8008502:	d204      	bcs.n	800850e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850a:	60da      	str	r2, [r3, #12]
 800850c:	e006      	b.n	800851c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800850e:	231a      	movs	r3, #26
 8008510:	2220      	movs	r2, #32
 8008512:	189b      	adds	r3, r3, r2
 8008514:	19db      	adds	r3, r3, r7
 8008516:	2201      	movs	r2, #1
 8008518:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800851a:	e0d0      	b.n	80086be <UART_SetConfig+0x66e>
 800851c:	e0cf      	b.n	80086be <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	69da      	ldr	r2, [r3, #28]
 8008522:	2380      	movs	r3, #128	; 0x80
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	429a      	cmp	r2, r3
 8008528:	d000      	beq.n	800852c <UART_SetConfig+0x4dc>
 800852a:	e070      	b.n	800860e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800852c:	231b      	movs	r3, #27
 800852e:	2220      	movs	r2, #32
 8008530:	189b      	adds	r3, r3, r2
 8008532:	19db      	adds	r3, r3, r7
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	2b08      	cmp	r3, #8
 8008538:	d015      	beq.n	8008566 <UART_SetConfig+0x516>
 800853a:	dc18      	bgt.n	800856e <UART_SetConfig+0x51e>
 800853c:	2b04      	cmp	r3, #4
 800853e:	d00d      	beq.n	800855c <UART_SetConfig+0x50c>
 8008540:	dc15      	bgt.n	800856e <UART_SetConfig+0x51e>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d002      	beq.n	800854c <UART_SetConfig+0x4fc>
 8008546:	2b02      	cmp	r3, #2
 8008548:	d005      	beq.n	8008556 <UART_SetConfig+0x506>
 800854a:	e010      	b.n	800856e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800854c:	f7fd f952 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8008550:	0003      	movs	r3, r0
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008554:	e014      	b.n	8008580 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008556:	4b67      	ldr	r3, [pc, #412]	; (80086f4 <UART_SetConfig+0x6a4>)
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800855a:	e011      	b.n	8008580 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800855c:	f7fd f8be 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8008560:	0003      	movs	r3, r0
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008564:	e00c      	b.n	8008580 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008566:	2380      	movs	r3, #128	; 0x80
 8008568:	021b      	lsls	r3, r3, #8
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800856c:	e008      	b.n	8008580 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008572:	231a      	movs	r3, #26
 8008574:	2220      	movs	r2, #32
 8008576:	189b      	adds	r3, r3, r2
 8008578:	19db      	adds	r3, r3, r7
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
        break;
 800857e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	2b00      	cmp	r3, #0
 8008584:	d100      	bne.n	8008588 <UART_SetConfig+0x538>
 8008586:	e09a      	b.n	80086be <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800858c:	4b5a      	ldr	r3, [pc, #360]	; (80086f8 <UART_SetConfig+0x6a8>)
 800858e:	0052      	lsls	r2, r2, #1
 8008590:	5ad3      	ldrh	r3, [r2, r3]
 8008592:	0019      	movs	r1, r3
 8008594:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008596:	f7f7 fdd1 	bl	800013c <__udivsi3>
 800859a:	0003      	movs	r3, r0
 800859c:	005a      	lsls	r2, r3, #1
 800859e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	085b      	lsrs	r3, r3, #1
 80085a4:	18d2      	adds	r2, r2, r3
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	0019      	movs	r1, r3
 80085ac:	0010      	movs	r0, r2
 80085ae:	f7f7 fdc5 	bl	800013c <__udivsi3>
 80085b2:	0003      	movs	r3, r0
 80085b4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	2b0f      	cmp	r3, #15
 80085ba:	d921      	bls.n	8008600 <UART_SetConfig+0x5b0>
 80085bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085be:	2380      	movs	r3, #128	; 0x80
 80085c0:	025b      	lsls	r3, r3, #9
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d21c      	bcs.n	8008600 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	200e      	movs	r0, #14
 80085cc:	2420      	movs	r4, #32
 80085ce:	1903      	adds	r3, r0, r4
 80085d0:	19db      	adds	r3, r3, r7
 80085d2:	210f      	movs	r1, #15
 80085d4:	438a      	bics	r2, r1
 80085d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	085b      	lsrs	r3, r3, #1
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2207      	movs	r2, #7
 80085e0:	4013      	ands	r3, r2
 80085e2:	b299      	uxth	r1, r3
 80085e4:	1903      	adds	r3, r0, r4
 80085e6:	19db      	adds	r3, r3, r7
 80085e8:	1902      	adds	r2, r0, r4
 80085ea:	19d2      	adds	r2, r2, r7
 80085ec:	8812      	ldrh	r2, [r2, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1902      	adds	r2, r0, r4
 80085f8:	19d2      	adds	r2, r2, r7
 80085fa:	8812      	ldrh	r2, [r2, #0]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	e05e      	b.n	80086be <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008600:	231a      	movs	r3, #26
 8008602:	2220      	movs	r2, #32
 8008604:	189b      	adds	r3, r3, r2
 8008606:	19db      	adds	r3, r3, r7
 8008608:	2201      	movs	r2, #1
 800860a:	701a      	strb	r2, [r3, #0]
 800860c:	e057      	b.n	80086be <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800860e:	231b      	movs	r3, #27
 8008610:	2220      	movs	r2, #32
 8008612:	189b      	adds	r3, r3, r2
 8008614:	19db      	adds	r3, r3, r7
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b08      	cmp	r3, #8
 800861a:	d015      	beq.n	8008648 <UART_SetConfig+0x5f8>
 800861c:	dc18      	bgt.n	8008650 <UART_SetConfig+0x600>
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00d      	beq.n	800863e <UART_SetConfig+0x5ee>
 8008622:	dc15      	bgt.n	8008650 <UART_SetConfig+0x600>
 8008624:	2b00      	cmp	r3, #0
 8008626:	d002      	beq.n	800862e <UART_SetConfig+0x5de>
 8008628:	2b02      	cmp	r3, #2
 800862a:	d005      	beq.n	8008638 <UART_SetConfig+0x5e8>
 800862c:	e010      	b.n	8008650 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800862e:	f7fd f8e1 	bl	80057f4 <HAL_RCC_GetPCLK1Freq>
 8008632:	0003      	movs	r3, r0
 8008634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008636:	e014      	b.n	8008662 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008638:	4b2e      	ldr	r3, [pc, #184]	; (80086f4 <UART_SetConfig+0x6a4>)
 800863a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800863c:	e011      	b.n	8008662 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800863e:	f7fd f84d 	bl	80056dc <HAL_RCC_GetSysClockFreq>
 8008642:	0003      	movs	r3, r0
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008646:	e00c      	b.n	8008662 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008648:	2380      	movs	r3, #128	; 0x80
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800864e:	e008      	b.n	8008662 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008654:	231a      	movs	r3, #26
 8008656:	2220      	movs	r2, #32
 8008658:	189b      	adds	r3, r3, r2
 800865a:	19db      	adds	r3, r3, r7
 800865c:	2201      	movs	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
        break;
 8008660:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	2b00      	cmp	r3, #0
 8008666:	d02a      	beq.n	80086be <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800866c:	4b22      	ldr	r3, [pc, #136]	; (80086f8 <UART_SetConfig+0x6a8>)
 800866e:	0052      	lsls	r2, r2, #1
 8008670:	5ad3      	ldrh	r3, [r2, r3]
 8008672:	0019      	movs	r1, r3
 8008674:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008676:	f7f7 fd61 	bl	800013c <__udivsi3>
 800867a:	0003      	movs	r3, r0
 800867c:	001a      	movs	r2, r3
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	18d2      	adds	r2, r2, r3
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	0019      	movs	r1, r3
 800868c:	0010      	movs	r0, r2
 800868e:	f7f7 fd55 	bl	800013c <__udivsi3>
 8008692:	0003      	movs	r3, r0
 8008694:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	2b0f      	cmp	r3, #15
 800869a:	d90a      	bls.n	80086b2 <UART_SetConfig+0x662>
 800869c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	025b      	lsls	r3, r3, #9
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d205      	bcs.n	80086b2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60da      	str	r2, [r3, #12]
 80086b0:	e005      	b.n	80086be <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80086b2:	231a      	movs	r3, #26
 80086b4:	2220      	movs	r2, #32
 80086b6:	189b      	adds	r3, r3, r2
 80086b8:	19db      	adds	r3, r3, r7
 80086ba:	2201      	movs	r2, #1
 80086bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	226a      	movs	r2, #106	; 0x6a
 80086c2:	2101      	movs	r1, #1
 80086c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	2268      	movs	r2, #104	; 0x68
 80086ca:	2101      	movs	r1, #1
 80086cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	2200      	movs	r2, #0
 80086d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	2200      	movs	r2, #0
 80086d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086da:	231a      	movs	r3, #26
 80086dc:	2220      	movs	r2, #32
 80086de:	189b      	adds	r3, r3, r2
 80086e0:	19db      	adds	r3, r3, r7
 80086e2:	781b      	ldrb	r3, [r3, #0]
}
 80086e4:	0018      	movs	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	b010      	add	sp, #64	; 0x40
 80086ea:	bdb0      	pop	{r4, r5, r7, pc}
 80086ec:	40008000 	.word	0x40008000
 80086f0:	40008400 	.word	0x40008400
 80086f4:	00f42400 	.word	0x00f42400
 80086f8:	08015a64 	.word	0x08015a64

080086fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	2208      	movs	r2, #8
 800870a:	4013      	ands	r3, r2
 800870c:	d00b      	beq.n	8008726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	4a4a      	ldr	r2, [pc, #296]	; (8008840 <UART_AdvFeatureConfig+0x144>)
 8008716:	4013      	ands	r3, r2
 8008718:	0019      	movs	r1, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	2201      	movs	r2, #1
 800872c:	4013      	ands	r3, r2
 800872e:	d00b      	beq.n	8008748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	4a43      	ldr	r2, [pc, #268]	; (8008844 <UART_AdvFeatureConfig+0x148>)
 8008738:	4013      	ands	r3, r2
 800873a:	0019      	movs	r1, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	2202      	movs	r2, #2
 800874e:	4013      	ands	r3, r2
 8008750:	d00b      	beq.n	800876a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4a3b      	ldr	r2, [pc, #236]	; (8008848 <UART_AdvFeatureConfig+0x14c>)
 800875a:	4013      	ands	r3, r2
 800875c:	0019      	movs	r1, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	2204      	movs	r2, #4
 8008770:	4013      	ands	r3, r2
 8008772:	d00b      	beq.n	800878c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	4a34      	ldr	r2, [pc, #208]	; (800884c <UART_AdvFeatureConfig+0x150>)
 800877c:	4013      	ands	r3, r2
 800877e:	0019      	movs	r1, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	2210      	movs	r2, #16
 8008792:	4013      	ands	r3, r2
 8008794:	d00b      	beq.n	80087ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	4a2c      	ldr	r2, [pc, #176]	; (8008850 <UART_AdvFeatureConfig+0x154>)
 800879e:	4013      	ands	r3, r2
 80087a0:	0019      	movs	r1, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	2220      	movs	r2, #32
 80087b4:	4013      	ands	r3, r2
 80087b6:	d00b      	beq.n	80087d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	4a25      	ldr	r2, [pc, #148]	; (8008854 <UART_AdvFeatureConfig+0x158>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	0019      	movs	r1, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	2240      	movs	r2, #64	; 0x40
 80087d6:	4013      	ands	r3, r2
 80087d8:	d01d      	beq.n	8008816 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a1d      	ldr	r2, [pc, #116]	; (8008858 <UART_AdvFeatureConfig+0x15c>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	0019      	movs	r1, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f6:	2380      	movs	r3, #128	; 0x80
 80087f8:	035b      	lsls	r3, r3, #13
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d10b      	bne.n	8008816 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	4a15      	ldr	r2, [pc, #84]	; (800885c <UART_AdvFeatureConfig+0x160>)
 8008806:	4013      	ands	r3, r2
 8008808:	0019      	movs	r1, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881a:	2280      	movs	r2, #128	; 0x80
 800881c:	4013      	ands	r3, r2
 800881e:	d00b      	beq.n	8008838 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	4a0e      	ldr	r2, [pc, #56]	; (8008860 <UART_AdvFeatureConfig+0x164>)
 8008828:	4013      	ands	r3, r2
 800882a:	0019      	movs	r1, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	605a      	str	r2, [r3, #4]
  }
}
 8008838:	46c0      	nop			; (mov r8, r8)
 800883a:	46bd      	mov	sp, r7
 800883c:	b002      	add	sp, #8
 800883e:	bd80      	pop	{r7, pc}
 8008840:	ffff7fff 	.word	0xffff7fff
 8008844:	fffdffff 	.word	0xfffdffff
 8008848:	fffeffff 	.word	0xfffeffff
 800884c:	fffbffff 	.word	0xfffbffff
 8008850:	ffffefff 	.word	0xffffefff
 8008854:	ffffdfff 	.word	0xffffdfff
 8008858:	ffefffff 	.word	0xffefffff
 800885c:	ff9fffff 	.word	0xff9fffff
 8008860:	fff7ffff 	.word	0xfff7ffff

08008864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b092      	sub	sp, #72	; 0x48
 8008868:	af02      	add	r7, sp, #8
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2290      	movs	r2, #144	; 0x90
 8008870:	2100      	movs	r1, #0
 8008872:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008874:	f7fb fe18 	bl	80044a8 <HAL_GetTick>
 8008878:	0003      	movs	r3, r0
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2208      	movs	r2, #8
 8008884:	4013      	ands	r3, r2
 8008886:	2b08      	cmp	r3, #8
 8008888:	d12d      	bne.n	80088e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	2280      	movs	r2, #128	; 0x80
 800888e:	0391      	lsls	r1, r2, #14
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	4a47      	ldr	r2, [pc, #284]	; (80089b0 <UART_CheckIdleState+0x14c>)
 8008894:	9200      	str	r2, [sp, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	f000 f88e 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 800889c:	1e03      	subs	r3, r0, #0
 800889e:	d022      	beq.n	80088e6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a0:	f3ef 8310 	mrs	r3, PRIMASK
 80088a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088aa:	2301      	movs	r3, #1
 80088ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	f383 8810 	msr	PRIMASK, r3
}
 80088b4:	46c0      	nop			; (mov r8, r8)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2180      	movs	r1, #128	; 0x80
 80088c2:	438a      	bics	r2, r1
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	f383 8810 	msr	PRIMASK, r3
}
 80088d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2288      	movs	r2, #136	; 0x88
 80088d6:	2120      	movs	r1, #32
 80088d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2284      	movs	r2, #132	; 0x84
 80088de:	2100      	movs	r1, #0
 80088e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e060      	b.n	80089a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2204      	movs	r2, #4
 80088ee:	4013      	ands	r3, r2
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d146      	bne.n	8008982 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f6:	2280      	movs	r2, #128	; 0x80
 80088f8:	03d1      	lsls	r1, r2, #15
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4a2c      	ldr	r2, [pc, #176]	; (80089b0 <UART_CheckIdleState+0x14c>)
 80088fe:	9200      	str	r2, [sp, #0]
 8008900:	2200      	movs	r2, #0
 8008902:	f000 f859 	bl	80089b8 <UART_WaitOnFlagUntilTimeout>
 8008906:	1e03      	subs	r3, r0, #0
 8008908:	d03b      	beq.n	8008982 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800890a:	f3ef 8310 	mrs	r3, PRIMASK
 800890e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008910:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
 8008914:	2301      	movs	r3, #1
 8008916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	f383 8810 	msr	PRIMASK, r3
}
 800891e:	46c0      	nop			; (mov r8, r8)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4922      	ldr	r1, [pc, #136]	; (80089b4 <UART_CheckIdleState+0x150>)
 800892c:	400a      	ands	r2, r1
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	f383 8810 	msr	PRIMASK, r3
}
 800893a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893c:	f3ef 8310 	mrs	r3, PRIMASK
 8008940:	61bb      	str	r3, [r7, #24]
  return(result);
 8008942:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008944:	633b      	str	r3, [r7, #48]	; 0x30
 8008946:	2301      	movs	r3, #1
 8008948:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	f383 8810 	msr	PRIMASK, r3
}
 8008950:	46c0      	nop			; (mov r8, r8)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2101      	movs	r1, #1
 800895e:	438a      	bics	r2, r1
 8008960:	609a      	str	r2, [r3, #8]
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	f383 8810 	msr	PRIMASK, r3
}
 800896c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	228c      	movs	r2, #140	; 0x8c
 8008972:	2120      	movs	r1, #32
 8008974:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2284      	movs	r2, #132	; 0x84
 800897a:	2100      	movs	r1, #0
 800897c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e012      	b.n	80089a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2288      	movs	r2, #136	; 0x88
 8008986:	2120      	movs	r1, #32
 8008988:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	228c      	movs	r2, #140	; 0x8c
 800898e:	2120      	movs	r1, #32
 8008990:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2284      	movs	r2, #132	; 0x84
 80089a2:	2100      	movs	r1, #0
 80089a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b010      	add	sp, #64	; 0x40
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	01ffffff 	.word	0x01ffffff
 80089b4:	fffffedf 	.word	0xfffffedf

080089b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	1dfb      	adds	r3, r7, #7
 80089c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c8:	e051      	b.n	8008a6e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	3301      	adds	r3, #1
 80089ce:	d04e      	beq.n	8008a6e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089d0:	f7fb fd6a 	bl	80044a8 <HAL_GetTick>
 80089d4:	0002      	movs	r2, r0
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d302      	bcc.n	80089e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e051      	b.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2204      	movs	r2, #4
 80089f2:	4013      	ands	r3, r2
 80089f4:	d03b      	beq.n	8008a6e <UART_WaitOnFlagUntilTimeout+0xb6>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2b80      	cmp	r3, #128	; 0x80
 80089fa:	d038      	beq.n	8008a6e <UART_WaitOnFlagUntilTimeout+0xb6>
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d035      	beq.n	8008a6e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69db      	ldr	r3, [r3, #28]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d111      	bne.n	8008a34 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2208      	movs	r2, #8
 8008a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f000 f83c 	bl	8008a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2290      	movs	r2, #144	; 0x90
 8008a24:	2108      	movs	r1, #8
 8008a26:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2284      	movs	r2, #132	; 0x84
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e02c      	b.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69da      	ldr	r2, [r3, #28]
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	011b      	lsls	r3, r3, #4
 8008a3e:	401a      	ands	r2, r3
 8008a40:	2380      	movs	r3, #128	; 0x80
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d112      	bne.n	8008a6e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2280      	movs	r2, #128	; 0x80
 8008a4e:	0112      	lsls	r2, r2, #4
 8008a50:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 f81f 	bl	8008a98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2290      	movs	r2, #144	; 0x90
 8008a5e:	2120      	movs	r1, #32
 8008a60:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2284      	movs	r2, #132	; 0x84
 8008a66:	2100      	movs	r1, #0
 8008a68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e00f      	b.n	8008a8e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	4013      	ands	r3, r2
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	425a      	negs	r2, r3
 8008a7e:	4153      	adcs	r3, r2
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	001a      	movs	r2, r3
 8008a84:	1dfb      	adds	r3, r7, #7
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d09e      	beq.n	80089ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	0018      	movs	r0, r3
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b004      	add	sp, #16
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08e      	sub	sp, #56	; 0x38
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8008aa6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aaa:	2301      	movs	r3, #1
 8008aac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	f383 8810 	msr	PRIMASK, r3
}
 8008ab4:	46c0      	nop			; (mov r8, r8)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4926      	ldr	r1, [pc, #152]	; (8008b5c <UART_EndRxTransfer+0xc4>)
 8008ac2:	400a      	ands	r2, r1
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f383 8810 	msr	PRIMASK, r3
}
 8008ad0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad6:	623b      	str	r3, [r7, #32]
  return(result);
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ada:	633b      	str	r3, [r7, #48]	; 0x30
 8008adc:	2301      	movs	r3, #1
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	f383 8810 	msr	PRIMASK, r3
}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	491b      	ldr	r1, [pc, #108]	; (8008b60 <UART_EndRxTransfer+0xc8>)
 8008af4:	400a      	ands	r2, r1
 8008af6:	609a      	str	r2, [r3, #8]
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	f383 8810 	msr	PRIMASK, r3
}
 8008b02:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d118      	bne.n	8008b3e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b12:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b16:	2301      	movs	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f383 8810 	msr	PRIMASK, r3
}
 8008b20:	46c0      	nop			; (mov r8, r8)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2110      	movs	r1, #16
 8008b2e:	438a      	bics	r2, r1
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f383 8810 	msr	PRIMASK, r3
}
 8008b3c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	228c      	movs	r2, #140	; 0x8c
 8008b42:	2120      	movs	r1, #32
 8008b44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b00e      	add	sp, #56	; 0x38
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	fffffedf 	.word	0xfffffedf
 8008b60:	effffffe 	.word	0xeffffffe

08008b64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2284      	movs	r2, #132	; 0x84
 8008b70:	5c9b      	ldrb	r3, [r3, r2]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <HAL_UARTEx_DisableFifoMode+0x16>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e027      	b.n	8008bca <HAL_UARTEx_DisableFifoMode+0x66>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2284      	movs	r2, #132	; 0x84
 8008b7e:	2101      	movs	r1, #1
 8008b80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2288      	movs	r2, #136	; 0x88
 8008b86:	2124      	movs	r1, #36	; 0x24
 8008b88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	438a      	bics	r2, r1
 8008ba0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4a0b      	ldr	r2, [pc, #44]	; (8008bd4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2288      	movs	r2, #136	; 0x88
 8008bbc:	2120      	movs	r1, #32
 8008bbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2284      	movs	r2, #132	; 0x84
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	0018      	movs	r0, r3
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	b004      	add	sp, #16
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	dfffffff 	.word	0xdfffffff

08008bd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2284      	movs	r2, #132	; 0x84
 8008be6:	5c9b      	ldrb	r3, [r3, r2]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d101      	bne.n	8008bf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bec:	2302      	movs	r3, #2
 8008bee:	e02e      	b.n	8008c4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2284      	movs	r2, #132	; 0x84
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2288      	movs	r2, #136	; 0x88
 8008bfc:	2124      	movs	r1, #36	; 0x24
 8008bfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2101      	movs	r1, #1
 8008c14:	438a      	bics	r2, r1
 8008c16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	00db      	lsls	r3, r3, #3
 8008c20:	08d9      	lsrs	r1, r3, #3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f000 f854 	bl	8008cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2288      	movs	r2, #136	; 0x88
 8008c40:	2120      	movs	r1, #32
 8008c42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2284      	movs	r2, #132	; 0x84
 8008c48:	2100      	movs	r1, #0
 8008c4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	0018      	movs	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	b004      	add	sp, #16
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2284      	movs	r2, #132	; 0x84
 8008c66:	5c9b      	ldrb	r3, [r3, r2]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e02f      	b.n	8008cd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2284      	movs	r2, #132	; 0x84
 8008c74:	2101      	movs	r1, #1
 8008c76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2288      	movs	r2, #136	; 0x88
 8008c7c:	2124      	movs	r1, #36	; 0x24
 8008c7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2101      	movs	r1, #1
 8008c94:	438a      	bics	r2, r1
 8008c96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	4a0e      	ldr	r2, [pc, #56]	; (8008cd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	0019      	movs	r1, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f000 f813 	bl	8008cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2288      	movs	r2, #136	; 0x88
 8008cc2:	2120      	movs	r1, #32
 8008cc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2284      	movs	r2, #132	; 0x84
 8008cca:	2100      	movs	r1, #0
 8008ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	b004      	add	sp, #16
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	f1ffffff 	.word	0xf1ffffff

08008cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cde:	b085      	sub	sp, #20
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d108      	bne.n	8008cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	226a      	movs	r2, #106	; 0x6a
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2268      	movs	r2, #104	; 0x68
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cfc:	e043      	b.n	8008d86 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cfe:	260f      	movs	r6, #15
 8008d00:	19bb      	adds	r3, r7, r6
 8008d02:	2208      	movs	r2, #8
 8008d04:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d06:	200e      	movs	r0, #14
 8008d08:	183b      	adds	r3, r7, r0
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	0e5b      	lsrs	r3, r3, #25
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	240d      	movs	r4, #13
 8008d1a:	193b      	adds	r3, r7, r4
 8008d1c:	2107      	movs	r1, #7
 8008d1e:	400a      	ands	r2, r1
 8008d20:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	0f5b      	lsrs	r3, r3, #29
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	250c      	movs	r5, #12
 8008d2e:	197b      	adds	r3, r7, r5
 8008d30:	2107      	movs	r1, #7
 8008d32:	400a      	ands	r2, r1
 8008d34:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d36:	183b      	adds	r3, r7, r0
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	197a      	adds	r2, r7, r5
 8008d3c:	7812      	ldrb	r2, [r2, #0]
 8008d3e:	4914      	ldr	r1, [pc, #80]	; (8008d90 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d40:	5c8a      	ldrb	r2, [r1, r2]
 8008d42:	435a      	muls	r2, r3
 8008d44:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d46:	197b      	adds	r3, r7, r5
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	4a12      	ldr	r2, [pc, #72]	; (8008d94 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d4e:	0019      	movs	r1, r3
 8008d50:	f7f7 fa7e 	bl	8000250 <__divsi3>
 8008d54:	0003      	movs	r3, r0
 8008d56:	b299      	uxth	r1, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	226a      	movs	r2, #106	; 0x6a
 8008d5c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d5e:	19bb      	adds	r3, r7, r6
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	193a      	adds	r2, r7, r4
 8008d64:	7812      	ldrb	r2, [r2, #0]
 8008d66:	490a      	ldr	r1, [pc, #40]	; (8008d90 <UARTEx_SetNbDataToProcess+0xb4>)
 8008d68:	5c8a      	ldrb	r2, [r1, r2]
 8008d6a:	435a      	muls	r2, r3
 8008d6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d6e:	193b      	adds	r3, r7, r4
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	4a08      	ldr	r2, [pc, #32]	; (8008d94 <UARTEx_SetNbDataToProcess+0xb8>)
 8008d74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d76:	0019      	movs	r1, r3
 8008d78:	f7f7 fa6a 	bl	8000250 <__divsi3>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	b299      	uxth	r1, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2268      	movs	r2, #104	; 0x68
 8008d84:	5299      	strh	r1, [r3, r2]
}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	b005      	add	sp, #20
 8008d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	08015a7c 	.word	0x08015a7c
 8008d94:	08015a84 	.word	0x08015a84

08008d98 <astronode_send_cfg_sr>:
        }
    }
}

void astronode_send_cfg_sr(void)
{
 8008d98:	b5b0      	push	{r4, r5, r7, lr}
 8008d9a:	b0e4      	sub	sp, #400	; 0x190
 8008d9c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008d9e:	24c8      	movs	r4, #200	; 0xc8
 8008da0:	193b      	adds	r3, r7, r4
 8008da2:	0018      	movs	r0, r3
 8008da4:	23c6      	movs	r3, #198	; 0xc6
 8008da6:	001a      	movs	r2, r3
 8008da8:	2100      	movs	r1, #0
 8008daa:	f004 faf9 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <astronode_send_cfg_sr+0x64>)
 8008db0:	25c8      	movs	r5, #200	; 0xc8
 8008db2:	006d      	lsls	r5, r5, #1
 8008db4:	195b      	adds	r3, r3, r5
 8008db6:	19db      	adds	r3, r3, r7
 8008db8:	0018      	movs	r0, r3
 8008dba:	23c6      	movs	r3, #198	; 0xc6
 8008dbc:	001a      	movs	r2, r3
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	f004 faee 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_SR;
 8008dc4:	193b      	adds	r3, r7, r4
 8008dc6:	2210      	movs	r2, #16
 8008dc8:	701a      	strb	r2, [r3, #0]

    astronode_transport_send_receive(&request, &answer);
 8008dca:	003a      	movs	r2, r7
 8008dcc:	193b      	adds	r3, r7, r4
 8008dce:	0011      	movs	r1, r2
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f001 fa87 	bl	800a2e4 <astronode_transport_send_receive>

    if (answer.op_code == ASTRONODE_OP_CODE_CFG_SA)
 8008dd6:	4b09      	ldr	r3, [pc, #36]	; (8008dfc <astronode_send_cfg_sr+0x64>)
 8008dd8:	195b      	adds	r3, r3, r5
 8008dda:	19db      	adds	r3, r3, r7
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b90      	cmp	r3, #144	; 0x90
 8008de0:	d104      	bne.n	8008dec <astronode_send_cfg_sr+0x54>
    {
        send_debug_logs("Astronode configuration successfully saved in NVM.");
 8008de2:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <astronode_send_cfg_sr+0x68>)
 8008de4:	0018      	movs	r0, r3
 8008de6:	f7fa f97f 	bl	80030e8 <send_debug_logs>
    }
    else
    {
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
    }
}
 8008dea:	e003      	b.n	8008df4 <astronode_send_cfg_sr+0x5c>
        send_debug_logs("Failed to save the Astronode configuration in NVM.");
 8008dec:	4b05      	ldr	r3, [pc, #20]	; (8008e04 <astronode_send_cfg_sr+0x6c>)
 8008dee:	0018      	movs	r0, r3
 8008df0:	f7fa f97a 	bl	80030e8 <send_debug_logs>
}
 8008df4:	46c0      	nop			; (mov r8, r8)
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b064      	add	sp, #400	; 0x190
 8008dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8008dfc:	fffffe70 	.word	0xfffffe70
 8008e00:	080144a0 	.word	0x080144a0
 8008e04:	080144d4 	.word	0x080144d4

08008e08 <astronode_send_cfg_wr>:
                            bool deep_sleep_mode,
                            bool message_ack_event_pin_mask,
                            bool reset_notification_event_pin_mask,
							bool command_available_event_pin_mask,
							bool message_tx_event_pin_mask)
{
 8008e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0a:	b0e7      	sub	sp, #412	; 0x19c
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	0005      	movs	r5, r0
 8008e10:	000c      	movs	r4, r1
 8008e12:	0010      	movs	r0, r2
 8008e14:	0019      	movs	r1, r3
 8008e16:	4b4b      	ldr	r3, [pc, #300]	; (8008f44 <astronode_send_cfg_wr+0x13c>)
 8008e18:	26cc      	movs	r6, #204	; 0xcc
 8008e1a:	0076      	lsls	r6, r6, #1
 8008e1c:	199b      	adds	r3, r3, r6
 8008e1e:	19db      	adds	r3, r3, r7
 8008e20:	1c2a      	adds	r2, r5, #0
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	4b48      	ldr	r3, [pc, #288]	; (8008f48 <astronode_send_cfg_wr+0x140>)
 8008e26:	0035      	movs	r5, r6
 8008e28:	195b      	adds	r3, r3, r5
 8008e2a:	19db      	adds	r3, r3, r7
 8008e2c:	1c22      	adds	r2, r4, #0
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	4b46      	ldr	r3, [pc, #280]	; (8008f4c <astronode_send_cfg_wr+0x144>)
 8008e32:	002c      	movs	r4, r5
 8008e34:	191b      	adds	r3, r3, r4
 8008e36:	19db      	adds	r3, r3, r7
 8008e38:	1c02      	adds	r2, r0, #0
 8008e3a:	701a      	strb	r2, [r3, #0]
 8008e3c:	4b44      	ldr	r3, [pc, #272]	; (8008f50 <astronode_send_cfg_wr+0x148>)
 8008e3e:	191b      	adds	r3, r3, r4
 8008e40:	19db      	adds	r3, r3, r7
 8008e42:	1c0a      	adds	r2, r1, #0
 8008e44:	701a      	strb	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 8008e46:	25d0      	movs	r5, #208	; 0xd0
 8008e48:	197b      	adds	r3, r7, r5
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	23c6      	movs	r3, #198	; 0xc6
 8008e4e:	001a      	movs	r2, r3
 8008e50:	2100      	movs	r1, #0
 8008e52:	f004 faa5 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 8008e56:	4b3f      	ldr	r3, [pc, #252]	; (8008f54 <astronode_send_cfg_wr+0x14c>)
 8008e58:	191b      	adds	r3, r3, r4
 8008e5a:	19db      	adds	r3, r3, r7
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	23c6      	movs	r3, #198	; 0xc6
 8008e60:	001a      	movs	r2, r3
 8008e62:	2100      	movs	r1, #0
 8008e64:	f004 fa9c 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CFG_WR;
 8008e68:	0029      	movs	r1, r5
 8008e6a:	187b      	adds	r3, r7, r1
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	701a      	strb	r2, [r3, #0]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
        | add_geolocation << ASTRONODE_BIT_OFFSET_ADD_GEO
 8008e70:	4b34      	ldr	r3, [pc, #208]	; (8008f44 <astronode_send_cfg_wr+0x13c>)
 8008e72:	191b      	adds	r3, r3, r4
 8008e74:	19db      	adds	r3, r3, r7
 8008e76:	2200      	movs	r2, #0
 8008e78:	569a      	ldrsb	r2, [r3, r2]
 8008e7a:	4b33      	ldr	r3, [pc, #204]	; (8008f48 <astronode_send_cfg_wr+0x140>)
 8008e7c:	191b      	adds	r3, r3, r4
 8008e7e:	19db      	adds	r3, r3, r7
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	b25b      	sxtb	r3, r3
 8008e86:	4313      	orrs	r3, r2
 8008e88:	b25a      	sxtb	r2, r3
        | enable_ephemeris << ASTRONODE_BIT_OFFSET_ENABLE_EPH
 8008e8a:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <astronode_send_cfg_wr+0x144>)
 8008e8c:	191b      	adds	r3, r3, r4
 8008e8e:	19db      	adds	r3, r3, r7
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	b25b      	sxtb	r3, r3
 8008e96:	4313      	orrs	r3, r2
 8008e98:	b25a      	sxtb	r2, r3
        | deep_sleep_mode << ASTRONODE_BIT_OFFSET_DEEP_SLEEP_MODE;
 8008e9a:	4b2d      	ldr	r3, [pc, #180]	; (8008f50 <astronode_send_cfg_wr+0x148>)
 8008e9c:	191b      	adds	r3, r3, r4
 8008e9e:	19db      	adds	r3, r3, r7
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	00db      	lsls	r3, r3, #3
 8008ea4:	b25b      	sxtb	r3, r3
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_CONFIG] = payload_acknowledgment << ASTRONODE_BIT_OFFSET_PAYLOAD_ACK
 8008eac:	187b      	adds	r3, r7, r1
 8008eae:	705a      	strb	r2, [r3, #1]

    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
        | reset_notification_event_pin_mask << ASTRONODE_BIT_OFFSET_RST_NTF_EVT_PIN_MASK
 8008eb0:	23d4      	movs	r3, #212	; 0xd4
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	2508      	movs	r5, #8
 8008eb6:	195b      	adds	r3, r3, r5
 8008eb8:	19db      	adds	r3, r3, r7
 8008eba:	2200      	movs	r2, #0
 8008ebc:	569a      	ldrsb	r2, [r3, r2]
 8008ebe:	23d6      	movs	r3, #214	; 0xd6
 8008ec0:	005b      	lsls	r3, r3, #1
 8008ec2:	195b      	adds	r3, r3, r5
 8008ec4:	19db      	adds	r3, r3, r7
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	b25b      	sxtb	r3, r3
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	b25a      	sxtb	r2, r3
        | command_available_event_pin_mask << ASTRONODE_BIT_OFFSET_CMD_AVA_EVT_PIN_MASK
 8008ed0:	23d8      	movs	r3, #216	; 0xd8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	195b      	adds	r3, r3, r5
 8008ed6:	19db      	adds	r3, r3, r7
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	b25b      	sxtb	r3, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	b25a      	sxtb	r2, r3
        | message_tx_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_TXP_EVT_PIN_MASK;
 8008ee2:	23da      	movs	r3, #218	; 0xda
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	195b      	adds	r3, r3, r5
 8008ee8:	19db      	adds	r3, r3, r7
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	b25b      	sxtb	r3, r3
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	b25b      	sxtb	r3, r3
 8008ef4:	b2da      	uxtb	r2, r3
    request.p_payload[ASTRONODE_BYTE_OFFSET_CFG_WR_EVT_PIN_MASK] = message_ack_event_pin_mask << ASTRONODE_BIT_OFFSET_MSG_ACK_EVT_PIN_MASK
 8008ef6:	187b      	adds	r3, r7, r1
 8008ef8:	70da      	strb	r2, [r3, #3]

    request.payload_len = 3;
 8008efa:	0008      	movs	r0, r1
 8008efc:	187b      	adds	r3, r7, r1
 8008efe:	22c4      	movs	r2, #196	; 0xc4
 8008f00:	2103      	movs	r1, #3
 8008f02:	5299      	strh	r1, [r3, r2]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008f04:	002b      	movs	r3, r5
 8008f06:	18fa      	adds	r2, r7, r3
 8008f08:	183b      	adds	r3, r7, r0
 8008f0a:	0011      	movs	r1, r2
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f001 f9e9 	bl	800a2e4 <astronode_transport_send_receive>
 8008f12:	0003      	movs	r3, r0
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d10f      	bne.n	8008f38 <astronode_send_cfg_wr+0x130>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CFG_WA)
 8008f18:	4b0e      	ldr	r3, [pc, #56]	; (8008f54 <astronode_send_cfg_wr+0x14c>)
 8008f1a:	191b      	adds	r3, r3, r4
 8008f1c:	19db      	adds	r3, r3, r7
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b85      	cmp	r3, #133	; 0x85
 8008f22:	d105      	bne.n	8008f30 <astronode_send_cfg_wr+0x128>
        {
            send_debug_logs("Astronode configuration successfully set.");
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <astronode_send_cfg_wr+0x150>)
 8008f26:	0018      	movs	r0, r3
 8008f28:	f7fa f8de 	bl	80030e8 <send_debug_logs>
            return true ;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e004      	b.n	8008f3a <astronode_send_cfg_wr+0x132>
        }
        else
        {
            send_debug_logs("Failed to set the Astronode configuration.");
 8008f30:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <astronode_send_cfg_wr+0x154>)
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7fa f8d8 	bl	80030e8 <send_debug_logs>
        }
    }
    return false ;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	b067      	add	sp, #412	; 0x19c
 8008f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	fffffe6f 	.word	0xfffffe6f
 8008f48:	fffffe6e 	.word	0xfffffe6e
 8008f4c:	fffffe6d 	.word	0xfffffe6d
 8008f50:	fffffe6c 	.word	0xfffffe6c
 8008f54:	fffffe70 	.word	0xfffffe70
 8008f58:	08014508 	.word	0x08014508
 8008f5c:	08014534 	.word	0x08014534

08008f60 <astronode_send_mgi_rr>:
        send_debug_logs("Failed to save the Astronode context in NVM.");
    }
}

void astronode_send_mgi_rr(void)
{
 8008f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f62:	b0ed      	sub	sp, #436	; 0x1b4
 8008f64:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8008f66:	21c8      	movs	r1, #200	; 0xc8
 8008f68:	2318      	movs	r3, #24
 8008f6a:	18cb      	adds	r3, r1, r3
 8008f6c:	19db      	adds	r3, r3, r7
 8008f6e:	0018      	movs	r0, r3
 8008f70:	23c6      	movs	r3, #198	; 0xc6
 8008f72:	001a      	movs	r2, r3
 8008f74:	2100      	movs	r1, #0
 8008f76:	f004 fa13 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 8008f7a:	4b4a      	ldr	r3, [pc, #296]	; (80090a4 <astronode_send_mgi_rr+0x144>)
 8008f7c:	26cc      	movs	r6, #204	; 0xcc
 8008f7e:	0076      	lsls	r6, r6, #1
 8008f80:	199b      	adds	r3, r3, r6
 8008f82:	2218      	movs	r2, #24
 8008f84:	4694      	mov	ip, r2
 8008f86:	44bc      	add	ip, r7
 8008f88:	4463      	add	r3, ip
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	23c6      	movs	r3, #198	; 0xc6
 8008f8e:	001a      	movs	r2, r3
 8008f90:	2100      	movs	r1, #0
 8008f92:	f004 fa05 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MGI_RR;
 8008f96:	21c8      	movs	r1, #200	; 0xc8
 8008f98:	2318      	movs	r3, #24
 8008f9a:	18cb      	adds	r3, r1, r3
 8008f9c:	19db      	adds	r3, r3, r7
 8008f9e:	2219      	movs	r2, #25
 8008fa0:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8008fa2:	2318      	movs	r3, #24
 8008fa4:	18fa      	adds	r2, r7, r3
 8008fa6:	2318      	movs	r3, #24
 8008fa8:	18cb      	adds	r3, r1, r3
 8008faa:	19db      	adds	r3, r3, r7
 8008fac:	0011      	movs	r1, r2
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f001 f998 	bl	800a2e4 <astronode_transport_send_receive>
 8008fb4:	0003      	movs	r3, r0
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d16f      	bne.n	800909a <astronode_send_mgi_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MGI_RA)
 8008fba:	4b3a      	ldr	r3, [pc, #232]	; (80090a4 <astronode_send_mgi_rr+0x144>)
 8008fbc:	0032      	movs	r2, r6
 8008fbe:	189b      	adds	r3, r3, r2
 8008fc0:	2118      	movs	r1, #24
 8008fc2:	468c      	mov	ip, r1
 8008fc4:	44bc      	add	ip, r7
 8008fc6:	4463      	add	r3, ip
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b99      	cmp	r3, #153	; 0x99
 8008fcc:	d161      	bne.n	8009092 <astronode_send_mgi_rr+0x132>
        {
 8008fce:	466b      	mov	r3, sp
 8008fd0:	001e      	movs	r6, r3
            char guid[answer.payload_len];
 8008fd2:	4b34      	ldr	r3, [pc, #208]	; (80090a4 <astronode_send_mgi_rr+0x144>)
 8008fd4:	189b      	adds	r3, r3, r2
 8008fd6:	2218      	movs	r2, #24
 8008fd8:	4694      	mov	ip, r2
 8008fda:	44bc      	add	ip, r7
 8008fdc:	4463      	add	r3, ip
 8008fde:	22c4      	movs	r2, #196	; 0xc4
 8008fe0:	5a9b      	ldrh	r3, [r3, r2]
 8008fe2:	001a      	movs	r2, r3
 8008fe4:	3a01      	subs	r2, #1
 8008fe6:	21ca      	movs	r1, #202	; 0xca
 8008fe8:	0049      	lsls	r1, r1, #1
 8008fea:	2018      	movs	r0, #24
 8008fec:	1809      	adds	r1, r1, r0
 8008fee:	19c9      	adds	r1, r1, r7
 8008ff0:	600a      	str	r2, [r1, #0]
 8008ff2:	001c      	movs	r4, r3
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	0015      	movs	r5, r2
 8008ff8:	0020      	movs	r0, r4
 8008ffa:	0029      	movs	r1, r5
 8008ffc:	0004      	movs	r4, r0
 8008ffe:	0f62      	lsrs	r2, r4, #29
 8009000:	000c      	movs	r4, r1
 8009002:	00e4      	lsls	r4, r4, #3
 8009004:	617c      	str	r4, [r7, #20]
 8009006:	697c      	ldr	r4, [r7, #20]
 8009008:	4314      	orrs	r4, r2
 800900a:	617c      	str	r4, [r7, #20]
 800900c:	0001      	movs	r1, r0
 800900e:	00c9      	lsls	r1, r1, #3
 8009010:	6139      	str	r1, [r7, #16]
 8009012:	603b      	str	r3, [r7, #0]
 8009014:	2200      	movs	r2, #0
 8009016:	607a      	str	r2, [r7, #4]
 8009018:	6838      	ldr	r0, [r7, #0]
 800901a:	6879      	ldr	r1, [r7, #4]
 800901c:	0004      	movs	r4, r0
 800901e:	0f62      	lsrs	r2, r4, #29
 8009020:	000c      	movs	r4, r1
 8009022:	00e4      	lsls	r4, r4, #3
 8009024:	60fc      	str	r4, [r7, #12]
 8009026:	68fc      	ldr	r4, [r7, #12]
 8009028:	4314      	orrs	r4, r2
 800902a:	60fc      	str	r4, [r7, #12]
 800902c:	0001      	movs	r1, r0
 800902e:	00ca      	lsls	r2, r1, #3
 8009030:	60ba      	str	r2, [r7, #8]
 8009032:	3307      	adds	r3, #7
 8009034:	08db      	lsrs	r3, r3, #3
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	4669      	mov	r1, sp
 800903a:	1acb      	subs	r3, r1, r3
 800903c:	469d      	mov	sp, r3
 800903e:	466b      	mov	r3, sp
 8009040:	3300      	adds	r3, #0
 8009042:	24c8      	movs	r4, #200	; 0xc8
 8009044:	0064      	lsls	r4, r4, #1
 8009046:	2218      	movs	r2, #24
 8009048:	18a2      	adds	r2, r4, r2
 800904a:	19d1      	adds	r1, r2, r7
 800904c:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module GUID is:");
 800904e:	4b16      	ldr	r3, [pc, #88]	; (80090a8 <astronode_send_mgi_rr+0x148>)
 8009050:	0018      	movs	r0, r3
 8009052:	f7fa f849 	bl	80030e8 <send_debug_logs>
            snprintf(guid, answer.payload_len, "%s", answer.p_payload);
 8009056:	4b13      	ldr	r3, [pc, #76]	; (80090a4 <astronode_send_mgi_rr+0x144>)
 8009058:	22cc      	movs	r2, #204	; 0xcc
 800905a:	0052      	lsls	r2, r2, #1
 800905c:	189b      	adds	r3, r3, r2
 800905e:	2218      	movs	r2, #24
 8009060:	4694      	mov	ip, r2
 8009062:	44bc      	add	ip, r7
 8009064:	4463      	add	r3, ip
 8009066:	22c4      	movs	r2, #196	; 0xc4
 8009068:	5a9b      	ldrh	r3, [r3, r2]
 800906a:	0019      	movs	r1, r3
 800906c:	2318      	movs	r3, #24
 800906e:	18fb      	adds	r3, r7, r3
 8009070:	3301      	adds	r3, #1
 8009072:	4a0e      	ldr	r2, [pc, #56]	; (80090ac <astronode_send_mgi_rr+0x14c>)
 8009074:	2018      	movs	r0, #24
 8009076:	1820      	adds	r0, r4, r0
 8009078:	19c0      	adds	r0, r0, r7
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	f004 f8c6 	bl	800d20c <snprintf>
            send_debug_logs(guid);
 8009080:	2318      	movs	r3, #24
 8009082:	18e3      	adds	r3, r4, r3
 8009084:	19db      	adds	r3, r3, r7
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	0018      	movs	r0, r3
 800908a:	f7fa f82d 	bl	80030e8 <send_debug_logs>
 800908e:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module GUID.");
        }
    }
}
 8009090:	e003      	b.n	800909a <astronode_send_mgi_rr+0x13a>
            send_debug_logs("Failed to read module GUID.");
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <astronode_send_mgi_rr+0x150>)
 8009094:	0018      	movs	r0, r3
 8009096:	f7fa f827 	bl	80030e8 <send_debug_logs>
}
 800909a:	46c0      	nop			; (mov r8, r8)
 800909c:	46bd      	mov	sp, r7
 800909e:	b06d      	add	sp, #436	; 0x1b4
 80090a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	fffffe68 	.word	0xfffffe68
 80090a8:	080145c0 	.word	0x080145c0
 80090ac:	080145d0 	.word	0x080145d0
 80090b0:	080145d4 	.word	0x080145d4

080090b4 <astronode_send_msn_rr>:

void astronode_send_msn_rr(void)
{
 80090b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090b6:	b0ed      	sub	sp, #436	; 0x1b4
 80090b8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80090ba:	21c8      	movs	r1, #200	; 0xc8
 80090bc:	2318      	movs	r3, #24
 80090be:	18cb      	adds	r3, r1, r3
 80090c0:	19db      	adds	r3, r3, r7
 80090c2:	0018      	movs	r0, r3
 80090c4:	23c6      	movs	r3, #198	; 0xc6
 80090c6:	001a      	movs	r2, r3
 80090c8:	2100      	movs	r1, #0
 80090ca:	f004 f969 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 80090ce:	4b4a      	ldr	r3, [pc, #296]	; (80091f8 <astronode_send_msn_rr+0x144>)
 80090d0:	26cc      	movs	r6, #204	; 0xcc
 80090d2:	0076      	lsls	r6, r6, #1
 80090d4:	199b      	adds	r3, r3, r6
 80090d6:	2218      	movs	r2, #24
 80090d8:	4694      	mov	ip, r2
 80090da:	44bc      	add	ip, r7
 80090dc:	4463      	add	r3, ip
 80090de:	0018      	movs	r0, r3
 80090e0:	23c6      	movs	r3, #198	; 0xc6
 80090e2:	001a      	movs	r2, r3
 80090e4:	2100      	movs	r1, #0
 80090e6:	f004 f95b 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MSN_RR;
 80090ea:	21c8      	movs	r1, #200	; 0xc8
 80090ec:	2318      	movs	r3, #24
 80090ee:	18cb      	adds	r3, r1, r3
 80090f0:	19db      	adds	r3, r3, r7
 80090f2:	221a      	movs	r2, #26
 80090f4:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80090f6:	2318      	movs	r3, #24
 80090f8:	18fa      	adds	r2, r7, r3
 80090fa:	2318      	movs	r3, #24
 80090fc:	18cb      	adds	r3, r1, r3
 80090fe:	19db      	adds	r3, r3, r7
 8009100:	0011      	movs	r1, r2
 8009102:	0018      	movs	r0, r3
 8009104:	f001 f8ee 	bl	800a2e4 <astronode_transport_send_receive>
 8009108:	0003      	movs	r3, r0
 800910a:	2b01      	cmp	r3, #1
 800910c:	d16f      	bne.n	80091ee <astronode_send_msn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MSN_RA)
 800910e:	4b3a      	ldr	r3, [pc, #232]	; (80091f8 <astronode_send_msn_rr+0x144>)
 8009110:	0032      	movs	r2, r6
 8009112:	189b      	adds	r3, r3, r2
 8009114:	2118      	movs	r1, #24
 8009116:	468c      	mov	ip, r1
 8009118:	44bc      	add	ip, r7
 800911a:	4463      	add	r3, ip
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	2b9a      	cmp	r3, #154	; 0x9a
 8009120:	d161      	bne.n	80091e6 <astronode_send_msn_rr+0x132>
        {
 8009122:	466b      	mov	r3, sp
 8009124:	001e      	movs	r6, r3
            char serial_number[answer.payload_len];
 8009126:	4b34      	ldr	r3, [pc, #208]	; (80091f8 <astronode_send_msn_rr+0x144>)
 8009128:	189b      	adds	r3, r3, r2
 800912a:	2218      	movs	r2, #24
 800912c:	4694      	mov	ip, r2
 800912e:	44bc      	add	ip, r7
 8009130:	4463      	add	r3, ip
 8009132:	22c4      	movs	r2, #196	; 0xc4
 8009134:	5a9b      	ldrh	r3, [r3, r2]
 8009136:	001a      	movs	r2, r3
 8009138:	3a01      	subs	r2, #1
 800913a:	21ca      	movs	r1, #202	; 0xca
 800913c:	0049      	lsls	r1, r1, #1
 800913e:	2018      	movs	r0, #24
 8009140:	1809      	adds	r1, r1, r0
 8009142:	19c9      	adds	r1, r1, r7
 8009144:	600a      	str	r2, [r1, #0]
 8009146:	001c      	movs	r4, r3
 8009148:	2200      	movs	r2, #0
 800914a:	0015      	movs	r5, r2
 800914c:	0020      	movs	r0, r4
 800914e:	0029      	movs	r1, r5
 8009150:	0004      	movs	r4, r0
 8009152:	0f62      	lsrs	r2, r4, #29
 8009154:	000c      	movs	r4, r1
 8009156:	00e4      	lsls	r4, r4, #3
 8009158:	617c      	str	r4, [r7, #20]
 800915a:	697c      	ldr	r4, [r7, #20]
 800915c:	4314      	orrs	r4, r2
 800915e:	617c      	str	r4, [r7, #20]
 8009160:	0001      	movs	r1, r0
 8009162:	00c9      	lsls	r1, r1, #3
 8009164:	6139      	str	r1, [r7, #16]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	2200      	movs	r2, #0
 800916a:	607a      	str	r2, [r7, #4]
 800916c:	6838      	ldr	r0, [r7, #0]
 800916e:	6879      	ldr	r1, [r7, #4]
 8009170:	0004      	movs	r4, r0
 8009172:	0f62      	lsrs	r2, r4, #29
 8009174:	000c      	movs	r4, r1
 8009176:	00e4      	lsls	r4, r4, #3
 8009178:	60fc      	str	r4, [r7, #12]
 800917a:	68fc      	ldr	r4, [r7, #12]
 800917c:	4314      	orrs	r4, r2
 800917e:	60fc      	str	r4, [r7, #12]
 8009180:	0001      	movs	r1, r0
 8009182:	00ca      	lsls	r2, r1, #3
 8009184:	60ba      	str	r2, [r7, #8]
 8009186:	3307      	adds	r3, #7
 8009188:	08db      	lsrs	r3, r3, #3
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4669      	mov	r1, sp
 800918e:	1acb      	subs	r3, r1, r3
 8009190:	469d      	mov	sp, r3
 8009192:	466b      	mov	r3, sp
 8009194:	3300      	adds	r3, #0
 8009196:	24c8      	movs	r4, #200	; 0xc8
 8009198:	0064      	lsls	r4, r4, #1
 800919a:	2218      	movs	r2, #24
 800919c:	18a2      	adds	r2, r4, r2
 800919e:	19d1      	adds	r1, r2, r7
 80091a0:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's Serial Number is:");
 80091a2:	4b16      	ldr	r3, [pc, #88]	; (80091fc <astronode_send_msn_rr+0x148>)
 80091a4:	0018      	movs	r0, r3
 80091a6:	f7f9 ff9f 	bl	80030e8 <send_debug_logs>
            snprintf(serial_number, answer.payload_len, "%s", answer.p_payload);
 80091aa:	4b13      	ldr	r3, [pc, #76]	; (80091f8 <astronode_send_msn_rr+0x144>)
 80091ac:	22cc      	movs	r2, #204	; 0xcc
 80091ae:	0052      	lsls	r2, r2, #1
 80091b0:	189b      	adds	r3, r3, r2
 80091b2:	2218      	movs	r2, #24
 80091b4:	4694      	mov	ip, r2
 80091b6:	44bc      	add	ip, r7
 80091b8:	4463      	add	r3, ip
 80091ba:	22c4      	movs	r2, #196	; 0xc4
 80091bc:	5a9b      	ldrh	r3, [r3, r2]
 80091be:	0019      	movs	r1, r3
 80091c0:	2318      	movs	r3, #24
 80091c2:	18fb      	adds	r3, r7, r3
 80091c4:	3301      	adds	r3, #1
 80091c6:	4a0e      	ldr	r2, [pc, #56]	; (8009200 <astronode_send_msn_rr+0x14c>)
 80091c8:	2018      	movs	r0, #24
 80091ca:	1820      	adds	r0, r4, r0
 80091cc:	19c0      	adds	r0, r0, r7
 80091ce:	6800      	ldr	r0, [r0, #0]
 80091d0:	f004 f81c 	bl	800d20c <snprintf>
            send_debug_logs(serial_number);
 80091d4:	2318      	movs	r3, #24
 80091d6:	18e3      	adds	r3, r4, r3
 80091d8:	19db      	adds	r3, r3, r7
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	0018      	movs	r0, r3
 80091de:	f7f9 ff83 	bl	80030e8 <send_debug_logs>
 80091e2:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80091e4:	e003      	b.n	80091ee <astronode_send_msn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80091e6:	4b07      	ldr	r3, [pc, #28]	; (8009204 <astronode_send_msn_rr+0x150>)
 80091e8:	0018      	movs	r0, r3
 80091ea:	f7f9 ff7d 	bl	80030e8 <send_debug_logs>
}
 80091ee:	46c0      	nop			; (mov r8, r8)
 80091f0:	46bd      	mov	sp, r7
 80091f2:	b06d      	add	sp, #436	; 0x1b4
 80091f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	fffffe68 	.word	0xfffffe68
 80091fc:	080145f0 	.word	0x080145f0
 8009200:	080145d0 	.word	0x080145d0
 8009204:	0801460c 	.word	0x0801460c

08009208 <astronode_send_evt_rr>:
    }
    return 0xFFFFFFFF ; // Longest possible time
}

void astronode_send_evt_rr(void)
{
 8009208:	b5b0      	push	{r4, r5, r7, lr}
 800920a:	b0e4      	sub	sp, #400	; 0x190
 800920c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800920e:	24c8      	movs	r4, #200	; 0xc8
 8009210:	193b      	adds	r3, r7, r4
 8009212:	0018      	movs	r0, r3
 8009214:	23c6      	movs	r3, #198	; 0xc6
 8009216:	001a      	movs	r2, r3
 8009218:	2100      	movs	r1, #0
 800921a:	f004 f8c1 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 800921e:	4b31      	ldr	r3, [pc, #196]	; (80092e4 <astronode_send_evt_rr+0xdc>)
 8009220:	25c8      	movs	r5, #200	; 0xc8
 8009222:	006d      	lsls	r5, r5, #1
 8009224:	195b      	adds	r3, r3, r5
 8009226:	19db      	adds	r3, r3, r7
 8009228:	0018      	movs	r0, r3
 800922a:	23c6      	movs	r3, #198	; 0xc6
 800922c:	001a      	movs	r2, r3
 800922e:	2100      	movs	r1, #0
 8009230:	f004 f8b6 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_EVT_RR;
 8009234:	193b      	adds	r3, r7, r4
 8009236:	2265      	movs	r2, #101	; 0x65
 8009238:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800923a:	003a      	movs	r2, r7
 800923c:	193b      	adds	r3, r7, r4
 800923e:	0011      	movs	r1, r2
 8009240:	0018      	movs	r0, r3
 8009242:	f001 f84f 	bl	800a2e4 <astronode_transport_send_receive>
 8009246:	0003      	movs	r3, r0
 8009248:	2b01      	cmp	r3, #1
 800924a:	d147      	bne.n	80092dc <astronode_send_evt_rr+0xd4>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_EVT_RA)
 800924c:	4b25      	ldr	r3, [pc, #148]	; (80092e4 <astronode_send_evt_rr+0xdc>)
 800924e:	195b      	adds	r3, r3, r5
 8009250:	19db      	adds	r3, r3, r7
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2be5      	cmp	r3, #229	; 0xe5
 8009256:	d141      	bne.n	80092dc <astronode_send_evt_rr+0xd4>
        {
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_ACK))
 8009258:	4b22      	ldr	r3, [pc, #136]	; (80092e4 <astronode_send_evt_rr+0xdc>)
 800925a:	195b      	adds	r3, r3, r5
 800925c:	19db      	adds	r3, r3, r7
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	001a      	movs	r2, r3
 8009262:	2301      	movs	r3, #1
 8009264:	4013      	ands	r3, r2
 8009266:	d006      	beq.n	8009276 <astronode_send_evt_rr+0x6e>
            {
                g_is_sak_available = true;
 8009268:	4b1f      	ldr	r3, [pc, #124]	; (80092e8 <astronode_send_evt_rr+0xe0>)
 800926a:	2201      	movs	r2, #1
 800926c:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Message acknowledgment available.");
 800926e:	4b1f      	ldr	r3, [pc, #124]	; (80092ec <astronode_send_evt_rr+0xe4>)
 8009270:	0018      	movs	r0, r3
 8009272:	f7f9 ff39 	bl	80030e8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_RST))
 8009276:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <astronode_send_evt_rr+0xdc>)
 8009278:	22c8      	movs	r2, #200	; 0xc8
 800927a:	0052      	lsls	r2, r2, #1
 800927c:	189b      	adds	r3, r3, r2
 800927e:	19db      	adds	r3, r3, r7
 8009280:	785b      	ldrb	r3, [r3, #1]
 8009282:	001a      	movs	r2, r3
 8009284:	2302      	movs	r3, #2
 8009286:	4013      	ands	r3, r2
 8009288:	d006      	beq.n	8009298 <astronode_send_evt_rr+0x90>
            {
                g_is_astronode_reset = true;
 800928a:	4b19      	ldr	r3, [pc, #100]	; (80092f0 <astronode_send_evt_rr+0xe8>)
 800928c:	2201      	movs	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Astronode has reset.");
 8009290:	4b18      	ldr	r3, [pc, #96]	; (80092f4 <astronode_send_evt_rr+0xec>)
 8009292:	0018      	movs	r0, r3
 8009294:	f7f9 ff28 	bl	80030e8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFSET_CMD))
 8009298:	4b12      	ldr	r3, [pc, #72]	; (80092e4 <astronode_send_evt_rr+0xdc>)
 800929a:	22c8      	movs	r2, #200	; 0xc8
 800929c:	0052      	lsls	r2, r2, #1
 800929e:	189b      	adds	r3, r3, r2
 80092a0:	19db      	adds	r3, r3, r7
 80092a2:	785b      	ldrb	r3, [r3, #1]
 80092a4:	001a      	movs	r2, r3
 80092a6:	2304      	movs	r3, #4
 80092a8:	4013      	ands	r3, r2
 80092aa:	d006      	beq.n	80092ba <astronode_send_evt_rr+0xb2>
            {
                g_is_command_available = true;
 80092ac:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <astronode_send_evt_rr+0xf0>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
                send_debug_logs("Command available.");
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <astronode_send_evt_rr+0xf4>)
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7f9 ff17 	bl	80030e8 <send_debug_logs>
            }
            if ((answer.p_payload[ASTRONODE_BYTE_OFFSET_EVT_RR_EVENT]) & (1 << ASTRONODE_BIT_OFFEST_MSG_TX))
 80092ba:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <astronode_send_evt_rr+0xdc>)
 80092bc:	22c8      	movs	r2, #200	; 0xc8
 80092be:	0052      	lsls	r2, r2, #1
 80092c0:	189b      	adds	r3, r3, r2
 80092c2:	19db      	adds	r3, r3, r7
 80092c4:	785b      	ldrb	r3, [r3, #1]
 80092c6:	001a      	movs	r2, r3
 80092c8:	2308      	movs	r3, #8
 80092ca:	4013      	ands	r3, r2
 80092cc:	d006      	beq.n	80092dc <astronode_send_evt_rr+0xd4>
            {
                g_is_tx_msg_pending = true;
 80092ce:	4b0c      	ldr	r3, [pc, #48]	; (8009300 <astronode_send_evt_rr+0xf8>)
 80092d0:	2201      	movs	r2, #1
 80092d2:	701a      	strb	r2, [r3, #0]
                send_debug_logs("TX message pending.");
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <astronode_send_evt_rr+0xfc>)
 80092d6:	0018      	movs	r0, r3
 80092d8:	f7f9 ff06 	bl	80030e8 <send_debug_logs>
            }

        }
    }
}
 80092dc:	46c0      	nop			; (mov r8, r8)
 80092de:	46bd      	mov	sp, r7
 80092e0:	b064      	add	sp, #400	; 0x190
 80092e2:	bdb0      	pop	{r4, r5, r7, pc}
 80092e4:	fffffe70 	.word	0xfffffe70
 80092e8:	20000b1c 	.word	0x20000b1c
 80092ec:	080146b4 	.word	0x080146b4
 80092f0:	20000b1d 	.word	0x20000b1d
 80092f4:	080146d8 	.word	0x080146d8
 80092f8:	20000b1e 	.word	0x20000b1e
 80092fc:	080146f0 	.word	0x080146f0
 8009300:	20000b1f 	.word	0x20000b1f
 8009304:	08014704 	.word	0x08014704

08009308 <astronode_send_geo_wr>:

void astronode_send_geo_wr(int32_t latitude, int32_t longitude)
{
 8009308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800930a:	b0e7      	sub	sp, #412	; 0x19c
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
    astronode_app_msg_t request = {0};
 8009312:	24d0      	movs	r4, #208	; 0xd0
 8009314:	193b      	adds	r3, r7, r4
 8009316:	0018      	movs	r0, r3
 8009318:	23c6      	movs	r3, #198	; 0xc6
 800931a:	001a      	movs	r2, r3
 800931c:	2100      	movs	r1, #0
 800931e:	f004 f83f 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 8009322:	4b56      	ldr	r3, [pc, #344]	; (800947c <astronode_send_geo_wr+0x174>)
 8009324:	26cc      	movs	r6, #204	; 0xcc
 8009326:	0076      	lsls	r6, r6, #1
 8009328:	199b      	adds	r3, r3, r6
 800932a:	19db      	adds	r3, r3, r7
 800932c:	0018      	movs	r0, r3
 800932e:	23c6      	movs	r3, #198	; 0xc6
 8009330:	001a      	movs	r2, r3
 8009332:	2100      	movs	r1, #0
 8009334:	f004 f834 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_GEO_WR;
 8009338:	193b      	adds	r3, r7, r4
 800933a:	2235      	movs	r2, #53	; 0x35
 800933c:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) latitude;
 800933e:	193b      	adds	r3, r7, r4
 8009340:	22c4      	movs	r2, #196	; 0xc4
 8009342:	5a9b      	ldrh	r3, [r3, r2]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	b290      	uxth	r0, r2
 8009348:	193a      	adds	r2, r7, r4
 800934a:	21c4      	movs	r1, #196	; 0xc4
 800934c:	5250      	strh	r0, [r2, r1]
 800934e:	0019      	movs	r1, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	b2da      	uxtb	r2, r3
 8009354:	193b      	adds	r3, r7, r4
 8009356:	185b      	adds	r3, r3, r1
 8009358:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 8);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	1218      	asrs	r0, r3, #8
 800935e:	0025      	movs	r5, r4
 8009360:	197b      	adds	r3, r7, r5
 8009362:	22c4      	movs	r2, #196	; 0xc4
 8009364:	5a9b      	ldrh	r3, [r3, r2]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	b294      	uxth	r4, r2
 800936a:	197a      	adds	r2, r7, r5
 800936c:	21c4      	movs	r1, #196	; 0xc4
 800936e:	5254      	strh	r4, [r2, r1]
 8009370:	0019      	movs	r1, r3
 8009372:	b2c2      	uxtb	r2, r0
 8009374:	002c      	movs	r4, r5
 8009376:	193b      	adds	r3, r7, r4
 8009378:	185b      	adds	r3, r3, r1
 800937a:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 16);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	1418      	asrs	r0, r3, #16
 8009380:	0025      	movs	r5, r4
 8009382:	197b      	adds	r3, r7, r5
 8009384:	22c4      	movs	r2, #196	; 0xc4
 8009386:	5a9b      	ldrh	r3, [r3, r2]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	b294      	uxth	r4, r2
 800938c:	197a      	adds	r2, r7, r5
 800938e:	21c4      	movs	r1, #196	; 0xc4
 8009390:	5254      	strh	r4, [r2, r1]
 8009392:	0019      	movs	r1, r3
 8009394:	b2c2      	uxtb	r2, r0
 8009396:	002c      	movs	r4, r5
 8009398:	193b      	adds	r3, r7, r4
 800939a:	185b      	adds	r3, r3, r1
 800939c:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (latitude >> 24);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	1618      	asrs	r0, r3, #24
 80093a2:	0025      	movs	r5, r4
 80093a4:	197b      	adds	r3, r7, r5
 80093a6:	22c4      	movs	r2, #196	; 0xc4
 80093a8:	5a9b      	ldrh	r3, [r3, r2]
 80093aa:	1c5a      	adds	r2, r3, #1
 80093ac:	b294      	uxth	r4, r2
 80093ae:	197a      	adds	r2, r7, r5
 80093b0:	21c4      	movs	r1, #196	; 0xc4
 80093b2:	5254      	strh	r4, [r2, r1]
 80093b4:	0019      	movs	r1, r3
 80093b6:	b2c2      	uxtb	r2, r0
 80093b8:	002c      	movs	r4, r5
 80093ba:	193b      	adds	r3, r7, r4
 80093bc:	185b      	adds	r3, r3, r1
 80093be:	705a      	strb	r2, [r3, #1]

    request.p_payload[request.payload_len++] = (uint8_t) longitude;
 80093c0:	193b      	adds	r3, r7, r4
 80093c2:	22c4      	movs	r2, #196	; 0xc4
 80093c4:	5a9b      	ldrh	r3, [r3, r2]
 80093c6:	1c5a      	adds	r2, r3, #1
 80093c8:	b290      	uxth	r0, r2
 80093ca:	193a      	adds	r2, r7, r4
 80093cc:	21c4      	movs	r1, #196	; 0xc4
 80093ce:	5250      	strh	r0, [r2, r1]
 80093d0:	0019      	movs	r1, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	193b      	adds	r3, r7, r4
 80093d8:	185b      	adds	r3, r3, r1
 80093da:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 8);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	1218      	asrs	r0, r3, #8
 80093e0:	0025      	movs	r5, r4
 80093e2:	197b      	adds	r3, r7, r5
 80093e4:	22c4      	movs	r2, #196	; 0xc4
 80093e6:	5a9b      	ldrh	r3, [r3, r2]
 80093e8:	1c5a      	adds	r2, r3, #1
 80093ea:	b294      	uxth	r4, r2
 80093ec:	197a      	adds	r2, r7, r5
 80093ee:	21c4      	movs	r1, #196	; 0xc4
 80093f0:	5254      	strh	r4, [r2, r1]
 80093f2:	0019      	movs	r1, r3
 80093f4:	b2c2      	uxtb	r2, r0
 80093f6:	002c      	movs	r4, r5
 80093f8:	193b      	adds	r3, r7, r4
 80093fa:	185b      	adds	r3, r3, r1
 80093fc:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 16);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	1418      	asrs	r0, r3, #16
 8009402:	0025      	movs	r5, r4
 8009404:	197b      	adds	r3, r7, r5
 8009406:	22c4      	movs	r2, #196	; 0xc4
 8009408:	5a9b      	ldrh	r3, [r3, r2]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	b294      	uxth	r4, r2
 800940e:	197a      	adds	r2, r7, r5
 8009410:	21c4      	movs	r1, #196	; 0xc4
 8009412:	5254      	strh	r4, [r2, r1]
 8009414:	0019      	movs	r1, r3
 8009416:	b2c2      	uxtb	r2, r0
 8009418:	002c      	movs	r4, r5
 800941a:	193b      	adds	r3, r7, r4
 800941c:	185b      	adds	r3, r3, r1
 800941e:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (longitude >> 24);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	1618      	asrs	r0, r3, #24
 8009424:	0025      	movs	r5, r4
 8009426:	197b      	adds	r3, r7, r5
 8009428:	22c4      	movs	r2, #196	; 0xc4
 800942a:	5a9b      	ldrh	r3, [r3, r2]
 800942c:	1c5a      	adds	r2, r3, #1
 800942e:	b294      	uxth	r4, r2
 8009430:	197a      	adds	r2, r7, r5
 8009432:	21c4      	movs	r1, #196	; 0xc4
 8009434:	5254      	strh	r4, [r2, r1]
 8009436:	0019      	movs	r1, r3
 8009438:	b2c2      	uxtb	r2, r0
 800943a:	0028      	movs	r0, r5
 800943c:	183b      	adds	r3, r7, r0
 800943e:	185b      	adds	r3, r3, r1
 8009440:	705a      	strb	r2, [r3, #1]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009442:	2308      	movs	r3, #8
 8009444:	18fa      	adds	r2, r7, r3
 8009446:	183b      	adds	r3, r7, r0
 8009448:	0011      	movs	r1, r2
 800944a:	0018      	movs	r0, r3
 800944c:	f000 ff4a 	bl	800a2e4 <astronode_transport_send_receive>
 8009450:	0003      	movs	r3, r0
 8009452:	2b01      	cmp	r3, #1
 8009454:	d10e      	bne.n	8009474 <astronode_send_geo_wr+0x16c>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_GEO_WA)
 8009456:	4b09      	ldr	r3, [pc, #36]	; (800947c <astronode_send_geo_wr+0x174>)
 8009458:	199b      	adds	r3, r3, r6
 800945a:	19db      	adds	r3, r3, r7
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2bb5      	cmp	r3, #181	; 0xb5
 8009460:	d104      	bne.n	800946c <astronode_send_geo_wr+0x164>
        {
            send_debug_logs("Geolocation values were set successfully.");
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <astronode_send_geo_wr+0x178>)
 8009464:	0018      	movs	r0, r3
 8009466:	f7f9 fe3f 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("Failed to set the geolocation information.");
        }
    }
}
 800946a:	e003      	b.n	8009474 <astronode_send_geo_wr+0x16c>
            send_debug_logs("Failed to set the geolocation information.");
 800946c:	4b05      	ldr	r3, [pc, #20]	; (8009484 <astronode_send_geo_wr+0x17c>)
 800946e:	0018      	movs	r0, r3
 8009470:	f7f9 fe3a 	bl	80030e8 <send_debug_logs>
}
 8009474:	46c0      	nop			; (mov r8, r8)
 8009476:	46bd      	mov	sp, r7
 8009478:	b067      	add	sp, #412	; 0x19c
 800947a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800947c:	fffffe70 	.word	0xfffffe70
 8009480:	08014718 	.word	0x08014718
 8009484:	08014744 	.word	0x08014744

08009488 <astronode_send_pld_er>:
        }
    }
}

bool astronode_send_pld_er ( uint16_t payload_id , char *p_payload , uint16_t payload_length )
{
 8009488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948a:	b0fd      	sub	sp, #500	; 0x1f4
 800948c:	af02      	add	r7, sp, #8
 800948e:	6039      	str	r1, [r7, #0]
 8009490:	0011      	movs	r1, r2
 8009492:	4b4c      	ldr	r3, [pc, #304]	; (80095c4 <astronode_send_pld_er+0x13c>)
 8009494:	26f4      	movs	r6, #244	; 0xf4
 8009496:	0076      	lsls	r6, r6, #1
 8009498:	199b      	adds	r3, r3, r6
 800949a:	19db      	adds	r3, r3, r7
 800949c:	1c02      	adds	r2, r0, #0
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	4b49      	ldr	r3, [pc, #292]	; (80095c8 <astronode_send_pld_er+0x140>)
 80094a2:	199b      	adds	r3, r3, r6
 80094a4:	19db      	adds	r3, r3, r7
 80094a6:	1c0a      	adds	r2, r1, #0
 80094a8:	801a      	strh	r2, [r3, #0]
    astronode_app_msg_t request = {0};
 80094aa:	2490      	movs	r4, #144	; 0x90
 80094ac:	0064      	lsls	r4, r4, #1
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	0018      	movs	r0, r3
 80094b2:	23c6      	movs	r3, #198	; 0xc6
 80094b4:	001a      	movs	r2, r3
 80094b6:	2100      	movs	r1, #0
 80094b8:	f003 ff72 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 80094bc:	4b43      	ldr	r3, [pc, #268]	; (80095cc <astronode_send_pld_er+0x144>)
 80094be:	199b      	adds	r3, r3, r6
 80094c0:	19db      	adds	r3, r3, r7
 80094c2:	0018      	movs	r0, r3
 80094c4:	23c6      	movs	r3, #198	; 0xc6
 80094c6:	001a      	movs	r2, r3
 80094c8:	2100      	movs	r1, #0
 80094ca:	f003 ff69 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_ER;
 80094ce:	193b      	adds	r3, r7, r4
 80094d0:	2225      	movs	r2, #37	; 0x25
 80094d2:	701a      	strb	r2, [r3, #0]

    request.p_payload[request.payload_len++] = (uint8_t) payload_id;
 80094d4:	193b      	adds	r3, r7, r4
 80094d6:	22c4      	movs	r2, #196	; 0xc4
 80094d8:	5a9b      	ldrh	r3, [r3, r2]
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	b290      	uxth	r0, r2
 80094de:	193a      	adds	r2, r7, r4
 80094e0:	21c4      	movs	r1, #196	; 0xc4
 80094e2:	5250      	strh	r0, [r2, r1]
 80094e4:	0019      	movs	r1, r3
 80094e6:	4b37      	ldr	r3, [pc, #220]	; (80095c4 <astronode_send_pld_er+0x13c>)
 80094e8:	199b      	adds	r3, r3, r6
 80094ea:	19db      	adds	r3, r3, r7
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	193b      	adds	r3, r7, r4
 80094f2:	185b      	adds	r3, r3, r1
 80094f4:	705a      	strb	r2, [r3, #1]
    request.p_payload[request.payload_len++] = (uint8_t) (payload_id >> 8);
 80094f6:	4b33      	ldr	r3, [pc, #204]	; (80095c4 <astronode_send_pld_er+0x13c>)
 80094f8:	199b      	adds	r3, r3, r6
 80094fa:	19db      	adds	r3, r3, r7
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	0a1b      	lsrs	r3, r3, #8
 8009500:	b298      	uxth	r0, r3
 8009502:	0025      	movs	r5, r4
 8009504:	197b      	adds	r3, r7, r5
 8009506:	22c4      	movs	r2, #196	; 0xc4
 8009508:	5a9b      	ldrh	r3, [r3, r2]
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	b294      	uxth	r4, r2
 800950e:	197a      	adds	r2, r7, r5
 8009510:	21c4      	movs	r1, #196	; 0xc4
 8009512:	5254      	strh	r4, [r2, r1]
 8009514:	0019      	movs	r1, r3
 8009516:	b2c2      	uxtb	r2, r0
 8009518:	002c      	movs	r4, r5
 800951a:	193b      	adds	r3, r7, r4
 800951c:	185b      	adds	r3, r3, r1
 800951e:	705a      	strb	r2, [r3, #1]

    memcpy(&request.p_payload[request.payload_len], p_payload, payload_length);
 8009520:	193b      	adds	r3, r7, r4
 8009522:	22c4      	movs	r2, #196	; 0xc4
 8009524:	5a9b      	ldrh	r3, [r3, r2]
 8009526:	001a      	movs	r2, r3
 8009528:	193b      	adds	r3, r7, r4
 800952a:	189b      	adds	r3, r3, r2
 800952c:	1c58      	adds	r0, r3, #1
 800952e:	4b26      	ldr	r3, [pc, #152]	; (80095c8 <astronode_send_pld_er+0x140>)
 8009530:	199b      	adds	r3, r3, r6
 8009532:	19db      	adds	r3, r3, r7
 8009534:	881a      	ldrh	r2, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	0019      	movs	r1, r3
 800953a:	f004 f85e 	bl	800d5fa <memcpy>
    request.payload_len = 2 + payload_length;
 800953e:	4b22      	ldr	r3, [pc, #136]	; (80095c8 <astronode_send_pld_er+0x140>)
 8009540:	199b      	adds	r3, r3, r6
 8009542:	19db      	adds	r3, r3, r7
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	3302      	adds	r3, #2
 8009548:	b299      	uxth	r1, r3
 800954a:	193b      	adds	r3, r7, r4
 800954c:	22c4      	movs	r2, #196	; 0xc4
 800954e:	5299      	strh	r1, [r3, r2]
    char s[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8009550:	2358      	movs	r3, #88	; 0x58
 8009552:	18fa      	adds	r2, r7, r3
 8009554:	193b      	adds	r3, r7, r4
 8009556:	0011      	movs	r1, r2
 8009558:	0018      	movs	r0, r3
 800955a:	f000 fec3 	bl	800a2e4 <astronode_transport_send_receive>
 800955e:	0003      	movs	r3, r0
 8009560:	2b01      	cmp	r3, #1
 8009562:	d12a      	bne.n	80095ba <astronode_send_pld_er+0x132>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_EA)
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <astronode_send_pld_er+0x144>)
 8009566:	199b      	adds	r3, r3, r6
 8009568:	19db      	adds	r3, r3, r7
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2ba5      	cmp	r3, #165	; 0xa5
 800956e:	d114      	bne.n	800959a <astronode_send_pld_er+0x112>
        {
        	sprintf ( s , "%s,%d,payload_id:%d queued." , __FILE__ , __LINE__ , payload_id ) ;
 8009570:	4b14      	ldr	r3, [pc, #80]	; (80095c4 <astronode_send_pld_er+0x13c>)
 8009572:	199b      	adds	r3, r3, r6
 8009574:	19db      	adds	r3, r3, r7
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	22ea      	movs	r2, #234	; 0xea
 800957a:	32ff      	adds	r2, #255	; 0xff
 800957c:	0014      	movs	r4, r2
 800957e:	4a14      	ldr	r2, [pc, #80]	; (80095d0 <astronode_send_pld_er+0x148>)
 8009580:	4914      	ldr	r1, [pc, #80]	; (80095d4 <astronode_send_pld_er+0x14c>)
 8009582:	2508      	movs	r5, #8
 8009584:	1978      	adds	r0, r7, r5
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	0023      	movs	r3, r4
 800958a:	f003 fe73 	bl	800d274 <sprintf>
            send_debug_logs ( s ) ;
 800958e:	197b      	adds	r3, r7, r5
 8009590:	0018      	movs	r0, r3
 8009592:	f7f9 fda9 	bl	80030e8 <send_debug_logs>
            return true ;
 8009596:	2301      	movs	r3, #1
 8009598:	e010      	b.n	80095bc <astronode_send_pld_er+0x134>
        }
        else
        {
            sprintf ( s , "astronode_application: payload %d not queued." , payload_id ) ;
 800959a:	4b0a      	ldr	r3, [pc, #40]	; (80095c4 <astronode_send_pld_er+0x13c>)
 800959c:	22f4      	movs	r2, #244	; 0xf4
 800959e:	0052      	lsls	r2, r2, #1
 80095a0:	189b      	adds	r3, r3, r2
 80095a2:	19db      	adds	r3, r3, r7
 80095a4:	881a      	ldrh	r2, [r3, #0]
 80095a6:	490c      	ldr	r1, [pc, #48]	; (80095d8 <astronode_send_pld_er+0x150>)
 80095a8:	2408      	movs	r4, #8
 80095aa:	193b      	adds	r3, r7, r4
 80095ac:	0018      	movs	r0, r3
 80095ae:	f003 fe61 	bl	800d274 <sprintf>
            send_debug_logs ( s ) ;
 80095b2:	193b      	adds	r3, r7, r4
 80095b4:	0018      	movs	r0, r3
 80095b6:	f7f9 fd97 	bl	80030e8 <send_debug_logs>
        }
    }
    return false ;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	0018      	movs	r0, r3
 80095be:	46bd      	mov	sp, r7
 80095c0:	b07b      	add	sp, #492	; 0x1ec
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c4:	fffffe1e 	.word	0xfffffe1e
 80095c8:	fffffe1c 	.word	0xfffffe1c
 80095cc:	fffffe70 	.word	0xfffffe70
 80095d0:	080147bc 	.word	0x080147bc
 80095d4:	080147e8 	.word	0x080147e8
 80095d8:	08014804 	.word	0x08014804

080095dc <astronode_send_pld_fr>:

void astronode_send_pld_fr(void)
{
 80095dc:	b5b0      	push	{r4, r5, r7, lr}
 80095de:	b0e4      	sub	sp, #400	; 0x190
 80095e0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80095e2:	24c8      	movs	r4, #200	; 0xc8
 80095e4:	193b      	adds	r3, r7, r4
 80095e6:	0018      	movs	r0, r3
 80095e8:	23c6      	movs	r3, #198	; 0xc6
 80095ea:	001a      	movs	r2, r3
 80095ec:	2100      	movs	r1, #0
 80095ee:	f003 fed7 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 80095f2:	4b15      	ldr	r3, [pc, #84]	; (8009648 <astronode_send_pld_fr+0x6c>)
 80095f4:	25c8      	movs	r5, #200	; 0xc8
 80095f6:	006d      	lsls	r5, r5, #1
 80095f8:	195b      	adds	r3, r3, r5
 80095fa:	19db      	adds	r3, r3, r7
 80095fc:	0018      	movs	r0, r3
 80095fe:	23c6      	movs	r3, #198	; 0xc6
 8009600:	001a      	movs	r2, r3
 8009602:	2100      	movs	r1, #0
 8009604:	f003 fecc 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_PLD_FR;
 8009608:	193b      	adds	r3, r7, r4
 800960a:	2227      	movs	r2, #39	; 0x27
 800960c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800960e:	003a      	movs	r2, r7
 8009610:	193b      	adds	r3, r7, r4
 8009612:	0011      	movs	r1, r2
 8009614:	0018      	movs	r0, r3
 8009616:	f000 fe65 	bl	800a2e4 <astronode_transport_send_receive>
 800961a:	0003      	movs	r3, r0
 800961c:	2b01      	cmp	r3, #1
 800961e:	d10e      	bne.n	800963e <astronode_send_pld_fr+0x62>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_PLD_FA)
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <astronode_send_pld_fr+0x6c>)
 8009622:	195b      	adds	r3, r3, r5
 8009624:	19db      	adds	r3, r3, r7
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2ba7      	cmp	r3, #167	; 0xa7
 800962a:	d104      	bne.n	8009636 <astronode_send_pld_fr+0x5a>
        {
            send_debug_logs("astronode_application: payload queue has been cleared.");
 800962c:	4b07      	ldr	r3, [pc, #28]	; (800964c <astronode_send_pld_fr+0x70>)
 800962e:	0018      	movs	r0, r3
 8009630:	f7f9 fd5a 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
        }
    }
}
 8009634:	e003      	b.n	800963e <astronode_send_pld_fr+0x62>
            send_debug_logs("astronode_application: Failed to clear the payload queue.");
 8009636:	4b06      	ldr	r3, [pc, #24]	; (8009650 <astronode_send_pld_fr+0x74>)
 8009638:	0018      	movs	r0, r3
 800963a:	f7f9 fd55 	bl	80030e8 <send_debug_logs>
}
 800963e:	46c0      	nop			; (mov r8, r8)
 8009640:	46bd      	mov	sp, r7
 8009642:	b064      	add	sp, #400	; 0x190
 8009644:	bdb0      	pop	{r4, r5, r7, pc}
 8009646:	46c0      	nop			; (mov r8, r8)
 8009648:	fffffe70 	.word	0xfffffe70
 800964c:	08014834 	.word	0x08014834
 8009650:	0801486c 	.word	0x0801486c

08009654 <astronode_send_res_cr>:

void astronode_send_res_cr(void)
{
 8009654:	b5b0      	push	{r4, r5, r7, lr}
 8009656:	b0e4      	sub	sp, #400	; 0x190
 8009658:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800965a:	24c8      	movs	r4, #200	; 0xc8
 800965c:	193b      	adds	r3, r7, r4
 800965e:	0018      	movs	r0, r3
 8009660:	23c6      	movs	r3, #198	; 0xc6
 8009662:	001a      	movs	r2, r3
 8009664:	2100      	movs	r1, #0
 8009666:	f003 fe9b 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 800966a:	4b16      	ldr	r3, [pc, #88]	; (80096c4 <astronode_send_res_cr+0x70>)
 800966c:	25c8      	movs	r5, #200	; 0xc8
 800966e:	006d      	lsls	r5, r5, #1
 8009670:	195b      	adds	r3, r3, r5
 8009672:	19db      	adds	r3, r3, r7
 8009674:	0018      	movs	r0, r3
 8009676:	23c6      	movs	r3, #198	; 0xc6
 8009678:	001a      	movs	r2, r3
 800967a:	2100      	movs	r1, #0
 800967c:	f003 fe90 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RES_CR;
 8009680:	193b      	adds	r3, r7, r4
 8009682:	2255      	movs	r2, #85	; 0x55
 8009684:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009686:	003a      	movs	r2, r7
 8009688:	193b      	adds	r3, r7, r4
 800968a:	0011      	movs	r1, r2
 800968c:	0018      	movs	r0, r3
 800968e:	f000 fe29 	bl	800a2e4 <astronode_transport_send_receive>
 8009692:	0003      	movs	r3, r0
 8009694:	2b01      	cmp	r3, #1
 8009696:	d111      	bne.n	80096bc <astronode_send_res_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_RES_CA)
 8009698:	4b0a      	ldr	r3, [pc, #40]	; (80096c4 <astronode_send_res_cr+0x70>)
 800969a:	195b      	adds	r3, r3, r5
 800969c:	19db      	adds	r3, r3, r7
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2bd5      	cmp	r3, #213	; 0xd5
 80096a2:	d107      	bne.n	80096b4 <astronode_send_res_cr+0x60>
        {
            g_is_astronode_reset = false;
 80096a4:	4b08      	ldr	r3, [pc, #32]	; (80096c8 <astronode_send_res_cr+0x74>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]
            send_debug_logs("astronode_application: The reset has been cleared.");
 80096aa:	4b08      	ldr	r3, [pc, #32]	; (80096cc <astronode_send_res_cr+0x78>)
 80096ac:	0018      	movs	r0, r3
 80096ae:	f7f9 fd1b 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No reset to clear.");
        }
    }
}
 80096b2:	e003      	b.n	80096bc <astronode_send_res_cr+0x68>
            send_debug_logs("astronode_application: No reset to clear.");
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <astronode_send_res_cr+0x7c>)
 80096b6:	0018      	movs	r0, r3
 80096b8:	f7f9 fd16 	bl	80030e8 <send_debug_logs>
}
 80096bc:	46c0      	nop			; (mov r8, r8)
 80096be:	46bd      	mov	sp, r7
 80096c0:	b064      	add	sp, #400	; 0x190
 80096c2:	bdb0      	pop	{r4, r5, r7, pc}
 80096c4:	fffffe70 	.word	0xfffffe70
 80096c8:	20000b1d 	.word	0x20000b1d
 80096cc:	080148a8 	.word	0x080148a8
 80096d0:	080148dc 	.word	0x080148dc

080096d4 <astronode_send_rtc_rr>:

uint32_t astronode_send_rtc_rr ( void )
{
 80096d4:	b5b0      	push	{r4, r5, r7, lr}
 80096d6:	b0fa      	sub	sp, #488	; 0x1e8
 80096d8:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0} ;
 80096da:	258e      	movs	r5, #142	; 0x8e
 80096dc:	006d      	lsls	r5, r5, #1
 80096de:	197b      	adds	r3, r7, r5
 80096e0:	0018      	movs	r0, r3
 80096e2:	23c6      	movs	r3, #198	; 0xc6
 80096e4:	001a      	movs	r2, r3
 80096e6:	2100      	movs	r1, #0
 80096e8:	f003 fe5a 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0} ;
 80096ec:	4b28      	ldr	r3, [pc, #160]	; (8009790 <astronode_send_rtc_rr+0xbc>)
 80096ee:	24f4      	movs	r4, #244	; 0xf4
 80096f0:	0064      	lsls	r4, r4, #1
 80096f2:	191b      	adds	r3, r3, r4
 80096f4:	19db      	adds	r3, r3, r7
 80096f6:	0018      	movs	r0, r3
 80096f8:	23c6      	movs	r3, #198	; 0xc6
 80096fa:	001a      	movs	r2, r3
 80096fc:	2100      	movs	r1, #0
 80096fe:	f003 fe4f 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_RTC_RR ;
 8009702:	197b      	adds	r3, r7, r5
 8009704:	2217      	movs	r2, #23
 8009706:	701a      	strb	r2, [r3, #0]

    if ( astronode_transport_send_receive ( &request , &answer ) == RS_SUCCESS )
 8009708:	2354      	movs	r3, #84	; 0x54
 800970a:	18fa      	adds	r2, r7, r3
 800970c:	197b      	adds	r3, r7, r5
 800970e:	0011      	movs	r1, r2
 8009710:	0018      	movs	r0, r3
 8009712:	f000 fde7 	bl	800a2e4 <astronode_transport_send_receive>
 8009716:	0003      	movs	r3, r0
 8009718:	2b01      	cmp	r3, #1
 800971a:	d133      	bne.n	8009784 <astronode_send_rtc_rr+0xb0>
    {
        if ( answer.op_code == ASTRONODE_OP_CODE_RTC_RA )
 800971c:	4b1c      	ldr	r3, [pc, #112]	; (8009790 <astronode_send_rtc_rr+0xbc>)
 800971e:	0021      	movs	r1, r4
 8009720:	185b      	adds	r3, r3, r1
 8009722:	19db      	adds	r3, r3, r7
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b97      	cmp	r3, #151	; 0x97
 8009728:	d128      	bne.n	800977c <astronode_send_rtc_rr+0xa8>
        {
            uint32_t rtc_time = answer.p_payload[0]
 800972a:	4b19      	ldr	r3, [pc, #100]	; (8009790 <astronode_send_rtc_rr+0xbc>)
 800972c:	185b      	adds	r3, r3, r1
 800972e:	19db      	adds	r3, r3, r7
 8009730:	785b      	ldrb	r3, [r3, #1]
 8009732:	001a      	movs	r2, r3
                                        + ( answer.p_payload[1] << 8 )
 8009734:	4b16      	ldr	r3, [pc, #88]	; (8009790 <astronode_send_rtc_rr+0xbc>)
 8009736:	185b      	adds	r3, r3, r1
 8009738:	19db      	adds	r3, r3, r7
 800973a:	789b      	ldrb	r3, [r3, #2]
 800973c:	021b      	lsls	r3, r3, #8
 800973e:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[2] << 16 )
 8009740:	4b13      	ldr	r3, [pc, #76]	; (8009790 <astronode_send_rtc_rr+0xbc>)
 8009742:	185b      	adds	r3, r3, r1
 8009744:	19db      	adds	r3, r3, r7
 8009746:	78db      	ldrb	r3, [r3, #3]
 8009748:	041b      	lsls	r3, r3, #16
 800974a:	18d2      	adds	r2, r2, r3
                                        + ( answer.p_payload[3] << 24 ) ;
 800974c:	4b10      	ldr	r3, [pc, #64]	; (8009790 <astronode_send_rtc_rr+0xbc>)
 800974e:	185b      	adds	r3, r3, r1
 8009750:	19db      	adds	r3, r3, r7
 8009752:	791b      	ldrb	r3, [r3, #4]
 8009754:	061b      	lsls	r3, r3, #24
 8009756:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009758:	24f2      	movs	r4, #242	; 0xf2
 800975a:	0064      	lsls	r4, r4, #1
 800975c:	193a      	adds	r2, r7, r4
 800975e:	6013      	str	r3, [r2, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH] ;
            sprintf ( str , "RTC time since Astrocast Epoch (2018-01-01 00:00:00 UTC): %lds." , rtc_time ) ;
 8009760:	193b      	adds	r3, r7, r4
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	490b      	ldr	r1, [pc, #44]	; (8009794 <astronode_send_rtc_rr+0xc0>)
 8009766:	1d3b      	adds	r3, r7, #4
 8009768:	0018      	movs	r0, r3
 800976a:	f003 fd83 	bl	800d274 <sprintf>
            send_debug_logs ( str ) ;
 800976e:	1d3b      	adds	r3, r7, #4
 8009770:	0018      	movs	r0, r3
 8009772:	f7f9 fcb9 	bl	80030e8 <send_debug_logs>
            return rtc_time ;
 8009776:	193b      	adds	r3, r7, r4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	e004      	b.n	8009786 <astronode_send_rtc_rr+0xb2>
        }
        else
        {
            send_debug_logs ( "Failed to read rtc time." ) ;
 800977c:	4b06      	ldr	r3, [pc, #24]	; (8009798 <astronode_send_rtc_rr+0xc4>)
 800977e:	0018      	movs	r0, r3
 8009780:	f7f9 fcb2 	bl	80030e8 <send_debug_logs>
        }
    }
    return 0 ;
 8009784:	2300      	movs	r3, #0
}
 8009786:	0018      	movs	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	b07a      	add	sp, #488	; 0x1e8
 800978c:	bdb0      	pop	{r4, r5, r7, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	fffffe6c 	.word	0xfffffe6c
 8009794:	08014908 	.word	0x08014908
 8009798:	08014948 	.word	0x08014948

0800979c <astronode_send_sak_rr>:

void astronode_send_sak_rr(void)
{
 800979c:	b5b0      	push	{r4, r5, r7, lr}
 800979e:	b0f8      	sub	sp, #480	; 0x1e0
 80097a0:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80097a2:	258c      	movs	r5, #140	; 0x8c
 80097a4:	006d      	lsls	r5, r5, #1
 80097a6:	197b      	adds	r3, r7, r5
 80097a8:	0018      	movs	r0, r3
 80097aa:	23c6      	movs	r3, #198	; 0xc6
 80097ac:	001a      	movs	r2, r3
 80097ae:	2100      	movs	r1, #0
 80097b0:	f003 fdf6 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 80097b4:	4b21      	ldr	r3, [pc, #132]	; (800983c <astronode_send_sak_rr+0xa0>)
 80097b6:	24f0      	movs	r4, #240	; 0xf0
 80097b8:	0064      	lsls	r4, r4, #1
 80097ba:	191b      	adds	r3, r3, r4
 80097bc:	19db      	adds	r3, r3, r7
 80097be:	0018      	movs	r0, r3
 80097c0:	23c6      	movs	r3, #198	; 0xc6
 80097c2:	001a      	movs	r2, r3
 80097c4:	2100      	movs	r1, #0
 80097c6:	f003 fdeb 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_RR;
 80097ca:	197b      	adds	r3, r7, r5
 80097cc:	2245      	movs	r2, #69	; 0x45
 80097ce:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 80097d0:	2350      	movs	r3, #80	; 0x50
 80097d2:	18fa      	adds	r2, r7, r3
 80097d4:	197b      	adds	r3, r7, r5
 80097d6:	0011      	movs	r1, r2
 80097d8:	0018      	movs	r0, r3
 80097da:	f000 fd83 	bl	800a2e4 <astronode_transport_send_receive>
 80097de:	0003      	movs	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d126      	bne.n	8009832 <astronode_send_sak_rr+0x96>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_RA)
 80097e4:	4b15      	ldr	r3, [pc, #84]	; (800983c <astronode_send_sak_rr+0xa0>)
 80097e6:	191b      	adds	r3, r3, r4
 80097e8:	19db      	adds	r3, r3, r7
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2bc5      	cmp	r3, #197	; 0xc5
 80097ee:	d11c      	bne.n	800982a <astronode_send_sak_rr+0x8e>
        {
            uint16_t payload_id = answer.p_payload[0] + (answer.p_payload[1] << 8);
 80097f0:	4b12      	ldr	r3, [pc, #72]	; (800983c <astronode_send_sak_rr+0xa0>)
 80097f2:	191b      	adds	r3, r3, r4
 80097f4:	19db      	adds	r3, r3, r7
 80097f6:	785b      	ldrb	r3, [r3, #1]
 80097f8:	b299      	uxth	r1, r3
 80097fa:	4b10      	ldr	r3, [pc, #64]	; (800983c <astronode_send_sak_rr+0xa0>)
 80097fc:	191b      	adds	r3, r3, r4
 80097fe:	19db      	adds	r3, r3, r7
 8009800:	789b      	ldrb	r3, [r3, #2]
 8009802:	b29b      	uxth	r3, r3
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	b29a      	uxth	r2, r3
 8009808:	20ef      	movs	r0, #239	; 0xef
 800980a:	0040      	lsls	r0, r0, #1
 800980c:	183b      	adds	r3, r7, r0
 800980e:	188a      	adds	r2, r1, r2
 8009810:	801a      	strh	r2, [r3, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Acknowledgment for payload %d is available.", payload_id);
 8009812:	183b      	adds	r3, r7, r0
 8009814:	881a      	ldrh	r2, [r3, #0]
 8009816:	490a      	ldr	r1, [pc, #40]	; (8009840 <astronode_send_sak_rr+0xa4>)
 8009818:	003b      	movs	r3, r7
 800981a:	0018      	movs	r0, r3
 800981c:	f003 fd2a 	bl	800d274 <sprintf>
            send_debug_logs(str);
 8009820:	003b      	movs	r3, r7
 8009822:	0018      	movs	r0, r3
 8009824:	f7f9 fc60 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("astronode_application: No acknowledgment available.");
        }
    }
}
 8009828:	e003      	b.n	8009832 <astronode_send_sak_rr+0x96>
            send_debug_logs("astronode_application: No acknowledgment available.");
 800982a:	4b06      	ldr	r3, [pc, #24]	; (8009844 <astronode_send_sak_rr+0xa8>)
 800982c:	0018      	movs	r0, r3
 800982e:	f7f9 fc5b 	bl	80030e8 <send_debug_logs>
}
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	46bd      	mov	sp, r7
 8009836:	b078      	add	sp, #480	; 0x1e0
 8009838:	bdb0      	pop	{r4, r5, r7, pc}
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	fffffe70 	.word	0xfffffe70
 8009840:	08014964 	.word	0x08014964
 8009844:	08014990 	.word	0x08014990

08009848 <astronode_send_sak_cr>:

void astronode_send_sak_cr(void)
{
 8009848:	b5b0      	push	{r4, r5, r7, lr}
 800984a:	b0e4      	sub	sp, #400	; 0x190
 800984c:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 800984e:	24c8      	movs	r4, #200	; 0xc8
 8009850:	193b      	adds	r3, r7, r4
 8009852:	0018      	movs	r0, r3
 8009854:	23c6      	movs	r3, #198	; 0xc6
 8009856:	001a      	movs	r2, r3
 8009858:	2100      	movs	r1, #0
 800985a:	f003 fda1 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 800985e:	4b16      	ldr	r3, [pc, #88]	; (80098b8 <astronode_send_sak_cr+0x70>)
 8009860:	25c8      	movs	r5, #200	; 0xc8
 8009862:	006d      	lsls	r5, r5, #1
 8009864:	195b      	adds	r3, r3, r5
 8009866:	19db      	adds	r3, r3, r7
 8009868:	0018      	movs	r0, r3
 800986a:	23c6      	movs	r3, #198	; 0xc6
 800986c:	001a      	movs	r2, r3
 800986e:	2100      	movs	r1, #0
 8009870:	f003 fd96 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_SAK_CR;
 8009874:	193b      	adds	r3, r7, r4
 8009876:	2246      	movs	r2, #70	; 0x46
 8009878:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800987a:	003a      	movs	r2, r7
 800987c:	193b      	adds	r3, r7, r4
 800987e:	0011      	movs	r1, r2
 8009880:	0018      	movs	r0, r3
 8009882:	f000 fd2f 	bl	800a2e4 <astronode_transport_send_receive>
 8009886:	0003      	movs	r3, r0
 8009888:	2b01      	cmp	r3, #1
 800988a:	d111      	bne.n	80098b0 <astronode_send_sak_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_SAK_CA)
 800988c:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <astronode_send_sak_cr+0x70>)
 800988e:	195b      	adds	r3, r3, r5
 8009890:	19db      	adds	r3, r3, r7
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	2bc6      	cmp	r3, #198	; 0xc6
 8009896:	d107      	bne.n	80098a8 <astronode_send_sak_cr+0x60>
        {
            g_is_sak_available = false;
 8009898:	4b08      	ldr	r3, [pc, #32]	; (80098bc <astronode_send_sak_cr+0x74>)
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The acknowledgment has been cleared.");
 800989e:	4b08      	ldr	r3, [pc, #32]	; (80098c0 <astronode_send_sak_cr+0x78>)
 80098a0:	0018      	movs	r0, r3
 80098a2:	f7f9 fc21 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("No acknowledgment available.");
        }
    }
}
 80098a6:	e003      	b.n	80098b0 <astronode_send_sak_cr+0x68>
            send_debug_logs("No acknowledgment available.");
 80098a8:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <astronode_send_sak_cr+0x7c>)
 80098aa:	0018      	movs	r0, r3
 80098ac:	f7f9 fc1c 	bl	80030e8 <send_debug_logs>
}
 80098b0:	46c0      	nop			; (mov r8, r8)
 80098b2:	46bd      	mov	sp, r7
 80098b4:	b064      	add	sp, #400	; 0x190
 80098b6:	bdb0      	pop	{r4, r5, r7, pc}
 80098b8:	fffffe70 	.word	0xfffffe70
 80098bc:	20000b1c 	.word	0x20000b1c
 80098c0:	080149c4 	.word	0x080149c4
 80098c4:	080149ec 	.word	0x080149ec

080098c8 <astronode_send_mpn_rr>:
        }
    }
}

void astronode_send_mpn_rr(void)
{
 80098c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ca:	b0ed      	sub	sp, #436	; 0x1b4
 80098cc:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 80098ce:	21c8      	movs	r1, #200	; 0xc8
 80098d0:	2318      	movs	r3, #24
 80098d2:	18cb      	adds	r3, r1, r3
 80098d4:	19db      	adds	r3, r3, r7
 80098d6:	0018      	movs	r0, r3
 80098d8:	23c6      	movs	r3, #198	; 0xc6
 80098da:	001a      	movs	r2, r3
 80098dc:	2100      	movs	r1, #0
 80098de:	f003 fd5f 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 80098e2:	4b4a      	ldr	r3, [pc, #296]	; (8009a0c <astronode_send_mpn_rr+0x144>)
 80098e4:	26cc      	movs	r6, #204	; 0xcc
 80098e6:	0076      	lsls	r6, r6, #1
 80098e8:	199b      	adds	r3, r3, r6
 80098ea:	2218      	movs	r2, #24
 80098ec:	4694      	mov	ip, r2
 80098ee:	44bc      	add	ip, r7
 80098f0:	4463      	add	r3, ip
 80098f2:	0018      	movs	r0, r3
 80098f4:	23c6      	movs	r3, #198	; 0xc6
 80098f6:	001a      	movs	r2, r3
 80098f8:	2100      	movs	r1, #0
 80098fa:	f003 fd51 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_MPN_RR;
 80098fe:	21c8      	movs	r1, #200	; 0xc8
 8009900:	2318      	movs	r3, #24
 8009902:	18cb      	adds	r3, r1, r3
 8009904:	19db      	adds	r3, r3, r7
 8009906:	221b      	movs	r2, #27
 8009908:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 800990a:	2318      	movs	r3, #24
 800990c:	18fa      	adds	r2, r7, r3
 800990e:	2318      	movs	r3, #24
 8009910:	18cb      	adds	r3, r1, r3
 8009912:	19db      	adds	r3, r3, r7
 8009914:	0011      	movs	r1, r2
 8009916:	0018      	movs	r0, r3
 8009918:	f000 fce4 	bl	800a2e4 <astronode_transport_send_receive>
 800991c:	0003      	movs	r3, r0
 800991e:	2b01      	cmp	r3, #1
 8009920:	d16f      	bne.n	8009a02 <astronode_send_mpn_rr+0x13a>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_MPN_RA)
 8009922:	4b3a      	ldr	r3, [pc, #232]	; (8009a0c <astronode_send_mpn_rr+0x144>)
 8009924:	0032      	movs	r2, r6
 8009926:	189b      	adds	r3, r3, r2
 8009928:	2118      	movs	r1, #24
 800992a:	468c      	mov	ip, r1
 800992c:	44bc      	add	ip, r7
 800992e:	4463      	add	r3, ip
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b9b      	cmp	r3, #155	; 0x9b
 8009934:	d161      	bne.n	80099fa <astronode_send_mpn_rr+0x132>
        {
 8009936:	466b      	mov	r3, sp
 8009938:	001e      	movs	r6, r3
            char product_number[answer.payload_len];
 800993a:	4b34      	ldr	r3, [pc, #208]	; (8009a0c <astronode_send_mpn_rr+0x144>)
 800993c:	189b      	adds	r3, r3, r2
 800993e:	2218      	movs	r2, #24
 8009940:	4694      	mov	ip, r2
 8009942:	44bc      	add	ip, r7
 8009944:	4463      	add	r3, ip
 8009946:	22c4      	movs	r2, #196	; 0xc4
 8009948:	5a9b      	ldrh	r3, [r3, r2]
 800994a:	001a      	movs	r2, r3
 800994c:	3a01      	subs	r2, #1
 800994e:	21ca      	movs	r1, #202	; 0xca
 8009950:	0049      	lsls	r1, r1, #1
 8009952:	2018      	movs	r0, #24
 8009954:	1809      	adds	r1, r1, r0
 8009956:	19c9      	adds	r1, r1, r7
 8009958:	600a      	str	r2, [r1, #0]
 800995a:	001c      	movs	r4, r3
 800995c:	2200      	movs	r2, #0
 800995e:	0015      	movs	r5, r2
 8009960:	0020      	movs	r0, r4
 8009962:	0029      	movs	r1, r5
 8009964:	0004      	movs	r4, r0
 8009966:	0f62      	lsrs	r2, r4, #29
 8009968:	000c      	movs	r4, r1
 800996a:	00e4      	lsls	r4, r4, #3
 800996c:	617c      	str	r4, [r7, #20]
 800996e:	697c      	ldr	r4, [r7, #20]
 8009970:	4314      	orrs	r4, r2
 8009972:	617c      	str	r4, [r7, #20]
 8009974:	0001      	movs	r1, r0
 8009976:	00c9      	lsls	r1, r1, #3
 8009978:	6139      	str	r1, [r7, #16]
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	2200      	movs	r2, #0
 800997e:	607a      	str	r2, [r7, #4]
 8009980:	6838      	ldr	r0, [r7, #0]
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	0004      	movs	r4, r0
 8009986:	0f62      	lsrs	r2, r4, #29
 8009988:	000c      	movs	r4, r1
 800998a:	00e4      	lsls	r4, r4, #3
 800998c:	60fc      	str	r4, [r7, #12]
 800998e:	68fc      	ldr	r4, [r7, #12]
 8009990:	4314      	orrs	r4, r2
 8009992:	60fc      	str	r4, [r7, #12]
 8009994:	0001      	movs	r1, r0
 8009996:	00ca      	lsls	r2, r1, #3
 8009998:	60ba      	str	r2, [r7, #8]
 800999a:	3307      	adds	r3, #7
 800999c:	08db      	lsrs	r3, r3, #3
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	4669      	mov	r1, sp
 80099a2:	1acb      	subs	r3, r1, r3
 80099a4:	469d      	mov	sp, r3
 80099a6:	466b      	mov	r3, sp
 80099a8:	3300      	adds	r3, #0
 80099aa:	24c8      	movs	r4, #200	; 0xc8
 80099ac:	0064      	lsls	r4, r4, #1
 80099ae:	2218      	movs	r2, #24
 80099b0:	18a2      	adds	r2, r4, r2
 80099b2:	19d1      	adds	r1, r2, r7
 80099b4:	600b      	str	r3, [r1, #0]
            send_debug_logs("Module's product number is:");
 80099b6:	4b16      	ldr	r3, [pc, #88]	; (8009a10 <astronode_send_mpn_rr+0x148>)
 80099b8:	0018      	movs	r0, r3
 80099ba:	f7f9 fb95 	bl	80030e8 <send_debug_logs>
            snprintf(product_number, answer.payload_len, "%s", answer.p_payload);
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <astronode_send_mpn_rr+0x144>)
 80099c0:	22cc      	movs	r2, #204	; 0xcc
 80099c2:	0052      	lsls	r2, r2, #1
 80099c4:	189b      	adds	r3, r3, r2
 80099c6:	2218      	movs	r2, #24
 80099c8:	4694      	mov	ip, r2
 80099ca:	44bc      	add	ip, r7
 80099cc:	4463      	add	r3, ip
 80099ce:	22c4      	movs	r2, #196	; 0xc4
 80099d0:	5a9b      	ldrh	r3, [r3, r2]
 80099d2:	0019      	movs	r1, r3
 80099d4:	2318      	movs	r3, #24
 80099d6:	18fb      	adds	r3, r7, r3
 80099d8:	3301      	adds	r3, #1
 80099da:	4a0e      	ldr	r2, [pc, #56]	; (8009a14 <astronode_send_mpn_rr+0x14c>)
 80099dc:	2018      	movs	r0, #24
 80099de:	1820      	adds	r0, r4, r0
 80099e0:	19c0      	adds	r0, r0, r7
 80099e2:	6800      	ldr	r0, [r0, #0]
 80099e4:	f003 fc12 	bl	800d20c <snprintf>
            send_debug_logs(product_number);
 80099e8:	2318      	movs	r3, #24
 80099ea:	18e3      	adds	r3, r4, r3
 80099ec:	19db      	adds	r3, r3, r7
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	0018      	movs	r0, r3
 80099f2:	f7f9 fb79 	bl	80030e8 <send_debug_logs>
 80099f6:	46b5      	mov	sp, r6
        else
        {
            send_debug_logs("Failed to read module Serial Number.");
        }
    }
}
 80099f8:	e003      	b.n	8009a02 <astronode_send_mpn_rr+0x13a>
            send_debug_logs("Failed to read module Serial Number.");
 80099fa:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <astronode_send_mpn_rr+0x150>)
 80099fc:	0018      	movs	r0, r3
 80099fe:	f7f9 fb73 	bl	80030e8 <send_debug_logs>
}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	46bd      	mov	sp, r7
 8009a06:	b06d      	add	sp, #436	; 0x1b4
 8009a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a0a:	46c0      	nop			; (mov r8, r8)
 8009a0c:	fffffe68 	.word	0xfffffe68
 8009a10:	08014ab4 	.word	0x08014ab4
 8009a14:	080145d0 	.word	0x080145d0
 8009a18:	0801460c 	.word	0x0801460c

08009a1c <astronode_send_cmd_cr>:
        }
    }
}

void astronode_send_cmd_cr(void)
{
 8009a1c:	b5b0      	push	{r4, r5, r7, lr}
 8009a1e:	b0e4      	sub	sp, #400	; 0x190
 8009a20:	af00      	add	r7, sp, #0
    astronode_app_msg_t request = {0};
 8009a22:	24c8      	movs	r4, #200	; 0xc8
 8009a24:	193b      	adds	r3, r7, r4
 8009a26:	0018      	movs	r0, r3
 8009a28:	23c6      	movs	r3, #198	; 0xc6
 8009a2a:	001a      	movs	r2, r3
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	f003 fcb7 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 8009a32:	4b16      	ldr	r3, [pc, #88]	; (8009a8c <astronode_send_cmd_cr+0x70>)
 8009a34:	25c8      	movs	r5, #200	; 0xc8
 8009a36:	006d      	lsls	r5, r5, #1
 8009a38:	195b      	adds	r3, r3, r5
 8009a3a:	19db      	adds	r3, r3, r7
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	23c6      	movs	r3, #198	; 0xc6
 8009a40:	001a      	movs	r2, r3
 8009a42:	2100      	movs	r1, #0
 8009a44:	f003 fcac 	bl	800d3a0 <memset>

    request.op_code = ASTRONODE_OP_CODE_CMD_CR;
 8009a48:	193b      	adds	r3, r7, r4
 8009a4a:	2248      	movs	r2, #72	; 0x48
 8009a4c:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009a4e:	003a      	movs	r2, r7
 8009a50:	193b      	adds	r3, r7, r4
 8009a52:	0011      	movs	r1, r2
 8009a54:	0018      	movs	r0, r3
 8009a56:	f000 fc45 	bl	800a2e4 <astronode_transport_send_receive>
 8009a5a:	0003      	movs	r3, r0
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d111      	bne.n	8009a84 <astronode_send_cmd_cr+0x68>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_CA)
 8009a60:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <astronode_send_cmd_cr+0x70>)
 8009a62:	195b      	adds	r3, r3, r5
 8009a64:	19db      	adds	r3, r3, r7
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	2bc8      	cmp	r3, #200	; 0xc8
 8009a6a:	d107      	bne.n	8009a7c <astronode_send_cmd_cr+0x60>
        {
            g_is_command_available = false;
 8009a6c:	4b08      	ldr	r3, [pc, #32]	; (8009a90 <astronode_send_cmd_cr+0x74>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	701a      	strb	r2, [r3, #0]
            send_debug_logs("The command ack has been cleared.");
 8009a72:	4b08      	ldr	r3, [pc, #32]	; (8009a94 <astronode_send_cmd_cr+0x78>)
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7f9 fb37 	bl	80030e8 <send_debug_logs>
        else
        {
            send_debug_logs("No command to clear.");
        }
    }
}
 8009a7a:	e003      	b.n	8009a84 <astronode_send_cmd_cr+0x68>
            send_debug_logs("No command to clear.");
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <astronode_send_cmd_cr+0x7c>)
 8009a7e:	0018      	movs	r0, r3
 8009a80:	f7f9 fb32 	bl	80030e8 <send_debug_logs>
}
 8009a84:	46c0      	nop			; (mov r8, r8)
 8009a86:	46bd      	mov	sp, r7
 8009a88:	b064      	add	sp, #400	; 0x190
 8009a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009a8c:	fffffe70 	.word	0xfffffe70
 8009a90:	20000b1e 	.word	0x20000b1e
 8009a94:	08014f04 	.word	0x08014f04
 8009a98:	08014f28 	.word	0x08014f28

08009a9c <astronode_send_cmd_rr>:

bool astronode_send_cmd_rr ( char* my_astro_rcv_cmd )
{
 8009a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a9e:	4cc6      	ldr	r4, [pc, #792]	; (8009db8 <astronode_send_cmd_rr+0x31c>)
 8009aa0:	44a5      	add	sp, r4
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	61f8      	str	r0, [r7, #28]
    astronode_app_msg_t request = {0};
 8009aa6:	2190      	movs	r1, #144	; 0x90
 8009aa8:	0049      	lsls	r1, r1, #1
 8009aaa:	2318      	movs	r3, #24
 8009aac:	18cb      	adds	r3, r1, r3
 8009aae:	19db      	adds	r3, r3, r7
 8009ab0:	0018      	movs	r0, r3
 8009ab2:	23c6      	movs	r3, #198	; 0xc6
 8009ab4:	001a      	movs	r2, r3
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	f003 fc72 	bl	800d3a0 <memset>
    astronode_app_msg_t answer = {0};
 8009abc:	4bbf      	ldr	r3, [pc, #764]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009abe:	26fc      	movs	r6, #252	; 0xfc
 8009ac0:	0076      	lsls	r6, r6, #1
 8009ac2:	199b      	adds	r3, r3, r6
 8009ac4:	2218      	movs	r2, #24
 8009ac6:	4694      	mov	ip, r2
 8009ac8:	44bc      	add	ip, r7
 8009aca:	4463      	add	r3, ip
 8009acc:	0018      	movs	r0, r3
 8009ace:	23c6      	movs	r3, #198	; 0xc6
 8009ad0:	001a      	movs	r2, r3
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	f003 fc64 	bl	800d3a0 <memset>
    bool result = false ;
 8009ad8:	23f8      	movs	r3, #248	; 0xf8
 8009ada:	33ff      	adds	r3, #255	; 0xff
 8009adc:	2218      	movs	r2, #24
 8009ade:	189b      	adds	r3, r3, r2
 8009ae0:	19db      	adds	r3, r3, r7
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]

    request.op_code = ASTRONODE_OP_CODE_CMD_RR;
 8009ae6:	2190      	movs	r1, #144	; 0x90
 8009ae8:	0049      	lsls	r1, r1, #1
 8009aea:	2318      	movs	r3, #24
 8009aec:	18cb      	adds	r3, r1, r3
 8009aee:	19db      	adds	r3, r3, r7
 8009af0:	2247      	movs	r2, #71	; 0x47
 8009af2:	701a      	strb	r2, [r3, #0]

    if (astronode_transport_send_receive(&request, &answer) == RS_SUCCESS)
 8009af4:	2258      	movs	r2, #88	; 0x58
 8009af6:	2318      	movs	r3, #24
 8009af8:	18d3      	adds	r3, r2, r3
 8009afa:	19da      	adds	r2, r3, r7
 8009afc:	2318      	movs	r3, #24
 8009afe:	18cb      	adds	r3, r1, r3
 8009b00:	19db      	adds	r3, r3, r7
 8009b02:	0011      	movs	r1, r2
 8009b04:	0018      	movs	r0, r3
 8009b06:	f000 fbed 	bl	800a2e4 <astronode_transport_send_receive>
 8009b0a:	0003      	movs	r3, r0
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d000      	beq.n	8009b12 <astronode_send_cmd_rr+0x76>
 8009b10:	e146      	b.n	8009da0 <astronode_send_cmd_rr+0x304>
    {
        if (answer.op_code == ASTRONODE_OP_CODE_CMD_RA)
 8009b12:	4baa      	ldr	r3, [pc, #680]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009b14:	199a      	adds	r2, r3, r6
 8009b16:	2318      	movs	r3, #24
 8009b18:	18fb      	adds	r3, r7, r3
 8009b1a:	18d3      	adds	r3, r2, r3
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	2bc7      	cmp	r3, #199	; 0xc7
 8009b20:	d000      	beq.n	8009b24 <astronode_send_cmd_rr+0x88>
 8009b22:	e139      	b.n	8009d98 <astronode_send_cmd_rr+0x2fc>
        {
 8009b24:	466b      	mov	r3, sp
 8009b26:	001e      	movs	r6, r3
            send_debug_logs("Received downlink command");
 8009b28:	4ba5      	ldr	r3, [pc, #660]	; (8009dc0 <astronode_send_cmd_rr+0x324>)
 8009b2a:	0018      	movs	r0, r3
 8009b2c:	f7f9 fadc 	bl	80030e8 <send_debug_logs>
            uint32_t rtc_time = answer.p_payload[0]
 8009b30:	4ba2      	ldr	r3, [pc, #648]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009b32:	21fc      	movs	r1, #252	; 0xfc
 8009b34:	0049      	lsls	r1, r1, #1
 8009b36:	185a      	adds	r2, r3, r1
 8009b38:	2318      	movs	r3, #24
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	18d3      	adds	r3, r2, r3
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	001a      	movs	r2, r3
                                + (answer.p_payload[1] << 8)
 8009b42:	4b9e      	ldr	r3, [pc, #632]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009b44:	1858      	adds	r0, r3, r1
 8009b46:	2318      	movs	r3, #24
 8009b48:	18fb      	adds	r3, r7, r3
 8009b4a:	18c3      	adds	r3, r0, r3
 8009b4c:	789b      	ldrb	r3, [r3, #2]
 8009b4e:	021b      	lsls	r3, r3, #8
 8009b50:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[2] << 16)
 8009b52:	4b9a      	ldr	r3, [pc, #616]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009b54:	1858      	adds	r0, r3, r1
 8009b56:	2318      	movs	r3, #24
 8009b58:	18fb      	adds	r3, r7, r3
 8009b5a:	18c3      	adds	r3, r0, r3
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	18d2      	adds	r2, r2, r3
                                + (answer.p_payload[3] << 24);
 8009b62:	4b96      	ldr	r3, [pc, #600]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009b64:	1858      	adds	r0, r3, r1
 8009b66:	2318      	movs	r3, #24
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	18c3      	adds	r3, r0, r3
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	061b      	lsls	r3, r3, #24
 8009b70:	18d3      	adds	r3, r2, r3
            uint32_t rtc_time = answer.p_payload[0]
 8009b72:	22f8      	movs	r2, #248	; 0xf8
 8009b74:	0052      	lsls	r2, r2, #1
 8009b76:	2118      	movs	r1, #24
 8009b78:	1851      	adds	r1, r2, r1
 8009b7a:	19c8      	adds	r0, r1, r7
 8009b7c:	6003      	str	r3, [r0, #0]
            char str[ASTRONODE_UART_DEBUG_BUFFER_LENGTH];
            sprintf(str, "Command created date, Ref is astrocast Epoch (2018-01-01 00:00:00 UTC): %lds.", rtc_time);
 8009b7e:	2318      	movs	r3, #24
 8009b80:	18d3      	adds	r3, r2, r3
 8009b82:	19da      	adds	r2, r3, r7
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	498f      	ldr	r1, [pc, #572]	; (8009dc4 <astronode_send_cmd_rr+0x328>)
 8009b88:	2008      	movs	r0, #8
 8009b8a:	2318      	movs	r3, #24
 8009b8c:	18c3      	adds	r3, r0, r3
 8009b8e:	19db      	adds	r3, r3, r7
 8009b90:	0018      	movs	r0, r3
 8009b92:	f003 fb6f 	bl	800d274 <sprintf>
            send_debug_logs(str);
 8009b96:	2008      	movs	r0, #8
 8009b98:	2318      	movs	r3, #24
 8009b9a:	18c3      	adds	r3, r0, r3
 8009b9c:	19db      	adds	r3, r3, r7
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f7f9 faa2 	bl	80030e8 <send_debug_logs>

            if (((answer.payload_len - 4) != 40) && ((answer.payload_len - 4) != 8))
 8009ba4:	4b85      	ldr	r3, [pc, #532]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009ba6:	21fc      	movs	r1, #252	; 0xfc
 8009ba8:	0049      	lsls	r1, r1, #1
 8009baa:	185a      	adds	r2, r3, r1
 8009bac:	2318      	movs	r3, #24
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	18d3      	adds	r3, r2, r3
 8009bb2:	22c4      	movs	r2, #196	; 0xc4
 8009bb4:	5a9b      	ldrh	r3, [r3, r2]
 8009bb6:	2b2c      	cmp	r3, #44	; 0x2c
 8009bb8:	d013      	beq.n	8009be2 <astronode_send_cmd_rr+0x146>
 8009bba:	4b80      	ldr	r3, [pc, #512]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009bbc:	185a      	adds	r2, r3, r1
 8009bbe:	2318      	movs	r3, #24
 8009bc0:	18fb      	adds	r3, r7, r3
 8009bc2:	18d3      	adds	r3, r2, r3
 8009bc4:	22c4      	movs	r2, #196	; 0xc4
 8009bc6:	5a9b      	ldrh	r3, [r3, r2]
 8009bc8:	2b0c      	cmp	r3, #12
 8009bca:	d00a      	beq.n	8009be2 <astronode_send_cmd_rr+0x146>
            {
                send_debug_logs("Command size error");
 8009bcc:	4b7e      	ldr	r3, [pc, #504]	; (8009dc8 <astronode_send_cmd_rr+0x32c>)
 8009bce:	0018      	movs	r0, r3
 8009bd0:	f7f9 fa8a 	bl	80030e8 <send_debug_logs>
                return result ;
 8009bd4:	23f8      	movs	r3, #248	; 0xf8
 8009bd6:	33ff      	adds	r3, #255	; 0xff
 8009bd8:	2218      	movs	r2, #24
 8009bda:	189b      	adds	r3, r3, r2
 8009bdc:	19db      	adds	r3, r3, r7
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	e0d8      	b.n	8009d94 <astronode_send_cmd_rr+0x2f8>
            }

            char command_content[answer.payload_len];
 8009be2:	4b76      	ldr	r3, [pc, #472]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009be4:	22fc      	movs	r2, #252	; 0xfc
 8009be6:	0052      	lsls	r2, r2, #1
 8009be8:	189b      	adds	r3, r3, r2
 8009bea:	2218      	movs	r2, #24
 8009bec:	4694      	mov	ip, r2
 8009bee:	44bc      	add	ip, r7
 8009bf0:	4463      	add	r3, ip
 8009bf2:	22c4      	movs	r2, #196	; 0xc4
 8009bf4:	5a9b      	ldrh	r3, [r3, r2]
 8009bf6:	001a      	movs	r2, r3
 8009bf8:	3a01      	subs	r2, #1
 8009bfa:	21f6      	movs	r1, #246	; 0xf6
 8009bfc:	0049      	lsls	r1, r1, #1
 8009bfe:	2018      	movs	r0, #24
 8009c00:	1809      	adds	r1, r1, r0
 8009c02:	19c9      	adds	r1, r1, r7
 8009c04:	600a      	str	r2, [r1, #0]
 8009c06:	001c      	movs	r4, r3
 8009c08:	2200      	movs	r2, #0
 8009c0a:	0015      	movs	r5, r2
 8009c0c:	0020      	movs	r0, r4
 8009c0e:	0029      	movs	r1, r5
 8009c10:	0004      	movs	r4, r0
 8009c12:	0f62      	lsrs	r2, r4, #29
 8009c14:	000c      	movs	r4, r1
 8009c16:	00e4      	lsls	r4, r4, #3
 8009c18:	617c      	str	r4, [r7, #20]
 8009c1a:	697c      	ldr	r4, [r7, #20]
 8009c1c:	4314      	orrs	r4, r2
 8009c1e:	617c      	str	r4, [r7, #20]
 8009c20:	0001      	movs	r1, r0
 8009c22:	00c9      	lsls	r1, r1, #3
 8009c24:	6139      	str	r1, [r7, #16]
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	6838      	ldr	r0, [r7, #0]
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	0004      	movs	r4, r0
 8009c32:	0f62      	lsrs	r2, r4, #29
 8009c34:	000c      	movs	r4, r1
 8009c36:	00e4      	lsls	r4, r4, #3
 8009c38:	60fc      	str	r4, [r7, #12]
 8009c3a:	68fc      	ldr	r4, [r7, #12]
 8009c3c:	4314      	orrs	r4, r2
 8009c3e:	60fc      	str	r4, [r7, #12]
 8009c40:	0001      	movs	r1, r0
 8009c42:	00ca      	lsls	r2, r1, #3
 8009c44:	60ba      	str	r2, [r7, #8]
 8009c46:	3307      	adds	r3, #7
 8009c48:	08db      	lsrs	r3, r3, #3
 8009c4a:	00db      	lsls	r3, r3, #3
 8009c4c:	4669      	mov	r1, sp
 8009c4e:	1acb      	subs	r3, r1, r3
 8009c50:	469d      	mov	sp, r3
 8009c52:	466b      	mov	r3, sp
 8009c54:	3300      	adds	r3, #0
 8009c56:	20f4      	movs	r0, #244	; 0xf4
 8009c58:	0040      	lsls	r0, r0, #1
 8009c5a:	2218      	movs	r2, #24
 8009c5c:	1882      	adds	r2, r0, r2
 8009c5e:	19d1      	adds	r1, r2, r7
 8009c60:	600b      	str	r3, [r1, #0]
            uint16_t command_content_size = snprintf(command_content, (answer.payload_len - 4) + 1, "%s", &answer.p_payload[4]);
 8009c62:	4b56      	ldr	r3, [pc, #344]	; (8009dbc <astronode_send_cmd_rr+0x320>)
 8009c64:	22fc      	movs	r2, #252	; 0xfc
 8009c66:	0052      	lsls	r2, r2, #1
 8009c68:	189b      	adds	r3, r3, r2
 8009c6a:	2218      	movs	r2, #24
 8009c6c:	4694      	mov	ip, r2
 8009c6e:	44bc      	add	ip, r7
 8009c70:	4463      	add	r3, ip
 8009c72:	22c4      	movs	r2, #196	; 0xc4
 8009c74:	5a9b      	ldrh	r3, [r3, r2]
 8009c76:	3b03      	subs	r3, #3
 8009c78:	0019      	movs	r1, r3
 8009c7a:	2358      	movs	r3, #88	; 0x58
 8009c7c:	2218      	movs	r2, #24
 8009c7e:	189b      	adds	r3, r3, r2
 8009c80:	19db      	adds	r3, r3, r7
 8009c82:	3305      	adds	r3, #5
 8009c84:	4a51      	ldr	r2, [pc, #324]	; (8009dcc <astronode_send_cmd_rr+0x330>)
 8009c86:	2418      	movs	r4, #24
 8009c88:	1900      	adds	r0, r0, r4
 8009c8a:	19c0      	adds	r0, r0, r7
 8009c8c:	6800      	ldr	r0, [r0, #0]
 8009c8e:	f003 fabd 	bl	800d20c <snprintf>
 8009c92:	0002      	movs	r2, r0
 8009c94:	23f3      	movs	r3, #243	; 0xf3
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	2118      	movs	r1, #24
 8009c9a:	185b      	adds	r3, r3, r1
 8009c9c:	19db      	adds	r3, r3, r7
 8009c9e:	801a      	strh	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009ca0:	23fb      	movs	r3, #251	; 0xfb
 8009ca2:	005b      	lsls	r3, r3, #1
 8009ca4:	2218      	movs	r2, #24
 8009ca6:	189b      	adds	r3, r3, r2
 8009ca8:	19db      	adds	r3, r3, r7
 8009caa:	2200      	movs	r2, #0
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	e037      	b.n	8009d20 <astronode_send_cmd_rr+0x284>
            {
            	if (isprint((unsigned char)command_content[index]) == 0)
 8009cb0:	23fb      	movs	r3, #251	; 0xfb
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	2218      	movs	r2, #24
 8009cb6:	189b      	adds	r3, r3, r2
 8009cb8:	19db      	adds	r3, r3, r7
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	22f4      	movs	r2, #244	; 0xf4
 8009cbe:	0052      	lsls	r2, r2, #1
 8009cc0:	2118      	movs	r1, #24
 8009cc2:	1852      	adds	r2, r2, r1
 8009cc4:	19d2      	adds	r2, r2, r7
 8009cc6:	6812      	ldr	r2, [r2, #0]
 8009cc8:	5cd3      	ldrb	r3, [r2, r3]
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	4b40      	ldr	r3, [pc, #256]	; (8009dd0 <astronode_send_cmd_rr+0x334>)
 8009cce:	18d3      	adds	r3, r2, r3
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	001a      	movs	r2, r3
 8009cd4:	2397      	movs	r3, #151	; 0x97
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	d105      	bne.n	8009ce6 <astronode_send_cmd_rr+0x24a>
                {
                    send_debug_logs("Command contains non printable characters");
 8009cda:	4b3e      	ldr	r3, [pc, #248]	; (8009dd4 <astronode_send_cmd_rr+0x338>)
 8009cdc:	0018      	movs	r0, r3
 8009cde:	f7f9 fa03 	bl	80030e8 <send_debug_logs>
                    return false;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e056      	b.n	8009d94 <astronode_send_cmd_rr+0x2f8>
                }
            	my_astro_rcv_cmd[index] = command_content[index] ;
 8009ce6:	20fb      	movs	r0, #251	; 0xfb
 8009ce8:	0040      	lsls	r0, r0, #1
 8009cea:	2318      	movs	r3, #24
 8009cec:	18c3      	adds	r3, r0, r3
 8009cee:	19db      	adds	r3, r3, r7
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	2318      	movs	r3, #24
 8009cf4:	18c3      	adds	r3, r0, r3
 8009cf6:	19db      	adds	r3, r3, r7
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	69f9      	ldr	r1, [r7, #28]
 8009cfc:	18cb      	adds	r3, r1, r3
 8009cfe:	21f4      	movs	r1, #244	; 0xf4
 8009d00:	0049      	lsls	r1, r1, #1
 8009d02:	2418      	movs	r4, #24
 8009d04:	1909      	adds	r1, r1, r4
 8009d06:	19c9      	adds	r1, r1, r7
 8009d08:	6809      	ldr	r1, [r1, #0]
 8009d0a:	5c8a      	ldrb	r2, [r1, r2]
 8009d0c:	701a      	strb	r2, [r3, #0]
            for (uint8_t index = 0; index < command_content_size; index++)
 8009d0e:	2318      	movs	r3, #24
 8009d10:	18c3      	adds	r3, r0, r3
 8009d12:	19db      	adds	r3, r3, r7
 8009d14:	781a      	ldrb	r2, [r3, #0]
 8009d16:	2318      	movs	r3, #24
 8009d18:	18c3      	adds	r3, r0, r3
 8009d1a:	19db      	adds	r3, r3, r7
 8009d1c:	3201      	adds	r2, #1
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	23fb      	movs	r3, #251	; 0xfb
 8009d22:	005b      	lsls	r3, r3, #1
 8009d24:	2218      	movs	r2, #24
 8009d26:	189b      	adds	r3, r3, r2
 8009d28:	19db      	adds	r3, r3, r7
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	21f3      	movs	r1, #243	; 0xf3
 8009d30:	0049      	lsls	r1, r1, #1
 8009d32:	2218      	movs	r2, #24
 8009d34:	188a      	adds	r2, r1, r2
 8009d36:	19d2      	adds	r2, r2, r7
 8009d38:	8812      	ldrh	r2, [r2, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d8b8      	bhi.n	8009cb0 <astronode_send_cmd_rr+0x214>
            }
            result = true ;
 8009d3e:	23f8      	movs	r3, #248	; 0xf8
 8009d40:	33ff      	adds	r3, #255	; 0xff
 8009d42:	2218      	movs	r2, #24
 8009d44:	189b      	adds	r3, r3, r2
 8009d46:	19db      	adds	r3, r3, r7
 8009d48:	2201      	movs	r2, #1
 8009d4a:	701a      	strb	r2, [r3, #0]
            my_astro_rcv_cmd[command_content_size] = 0 ;
 8009d4c:	2318      	movs	r3, #24
 8009d4e:	18cb      	adds	r3, r1, r3
 8009d50:	19db      	adds	r3, r3, r7
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	69fa      	ldr	r2, [r7, #28]
 8009d56:	18d3      	adds	r3, r2, r3
 8009d58:	2200      	movs	r2, #0
 8009d5a:	701a      	strb	r2, [r3, #0]
            send_debug_logs("Command content is: ");
 8009d5c:	4b1e      	ldr	r3, [pc, #120]	; (8009dd8 <astronode_send_cmd_rr+0x33c>)
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f7f9 f9c2 	bl	80030e8 <send_debug_logs>
            sprintf(command_content, "%s ", &answer.p_payload[4]);
 8009d64:	2358      	movs	r3, #88	; 0x58
 8009d66:	2218      	movs	r2, #24
 8009d68:	189b      	adds	r3, r3, r2
 8009d6a:	19db      	adds	r3, r3, r7
 8009d6c:	1d5a      	adds	r2, r3, #5
 8009d6e:	491b      	ldr	r1, [pc, #108]	; (8009ddc <astronode_send_cmd_rr+0x340>)
 8009d70:	24f4      	movs	r4, #244	; 0xf4
 8009d72:	0064      	lsls	r4, r4, #1
 8009d74:	2318      	movs	r3, #24
 8009d76:	18e3      	adds	r3, r4, r3
 8009d78:	19db      	adds	r3, r3, r7
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f003 fa79 	bl	800d274 <sprintf>
            send_debug_logs(command_content);
 8009d82:	2318      	movs	r3, #24
 8009d84:	18e3      	adds	r3, r4, r3
 8009d86:	19db      	adds	r3, r3, r7
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	f7f9 f9ac 	bl	80030e8 <send_debug_logs>
 8009d90:	46b5      	mov	sp, r6
 8009d92:	e005      	b.n	8009da0 <astronode_send_cmd_rr+0x304>
                return result ;
 8009d94:	46b5      	mov	sp, r6
 8009d96:	e009      	b.n	8009dac <astronode_send_cmd_rr+0x310>
        }
        else
        {
            send_debug_logs("No command available.");
 8009d98:	4b11      	ldr	r3, [pc, #68]	; (8009de0 <astronode_send_cmd_rr+0x344>)
 8009d9a:	0018      	movs	r0, r3
 8009d9c:	f7f9 f9a4 	bl	80030e8 <send_debug_logs>
        }
    }
    return result ;
 8009da0:	23f8      	movs	r3, #248	; 0xf8
 8009da2:	33ff      	adds	r3, #255	; 0xff
 8009da4:	2218      	movs	r2, #24
 8009da6:	189b      	adds	r3, r3, r2
 8009da8:	19db      	adds	r3, r3, r7
 8009daa:	781b      	ldrb	r3, [r3, #0]
}
 8009dac:	0018      	movs	r0, r3
 8009dae:	46bd      	mov	sp, r7
 8009db0:	2385      	movs	r3, #133	; 0x85
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	449d      	add	sp, r3
 8009db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db8:	fffffdec 	.word	0xfffffdec
 8009dbc:	fffffe60 	.word	0xfffffe60
 8009dc0:	08014f40 	.word	0x08014f40
 8009dc4:	08014f5c 	.word	0x08014f5c
 8009dc8:	08014fac 	.word	0x08014fac
 8009dcc:	080145d0 	.word	0x080145d0
 8009dd0:	08015b18 	.word	0x08015b18
 8009dd4:	08014fc0 	.word	0x08014fc0
 8009dd8:	08014fec 	.word	0x08014fec
 8009ddc:	08015004 	.word	0x08015004
 8009de0:	08015008 	.word	0x08015008

08009de4 <is_sak_available>:
        }
    }
}

bool is_sak_available()
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
    return g_is_sak_available;
 8009de8:	4b02      	ldr	r3, [pc, #8]	; (8009df4 <is_sak_available+0x10>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
}
 8009dec:	0018      	movs	r0, r3
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	20000b1c 	.word	0x20000b1c

08009df8 <is_astronode_reset>:

bool is_astronode_reset()
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
    return g_is_astronode_reset;
 8009dfc:	4b02      	ldr	r3, [pc, #8]	; (8009e08 <is_astronode_reset+0x10>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
}
 8009e00:	0018      	movs	r0, r3
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	20000b1d 	.word	0x20000b1d

08009e0c <is_command_available>:

bool is_command_available()
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	af00      	add	r7, sp, #0
    return g_is_command_available;
 8009e10:	4b02      	ldr	r3, [pc, #8]	; (8009e1c <is_command_available+0x10>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
}
 8009e14:	0018      	movs	r0, r3
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	20000b1e 	.word	0x20000b1e

08009e20 <ascii_to_value>:

//------------------------------------------------------------------------------
// Function definitions
//------------------------------------------------------------------------------
static bool ascii_to_value(const uint8_t ascii, uint8_t *p_value)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	0002      	movs	r2, r0
 8009e28:	6039      	str	r1, [r7, #0]
 8009e2a:	1dfb      	adds	r3, r7, #7
 8009e2c:	701a      	strb	r2, [r3, #0]
    if (ascii >= '0' && ascii <= '9')
 8009e2e:	1dfb      	adds	r3, r7, #7
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2b2f      	cmp	r3, #47	; 0x2f
 8009e34:	d90b      	bls.n	8009e4e <ascii_to_value+0x2e>
 8009e36:	1dfb      	adds	r3, r7, #7
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	2b39      	cmp	r3, #57	; 0x39
 8009e3c:	d807      	bhi.n	8009e4e <ascii_to_value+0x2e>
    {
        *p_value = ascii - '0';
 8009e3e:	1dfb      	adds	r3, r7, #7
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	3b30      	subs	r3, #48	; 0x30
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	701a      	strb	r2, [r3, #0]
        return true;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e010      	b.n	8009e70 <ascii_to_value+0x50>
    }
    else if (ascii >= 'A' && ascii <= 'F')
 8009e4e:	1dfb      	adds	r3, r7, #7
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	2b40      	cmp	r3, #64	; 0x40
 8009e54:	d90b      	bls.n	8009e6e <ascii_to_value+0x4e>
 8009e56:	1dfb      	adds	r3, r7, #7
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b46      	cmp	r3, #70	; 0x46
 8009e5c:	d807      	bhi.n	8009e6e <ascii_to_value+0x4e>
    {
        *p_value = ascii - 'A' + 10;
 8009e5e:	1dfb      	adds	r3, r7, #7
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	3b37      	subs	r3, #55	; 0x37
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	701a      	strb	r2, [r3, #0]
        return true;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <ascii_to_value+0x50>
    }
    else
    {
        return false;
 8009e6e:	2300      	movs	r3, #0
    }
}
 8009e70:	0018      	movs	r0, r3
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b002      	add	sp, #8
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <astronode_create_request_transport>:

static uint16_t astronode_create_request_transport(astronode_app_msg_t *p_source_message, uint8_t *p_destination_buffer)
{
 8009e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
    uint16_t index = 0;
 8009e82:	250e      	movs	r5, #14
 8009e84:	197b      	adds	r3, r7, r5
 8009e86:	2200      	movs	r2, #0
 8009e88:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_STX;
 8009e8a:	197b      	adds	r3, r7, r5
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	197a      	adds	r2, r7, r5
 8009e90:	1c59      	adds	r1, r3, #1
 8009e92:	8011      	strh	r1, [r2, #0]
 8009e94:	001a      	movs	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	189b      	adds	r3, r3, r2
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	701a      	strb	r2, [r3, #0]

    uint16_t crc = calculate_crc((const uint8_t *)&p_source_message->op_code, 1, 0xFFFF);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	260a      	movs	r6, #10
 8009ea2:	19bc      	adds	r4, r7, r6
 8009ea4:	4a44      	ldr	r2, [pc, #272]	; (8009fb8 <astronode_create_request_transport+0x140>)
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	0018      	movs	r0, r3
 8009eaa:	f000 fa7d 	bl	800a3a8 <calculate_crc>
 8009eae:	0003      	movs	r3, r0
 8009eb0:	8023      	strh	r3, [r4, #0]
    crc = calculate_crc((const uint8_t *)&p_source_message->p_payload, p_source_message->payload_len, crc);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	1c58      	adds	r0, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	22c4      	movs	r2, #196	; 0xc4
 8009eba:	5a99      	ldrh	r1, [r3, r2]
 8009ebc:	19bc      	adds	r4, r7, r6
 8009ebe:	19bb      	adds	r3, r7, r6
 8009ec0:	881b      	ldrh	r3, [r3, #0]
 8009ec2:	001a      	movs	r2, r3
 8009ec4:	f000 fa70 	bl	800a3a8 <calculate_crc>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	8023      	strh	r3, [r4, #0]
    crc = ((crc << 8) & 0xff00) | ((crc >> 8) & 0x00ff);
 8009ecc:	19bb      	adds	r3, r7, r6
 8009ece:	881b      	ldrh	r3, [r3, #0]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b21a      	sxth	r2, r3
 8009ed4:	0031      	movs	r1, r6
 8009ed6:	19bb      	adds	r3, r7, r6
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	0a1b      	lsrs	r3, r3, #8
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b21a      	sxth	r2, r3
 8009ee4:	187b      	adds	r3, r7, r1
 8009ee6:	801a      	strh	r2, [r3, #0]

    uint8_to_ascii_buffer(p_source_message->op_code, &p_destination_buffer[index]);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	7818      	ldrb	r0, [r3, #0]
 8009eec:	197b      	adds	r3, r7, r5
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	18d3      	adds	r3, r2, r3
 8009ef4:	0019      	movs	r1, r3
 8009ef6:	f000 fbeb 	bl	800a6d0 <uint8_to_ascii_buffer>
    index += 2;
 8009efa:	197b      	adds	r3, r7, r5
 8009efc:	197a      	adds	r2, r7, r5
 8009efe:	8812      	ldrh	r2, [r2, #0]
 8009f00:	3202      	adds	r2, #2
 8009f02:	801a      	strh	r2, [r3, #0]

    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f04:	230c      	movs	r3, #12
 8009f06:	18fb      	adds	r3, r7, r3
 8009f08:	2200      	movs	r2, #0
 8009f0a:	801a      	strh	r2, [r3, #0]
 8009f0c:	e017      	b.n	8009f3e <astronode_create_request_transport+0xc6>
    {
        uint8_to_ascii_buffer(p_source_message->p_payload[i], &p_destination_buffer[index]);
 8009f0e:	240c      	movs	r4, #12
 8009f10:	193b      	adds	r3, r7, r4
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	18d3      	adds	r3, r2, r3
 8009f18:	7858      	ldrb	r0, [r3, #1]
 8009f1a:	250e      	movs	r5, #14
 8009f1c:	197b      	adds	r3, r7, r5
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	683a      	ldr	r2, [r7, #0]
 8009f22:	18d3      	adds	r3, r2, r3
 8009f24:	0019      	movs	r1, r3
 8009f26:	f000 fbd3 	bl	800a6d0 <uint8_to_ascii_buffer>
        index += 2;
 8009f2a:	197b      	adds	r3, r7, r5
 8009f2c:	197a      	adds	r2, r7, r5
 8009f2e:	8812      	ldrh	r2, [r2, #0]
 8009f30:	3202      	adds	r2, #2
 8009f32:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < p_source_message->payload_len; i++)
 8009f34:	193b      	adds	r3, r7, r4
 8009f36:	881a      	ldrh	r2, [r3, #0]
 8009f38:	193b      	adds	r3, r7, r4
 8009f3a:	3201      	adds	r2, #1
 8009f3c:	801a      	strh	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	22c4      	movs	r2, #196	; 0xc4
 8009f42:	5a9b      	ldrh	r3, [r3, r2]
 8009f44:	220c      	movs	r2, #12
 8009f46:	18ba      	adds	r2, r7, r2
 8009f48:	8812      	ldrh	r2, [r2, #0]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d3df      	bcc.n	8009f0e <astronode_create_request_transport+0x96>
    }

    uint8_to_ascii_buffer(crc >> 8, &p_destination_buffer[index]);
 8009f4e:	250a      	movs	r5, #10
 8009f50:	197b      	adds	r3, r7, r5
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	0a1b      	lsrs	r3, r3, #8
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	b2d8      	uxtb	r0, r3
 8009f5a:	240e      	movs	r4, #14
 8009f5c:	193b      	adds	r3, r7, r4
 8009f5e:	881b      	ldrh	r3, [r3, #0]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	18d3      	adds	r3, r2, r3
 8009f64:	0019      	movs	r1, r3
 8009f66:	f000 fbb3 	bl	800a6d0 <uint8_to_ascii_buffer>
    index += 2;
 8009f6a:	0021      	movs	r1, r4
 8009f6c:	187b      	adds	r3, r7, r1
 8009f6e:	187a      	adds	r2, r7, r1
 8009f70:	8812      	ldrh	r2, [r2, #0]
 8009f72:	3202      	adds	r2, #2
 8009f74:	801a      	strh	r2, [r3, #0]
    uint8_to_ascii_buffer(crc & 0xFF, &p_destination_buffer[index]);
 8009f76:	197b      	adds	r3, r7, r5
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b2d8      	uxtb	r0, r3
 8009f7c:	000c      	movs	r4, r1
 8009f7e:	187b      	adds	r3, r7, r1
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	18d3      	adds	r3, r2, r3
 8009f86:	0019      	movs	r1, r3
 8009f88:	f000 fba2 	bl	800a6d0 <uint8_to_ascii_buffer>
    index += 2;
 8009f8c:	0020      	movs	r0, r4
 8009f8e:	183b      	adds	r3, r7, r0
 8009f90:	183a      	adds	r2, r7, r0
 8009f92:	8812      	ldrh	r2, [r2, #0]
 8009f94:	3202      	adds	r2, #2
 8009f96:	801a      	strh	r2, [r3, #0]

    p_destination_buffer[index++] = ASTRONODE_TRANSPORT_ETX;
 8009f98:	183b      	adds	r3, r7, r0
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	183a      	adds	r2, r7, r0
 8009f9e:	1c59      	adds	r1, r3, #1
 8009fa0:	8011      	strh	r1, [r2, #0]
 8009fa2:	001a      	movs	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	189b      	adds	r3, r3, r2
 8009fa8:	2203      	movs	r2, #3
 8009faa:	701a      	strb	r2, [r3, #0]

    return index;
 8009fac:	183b      	adds	r3, r7, r0
 8009fae:	881b      	ldrh	r3, [r3, #0]
}
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	b005      	add	sp, #20
 8009fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fb8:	0000ffff 	.word	0x0000ffff

08009fbc <astronode_decode_answer_transport>:

static return_status_t astronode_decode_answer_transport(uint8_t *p_source_buffer, uint16_t length_buffer, astronode_app_msg_t *p_destination_message)
{
 8009fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fbe:	b089      	sub	sp, #36	; 0x24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	230a      	movs	r3, #10
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	1c0a      	adds	r2, r1, #0
 8009fcc:	801a      	strh	r2, [r3, #0]
    if (p_source_buffer[0] != ASTRONODE_TRANSPORT_STX)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d005      	beq.n	8009fe2 <astronode_decode_answer_transport+0x26>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not start with STX character.");
 8009fd6:	4bbd      	ldr	r3, [pc, #756]	; (800a2cc <astronode_decode_answer_transport+0x310>)
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f7f9 f885 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e170      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    if (length_buffer % 2 == 1 || length_buffer < 8) // 8: STX, ETX, 2 x opcode, 4 x CRC
 8009fe2:	210a      	movs	r1, #10
 8009fe4:	187b      	adds	r3, r7, r1
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	4013      	ands	r3, r2
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d103      	bne.n	8009ffa <astronode_decode_answer_transport+0x3e>
 8009ff2:	187b      	adds	r3, r7, r1
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	2b07      	cmp	r3, #7
 8009ff8:	d805      	bhi.n	800a006 <astronode_decode_answer_transport+0x4a>
    {
        send_debug_logs("ERROR : Message received from the Astronode is missing at least one character.");
 8009ffa:	4bb5      	ldr	r3, [pc, #724]	; (800a2d0 <astronode_decode_answer_transport+0x314>)
 8009ffc:	0018      	movs	r0, r3
 8009ffe:	f7f9 f873 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a002:	2300      	movs	r3, #0
 800a004:	e15e      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->payload_len = (length_buffer - 8) / 2;
 800a006:	230a      	movs	r3, #10
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	881b      	ldrh	r3, [r3, #0]
 800a00c:	3b08      	subs	r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	da00      	bge.n	800a014 <astronode_decode_answer_transport+0x58>
 800a012:	3301      	adds	r3, #1
 800a014:	105b      	asrs	r3, r3, #1
 800a016:	b299      	uxth	r1, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	22c4      	movs	r2, #196	; 0xc4
 800a01c:	5299      	strh	r1, [r3, r2]

    if (p_source_buffer[length_buffer - 1] != ASTRONODE_TRANSPORT_ETX)
 800a01e:	230a      	movs	r3, #10
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	3b01      	subs	r3, #1
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	18d3      	adds	r3, r2, r3
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	d005      	beq.n	800a03c <astronode_decode_answer_transport+0x80>
    {
        send_debug_logs("ERROR : Message received from the Astronode does not end with ETX character.");
 800a030:	4ba8      	ldr	r3, [pc, #672]	; (800a2d4 <astronode_decode_answer_transport+0x318>)
 800a032:	0018      	movs	r0, r3
 800a034:	f7f9 f858 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a038:	2300      	movs	r3, #0
 800a03a:	e143      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    uint8_t nibble_high = 0;
 800a03c:	2117      	movs	r1, #23
 800a03e:	187b      	adds	r3, r7, r1
 800a040:	2200      	movs	r2, #0
 800a042:	701a      	strb	r2, [r3, #0]
    uint8_t nibble_low = 0;
 800a044:	2416      	movs	r4, #22
 800a046:	193b      	adds	r3, r7, r4
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]

    // Op code
    if (ascii_to_value(p_source_buffer[1], &nibble_high) == false
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	187a      	adds	r2, r7, r1
 800a054:	0011      	movs	r1, r2
 800a056:	0018      	movs	r0, r3
 800a058:	f7ff fee2 	bl	8009e20 <ascii_to_value>
 800a05c:	0003      	movs	r3, r0
 800a05e:	001a      	movs	r2, r3
 800a060:	2301      	movs	r3, #1
 800a062:	4053      	eors	r3, r2
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10e      	bne.n	800a088 <astronode_decode_answer_transport+0xcc>
        || ascii_to_value(p_source_buffer[2], &nibble_low) == false)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3302      	adds	r3, #2
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	193a      	adds	r2, r7, r4
 800a072:	0011      	movs	r1, r2
 800a074:	0018      	movs	r0, r3
 800a076:	f7ff fed3 	bl	8009e20 <ascii_to_value>
 800a07a:	0003      	movs	r3, r0
 800a07c:	001a      	movs	r2, r3
 800a07e:	2301      	movs	r3, #1
 800a080:	4053      	eors	r3, r2
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d005      	beq.n	800a094 <astronode_decode_answer_transport+0xd8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a088:	4b93      	ldr	r3, [pc, #588]	; (800a2d8 <astronode_decode_answer_transport+0x31c>)
 800a08a:	0018      	movs	r0, r3
 800a08c:	f7f9 f82c 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a090:	2300      	movs	r3, #0
 800a092:	e117      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    p_destination_message->op_code = (nibble_high << 4) + nibble_low;
 800a094:	2317      	movs	r3, #23
 800a096:	18fb      	adds	r3, r7, r3
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	011b      	lsls	r3, r3, #4
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	2316      	movs	r3, #22
 800a0a0:	18fb      	adds	r3, r7, r3
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	18d3      	adds	r3, r2, r3
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	701a      	strb	r2, [r3, #0]

    // Payload
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a0ac:	231e      	movs	r3, #30
 800a0ae:	18fb      	adds	r3, r7, r3
 800a0b0:	2203      	movs	r2, #3
 800a0b2:	801a      	strh	r2, [r3, #0]
 800a0b4:	231c      	movs	r3, #28
 800a0b6:	18fb      	adds	r3, r7, r3
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	801a      	strh	r2, [r3, #0]
 800a0bc:	e045      	b.n	800a14a <astronode_decode_answer_transport+0x18e>
    {
        if (ascii_to_value(p_source_buffer[i], &nibble_high) == false
 800a0be:	241e      	movs	r4, #30
 800a0c0:	193b      	adds	r3, r7, r4
 800a0c2:	881b      	ldrh	r3, [r3, #0]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	18d3      	adds	r3, r2, r3
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2217      	movs	r2, #23
 800a0cc:	18ba      	adds	r2, r7, r2
 800a0ce:	0011      	movs	r1, r2
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7ff fea5 	bl	8009e20 <ascii_to_value>
 800a0d6:	0003      	movs	r3, r0
 800a0d8:	001a      	movs	r2, r3
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4053      	eors	r3, r2
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d112      	bne.n	800a10a <astronode_decode_answer_transport+0x14e>
            || ascii_to_value(p_source_buffer[i + 1], &nibble_low) == false)
 800a0e4:	193b      	adds	r3, r7, r4
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	18d3      	adds	r3, r2, r3
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2216      	movs	r2, #22
 800a0f2:	18ba      	adds	r2, r7, r2
 800a0f4:	0011      	movs	r1, r2
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f7ff fe92 	bl	8009e20 <ascii_to_value>
 800a0fc:	0003      	movs	r3, r0
 800a0fe:	001a      	movs	r2, r3
 800a100:	2301      	movs	r3, #1
 800a102:	4053      	eors	r3, r2
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <astronode_decode_answer_transport+0x15a>
        {
            send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a10a:	4b73      	ldr	r3, [pc, #460]	; (800a2d8 <astronode_decode_answer_transport+0x31c>)
 800a10c:	0018      	movs	r0, r3
 800a10e:	f7f8 ffeb 	bl	80030e8 <send_debug_logs>
            return RS_FAILURE;
 800a112:	2300      	movs	r3, #0
 800a114:	e0d6      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
        }

        p_destination_message->p_payload[j++] = (nibble_high << 4) + nibble_low;
 800a116:	2317      	movs	r3, #23
 800a118:	18fb      	adds	r3, r7, r3
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	011b      	lsls	r3, r3, #4
 800a11e:	b2d9      	uxtb	r1, r3
 800a120:	2316      	movs	r3, #22
 800a122:	18fb      	adds	r3, r7, r3
 800a124:	781a      	ldrb	r2, [r3, #0]
 800a126:	201c      	movs	r0, #28
 800a128:	183b      	adds	r3, r7, r0
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	1838      	adds	r0, r7, r0
 800a12e:	1c5c      	adds	r4, r3, #1
 800a130:	8004      	strh	r4, [r0, #0]
 800a132:	0018      	movs	r0, r3
 800a134:	188b      	adds	r3, r1, r2
 800a136:	b2da      	uxtb	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	181b      	adds	r3, r3, r0
 800a13c:	705a      	strb	r2, [r3, #1]
    for (uint16_t i = 3, j = 0; i < length_buffer - 5; i += 2)
 800a13e:	221e      	movs	r2, #30
 800a140:	18bb      	adds	r3, r7, r2
 800a142:	18ba      	adds	r2, r7, r2
 800a144:	8812      	ldrh	r2, [r2, #0]
 800a146:	3202      	adds	r2, #2
 800a148:	801a      	strh	r2, [r3, #0]
 800a14a:	231e      	movs	r3, #30
 800a14c:	18fb      	adds	r3, r7, r3
 800a14e:	881a      	ldrh	r2, [r3, #0]
 800a150:	260a      	movs	r6, #10
 800a152:	19bb      	adds	r3, r7, r6
 800a154:	881b      	ldrh	r3, [r3, #0]
 800a156:	3b05      	subs	r3, #5
 800a158:	429a      	cmp	r2, r3
 800a15a:	dbb0      	blt.n	800a0be <astronode_decode_answer_transport+0x102>
    }

    // CRC
    uint16_t crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->op_code, 1, 0xFFFF);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	251a      	movs	r5, #26
 800a160:	197c      	adds	r4, r7, r5
 800a162:	4a5e      	ldr	r2, [pc, #376]	; (800a2dc <astronode_decode_answer_transport+0x320>)
 800a164:	2101      	movs	r1, #1
 800a166:	0018      	movs	r0, r3
 800a168:	f000 f91e 	bl	800a3a8 <calculate_crc>
 800a16c:	0003      	movs	r3, r0
 800a16e:	8023      	strh	r3, [r4, #0]
    crc_calculated = calculate_crc((const uint8_t *)&p_destination_message->p_payload, p_destination_message->payload_len, crc_calculated);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	1c58      	adds	r0, r3, #1
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	22c4      	movs	r2, #196	; 0xc4
 800a178:	5a99      	ldrh	r1, [r3, r2]
 800a17a:	197c      	adds	r4, r7, r5
 800a17c:	197b      	adds	r3, r7, r5
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	001a      	movs	r2, r3
 800a182:	f000 f911 	bl	800a3a8 <calculate_crc>
 800a186:	0003      	movs	r3, r0
 800a188:	8023      	strh	r3, [r4, #0]
    crc_calculated = ((crc_calculated << 8) & 0xff00) | ((crc_calculated >> 8) & 0x00ff);
 800a18a:	197b      	adds	r3, r7, r5
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b21a      	sxth	r2, r3
 800a192:	0029      	movs	r1, r5
 800a194:	197b      	adds	r3, r7, r5
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	0a1b      	lsrs	r3, r3, #8
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	b21b      	sxth	r3, r3
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	b21a      	sxth	r2, r3
 800a1a2:	187b      	adds	r3, r7, r1
 800a1a4:	801a      	strh	r2, [r3, #0]


    if (ascii_to_value(p_source_buffer[length_buffer - 5], &nibble_high) == false
 800a1a6:	19bb      	adds	r3, r7, r6
 800a1a8:	881b      	ldrh	r3, [r3, #0]
 800a1aa:	3b05      	subs	r3, #5
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	18d3      	adds	r3, r2, r3
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2217      	movs	r2, #23
 800a1b4:	18ba      	adds	r2, r7, r2
 800a1b6:	0011      	movs	r1, r2
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	f7ff fe31 	bl	8009e20 <ascii_to_value>
 800a1be:	0003      	movs	r3, r0
 800a1c0:	001a      	movs	r2, r3
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	4053      	eors	r3, r2
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d112      	bne.n	800a1f2 <astronode_decode_answer_transport+0x236>
        || ascii_to_value(p_source_buffer[length_buffer - 4], &nibble_low) == false)
 800a1cc:	19bb      	adds	r3, r7, r6
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	3b04      	subs	r3, #4
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	18d3      	adds	r3, r2, r3
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	2216      	movs	r2, #22
 800a1da:	18ba      	adds	r2, r7, r2
 800a1dc:	0011      	movs	r1, r2
 800a1de:	0018      	movs	r0, r3
 800a1e0:	f7ff fe1e 	bl	8009e20 <ascii_to_value>
 800a1e4:	0003      	movs	r3, r0
 800a1e6:	001a      	movs	r2, r3
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	4053      	eors	r3, r2
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d005      	beq.n	800a1fe <astronode_decode_answer_transport+0x242>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a1f2:	4b39      	ldr	r3, [pc, #228]	; (800a2d8 <astronode_decode_answer_transport+0x31c>)
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f7f8 ff77 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e062      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    uint16_t crc_received = (nibble_high << 12) + (nibble_low << 8);
 800a1fe:	2017      	movs	r0, #23
 800a200:	183b      	adds	r3, r7, r0
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	b29b      	uxth	r3, r3
 800a206:	031b      	lsls	r3, r3, #12
 800a208:	b299      	uxth	r1, r3
 800a20a:	2416      	movs	r4, #22
 800a20c:	193b      	adds	r3, r7, r4
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b29a      	uxth	r2, r3
 800a216:	2318      	movs	r3, #24
 800a218:	18fb      	adds	r3, r7, r3
 800a21a:	188a      	adds	r2, r1, r2
 800a21c:	801a      	strh	r2, [r3, #0]

    if (ascii_to_value(p_source_buffer[length_buffer - 3], &nibble_high) == false
 800a21e:	250a      	movs	r5, #10
 800a220:	197b      	adds	r3, r7, r5
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	3b03      	subs	r3, #3
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	18d3      	adds	r3, r2, r3
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	183a      	adds	r2, r7, r0
 800a22e:	0011      	movs	r1, r2
 800a230:	0018      	movs	r0, r3
 800a232:	f7ff fdf5 	bl	8009e20 <ascii_to_value>
 800a236:	0003      	movs	r3, r0
 800a238:	001a      	movs	r2, r3
 800a23a:	2301      	movs	r3, #1
 800a23c:	4053      	eors	r3, r2
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	2b00      	cmp	r3, #0
 800a242:	d111      	bne.n	800a268 <astronode_decode_answer_transport+0x2ac>
        || ascii_to_value(p_source_buffer[length_buffer - 2], &nibble_low) == false)
 800a244:	197b      	adds	r3, r7, r5
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	3b02      	subs	r3, #2
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	18d3      	adds	r3, r2, r3
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	193a      	adds	r2, r7, r4
 800a252:	0011      	movs	r1, r2
 800a254:	0018      	movs	r0, r3
 800a256:	f7ff fde3 	bl	8009e20 <ascii_to_value>
 800a25a:	0003      	movs	r3, r0
 800a25c:	001a      	movs	r2, r3
 800a25e:	2301      	movs	r3, #1
 800a260:	4053      	eors	r3, r2
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d005      	beq.n	800a274 <astronode_decode_answer_transport+0x2b8>
    {
        send_debug_logs("ERROR : Message received from the Astronode contains a non-ASCII character.");
 800a268:	4b1b      	ldr	r3, [pc, #108]	; (800a2d8 <astronode_decode_answer_transport+0x31c>)
 800a26a:	0018      	movs	r0, r3
 800a26c:	f7f8 ff3c 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a270:	2300      	movs	r3, #0
 800a272:	e027      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    crc_received += (nibble_high << 4) + nibble_low;
 800a274:	2317      	movs	r3, #23
 800a276:	18fb      	adds	r3, r7, r3
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	011b      	lsls	r3, r3, #4
 800a27e:	b29a      	uxth	r2, r3
 800a280:	2316      	movs	r3, #22
 800a282:	18fb      	adds	r3, r7, r3
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	b29b      	uxth	r3, r3
 800a288:	18d3      	adds	r3, r2, r3
 800a28a:	b299      	uxth	r1, r3
 800a28c:	2018      	movs	r0, #24
 800a28e:	183b      	adds	r3, r7, r0
 800a290:	183a      	adds	r2, r7, r0
 800a292:	8812      	ldrh	r2, [r2, #0]
 800a294:	188a      	adds	r2, r1, r2
 800a296:	801a      	strh	r2, [r3, #0]

    if (crc_received != crc_calculated)
 800a298:	183a      	adds	r2, r7, r0
 800a29a:	231a      	movs	r3, #26
 800a29c:	18fb      	adds	r3, r7, r3
 800a29e:	8812      	ldrh	r2, [r2, #0]
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d005      	beq.n	800a2b2 <astronode_decode_answer_transport+0x2f6>
    {
        send_debug_logs("ERROR : CRC sent by the Astronode does not match the expected CRC");
 800a2a6:	4b0e      	ldr	r3, [pc, #56]	; (800a2e0 <astronode_decode_answer_transport+0x324>)
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f7f8 ff1d 	bl	80030e8 <send_debug_logs>
        return RS_FAILURE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e008      	b.n	800a2c4 <astronode_decode_answer_transport+0x308>
    }

    if (p_destination_message->op_code == ASTRONODE_OP_CODE_ERROR)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2bff      	cmp	r3, #255	; 0xff
 800a2b8:	d103      	bne.n	800a2c2 <astronode_decode_answer_transport+0x306>
    {
        check_for_error(p_destination_message);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f000 f8c3 	bl	800a448 <check_for_error>
    }

    return RS_SUCCESS;
 800a2c2:	2301      	movs	r3, #1
}
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	b009      	add	sp, #36	; 0x24
 800a2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2cc:	08015098 	.word	0x08015098
 800a2d0:	080150e8 	.word	0x080150e8
 800a2d4:	08015138 	.word	0x08015138
 800a2d8:	08015188 	.word	0x08015188
 800a2dc:	0000ffff 	.word	0x0000ffff
 800a2e0:	080151d4 	.word	0x080151d4

0800a2e4 <astronode_transport_send_receive>:

return_status_t astronode_transport_send_receive(astronode_app_msg_t *p_request, astronode_app_msg_t *p_answer)
{
 800a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e6:	4c2b      	ldr	r4, [pc, #172]	; (800a394 <astronode_transport_send_receive+0xb0>)
 800a2e8:	44a5      	add	sp, r4
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	6039      	str	r1, [r7, #0]
    uint8_t request_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a2f0:	4b29      	ldr	r3, [pc, #164]	; (800a398 <astronode_transport_send_receive+0xb4>)
 800a2f2:	25ca      	movs	r5, #202	; 0xca
 800a2f4:	00ad      	lsls	r5, r5, #2
 800a2f6:	195b      	adds	r3, r3, r5
 800a2f8:	19db      	adds	r3, r3, r7
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	3304      	adds	r3, #4
 800a300:	22c4      	movs	r2, #196	; 0xc4
 800a302:	0052      	lsls	r2, r2, #1
 800a304:	2100      	movs	r1, #0
 800a306:	0018      	movs	r0, r3
 800a308:	f003 f84a 	bl	800d3a0 <memset>
    uint8_t answer_transport[ASTRONODE_TRANSPORT_MSG_MAX_LEN_BYTES] = {0};
 800a30c:	4b23      	ldr	r3, [pc, #140]	; (800a39c <astronode_transport_send_receive+0xb8>)
 800a30e:	195b      	adds	r3, r3, r5
 800a310:	19db      	adds	r3, r3, r7
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	3304      	adds	r3, #4
 800a318:	22c4      	movs	r2, #196	; 0xc4
 800a31a:	0052      	lsls	r2, r2, #1
 800a31c:	2100      	movs	r1, #0
 800a31e:	0018      	movs	r0, r3
 800a320:	f003 f83e 	bl	800d3a0 <memset>
    uint16_t answer_length =  0;
 800a324:	4b1e      	ldr	r3, [pc, #120]	; (800a3a0 <astronode_transport_send_receive+0xbc>)
 800a326:	195b      	adds	r3, r3, r5
 800a328:	19db      	adds	r3, r3, r7
 800a32a:	2200      	movs	r2, #0
 800a32c:	801a      	strh	r2, [r3, #0]

    uint16_t request_length = astronode_create_request_transport(p_request, request_transport);
 800a32e:	4e1d      	ldr	r6, [pc, #116]	; (800a3a4 <astronode_transport_send_receive+0xc0>)
 800a330:	19bc      	adds	r4, r7, r6
 800a332:	23cc      	movs	r3, #204	; 0xcc
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	18fa      	adds	r2, r7, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	0011      	movs	r1, r2
 800a33c:	0018      	movs	r0, r3
 800a33e:	f7ff fd9b 	bl	8009e78 <astronode_create_request_transport>
 800a342:	0003      	movs	r3, r0
 800a344:	8023      	strh	r3, [r4, #0]

    send_astronode_request(request_transport, request_length);
 800a346:	19bb      	adds	r3, r7, r6
 800a348:	881a      	ldrh	r2, [r3, #0]
 800a34a:	23cc      	movs	r3, #204	; 0xcc
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	18fb      	adds	r3, r7, r3
 800a350:	0011      	movs	r1, r2
 800a352:	0018      	movs	r0, r3
 800a354:	f7f9 fb4c 	bl	80039f0 <send_astronode_request>
    if(receive_astronode_answer(answer_transport, &answer_length) == RS_SUCCESS)
 800a358:	230a      	movs	r3, #10
 800a35a:	18fa      	adds	r2, r7, r3
 800a35c:	240c      	movs	r4, #12
 800a35e:	193b      	adds	r3, r7, r4
 800a360:	0011      	movs	r1, r2
 800a362:	0018      	movs	r0, r3
 800a364:	f000 f92c 	bl	800a5c0 <receive_astronode_answer>
 800a368:	0003      	movs	r3, r0
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d10a      	bne.n	800a384 <astronode_transport_send_receive+0xa0>
    {
        return astronode_decode_answer_transport(answer_transport, answer_length, p_answer);
 800a36e:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <astronode_transport_send_receive+0xbc>)
 800a370:	195b      	adds	r3, r3, r5
 800a372:	19db      	adds	r3, r3, r7
 800a374:	8819      	ldrh	r1, [r3, #0]
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	193b      	adds	r3, r7, r4
 800a37a:	0018      	movs	r0, r3
 800a37c:	f7ff fe1e 	bl	8009fbc <astronode_decode_answer_transport>
 800a380:	0003      	movs	r3, r0
 800a382:	e000      	b.n	800a386 <astronode_transport_send_receive+0xa2>
    }
    else
    {
        return RS_FAILURE;
 800a384:	2300      	movs	r3, #0
    }
}
 800a386:	0018      	movs	r0, r3
 800a388:	46bd      	mov	sp, r7
 800a38a:	23cb      	movs	r3, #203	; 0xcb
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	449d      	add	sp, r3
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	fffffcd4 	.word	0xfffffcd4
 800a398:	fffffe70 	.word	0xfffffe70
 800a39c:	fffffce4 	.word	0xfffffce4
 800a3a0:	fffffce2 	.word	0xfffffce2
 800a3a4:	00000326 	.word	0x00000326

0800a3a8 <calculate_crc>:

static uint16_t calculate_crc(const uint8_t *p_data, uint16_t data_len, uint16_t init_value)
{
 800a3a8:	b590      	push	{r4, r7, lr}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	0008      	movs	r0, r1
 800a3b2:	0011      	movs	r1, r2
 800a3b4:	1cbb      	adds	r3, r7, #2
 800a3b6:	1c02      	adds	r2, r0, #0
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	003b      	movs	r3, r7
 800a3bc:	1c0a      	adds	r2, r1, #0
 800a3be:	801a      	strh	r2, [r3, #0]
    uint16_t crc = init_value;
 800a3c0:	230e      	movs	r3, #14
 800a3c2:	18fb      	adds	r3, r7, r3
 800a3c4:	003a      	movs	r2, r7
 800a3c6:	8812      	ldrh	r2, [r2, #0]
 800a3c8:	801a      	strh	r2, [r3, #0]

    while (data_len--)
 800a3ca:	e02e      	b.n	800a42a <calculate_crc+0x82>
    {
        uint16_t x = crc >> 8 ^ *p_data++;
 800a3cc:	240e      	movs	r4, #14
 800a3ce:	193b      	adds	r3, r7, r4
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	0a1b      	lsrs	r3, r3, #8
 800a3d4:	b299      	uxth	r1, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	200c      	movs	r0, #12
 800a3e2:	183b      	adds	r3, r7, r0
 800a3e4:	404a      	eors	r2, r1
 800a3e6:	801a      	strh	r2, [r3, #0]
        x ^= x >> 4;
 800a3e8:	183b      	adds	r3, r7, r0
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	091b      	lsrs	r3, r3, #4
 800a3ee:	b299      	uxth	r1, r3
 800a3f0:	183b      	adds	r3, r7, r0
 800a3f2:	183a      	adds	r2, r7, r0
 800a3f4:	8812      	ldrh	r2, [r2, #0]
 800a3f6:	404a      	eors	r2, r1
 800a3f8:	801a      	strh	r2, [r3, #0]
        crc = (crc << 8) ^ (x << 12) ^ (x << 5) ^ (x);
 800a3fa:	0021      	movs	r1, r4
 800a3fc:	187b      	adds	r3, r7, r1
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	b21a      	sxth	r2, r3
 800a404:	183b      	adds	r3, r7, r0
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	031b      	lsls	r3, r3, #12
 800a40a:	b21b      	sxth	r3, r3
 800a40c:	4053      	eors	r3, r2
 800a40e:	b21a      	sxth	r2, r3
 800a410:	183b      	adds	r3, r7, r0
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	015b      	lsls	r3, r3, #5
 800a416:	b21b      	sxth	r3, r3
 800a418:	4053      	eors	r3, r2
 800a41a:	b21a      	sxth	r2, r3
 800a41c:	183b      	adds	r3, r7, r0
 800a41e:	2000      	movs	r0, #0
 800a420:	5e1b      	ldrsh	r3, [r3, r0]
 800a422:	4053      	eors	r3, r2
 800a424:	b21a      	sxth	r2, r3
 800a426:	187b      	adds	r3, r7, r1
 800a428:	801a      	strh	r2, [r3, #0]
    while (data_len--)
 800a42a:	1cbb      	adds	r3, r7, #2
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	1cba      	adds	r2, r7, #2
 800a430:	1e59      	subs	r1, r3, #1
 800a432:	8011      	strh	r1, [r2, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1c9      	bne.n	800a3cc <calculate_crc+0x24>
    }
    return crc;
 800a438:	230e      	movs	r3, #14
 800a43a:	18fb      	adds	r3, r7, r3
 800a43c:	881b      	ldrh	r3, [r3, #0]
}
 800a43e:	0018      	movs	r0, r3
 800a440:	46bd      	mov	sp, r7
 800a442:	b005      	add	sp, #20
 800a444:	bd90      	pop	{r4, r7, pc}
	...

0800a448 <check_for_error>:

static void check_for_error(astronode_app_msg_t *p_answer)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    uint16_t error_code = p_answer->p_payload[0] + (p_answer->p_payload[1] << 8);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	b299      	uxth	r1, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	789b      	ldrb	r3, [r3, #2]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	021b      	lsls	r3, r3, #8
 800a45e:	b29a      	uxth	r2, r3
 800a460:	200e      	movs	r0, #14
 800a462:	183b      	adds	r3, r7, r0
 800a464:	188a      	adds	r2, r1, r2
 800a466:	801a      	strh	r2, [r3, #0]

    switch (error_code)
 800a468:	183b      	adds	r3, r7, r0
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	4a40      	ldr	r2, [pc, #256]	; (800a570 <check_for_error+0x128>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d100      	bne.n	800a474 <check_for_error+0x2c>
 800a472:	e06f      	b.n	800a554 <check_for_error+0x10c>
 800a474:	4a3e      	ldr	r2, [pc, #248]	; (800a570 <check_for_error+0x128>)
 800a476:	4293      	cmp	r3, r2
 800a478:	dd00      	ble.n	800a47c <check_for_error+0x34>
 800a47a:	e070      	b.n	800a55e <check_for_error+0x116>
 800a47c:	4a3d      	ldr	r2, [pc, #244]	; (800a574 <check_for_error+0x12c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d100      	bne.n	800a484 <check_for_error+0x3c>
 800a482:	e062      	b.n	800a54a <check_for_error+0x102>
 800a484:	4a3b      	ldr	r2, [pc, #236]	; (800a574 <check_for_error+0x12c>)
 800a486:	4293      	cmp	r3, r2
 800a488:	dd00      	ble.n	800a48c <check_for_error+0x44>
 800a48a:	e068      	b.n	800a55e <check_for_error+0x116>
 800a48c:	4a3a      	ldr	r2, [pc, #232]	; (800a578 <check_for_error+0x130>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d056      	beq.n	800a540 <check_for_error+0xf8>
 800a492:	4a39      	ldr	r2, [pc, #228]	; (800a578 <check_for_error+0x130>)
 800a494:	4293      	cmp	r3, r2
 800a496:	dd00      	ble.n	800a49a <check_for_error+0x52>
 800a498:	e061      	b.n	800a55e <check_for_error+0x116>
 800a49a:	4a38      	ldr	r2, [pc, #224]	; (800a57c <check_for_error+0x134>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d04a      	beq.n	800a536 <check_for_error+0xee>
 800a4a0:	4a36      	ldr	r2, [pc, #216]	; (800a57c <check_for_error+0x134>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	dc5b      	bgt.n	800a55e <check_for_error+0x116>
 800a4a6:	4a36      	ldr	r2, [pc, #216]	; (800a580 <check_for_error+0x138>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d03f      	beq.n	800a52c <check_for_error+0xe4>
 800a4ac:	4a34      	ldr	r2, [pc, #208]	; (800a580 <check_for_error+0x138>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	dc55      	bgt.n	800a55e <check_for_error+0x116>
 800a4b2:	4a34      	ldr	r2, [pc, #208]	; (800a584 <check_for_error+0x13c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d034      	beq.n	800a522 <check_for_error+0xda>
 800a4b8:	4a32      	ldr	r2, [pc, #200]	; (800a584 <check_for_error+0x13c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	dc4f      	bgt.n	800a55e <check_for_error+0x116>
 800a4be:	4a32      	ldr	r2, [pc, #200]	; (800a588 <check_for_error+0x140>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d029      	beq.n	800a518 <check_for_error+0xd0>
 800a4c4:	4a30      	ldr	r2, [pc, #192]	; (800a588 <check_for_error+0x140>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	dc49      	bgt.n	800a55e <check_for_error+0x116>
 800a4ca:	4a30      	ldr	r2, [pc, #192]	; (800a58c <check_for_error+0x144>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d01e      	beq.n	800a50e <check_for_error+0xc6>
 800a4d0:	4a2e      	ldr	r2, [pc, #184]	; (800a58c <check_for_error+0x144>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	dc43      	bgt.n	800a55e <check_for_error+0x116>
 800a4d6:	2222      	movs	r2, #34	; 0x22
 800a4d8:	32ff      	adds	r2, #255	; 0xff
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d012      	beq.n	800a504 <check_for_error+0xbc>
 800a4de:	2291      	movs	r2, #145	; 0x91
 800a4e0:	0052      	lsls	r2, r2, #1
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	da3b      	bge.n	800a55e <check_for_error+0x116>
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d002      	beq.n	800a4f0 <check_for_error+0xa8>
 800a4ea:	2b11      	cmp	r3, #17
 800a4ec:	d005      	beq.n	800a4fa <check_for_error+0xb2>
 800a4ee:	e036      	b.n	800a55e <check_for_error+0x116>
    {
        case ASTRONODE_ERR_CODE_CRC_NOT_VALID:
            send_debug_logs("[ERROR] CRC_NOT_VALID : Discrepancy between provided CRC and expected CRC.");
 800a4f0:	4b27      	ldr	r3, [pc, #156]	; (800a590 <check_for_error+0x148>)
 800a4f2:	0018      	movs	r0, r3
 800a4f4:	f7f8 fdf8 	bl	80030e8 <send_debug_logs>
            break;
 800a4f8:	e036      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_LENGTH_NOT_VALID:
            send_debug_logs("[ERROR] LENGTH_NOT_VALID : Message exceeds the maximum length allowed by the given operation code.");
 800a4fa:	4b26      	ldr	r3, [pc, #152]	; (800a594 <check_for_error+0x14c>)
 800a4fc:	0018      	movs	r0, r3
 800a4fe:	f7f8 fdf3 	bl	80030e8 <send_debug_logs>
            break;
 800a502:	e031      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_OPCODE_NOT_VALID:
            send_debug_logs("[ERROR] OPCODE_NOT_VALID : Invalid operation code used.");
 800a504:	4b24      	ldr	r3, [pc, #144]	; (800a598 <check_for_error+0x150>)
 800a506:	0018      	movs	r0, r3
 800a508:	f7f8 fdee 	bl	80030e8 <send_debug_logs>
            break;
 800a50c:	e02c      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FORMAT_NOT_VALID:
            send_debug_logs("[ERROR] FORMAT_NOT_VALID : At least one of the fields (SSID, password, token) is not composed of exclusively printable standard ASCII characters (0x20 to 0x7E).");
 800a50e:	4b23      	ldr	r3, [pc, #140]	; (800a59c <check_for_error+0x154>)
 800a510:	0018      	movs	r0, r3
 800a512:	f7f8 fde9 	bl	80030e8 <send_debug_logs>
            break;
 800a516:	e027      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_FLASH_WRITING_FAILED:
            send_debug_logs("[ERROR] FLASH_WRITING_FAILED : Failed to write the Wi-Fi settings (SSID, password, token) to the flash.");
 800a518:	4b21      	ldr	r3, [pc, #132]	; (800a5a0 <check_for_error+0x158>)
 800a51a:	0018      	movs	r0, r3
 800a51c:	f7f8 fde4 	bl	80030e8 <send_debug_logs>
            break;
 800a520:	e022      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_FULL:
            send_debug_logs("[ERROR] BUFFER_FULL : Failed to queue the payload because the sending queue is already full.");
 800a522:	4b20      	ldr	r3, [pc, #128]	; (800a5a4 <check_for_error+0x15c>)
 800a524:	0018      	movs	r0, r3
 800a526:	f7f8 fddf 	bl	80030e8 <send_debug_logs>
            break;
 800a52a:	e01d      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_DUPLICATE_ID:
            send_debug_logs("[ERROR] DUPLICATE_ID : Failed to queue the payload because the Payload ID provided by the asset is already in use in the Astronode queue.");
 800a52c:	4b1e      	ldr	r3, [pc, #120]	; (800a5a8 <check_for_error+0x160>)
 800a52e:	0018      	movs	r0, r3
 800a530:	f7f8 fdda 	bl	80030e8 <send_debug_logs>
            break;
 800a534:	e018      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_BUFFER_EMPTY:
            send_debug_logs("[ERROR] BUFFER_EMPTY : Failed to dequeue a payload from the buffer because the buffer is empty.");
 800a536:	4b1d      	ldr	r3, [pc, #116]	; (800a5ac <check_for_error+0x164>)
 800a538:	0018      	movs	r0, r3
 800a53a:	f7f8 fdd5 	bl	80030e8 <send_debug_logs>
            break;
 800a53e:	e013      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_INVALID_POS:
            send_debug_logs("[ERROR] INVALID_POS : Failed to update the geolocation information. Latitude and longitude fields must in the range [-90,90] degrees and [-180,180] degrees, respectively.");
 800a540:	4b1b      	ldr	r3, [pc, #108]	; (800a5b0 <check_for_error+0x168>)
 800a542:	0018      	movs	r0, r3
 800a544:	f7f8 fdd0 	bl	80030e8 <send_debug_logs>
            break;
 800a548:	e00e      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_ACK:
            send_debug_logs("[ERROR] NO_ACK : No satellite acknowledgement available for any payload.");
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <check_for_error+0x16c>)
 800a54c:	0018      	movs	r0, r3
 800a54e:	f7f8 fdcb 	bl	80030e8 <send_debug_logs>
            break;
 800a552:	e009      	b.n	800a568 <check_for_error+0x120>

        case ASTRONODE_ERR_CODE_NO_CLEAR:
            send_debug_logs("[ERROR] NO_CLEAR : No payload ack to clear, or it was already cleared.");
 800a554:	4b18      	ldr	r3, [pc, #96]	; (800a5b8 <check_for_error+0x170>)
 800a556:	0018      	movs	r0, r3
 800a558:	f7f8 fdc6 	bl	80030e8 <send_debug_logs>
            break;
 800a55c:	e004      	b.n	800a568 <check_for_error+0x120>

        default:
            send_debug_logs("[ERROR] error_code is not defined.");
 800a55e:	4b17      	ldr	r3, [pc, #92]	; (800a5bc <check_for_error+0x174>)
 800a560:	0018      	movs	r0, r3
 800a562:	f7f8 fdc1 	bl	80030e8 <send_debug_logs>
            break;
 800a566:	46c0      	nop			; (mov r8, r8)
    }
}
 800a568:	46c0      	nop			; (mov r8, r8)
 800a56a:	46bd      	mov	sp, r7
 800a56c:	b004      	add	sp, #16
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	00004601 	.word	0x00004601
 800a574:	00004501 	.word	0x00004501
 800a578:	00003501 	.word	0x00003501
 800a57c:	00002601 	.word	0x00002601
 800a580:	00002511 	.word	0x00002511
 800a584:	00002501 	.word	0x00002501
 800a588:	00000611 	.word	0x00000611
 800a58c:	00000601 	.word	0x00000601
 800a590:	08015218 	.word	0x08015218
 800a594:	08015264 	.word	0x08015264
 800a598:	080152c8 	.word	0x080152c8
 800a59c:	08015300 	.word	0x08015300
 800a5a0:	080153a4 	.word	0x080153a4
 800a5a4:	0801540c 	.word	0x0801540c
 800a5a8:	0801546c 	.word	0x0801546c
 800a5ac:	080154f8 	.word	0x080154f8
 800a5b0:	08015558 	.word	0x08015558
 800a5b4:	08015604 	.word	0x08015604
 800a5b8:	08015650 	.word	0x08015650
 800a5bc:	08015698 	.word	0x08015698

0800a5c0 <receive_astronode_answer>:

static return_status_t receive_astronode_answer(uint8_t *p_rx_buffer, uint16_t *p_buffer_length)
{
 800a5c0:	b5b0      	push	{r4, r5, r7, lr}
 800a5c2:	b086      	sub	sp, #24
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
    uint8_t rx_char = 0;
 800a5ca:	230f      	movs	r3, #15
 800a5cc:	18fb      	adds	r3, r7, r3
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	701a      	strb	r2, [r3, #0]
    uint16_t length = 0;
 800a5d2:	2316      	movs	r3, #22
 800a5d4:	18fb      	adds	r3, r7, r3
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	801a      	strh	r2, [r3, #0]
    uint32_t timeout_answer_received = get_systick();
 800a5da:	f7f9 fa27 	bl	8003a2c <get_systick>
 800a5de:	0003      	movs	r3, r0
 800a5e0:	613b      	str	r3, [r7, #16]
    bool is_answer_received = false;
 800a5e2:	2315      	movs	r3, #21
 800a5e4:	18fb      	adds	r3, r7, r3
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]

    while (is_answer_received == false)
 800a5ea:	e054      	b.n	800a696 <receive_astronode_answer+0xd6>
    {
        if (is_systick_timeout_over(timeout_answer_received, ASTRONODE_ANSWER_TIMEOUT_MS))
 800a5ec:	4a34      	ldr	r2, [pc, #208]	; (800a6c0 <receive_astronode_answer+0x100>)
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	0011      	movs	r1, r2
 800a5f2:	0018      	movs	r0, r3
 800a5f4:	f7f9 fa22 	bl	8003a3c <is_systick_timeout_over>
 800a5f8:	1e03      	subs	r3, r0, #0
 800a5fa:	d005      	beq.n	800a608 <receive_astronode_answer+0x48>
        {
            send_debug_logs("ERROR : Received answer timeout..");
 800a5fc:	4b31      	ldr	r3, [pc, #196]	; (800a6c4 <receive_astronode_answer+0x104>)
 800a5fe:	0018      	movs	r0, r3
 800a600:	f7f8 fd72 	bl	80030e8 <send_debug_logs>
            return RS_FAILURE;
 800a604:	2300      	movs	r3, #0
 800a606:	e057      	b.n	800a6b8 <receive_astronode_answer+0xf8>
        }
        if (is_astronode_character_received(&rx_char))
 800a608:	250f      	movs	r5, #15
 800a60a:	197b      	adds	r3, r7, r5
 800a60c:	0018      	movs	r0, r3
 800a60e:	f7f9 fa2b 	bl	8003a68 <is_astronode_character_received>
 800a612:	0003      	movs	r3, r0
 800a614:	0019      	movs	r1, r3
 800a616:	2016      	movs	r0, #22
 800a618:	183b      	adds	r3, r7, r0
 800a61a:	183a      	adds	r2, r7, r0
 800a61c:	8812      	ldrh	r2, [r2, #0]
 800a61e:	801a      	strh	r2, [r3, #0]
 800a620:	2415      	movs	r4, #21
 800a622:	193b      	adds	r3, r7, r4
 800a624:	193a      	adds	r2, r7, r4
 800a626:	7812      	ldrb	r2, [r2, #0]
 800a628:	701a      	strb	r2, [r3, #0]
 800a62a:	2900      	cmp	r1, #0
 800a62c:	d033      	beq.n	800a696 <receive_astronode_answer+0xd6>
        {
            if (rx_char == ASTRONODE_TRANSPORT_STX)
 800a62e:	197b      	adds	r3, r7, r5
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d105      	bne.n	800a642 <receive_astronode_answer+0x82>
            {
                is_answer_received = false;
 800a636:	193b      	adds	r3, r7, r4
 800a638:	2200      	movs	r2, #0
 800a63a:	701a      	strb	r2, [r3, #0]
                length = 0;
 800a63c:	183b      	adds	r3, r7, r0
 800a63e:	2200      	movs	r2, #0
 800a640:	801a      	strh	r2, [r3, #0]
            }

            p_rx_buffer[length] = rx_char;
 800a642:	2116      	movs	r1, #22
 800a644:	187b      	adds	r3, r7, r1
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	18d3      	adds	r3, r2, r3
 800a64c:	220f      	movs	r2, #15
 800a64e:	18ba      	adds	r2, r7, r2
 800a650:	7812      	ldrb	r2, [r2, #0]
 800a652:	701a      	strb	r2, [r3, #0]
            length++;
 800a654:	187b      	adds	r3, r7, r1
 800a656:	881a      	ldrh	r2, [r3, #0]
 800a658:	187b      	adds	r3, r7, r1
 800a65a:	3201      	adds	r2, #1
 800a65c:	801a      	strh	r2, [r3, #0]

            if (length > ASTRONODE_MAX_LENGTH_RESPONSE)
 800a65e:	187b      	adds	r3, r7, r1
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	2bb2      	cmp	r3, #178	; 0xb2
 800a664:	d905      	bls.n	800a672 <receive_astronode_answer+0xb2>
            {
                send_debug_logs("ERROR : Message received from the Astronode exceed maximum length allowed.");
 800a666:	4b18      	ldr	r3, [pc, #96]	; (800a6c8 <receive_astronode_answer+0x108>)
 800a668:	0018      	movs	r0, r3
 800a66a:	f7f8 fd3d 	bl	80030e8 <send_debug_logs>
                return RS_FAILURE;
 800a66e:	2300      	movs	r3, #0
 800a670:	e022      	b.n	800a6b8 <receive_astronode_answer+0xf8>
            }

            if (rx_char == ASTRONODE_TRANSPORT_ETX)
 800a672:	230f      	movs	r3, #15
 800a674:	18fb      	adds	r3, r7, r3
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d10c      	bne.n	800a696 <receive_astronode_answer+0xd6>
            {
                if (length > 1)
 800a67c:	2216      	movs	r2, #22
 800a67e:	18bb      	adds	r3, r7, r2
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d907      	bls.n	800a696 <receive_astronode_answer+0xd6>
                {
                    *p_buffer_length = length;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	18ba      	adds	r2, r7, r2
 800a68a:	8812      	ldrh	r2, [r2, #0]
 800a68c:	801a      	strh	r2, [r3, #0]
                    is_answer_received = true;
 800a68e:	2315      	movs	r3, #21
 800a690:	18fb      	adds	r3, r7, r3
 800a692:	2201      	movs	r2, #1
 800a694:	701a      	strb	r2, [r3, #0]
    while (is_answer_received == false)
 800a696:	2315      	movs	r3, #21
 800a698:	18fb      	adds	r3, r7, r3
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	2201      	movs	r2, #1
 800a69e:	4053      	eors	r3, r2
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1a2      	bne.n	800a5ec <receive_astronode_answer+0x2c>
                }
            }
        }
    }
    send_debug_logs("Message received from the Astronode <-- ");
 800a6a6:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <receive_astronode_answer+0x10c>)
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	f7f8 fd1d 	bl	80030e8 <send_debug_logs>
    send_debug_logs((char *) p_rx_buffer);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f7f8 fd19 	bl	80030e8 <send_debug_logs>

    return RS_SUCCESS;
 800a6b6:	2301      	movs	r3, #1
}
 800a6b8:	0018      	movs	r0, r3
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	b006      	add	sp, #24
 800a6be:	bdb0      	pop	{r4, r5, r7, pc}
 800a6c0:	000005dc 	.word	0x000005dc
 800a6c4:	080156bc 	.word	0x080156bc
 800a6c8:	080156e0 	.word	0x080156e0
 800a6cc:	0801572c 	.word	0x0801572c

0800a6d0 <uint8_to_ascii_buffer>:

static void uint8_to_ascii_buffer(const uint8_t value, uint8_t *p_target_buffer)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	0002      	movs	r2, r0
 800a6d8:	6039      	str	r1, [r7, #0]
 800a6da:	1dfb      	adds	r3, r7, #7
 800a6dc:	701a      	strb	r2, [r3, #0]
    p_target_buffer[0] = g_ascii_lookup[value >> 4];
 800a6de:	1dfb      	adds	r3, r7, #7
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	091b      	lsrs	r3, r3, #4
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	001a      	movs	r2, r3
 800a6e8:	4b08      	ldr	r3, [pc, #32]	; (800a70c <uint8_to_ascii_buffer+0x3c>)
 800a6ea:	5c9a      	ldrb	r2, [r3, r2]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	701a      	strb	r2, [r3, #0]
    p_target_buffer[1] = g_ascii_lookup[value & 0x0F];
 800a6f0:	1dfb      	adds	r3, r7, #7
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	220f      	movs	r2, #15
 800a6f6:	401a      	ands	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	4903      	ldr	r1, [pc, #12]	; (800a70c <uint8_to_ascii_buffer+0x3c>)
 800a6fe:	5c8a      	ldrb	r2, [r1, r2]
 800a700:	701a      	strb	r2, [r3, #0]
}
 800a702:	46c0      	nop			; (mov r8, r8)
 800a704:	46bd      	mov	sp, r7
 800a706:	b002      	add	sp, #8
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	46c0      	nop			; (mov r8, r8)
 800a70c:	08015a8c 	.word	0x08015a8c

0800a710 <iis2dh_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak iis2dh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	0008      	movs	r0, r1
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	0019      	movs	r1, r3
 800a71e:	230b      	movs	r3, #11
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	1c02      	adds	r2, r0, #0
 800a724:	701a      	strb	r2, [r3, #0]
 800a726:	2308      	movs	r3, #8
 800a728:	18fb      	adds	r3, r7, r3
 800a72a:	1c0a      	adds	r2, r1, #0
 800a72c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d102      	bne.n	800a73a <iis2dh_read_reg+0x2a>
 800a734:	2301      	movs	r3, #1
 800a736:	425b      	negs	r3, r3
 800a738:	e00f      	b.n	800a75a <iis2dh_read_reg+0x4a>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685c      	ldr	r4, [r3, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	68d8      	ldr	r0, [r3, #12]
 800a742:	2308      	movs	r3, #8
 800a744:	18fb      	adds	r3, r7, r3
 800a746:	881d      	ldrh	r5, [r3, #0]
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	230b      	movs	r3, #11
 800a74c:	18fb      	adds	r3, r7, r3
 800a74e:	7819      	ldrb	r1, [r3, #0]
 800a750:	002b      	movs	r3, r5
 800a752:	47a0      	blx	r4
 800a754:	0003      	movs	r3, r0
 800a756:	617b      	str	r3, [r7, #20]

  return ret;
 800a758:	697b      	ldr	r3, [r7, #20]
}
 800a75a:	0018      	movs	r0, r3
 800a75c:	46bd      	mov	sp, r7
 800a75e:	b006      	add	sp, #24
 800a760:	bdb0      	pop	{r4, r5, r7, pc}

0800a762 <iis2dh_write_reg>:
  *
  */
int32_t __weak iis2dh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a762:	b5b0      	push	{r4, r5, r7, lr}
 800a764:	b086      	sub	sp, #24
 800a766:	af00      	add	r7, sp, #0
 800a768:	60f8      	str	r0, [r7, #12]
 800a76a:	0008      	movs	r0, r1
 800a76c:	607a      	str	r2, [r7, #4]
 800a76e:	0019      	movs	r1, r3
 800a770:	230b      	movs	r3, #11
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	1c02      	adds	r2, r0, #0
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	2308      	movs	r3, #8
 800a77a:	18fb      	adds	r3, r7, r3
 800a77c:	1c0a      	adds	r2, r1, #0
 800a77e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d102      	bne.n	800a78c <iis2dh_write_reg+0x2a>
 800a786:	2301      	movs	r3, #1
 800a788:	425b      	negs	r3, r3
 800a78a:	e00f      	b.n	800a7ac <iis2dh_write_reg+0x4a>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681c      	ldr	r4, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	68d8      	ldr	r0, [r3, #12]
 800a794:	2308      	movs	r3, #8
 800a796:	18fb      	adds	r3, r7, r3
 800a798:	881d      	ldrh	r5, [r3, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	230b      	movs	r3, #11
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	7819      	ldrb	r1, [r3, #0]
 800a7a2:	002b      	movs	r3, r5
 800a7a4:	47a0      	blx	r4
 800a7a6:	0003      	movs	r3, r0
 800a7a8:	617b      	str	r3, [r7, #20]

  return ret;
 800a7aa:	697b      	ldr	r3, [r7, #20]
}
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	b006      	add	sp, #24
 800a7b2:	bdb0      	pop	{r4, r5, r7, pc}

0800a7b4 <iis2dh_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_operating_mode_set(const stmdev_ctx_t *ctx,
                                  iis2dh_op_md_t val)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	000a      	movs	r2, r1
 800a7be:	1cfb      	adds	r3, r7, #3
 800a7c0:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a7c2:	2310      	movs	r3, #16
 800a7c4:	18fa      	adds	r2, r7, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	2120      	movs	r1, #32
 800a7cc:	f7ff ffa0 	bl	800a710 <iis2dh_read_reg>
 800a7d0:	0003      	movs	r3, r0
 800a7d2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d108      	bne.n	800a7ec <iis2dh_operating_mode_set+0x38>
  {
    ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a7da:	230c      	movs	r3, #12
 800a7dc:	18fa      	adds	r2, r7, r3
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	2123      	movs	r1, #35	; 0x23
 800a7e4:	f7ff ff94 	bl	800a710 <iis2dh_read_reg>
 800a7e8:	0003      	movs	r3, r0
 800a7ea:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d138      	bne.n	800a864 <iis2dh_operating_mode_set+0xb0>
  {
    if (val == IIS2DH_HR_12bit)
 800a7f2:	1cfb      	adds	r3, r7, #3
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10b      	bne.n	800a812 <iis2dh_operating_mode_set+0x5e>
    {
      ctrl_reg1.lpen = 0;
 800a7fa:	2310      	movs	r3, #16
 800a7fc:	18fb      	adds	r3, r7, r3
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	2108      	movs	r1, #8
 800a802:	438a      	bics	r2, r1
 800a804:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 1;
 800a806:	230c      	movs	r3, #12
 800a808:	18fb      	adds	r3, r7, r3
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	2108      	movs	r1, #8
 800a80e:	430a      	orrs	r2, r1
 800a810:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_NM_10bit)
 800a812:	1cfb      	adds	r3, r7, #3
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d10b      	bne.n	800a832 <iis2dh_operating_mode_set+0x7e>
    {
      ctrl_reg1.lpen = 0;
 800a81a:	2310      	movs	r3, #16
 800a81c:	18fb      	adds	r3, r7, r3
 800a81e:	781a      	ldrb	r2, [r3, #0]
 800a820:	2108      	movs	r1, #8
 800a822:	438a      	bics	r2, r1
 800a824:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a826:	230c      	movs	r3, #12
 800a828:	18fb      	adds	r3, r7, r3
 800a82a:	781a      	ldrb	r2, [r3, #0]
 800a82c:	2108      	movs	r1, #8
 800a82e:	438a      	bics	r2, r1
 800a830:	701a      	strb	r2, [r3, #0]
    }

    if (val == IIS2DH_LP_8bit)
 800a832:	1cfb      	adds	r3, r7, #3
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d10b      	bne.n	800a852 <iis2dh_operating_mode_set+0x9e>
    {
      ctrl_reg1.lpen = 1;
 800a83a:	2310      	movs	r3, #16
 800a83c:	18fb      	adds	r3, r7, r3
 800a83e:	781a      	ldrb	r2, [r3, #0]
 800a840:	2108      	movs	r1, #8
 800a842:	430a      	orrs	r2, r1
 800a844:	701a      	strb	r2, [r3, #0]
      ctrl_reg4.hr   = 0;
 800a846:	230c      	movs	r3, #12
 800a848:	18fb      	adds	r3, r7, r3
 800a84a:	781a      	ldrb	r2, [r3, #0]
 800a84c:	2108      	movs	r1, #8
 800a84e:	438a      	bics	r2, r1
 800a850:	701a      	strb	r2, [r3, #0]
    }

    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a852:	2310      	movs	r3, #16
 800a854:	18fa      	adds	r2, r7, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	2301      	movs	r3, #1
 800a85a:	2120      	movs	r1, #32
 800a85c:	f7ff ff81 	bl	800a762 <iis2dh_write_reg>
 800a860:	0003      	movs	r3, r0
 800a862:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d108      	bne.n	800a87c <iis2dh_operating_mode_set+0xc8>
  {
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a86a:	230c      	movs	r3, #12
 800a86c:	18fa      	adds	r2, r7, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	2301      	movs	r3, #1
 800a872:	2123      	movs	r1, #35	; 0x23
 800a874:	f7ff ff75 	bl	800a762 <iis2dh_write_reg>
 800a878:	0003      	movs	r3, r0
 800a87a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a87c:	697b      	ldr	r3, [r7, #20]
}
 800a87e:	0018      	movs	r0, r3
 800a880:	46bd      	mov	sp, r7
 800a882:	b006      	add	sp, #24
 800a884:	bd80      	pop	{r7, pc}

0800a886 <iis2dh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_data_rate_set(const stmdev_ctx_t *ctx, iis2dh_odr_t val)
{
 800a886:	b590      	push	{r4, r7, lr}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	000a      	movs	r2, r1
 800a890:	1cfb      	adds	r3, r7, #3
 800a892:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a894:	2408      	movs	r4, #8
 800a896:	193a      	adds	r2, r7, r4
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	2301      	movs	r3, #1
 800a89c:	2120      	movs	r1, #32
 800a89e:	f7ff ff37 	bl	800a710 <iis2dh_read_reg>
 800a8a2:	0003      	movs	r3, r0
 800a8a4:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d115      	bne.n	800a8d8 <iis2dh_data_rate_set+0x52>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800a8ac:	1cfb      	adds	r3, r7, #3
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	220f      	movs	r2, #15
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	193b      	adds	r3, r7, r4
 800a8b8:	0110      	lsls	r0, r2, #4
 800a8ba:	781a      	ldrb	r2, [r3, #0]
 800a8bc:	210f      	movs	r1, #15
 800a8be:	400a      	ands	r2, r1
 800a8c0:	1c11      	adds	r1, r2, #0
 800a8c2:	1c02      	adds	r2, r0, #0
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800a8c8:	193a      	adds	r2, r7, r4
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	2120      	movs	r1, #32
 800a8d0:	f7ff ff47 	bl	800a762 <iis2dh_write_reg>
 800a8d4:	0003      	movs	r3, r0
 800a8d6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
}
 800a8da:	0018      	movs	r0, r3
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	b005      	add	sp, #20
 800a8e0:	bd90      	pop	{r4, r7, pc}

0800a8e2 <iis2dh_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_full_scale_set(const stmdev_ctx_t *ctx, iis2dh_fs_t val)
{
 800a8e2:	b590      	push	{r4, r7, lr}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	000a      	movs	r2, r1
 800a8ec:	1cfb      	adds	r3, r7, #3
 800a8ee:	701a      	strb	r2, [r3, #0]
  iis2dh_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a8f0:	2408      	movs	r4, #8
 800a8f2:	193a      	adds	r2, r7, r4
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	2123      	movs	r1, #35	; 0x23
 800a8fa:	f7ff ff09 	bl	800a710 <iis2dh_read_reg>
 800a8fe:	0003      	movs	r3, r0
 800a900:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d117      	bne.n	800a938 <iis2dh_full_scale_set+0x56>
  {
    ctrl_reg4.fs = (uint8_t)val;
 800a908:	1cfb      	adds	r3, r7, #3
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2203      	movs	r2, #3
 800a90e:	4013      	ands	r3, r2
 800a910:	b2da      	uxtb	r2, r3
 800a912:	193b      	adds	r3, r7, r4
 800a914:	2103      	movs	r1, #3
 800a916:	400a      	ands	r2, r1
 800a918:	0110      	lsls	r0, r2, #4
 800a91a:	781a      	ldrb	r2, [r3, #0]
 800a91c:	2130      	movs	r1, #48	; 0x30
 800a91e:	438a      	bics	r2, r1
 800a920:	1c11      	adds	r1, r2, #0
 800a922:	1c02      	adds	r2, r0, #0
 800a924:	430a      	orrs	r2, r1
 800a926:	701a      	strb	r2, [r3, #0]
    ret = iis2dh_write_reg(ctx, IIS2DH_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800a928:	193a      	adds	r2, r7, r4
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	2301      	movs	r3, #1
 800a92e:	2123      	movs	r1, #35	; 0x23
 800a930:	f7ff ff17 	bl	800a762 <iis2dh_write_reg>
 800a934:	0003      	movs	r3, r0
 800a936:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a938:	68fb      	ldr	r3, [r7, #12]
}
 800a93a:	0018      	movs	r0, r3
 800a93c:	46bd      	mov	sp, r7
 800a93e:	b005      	add	sp, #20
 800a940:	bd90      	pop	{r4, r7, pc}

0800a942 <iis2dh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2dh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis2dh_read_reg(ctx, IIS2DH_WHO_AM_I, buff, 1);
 800a94c:	683a      	ldr	r2, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	2301      	movs	r3, #1
 800a952:	210f      	movs	r1, #15
 800a954:	f7ff fedc 	bl	800a710 <iis2dh_read_reg>
 800a958:	0003      	movs	r3, r0
 800a95a:	60fb      	str	r3, [r7, #12]

  return ret;
 800a95c:	68fb      	ldr	r3, [r7, #12]
}
 800a95e:	0018      	movs	r0, r3
 800a960:	46bd      	mov	sp, r7
 800a962:	b004      	add	sp, #16
 800a964:	bd80      	pop	{r7, pc}

0800a966 <my_astro_init>:
 *      Author: mzeml
 */
#include "my_astronode.h"

bool my_astro_init ()
{
 800a966:	b590      	push	{r4, r7, lr}
 800a968:	b087      	sub	sp, #28
 800a96a:	af04      	add	r7, sp, #16
	bool cfg_wr = false ;
 800a96c:	1dfb      	adds	r3, r7, #7
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]

	while ( !cfg_wr )
 800a972:	e012      	b.n	800a99a <my_astro_init+0x34>
	{
		my_astronode_reset () ;
 800a974:	f7f9 f822 	bl	80039bc <my_astronode_reset>
		// Deep Sleep Mode (false) NOT used
		// Satellite Ack Event Pin Mask (true): EVT pin shows EVT register Payload Ack bit state
		// Reset Notification Event Pin Mask (true):  EVT pin shows EVT register Reset Event Notification bit state
		// Command Available Event Pin Mask (true): EVT pin shows EVT register Command Available bit state
		// Message Transmission (Tx) Pending Event Pin Mask (false):  EVT pin does not show EVT register Msg Tx Pending bit state
		cfg_wr = astronode_send_cfg_wr ( true , true , true , false , true , true , true , false  ) ;
 800a978:	1dfc      	adds	r4, r7, #7
 800a97a:	2300      	movs	r3, #0
 800a97c:	9303      	str	r3, [sp, #12]
 800a97e:	2301      	movs	r3, #1
 800a980:	9302      	str	r3, [sp, #8]
 800a982:	2301      	movs	r3, #1
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	2301      	movs	r3, #1
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	2300      	movs	r3, #0
 800a98c:	2201      	movs	r2, #1
 800a98e:	2101      	movs	r1, #1
 800a990:	2001      	movs	r0, #1
 800a992:	f7fe fa39 	bl	8008e08 <astronode_send_cfg_wr>
 800a996:	0003      	movs	r3, r0
 800a998:	7023      	strb	r3, [r4, #0]
	while ( !cfg_wr )
 800a99a:	1dfb      	adds	r3, r7, #7
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	4053      	eors	r3, r2
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e5      	bne.n	800a974 <my_astro_init+0xe>
	}

	if ( cfg_wr )
 800a9a8:	1dfb      	adds	r3, r7, #7
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00d      	beq.n	800a9cc <my_astro_init+0x66>
	{
		astronode_send_rtc_rr () ;
 800a9b0:	f7fe fe90 	bl	80096d4 <astronode_send_rtc_rr>
		astronode_send_cfg_sr () ;
 800a9b4:	f7fe f9f0 	bl	8008d98 <astronode_send_cfg_sr>
		astronode_send_mpn_rr () ;
 800a9b8:	f7fe ff86 	bl	80098c8 <astronode_send_mpn_rr>
		astronode_send_msn_rr () ;
 800a9bc:	f7fe fb7a 	bl	80090b4 <astronode_send_msn_rr>
		astronode_send_mgi_rr () ;
 800a9c0:	f7fe face 	bl	8008f60 <astronode_send_mgi_rr>
		astronode_send_pld_fr () ;
 800a9c4:	f7fe fe0a 	bl	80095dc <astronode_send_pld_fr>
		return true ;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e000      	b.n	800a9ce <my_astro_init+0x68>
	}
	else
	{
		return false ;
 800a9cc:	2300      	movs	r3, #0
	}
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b003      	add	sp, #12
 800a9d4:	bd90      	pop	{r4, r7, pc}
	...

0800a9d8 <my_astro_add_payload_2_queue>:

bool my_astro_add_payload_2_queue ( uint16_t id , char* payload )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	0002      	movs	r2, r0
 800a9e0:	6039      	str	r1, [r7, #0]
 800a9e2:	1dbb      	adds	r3, r7, #6
 800a9e4:	801a      	strh	r2, [r3, #0]
	size_t l = strlen ( payload ) ;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f7f5 fb8b 	bl	8000104 <strlen>
 800a9ee:	0003      	movs	r3, r0
 800a9f0:	60fb      	str	r3, [r7, #12]
	if ( l <= ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES )
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2ba0      	cmp	r3, #160	; 0xa0
 800a9f6:	d80b      	bhi.n	800aa10 <my_astro_add_payload_2_queue+0x38>
	{
		if ( astronode_send_pld_er ( id , payload , l ) )
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	1dbb      	adds	r3, r7, #6
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	0018      	movs	r0, r3
 800aa04:	f7fe fd40 	bl	8009488 <astronode_send_pld_er>
 800aa08:	1e03      	subs	r3, r0, #0
 800aa0a:	d005      	beq.n	800aa18 <my_astro_add_payload_2_queue+0x40>
		{
			return true ;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e004      	b.n	800aa1a <my_astro_add_payload_2_queue+0x42>
		}
	}
	else
	{
		send_debug_logs ( "my_astronode.c,my_astro_add_payload_2_queue,Payload exceeded ASTRONODE_APP_PAYLOAD_MAX_LEN_BYTES value." ) ;
 800aa10:	4b04      	ldr	r3, [pc, #16]	; (800aa24 <my_astro_add_payload_2_queue+0x4c>)
 800aa12:	0018      	movs	r0, r3
 800aa14:	f7f8 fb68 	bl	80030e8 <send_debug_logs>
	}
	return false ;
 800aa18:	2300      	movs	r3, #0
}
 800aa1a:	0018      	movs	r0, r3
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	b004      	add	sp, #16
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	46c0      	nop			; (mov r8, r8)
 800aa24:	08015758 	.word	0x08015758

0800aa28 <my_astro_handle_evt>:
bool my_astro_handle_evt ( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	af00      	add	r7, sp, #0
	send_debug_logs ( "my_astronode.c,my_astro_handle_evt,evt pin is high." ) ;
 800aa2c:	4b19      	ldr	r3, [pc, #100]	; (800aa94 <my_astro_handle_evt+0x6c>)
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f7f8 fb5a 	bl	80030e8 <send_debug_logs>
	astronode_send_evt_rr () ;
 800aa34:	f7fe fbe8 	bl	8009208 <astronode_send_evt_rr>
	if (is_sak_available () )
 800aa38:	f7ff f9d4 	bl	8009de4 <is_sak_available>
 800aa3c:	1e03      	subs	r3, r0, #0
 800aa3e:	d007      	beq.n	800aa50 <my_astro_handle_evt+0x28>
	{
	  astronode_send_sak_rr () ;
 800aa40:	f7fe feac 	bl	800979c <astronode_send_sak_rr>
	  astronode_send_sak_cr () ;
 800aa44:	f7fe ff00 	bl	8009848 <astronode_send_sak_cr>
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,message has been acknowledged." ) ;
 800aa48:	4b13      	ldr	r3, [pc, #76]	; (800aa98 <my_astro_handle_evt+0x70>)
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	f7f8 fb4c 	bl	80030e8 <send_debug_logs>
	  //astronode_send_per_rr () ;
	}
	if ( is_astronode_reset () )
 800aa50:	f7ff f9d2 	bl	8009df8 <is_astronode_reset>
 800aa54:	1e03      	subs	r3, r0, #0
 800aa56:	d005      	beq.n	800aa64 <my_astro_handle_evt+0x3c>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,terminal has been reset." ) ;
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <my_astro_handle_evt+0x74>)
 800aa5a:	0018      	movs	r0, r3
 800aa5c:	f7f8 fb44 	bl	80030e8 <send_debug_logs>
	  astronode_send_res_cr () ;
 800aa60:	f7fe fdf8 	bl	8009654 <astronode_send_res_cr>
	}
	if ( is_command_available () )
 800aa64:	f7ff f9d2 	bl	8009e0c <is_command_available>
 800aa68:	1e03      	subs	r3, r0, #0
 800aa6a:	d00e      	beq.n	800aa8a <my_astro_handle_evt+0x62>
	{
	  send_debug_logs ( "my_astronode.c,my_astro_handle_evt,unicast command is available" ) ;
 800aa6c:	4b0c      	ldr	r3, [pc, #48]	; (800aaa0 <my_astro_handle_evt+0x78>)
 800aa6e:	0018      	movs	r0, r3
 800aa70:	f7f8 fb3a 	bl	80030e8 <send_debug_logs>
	  if ( astronode_send_cmd_rr ( my_astro_rcv_cmd ) )
 800aa74:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <my_astro_handle_evt+0x7c>)
 800aa76:	0018      	movs	r0, r3
 800aa78:	f7ff f810 	bl	8009a9c <astronode_send_cmd_rr>
 800aa7c:	1e03      	subs	r3, r0, #0
 800aa7e:	d002      	beq.n	800aa86 <my_astro_handle_evt+0x5e>
	  {
		  astro_rcv_cmd_flag = true ;
 800aa80:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <my_astro_handle_evt+0x80>)
 800aa82:	2201      	movs	r2, #1
 800aa84:	701a      	strb	r2, [r3, #0]
	  }
	  astronode_send_cmd_cr () ;
 800aa86:	f7fe ffc9 	bl	8009a1c <astronode_send_cmd_cr>
	}
	return true ;
 800aa8a:	2301      	movs	r3, #1
}
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	080157c0 	.word	0x080157c0
 800aa98:	080157f4 	.word	0x080157f4
 800aa9c:	08015838 	.word	0x08015838
 800aaa0:	08015874 	.word	0x08015874
 800aaa4:	20000c1c 	.word	0x20000c1c
 800aaa8:	20000c1a 	.word	0x20000c1a

0800aaac <my_astro_write_coordinates>:
	//astronode_send_per_rr () ;
	return true ;
}

void my_astro_write_coordinates ( int32_t astro_geo_wr_latitude , int32_t astro_geo_wr_longitude )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	astronode_send_geo_wr ( astro_geo_wr_latitude , astro_geo_wr_longitude ) ;
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	0011      	movs	r1, r2
 800aabc:	0018      	movs	r0, r3
 800aabe:	f7fe fc23 	bl	8009308 <astronode_send_geo_wr>
}
 800aac2:	46c0      	nop			; (mov r8, r8)
 800aac4:	46bd      	mov	sp, r7
 800aac6:	b002      	add	sp, #8
 800aac8:	bd80      	pop	{r7, pc}
	...

0800aacc <my_gnss_acq_coordinates>:
 */

#include "my_gnss.h"

bool my_gnss_acq_coordinates ( fix_astro* fix3d )
{
 800aacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aace:	4ca5      	ldr	r4, [pc, #660]	; (800ad64 <my_gnss_acq_coordinates+0x298>)
 800aad0:	44a5      	add	sp, r4
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
	bool		r = false ;
 800aad6:	4ba4      	ldr	r3, [pc, #656]	; (800ad68 <my_gnss_acq_coordinates+0x29c>)
 800aad8:	18fb      	adds	r3, r7, r3
 800aada:	2200      	movs	r2, #0
 800aadc:	701a      	strb	r2, [r3, #0]
	bool		is_utc_saved = false ;
 800aade:	4ba3      	ldr	r3, [pc, #652]	; (800ad6c <my_gnss_acq_coordinates+0x2a0>)
 800aae0:	18fb      	adds	r3, r7, r3
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
	uint8_t		rx_byte = 0 ;
 800aae6:	4ba2      	ldr	r3, [pc, #648]	; (800ad70 <my_gnss_acq_coordinates+0x2a4>)
 800aae8:	18fb      	adds	r3, r7, r3
 800aaea:	2200      	movs	r2, #0
 800aaec:	701a      	strb	r2, [r3, #0]
	uint8_t		i_nmea = 0 ;
 800aaee:	4ba1      	ldr	r3, [pc, #644]	; (800ad74 <my_gnss_acq_coordinates+0x2a8>)
 800aaf0:	18fb      	adds	r3, r7, r3
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	701a      	strb	r2, [r3, #0]
	uint8_t		gsv_tns = 0 ;
 800aaf6:	4ba0      	ldr	r3, [pc, #640]	; (800ad78 <my_gnss_acq_coordinates+0x2ac>)
 800aaf8:	18fb      	adds	r3, r7, r3
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
	uint8_t		nmea_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800aafe:	4b9f      	ldr	r3, [pc, #636]	; (800ad7c <my_gnss_acq_coordinates+0x2b0>)
 800ab00:	2486      	movs	r4, #134	; 0x86
 800ab02:	00a4      	lsls	r4, r4, #2
 800ab04:	191b      	adds	r3, r3, r4
 800ab06:	19db      	adds	r3, r3, r7
 800ab08:	2200      	movs	r2, #0
 800ab0a:	601a      	str	r2, [r3, #0]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	22f6      	movs	r2, #246	; 0xf6
 800ab10:	2100      	movs	r1, #0
 800ab12:	0018      	movs	r0, r3
 800ab14:	f002 fc44 	bl	800d3a0 <memset>
	uint8_t		gngll_message[UART_TX_MAX_BUFF_SIZE] = {0} ;
 800ab18:	4b99      	ldr	r3, [pc, #612]	; (800ad80 <my_gnss_acq_coordinates+0x2b4>)
 800ab1a:	191b      	adds	r3, r3, r4
 800ab1c:	19db      	adds	r3, r3, r7
 800ab1e:	2200      	movs	r2, #0
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	3304      	adds	r3, #4
 800ab24:	22f6      	movs	r2, #246	; 0xf6
 800ab26:	2100      	movs	r1, #0
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f002 fc39 	bl	800d3a0 <memset>
	char* 		nmea_gsv_label = "GPGSV" ;
 800ab2e:	4b95      	ldr	r3, [pc, #596]	; (800ad84 <my_gnss_acq_coordinates+0x2b8>)
 800ab30:	2284      	movs	r2, #132	; 0x84
 800ab32:	0092      	lsls	r2, r2, #2
 800ab34:	18ba      	adds	r2, r7, r2
 800ab36:	6013      	str	r3, [r2, #0]
	char* 		nmea_rmc_label = "GNRMC" ;
 800ab38:	4b93      	ldr	r3, [pc, #588]	; (800ad88 <my_gnss_acq_coordinates+0x2bc>)
 800ab3a:	2283      	movs	r2, #131	; 0x83
 800ab3c:	0092      	lsls	r2, r2, #2
 800ab3e:	18ba      	adds	r2, r7, r2
 800ab40:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngsa_label = "GNGSA" ;
 800ab42:	4b92      	ldr	r3, [pc, #584]	; (800ad8c <my_gnss_acq_coordinates+0x2c0>)
 800ab44:	2282      	movs	r2, #130	; 0x82
 800ab46:	0092      	lsls	r2, r2, #2
 800ab48:	18ba      	adds	r2, r7, r2
 800ab4a:	6013      	str	r3, [r2, #0]
	char* 		nmea_gngll_label = "GNGLL" ;
 800ab4c:	4b90      	ldr	r3, [pc, #576]	; (800ad90 <my_gnss_acq_coordinates+0x2c4>)
 800ab4e:	2281      	movs	r2, #129	; 0x81
 800ab50:	0092      	lsls	r2, r2, #2
 800ab52:	18ba      	adds	r2, r7, r2
 800ab54:	6013      	str	r3, [r2, #0]

	fix3d->fix_mode = '0' ;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2230      	movs	r2, #48	; 0x30
 800ab5a:	741a      	strb	r2, [r3, #16]
	fix3d->pdop = 1000 ;
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	4b8c      	ldr	r3, [pc, #560]	; (800ad94 <my_gnss_acq_coordinates+0x2c8>)
 800ab62:	608a      	str	r2, [r1, #8]
 800ab64:	60cb      	str	r3, [r1, #12]
	my_tim_start () ;
 800ab66:	f7f9 f831 	bl	8003bcc <my_tim_start>
	while ( tim_seconds < fix_acq_ths )
 800ab6a:	e0c4      	b.n	800acf6 <my_gnss_acq_coordinates+0x22a>
	// Pierwsze
	{
		my_gnss_receive_byte ( &rx_byte, true ) ;
 800ab6c:	4c80      	ldr	r4, [pc, #512]	; (800ad70 <my_gnss_acq_coordinates+0x2a4>)
 800ab6e:	193b      	adds	r3, r7, r4
 800ab70:	2101      	movs	r1, #1
 800ab72:	0018      	movs	r0, r3
 800ab74:	f7f8 fec6 	bl	8003904 <my_gnss_receive_byte>
		if ( rx_byte )
 800ab78:	0020      	movs	r0, r4
 800ab7a:	183b      	adds	r3, r7, r0
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	4c7b      	ldr	r4, [pc, #492]	; (800ad6c <my_gnss_acq_coordinates+0x2a0>)
 800ab80:	193a      	adds	r2, r7, r4
 800ab82:	1939      	adds	r1, r7, r4
 800ab84:	7809      	ldrb	r1, [r1, #0]
 800ab86:	7011      	strb	r1, [r2, #0]
 800ab88:	4d7b      	ldr	r5, [pc, #492]	; (800ad78 <my_gnss_acq_coordinates+0x2ac>)
 800ab8a:	197a      	adds	r2, r7, r5
 800ab8c:	1979      	adds	r1, r7, r5
 800ab8e:	7809      	ldrb	r1, [r1, #0]
 800ab90:	7011      	strb	r1, [r2, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d100      	bne.n	800ab98 <my_gnss_acq_coordinates+0xcc>
 800ab96:	e0ae      	b.n	800acf6 <my_gnss_acq_coordinates+0x22a>
		{
			if ( my_nmea_message ( &rx_byte , nmea_message , &i_nmea ) == 2 )
 800ab98:	4b76      	ldr	r3, [pc, #472]	; (800ad74 <my_gnss_acq_coordinates+0x2a8>)
 800ab9a:	18fa      	adds	r2, r7, r3
 800ab9c:	2684      	movs	r6, #132	; 0x84
 800ab9e:	0076      	lsls	r6, r6, #1
 800aba0:	19b9      	adds	r1, r7, r6
 800aba2:	183b      	adds	r3, r7, r0
 800aba4:	0018      	movs	r0, r3
 800aba6:	f000 fbf9 	bl	800b39c <my_nmea_message>
 800abaa:	0001      	movs	r1, r0
 800abac:	193b      	adds	r3, r7, r4
 800abae:	193a      	adds	r2, r7, r4
 800abb0:	7812      	ldrb	r2, [r2, #0]
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	197b      	adds	r3, r7, r5
 800abb6:	197a      	adds	r2, r7, r5
 800abb8:	7812      	ldrb	r2, [r2, #0]
 800abba:	701a      	strb	r2, [r3, #0]
 800abbc:	2902      	cmp	r1, #2
 800abbe:	d000      	beq.n	800abc2 <my_gnss_acq_coordinates+0xf6>
 800abc0:	e099      	b.n	800acf6 <my_gnss_acq_coordinates+0x22a>
			{
				if ( is_my_nmea_checksum_ok ( (char*) nmea_message ) )
 800abc2:	19bb      	adds	r3, r7, r6
 800abc4:	0018      	movs	r0, r3
 800abc6:	f000 fca9 	bl	800b51c <is_my_nmea_checksum_ok>
 800abca:	0003      	movs	r3, r0
 800abcc:	0019      	movs	r1, r3
 800abce:	193b      	adds	r3, r7, r4
 800abd0:	193a      	adds	r2, r7, r4
 800abd2:	7812      	ldrb	r2, [r2, #0]
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	197b      	adds	r3, r7, r5
 800abd8:	197a      	adds	r2, r7, r5
 800abda:	7812      	ldrb	r2, [r2, #0]
 800abdc:	701a      	strb	r2, [r3, #0]
 800abde:	2900      	cmp	r1, #0
 800abe0:	d100      	bne.n	800abe4 <my_gnss_acq_coordinates+0x118>
 800abe2:	e088      	b.n	800acf6 <my_gnss_acq_coordinates+0x22a>
				{
					if ( !is_utc_saved )
 800abe4:	193b      	adds	r3, r7, r4
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	2201      	movs	r2, #1
 800abea:	4053      	eors	r3, r2
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d015      	beq.n	800ac1e <my_gnss_acq_coordinates+0x152>
					{
						if ( fix3d->fix_mode == NMEA_3D_FIX )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	7c1b      	ldrb	r3, [r3, #16]
 800abf6:	2b33      	cmp	r3, #51	; 0x33
 800abf8:	d111      	bne.n	800ac1e <my_gnss_acq_coordinates+0x152>
						{
							if ( strstr ( (char*) nmea_message , nmea_rmc_label ) )
 800abfa:	2383      	movs	r3, #131	; 0x83
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	18fb      	adds	r3, r7, r3
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	19bb      	adds	r3, r7, r6
 800ac04:	0011      	movs	r1, r2
 800ac06:	0018      	movs	r0, r3
 800ac08:	f002 fc3f 	bl	800d48a <strstr>
 800ac0c:	1e03      	subs	r3, r0, #0
 800ac0e:	d006      	beq.n	800ac1e <my_gnss_acq_coordinates+0x152>
							{
								my_rtc_set_dt_from_nmea_rmc ( (char*) nmea_message ) ; // Jeśli masz fix to na pewno czas jest dobry
 800ac10:	19bb      	adds	r3, r7, r6
 800ac12:	0018      	movs	r0, r3
 800ac14:	f000 f9a6 	bl	800af64 <my_rtc_set_dt_from_nmea_rmc>
								is_utc_saved = true ;
 800ac18:	193b      	adds	r3, r7, r4
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	701a      	strb	r2, [r3, #0]
							}
						}
					}
					if ( strstr ( (char*) nmea_message , nmea_gsv_label ) && gsv_tns < MIN_TNS ) // Nie ma co tego później monitorować, bo jest cała kaskada wiadomości
 800ac1e:	2384      	movs	r3, #132	; 0x84
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	18fb      	adds	r3, r7, r3
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	2484      	movs	r4, #132	; 0x84
 800ac28:	0064      	lsls	r4, r4, #1
 800ac2a:	193b      	adds	r3, r7, r4
 800ac2c:	0011      	movs	r1, r2
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f002 fc2b 	bl	800d48a <strstr>
 800ac34:	1e03      	subs	r3, r0, #0
 800ac36:	d012      	beq.n	800ac5e <my_gnss_acq_coordinates+0x192>
 800ac38:	4d4f      	ldr	r5, [pc, #316]	; (800ad78 <my_gnss_acq_coordinates+0x2ac>)
 800ac3a:	197b      	adds	r3, r7, r5
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d80d      	bhi.n	800ac5e <my_gnss_acq_coordinates+0x192>
					{
						if ( tim_seconds > min_tns_time_ths )
 800ac42:	4b55      	ldr	r3, [pc, #340]	; (800ad98 <my_gnss_acq_coordinates+0x2cc>)
 800ac44:	881a      	ldrh	r2, [r3, #0]
 800ac46:	4b55      	ldr	r3, [pc, #340]	; (800ad9c <my_gnss_acq_coordinates+0x2d0>)
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d85b      	bhi.n	800ad06 <my_gnss_acq_coordinates+0x23a>
						{
							break ;
						}
						gsv_tns = my_nmea_get_gsv_tns ( (char*) nmea_message ) ;
 800ac4e:	193b      	adds	r3, r7, r4
 800ac50:	0018      	movs	r0, r3
 800ac52:	f000 fe09 	bl	800b868 <my_nmea_get_gsv_tns>
 800ac56:	0003      	movs	r3, r0
 800ac58:	001a      	movs	r2, r3
 800ac5a:	197b      	adds	r3, r7, r5
 800ac5c:	701a      	strb	r2, [r3, #0]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngsa_label ) ) // Koniecznie monitorować cały czas
 800ac5e:	2382      	movs	r3, #130	; 0x82
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	18fb      	adds	r3, r7, r3
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	2484      	movs	r4, #132	; 0x84
 800ac68:	0064      	lsls	r4, r4, #1
 800ac6a:	193b      	adds	r3, r7, r4
 800ac6c:	0011      	movs	r1, r2
 800ac6e:	0018      	movs	r0, r3
 800ac70:	f002 fc0b 	bl	800d48a <strstr>
 800ac74:	1e03      	subs	r3, r0, #0
 800ac76:	d010      	beq.n	800ac9a <my_gnss_acq_coordinates+0x1ce>
					{
						fix3d->fix_mode = get_my_nmea_gngsa_fixed_mode_s ( (char*) nmea_message ) ;
 800ac78:	193b      	adds	r3, r7, r4
 800ac7a:	0018      	movs	r0, r3
 800ac7c:	f000 fbfa 	bl	800b474 <get_my_nmea_gngsa_fixed_mode_s>
 800ac80:	0003      	movs	r3, r0
 800ac82:	001a      	movs	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	741a      	strb	r2, [r3, #16]
						fix3d->pdop = get_my_nmea_gngsa_pdop_d ( (char*) nmea_message ) ;
 800ac88:	193b      	adds	r3, r7, r4
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f000 fbfd 	bl	800b48a <get_my_nmea_gngsa_pdop_d>
 800ac90:	0002      	movs	r2, r0
 800ac92:	000b      	movs	r3, r1
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	608a      	str	r2, [r1, #8]
 800ac98:	60cb      	str	r3, [r1, #12]
					}
					if ( strstr ( (char*) nmea_message , nmea_gngll_label ) && is_utc_saved )
 800ac9a:	2381      	movs	r3, #129	; 0x81
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	18fb      	adds	r3, r7, r3
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	2384      	movs	r3, #132	; 0x84
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	18fb      	adds	r3, r7, r3
 800aca8:	0011      	movs	r1, r2
 800acaa:	0018      	movs	r0, r3
 800acac:	f002 fbed 	bl	800d48a <strstr>
 800acb0:	1e03      	subs	r3, r0, #0
 800acb2:	d020      	beq.n	800acf6 <my_gnss_acq_coordinates+0x22a>
 800acb4:	4b2d      	ldr	r3, [pc, #180]	; (800ad6c <my_gnss_acq_coordinates+0x2a0>)
 800acb6:	18fb      	adds	r3, r7, r3
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d01b      	beq.n	800acf6 <my_gnss_acq_coordinates+0x22a>
					{
						if ( fix3d->fix_mode != NMEA_3D_FIX ) // Solution for Issue #3 Handle a lost of fix during acquisition.
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	7c1b      	ldrb	r3, [r3, #16]
 800acc2:	2b33      	cmp	r3, #51	; 0x33
 800acc4:	d121      	bne.n	800ad0a <my_gnss_acq_coordinates+0x23e>
						{
							break ;
						}
						memcpy ( gngll_message , nmea_message , UART_TX_MAX_BUFF_SIZE ) ;
 800acc6:	4b2e      	ldr	r3, [pc, #184]	; (800ad80 <my_gnss_acq_coordinates+0x2b4>)
 800acc8:	2186      	movs	r1, #134	; 0x86
 800acca:	0089      	lsls	r1, r1, #2
 800accc:	185b      	adds	r3, r3, r1
 800acce:	19da      	adds	r2, r3, r7
 800acd0:	4b2a      	ldr	r3, [pc, #168]	; (800ad7c <my_gnss_acq_coordinates+0x2b0>)
 800acd2:	185b      	adds	r3, r3, r1
 800acd4:	19db      	adds	r3, r3, r7
 800acd6:	0010      	movs	r0, r2
 800acd8:	0019      	movs	r1, r3
 800acda:	23fa      	movs	r3, #250	; 0xfa
 800acdc:	001a      	movs	r2, r3
 800acde:	f002 fc8c 	bl	800d5fa <memcpy>
						if ( fix3d->pdop <= pdop_ths )
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6898      	ldr	r0, [r3, #8]
 800ace6:	68d9      	ldr	r1, [r3, #12]
 800ace8:	4b2d      	ldr	r3, [pc, #180]	; (800ada0 <my_gnss_acq_coordinates+0x2d4>)
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f7f5 fbbb 	bl	8000468 <__aeabi_dcmple>
 800acf2:	1e03      	subs	r3, r0, #0
 800acf4:	d10b      	bne.n	800ad0e <my_gnss_acq_coordinates+0x242>
	while ( tim_seconds < fix_acq_ths )
 800acf6:	4b28      	ldr	r3, [pc, #160]	; (800ad98 <my_gnss_acq_coordinates+0x2cc>)
 800acf8:	881a      	ldrh	r2, [r3, #0]
 800acfa:	4b2a      	ldr	r3, [pc, #168]	; (800ada4 <my_gnss_acq_coordinates+0x2d8>)
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d200      	bcs.n	800ad04 <my_gnss_acq_coordinates+0x238>
 800ad02:	e733      	b.n	800ab6c <my_gnss_acq_coordinates+0xa0>
 800ad04:	e004      	b.n	800ad10 <my_gnss_acq_coordinates+0x244>
							break ;
 800ad06:	46c0      	nop			; (mov r8, r8)
 800ad08:	e002      	b.n	800ad10 <my_gnss_acq_coordinates+0x244>
							break ;
 800ad0a:	46c0      	nop			; (mov r8, r8)
 800ad0c:	e000      	b.n	800ad10 <my_gnss_acq_coordinates+0x244>
						{
							break ;
 800ad0e:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
	}
	my_tim_stop () ;
 800ad10:	f7f8 ff6c 	bl	8003bec <my_tim_stop>
	// WYŁĄCZYĆ I ZASAVEOWAĆ BRAK GLONASS BO OSTATNIO NIE ZROBIŁEM SAVE TO NVRAM

	if ( gngll_message[0] )
 800ad14:	4b1a      	ldr	r3, [pc, #104]	; (800ad80 <my_gnss_acq_coordinates+0x2b4>)
 800ad16:	2286      	movs	r2, #134	; 0x86
 800ad18:	0092      	lsls	r2, r2, #2
 800ad1a:	189b      	adds	r3, r3, r2
 800ad1c:	19db      	adds	r3, r3, r7
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00a      	beq.n	800ad3a <my_gnss_acq_coordinates+0x26e>
	{
		my_nmea_get_gngll_coordinates ( (char*) gngll_message , fix3d ) ;
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	230c      	movs	r3, #12
 800ad28:	18fb      	adds	r3, r7, r3
 800ad2a:	0011      	movs	r1, r2
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f000 fcb1 	bl	800b694 <my_nmea_get_gngll_coordinates>
		r = true ;
 800ad32:	4b0d      	ldr	r3, [pc, #52]	; (800ad68 <my_gnss_acq_coordinates+0x29c>)
 800ad34:	18fb      	adds	r3, r7, r3
 800ad36:	2201      	movs	r2, #1
 800ad38:	701a      	strb	r2, [r3, #0]
	}
	fix3d->acq_time = tim_seconds ;
 800ad3a:	4b17      	ldr	r3, [pc, #92]	; (800ad98 <my_gnss_acq_coordinates+0x2cc>)
 800ad3c:	881a      	ldrh	r2, [r3, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	825a      	strh	r2, [r3, #18]
	fix3d->acq_total_time += tim_seconds ; // UWAGA: Tutaj nie mogę zaokrąglać, bo będę tracił za każdym razem resztę co się uzbiera w duży błąd
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	4a14      	ldr	r2, [pc, #80]	; (800ad98 <my_gnss_acq_coordinates+0x2cc>)
 800ad48:	8812      	ldrh	r2, [r2, #0]
 800ad4a:	189a      	adds	r2, r3, r2
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	615a      	str	r2, [r3, #20]
	return r ;
 800ad50:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <my_gnss_acq_coordinates+0x29c>)
 800ad52:	18fb      	adds	r3, r7, r3
 800ad54:	781b      	ldrb	r3, [r3, #0]
}
 800ad56:	0018      	movs	r0, r3
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	2387      	movs	r3, #135	; 0x87
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	449d      	add	sp, r3
 800ad60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad62:	46c0      	nop			; (mov r8, r8)
 800ad64:	fffffde4 	.word	0xfffffde4
 800ad68:	00000217 	.word	0x00000217
 800ad6c:	00000216 	.word	0x00000216
 800ad70:	00000203 	.word	0x00000203
 800ad74:	00000202 	.word	0x00000202
 800ad78:	00000215 	.word	0x00000215
 800ad7c:	fffffef0 	.word	0xfffffef0
 800ad80:	fffffdf4 	.word	0xfffffdf4
 800ad84:	080158b4 	.word	0x080158b4
 800ad88:	080158bc 	.word	0x080158bc
 800ad8c:	080158c4 	.word	0x080158c4
 800ad90:	080158cc 	.word	0x080158cc
 800ad94:	408f4000 	.word	0x408f4000
 800ad98:	20000c44 	.word	0x20000c44
 800ad9c:	2000001c 	.word	0x2000001c
 800ada0:	20000020 	.word	0x20000020
 800ada4:	2000001a 	.word	0x2000001a

0800ada8 <my_rtc_get_dt>:
** Synopsis: $<TalkerID>RMC,<UTC>,<Status>,<Lat>,<N/S>,<Lon>,<E/W>,<SOG>,<COG>,<Date>,<MagVar>,<MagVarDir>,<ModeInd>,<NavStatus>*<Checksum><CR><LF>
** m message example from Quectel L86: "$GPRMC,085151.187,V,,,,,0.00,0.00,291023,,,N,V*3A". \r\n have been wiped out.
*/

void my_rtc_get_dt ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate ( &hrtc , d , RTC_FORMAT_BIN ) ;
 800adb2:	6879      	ldr	r1, [r7, #4]
 800adb4:	4b07      	ldr	r3, [pc, #28]	; (800add4 <my_rtc_get_dt+0x2c>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	0018      	movs	r0, r3
 800adba:	f7fb f9a5 	bl	8006108 <HAL_RTC_GetDate>
	HAL_RTC_GetTime ( &hrtc , t , RTC_FORMAT_BIN ) ;
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	4b04      	ldr	r3, [pc, #16]	; (800add4 <my_rtc_get_dt+0x2c>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	0018      	movs	r0, r3
 800adc6:	f7fb f8b1 	bl	8005f2c <HAL_RTC_GetTime>
}
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	46bd      	mov	sp, r7
 800adce:	b002      	add	sp, #8
 800add0:	bd80      	pop	{r7, pc}
 800add2:	46c0      	nop			; (mov r8, r8)
 800add4:	200006f4 	.word	0x200006f4

0800add8 <my_rtc_get_dt_s>:
uint16_t my_rtc_get_dt_s ( char* dt_s )
{
 800add8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adda:	b08d      	sub	sp, #52	; 0x34
 800addc:	af04      	add	r7, sp, #16
 800adde:	6078      	str	r0, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	//char cdt[20];

	HAL_RTC_GetTime ( &hrtc , &gTime , RTC_FORMAT_BIN ) ;
 800ade0:	2508      	movs	r5, #8
 800ade2:	1979      	adds	r1, r7, r5
 800ade4:	4b1b      	ldr	r3, [pc, #108]	; (800ae54 <my_rtc_get_dt_s+0x7c>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	0018      	movs	r0, r3
 800adea:	f7fb f89f 	bl	8005f2c <HAL_RTC_GetTime>
	HAL_RTC_GetDate ( &hrtc , &gDate , RTC_FORMAT_BIN ) ;
 800adee:	241c      	movs	r4, #28
 800adf0:	1939      	adds	r1, r7, r4
 800adf2:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <my_rtc_get_dt_s+0x7c>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	0018      	movs	r0, r3
 800adf8:	f7fb f986 	bl	8006108 <HAL_RTC_GetDate>

	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + gDate.Year , gDate.Month , gDate.Date , gTime.Hours , gTime.Minutes , gTime.Seconds ) ;
 800adfc:	0021      	movs	r1, r4
 800adfe:	187b      	adds	r3, r7, r1
 800ae00:	78db      	ldrb	r3, [r3, #3]
 800ae02:	22fa      	movs	r2, #250	; 0xfa
 800ae04:	00d2      	lsls	r2, r2, #3
 800ae06:	189a      	adds	r2, r3, r2
 800ae08:	187b      	adds	r3, r7, r1
 800ae0a:	785b      	ldrb	r3, [r3, #1]
 800ae0c:	469c      	mov	ip, r3
 800ae0e:	187b      	adds	r3, r7, r1
 800ae10:	789b      	ldrb	r3, [r3, #2]
 800ae12:	001c      	movs	r4, r3
 800ae14:	0028      	movs	r0, r5
 800ae16:	183b      	adds	r3, r7, r0
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	001d      	movs	r5, r3
 800ae1c:	183b      	adds	r3, r7, r0
 800ae1e:	785b      	ldrb	r3, [r3, #1]
 800ae20:	001e      	movs	r6, r3
 800ae22:	183b      	adds	r3, r7, r0
 800ae24:	789b      	ldrb	r3, [r3, #2]
 800ae26:	490c      	ldr	r1, [pc, #48]	; (800ae58 <my_rtc_get_dt_s+0x80>)
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	9303      	str	r3, [sp, #12]
 800ae2c:	9602      	str	r6, [sp, #8]
 800ae2e:	9501      	str	r5, [sp, #4]
 800ae30:	9400      	str	r4, [sp, #0]
 800ae32:	4663      	mov	r3, ip
 800ae34:	f002 fa1e 	bl	800d274 <sprintf>

	return (uint16_t) ( 2000 + gDate.Year ) ;
 800ae38:	211c      	movs	r1, #28
 800ae3a:	187b      	adds	r3, r7, r1
 800ae3c:	78db      	ldrb	r3, [r3, #3]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	22fa      	movs	r2, #250	; 0xfa
 800ae42:	00d2      	lsls	r2, r2, #3
 800ae44:	4694      	mov	ip, r2
 800ae46:	4463      	add	r3, ip
 800ae48:	b29b      	uxth	r3, r3
}
 800ae4a:	0018      	movs	r0, r3
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	b009      	add	sp, #36	; 0x24
 800ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	200006f4 	.word	0x200006f4
 800ae58:	0801591c 	.word	0x0801591c

0800ae5c <my_rtc_set_alarm>:
bool my_rtc_set_alarm ( uint32_t s )
{
 800ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5e:	b0a9      	sub	sp, #164	; 0xa4
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	6078      	str	r0, [r7, #4]

	RTC_DateTypeDef 	d ;
	RTC_TimeTypeDef 	t ;
	RTC_AlarmTypeDef	a ;

	my_rtc_get_dt ( &d , &t ) ;
 800ae64:	2434      	movs	r4, #52	; 0x34
 800ae66:	193a      	adds	r2, r7, r4
 800ae68:	2548      	movs	r5, #72	; 0x48
 800ae6a:	197b      	adds	r3, r7, r5
 800ae6c:	0011      	movs	r1, r2
 800ae6e:	0018      	movs	r0, r3
 800ae70:	f7ff ff9a 	bl	800ada8 <my_rtc_get_dt>
	my_rtc_get_dt_s ( rtc_dt_s ) ; // Bez tej linii będzie błąd funkcji, która zacznie ustawiać alarm na wartość poprzedniego alarmu i wszystko się zawiesi
 800ae74:	2680      	movs	r6, #128	; 0x80
 800ae76:	19bb      	adds	r3, r7, r6
 800ae78:	0018      	movs	r0, r3
 800ae7a:	f7ff ffad 	bl	800add8 <my_rtc_get_dt_s>
	sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800ae7e:	4a36      	ldr	r2, [pc, #216]	; (800af58 <my_rtc_set_alarm+0xfc>)
 800ae80:	4936      	ldr	r1, [pc, #216]	; (800af5c <my_rtc_set_alarm+0x100>)
 800ae82:	234c      	movs	r3, #76	; 0x4c
 800ae84:	18f8      	adds	r0, r7, r3
 800ae86:	19bb      	adds	r3, r7, r6
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	232d      	movs	r3, #45	; 0x2d
 800ae8c:	f002 f9f2 	bl	800d274 <sprintf>
	send_debug_logs ( m ) ;
 800ae90:	234c      	movs	r3, #76	; 0x4c
 800ae92:	18fb      	adds	r3, r7, r3
 800ae94:	0018      	movs	r0, r3
 800ae96:	f7f8 f927 	bl	80030e8 <send_debug_logs>
	uint32_t alarm_ts = my_conv_rtc2timestamp ( &d , &t ) + s ;
 800ae9a:	193a      	adds	r2, r7, r4
 800ae9c:	197b      	adds	r3, r7, r5
 800ae9e:	0011      	movs	r1, r2
 800aea0:	0018      	movs	r0, r3
 800aea2:	f000 f90d 	bl	800b0c0 <my_conv_rtc2timestamp>
 800aea6:	0002      	movs	r2, r0
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	189b      	adds	r3, r3, r2
 800aeac:	2094      	movs	r0, #148	; 0x94
 800aeae:	183a      	adds	r2, r7, r0
 800aeb0:	6013      	str	r3, [r2, #0]
	my_conv_timestamp2rtc ( alarm_ts , &d , &t ) ;
 800aeb2:	193a      	adds	r2, r7, r4
 800aeb4:	1979      	adds	r1, r7, r5
 800aeb6:	1838      	adds	r0, r7, r0
 800aeb8:	6803      	ldr	r3, [r0, #0]
 800aeba:	0018      	movs	r0, r3
 800aebc:	f000 f974 	bl	800b1a8 <my_conv_timestamp2rtc>

	/** Enable the Alarm A		  */
	a.AlarmTime.Hours = t.Hours ;
 800aec0:	193b      	adds	r3, r7, r4
 800aec2:	781a      	ldrb	r2, [r3, #0]
 800aec4:	210c      	movs	r1, #12
 800aec6:	187b      	adds	r3, r7, r1
 800aec8:	701a      	strb	r2, [r3, #0]
	a.AlarmTime.Minutes = t.Minutes ;
 800aeca:	193b      	adds	r3, r7, r4
 800aecc:	785a      	ldrb	r2, [r3, #1]
 800aece:	187b      	adds	r3, r7, r1
 800aed0:	705a      	strb	r2, [r3, #1]
	a.AlarmTime.Seconds = t.Seconds ;
 800aed2:	193b      	adds	r3, r7, r4
 800aed4:	789a      	ldrb	r2, [r3, #2]
 800aed6:	187b      	adds	r3, r7, r1
 800aed8:	709a      	strb	r2, [r3, #2]
	a.AlarmTime.SubSeconds = 0;
 800aeda:	0008      	movs	r0, r1
 800aedc:	183b      	adds	r3, r7, r0
 800aede:	2200      	movs	r2, #0
 800aee0:	605a      	str	r2, [r3, #4]
	a.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 800aee2:	183b      	adds	r3, r7, r0
 800aee4:	2200      	movs	r2, #0
 800aee6:	60da      	str	r2, [r3, #12]
	a.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET ;
 800aee8:	183b      	adds	r3, r7, r0
 800aeea:	2200      	movs	r2, #0
 800aeec:	611a      	str	r2, [r3, #16]
	a.AlarmMask = RTC_ALARMMASK_NONE ;
 800aeee:	183b      	adds	r3, r7, r0
 800aef0:	2200      	movs	r2, #0
 800aef2:	615a      	str	r2, [r3, #20]
	a.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL ;
 800aef4:	183b      	adds	r3, r7, r0
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]
	a.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE ;
 800aefa:	183b      	adds	r3, r7, r0
 800aefc:	2200      	movs	r2, #0
 800aefe:	61da      	str	r2, [r3, #28]
	a.AlarmDateWeekDay = d.Date ;
 800af00:	197b      	adds	r3, r7, r5
 800af02:	7899      	ldrb	r1, [r3, #2]
 800af04:	183b      	adds	r3, r7, r0
 800af06:	2220      	movs	r2, #32
 800af08:	5499      	strb	r1, [r3, r2]
	a.Alarm = RTC_ALARM_A ;
 800af0a:	183b      	adds	r3, r7, r0
 800af0c:	2280      	movs	r2, #128	; 0x80
 800af0e:	0052      	lsls	r2, r2, #1
 800af10:	625a      	str	r2, [r3, #36]	; 0x24
	if ( HAL_RTC_SetAlarm_IT ( &hrtc , &a , RTC_FORMAT_BIN ) == HAL_OK )
 800af12:	1839      	adds	r1, r7, r0
 800af14:	4b12      	ldr	r3, [pc, #72]	; (800af60 <my_rtc_set_alarm+0x104>)
 800af16:	2200      	movs	r2, #0
 800af18:	0018      	movs	r0, r3
 800af1a:	f7fb f943 	bl	80061a4 <HAL_RTC_SetAlarm_IT>
 800af1e:	1e03      	subs	r3, r0, #0
 800af20:	d114      	bne.n	800af4c <my_rtc_set_alarm+0xf0>
	{
		my_conv_dt_2_dts ( &d , &t , rtc_dt_s ) ;
 800af22:	19ba      	adds	r2, r7, r6
 800af24:	1939      	adds	r1, r7, r4
 800af26:	197b      	adds	r3, r7, r5
 800af28:	0018      	movs	r0, r3
 800af2a:	f000 f9ff 	bl	800b32c <my_conv_dt_2_dts>
		sprintf ( m , "%s,%d,%s" , __FILE__ , __LINE__ , rtc_dt_s ) ;
 800af2e:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <my_rtc_set_alarm+0xfc>)
 800af30:	490a      	ldr	r1, [pc, #40]	; (800af5c <my_rtc_set_alarm+0x100>)
 800af32:	244c      	movs	r4, #76	; 0x4c
 800af34:	1938      	adds	r0, r7, r4
 800af36:	19bb      	adds	r3, r7, r6
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	2341      	movs	r3, #65	; 0x41
 800af3c:	f002 f99a 	bl	800d274 <sprintf>
		send_debug_logs ( m ) ;
 800af40:	193b      	adds	r3, r7, r4
 800af42:	0018      	movs	r0, r3
 800af44:	f7f8 f8d0 	bl	80030e8 <send_debug_logs>
		return true ;
 800af48:	2301      	movs	r3, #1
 800af4a:	e000      	b.n	800af4e <my_rtc_set_alarm+0xf2>
	}
	return false ;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	0018      	movs	r0, r3
 800af50:	46bd      	mov	sp, r7
 800af52:	b027      	add	sp, #156	; 0x9c
 800af54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af56:	46c0      	nop			; (mov r8, r8)
 800af58:	0801593c 	.word	0x0801593c
 800af5c:	08015958 	.word	0x08015958
 800af60:	200006f4 	.word	0x200006f4

0800af64 <my_rtc_set_dt_from_nmea_rmc>:

void my_rtc_set_dt_from_nmea_rmc ( const char* m )
{
 800af64:	b5b0      	push	{r4, r5, r7, lr}
 800af66:	b088      	sub	sp, #32
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
	  RTC_TimeTypeDef sTime ;
	  RTC_DateTypeDef sDate ;

	  my_nmea_get_rmc_date_yy ( m , &sDate.Year ) ;
 800af6c:	2508      	movs	r5, #8
 800af6e:	197b      	adds	r3, r7, r5
 800af70:	1cda      	adds	r2, r3, #3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	0011      	movs	r1, r2
 800af76:	0018      	movs	r0, r3
 800af78:	f000 fcae 	bl	800b8d8 <my_nmea_get_rmc_date_yy>
	  my_nmea_get_rmc_date_mm ( m , &sDate.Month ) ;
 800af7c:	197b      	adds	r3, r7, r5
 800af7e:	1c5a      	adds	r2, r3, #1
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0011      	movs	r1, r2
 800af84:	0018      	movs	r0, r3
 800af86:	f000 fce1 	bl	800b94c <my_nmea_get_rmc_date_mm>
	  my_nmea_get_rmc_date_dd ( m , &sDate.Date ) ;
 800af8a:	197b      	adds	r3, r7, r5
 800af8c:	1c9a      	adds	r2, r3, #2
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	0011      	movs	r1, r2
 800af92:	0018      	movs	r0, r3
 800af94:	f000 fd14 	bl	800b9c0 <my_nmea_get_rmc_date_dd>
	  my_nmea_get_rmc_utc_hh ( m , &sTime.Hours ) ;
 800af98:	240c      	movs	r4, #12
 800af9a:	193a      	adds	r2, r7, r4
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	0011      	movs	r1, r2
 800afa0:	0018      	movs	r0, r3
 800afa2:	f000 fd47 	bl	800ba34 <my_nmea_get_rmc_utc_hh>
	  my_nmea_get_rmc_utc_mm ( m , &sTime.Minutes ) ;
 800afa6:	193b      	adds	r3, r7, r4
 800afa8:	1c5a      	adds	r2, r3, #1
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	0011      	movs	r1, r2
 800afae:	0018      	movs	r0, r3
 800afb0:	f000 fd7a 	bl	800baa8 <my_nmea_get_rmc_utc_mm>
	  my_nmea_get_rmc_utc_ss ( m , &sTime.Seconds ) ;
 800afb4:	193b      	adds	r3, r7, r4
 800afb6:	1c9a      	adds	r2, r3, #2
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	0011      	movs	r1, r2
 800afbc:	0018      	movs	r0, r3
 800afbe:	f000 fdad 	bl	800bb1c <my_nmea_get_rmc_utc_ss>
	  my_nmea_get_rmc_utc_sss ( m , &sTime.SubSeconds ) ;
 800afc2:	193b      	adds	r3, r7, r4
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	0011      	movs	r1, r2
 800afca:	0018      	movs	r0, r3
 800afcc:	f000 fde0 	bl	800bb90 <my_nmea_get_rmc_utc_sss>
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800afd0:	193b      	adds	r3, r7, r4
 800afd2:	2200      	movs	r2, #0
 800afd4:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800afd6:	193b      	adds	r3, r7, r4
 800afd8:	2200      	movs	r2, #0
 800afda:	611a      	str	r2, [r3, #16]

	  HAL_RTCEx_EnableBypassShadow ( &hrtc ) ;
 800afdc:	4b0b      	ldr	r3, [pc, #44]	; (800b00c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800afde:	0018      	movs	r0, r3
 800afe0:	f7fb fb4f 	bl	8006682 <HAL_RTCEx_EnableBypassShadow>
	  HAL_RTC_SetTime ( &hrtc , &sTime , RTC_FORMAT_BIN ) ;
 800afe4:	1939      	adds	r1, r7, r4
 800afe6:	4b09      	ldr	r3, [pc, #36]	; (800b00c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800afe8:	2200      	movs	r2, #0
 800afea:	0018      	movs	r0, r3
 800afec:	f7fa fef6 	bl	8005ddc <HAL_RTC_SetTime>
	  HAL_RTC_SetDate ( &hrtc , &sDate , RTC_FORMAT_BIN ) ;
 800aff0:	1979      	adds	r1, r7, r5
 800aff2:	4b06      	ldr	r3, [pc, #24]	; (800b00c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	0018      	movs	r0, r3
 800aff8:	f7fa fff4 	bl	8005fe4 <HAL_RTC_SetDate>
	  HAL_RTCEx_DisableBypassShadow ( &hrtc ) ;
 800affc:	4b03      	ldr	r3, [pc, #12]	; (800b00c <my_rtc_set_dt_from_nmea_rmc+0xa8>)
 800affe:	0018      	movs	r0, r3
 800b000:	f7fb fb73 	bl	80066ea <HAL_RTCEx_DisableBypassShadow>
}
 800b004:	46c0      	nop			; (mov r8, r8)
 800b006:	46bd      	mov	sp, r7
 800b008:	b008      	add	sp, #32
 800b00a:	bdb0      	pop	{r4, r5, r7, pc}
 800b00c:	200006f4 	.word	0x200006f4

0800b010 <my_string2double_conv>:
 */

#include "my_conversions.h"

double my_string2double_conv ( const char* s )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
    double d = strtod ( s , NULL ) ;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2100      	movs	r1, #0
 800b01c:	0018      	movs	r0, r3
 800b01e:	f001 fefb 	bl	800ce18 <strtod>
 800b022:	0002      	movs	r2, r0
 800b024:	000b      	movs	r3, r1
 800b026:	60ba      	str	r2, [r7, #8]
 800b028:	60fb      	str	r3, [r7, #12]
    return d ;
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
}
 800b02e:	0010      	movs	r0, r2
 800b030:	0019      	movs	r1, r3
 800b032:	46bd      	mov	sp, r7
 800b034:	b004      	add	sp, #16
 800b036:	bd80      	pop	{r7, pc}

0800b038 <my_find_char_position>:
    return f ;
}

//Find position in string of n occurance of the comma
uint8_t my_find_char_position ( const char* m , const char c , uint8_t n )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	0008      	movs	r0, r1
 800b042:	0011      	movs	r1, r2
 800b044:	1cfb      	adds	r3, r7, #3
 800b046:	1c02      	adds	r2, r0, #0
 800b048:	701a      	strb	r2, [r3, #0]
 800b04a:	1cbb      	adds	r3, r7, #2
 800b04c:	1c0a      	adds	r2, r1, #0
 800b04e:	701a      	strb	r2, [r3, #0]
	uint8_t i = 0 ;
 800b050:	230f      	movs	r3, #15
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
	uint8_t p = 0 ;
 800b058:	230e      	movs	r3, #14
 800b05a:	18fb      	adds	r3, r7, r3
 800b05c:	2200      	movs	r2, #0
 800b05e:	701a      	strb	r2, [r3, #0]

	while ( m[i] != '\0' )
 800b060:	e01c      	b.n	800b09c <my_find_char_position+0x64>
	{
		if ( m[i] == c )
 800b062:	230f      	movs	r3, #15
 800b064:	18fb      	adds	r3, r7, r3
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	18d3      	adds	r3, r2, r3
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	1cfa      	adds	r2, r7, #3
 800b070:	7812      	ldrb	r2, [r2, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d105      	bne.n	800b082 <my_find_char_position+0x4a>
			p++ ;
 800b076:	210e      	movs	r1, #14
 800b078:	187b      	adds	r3, r7, r1
 800b07a:	781a      	ldrb	r2, [r3, #0]
 800b07c:	187b      	adds	r3, r7, r1
 800b07e:	3201      	adds	r2, #1
 800b080:	701a      	strb	r2, [r3, #0]
		if ( p == n )
 800b082:	230e      	movs	r3, #14
 800b084:	18fa      	adds	r2, r7, r3
 800b086:	1cbb      	adds	r3, r7, #2
 800b088:	7812      	ldrb	r2, [r2, #0]
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d00e      	beq.n	800b0ae <my_find_char_position+0x76>
			break ;
		i++ ;
 800b090:	210f      	movs	r1, #15
 800b092:	187b      	adds	r3, r7, r1
 800b094:	781a      	ldrb	r2, [r3, #0]
 800b096:	187b      	adds	r3, r7, r1
 800b098:	3201      	adds	r2, #1
 800b09a:	701a      	strb	r2, [r3, #0]
	while ( m[i] != '\0' )
 800b09c:	230f      	movs	r3, #15
 800b09e:	18fb      	adds	r3, r7, r3
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	18d3      	adds	r3, r2, r3
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1da      	bne.n	800b062 <my_find_char_position+0x2a>
 800b0ac:	e000      	b.n	800b0b0 <my_find_char_position+0x78>
			break ;
 800b0ae:	46c0      	nop			; (mov r8, r8)
	}
	return i ;
 800b0b0:	230f      	movs	r3, #15
 800b0b2:	18fb      	adds	r3, r7, r3
 800b0b4:	781b      	ldrb	r3, [r3, #0]
}
 800b0b6:	0018      	movs	r0, r3
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	b004      	add	sp, #16
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <my_conv_rtc2timestamp>:

// Function converting RTC date and time to Unix timestamp (ts): number of seconds after the Epoch (1970.01.01).
uint32_t my_conv_rtc2timestamp ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
    // Number of days in months (considering leap years).
    static const uint8_t monthDays[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;

    // Conversion of years into days.
    uint32_t years = d->Year + 2000;  // RTC starts from 20
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	78db      	ldrb	r3, [r3, #3]
 800b0ce:	22fa      	movs	r2, #250	; 0xfa
 800b0d0:	00d2      	lsls	r2, r2, #3
 800b0d2:	4694      	mov	ip, r2
 800b0d4:	4463      	add	r3, ip
 800b0d6:	60fb      	str	r3, [r7, #12]
    uint32_t days = ( years - 1970 ) * 365 + ( ( years - 1969 ) / 4 ) ;  // Days for years and leap years.
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	0013      	movs	r3, r2
 800b0dc:	00db      	lsls	r3, r3, #3
 800b0de:	189b      	adds	r3, r3, r2
 800b0e0:	00db      	lsls	r3, r3, #3
 800b0e2:	189b      	adds	r3, r3, r2
 800b0e4:	009a      	lsls	r2, r3, #2
 800b0e6:	189a      	adds	r2, r3, r2
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	492c      	ldr	r1, [pc, #176]	; (800b19c <my_conv_rtc2timestamp+0xdc>)
 800b0ec:	468c      	mov	ip, r1
 800b0ee:	4463      	add	r3, ip
 800b0f0:	089b      	lsrs	r3, r3, #2
 800b0f2:	18d3      	adds	r3, r2, r3
 800b0f4:	4a2a      	ldr	r2, [pc, #168]	; (800b1a0 <my_conv_rtc2timestamp+0xe0>)
 800b0f6:	4694      	mov	ip, r2
 800b0f8:	4463      	add	r3, ip
 800b0fa:	617b      	str	r3, [r7, #20]
    // Conversion of months into days.
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	613b      	str	r3, [r7, #16]
 800b100:	e00a      	b.n	800b118 <my_conv_rtc2timestamp+0x58>
    {
        days += monthDays[i] ;
 800b102:	4a28      	ldr	r2, [pc, #160]	; (800b1a4 <my_conv_rtc2timestamp+0xe4>)
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	18d3      	adds	r3, r2, r3
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	001a      	movs	r2, r3
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	189b      	adds	r3, r3, r2
 800b110:	617b      	str	r3, [r7, #20]
    for ( int i = 0 ; i < d->Month - 1 ; i++ )
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	3301      	adds	r3, #1
 800b116:	613b      	str	r3, [r7, #16]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	3b01      	subs	r3, #1
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	429a      	cmp	r2, r3
 800b122:	dbee      	blt.n	800b102 <my_conv_rtc2timestamp+0x42>
    }
    if ( d->Month > 2 && my_conv_is_leap_year ( years ) )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	785b      	ldrb	r3, [r3, #1]
 800b128:	2b02      	cmp	r3, #2
 800b12a:	d908      	bls.n	800b13e <my_conv_rtc2timestamp+0x7e>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	0018      	movs	r0, r3
 800b130:	f000 f8de 	bl	800b2f0 <my_conv_is_leap_year>
 800b134:	1e03      	subs	r3, r0, #0
 800b136:	d002      	beq.n	800b13e <my_conv_rtc2timestamp+0x7e>
    {
        days++ ;  // Add one day in a leap year.
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3301      	adds	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
    }
    // add the days of the month
    days += d->Date - 1 ;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	789b      	ldrb	r3, [r3, #2]
 800b142:	001a      	movs	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	18d3      	adds	r3, r2, r3
 800b148:	3b01      	subs	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
    // Convert days into seconds and add hours, minutes, seconds.
    uint32_t ts = days * 86400 + t->Hours * 3600 + t->Minutes * 60 + t->Seconds ;
 800b14c:	697a      	ldr	r2, [r7, #20]
 800b14e:	0013      	movs	r3, r2
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	189b      	adds	r3, r3, r2
 800b154:	011a      	lsls	r2, r3, #4
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	0113      	lsls	r3, r2, #4
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	01db      	lsls	r3, r3, #7
 800b15e:	0019      	movs	r1, r3
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	001a      	movs	r2, r3
 800b166:	0013      	movs	r3, r2
 800b168:	011b      	lsls	r3, r3, #4
 800b16a:	1a9b      	subs	r3, r3, r2
 800b16c:	011a      	lsls	r2, r3, #4
 800b16e:	1ad2      	subs	r2, r2, r3
 800b170:	0113      	lsls	r3, r2, #4
 800b172:	001a      	movs	r2, r3
 800b174:	0013      	movs	r3, r2
 800b176:	18ca      	adds	r2, r1, r3
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	785b      	ldrb	r3, [r3, #1]
 800b17c:	0019      	movs	r1, r3
 800b17e:	000b      	movs	r3, r1
 800b180:	011b      	lsls	r3, r3, #4
 800b182:	1a5b      	subs	r3, r3, r1
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	18d3      	adds	r3, r2, r3
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	7892      	ldrb	r2, [r2, #2]
 800b18c:	189b      	adds	r3, r3, r2
 800b18e:	60bb      	str	r3, [r7, #8]

    return ts ;
 800b190:	68bb      	ldr	r3, [r7, #8]
}
 800b192:	0018      	movs	r0, r3
 800b194:	46bd      	mov	sp, r7
 800b196:	b006      	add	sp, #24
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	46c0      	nop			; (mov r8, r8)
 800b19c:	fffff84f 	.word	0xfffff84f
 800b1a0:	fff50736 	.word	0xfff50736
 800b1a4:	08015a9c 	.word	0x08015a9c

0800b1a8 <my_conv_timestamp2rtc>:

// Function converting Unix timestamp (ts) to RTC date and time
void my_conv_timestamp2rtc ( uint32_t ts , RTC_DateTypeDef* d , RTC_TimeTypeDef* t )
{
 800b1a8:	b590      	push	{r4, r7, lr}
 800b1aa:	b08b      	sub	sp, #44	; 0x2c
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
	static const uint16_t daysInMonth[12] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ;
	uint32_t seconds = ts % 60 ;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	213c      	movs	r1, #60	; 0x3c
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	f7f5 f845 	bl	8000248 <__aeabi_uidivmod>
 800b1be:	000b      	movs	r3, r1
 800b1c0:	61bb      	str	r3, [r7, #24]
	uint32_t minutes = ( ts / 60 ) % 60 ;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	213c      	movs	r1, #60	; 0x3c
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	f7f4 ffb8 	bl	800013c <__udivsi3>
 800b1cc:	0003      	movs	r3, r0
 800b1ce:	213c      	movs	r1, #60	; 0x3c
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	f7f5 f839 	bl	8000248 <__aeabi_uidivmod>
 800b1d6:	000b      	movs	r3, r1
 800b1d8:	617b      	str	r3, [r7, #20]
	uint32_t hours = ( ts / 3600 ) % 24 ;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	22e1      	movs	r2, #225	; 0xe1
 800b1de:	0111      	lsls	r1, r2, #4
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f7f4 ffab 	bl	800013c <__udivsi3>
 800b1e6:	0003      	movs	r3, r0
 800b1e8:	2118      	movs	r1, #24
 800b1ea:	0018      	movs	r0, r3
 800b1ec:	f7f5 f82c 	bl	8000248 <__aeabi_uidivmod>
 800b1f0:	000b      	movs	r3, r1
 800b1f2:	613b      	str	r3, [r7, #16]

	// Counting days since Epoch
	uint32_t days = ts / 86400 ;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	493b      	ldr	r1, [pc, #236]	; (800b2e4 <my_conv_timestamp2rtc+0x13c>)
 800b1f8:	0018      	movs	r0, r3
 800b1fa:	f7f4 ff9f 	bl	800013c <__udivsi3>
 800b1fe:	0003      	movs	r3, r0
 800b200:	627b      	str	r3, [r7, #36]	; 0x24

	// Calculating the year
	uint32_t year = 1970 ;
 800b202:	4b39      	ldr	r3, [pc, #228]	; (800b2e8 <my_conv_timestamp2rtc+0x140>)
 800b204:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b206:	e00d      	b.n	800b224 <my_conv_timestamp2rtc+0x7c>
	{
		days -= 365 + my_conv_is_leap_year ( year ) ;
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	0018      	movs	r0, r3
 800b20c:	f000 f870 	bl	800b2f0 <my_conv_is_leap_year>
 800b210:	0003      	movs	r3, r0
 800b212:	336e      	adds	r3, #110	; 0x6e
 800b214:	33ff      	adds	r3, #255	; 0xff
 800b216:	001a      	movs	r2, r3
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	1a9b      	subs	r3, r3, r2
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
		year++ ;
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	3301      	adds	r3, #1
 800b222:	623b      	str	r3, [r7, #32]
	while ( days >= 365 + my_conv_is_leap_year ( year ) )
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	0018      	movs	r0, r3
 800b228:	f000 f862 	bl	800b2f0 <my_conv_is_leap_year>
 800b22c:	0003      	movs	r3, r0
 800b22e:	336e      	adds	r3, #110	; 0x6e
 800b230:	33ff      	adds	r3, #255	; 0xff
 800b232:	001a      	movs	r2, r3
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	4293      	cmp	r3, r2
 800b238:	d2e6      	bcs.n	800b208 <my_conv_timestamp2rtc+0x60>
	}

	// Calculating the month
	uint32_t month = 0 ;
 800b23a:	2300      	movs	r3, #0
 800b23c:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b23e:	e018      	b.n	800b272 <my_conv_timestamp2rtc+0xca>
		days -= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ;
 800b240:	4b2a      	ldr	r3, [pc, #168]	; (800b2ec <my_conv_timestamp2rtc+0x144>)
 800b242:	69fa      	ldr	r2, [r7, #28]
 800b244:	0052      	lsls	r2, r2, #1
 800b246:	5ad3      	ldrh	r3, [r2, r3]
 800b248:	001c      	movs	r4, r3
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d107      	bne.n	800b260 <my_conv_timestamp2rtc+0xb8>
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	0018      	movs	r0, r3
 800b254:	f000 f84c 	bl	800b2f0 <my_conv_is_leap_year>
 800b258:	1e03      	subs	r3, r0, #0
 800b25a:	d001      	beq.n	800b260 <my_conv_timestamp2rtc+0xb8>
 800b25c:	2301      	movs	r3, #1
 800b25e:	e000      	b.n	800b262 <my_conv_timestamp2rtc+0xba>
 800b260:	2300      	movs	r3, #0
 800b262:	191b      	adds	r3, r3, r4
 800b264:	001a      	movs	r2, r3
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	1a9b      	subs	r3, r3, r2
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
		month++ ;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	3301      	adds	r3, #1
 800b270:	61fb      	str	r3, [r7, #28]
	while ( days >= daysInMonth[month] + ( month == 1 && my_conv_is_leap_year ( year ) ) ) {
 800b272:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <my_conv_timestamp2rtc+0x144>)
 800b274:	69fa      	ldr	r2, [r7, #28]
 800b276:	0052      	lsls	r2, r2, #1
 800b278:	5ad3      	ldrh	r3, [r2, r3]
 800b27a:	001c      	movs	r4, r3
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d107      	bne.n	800b292 <my_conv_timestamp2rtc+0xea>
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	0018      	movs	r0, r3
 800b286:	f000 f833 	bl	800b2f0 <my_conv_is_leap_year>
 800b28a:	1e03      	subs	r3, r0, #0
 800b28c:	d001      	beq.n	800b292 <my_conv_timestamp2rtc+0xea>
 800b28e:	2301      	movs	r3, #1
 800b290:	e000      	b.n	800b294 <my_conv_timestamp2rtc+0xec>
 800b292:	2300      	movs	r3, #0
 800b294:	191b      	adds	r3, r3, r4
 800b296:	001a      	movs	r2, r3
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d2d0      	bcs.n	800b240 <my_conv_timestamp2rtc+0x98>
	}

	// Setting date and time in RTC structures
	d->Year = year - 2000 ; // RTC_DateTypeDef.Year expects years since 2000
 800b29e:	6a3b      	ldr	r3, [r7, #32]
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	3330      	adds	r3, #48	; 0x30
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	70da      	strb	r2, [r3, #3]
	d->Month = month + 1 ;  // +1 because month is counted from 0
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	705a      	strb	r2, [r3, #1]
	d->Date = days + 1 ;    // +1 because days are counted from 0
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	709a      	strb	r2, [r3, #2]
	t->Hours = hours ;
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	b2da      	uxtb	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	701a      	strb	r2, [r3, #0]
	t->Minutes = minutes ;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	705a      	strb	r2, [r3, #1]
	t->Seconds = seconds ;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	b2da      	uxtb	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	709a      	strb	r2, [r3, #2]
}
 800b2da:	46c0      	nop			; (mov r8, r8)
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	b00b      	add	sp, #44	; 0x2c
 800b2e0:	bd90      	pop	{r4, r7, pc}
 800b2e2:	46c0      	nop			; (mov r8, r8)
 800b2e4:	00015180 	.word	0x00015180
 800b2e8:	000007b2 	.word	0x000007b2
 800b2ec:	08015aa8 	.word	0x08015aa8

0800b2f0 <my_conv_is_leap_year>:

// Function checking for leap years
int my_conv_is_leap_year ( int yyyy )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
    return ( ( yyyy % 4 == 0 ) && ( yyyy % 100 != 0 ) ) || ( yyyy % 400 == 0 ) ;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	d106      	bne.n	800b30e <my_conv_is_leap_year+0x1e>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2164      	movs	r1, #100	; 0x64
 800b304:	0018      	movs	r0, r3
 800b306:	f7f5 f889 	bl	800041c <__aeabi_idivmod>
 800b30a:	1e0b      	subs	r3, r1, #0
 800b30c:	d107      	bne.n	800b31e <my_conv_is_leap_year+0x2e>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	22c8      	movs	r2, #200	; 0xc8
 800b312:	0051      	lsls	r1, r2, #1
 800b314:	0018      	movs	r0, r3
 800b316:	f7f5 f881 	bl	800041c <__aeabi_idivmod>
 800b31a:	1e0b      	subs	r3, r1, #0
 800b31c:	d101      	bne.n	800b322 <my_conv_is_leap_year+0x32>
 800b31e:	2301      	movs	r3, #1
 800b320:	e000      	b.n	800b324 <my_conv_is_leap_year+0x34>
 800b322:	2300      	movs	r3, #0
}
 800b324:	0018      	movs	r0, r3
 800b326:	46bd      	mov	sp, r7
 800b328:	b002      	add	sp, #8
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <my_conv_dt_2_dts>:

void my_conv_dt_2_dts ( RTC_DateTypeDef* d , RTC_TimeTypeDef* t , char* dt_s )
{
 800b32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b32e:	b089      	sub	sp, #36	; 0x24
 800b330:	af04      	add	r7, sp, #16
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
	sprintf ( dt_s , "%4d.%02d.%02d %02d:%02d:%02d" , 2000 + d->Year , d->Month , d->Date , t->Hours , t->Minutes , t->Seconds ) ;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	78db      	ldrb	r3, [r3, #3]
 800b33c:	22fa      	movs	r2, #250	; 0xfa
 800b33e:	00d2      	lsls	r2, r2, #3
 800b340:	189a      	adds	r2, r3, r2
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	469c      	mov	ip, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	789b      	ldrb	r3, [r3, #2]
 800b34c:	001c      	movs	r4, r3
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	001d      	movs	r5, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	001e      	movs	r6, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	789b      	ldrb	r3, [r3, #2]
 800b35e:	4906      	ldr	r1, [pc, #24]	; (800b378 <my_conv_dt_2_dts+0x4c>)
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	9602      	str	r6, [sp, #8]
 800b366:	9501      	str	r5, [sp, #4]
 800b368:	9400      	str	r4, [sp, #0]
 800b36a:	4663      	mov	r3, ip
 800b36c:	f001 ff82 	bl	800d274 <sprintf>
}
 800b370:	46c0      	nop			; (mov r8, r8)
 800b372:	46bd      	mov	sp, r7
 800b374:	b005      	add	sp, #20
 800b376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b378:	08015964 	.word	0x08015964

0800b37c <my_conv_string_2_uint32_t>:

uint32_t my_conv_string_2_uint32_t ( const char* c )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	char* end_p ;
	return (uint32_t) strtoul ( c , &end_p , 10 ) ;
 800b384:	230c      	movs	r3, #12
 800b386:	18f9      	adds	r1, r7, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	220a      	movs	r2, #10
 800b38c:	0018      	movs	r0, r3
 800b38e:	f001 fe6d 	bl	800d06c <strtoul>
 800b392:	0003      	movs	r3, r0
}
 800b394:	0018      	movs	r0, r3
 800b396:	46bd      	mov	sp, r7
 800b398:	b004      	add	sp, #16
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <my_nmea_message>:
#include <inttypes.h>
#include "my_nmea.h"


int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	2b24      	cmp	r3, #36	; 0x24
 800b3ae:	d117      	bne.n	800b3e0 <my_nmea_message+0x44>
    {
        *i = 0 ;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	b2d1      	uxtb	r1, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	7011      	strb	r1, [r2, #0]
 800b3c2:	001a      	movs	r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	7812      	ldrb	r2, [r2, #0]
 800b3cc:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	001a      	movs	r2, r3
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]
        return 0 ;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e045      	b.n	800b46c <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b1f      	cmp	r3, #31
 800b3e6:	d907      	bls.n	800b3f8 <my_nmea_message+0x5c>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b7e      	cmp	r3, #126	; 0x7e
 800b3ee:	d803      	bhi.n	800b3f8 <my_nmea_message+0x5c>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d103      	bne.n	800b400 <my_nmea_message+0x64>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	2b0d      	cmp	r3, #13
 800b3fe:	d114      	bne.n	800b42a <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	b2d1      	uxtb	r1, r2
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	7011      	strb	r1, [r2, #0]
 800b40c:	001a      	movs	r2, r3
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	189b      	adds	r3, r3, r2
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	7812      	ldrb	r2, [r2, #0]
 800b416:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	001a      	movs	r2, r3
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	189b      	adds	r3, r3, r2
 800b422:	2200      	movs	r2, #0
 800b424:	701a      	strb	r2, [r3, #0]
        return 1 ;
 800b426:	2301      	movs	r3, #1
 800b428:	e020      	b.n	800b46c <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b0a      	cmp	r3, #10
 800b430:	d11a      	bne.n	800b468 <my_nmea_message+0xcc>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d916      	bls.n	800b468 <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	3b01      	subs	r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	001a      	movs	r2, r3
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	189b      	adds	r3, r3, r2
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b0d      	cmp	r3, #13
 800b454:	d108      	bne.n	800b468 <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	001a      	movs	r2, r3
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	189b      	adds	r3, r3, r2
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800b464:	2302      	movs	r3, #2
 800b466:	e001      	b.n	800b46c <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800b468:	2301      	movs	r3, #1
 800b46a:	425b      	negs	r3, r3
}
 800b46c:	0018      	movs	r0, r3
 800b46e:	46bd      	mov	sp, r7
 800b470:	b004      	add	sp, #16
 800b472:	bd80      	pop	{r7, pc}

0800b474 <get_my_nmea_gngsa_fixed_mode_s>:

const char get_my_nmea_gngsa_fixed_mode_s ( const char* m )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b082      	sub	sp, #8
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
	return m[9] ;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3309      	adds	r3, #9
 800b480:	781b      	ldrb	r3, [r3, #0]
}
 800b482:	0018      	movs	r0, r3
 800b484:	46bd      	mov	sp, r7
 800b486:	b002      	add	sp, #8
 800b488:	bd80      	pop	{r7, pc}

0800b48a <get_my_nmea_gngsa_pdop_d>:

double get_my_nmea_gngsa_pdop_d ( const char* m )
{
 800b48a:	b5b0      	push	{r4, r5, r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
	uint8_t pdop_position = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION ) + 1 ;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	220f      	movs	r2, #15
 800b496:	212c      	movs	r1, #44	; 0x2c
 800b498:	0018      	movs	r0, r3
 800b49a:	f7ff fdcd 	bl	800b038 <my_find_char_position>
 800b49e:	0003      	movs	r3, r0
 800b4a0:	001a      	movs	r2, r3
 800b4a2:	2517      	movs	r5, #23
 800b4a4:	197b      	adds	r3, r7, r5
 800b4a6:	3201      	adds	r2, #1
 800b4a8:	701a      	strb	r2, [r3, #0]
	uint8_t pdop_length = my_find_char_position ( m , NMEA_DELIMETER , GSA_PDOP_POSITION + 1 ) - pdop_position ;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2210      	movs	r2, #16
 800b4ae:	212c      	movs	r1, #44	; 0x2c
 800b4b0:	0018      	movs	r0, r3
 800b4b2:	f7ff fdc1 	bl	800b038 <my_find_char_position>
 800b4b6:	0003      	movs	r3, r0
 800b4b8:	0019      	movs	r1, r3
 800b4ba:	2416      	movs	r4, #22
 800b4bc:	193b      	adds	r3, r7, r4
 800b4be:	197a      	adds	r2, r7, r5
 800b4c0:	7812      	ldrb	r2, [r2, #0]
 800b4c2:	1a8a      	subs	r2, r1, r2
 800b4c4:	701a      	strb	r2, [r3, #0]

	char* pdop_s = (char*) malloc ( ( pdop_length +1 ) * sizeof ( char ) ) ;
 800b4c6:	193b      	adds	r3, r7, r4
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	0018      	movs	r0, r3
 800b4ce:	f000 fc41 	bl	800bd54 <malloc>
 800b4d2:	0003      	movs	r3, r0
 800b4d4:	613b      	str	r3, [r7, #16]
	strncpy ( pdop_s , m + pdop_position , pdop_length ) ; // Kopiowanie fragmentu łańcucha
 800b4d6:	197b      	adds	r3, r7, r5
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	18d1      	adds	r1, r2, r3
 800b4de:	193b      	adds	r3, r7, r4
 800b4e0:	781a      	ldrb	r2, [r3, #0]
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	0018      	movs	r0, r3
 800b4e6:	f001 ff82 	bl	800d3ee <strncpy>
	pdop_s[pdop_length] = '\0';
 800b4ea:	193b      	adds	r3, r7, r4
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	18d3      	adds	r3, r2, r3
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	701a      	strb	r2, [r3, #0]
	double pdop = my_string2double_conv ( pdop_s ) ;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	f7ff fd89 	bl	800b010 <my_string2double_conv>
 800b4fe:	0002      	movs	r2, r0
 800b500:	000b      	movs	r3, r1
 800b502:	60ba      	str	r2, [r7, #8]
 800b504:	60fb      	str	r3, [r7, #12]
	free ( pdop_s ) ;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	0018      	movs	r0, r3
 800b50a:	f000 fc2d 	bl	800bd68 <free>
	return pdop ; // przed zwróceniem zaokrąglij do 2 miejsc po przecinku
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	68fb      	ldr	r3, [r7, #12]
}
 800b512:	0010      	movs	r0, r2
 800b514:	0019      	movs	r1, r3
 800b516:	46bd      	mov	sp, r7
 800b518:	b006      	add	sp, #24
 800b51a:	bdb0      	pop	{r4, r5, r7, pc}

0800b51c <is_my_nmea_checksum_ok>:


bool is_my_nmea_checksum_ok ( const char* s )
{
 800b51c:	b590      	push	{r4, r7, lr}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
    uint8_t cs = 0 ;
 800b524:	230f      	movs	r3, #15
 800b526:	18fb      	adds	r3, r7, r3
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 1 ; // Start from index 1 to skip the '$' character
 800b52c:	230e      	movs	r3, #14
 800b52e:	18fb      	adds	r3, r7, r3
 800b530:	2201      	movs	r2, #1
 800b532:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b534:	e00f      	b.n	800b556 <is_my_nmea_checksum_ok+0x3a>
        cs ^= s[i++] ;
 800b536:	220e      	movs	r2, #14
 800b538:	18bb      	adds	r3, r7, r2
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	18ba      	adds	r2, r7, r2
 800b53e:	1c59      	adds	r1, r3, #1
 800b540:	7011      	strb	r1, [r2, #0]
 800b542:	001a      	movs	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	189b      	adds	r3, r3, r2
 800b548:	7819      	ldrb	r1, [r3, #0]
 800b54a:	220f      	movs	r2, #15
 800b54c:	18bb      	adds	r3, r7, r2
 800b54e:	18ba      	adds	r2, r7, r2
 800b550:	7812      	ldrb	r2, [r2, #0]
 800b552:	404a      	eors	r2, r1
 800b554:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' && i != 0 )
 800b556:	210e      	movs	r1, #14
 800b558:	187b      	adds	r3, r7, r1
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	18d3      	adds	r3, r2, r3
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	2b2a      	cmp	r3, #42	; 0x2a
 800b564:	d00a      	beq.n	800b57c <is_my_nmea_checksum_ok+0x60>
 800b566:	187b      	adds	r3, r7, r1
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	18d3      	adds	r3, r2, r3
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <is_my_nmea_checksum_ok+0x60>
 800b574:	187b      	adds	r3, r7, r1
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1dc      	bne.n	800b536 <is_my_nmea_checksum_ok+0x1a>
    //uint8_t* b = &s[++i] ;
    //uint8_t* c = strtol ( b , NULL, 16 ) ;
    return ( cs == strtol ( (char*) &s[++i] , NULL, 16 ) ) ? true : false ;
 800b57c:	230f      	movs	r3, #15
 800b57e:	18fb      	adds	r3, r7, r3
 800b580:	781c      	ldrb	r4, [r3, #0]
 800b582:	210e      	movs	r1, #14
 800b584:	187b      	adds	r3, r7, r1
 800b586:	187a      	adds	r2, r7, r1
 800b588:	7812      	ldrb	r2, [r2, #0]
 800b58a:	3201      	adds	r2, #1
 800b58c:	701a      	strb	r2, [r3, #0]
 800b58e:	187b      	adds	r3, r7, r1
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	18d3      	adds	r3, r2, r3
 800b596:	2210      	movs	r2, #16
 800b598:	2100      	movs	r1, #0
 800b59a:	0018      	movs	r0, r3
 800b59c:	f001 fcd4 	bl	800cf48 <strtol>
 800b5a0:	0003      	movs	r3, r0
 800b5a2:	1ae3      	subs	r3, r4, r3
 800b5a4:	425a      	negs	r2, r3
 800b5a6:	4153      	adcs	r3, r2
 800b5a8:	b2db      	uxtb	r3, r3
}
 800b5aa:	0018      	movs	r0, r3
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	b005      	add	sp, #20
 800b5b0:	bd90      	pop	{r4, r7, pc}
	...

0800b5b4 <nmea2decimal>:
double nmea2decimal ( const char *coord , char dir )
{
 800b5b4:	b5b0      	push	{r4, r5, r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	000a      	movs	r2, r1
 800b5be:	1cfb      	adds	r3, r7, #3
 800b5c0:	701a      	strb	r2, [r3, #0]
    double deg , min ;
    sscanf ( coord , "%lf" , &deg ) ;
 800b5c2:	2308      	movs	r3, #8
 800b5c4:	18fa      	adds	r2, r7, r3
 800b5c6:	492f      	ldr	r1, [pc, #188]	; (800b684 <nmea2decimal+0xd0>)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f001 fe72 	bl	800d2b4 <sscanf>
    min = deg / 100 ;
 800b5d0:	68b8      	ldr	r0, [r7, #8]
 800b5d2:	68f9      	ldr	r1, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4b2c      	ldr	r3, [pc, #176]	; (800b688 <nmea2decimal+0xd4>)
 800b5d8:	f7f5 fc4e 	bl	8000e78 <__aeabi_ddiv>
 800b5dc:	0002      	movs	r2, r0
 800b5de:	000b      	movs	r3, r1
 800b5e0:	613a      	str	r2, [r7, #16]
 800b5e2:	617b      	str	r3, [r7, #20]
    deg = (int) min ;
 800b5e4:	6938      	ldr	r0, [r7, #16]
 800b5e6:	6979      	ldr	r1, [r7, #20]
 800b5e8:	f7f6 fea2 	bl	8002330 <__aeabi_d2iz>
 800b5ec:	0003      	movs	r3, r0
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	f7f6 fed4 	bl	800239c <__aeabi_i2d>
 800b5f4:	0002      	movs	r2, r0
 800b5f6:	000b      	movs	r3, r1
 800b5f8:	60ba      	str	r2, [r7, #8]
 800b5fa:	60fb      	str	r3, [r7, #12]
    min = ( min - deg ) * 10 ;
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	6938      	ldr	r0, [r7, #16]
 800b602:	6979      	ldr	r1, [r7, #20]
 800b604:	f7f6 faf4 	bl	8001bf0 <__aeabi_dsub>
 800b608:	0002      	movs	r2, r0
 800b60a:	000b      	movs	r3, r1
 800b60c:	0010      	movs	r0, r2
 800b60e:	0019      	movs	r1, r3
 800b610:	2200      	movs	r2, #0
 800b612:	4b1e      	ldr	r3, [pc, #120]	; (800b68c <nmea2decimal+0xd8>)
 800b614:	f7f6 f82a 	bl	800166c <__aeabi_dmul>
 800b618:	0002      	movs	r2, r0
 800b61a:	000b      	movs	r3, r1
 800b61c:	613a      	str	r2, [r7, #16]
 800b61e:	617b      	str	r3, [r7, #20]
    min = min / 6 ;
 800b620:	2200      	movs	r2, #0
 800b622:	4b1b      	ldr	r3, [pc, #108]	; (800b690 <nmea2decimal+0xdc>)
 800b624:	6938      	ldr	r0, [r7, #16]
 800b626:	6979      	ldr	r1, [r7, #20]
 800b628:	f7f5 fc26 	bl	8000e78 <__aeabi_ddiv>
 800b62c:	0002      	movs	r2, r0
 800b62e:	000b      	movs	r3, r1
 800b630:	613a      	str	r2, [r7, #16]
 800b632:	617b      	str	r3, [r7, #20]
    //double c = deg + min ;
    if ( dir == 'S' || dir == 'W' )
 800b634:	1cfb      	adds	r3, r7, #3
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	2b53      	cmp	r3, #83	; 0x53
 800b63a:	d003      	beq.n	800b644 <nmea2decimal+0x90>
 800b63c:	1cfb      	adds	r3, r7, #3
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b57      	cmp	r3, #87	; 0x57
 800b642:	d10e      	bne.n	800b662 <nmea2decimal+0xae>
    	return ( deg + min ) * -1 ;
 800b644:	68b8      	ldr	r0, [r7, #8]
 800b646:	68f9      	ldr	r1, [r7, #12]
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	f7f5 f8b4 	bl	80007b8 <__aeabi_dadd>
 800b650:	0002      	movs	r2, r0
 800b652:	000b      	movs	r3, r1
 800b654:	0011      	movs	r1, r2
 800b656:	000c      	movs	r4, r1
 800b658:	2180      	movs	r1, #128	; 0x80
 800b65a:	0609      	lsls	r1, r1, #24
 800b65c:	4059      	eors	r1, r3
 800b65e:	000d      	movs	r5, r1
 800b660:	e009      	b.n	800b676 <nmea2decimal+0xc2>
    else
    	return deg + min ;
 800b662:	68b8      	ldr	r0, [r7, #8]
 800b664:	68f9      	ldr	r1, [r7, #12]
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f7f5 f8a5 	bl	80007b8 <__aeabi_dadd>
 800b66e:	0002      	movs	r2, r0
 800b670:	000b      	movs	r3, r1
 800b672:	0014      	movs	r4, r2
 800b674:	001d      	movs	r5, r3
}
 800b676:	0022      	movs	r2, r4
 800b678:	002b      	movs	r3, r5
 800b67a:	0010      	movs	r0, r2
 800b67c:	0019      	movs	r1, r3
 800b67e:	46bd      	mov	sp, r7
 800b680:	b006      	add	sp, #24
 800b682:	bdb0      	pop	{r4, r5, r7, pc}
 800b684:	08015984 	.word	0x08015984
 800b688:	40590000 	.word	0x40590000
 800b68c:	40240000 	.word	0x40240000
 800b690:	40180000 	.word	0x40180000

0800b694 <my_nmea_get_gngll_coordinates>:

void my_nmea_get_gngll_coordinates ( const char* m , fix_astro* fix3d )
{
 800b694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b696:	b08d      	sub	sp, #52	; 0x34
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
	char direction ;

	// UTC part

	// Latitude part
	uint8_t coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION ) + 1 ;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	212c      	movs	r1, #44	; 0x2c
 800b6a4:	0018      	movs	r0, r3
 800b6a6:	f7ff fcc7 	bl	800b038 <my_find_char_position>
 800b6aa:	0003      	movs	r3, r0
 800b6ac:	001a      	movs	r2, r3
 800b6ae:	252f      	movs	r5, #47	; 0x2f
 800b6b0:	197b      	adds	r3, r7, r5
 800b6b2:	3201      	adds	r2, #1
 800b6b4:	701a      	strb	r2, [r3, #0]
	uint8_t coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 1 ) - coordinate_position ;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	212c      	movs	r1, #44	; 0x2c
 800b6bc:	0018      	movs	r0, r3
 800b6be:	f7ff fcbb 	bl	800b038 <my_find_char_position>
 800b6c2:	0003      	movs	r3, r0
 800b6c4:	0019      	movs	r1, r3
 800b6c6:	242e      	movs	r4, #46	; 0x2e
 800b6c8:	193b      	adds	r3, r7, r4
 800b6ca:	197a      	adds	r2, r7, r5
 800b6cc:	7812      	ldrb	r2, [r2, #0]
 800b6ce:	1a8a      	subs	r2, r1, r2
 800b6d0:	701a      	strb	r2, [r3, #0]

	char* latitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b6d2:	193b      	adds	r3, r7, r4
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 fb3b 	bl	800bd54 <malloc>
 800b6de:	0003      	movs	r3, r0
 800b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
	strncpy ( latitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b6e2:	197b      	adds	r3, r7, r5
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	18d1      	adds	r1, r2, r3
 800b6ea:	193b      	adds	r3, r7, r4
 800b6ec:	781a      	ldrb	r2, [r3, #0]
 800b6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f0:	0018      	movs	r0, r3
 800b6f2:	f001 fe7c 	bl	800d3ee <strncpy>
	latitude_s_temp[coordinate_length] = '\0';
 800b6f6:	193b      	adds	r3, r7, r4
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6fc:	18d3      	adds	r3, r2, r3
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b702:	197b      	adds	r3, r7, r5
 800b704:	781a      	ldrb	r2, [r3, #0]
 800b706:	193b      	adds	r3, r7, r4
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	18d3      	adds	r3, r2, r3
 800b70c:	3301      	adds	r3, #1
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	18d2      	adds	r2, r2, r3
 800b712:	2627      	movs	r6, #39	; 0x27
 800b714:	19bb      	adds	r3, r7, r6
 800b716:	7812      	ldrb	r2, [r2, #0]
 800b718:	701a      	strb	r2, [r3, #0]
	double latitude_d = nmea2decimal ( latitude_s_temp , direction ) ;
 800b71a:	19bb      	adds	r3, r7, r6
 800b71c:	781a      	ldrb	r2, [r3, #0]
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	0011      	movs	r1, r2
 800b722:	0018      	movs	r0, r3
 800b724:	f7ff ff46 	bl	800b5b4 <nmea2decimal>
 800b728:	0002      	movs	r2, r0
 800b72a:	000b      	movs	r3, r1
 800b72c:	61ba      	str	r2, [r7, #24]
 800b72e:	61fb      	str	r3, [r7, #28]
	free ( latitude_s_temp ) ;
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	0018      	movs	r0, r3
 800b734:	f000 fb18 	bl	800bd68 <free>
	latitude_d = round ( latitude_d * 1e6 ) / 1e6 ;
 800b738:	2200      	movs	r2, #0
 800b73a:	4b49      	ldr	r3, [pc, #292]	; (800b860 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b73c:	69b8      	ldr	r0, [r7, #24]
 800b73e:	69f9      	ldr	r1, [r7, #28]
 800b740:	f7f5 ff94 	bl	800166c <__aeabi_dmul>
 800b744:	0002      	movs	r2, r0
 800b746:	000b      	movs	r3, r1
 800b748:	0010      	movs	r0, r2
 800b74a:	0019      	movs	r1, r3
 800b74c:	f008 fb20 	bl	8013d90 <round>
 800b750:	2200      	movs	r2, #0
 800b752:	4b43      	ldr	r3, [pc, #268]	; (800b860 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b754:	f7f5 fb90 	bl	8000e78 <__aeabi_ddiv>
 800b758:	0002      	movs	r2, r0
 800b75a:	000b      	movs	r3, r1
 800b75c:	61ba      	str	r2, [r7, #24]
 800b75e:	61fb      	str	r3, [r7, #28]
	//snprintf ( latitude_s , 12 , "%.6lf" , latitude_d ) ;
	fix3d->latitude_astro_geo_wr = (int32_t) ( latitude_d * 10000000 ) ;
 800b760:	2200      	movs	r2, #0
 800b762:	4b40      	ldr	r3, [pc, #256]	; (800b864 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b764:	69b8      	ldr	r0, [r7, #24]
 800b766:	69f9      	ldr	r1, [r7, #28]
 800b768:	f7f5 ff80 	bl	800166c <__aeabi_dmul>
 800b76c:	0002      	movs	r2, r0
 800b76e:	000b      	movs	r3, r1
 800b770:	0010      	movs	r0, r2
 800b772:	0019      	movs	r1, r3
 800b774:	f7f6 fddc 	bl	8002330 <__aeabi_d2iz>
 800b778:	0002      	movs	r2, r0
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	601a      	str	r2, [r3, #0]

	// Longitude part
	coordinate_position = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2) + 1 ;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2203      	movs	r2, #3
 800b782:	212c      	movs	r1, #44	; 0x2c
 800b784:	0018      	movs	r0, r3
 800b786:	f7ff fc57 	bl	800b038 <my_find_char_position>
 800b78a:	0003      	movs	r3, r0
 800b78c:	001a      	movs	r2, r3
 800b78e:	197b      	adds	r3, r7, r5
 800b790:	3201      	adds	r2, #1
 800b792:	701a      	strb	r2, [r3, #0]
	coordinate_length = my_find_char_position ( m , NMEA_DELIMETER , GLL_LATITUDE_POSITION + 2 + 1 ) - coordinate_position ;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2204      	movs	r2, #4
 800b798:	212c      	movs	r1, #44	; 0x2c
 800b79a:	0018      	movs	r0, r3
 800b79c:	f7ff fc4c 	bl	800b038 <my_find_char_position>
 800b7a0:	0003      	movs	r3, r0
 800b7a2:	0019      	movs	r1, r3
 800b7a4:	193b      	adds	r3, r7, r4
 800b7a6:	197a      	adds	r2, r7, r5
 800b7a8:	7812      	ldrb	r2, [r2, #0]
 800b7aa:	1a8a      	subs	r2, r1, r2
 800b7ac:	701a      	strb	r2, [r3, #0]

	char* longitude_s_temp = (char*) malloc ( ( coordinate_length +1 ) * sizeof ( char ) ) ;
 800b7ae:	193b      	adds	r3, r7, r4
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f000 facd 	bl	800bd54 <malloc>
 800b7ba:	0003      	movs	r3, r0
 800b7bc:	617b      	str	r3, [r7, #20]
	strncpy ( longitude_s_temp , m + coordinate_position , coordinate_length ) ; // Kopiowanie fragmentu łańcucha
 800b7be:	197b      	adds	r3, r7, r5
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	18d1      	adds	r1, r2, r3
 800b7c6:	193b      	adds	r3, r7, r4
 800b7c8:	781a      	ldrb	r2, [r3, #0]
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	0018      	movs	r0, r3
 800b7ce:	f001 fe0e 	bl	800d3ee <strncpy>
	longitude_s_temp[coordinate_length] = '\0';
 800b7d2:	193b      	adds	r3, r7, r4
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	18d3      	adds	r3, r2, r3
 800b7da:	2200      	movs	r2, #0
 800b7dc:	701a      	strb	r2, [r3, #0]
	direction = m[coordinate_position + coordinate_length + 1] ;
 800b7de:	197b      	adds	r3, r7, r5
 800b7e0:	781a      	ldrb	r2, [r3, #0]
 800b7e2:	193b      	adds	r3, r7, r4
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	18d3      	adds	r3, r2, r3
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	18d2      	adds	r2, r2, r3
 800b7ee:	19bb      	adds	r3, r7, r6
 800b7f0:	7812      	ldrb	r2, [r2, #0]
 800b7f2:	701a      	strb	r2, [r3, #0]
	double longitude_d = nmea2decimal ( longitude_s_temp , direction ) ;
 800b7f4:	19bb      	adds	r3, r7, r6
 800b7f6:	781a      	ldrb	r2, [r3, #0]
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	0011      	movs	r1, r2
 800b7fc:	0018      	movs	r0, r3
 800b7fe:	f7ff fed9 	bl	800b5b4 <nmea2decimal>
 800b802:	0002      	movs	r2, r0
 800b804:	000b      	movs	r3, r1
 800b806:	60ba      	str	r2, [r7, #8]
 800b808:	60fb      	str	r3, [r7, #12]
	free ( longitude_s_temp ) ;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	0018      	movs	r0, r3
 800b80e:	f000 faab 	bl	800bd68 <free>
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
 800b812:	2200      	movs	r2, #0
 800b814:	4b12      	ldr	r3, [pc, #72]	; (800b860 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b816:	68b8      	ldr	r0, [r7, #8]
 800b818:	68f9      	ldr	r1, [r7, #12]
 800b81a:	f7f5 ff27 	bl	800166c <__aeabi_dmul>
 800b81e:	0002      	movs	r2, r0
 800b820:	000b      	movs	r3, r1
 800b822:	0010      	movs	r0, r2
 800b824:	0019      	movs	r1, r3
 800b826:	f008 fab3 	bl	8013d90 <round>
 800b82a:	2200      	movs	r2, #0
 800b82c:	4b0c      	ldr	r3, [pc, #48]	; (800b860 <my_nmea_get_gngll_coordinates+0x1cc>)
 800b82e:	f7f5 fb23 	bl	8000e78 <__aeabi_ddiv>
 800b832:	0002      	movs	r2, r0
 800b834:	000b      	movs	r3, r1
 800b836:	60ba      	str	r2, [r7, #8]
 800b838:	60fb      	str	r3, [r7, #12]
	//snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	fix3d->longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
 800b83a:	2200      	movs	r2, #0
 800b83c:	4b09      	ldr	r3, [pc, #36]	; (800b864 <my_nmea_get_gngll_coordinates+0x1d0>)
 800b83e:	68b8      	ldr	r0, [r7, #8]
 800b840:	68f9      	ldr	r1, [r7, #12]
 800b842:	f7f5 ff13 	bl	800166c <__aeabi_dmul>
 800b846:	0002      	movs	r2, r0
 800b848:	000b      	movs	r3, r1
 800b84a:	0010      	movs	r0, r2
 800b84c:	0019      	movs	r1, r3
 800b84e:	f7f6 fd6f 	bl	8002330 <__aeabi_d2iz>
 800b852:	0002      	movs	r2, r0
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	605a      	str	r2, [r3, #4]
}
 800b858:	46c0      	nop			; (mov r8, r8)
 800b85a:	46bd      	mov	sp, r7
 800b85c:	b00d      	add	sp, #52	; 0x34
 800b85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b860:	412e8480 	.word	0x412e8480
 800b864:	416312d0 	.word	0x416312d0

0800b868 <my_nmea_get_gsv_tns>:
	longitude_d = round ( longitude_d * 1e6 ) / 1e6 ;
	snprintf ( longitude_s , 12 , "%.6lf" , longitude_d ) ;
	*longitude_astro_geo_wr = (int32_t) ( longitude_d * 10000000 ) ;
}
uint16_t my_nmea_get_gsv_tns ( const char* m ) //tns = Total Number Satelites
{
 800b868:	b5b0      	push	{r4, r5, r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
	uint16_t tns = 0 ;
 800b870:	240e      	movs	r4, #14
 800b872:	193b      	adds	r3, r7, r4
 800b874:	2200      	movs	r2, #0
 800b876:	801a      	strh	r2, [r3, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , GSV_TNS_POSITION ) + 1 ;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2203      	movs	r2, #3
 800b87c:	212c      	movs	r1, #44	; 0x2c
 800b87e:	0018      	movs	r0, r3
 800b880:	f7ff fbda 	bl	800b038 <my_find_char_position>
 800b884:	0003      	movs	r3, r0
 800b886:	001a      	movs	r2, r3
 800b888:	2517      	movs	r5, #23
 800b88a:	197b      	adds	r3, r7, r5
 800b88c:	3201      	adds	r2, #1
 800b88e:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( GSV_TNS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b890:	2003      	movs	r0, #3
 800b892:	f000 fa5f 	bl	800bd54 <malloc>
 800b896:	0003      	movs	r3, r0
 800b898:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , GSV_TNS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b89a:	197b      	adds	r3, r7, r5
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	18d1      	adds	r1, r2, r3
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	0018      	movs	r0, r3
 800b8a8:	f001 fda1 	bl	800d3ee <strncpy>
	s[GSV_TNS_LENGTH] = '\0';
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	3302      	adds	r3, #2
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%hu" , &tns ) ;
 800b8b4:	193a      	adds	r2, r7, r4
 800b8b6:	4907      	ldr	r1, [pc, #28]	; (800b8d4 <my_nmea_get_gsv_tns+0x6c>)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f001 fcfa 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f000 fa50 	bl	800bd68 <free>
	return tns ;
 800b8c8:	193b      	adds	r3, r7, r4
 800b8ca:	881b      	ldrh	r3, [r3, #0]
}
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	b006      	add	sp, #24
 800b8d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b8d4:	08015990 	.word	0x08015990

0800b8d8 <my_nmea_get_rmc_date_yy>:

void my_nmea_get_rmc_date_yy ( const char* m , uint8_t* yy )
{
 800b8d8:	b590      	push	{r4, r7, lr}
 800b8da:	b087      	sub	sp, #28
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_YY_OFFSET ;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2209      	movs	r2, #9
 800b8e6:	212c      	movs	r1, #44	; 0x2c
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	f7ff fba5 	bl	800b038 <my_find_char_position>
 800b8ee:	0003      	movs	r3, r0
 800b8f0:	001a      	movs	r2, r3
 800b8f2:	2417      	movs	r4, #23
 800b8f4:	193b      	adds	r3, r7, r4
 800b8f6:	3205      	adds	r2, #5
 800b8f8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b8fa:	2003      	movs	r0, #3
 800b8fc:	f000 fa2a 	bl	800bd54 <malloc>
 800b900:	0003      	movs	r3, r0
 800b902:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b904:	193b      	adds	r3, r7, r4
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	18d1      	adds	r1, r2, r3
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2202      	movs	r2, #2
 800b910:	0018      	movs	r0, r3
 800b912:	f001 fd6c 	bl	800d3ee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	3302      	adds	r3, #2
 800b91a:	2200      	movs	r2, #0
 800b91c:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , yy ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b91e:	240e      	movs	r4, #14
 800b920:	193a      	adds	r2, r7, r4
 800b922:	4909      	ldr	r1, [pc, #36]	; (800b948 <my_nmea_get_rmc_date_yy+0x70>)
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	0018      	movs	r0, r3
 800b928:	f001 fcc4 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	0018      	movs	r0, r3
 800b930:	f000 fa1a 	bl	800bd68 <free>
	*yy = (uint8_t) temp ;
 800b934:	193b      	adds	r3, r7, r4
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	701a      	strb	r2, [r3, #0]

}
 800b93e:	46c0      	nop			; (mov r8, r8)
 800b940:	46bd      	mov	sp, r7
 800b942:	b007      	add	sp, #28
 800b944:	bd90      	pop	{r4, r7, pc}
 800b946:	46c0      	nop			; (mov r8, r8)
 800b948:	08015990 	.word	0x08015990

0800b94c <my_nmea_get_rmc_date_mm>:

void my_nmea_get_rmc_date_mm ( const char* m , uint8_t* mm )
{
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b087      	sub	sp, #28
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_MM_OFFSET ;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2209      	movs	r2, #9
 800b95a:	212c      	movs	r1, #44	; 0x2c
 800b95c:	0018      	movs	r0, r3
 800b95e:	f7ff fb6b 	bl	800b038 <my_find_char_position>
 800b962:	0003      	movs	r3, r0
 800b964:	001a      	movs	r2, r3
 800b966:	2417      	movs	r4, #23
 800b968:	193b      	adds	r3, r7, r4
 800b96a:	3203      	adds	r2, #3
 800b96c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b96e:	2003      	movs	r0, #3
 800b970:	f000 f9f0 	bl	800bd54 <malloc>
 800b974:	0003      	movs	r3, r0
 800b976:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b978:	193b      	adds	r3, r7, r4
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	18d1      	adds	r1, r2, r3
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	2202      	movs	r2, #2
 800b984:	0018      	movs	r0, r3
 800b986:	f001 fd32 	bl	800d3ee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	3302      	adds	r3, #2
 800b98e:	2200      	movs	r2, #0
 800b990:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800b992:	240e      	movs	r4, #14
 800b994:	193a      	adds	r2, r7, r4
 800b996:	4909      	ldr	r1, [pc, #36]	; (800b9bc <my_nmea_get_rmc_date_mm+0x70>)
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	0018      	movs	r0, r3
 800b99c:	f001 fc8a 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	0018      	movs	r0, r3
 800b9a4:	f000 f9e0 	bl	800bd68 <free>
	*mm = (uint8_t) temp ;
 800b9a8:	193b      	adds	r3, r7, r4
 800b9aa:	881b      	ldrh	r3, [r3, #0]
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	701a      	strb	r2, [r3, #0]

}
 800b9b2:	46c0      	nop			; (mov r8, r8)
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	b007      	add	sp, #28
 800b9b8:	bd90      	pop	{r4, r7, pc}
 800b9ba:	46c0      	nop			; (mov r8, r8)
 800b9bc:	08015990 	.word	0x08015990

0800b9c0 <my_nmea_get_rmc_date_dd>:
void my_nmea_get_rmc_date_dd ( const char* m , uint8_t* dd )
{
 800b9c0:	b590      	push	{r4, r7, lr}
 800b9c2:	b087      	sub	sp, #28
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_DATE_POSITION ) + 1 + RMC_DATE_DD_OFFSET ;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2209      	movs	r2, #9
 800b9ce:	212c      	movs	r1, #44	; 0x2c
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	f7ff fb31 	bl	800b038 <my_find_char_position>
 800b9d6:	0003      	movs	r3, r0
 800b9d8:	001a      	movs	r2, r3
 800b9da:	2417      	movs	r4, #23
 800b9dc:	193b      	adds	r3, r7, r4
 800b9de:	3201      	adds	r2, #1
 800b9e0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_DATE_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800b9e2:	2003      	movs	r0, #3
 800b9e4:	f000 f9b6 	bl	800bd54 <malloc>
 800b9e8:	0003      	movs	r3, r0
 800b9ea:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_DATE_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800b9ec:	193b      	adds	r3, r7, r4
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	18d1      	adds	r1, r2, r3
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	0018      	movs	r0, r3
 800b9fa:	f001 fcf8 	bl	800d3ee <strncpy>
	s[RMC_DATE_PART_LENGTH] = '\0';
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3302      	adds	r3, #2
 800ba02:	2200      	movs	r2, #0
 800ba04:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , dd ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ba06:	240e      	movs	r4, #14
 800ba08:	193a      	adds	r2, r7, r4
 800ba0a:	4909      	ldr	r1, [pc, #36]	; (800ba30 <my_nmea_get_rmc_date_dd+0x70>)
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	0018      	movs	r0, r3
 800ba10:	f001 fc50 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	0018      	movs	r0, r3
 800ba18:	f000 f9a6 	bl	800bd68 <free>
	*dd = (uint8_t) temp ;
 800ba1c:	193b      	adds	r3, r7, r4
 800ba1e:	881b      	ldrh	r3, [r3, #0]
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	701a      	strb	r2, [r3, #0]

}
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	b007      	add	sp, #28
 800ba2c:	bd90      	pop	{r4, r7, pc}
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	08015990 	.word	0x08015990

0800ba34 <my_nmea_get_rmc_utc_hh>:
void my_nmea_get_rmc_utc_hh ( const char* m , uint8_t* hh )
{
 800ba34:	b590      	push	{r4, r7, lr}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_HH_OFFSET ;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	212c      	movs	r1, #44	; 0x2c
 800ba44:	0018      	movs	r0, r3
 800ba46:	f7ff faf7 	bl	800b038 <my_find_char_position>
 800ba4a:	0003      	movs	r3, r0
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	2417      	movs	r4, #23
 800ba50:	193b      	adds	r3, r7, r4
 800ba52:	3201      	adds	r2, #1
 800ba54:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800ba56:	2003      	movs	r0, #3
 800ba58:	f000 f97c 	bl	800bd54 <malloc>
 800ba5c:	0003      	movs	r3, r0
 800ba5e:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800ba60:	193b      	adds	r3, r7, r4
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	18d1      	adds	r1, r2, r3
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f001 fcbe 	bl	800d3ee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	3302      	adds	r3, #2
 800ba76:	2200      	movs	r2, #0
 800ba78:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , hh ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800ba7a:	240e      	movs	r4, #14
 800ba7c:	193a      	adds	r2, r7, r4
 800ba7e:	4909      	ldr	r1, [pc, #36]	; (800baa4 <my_nmea_get_rmc_utc_hh+0x70>)
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	0018      	movs	r0, r3
 800ba84:	f001 fc16 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	0018      	movs	r0, r3
 800ba8c:	f000 f96c 	bl	800bd68 <free>
	*hh = (uint8_t) temp ;
 800ba90:	193b      	adds	r3, r7, r4
 800ba92:	881b      	ldrh	r3, [r3, #0]
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	701a      	strb	r2, [r3, #0]

}
 800ba9a:	46c0      	nop			; (mov r8, r8)
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	b007      	add	sp, #28
 800baa0:	bd90      	pop	{r4, r7, pc}
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	08015990 	.word	0x08015990

0800baa8 <my_nmea_get_rmc_utc_mm>:
void my_nmea_get_rmc_utc_mm ( const char* m , uint8_t* mm )
{
 800baa8:	b590      	push	{r4, r7, lr}
 800baaa:	b087      	sub	sp, #28
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_MM_OFFSET ;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	212c      	movs	r1, #44	; 0x2c
 800bab8:	0018      	movs	r0, r3
 800baba:	f7ff fabd 	bl	800b038 <my_find_char_position>
 800babe:	0003      	movs	r3, r0
 800bac0:	001a      	movs	r2, r3
 800bac2:	2417      	movs	r4, #23
 800bac4:	193b      	adds	r3, r7, r4
 800bac6:	3203      	adds	r2, #3
 800bac8:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800baca:	2003      	movs	r0, #3
 800bacc:	f000 f942 	bl	800bd54 <malloc>
 800bad0:	0003      	movs	r3, r0
 800bad2:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bad4:	193b      	adds	r3, r7, r4
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	18d1      	adds	r1, r2, r3
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2202      	movs	r2, #2
 800bae0:	0018      	movs	r0, r3
 800bae2:	f001 fc84 	bl	800d3ee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	3302      	adds	r3, #2
 800baea:	2200      	movs	r2, #0
 800baec:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , mm ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800baee:	240e      	movs	r4, #14
 800baf0:	193a      	adds	r2, r7, r4
 800baf2:	4909      	ldr	r1, [pc, #36]	; (800bb18 <my_nmea_get_rmc_utc_mm+0x70>)
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	0018      	movs	r0, r3
 800baf8:	f001 fbdc 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	0018      	movs	r0, r3
 800bb00:	f000 f932 	bl	800bd68 <free>
	*mm = (uint8_t) temp ;
 800bb04:	193b      	adds	r3, r7, r4
 800bb06:	881b      	ldrh	r3, [r3, #0]
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	701a      	strb	r2, [r3, #0]

}
 800bb0e:	46c0      	nop			; (mov r8, r8)
 800bb10:	46bd      	mov	sp, r7
 800bb12:	b007      	add	sp, #28
 800bb14:	bd90      	pop	{r4, r7, pc}
 800bb16:	46c0      	nop			; (mov r8, r8)
 800bb18:	08015990 	.word	0x08015990

0800bb1c <my_nmea_get_rmc_utc_ss>:
void my_nmea_get_rmc_utc_ss ( const char* m , uint8_t* ss )
{
 800bb1c:	b590      	push	{r4, r7, lr}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
	uint16_t temp ;
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SS_OFFSET ;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	212c      	movs	r1, #44	; 0x2c
 800bb2c:	0018      	movs	r0, r3
 800bb2e:	f7ff fa83 	bl	800b038 <my_find_char_position>
 800bb32:	0003      	movs	r3, r0
 800bb34:	001a      	movs	r2, r3
 800bb36:	2417      	movs	r4, #23
 800bb38:	193b      	adds	r3, r7, r4
 800bb3a:	3205      	adds	r2, #5
 800bb3c:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_PART_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bb3e:	2003      	movs	r0, #3
 800bb40:	f000 f908 	bl	800bd54 <malloc>
 800bb44:	0003      	movs	r3, r0
 800bb46:	613b      	str	r3, [r7, #16]
	strncpy ( s , m + position , RMC_UTC_PART_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bb48:	193b      	adds	r3, r7, r4
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	18d1      	adds	r1, r2, r3
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2202      	movs	r2, #2
 800bb54:	0018      	movs	r0, r3
 800bb56:	f001 fc4a 	bl	800d3ee <strncpy>
	s[RMC_UTC_PART_LENGTH] = '\0';
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	3302      	adds	r3, #2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	701a      	strb	r2, [r3, #0]
	//sscanf ( s , SCNu8 , ss ) ; // Version requires Properties: C build/Settings/MCU Settings/Standard C
	// Version for Properties: C build/Settings/MCU Settings/Reduced C (--specs=nano.specs)
	sscanf ( s , "%hu" , &temp ) ;
 800bb62:	240e      	movs	r4, #14
 800bb64:	193a      	adds	r2, r7, r4
 800bb66:	4909      	ldr	r1, [pc, #36]	; (800bb8c <my_nmea_get_rmc_utc_ss+0x70>)
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	0018      	movs	r0, r3
 800bb6c:	f001 fba2 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	0018      	movs	r0, r3
 800bb74:	f000 f8f8 	bl	800bd68 <free>
	*ss = (uint8_t) temp ;
 800bb78:	193b      	adds	r3, r7, r4
 800bb7a:	881b      	ldrh	r3, [r3, #0]
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	701a      	strb	r2, [r3, #0]

}
 800bb82:	46c0      	nop			; (mov r8, r8)
 800bb84:	46bd      	mov	sp, r7
 800bb86:	b007      	add	sp, #28
 800bb88:	bd90      	pop	{r4, r7, pc}
 800bb8a:	46c0      	nop			; (mov r8, r8)
 800bb8c:	08015990 	.word	0x08015990

0800bb90 <my_nmea_get_rmc_utc_sss>:
void my_nmea_get_rmc_utc_sss ( const char* m , uint32_t* sss )
{
 800bb90:	b590      	push	{r4, r7, lr}
 800bb92:	b085      	sub	sp, #20
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
	uint8_t position = my_find_char_position ( m , NMEA_DELIMETER , RMC_UTC_POSITION ) + 1 + RMC_UTC_SSS_OFFSET ;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	212c      	movs	r1, #44	; 0x2c
 800bba0:	0018      	movs	r0, r3
 800bba2:	f7ff fa49 	bl	800b038 <my_find_char_position>
 800bba6:	0003      	movs	r3, r0
 800bba8:	001a      	movs	r2, r3
 800bbaa:	240f      	movs	r4, #15
 800bbac:	193b      	adds	r3, r7, r4
 800bbae:	3208      	adds	r2, #8
 800bbb0:	701a      	strb	r2, [r3, #0]
	char* s = (char*) malloc ( ( RMC_UTC_SSS_LENGTH +1 ) * sizeof ( uint8_t ) ) ;
 800bbb2:	2004      	movs	r0, #4
 800bbb4:	f000 f8ce 	bl	800bd54 <malloc>
 800bbb8:	0003      	movs	r3, r0
 800bbba:	60bb      	str	r3, [r7, #8]
	strncpy ( s , m + position , RMC_UTC_SSS_LENGTH ) ; // Kopiowanie fragmentu łańcucha
 800bbbc:	193b      	adds	r3, r7, r4
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	18d1      	adds	r1, r2, r3
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2203      	movs	r2, #3
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f001 fc10 	bl	800d3ee <strncpy>
	s[RMC_UTC_SSS_LENGTH] = '\0';
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	3303      	adds	r3, #3
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	701a      	strb	r2, [r3, #0]
	sscanf ( s , "%lu" , sss ) ;
 800bbd6:	683a      	ldr	r2, [r7, #0]
 800bbd8:	4906      	ldr	r1, [pc, #24]	; (800bbf4 <my_nmea_get_rmc_utc_sss+0x64>)
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f001 fb69 	bl	800d2b4 <sscanf>
	free ( s ) ;
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	0018      	movs	r0, r3
 800bbe6:	f000 f8bf 	bl	800bd68 <free>
}
 800bbea:	46c0      	nop			; (mov r8, r8)
 800bbec:	46bd      	mov	sp, r7
 800bbee:	b005      	add	sp, #20
 800bbf0:	bd90      	pop	{r4, r7, pc}
 800bbf2:	46c0      	nop			; (mov r8, r8)
 800bbf4:	08015994 	.word	0x08015994

0800bbf8 <my_tracker_api_is_cmd>:
#include <my_tracker_api.h>



bool my_tracker_api_is_cmd ( const char* c )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	size_t l = strlen ( c ) ;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	0018      	movs	r0, r3
 800bc04:	f7f4 fa7e 	bl	8000104 <strlen>
 800bc08:	0003      	movs	r3, r0
 800bc0a:	613b      	str	r3, [r7, #16]
	uint8_t i = 0 ; // Znaków nie może być więcej niż max. cmd payload czyli 80
 800bc0c:	2317      	movs	r3, #23
 800bc0e:	18fb      	adds	r3, r7, r3
 800bc10:	2200      	movs	r2, #0
 800bc12:	701a      	strb	r2, [r3, #0]
	uint8_t liczba_przecinkow = 0 ;
 800bc14:	2316      	movs	r3, #22
 800bc16:	18fb      	adds	r3, r7, r3
 800bc18:	2200      	movs	r2, #0
 800bc1a:	701a      	strb	r2, [r3, #0]

	if ( l < 3 || l > 9 )
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d902      	bls.n	800bc28 <my_tracker_api_is_cmd+0x30>
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	2b09      	cmp	r3, #9
 800bc26:	d901      	bls.n	800bc2c <my_tracker_api_is_cmd+0x34>
		return false ;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e04b      	b.n	800bcc4 <my_tracker_api_is_cmd+0xcc>

	for ( i = 0 ; i < l ; i++ )
 800bc2c:	2317      	movs	r3, #23
 800bc2e:	18fb      	adds	r3, r7, r3
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	e025      	b.n	800bc82 <my_tracker_api_is_cmd+0x8a>
	{
		if ( c[i] == ',' )
 800bc36:	2317      	movs	r3, #23
 800bc38:	18fb      	adds	r3, r7, r3
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	18d3      	adds	r3, r2, r3
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b2c      	cmp	r3, #44	; 0x2c
 800bc44:	d106      	bne.n	800bc54 <my_tracker_api_is_cmd+0x5c>
			liczba_przecinkow++ ;
 800bc46:	2116      	movs	r1, #22
 800bc48:	187b      	adds	r3, r7, r1
 800bc4a:	781a      	ldrb	r2, [r3, #0]
 800bc4c:	187b      	adds	r3, r7, r1
 800bc4e:	3201      	adds	r2, #1
 800bc50:	701a      	strb	r2, [r3, #0]
 800bc52:	e010      	b.n	800bc76 <my_tracker_api_is_cmd+0x7e>
		else if ( c[i] < '0' || c[i] > '9' )
 800bc54:	2117      	movs	r1, #23
 800bc56:	187b      	adds	r3, r7, r1
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	18d3      	adds	r3, r2, r3
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	2b2f      	cmp	r3, #47	; 0x2f
 800bc62:	d906      	bls.n	800bc72 <my_tracker_api_is_cmd+0x7a>
 800bc64:	187b      	adds	r3, r7, r1
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	18d3      	adds	r3, r2, r3
 800bc6c:	781b      	ldrb	r3, [r3, #0]
 800bc6e:	2b39      	cmp	r3, #57	; 0x39
 800bc70:	d901      	bls.n	800bc76 <my_tracker_api_is_cmd+0x7e>
			return false;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e026      	b.n	800bcc4 <my_tracker_api_is_cmd+0xcc>
	for ( i = 0 ; i < l ; i++ )
 800bc76:	2117      	movs	r1, #23
 800bc78:	187b      	adds	r3, r7, r1
 800bc7a:	781a      	ldrb	r2, [r3, #0]
 800bc7c:	187b      	adds	r3, r7, r1
 800bc7e:	3201      	adds	r2, #1
 800bc80:	701a      	strb	r2, [r3, #0]
 800bc82:	2317      	movs	r3, #23
 800bc84:	18fb      	adds	r3, r7, r3
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	693a      	ldr	r2, [r7, #16]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d8d3      	bhi.n	800bc36 <my_tracker_api_is_cmd+0x3e>
	}

	if ( /*c[0] == ',' || c[l-1] == ',' ||*/ liczba_przecinkow > 1 )
 800bc8e:	2316      	movs	r3, #22
 800bc90:	18fb      	adds	r3, r7, r3
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d901      	bls.n	800bc9c <my_tracker_api_is_cmd+0xa4>
		return false ;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	e013      	b.n	800bcc4 <my_tracker_api_is_cmd+0xcc>

	const char* comma_p = strchr ( c , ',' ) ;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	212c      	movs	r1, #44	; 0x2c
 800bca0:	0018      	movs	r0, r3
 800bca2:	f001 fb85 	bl	800d3b0 <strchr>
 800bca6:	0003      	movs	r3, r0
 800bca8:	60fb      	str	r3, [r7, #12]
	size_t cmd_code_length = comma_p - c ;
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	60bb      	str	r3, [r7, #8]
	if ( cmd_code_length > 2 || cmd_code_length < 1 )
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d802      	bhi.n	800bcbe <my_tracker_api_is_cmd+0xc6>
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <my_tracker_api_is_cmd+0xca>
		return false ;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e000      	b.n	800bcc4 <my_tracker_api_is_cmd+0xcc>

	return true ;
 800bcc2:	2301      	movs	r3, #1
}
 800bcc4:	0018      	movs	r0, r3
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	b006      	add	sp, #24
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <my_tracker_api_parse_cmd>:

	return cmd_value ;
}

bool my_tracker_api_parse_cmd ( cmd_astro* cmd , char* s )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
	cmd->code = 0 ;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	701a      	strb	r2, [r3, #0]
	cmd->value = 0 ;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	605a      	str	r2, [r3, #4]
	cmd->is_executed = false ;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	721a      	strb	r2, [r3, #8]

	char* tok = strtok ( s , "," ) ;
 800bce8:	4a19      	ldr	r2, [pc, #100]	; (800bd50 <my_tracker_api_parse_cmd+0x84>)
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	0011      	movs	r1, r2
 800bcee:	0018      	movs	r0, r3
 800bcf0:	f001 fb92 	bl	800d418 <strtok>
 800bcf4:	0003      	movs	r3, r0
 800bcf6:	60fb      	str	r3, [r7, #12]
	cmd->code = (uint8_t) my_conv_string_2_uint32_t ( tok ) ;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	0018      	movs	r0, r3
 800bcfc:	f7ff fb3e 	bl	800b37c <my_conv_string_2_uint32_t>
 800bd00:	0003      	movs	r3, r0
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	701a      	strb	r2, [r3, #0]
	tok = strtok ( NULL , "," ) ;
 800bd08:	4b11      	ldr	r3, [pc, #68]	; (800bd50 <my_tracker_api_parse_cmd+0x84>)
 800bd0a:	0019      	movs	r1, r3
 800bd0c:	2000      	movs	r0, #0
 800bd0e:	f001 fb83 	bl	800d418 <strtok>
 800bd12:	0003      	movs	r3, r0
 800bd14:	60fb      	str	r3, [r7, #12]
	cmd->value = my_conv_string_2_uint32_t ( tok ) ;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	0018      	movs	r0, r3
 800bd1a:	f7ff fb2f 	bl	800b37c <my_conv_string_2_uint32_t>
 800bd1e:	0002      	movs	r2, r0
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	605a      	str	r2, [r3, #4]
	tok = strtok ( NULL , "," ) ;
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <my_tracker_api_parse_cmd+0x84>)
 800bd26:	0019      	movs	r1, r3
 800bd28:	2000      	movs	r0, #0
 800bd2a:	f001 fb75 	bl	800d418 <strtok>
 800bd2e:	0003      	movs	r3, r0
 800bd30:	60fb      	str	r3, [r7, #12]

	if ( cmd->code == 0 || tok != NULL )
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d002      	beq.n	800bd40 <my_tracker_api_parse_cmd+0x74>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d001      	beq.n	800bd44 <my_tracker_api_parse_cmd+0x78>
		return false ;
 800bd40:	2300      	movs	r3, #0
 800bd42:	e000      	b.n	800bd46 <my_tracker_api_parse_cmd+0x7a>
	else
		return true ;
 800bd44:	2301      	movs	r3, #1
}
 800bd46:	0018      	movs	r0, r3
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	b004      	add	sp, #16
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	46c0      	nop			; (mov r8, r8)
 800bd50:	08015998 	.word	0x08015998

0800bd54 <malloc>:
 800bd54:	b510      	push	{r4, lr}
 800bd56:	4b03      	ldr	r3, [pc, #12]	; (800bd64 <malloc+0x10>)
 800bd58:	0001      	movs	r1, r0
 800bd5a:	6818      	ldr	r0, [r3, #0]
 800bd5c:	f000 f80e 	bl	800bd7c <_malloc_r>
 800bd60:	bd10      	pop	{r4, pc}
 800bd62:	46c0      	nop			; (mov r8, r8)
 800bd64:	200006d0 	.word	0x200006d0

0800bd68 <free>:
 800bd68:	b510      	push	{r4, lr}
 800bd6a:	4b03      	ldr	r3, [pc, #12]	; (800bd78 <free+0x10>)
 800bd6c:	0001      	movs	r1, r0
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	f001 fcbe 	bl	800d6f0 <_free_r>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	46c0      	nop			; (mov r8, r8)
 800bd78:	200006d0 	.word	0x200006d0

0800bd7c <_malloc_r>:
 800bd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd7e:	000d      	movs	r5, r1
 800bd80:	b087      	sub	sp, #28
 800bd82:	350b      	adds	r5, #11
 800bd84:	9001      	str	r0, [sp, #4]
 800bd86:	2d16      	cmp	r5, #22
 800bd88:	d908      	bls.n	800bd9c <_malloc_r+0x20>
 800bd8a:	2207      	movs	r2, #7
 800bd8c:	4395      	bics	r5, r2
 800bd8e:	d506      	bpl.n	800bd9e <_malloc_r+0x22>
 800bd90:	230c      	movs	r3, #12
 800bd92:	9a01      	ldr	r2, [sp, #4]
 800bd94:	6013      	str	r3, [r2, #0]
 800bd96:	2000      	movs	r0, #0
 800bd98:	b007      	add	sp, #28
 800bd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd9c:	2510      	movs	r5, #16
 800bd9e:	42a9      	cmp	r1, r5
 800bda0:	d8f6      	bhi.n	800bd90 <_malloc_r+0x14>
 800bda2:	9801      	ldr	r0, [sp, #4]
 800bda4:	f000 f9fe 	bl	800c1a4 <__malloc_lock>
 800bda8:	23fc      	movs	r3, #252	; 0xfc
 800bdaa:	4ebe      	ldr	r6, [pc, #760]	; (800c0a4 <_malloc_r+0x328>)
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	429d      	cmp	r5, r3
 800bdb0:	d219      	bcs.n	800bde6 <_malloc_r+0x6a>
 800bdb2:	002a      	movs	r2, r5
 800bdb4:	3208      	adds	r2, #8
 800bdb6:	18b2      	adds	r2, r6, r2
 800bdb8:	0011      	movs	r1, r2
 800bdba:	6854      	ldr	r4, [r2, #4]
 800bdbc:	3908      	subs	r1, #8
 800bdbe:	08eb      	lsrs	r3, r5, #3
 800bdc0:	428c      	cmp	r4, r1
 800bdc2:	d103      	bne.n	800bdcc <_malloc_r+0x50>
 800bdc4:	68d4      	ldr	r4, [r2, #12]
 800bdc6:	3302      	adds	r3, #2
 800bdc8:	42a2      	cmp	r2, r4
 800bdca:	d022      	beq.n	800be12 <_malloc_r+0x96>
 800bdcc:	2203      	movs	r2, #3
 800bdce:	6863      	ldr	r3, [r4, #4]
 800bdd0:	68a1      	ldr	r1, [r4, #8]
 800bdd2:	4393      	bics	r3, r2
 800bdd4:	68e2      	ldr	r2, [r4, #12]
 800bdd6:	18e3      	adds	r3, r4, r3
 800bdd8:	60ca      	str	r2, [r1, #12]
 800bdda:	6091      	str	r1, [r2, #8]
 800bddc:	2201      	movs	r2, #1
 800bdde:	6859      	ldr	r1, [r3, #4]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	605a      	str	r2, [r3, #4]
 800bde4:	e02a      	b.n	800be3c <_malloc_r+0xc0>
 800bde6:	233f      	movs	r3, #63	; 0x3f
 800bde8:	0a6a      	lsrs	r2, r5, #9
 800bdea:	d003      	beq.n	800bdf4 <_malloc_r+0x78>
 800bdec:	2a04      	cmp	r2, #4
 800bdee:	d82b      	bhi.n	800be48 <_malloc_r+0xcc>
 800bdf0:	09ab      	lsrs	r3, r5, #6
 800bdf2:	3338      	adds	r3, #56	; 0x38
 800bdf4:	2203      	movs	r2, #3
 800bdf6:	4694      	mov	ip, r2
 800bdf8:	00d9      	lsls	r1, r3, #3
 800bdfa:	1989      	adds	r1, r1, r6
 800bdfc:	68cc      	ldr	r4, [r1, #12]
 800bdfe:	428c      	cmp	r4, r1
 800be00:	d006      	beq.n	800be10 <_malloc_r+0x94>
 800be02:	4660      	mov	r0, ip
 800be04:	6862      	ldr	r2, [r4, #4]
 800be06:	4382      	bics	r2, r0
 800be08:	1b57      	subs	r7, r2, r5
 800be0a:	2f0f      	cmp	r7, #15
 800be0c:	dd34      	ble.n	800be78 <_malloc_r+0xfc>
 800be0e:	3b01      	subs	r3, #1
 800be10:	3301      	adds	r3, #1
 800be12:	6934      	ldr	r4, [r6, #16]
 800be14:	49a4      	ldr	r1, [pc, #656]	; (800c0a8 <_malloc_r+0x32c>)
 800be16:	428c      	cmp	r4, r1
 800be18:	d055      	beq.n	800bec6 <_malloc_r+0x14a>
 800be1a:	2003      	movs	r0, #3
 800be1c:	6862      	ldr	r2, [r4, #4]
 800be1e:	4382      	bics	r2, r0
 800be20:	1b50      	subs	r0, r2, r5
 800be22:	280f      	cmp	r0, #15
 800be24:	dd36      	ble.n	800be94 <_malloc_r+0x118>
 800be26:	2301      	movs	r3, #1
 800be28:	1967      	adds	r7, r4, r5
 800be2a:	431d      	orrs	r5, r3
 800be2c:	4303      	orrs	r3, r0
 800be2e:	6065      	str	r5, [r4, #4]
 800be30:	6177      	str	r7, [r6, #20]
 800be32:	6137      	str	r7, [r6, #16]
 800be34:	60f9      	str	r1, [r7, #12]
 800be36:	60b9      	str	r1, [r7, #8]
 800be38:	607b      	str	r3, [r7, #4]
 800be3a:	50a0      	str	r0, [r4, r2]
 800be3c:	9801      	ldr	r0, [sp, #4]
 800be3e:	f000 f9b9 	bl	800c1b4 <__malloc_unlock>
 800be42:	0020      	movs	r0, r4
 800be44:	3008      	adds	r0, #8
 800be46:	e7a7      	b.n	800bd98 <_malloc_r+0x1c>
 800be48:	2a14      	cmp	r2, #20
 800be4a:	d802      	bhi.n	800be52 <_malloc_r+0xd6>
 800be4c:	0013      	movs	r3, r2
 800be4e:	335b      	adds	r3, #91	; 0x5b
 800be50:	e7d0      	b.n	800bdf4 <_malloc_r+0x78>
 800be52:	2a54      	cmp	r2, #84	; 0x54
 800be54:	d802      	bhi.n	800be5c <_malloc_r+0xe0>
 800be56:	0b2b      	lsrs	r3, r5, #12
 800be58:	336e      	adds	r3, #110	; 0x6e
 800be5a:	e7cb      	b.n	800bdf4 <_malloc_r+0x78>
 800be5c:	23aa      	movs	r3, #170	; 0xaa
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	429a      	cmp	r2, r3
 800be62:	d802      	bhi.n	800be6a <_malloc_r+0xee>
 800be64:	0beb      	lsrs	r3, r5, #15
 800be66:	3377      	adds	r3, #119	; 0x77
 800be68:	e7c4      	b.n	800bdf4 <_malloc_r+0x78>
 800be6a:	4990      	ldr	r1, [pc, #576]	; (800c0ac <_malloc_r+0x330>)
 800be6c:	237e      	movs	r3, #126	; 0x7e
 800be6e:	428a      	cmp	r2, r1
 800be70:	d8c0      	bhi.n	800bdf4 <_malloc_r+0x78>
 800be72:	0cab      	lsrs	r3, r5, #18
 800be74:	337c      	adds	r3, #124	; 0x7c
 800be76:	e7bd      	b.n	800bdf4 <_malloc_r+0x78>
 800be78:	68e0      	ldr	r0, [r4, #12]
 800be7a:	2f00      	cmp	r7, #0
 800be7c:	db08      	blt.n	800be90 <_malloc_r+0x114>
 800be7e:	68a3      	ldr	r3, [r4, #8]
 800be80:	60d8      	str	r0, [r3, #12]
 800be82:	6083      	str	r3, [r0, #8]
 800be84:	2301      	movs	r3, #1
 800be86:	18a2      	adds	r2, r4, r2
 800be88:	6851      	ldr	r1, [r2, #4]
 800be8a:	430b      	orrs	r3, r1
 800be8c:	6053      	str	r3, [r2, #4]
 800be8e:	e7d5      	b.n	800be3c <_malloc_r+0xc0>
 800be90:	0004      	movs	r4, r0
 800be92:	e7b4      	b.n	800bdfe <_malloc_r+0x82>
 800be94:	6171      	str	r1, [r6, #20]
 800be96:	6131      	str	r1, [r6, #16]
 800be98:	2800      	cmp	r0, #0
 800be9a:	daf3      	bge.n	800be84 <_malloc_r+0x108>
 800be9c:	6871      	ldr	r1, [r6, #4]
 800be9e:	468c      	mov	ip, r1
 800bea0:	2180      	movs	r1, #128	; 0x80
 800bea2:	0089      	lsls	r1, r1, #2
 800bea4:	428a      	cmp	r2, r1
 800bea6:	d300      	bcc.n	800beaa <_malloc_r+0x12e>
 800bea8:	e08c      	b.n	800bfc4 <_malloc_r+0x248>
 800beaa:	08d1      	lsrs	r1, r2, #3
 800beac:	0950      	lsrs	r0, r2, #5
 800beae:	2201      	movs	r2, #1
 800beb0:	4082      	lsls	r2, r0
 800beb2:	4660      	mov	r0, ip
 800beb4:	4302      	orrs	r2, r0
 800beb6:	6072      	str	r2, [r6, #4]
 800beb8:	00ca      	lsls	r2, r1, #3
 800beba:	1992      	adds	r2, r2, r6
 800bebc:	6891      	ldr	r1, [r2, #8]
 800bebe:	60e2      	str	r2, [r4, #12]
 800bec0:	60a1      	str	r1, [r4, #8]
 800bec2:	6094      	str	r4, [r2, #8]
 800bec4:	60cc      	str	r4, [r1, #12]
 800bec6:	2201      	movs	r2, #1
 800bec8:	4876      	ldr	r0, [pc, #472]	; (800c0a4 <_malloc_r+0x328>)
 800beca:	1099      	asrs	r1, r3, #2
 800becc:	408a      	lsls	r2, r1
 800bece:	6841      	ldr	r1, [r0, #4]
 800bed0:	4291      	cmp	r1, r2
 800bed2:	d328      	bcc.n	800bf26 <_malloc_r+0x1aa>
 800bed4:	420a      	tst	r2, r1
 800bed6:	d105      	bne.n	800bee4 <_malloc_r+0x168>
 800bed8:	2403      	movs	r4, #3
 800beda:	43a3      	bics	r3, r4
 800bedc:	0052      	lsls	r2, r2, #1
 800bede:	3304      	adds	r3, #4
 800bee0:	420a      	tst	r2, r1
 800bee2:	d0fb      	beq.n	800bedc <_malloc_r+0x160>
 800bee4:	496f      	ldr	r1, [pc, #444]	; (800c0a4 <_malloc_r+0x328>)
 800bee6:	9104      	str	r1, [sp, #16]
 800bee8:	00d9      	lsls	r1, r3, #3
 800beea:	1841      	adds	r1, r0, r1
 800beec:	468c      	mov	ip, r1
 800beee:	000f      	movs	r7, r1
 800bef0:	9302      	str	r3, [sp, #8]
 800bef2:	68fc      	ldr	r4, [r7, #12]
 800bef4:	42bc      	cmp	r4, r7
 800bef6:	d000      	beq.n	800befa <_malloc_r+0x17e>
 800bef8:	e09b      	b.n	800c032 <_malloc_r+0x2b6>
 800befa:	2403      	movs	r4, #3
 800befc:	9902      	ldr	r1, [sp, #8]
 800befe:	3708      	adds	r7, #8
 800bf00:	3101      	adds	r1, #1
 800bf02:	9102      	str	r1, [sp, #8]
 800bf04:	4221      	tst	r1, r4
 800bf06:	d1f4      	bne.n	800bef2 <_malloc_r+0x176>
 800bf08:	2103      	movs	r1, #3
 800bf0a:	420b      	tst	r3, r1
 800bf0c:	d000      	beq.n	800bf10 <_malloc_r+0x194>
 800bf0e:	e0b7      	b.n	800c080 <_malloc_r+0x304>
 800bf10:	6843      	ldr	r3, [r0, #4]
 800bf12:	4393      	bics	r3, r2
 800bf14:	6043      	str	r3, [r0, #4]
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	0052      	lsls	r2, r2, #1
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	4291      	cmp	r1, r2
 800bf1e:	d302      	bcc.n	800bf26 <_malloc_r+0x1aa>
 800bf20:	2a00      	cmp	r2, #0
 800bf22:	d000      	beq.n	800bf26 <_malloc_r+0x1aa>
 800bf24:	e0bb      	b.n	800c09e <_malloc_r+0x322>
 800bf26:	2203      	movs	r2, #3
 800bf28:	6883      	ldr	r3, [r0, #8]
 800bf2a:	9302      	str	r3, [sp, #8]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	4393      	bics	r3, r2
 800bf30:	9303      	str	r3, [sp, #12]
 800bf32:	42ab      	cmp	r3, r5
 800bf34:	d303      	bcc.n	800bf3e <_malloc_r+0x1c2>
 800bf36:	1b59      	subs	r1, r3, r5
 800bf38:	290f      	cmp	r1, #15
 800bf3a:	dd00      	ble.n	800bf3e <_malloc_r+0x1c2>
 800bf3c:	e123      	b.n	800c186 <_malloc_r+0x40a>
 800bf3e:	9b02      	ldr	r3, [sp, #8]
 800bf40:	9a03      	ldr	r2, [sp, #12]
 800bf42:	2008      	movs	r0, #8
 800bf44:	189e      	adds	r6, r3, r2
 800bf46:	4b5a      	ldr	r3, [pc, #360]	; (800c0b0 <_malloc_r+0x334>)
 800bf48:	681f      	ldr	r7, [r3, #0]
 800bf4a:	f001 fb4b 	bl	800d5e4 <sysconf>
 800bf4e:	4b59      	ldr	r3, [pc, #356]	; (800c0b4 <_malloc_r+0x338>)
 800bf50:	3710      	adds	r7, #16
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	197f      	adds	r7, r7, r5
 800bf56:	9004      	str	r0, [sp, #16]
 800bf58:	3301      	adds	r3, #1
 800bf5a:	d003      	beq.n	800bf64 <_malloc_r+0x1e8>
 800bf5c:	1e7b      	subs	r3, r7, #1
 800bf5e:	181b      	adds	r3, r3, r0
 800bf60:	4247      	negs	r7, r0
 800bf62:	401f      	ands	r7, r3
 800bf64:	0039      	movs	r1, r7
 800bf66:	9801      	ldr	r0, [sp, #4]
 800bf68:	f001 fae8 	bl	800d53c <_sbrk_r>
 800bf6c:	0004      	movs	r4, r0
 800bf6e:	1c43      	adds	r3, r0, #1
 800bf70:	d100      	bne.n	800bf74 <_malloc_r+0x1f8>
 800bf72:	e0de      	b.n	800c132 <_malloc_r+0x3b6>
 800bf74:	4286      	cmp	r6, r0
 800bf76:	d904      	bls.n	800bf82 <_malloc_r+0x206>
 800bf78:	4b4a      	ldr	r3, [pc, #296]	; (800c0a4 <_malloc_r+0x328>)
 800bf7a:	9a02      	ldr	r2, [sp, #8]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d000      	beq.n	800bf82 <_malloc_r+0x206>
 800bf80:	e0d7      	b.n	800c132 <_malloc_r+0x3b6>
 800bf82:	4a4d      	ldr	r2, [pc, #308]	; (800c0b8 <_malloc_r+0x33c>)
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	18fb      	adds	r3, r7, r3
 800bf88:	6013      	str	r3, [r2, #0]
 800bf8a:	9a04      	ldr	r2, [sp, #16]
 800bf8c:	3a01      	subs	r2, #1
 800bf8e:	42a6      	cmp	r6, r4
 800bf90:	d000      	beq.n	800bf94 <_malloc_r+0x218>
 800bf92:	e097      	b.n	800c0c4 <_malloc_r+0x348>
 800bf94:	4216      	tst	r6, r2
 800bf96:	d000      	beq.n	800bf9a <_malloc_r+0x21e>
 800bf98:	e094      	b.n	800c0c4 <_malloc_r+0x348>
 800bf9a:	4b42      	ldr	r3, [pc, #264]	; (800c0a4 <_malloc_r+0x328>)
 800bf9c:	689a      	ldr	r2, [r3, #8]
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	19df      	adds	r7, r3, r7
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	433b      	orrs	r3, r7
 800bfa6:	6053      	str	r3, [r2, #4]
 800bfa8:	4b43      	ldr	r3, [pc, #268]	; (800c0b8 <_malloc_r+0x33c>)
 800bfaa:	4a44      	ldr	r2, [pc, #272]	; (800c0bc <_malloc_r+0x340>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6811      	ldr	r1, [r2, #0]
 800bfb0:	428b      	cmp	r3, r1
 800bfb2:	d900      	bls.n	800bfb6 <_malloc_r+0x23a>
 800bfb4:	6013      	str	r3, [r2, #0]
 800bfb6:	4a42      	ldr	r2, [pc, #264]	; (800c0c0 <_malloc_r+0x344>)
 800bfb8:	6811      	ldr	r1, [r2, #0]
 800bfba:	428b      	cmp	r3, r1
 800bfbc:	d800      	bhi.n	800bfc0 <_malloc_r+0x244>
 800bfbe:	e0b8      	b.n	800c132 <_malloc_r+0x3b6>
 800bfc0:	6013      	str	r3, [r2, #0]
 800bfc2:	e0b6      	b.n	800c132 <_malloc_r+0x3b6>
 800bfc4:	0a50      	lsrs	r0, r2, #9
 800bfc6:	2804      	cmp	r0, #4
 800bfc8:	d811      	bhi.n	800bfee <_malloc_r+0x272>
 800bfca:	0991      	lsrs	r1, r2, #6
 800bfcc:	3138      	adds	r1, #56	; 0x38
 800bfce:	00cf      	lsls	r7, r1, #3
 800bfd0:	19bf      	adds	r7, r7, r6
 800bfd2:	68b8      	ldr	r0, [r7, #8]
 800bfd4:	4287      	cmp	r7, r0
 800bfd6:	d125      	bne.n	800c024 <_malloc_r+0x2a8>
 800bfd8:	2201      	movs	r2, #1
 800bfda:	1089      	asrs	r1, r1, #2
 800bfdc:	408a      	lsls	r2, r1
 800bfde:	4661      	mov	r1, ip
 800bfe0:	430a      	orrs	r2, r1
 800bfe2:	6072      	str	r2, [r6, #4]
 800bfe4:	60e7      	str	r7, [r4, #12]
 800bfe6:	60a0      	str	r0, [r4, #8]
 800bfe8:	60bc      	str	r4, [r7, #8]
 800bfea:	60c4      	str	r4, [r0, #12]
 800bfec:	e76b      	b.n	800bec6 <_malloc_r+0x14a>
 800bfee:	2814      	cmp	r0, #20
 800bff0:	d802      	bhi.n	800bff8 <_malloc_r+0x27c>
 800bff2:	0001      	movs	r1, r0
 800bff4:	315b      	adds	r1, #91	; 0x5b
 800bff6:	e7ea      	b.n	800bfce <_malloc_r+0x252>
 800bff8:	2854      	cmp	r0, #84	; 0x54
 800bffa:	d802      	bhi.n	800c002 <_malloc_r+0x286>
 800bffc:	0b11      	lsrs	r1, r2, #12
 800bffe:	316e      	adds	r1, #110	; 0x6e
 800c000:	e7e5      	b.n	800bfce <_malloc_r+0x252>
 800c002:	21aa      	movs	r1, #170	; 0xaa
 800c004:	0049      	lsls	r1, r1, #1
 800c006:	4288      	cmp	r0, r1
 800c008:	d802      	bhi.n	800c010 <_malloc_r+0x294>
 800c00a:	0bd1      	lsrs	r1, r2, #15
 800c00c:	3177      	adds	r1, #119	; 0x77
 800c00e:	e7de      	b.n	800bfce <_malloc_r+0x252>
 800c010:	4f26      	ldr	r7, [pc, #152]	; (800c0ac <_malloc_r+0x330>)
 800c012:	217e      	movs	r1, #126	; 0x7e
 800c014:	42b8      	cmp	r0, r7
 800c016:	d8da      	bhi.n	800bfce <_malloc_r+0x252>
 800c018:	0c91      	lsrs	r1, r2, #18
 800c01a:	317c      	adds	r1, #124	; 0x7c
 800c01c:	e7d7      	b.n	800bfce <_malloc_r+0x252>
 800c01e:	6880      	ldr	r0, [r0, #8]
 800c020:	4287      	cmp	r7, r0
 800c022:	d004      	beq.n	800c02e <_malloc_r+0x2b2>
 800c024:	2603      	movs	r6, #3
 800c026:	6841      	ldr	r1, [r0, #4]
 800c028:	43b1      	bics	r1, r6
 800c02a:	4291      	cmp	r1, r2
 800c02c:	d8f7      	bhi.n	800c01e <_malloc_r+0x2a2>
 800c02e:	68c7      	ldr	r7, [r0, #12]
 800c030:	e7d8      	b.n	800bfe4 <_malloc_r+0x268>
 800c032:	2603      	movs	r6, #3
 800c034:	6861      	ldr	r1, [r4, #4]
 800c036:	43b1      	bics	r1, r6
 800c038:	9103      	str	r1, [sp, #12]
 800c03a:	68e6      	ldr	r6, [r4, #12]
 800c03c:	1b49      	subs	r1, r1, r5
 800c03e:	290f      	cmp	r1, #15
 800c040:	dd10      	ble.n	800c064 <_malloc_r+0x2e8>
 800c042:	2201      	movs	r2, #1
 800c044:	1963      	adds	r3, r4, r5
 800c046:	4315      	orrs	r5, r2
 800c048:	6065      	str	r5, [r4, #4]
 800c04a:	68a5      	ldr	r5, [r4, #8]
 800c04c:	430a      	orrs	r2, r1
 800c04e:	60ee      	str	r6, [r5, #12]
 800c050:	60b5      	str	r5, [r6, #8]
 800c052:	6143      	str	r3, [r0, #20]
 800c054:	6103      	str	r3, [r0, #16]
 800c056:	4814      	ldr	r0, [pc, #80]	; (800c0a8 <_malloc_r+0x32c>)
 800c058:	605a      	str	r2, [r3, #4]
 800c05a:	60d8      	str	r0, [r3, #12]
 800c05c:	6098      	str	r0, [r3, #8]
 800c05e:	9b03      	ldr	r3, [sp, #12]
 800c060:	50e1      	str	r1, [r4, r3]
 800c062:	e6eb      	b.n	800be3c <_malloc_r+0xc0>
 800c064:	2900      	cmp	r1, #0
 800c066:	db09      	blt.n	800c07c <_malloc_r+0x300>
 800c068:	9b03      	ldr	r3, [sp, #12]
 800c06a:	18e1      	adds	r1, r4, r3
 800c06c:	2301      	movs	r3, #1
 800c06e:	684a      	ldr	r2, [r1, #4]
 800c070:	4313      	orrs	r3, r2
 800c072:	604b      	str	r3, [r1, #4]
 800c074:	68a3      	ldr	r3, [r4, #8]
 800c076:	60de      	str	r6, [r3, #12]
 800c078:	60b3      	str	r3, [r6, #8]
 800c07a:	e6df      	b.n	800be3c <_malloc_r+0xc0>
 800c07c:	0034      	movs	r4, r6
 800c07e:	e739      	b.n	800bef4 <_malloc_r+0x178>
 800c080:	2108      	movs	r1, #8
 800c082:	4249      	negs	r1, r1
 800c084:	448c      	add	ip, r1
 800c086:	4661      	mov	r1, ip
 800c088:	6889      	ldr	r1, [r1, #8]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	4561      	cmp	r1, ip
 800c08e:	d100      	bne.n	800c092 <_malloc_r+0x316>
 800c090:	e73a      	b.n	800bf08 <_malloc_r+0x18c>
 800c092:	e740      	b.n	800bf16 <_malloc_r+0x19a>
 800c094:	3304      	adds	r3, #4
 800c096:	0052      	lsls	r2, r2, #1
 800c098:	420a      	tst	r2, r1
 800c09a:	d0fb      	beq.n	800c094 <_malloc_r+0x318>
 800c09c:	e724      	b.n	800bee8 <_malloc_r+0x16c>
 800c09e:	9b02      	ldr	r3, [sp, #8]
 800c0a0:	e7fa      	b.n	800c098 <_malloc_r+0x31c>
 800c0a2:	46c0      	nop			; (mov r8, r8)
 800c0a4:	20000028 	.word	0x20000028
 800c0a8:	20000030 	.word	0x20000030
 800c0ac:	00000554 	.word	0x00000554
 800c0b0:	20000c78 	.word	0x20000c78
 800c0b4:	20000430 	.word	0x20000430
 800c0b8:	20000c48 	.word	0x20000c48
 800c0bc:	20000c70 	.word	0x20000c70
 800c0c0:	20000c74 	.word	0x20000c74
 800c0c4:	4934      	ldr	r1, [pc, #208]	; (800c198 <_malloc_r+0x41c>)
 800c0c6:	6808      	ldr	r0, [r1, #0]
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d140      	bne.n	800c14e <_malloc_r+0x3d2>
 800c0cc:	600c      	str	r4, [r1, #0]
 800c0ce:	2107      	movs	r1, #7
 800c0d0:	0026      	movs	r6, r4
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	400e      	ands	r6, r1
 800c0d6:	420c      	tst	r4, r1
 800c0d8:	d002      	beq.n	800c0e0 <_malloc_r+0x364>
 800c0da:	3308      	adds	r3, #8
 800c0dc:	1b9b      	subs	r3, r3, r6
 800c0de:	18e4      	adds	r4, r4, r3
 800c0e0:	19e1      	adds	r1, r4, r7
 800c0e2:	9105      	str	r1, [sp, #20]
 800c0e4:	9f05      	ldr	r7, [sp, #20]
 800c0e6:	9904      	ldr	r1, [sp, #16]
 800c0e8:	4017      	ands	r7, r2
 800c0ea:	18cb      	adds	r3, r1, r3
 800c0ec:	1bdf      	subs	r7, r3, r7
 800c0ee:	4017      	ands	r7, r2
 800c0f0:	0039      	movs	r1, r7
 800c0f2:	9801      	ldr	r0, [sp, #4]
 800c0f4:	f001 fa22 	bl	800d53c <_sbrk_r>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	d107      	bne.n	800c10c <_malloc_r+0x390>
 800c0fc:	1e37      	subs	r7, r6, #0
 800c0fe:	9805      	ldr	r0, [sp, #20]
 800c100:	d004      	beq.n	800c10c <_malloc_r+0x390>
 800c102:	0030      	movs	r0, r6
 800c104:	2700      	movs	r7, #0
 800c106:	9b05      	ldr	r3, [sp, #20]
 800c108:	3808      	subs	r0, #8
 800c10a:	1818      	adds	r0, r3, r0
 800c10c:	4a23      	ldr	r2, [pc, #140]	; (800c19c <_malloc_r+0x420>)
 800c10e:	1b00      	subs	r0, r0, r4
 800c110:	6813      	ldr	r3, [r2, #0]
 800c112:	19c0      	adds	r0, r0, r7
 800c114:	19db      	adds	r3, r3, r7
 800c116:	6013      	str	r3, [r2, #0]
 800c118:	2201      	movs	r2, #1
 800c11a:	4b21      	ldr	r3, [pc, #132]	; (800c1a0 <_malloc_r+0x424>)
 800c11c:	9902      	ldr	r1, [sp, #8]
 800c11e:	4310      	orrs	r0, r2
 800c120:	609c      	str	r4, [r3, #8]
 800c122:	6060      	str	r0, [r4, #4]
 800c124:	4299      	cmp	r1, r3
 800c126:	d100      	bne.n	800c12a <_malloc_r+0x3ae>
 800c128:	e73e      	b.n	800bfa8 <_malloc_r+0x22c>
 800c12a:	9b03      	ldr	r3, [sp, #12]
 800c12c:	2b0f      	cmp	r3, #15
 800c12e:	d813      	bhi.n	800c158 <_malloc_r+0x3dc>
 800c130:	6062      	str	r2, [r4, #4]
 800c132:	2203      	movs	r2, #3
 800c134:	4b1a      	ldr	r3, [pc, #104]	; (800c1a0 <_malloc_r+0x424>)
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	685b      	ldr	r3, [r3, #4]
 800c13a:	4393      	bics	r3, r2
 800c13c:	1b59      	subs	r1, r3, r5
 800c13e:	42ab      	cmp	r3, r5
 800c140:	d301      	bcc.n	800c146 <_malloc_r+0x3ca>
 800c142:	290f      	cmp	r1, #15
 800c144:	dc1f      	bgt.n	800c186 <_malloc_r+0x40a>
 800c146:	9801      	ldr	r0, [sp, #4]
 800c148:	f000 f834 	bl	800c1b4 <__malloc_unlock>
 800c14c:	e623      	b.n	800bd96 <_malloc_r+0x1a>
 800c14e:	4913      	ldr	r1, [pc, #76]	; (800c19c <_malloc_r+0x420>)
 800c150:	1ba6      	subs	r6, r4, r6
 800c152:	18f6      	adds	r6, r6, r3
 800c154:	600e      	str	r6, [r1, #0]
 800c156:	e7ba      	b.n	800c0ce <_malloc_r+0x352>
 800c158:	2107      	movs	r1, #7
 800c15a:	9b03      	ldr	r3, [sp, #12]
 800c15c:	3b0c      	subs	r3, #12
 800c15e:	438b      	bics	r3, r1
 800c160:	9902      	ldr	r1, [sp, #8]
 800c162:	6849      	ldr	r1, [r1, #4]
 800c164:	400a      	ands	r2, r1
 800c166:	9902      	ldr	r1, [sp, #8]
 800c168:	431a      	orrs	r2, r3
 800c16a:	604a      	str	r2, [r1, #4]
 800c16c:	18ca      	adds	r2, r1, r3
 800c16e:	2105      	movs	r1, #5
 800c170:	6051      	str	r1, [r2, #4]
 800c172:	6091      	str	r1, [r2, #8]
 800c174:	2b0f      	cmp	r3, #15
 800c176:	d800      	bhi.n	800c17a <_malloc_r+0x3fe>
 800c178:	e716      	b.n	800bfa8 <_malloc_r+0x22c>
 800c17a:	9902      	ldr	r1, [sp, #8]
 800c17c:	9801      	ldr	r0, [sp, #4]
 800c17e:	3108      	adds	r1, #8
 800c180:	f001 fab6 	bl	800d6f0 <_free_r>
 800c184:	e710      	b.n	800bfa8 <_malloc_r+0x22c>
 800c186:	2201      	movs	r2, #1
 800c188:	0013      	movs	r3, r2
 800c18a:	4805      	ldr	r0, [pc, #20]	; (800c1a0 <_malloc_r+0x424>)
 800c18c:	432b      	orrs	r3, r5
 800c18e:	6884      	ldr	r4, [r0, #8]
 800c190:	6063      	str	r3, [r4, #4]
 800c192:	1963      	adds	r3, r4, r5
 800c194:	6083      	str	r3, [r0, #8]
 800c196:	e623      	b.n	800bde0 <_malloc_r+0x64>
 800c198:	20000430 	.word	0x20000430
 800c19c:	20000c48 	.word	0x20000c48
 800c1a0:	20000028 	.word	0x20000028

0800c1a4 <__malloc_lock>:
 800c1a4:	b510      	push	{r4, lr}
 800c1a6:	4802      	ldr	r0, [pc, #8]	; (800c1b0 <__malloc_lock+0xc>)
 800c1a8:	f001 fa1a 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 800c1ac:	bd10      	pop	{r4, pc}
 800c1ae:	46c0      	nop			; (mov r8, r8)
 800c1b0:	20000dbd 	.word	0x20000dbd

0800c1b4 <__malloc_unlock>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4802      	ldr	r0, [pc, #8]	; (800c1c0 <__malloc_unlock+0xc>)
 800c1b8:	f001 fa13 	bl	800d5e2 <__retarget_lock_release_recursive>
 800c1bc:	bd10      	pop	{r4, pc}
 800c1be:	46c0      	nop			; (mov r8, r8)
 800c1c0:	20000dbd 	.word	0x20000dbd

0800c1c4 <sulp>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	0016      	movs	r6, r2
 800c1c8:	000d      	movs	r5, r1
 800c1ca:	f002 f9e7 	bl	800e59c <__ulp>
 800c1ce:	2e00      	cmp	r6, #0
 800c1d0:	d00d      	beq.n	800c1ee <sulp+0x2a>
 800c1d2:	236b      	movs	r3, #107	; 0x6b
 800c1d4:	006a      	lsls	r2, r5, #1
 800c1d6:	0d52      	lsrs	r2, r2, #21
 800c1d8:	1a9b      	subs	r3, r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	dd07      	ble.n	800c1ee <sulp+0x2a>
 800c1de:	2400      	movs	r4, #0
 800c1e0:	4a03      	ldr	r2, [pc, #12]	; (800c1f0 <sulp+0x2c>)
 800c1e2:	051b      	lsls	r3, r3, #20
 800c1e4:	189d      	adds	r5, r3, r2
 800c1e6:	002b      	movs	r3, r5
 800c1e8:	0022      	movs	r2, r4
 800c1ea:	f7f5 fa3f 	bl	800166c <__aeabi_dmul>
 800c1ee:	bd70      	pop	{r4, r5, r6, pc}
 800c1f0:	3ff00000 	.word	0x3ff00000

0800c1f4 <_strtod_l>:
 800c1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1f6:	b0a1      	sub	sp, #132	; 0x84
 800c1f8:	9219      	str	r2, [sp, #100]	; 0x64
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2600      	movs	r6, #0
 800c1fe:	2700      	movs	r7, #0
 800c200:	9004      	str	r0, [sp, #16]
 800c202:	9107      	str	r1, [sp, #28]
 800c204:	921c      	str	r2, [sp, #112]	; 0x70
 800c206:	911b      	str	r1, [sp, #108]	; 0x6c
 800c208:	780a      	ldrb	r2, [r1, #0]
 800c20a:	2a2b      	cmp	r2, #43	; 0x2b
 800c20c:	d055      	beq.n	800c2ba <_strtod_l+0xc6>
 800c20e:	d841      	bhi.n	800c294 <_strtod_l+0xa0>
 800c210:	2a0d      	cmp	r2, #13
 800c212:	d83b      	bhi.n	800c28c <_strtod_l+0x98>
 800c214:	2a08      	cmp	r2, #8
 800c216:	d83b      	bhi.n	800c290 <_strtod_l+0x9c>
 800c218:	2a00      	cmp	r2, #0
 800c21a:	d044      	beq.n	800c2a6 <_strtod_l+0xb2>
 800c21c:	2200      	movs	r2, #0
 800c21e:	920f      	str	r2, [sp, #60]	; 0x3c
 800c220:	2100      	movs	r1, #0
 800c222:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c224:	9109      	str	r1, [sp, #36]	; 0x24
 800c226:	782a      	ldrb	r2, [r5, #0]
 800c228:	2a30      	cmp	r2, #48	; 0x30
 800c22a:	d000      	beq.n	800c22e <_strtod_l+0x3a>
 800c22c:	e085      	b.n	800c33a <_strtod_l+0x146>
 800c22e:	786a      	ldrb	r2, [r5, #1]
 800c230:	3120      	adds	r1, #32
 800c232:	438a      	bics	r2, r1
 800c234:	2a58      	cmp	r2, #88	; 0x58
 800c236:	d000      	beq.n	800c23a <_strtod_l+0x46>
 800c238:	e075      	b.n	800c326 <_strtod_l+0x132>
 800c23a:	9302      	str	r3, [sp, #8]
 800c23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c23e:	4a97      	ldr	r2, [pc, #604]	; (800c49c <_strtod_l+0x2a8>)
 800c240:	9301      	str	r3, [sp, #4]
 800c242:	ab1c      	add	r3, sp, #112	; 0x70
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	9804      	ldr	r0, [sp, #16]
 800c248:	ab1d      	add	r3, sp, #116	; 0x74
 800c24a:	a91b      	add	r1, sp, #108	; 0x6c
 800c24c:	f001 fb6c 	bl	800d928 <__gethex>
 800c250:	230f      	movs	r3, #15
 800c252:	0002      	movs	r2, r0
 800c254:	401a      	ands	r2, r3
 800c256:	0004      	movs	r4, r0
 800c258:	9205      	str	r2, [sp, #20]
 800c25a:	4218      	tst	r0, r3
 800c25c:	d005      	beq.n	800c26a <_strtod_l+0x76>
 800c25e:	2a06      	cmp	r2, #6
 800c260:	d12d      	bne.n	800c2be <_strtod_l+0xca>
 800c262:	1c6b      	adds	r3, r5, #1
 800c264:	931b      	str	r3, [sp, #108]	; 0x6c
 800c266:	2300      	movs	r3, #0
 800c268:	930f      	str	r3, [sp, #60]	; 0x3c
 800c26a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d002      	beq.n	800c276 <_strtod_l+0x82>
 800c270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c272:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01b      	beq.n	800c2b4 <_strtod_l+0xc0>
 800c27c:	2380      	movs	r3, #128	; 0x80
 800c27e:	0032      	movs	r2, r6
 800c280:	061b      	lsls	r3, r3, #24
 800c282:	18fb      	adds	r3, r7, r3
 800c284:	0010      	movs	r0, r2
 800c286:	0019      	movs	r1, r3
 800c288:	b021      	add	sp, #132	; 0x84
 800c28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28c:	2a20      	cmp	r2, #32
 800c28e:	d1c5      	bne.n	800c21c <_strtod_l+0x28>
 800c290:	3101      	adds	r1, #1
 800c292:	e7b8      	b.n	800c206 <_strtod_l+0x12>
 800c294:	2a2d      	cmp	r2, #45	; 0x2d
 800c296:	d1c1      	bne.n	800c21c <_strtod_l+0x28>
 800c298:	3a2c      	subs	r2, #44	; 0x2c
 800c29a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c29c:	1c4a      	adds	r2, r1, #1
 800c29e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2a0:	784a      	ldrb	r2, [r1, #1]
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	d1bc      	bne.n	800c220 <_strtod_l+0x2c>
 800c2a6:	9b07      	ldr	r3, [sp, #28]
 800c2a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1dd      	bne.n	800c270 <_strtod_l+0x7c>
 800c2b4:	0032      	movs	r2, r6
 800c2b6:	003b      	movs	r3, r7
 800c2b8:	e7e4      	b.n	800c284 <_strtod_l+0x90>
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	e7ed      	b.n	800c29a <_strtod_l+0xa6>
 800c2be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	d007      	beq.n	800c2d4 <_strtod_l+0xe0>
 800c2c4:	2135      	movs	r1, #53	; 0x35
 800c2c6:	a81e      	add	r0, sp, #120	; 0x78
 800c2c8:	f002 fa59 	bl	800e77e <__copybits>
 800c2cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2ce:	9804      	ldr	r0, [sp, #16]
 800c2d0:	f001 fe56 	bl	800df80 <_Bfree>
 800c2d4:	9805      	ldr	r0, [sp, #20]
 800c2d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2d8:	3801      	subs	r0, #1
 800c2da:	2804      	cmp	r0, #4
 800c2dc:	d806      	bhi.n	800c2ec <_strtod_l+0xf8>
 800c2de:	f7f3 ff19 	bl	8000114 <__gnu_thumb1_case_uqi>
 800c2e2:	0312      	.short	0x0312
 800c2e4:	1e1c      	.short	0x1e1c
 800c2e6:	12          	.byte	0x12
 800c2e7:	00          	.byte	0x00
 800c2e8:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c2ea:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c2ec:	05e4      	lsls	r4, r4, #23
 800c2ee:	d502      	bpl.n	800c2f6 <_strtod_l+0x102>
 800c2f0:	2380      	movs	r3, #128	; 0x80
 800c2f2:	061b      	lsls	r3, r3, #24
 800c2f4:	431f      	orrs	r7, r3
 800c2f6:	4b6a      	ldr	r3, [pc, #424]	; (800c4a0 <_strtod_l+0x2ac>)
 800c2f8:	423b      	tst	r3, r7
 800c2fa:	d1b6      	bne.n	800c26a <_strtod_l+0x76>
 800c2fc:	f001 f944 	bl	800d588 <__errno>
 800c300:	2322      	movs	r3, #34	; 0x22
 800c302:	6003      	str	r3, [r0, #0]
 800c304:	e7b1      	b.n	800c26a <_strtod_l+0x76>
 800c306:	4967      	ldr	r1, [pc, #412]	; (800c4a4 <_strtod_l+0x2b0>)
 800c308:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c30a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c30c:	400a      	ands	r2, r1
 800c30e:	4966      	ldr	r1, [pc, #408]	; (800c4a8 <_strtod_l+0x2b4>)
 800c310:	185b      	adds	r3, r3, r1
 800c312:	051b      	lsls	r3, r3, #20
 800c314:	431a      	orrs	r2, r3
 800c316:	0017      	movs	r7, r2
 800c318:	e7e8      	b.n	800c2ec <_strtod_l+0xf8>
 800c31a:	4f61      	ldr	r7, [pc, #388]	; (800c4a0 <_strtod_l+0x2ac>)
 800c31c:	e7e6      	b.n	800c2ec <_strtod_l+0xf8>
 800c31e:	2601      	movs	r6, #1
 800c320:	4f62      	ldr	r7, [pc, #392]	; (800c4ac <_strtod_l+0x2b8>)
 800c322:	4276      	negs	r6, r6
 800c324:	e7e2      	b.n	800c2ec <_strtod_l+0xf8>
 800c326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c32c:	785b      	ldrb	r3, [r3, #1]
 800c32e:	2b30      	cmp	r3, #48	; 0x30
 800c330:	d0f9      	beq.n	800c326 <_strtod_l+0x132>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d099      	beq.n	800c26a <_strtod_l+0x76>
 800c336:	2301      	movs	r3, #1
 800c338:	9309      	str	r3, [sp, #36]	; 0x24
 800c33a:	2500      	movs	r5, #0
 800c33c:	220a      	movs	r2, #10
 800c33e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c340:	950d      	str	r5, [sp, #52]	; 0x34
 800c342:	9310      	str	r3, [sp, #64]	; 0x40
 800c344:	9508      	str	r5, [sp, #32]
 800c346:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c348:	7804      	ldrb	r4, [r0, #0]
 800c34a:	0023      	movs	r3, r4
 800c34c:	3b30      	subs	r3, #48	; 0x30
 800c34e:	b2d9      	uxtb	r1, r3
 800c350:	2909      	cmp	r1, #9
 800c352:	d927      	bls.n	800c3a4 <_strtod_l+0x1b0>
 800c354:	2201      	movs	r2, #1
 800c356:	4956      	ldr	r1, [pc, #344]	; (800c4b0 <_strtod_l+0x2bc>)
 800c358:	f001 f838 	bl	800d3cc <strncmp>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d031      	beq.n	800c3c4 <_strtod_l+0x1d0>
 800c360:	2000      	movs	r0, #0
 800c362:	0023      	movs	r3, r4
 800c364:	4684      	mov	ip, r0
 800c366:	9a08      	ldr	r2, [sp, #32]
 800c368:	900c      	str	r0, [sp, #48]	; 0x30
 800c36a:	9205      	str	r2, [sp, #20]
 800c36c:	2220      	movs	r2, #32
 800c36e:	0019      	movs	r1, r3
 800c370:	4391      	bics	r1, r2
 800c372:	000a      	movs	r2, r1
 800c374:	2100      	movs	r1, #0
 800c376:	9106      	str	r1, [sp, #24]
 800c378:	2a45      	cmp	r2, #69	; 0x45
 800c37a:	d000      	beq.n	800c37e <_strtod_l+0x18a>
 800c37c:	e0c2      	b.n	800c504 <_strtod_l+0x310>
 800c37e:	9b05      	ldr	r3, [sp, #20]
 800c380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c382:	4303      	orrs	r3, r0
 800c384:	4313      	orrs	r3, r2
 800c386:	428b      	cmp	r3, r1
 800c388:	d08d      	beq.n	800c2a6 <_strtod_l+0xb2>
 800c38a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c38c:	9307      	str	r3, [sp, #28]
 800c38e:	3301      	adds	r3, #1
 800c390:	931b      	str	r3, [sp, #108]	; 0x6c
 800c392:	9b07      	ldr	r3, [sp, #28]
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	2b2b      	cmp	r3, #43	; 0x2b
 800c398:	d071      	beq.n	800c47e <_strtod_l+0x28a>
 800c39a:	000c      	movs	r4, r1
 800c39c:	2b2d      	cmp	r3, #45	; 0x2d
 800c39e:	d174      	bne.n	800c48a <_strtod_l+0x296>
 800c3a0:	2401      	movs	r4, #1
 800c3a2:	e06d      	b.n	800c480 <_strtod_l+0x28c>
 800c3a4:	9908      	ldr	r1, [sp, #32]
 800c3a6:	2908      	cmp	r1, #8
 800c3a8:	dc09      	bgt.n	800c3be <_strtod_l+0x1ca>
 800c3aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c3ac:	4351      	muls	r1, r2
 800c3ae:	185b      	adds	r3, r3, r1
 800c3b0:	930d      	str	r3, [sp, #52]	; 0x34
 800c3b2:	9b08      	ldr	r3, [sp, #32]
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	9308      	str	r3, [sp, #32]
 800c3ba:	901b      	str	r0, [sp, #108]	; 0x6c
 800c3bc:	e7c3      	b.n	800c346 <_strtod_l+0x152>
 800c3be:	4355      	muls	r5, r2
 800c3c0:	195d      	adds	r5, r3, r5
 800c3c2:	e7f6      	b.n	800c3b2 <_strtod_l+0x1be>
 800c3c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3ca:	9a08      	ldr	r2, [sp, #32]
 800c3cc:	785b      	ldrb	r3, [r3, #1]
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	d03a      	beq.n	800c448 <_strtod_l+0x254>
 800c3d2:	900c      	str	r0, [sp, #48]	; 0x30
 800c3d4:	9205      	str	r2, [sp, #20]
 800c3d6:	001a      	movs	r2, r3
 800c3d8:	3a30      	subs	r2, #48	; 0x30
 800c3da:	2a09      	cmp	r2, #9
 800c3dc:	d912      	bls.n	800c404 <_strtod_l+0x210>
 800c3de:	2201      	movs	r2, #1
 800c3e0:	4694      	mov	ip, r2
 800c3e2:	e7c3      	b.n	800c36c <_strtod_l+0x178>
 800c3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	1c5a      	adds	r2, r3, #1
 800c3ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b30      	cmp	r3, #48	; 0x30
 800c3f0:	d0f8      	beq.n	800c3e4 <_strtod_l+0x1f0>
 800c3f2:	001a      	movs	r2, r3
 800c3f4:	3a31      	subs	r2, #49	; 0x31
 800c3f6:	2a08      	cmp	r2, #8
 800c3f8:	d83c      	bhi.n	800c474 <_strtod_l+0x280>
 800c3fa:	900c      	str	r0, [sp, #48]	; 0x30
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c400:	9005      	str	r0, [sp, #20]
 800c402:	9210      	str	r2, [sp, #64]	; 0x40
 800c404:	001a      	movs	r2, r3
 800c406:	1c41      	adds	r1, r0, #1
 800c408:	3a30      	subs	r2, #48	; 0x30
 800c40a:	2b30      	cmp	r3, #48	; 0x30
 800c40c:	d016      	beq.n	800c43c <_strtod_l+0x248>
 800c40e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c410:	185b      	adds	r3, r3, r1
 800c412:	930c      	str	r3, [sp, #48]	; 0x30
 800c414:	9b05      	ldr	r3, [sp, #20]
 800c416:	210a      	movs	r1, #10
 800c418:	469c      	mov	ip, r3
 800c41a:	4484      	add	ip, r0
 800c41c:	4563      	cmp	r3, ip
 800c41e:	d115      	bne.n	800c44c <_strtod_l+0x258>
 800c420:	9905      	ldr	r1, [sp, #20]
 800c422:	9b05      	ldr	r3, [sp, #20]
 800c424:	3101      	adds	r1, #1
 800c426:	1809      	adds	r1, r1, r0
 800c428:	181b      	adds	r3, r3, r0
 800c42a:	9105      	str	r1, [sp, #20]
 800c42c:	2b08      	cmp	r3, #8
 800c42e:	dc19      	bgt.n	800c464 <_strtod_l+0x270>
 800c430:	230a      	movs	r3, #10
 800c432:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c434:	434b      	muls	r3, r1
 800c436:	2100      	movs	r1, #0
 800c438:	18d3      	adds	r3, r2, r3
 800c43a:	930d      	str	r3, [sp, #52]	; 0x34
 800c43c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c43e:	0008      	movs	r0, r1
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	921b      	str	r2, [sp, #108]	; 0x6c
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	e7c6      	b.n	800c3d6 <_strtod_l+0x1e2>
 800c448:	9808      	ldr	r0, [sp, #32]
 800c44a:	e7d0      	b.n	800c3ee <_strtod_l+0x1fa>
 800c44c:	1c5c      	adds	r4, r3, #1
 800c44e:	2b08      	cmp	r3, #8
 800c450:	dc04      	bgt.n	800c45c <_strtod_l+0x268>
 800c452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c454:	434b      	muls	r3, r1
 800c456:	930d      	str	r3, [sp, #52]	; 0x34
 800c458:	0023      	movs	r3, r4
 800c45a:	e7df      	b.n	800c41c <_strtod_l+0x228>
 800c45c:	2c10      	cmp	r4, #16
 800c45e:	dcfb      	bgt.n	800c458 <_strtod_l+0x264>
 800c460:	434d      	muls	r5, r1
 800c462:	e7f9      	b.n	800c458 <_strtod_l+0x264>
 800c464:	9b05      	ldr	r3, [sp, #20]
 800c466:	2100      	movs	r1, #0
 800c468:	2b10      	cmp	r3, #16
 800c46a:	dce7      	bgt.n	800c43c <_strtod_l+0x248>
 800c46c:	230a      	movs	r3, #10
 800c46e:	435d      	muls	r5, r3
 800c470:	1955      	adds	r5, r2, r5
 800c472:	e7e3      	b.n	800c43c <_strtod_l+0x248>
 800c474:	2200      	movs	r2, #0
 800c476:	920c      	str	r2, [sp, #48]	; 0x30
 800c478:	9205      	str	r2, [sp, #20]
 800c47a:	3201      	adds	r2, #1
 800c47c:	e7b0      	b.n	800c3e0 <_strtod_l+0x1ec>
 800c47e:	2400      	movs	r4, #0
 800c480:	9b07      	ldr	r3, [sp, #28]
 800c482:	3302      	adds	r3, #2
 800c484:	931b      	str	r3, [sp, #108]	; 0x6c
 800c486:	9b07      	ldr	r3, [sp, #28]
 800c488:	789b      	ldrb	r3, [r3, #2]
 800c48a:	001a      	movs	r2, r3
 800c48c:	3a30      	subs	r2, #48	; 0x30
 800c48e:	2a09      	cmp	r2, #9
 800c490:	d914      	bls.n	800c4bc <_strtod_l+0x2c8>
 800c492:	9a07      	ldr	r2, [sp, #28]
 800c494:	921b      	str	r2, [sp, #108]	; 0x6c
 800c496:	2200      	movs	r2, #0
 800c498:	e033      	b.n	800c502 <_strtod_l+0x30e>
 800c49a:	46c0      	nop			; (mov r8, r8)
 800c49c:	08015ac4 	.word	0x08015ac4
 800c4a0:	7ff00000 	.word	0x7ff00000
 800c4a4:	ffefffff 	.word	0xffefffff
 800c4a8:	00000433 	.word	0x00000433
 800c4ac:	7fffffff 	.word	0x7fffffff
 800c4b0:	08015ac0 	.word	0x08015ac0
 800c4b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b6:	1c5a      	adds	r2, r3, #1
 800c4b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800c4ba:	785b      	ldrb	r3, [r3, #1]
 800c4bc:	2b30      	cmp	r3, #48	; 0x30
 800c4be:	d0f9      	beq.n	800c4b4 <_strtod_l+0x2c0>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	9206      	str	r2, [sp, #24]
 800c4c4:	001a      	movs	r2, r3
 800c4c6:	3a31      	subs	r2, #49	; 0x31
 800c4c8:	2a08      	cmp	r2, #8
 800c4ca:	d81b      	bhi.n	800c504 <_strtod_l+0x310>
 800c4cc:	3b30      	subs	r3, #48	; 0x30
 800c4ce:	930e      	str	r3, [sp, #56]	; 0x38
 800c4d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4d2:	9306      	str	r3, [sp, #24]
 800c4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4d6:	1c59      	adds	r1, r3, #1
 800c4d8:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4da:	785b      	ldrb	r3, [r3, #1]
 800c4dc:	001a      	movs	r2, r3
 800c4de:	3a30      	subs	r2, #48	; 0x30
 800c4e0:	2a09      	cmp	r2, #9
 800c4e2:	d93a      	bls.n	800c55a <_strtod_l+0x366>
 800c4e4:	9a06      	ldr	r2, [sp, #24]
 800c4e6:	1a8a      	subs	r2, r1, r2
 800c4e8:	49b2      	ldr	r1, [pc, #712]	; (800c7b4 <_strtod_l+0x5c0>)
 800c4ea:	9106      	str	r1, [sp, #24]
 800c4ec:	2a08      	cmp	r2, #8
 800c4ee:	dc04      	bgt.n	800c4fa <_strtod_l+0x306>
 800c4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4f2:	9206      	str	r2, [sp, #24]
 800c4f4:	428a      	cmp	r2, r1
 800c4f6:	dd00      	ble.n	800c4fa <_strtod_l+0x306>
 800c4f8:	9106      	str	r1, [sp, #24]
 800c4fa:	2c00      	cmp	r4, #0
 800c4fc:	d002      	beq.n	800c504 <_strtod_l+0x310>
 800c4fe:	9a06      	ldr	r2, [sp, #24]
 800c500:	4252      	negs	r2, r2
 800c502:	9206      	str	r2, [sp, #24]
 800c504:	9a05      	ldr	r2, [sp, #20]
 800c506:	2a00      	cmp	r2, #0
 800c508:	d14d      	bne.n	800c5a6 <_strtod_l+0x3b2>
 800c50a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c50c:	4310      	orrs	r0, r2
 800c50e:	d000      	beq.n	800c512 <_strtod_l+0x31e>
 800c510:	e6ab      	b.n	800c26a <_strtod_l+0x76>
 800c512:	4662      	mov	r2, ip
 800c514:	2a00      	cmp	r2, #0
 800c516:	d000      	beq.n	800c51a <_strtod_l+0x326>
 800c518:	e6c5      	b.n	800c2a6 <_strtod_l+0xb2>
 800c51a:	2b69      	cmp	r3, #105	; 0x69
 800c51c:	d027      	beq.n	800c56e <_strtod_l+0x37a>
 800c51e:	dc23      	bgt.n	800c568 <_strtod_l+0x374>
 800c520:	2b49      	cmp	r3, #73	; 0x49
 800c522:	d024      	beq.n	800c56e <_strtod_l+0x37a>
 800c524:	2b4e      	cmp	r3, #78	; 0x4e
 800c526:	d000      	beq.n	800c52a <_strtod_l+0x336>
 800c528:	e6bd      	b.n	800c2a6 <_strtod_l+0xb2>
 800c52a:	49a3      	ldr	r1, [pc, #652]	; (800c7b8 <_strtod_l+0x5c4>)
 800c52c:	a81b      	add	r0, sp, #108	; 0x6c
 800c52e:	f001 fc31 	bl	800dd94 <__match>
 800c532:	2800      	cmp	r0, #0
 800c534:	d100      	bne.n	800c538 <_strtod_l+0x344>
 800c536:	e6b6      	b.n	800c2a6 <_strtod_l+0xb2>
 800c538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b28      	cmp	r3, #40	; 0x28
 800c53e:	d12c      	bne.n	800c59a <_strtod_l+0x3a6>
 800c540:	499e      	ldr	r1, [pc, #632]	; (800c7bc <_strtod_l+0x5c8>)
 800c542:	aa1e      	add	r2, sp, #120	; 0x78
 800c544:	a81b      	add	r0, sp, #108	; 0x6c
 800c546:	f001 fc39 	bl	800ddbc <__hexnan>
 800c54a:	2805      	cmp	r0, #5
 800c54c:	d125      	bne.n	800c59a <_strtod_l+0x3a6>
 800c54e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c550:	4a9b      	ldr	r2, [pc, #620]	; (800c7c0 <_strtod_l+0x5cc>)
 800c552:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c554:	431a      	orrs	r2, r3
 800c556:	0017      	movs	r7, r2
 800c558:	e687      	b.n	800c26a <_strtod_l+0x76>
 800c55a:	220a      	movs	r2, #10
 800c55c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c55e:	434a      	muls	r2, r1
 800c560:	18d2      	adds	r2, r2, r3
 800c562:	3a30      	subs	r2, #48	; 0x30
 800c564:	920e      	str	r2, [sp, #56]	; 0x38
 800c566:	e7b5      	b.n	800c4d4 <_strtod_l+0x2e0>
 800c568:	2b6e      	cmp	r3, #110	; 0x6e
 800c56a:	d0de      	beq.n	800c52a <_strtod_l+0x336>
 800c56c:	e69b      	b.n	800c2a6 <_strtod_l+0xb2>
 800c56e:	4995      	ldr	r1, [pc, #596]	; (800c7c4 <_strtod_l+0x5d0>)
 800c570:	a81b      	add	r0, sp, #108	; 0x6c
 800c572:	f001 fc0f 	bl	800dd94 <__match>
 800c576:	2800      	cmp	r0, #0
 800c578:	d100      	bne.n	800c57c <_strtod_l+0x388>
 800c57a:	e694      	b.n	800c2a6 <_strtod_l+0xb2>
 800c57c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c57e:	4992      	ldr	r1, [pc, #584]	; (800c7c8 <_strtod_l+0x5d4>)
 800c580:	3b01      	subs	r3, #1
 800c582:	a81b      	add	r0, sp, #108	; 0x6c
 800c584:	931b      	str	r3, [sp, #108]	; 0x6c
 800c586:	f001 fc05 	bl	800dd94 <__match>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d102      	bne.n	800c594 <_strtod_l+0x3a0>
 800c58e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c590:	3301      	adds	r3, #1
 800c592:	931b      	str	r3, [sp, #108]	; 0x6c
 800c594:	2600      	movs	r6, #0
 800c596:	4f8a      	ldr	r7, [pc, #552]	; (800c7c0 <_strtod_l+0x5cc>)
 800c598:	e667      	b.n	800c26a <_strtod_l+0x76>
 800c59a:	488c      	ldr	r0, [pc, #560]	; (800c7cc <_strtod_l+0x5d8>)
 800c59c:	f001 f836 	bl	800d60c <nan>
 800c5a0:	0006      	movs	r6, r0
 800c5a2:	000f      	movs	r7, r1
 800c5a4:	e661      	b.n	800c26a <_strtod_l+0x76>
 800c5a6:	9b06      	ldr	r3, [sp, #24]
 800c5a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5aa:	1a9b      	subs	r3, r3, r2
 800c5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ae:	9b08      	ldr	r3, [sp, #32]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d101      	bne.n	800c5b8 <_strtod_l+0x3c4>
 800c5b4:	9b05      	ldr	r3, [sp, #20]
 800c5b6:	9308      	str	r3, [sp, #32]
 800c5b8:	9c05      	ldr	r4, [sp, #20]
 800c5ba:	2c10      	cmp	r4, #16
 800c5bc:	dd00      	ble.n	800c5c0 <_strtod_l+0x3cc>
 800c5be:	2410      	movs	r4, #16
 800c5c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c5c2:	f7f5 ff1b 	bl	80023fc <__aeabi_ui2d>
 800c5c6:	9b05      	ldr	r3, [sp, #20]
 800c5c8:	0006      	movs	r6, r0
 800c5ca:	000f      	movs	r7, r1
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	dd15      	ble.n	800c5fc <_strtod_l+0x408>
 800c5d0:	0022      	movs	r2, r4
 800c5d2:	4b7f      	ldr	r3, [pc, #508]	; (800c7d0 <_strtod_l+0x5dc>)
 800c5d4:	3a09      	subs	r2, #9
 800c5d6:	00d2      	lsls	r2, r2, #3
 800c5d8:	189b      	adds	r3, r3, r2
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	f7f5 f845 	bl	800166c <__aeabi_dmul>
 800c5e2:	0006      	movs	r6, r0
 800c5e4:	0028      	movs	r0, r5
 800c5e6:	000f      	movs	r7, r1
 800c5e8:	f7f5 ff08 	bl	80023fc <__aeabi_ui2d>
 800c5ec:	0002      	movs	r2, r0
 800c5ee:	000b      	movs	r3, r1
 800c5f0:	0030      	movs	r0, r6
 800c5f2:	0039      	movs	r1, r7
 800c5f4:	f7f4 f8e0 	bl	80007b8 <__aeabi_dadd>
 800c5f8:	0006      	movs	r6, r0
 800c5fa:	000f      	movs	r7, r1
 800c5fc:	9b05      	ldr	r3, [sp, #20]
 800c5fe:	2b0f      	cmp	r3, #15
 800c600:	dc39      	bgt.n	800c676 <_strtod_l+0x482>
 800c602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c604:	2b00      	cmp	r3, #0
 800c606:	d100      	bne.n	800c60a <_strtod_l+0x416>
 800c608:	e62f      	b.n	800c26a <_strtod_l+0x76>
 800c60a:	dd24      	ble.n	800c656 <_strtod_l+0x462>
 800c60c:	2b16      	cmp	r3, #22
 800c60e:	dc09      	bgt.n	800c624 <_strtod_l+0x430>
 800c610:	496f      	ldr	r1, [pc, #444]	; (800c7d0 <_strtod_l+0x5dc>)
 800c612:	00db      	lsls	r3, r3, #3
 800c614:	18c9      	adds	r1, r1, r3
 800c616:	0032      	movs	r2, r6
 800c618:	6808      	ldr	r0, [r1, #0]
 800c61a:	6849      	ldr	r1, [r1, #4]
 800c61c:	003b      	movs	r3, r7
 800c61e:	f7f5 f825 	bl	800166c <__aeabi_dmul>
 800c622:	e7bd      	b.n	800c5a0 <_strtod_l+0x3ac>
 800c624:	2325      	movs	r3, #37	; 0x25
 800c626:	9a05      	ldr	r2, [sp, #20]
 800c628:	1a9b      	subs	r3, r3, r2
 800c62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62c:	4293      	cmp	r3, r2
 800c62e:	db22      	blt.n	800c676 <_strtod_l+0x482>
 800c630:	240f      	movs	r4, #15
 800c632:	9b05      	ldr	r3, [sp, #20]
 800c634:	4d66      	ldr	r5, [pc, #408]	; (800c7d0 <_strtod_l+0x5dc>)
 800c636:	1ae4      	subs	r4, r4, r3
 800c638:	00e1      	lsls	r1, r4, #3
 800c63a:	1869      	adds	r1, r5, r1
 800c63c:	0032      	movs	r2, r6
 800c63e:	6808      	ldr	r0, [r1, #0]
 800c640:	6849      	ldr	r1, [r1, #4]
 800c642:	003b      	movs	r3, r7
 800c644:	f7f5 f812 	bl	800166c <__aeabi_dmul>
 800c648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64a:	1b1c      	subs	r4, r3, r4
 800c64c:	00e4      	lsls	r4, r4, #3
 800c64e:	192d      	adds	r5, r5, r4
 800c650:	682a      	ldr	r2, [r5, #0]
 800c652:	686b      	ldr	r3, [r5, #4]
 800c654:	e7e3      	b.n	800c61e <_strtod_l+0x42a>
 800c656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c658:	3316      	adds	r3, #22
 800c65a:	db0c      	blt.n	800c676 <_strtod_l+0x482>
 800c65c:	9906      	ldr	r1, [sp, #24]
 800c65e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c660:	4b5b      	ldr	r3, [pc, #364]	; (800c7d0 <_strtod_l+0x5dc>)
 800c662:	1a52      	subs	r2, r2, r1
 800c664:	00d2      	lsls	r2, r2, #3
 800c666:	189b      	adds	r3, r3, r2
 800c668:	0030      	movs	r0, r6
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	0039      	movs	r1, r7
 800c670:	f7f4 fc02 	bl	8000e78 <__aeabi_ddiv>
 800c674:	e794      	b.n	800c5a0 <_strtod_l+0x3ac>
 800c676:	9b05      	ldr	r3, [sp, #20]
 800c678:	1b1c      	subs	r4, r3, r4
 800c67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c67c:	18e4      	adds	r4, r4, r3
 800c67e:	2c00      	cmp	r4, #0
 800c680:	dd72      	ble.n	800c768 <_strtod_l+0x574>
 800c682:	220f      	movs	r2, #15
 800c684:	0023      	movs	r3, r4
 800c686:	4013      	ands	r3, r2
 800c688:	4214      	tst	r4, r2
 800c68a:	d00a      	beq.n	800c6a2 <_strtod_l+0x4ae>
 800c68c:	4950      	ldr	r1, [pc, #320]	; (800c7d0 <_strtod_l+0x5dc>)
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	18c9      	adds	r1, r1, r3
 800c692:	0032      	movs	r2, r6
 800c694:	6808      	ldr	r0, [r1, #0]
 800c696:	6849      	ldr	r1, [r1, #4]
 800c698:	003b      	movs	r3, r7
 800c69a:	f7f4 ffe7 	bl	800166c <__aeabi_dmul>
 800c69e:	0006      	movs	r6, r0
 800c6a0:	000f      	movs	r7, r1
 800c6a2:	230f      	movs	r3, #15
 800c6a4:	439c      	bics	r4, r3
 800c6a6:	d04a      	beq.n	800c73e <_strtod_l+0x54a>
 800c6a8:	3326      	adds	r3, #38	; 0x26
 800c6aa:	33ff      	adds	r3, #255	; 0xff
 800c6ac:	429c      	cmp	r4, r3
 800c6ae:	dd22      	ble.n	800c6f6 <_strtod_l+0x502>
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	9305      	str	r3, [sp, #20]
 800c6b4:	9306      	str	r3, [sp, #24]
 800c6b6:	930d      	str	r3, [sp, #52]	; 0x34
 800c6b8:	9308      	str	r3, [sp, #32]
 800c6ba:	2322      	movs	r3, #34	; 0x22
 800c6bc:	2600      	movs	r6, #0
 800c6be:	9a04      	ldr	r2, [sp, #16]
 800c6c0:	4f3f      	ldr	r7, [pc, #252]	; (800c7c0 <_strtod_l+0x5cc>)
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6c6:	42b3      	cmp	r3, r6
 800c6c8:	d100      	bne.n	800c6cc <_strtod_l+0x4d8>
 800c6ca:	e5ce      	b.n	800c26a <_strtod_l+0x76>
 800c6cc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c6ce:	9804      	ldr	r0, [sp, #16]
 800c6d0:	f001 fc56 	bl	800df80 <_Bfree>
 800c6d4:	9908      	ldr	r1, [sp, #32]
 800c6d6:	9804      	ldr	r0, [sp, #16]
 800c6d8:	f001 fc52 	bl	800df80 <_Bfree>
 800c6dc:	9906      	ldr	r1, [sp, #24]
 800c6de:	9804      	ldr	r0, [sp, #16]
 800c6e0:	f001 fc4e 	bl	800df80 <_Bfree>
 800c6e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c6e6:	9804      	ldr	r0, [sp, #16]
 800c6e8:	f001 fc4a 	bl	800df80 <_Bfree>
 800c6ec:	9905      	ldr	r1, [sp, #20]
 800c6ee:	9804      	ldr	r0, [sp, #16]
 800c6f0:	f001 fc46 	bl	800df80 <_Bfree>
 800c6f4:	e5b9      	b.n	800c26a <_strtod_l+0x76>
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	0030      	movs	r0, r6
 800c6fa:	0039      	movs	r1, r7
 800c6fc:	4d35      	ldr	r5, [pc, #212]	; (800c7d4 <_strtod_l+0x5e0>)
 800c6fe:	1124      	asrs	r4, r4, #4
 800c700:	9307      	str	r3, [sp, #28]
 800c702:	2c01      	cmp	r4, #1
 800c704:	dc1e      	bgt.n	800c744 <_strtod_l+0x550>
 800c706:	2b00      	cmp	r3, #0
 800c708:	d001      	beq.n	800c70e <_strtod_l+0x51a>
 800c70a:	0006      	movs	r6, r0
 800c70c:	000f      	movs	r7, r1
 800c70e:	4b32      	ldr	r3, [pc, #200]	; (800c7d8 <_strtod_l+0x5e4>)
 800c710:	9a07      	ldr	r2, [sp, #28]
 800c712:	18ff      	adds	r7, r7, r3
 800c714:	4b2f      	ldr	r3, [pc, #188]	; (800c7d4 <_strtod_l+0x5e0>)
 800c716:	00d2      	lsls	r2, r2, #3
 800c718:	189d      	adds	r5, r3, r2
 800c71a:	6828      	ldr	r0, [r5, #0]
 800c71c:	6869      	ldr	r1, [r5, #4]
 800c71e:	0032      	movs	r2, r6
 800c720:	003b      	movs	r3, r7
 800c722:	f7f4 ffa3 	bl	800166c <__aeabi_dmul>
 800c726:	4b26      	ldr	r3, [pc, #152]	; (800c7c0 <_strtod_l+0x5cc>)
 800c728:	4a2c      	ldr	r2, [pc, #176]	; (800c7dc <_strtod_l+0x5e8>)
 800c72a:	0006      	movs	r6, r0
 800c72c:	400b      	ands	r3, r1
 800c72e:	4293      	cmp	r3, r2
 800c730:	d8be      	bhi.n	800c6b0 <_strtod_l+0x4bc>
 800c732:	4a2b      	ldr	r2, [pc, #172]	; (800c7e0 <_strtod_l+0x5ec>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d913      	bls.n	800c760 <_strtod_l+0x56c>
 800c738:	2601      	movs	r6, #1
 800c73a:	4f2a      	ldr	r7, [pc, #168]	; (800c7e4 <_strtod_l+0x5f0>)
 800c73c:	4276      	negs	r6, r6
 800c73e:	2300      	movs	r3, #0
 800c740:	9307      	str	r3, [sp, #28]
 800c742:	e088      	b.n	800c856 <_strtod_l+0x662>
 800c744:	2201      	movs	r2, #1
 800c746:	4214      	tst	r4, r2
 800c748:	d004      	beq.n	800c754 <_strtod_l+0x560>
 800c74a:	682a      	ldr	r2, [r5, #0]
 800c74c:	686b      	ldr	r3, [r5, #4]
 800c74e:	f7f4 ff8d 	bl	800166c <__aeabi_dmul>
 800c752:	2301      	movs	r3, #1
 800c754:	9a07      	ldr	r2, [sp, #28]
 800c756:	1064      	asrs	r4, r4, #1
 800c758:	3201      	adds	r2, #1
 800c75a:	9207      	str	r2, [sp, #28]
 800c75c:	3508      	adds	r5, #8
 800c75e:	e7d0      	b.n	800c702 <_strtod_l+0x50e>
 800c760:	23d4      	movs	r3, #212	; 0xd4
 800c762:	049b      	lsls	r3, r3, #18
 800c764:	18cf      	adds	r7, r1, r3
 800c766:	e7ea      	b.n	800c73e <_strtod_l+0x54a>
 800c768:	2c00      	cmp	r4, #0
 800c76a:	d0e8      	beq.n	800c73e <_strtod_l+0x54a>
 800c76c:	4264      	negs	r4, r4
 800c76e:	230f      	movs	r3, #15
 800c770:	0022      	movs	r2, r4
 800c772:	401a      	ands	r2, r3
 800c774:	421c      	tst	r4, r3
 800c776:	d00a      	beq.n	800c78e <_strtod_l+0x59a>
 800c778:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <_strtod_l+0x5dc>)
 800c77a:	00d2      	lsls	r2, r2, #3
 800c77c:	189b      	adds	r3, r3, r2
 800c77e:	0030      	movs	r0, r6
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	0039      	movs	r1, r7
 800c786:	f7f4 fb77 	bl	8000e78 <__aeabi_ddiv>
 800c78a:	0006      	movs	r6, r0
 800c78c:	000f      	movs	r7, r1
 800c78e:	1124      	asrs	r4, r4, #4
 800c790:	d0d5      	beq.n	800c73e <_strtod_l+0x54a>
 800c792:	2c1f      	cmp	r4, #31
 800c794:	dd28      	ble.n	800c7e8 <_strtod_l+0x5f4>
 800c796:	2300      	movs	r3, #0
 800c798:	9305      	str	r3, [sp, #20]
 800c79a:	9306      	str	r3, [sp, #24]
 800c79c:	930d      	str	r3, [sp, #52]	; 0x34
 800c79e:	9308      	str	r3, [sp, #32]
 800c7a0:	2322      	movs	r3, #34	; 0x22
 800c7a2:	9a04      	ldr	r2, [sp, #16]
 800c7a4:	2600      	movs	r6, #0
 800c7a6:	6013      	str	r3, [r2, #0]
 800c7a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7aa:	2700      	movs	r7, #0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d18d      	bne.n	800c6cc <_strtod_l+0x4d8>
 800c7b0:	e55b      	b.n	800c26a <_strtod_l+0x76>
 800c7b2:	46c0      	nop			; (mov r8, r8)
 800c7b4:	00004e1f 	.word	0x00004e1f
 800c7b8:	08015df9 	.word	0x08015df9
 800c7bc:	08015ad8 	.word	0x08015ad8
 800c7c0:	7ff00000 	.word	0x7ff00000
 800c7c4:	08015df1 	.word	0x08015df1
 800c7c8:	08015ea7 	.word	0x08015ea7
 800c7cc:	08015ea3 	.word	0x08015ea3
 800c7d0:	08015d18 	.word	0x08015d18
 800c7d4:	08015cf0 	.word	0x08015cf0
 800c7d8:	fcb00000 	.word	0xfcb00000
 800c7dc:	7ca00000 	.word	0x7ca00000
 800c7e0:	7c900000 	.word	0x7c900000
 800c7e4:	7fefffff 	.word	0x7fefffff
 800c7e8:	2310      	movs	r3, #16
 800c7ea:	0022      	movs	r2, r4
 800c7ec:	401a      	ands	r2, r3
 800c7ee:	9207      	str	r2, [sp, #28]
 800c7f0:	421c      	tst	r4, r3
 800c7f2:	d001      	beq.n	800c7f8 <_strtod_l+0x604>
 800c7f4:	335a      	adds	r3, #90	; 0x5a
 800c7f6:	9307      	str	r3, [sp, #28]
 800c7f8:	0030      	movs	r0, r6
 800c7fa:	0039      	movs	r1, r7
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4dc4      	ldr	r5, [pc, #784]	; (800cb10 <_strtod_l+0x91c>)
 800c800:	2201      	movs	r2, #1
 800c802:	4214      	tst	r4, r2
 800c804:	d004      	beq.n	800c810 <_strtod_l+0x61c>
 800c806:	682a      	ldr	r2, [r5, #0]
 800c808:	686b      	ldr	r3, [r5, #4]
 800c80a:	f7f4 ff2f 	bl	800166c <__aeabi_dmul>
 800c80e:	2301      	movs	r3, #1
 800c810:	1064      	asrs	r4, r4, #1
 800c812:	3508      	adds	r5, #8
 800c814:	2c00      	cmp	r4, #0
 800c816:	d1f3      	bne.n	800c800 <_strtod_l+0x60c>
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <_strtod_l+0x62c>
 800c81c:	0006      	movs	r6, r0
 800c81e:	000f      	movs	r7, r1
 800c820:	9b07      	ldr	r3, [sp, #28]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00f      	beq.n	800c846 <_strtod_l+0x652>
 800c826:	236b      	movs	r3, #107	; 0x6b
 800c828:	007a      	lsls	r2, r7, #1
 800c82a:	0d52      	lsrs	r2, r2, #21
 800c82c:	0039      	movs	r1, r7
 800c82e:	1a9b      	subs	r3, r3, r2
 800c830:	2b00      	cmp	r3, #0
 800c832:	dd08      	ble.n	800c846 <_strtod_l+0x652>
 800c834:	2b1f      	cmp	r3, #31
 800c836:	dc00      	bgt.n	800c83a <_strtod_l+0x646>
 800c838:	e121      	b.n	800ca7e <_strtod_l+0x88a>
 800c83a:	2600      	movs	r6, #0
 800c83c:	2b34      	cmp	r3, #52	; 0x34
 800c83e:	dc00      	bgt.n	800c842 <_strtod_l+0x64e>
 800c840:	e116      	b.n	800ca70 <_strtod_l+0x87c>
 800c842:	27dc      	movs	r7, #220	; 0xdc
 800c844:	04bf      	lsls	r7, r7, #18
 800c846:	2200      	movs	r2, #0
 800c848:	2300      	movs	r3, #0
 800c84a:	0030      	movs	r0, r6
 800c84c:	0039      	movs	r1, r7
 800c84e:	f7f3 fdfb 	bl	8000448 <__aeabi_dcmpeq>
 800c852:	2800      	cmp	r0, #0
 800c854:	d19f      	bne.n	800c796 <_strtod_l+0x5a2>
 800c856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c858:	9a08      	ldr	r2, [sp, #32]
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c85e:	9b05      	ldr	r3, [sp, #20]
 800c860:	9804      	ldr	r0, [sp, #16]
 800c862:	f001 fbdb 	bl	800e01c <__s2b>
 800c866:	900d      	str	r0, [sp, #52]	; 0x34
 800c868:	2800      	cmp	r0, #0
 800c86a:	d100      	bne.n	800c86e <_strtod_l+0x67a>
 800c86c:	e720      	b.n	800c6b0 <_strtod_l+0x4bc>
 800c86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c870:	9906      	ldr	r1, [sp, #24]
 800c872:	17da      	asrs	r2, r3, #31
 800c874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c876:	1a5b      	subs	r3, r3, r1
 800c878:	401a      	ands	r2, r3
 800c87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87c:	9215      	str	r2, [sp, #84]	; 0x54
 800c87e:	43db      	mvns	r3, r3
 800c880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c882:	17db      	asrs	r3, r3, #31
 800c884:	401a      	ands	r2, r3
 800c886:	2300      	movs	r3, #0
 800c888:	9218      	str	r2, [sp, #96]	; 0x60
 800c88a:	9305      	str	r3, [sp, #20]
 800c88c:	9306      	str	r3, [sp, #24]
 800c88e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c890:	9804      	ldr	r0, [sp, #16]
 800c892:	6859      	ldr	r1, [r3, #4]
 800c894:	f001 fb4c 	bl	800df30 <_Balloc>
 800c898:	9008      	str	r0, [sp, #32]
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d100      	bne.n	800c8a0 <_strtod_l+0x6ac>
 800c89e:	e70c      	b.n	800c6ba <_strtod_l+0x4c6>
 800c8a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8a2:	300c      	adds	r0, #12
 800c8a4:	0019      	movs	r1, r3
 800c8a6:	691a      	ldr	r2, [r3, #16]
 800c8a8:	310c      	adds	r1, #12
 800c8aa:	3202      	adds	r2, #2
 800c8ac:	0092      	lsls	r2, r2, #2
 800c8ae:	f000 fea4 	bl	800d5fa <memcpy>
 800c8b2:	ab1e      	add	r3, sp, #120	; 0x78
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	ab1d      	add	r3, sp, #116	; 0x74
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	0032      	movs	r2, r6
 800c8bc:	003b      	movs	r3, r7
 800c8be:	9804      	ldr	r0, [sp, #16]
 800c8c0:	9610      	str	r6, [sp, #64]	; 0x40
 800c8c2:	9711      	str	r7, [sp, #68]	; 0x44
 800c8c4:	f001 fed2 	bl	800e66c <__d2b>
 800c8c8:	901c      	str	r0, [sp, #112]	; 0x70
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d100      	bne.n	800c8d0 <_strtod_l+0x6dc>
 800c8ce:	e6f4      	b.n	800c6ba <_strtod_l+0x4c6>
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	9804      	ldr	r0, [sp, #16]
 800c8d4:	f001 fc36 	bl	800e144 <__i2b>
 800c8d8:	9006      	str	r0, [sp, #24]
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d100      	bne.n	800c8e0 <_strtod_l+0x6ec>
 800c8de:	e6ec      	b.n	800c6ba <_strtod_l+0x4c6>
 800c8e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c8e4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c8e6:	1ad4      	subs	r4, r2, r3
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	db01      	blt.n	800c8f0 <_strtod_l+0x6fc>
 800c8ec:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800c8ee:	195d      	adds	r5, r3, r5
 800c8f0:	9907      	ldr	r1, [sp, #28]
 800c8f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c8f4:	1a5b      	subs	r3, r3, r1
 800c8f6:	2136      	movs	r1, #54	; 0x36
 800c8f8:	189b      	adds	r3, r3, r2
 800c8fa:	1a8a      	subs	r2, r1, r2
 800c8fc:	4985      	ldr	r1, [pc, #532]	; (800cb14 <_strtod_l+0x920>)
 800c8fe:	2001      	movs	r0, #1
 800c900:	468c      	mov	ip, r1
 800c902:	2100      	movs	r1, #0
 800c904:	3b01      	subs	r3, #1
 800c906:	9114      	str	r1, [sp, #80]	; 0x50
 800c908:	9012      	str	r0, [sp, #72]	; 0x48
 800c90a:	4563      	cmp	r3, ip
 800c90c:	da07      	bge.n	800c91e <_strtod_l+0x72a>
 800c90e:	4661      	mov	r1, ip
 800c910:	1ac9      	subs	r1, r1, r3
 800c912:	1a52      	subs	r2, r2, r1
 800c914:	291f      	cmp	r1, #31
 800c916:	dd00      	ble.n	800c91a <_strtod_l+0x726>
 800c918:	e0b6      	b.n	800ca88 <_strtod_l+0x894>
 800c91a:	4088      	lsls	r0, r1
 800c91c:	9012      	str	r0, [sp, #72]	; 0x48
 800c91e:	18ab      	adds	r3, r5, r2
 800c920:	930c      	str	r3, [sp, #48]	; 0x30
 800c922:	18a4      	adds	r4, r4, r2
 800c924:	9b07      	ldr	r3, [sp, #28]
 800c926:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c928:	191c      	adds	r4, r3, r4
 800c92a:	002b      	movs	r3, r5
 800c92c:	4295      	cmp	r5, r2
 800c92e:	dd00      	ble.n	800c932 <_strtod_l+0x73e>
 800c930:	0013      	movs	r3, r2
 800c932:	42a3      	cmp	r3, r4
 800c934:	dd00      	ble.n	800c938 <_strtod_l+0x744>
 800c936:	0023      	movs	r3, r4
 800c938:	2b00      	cmp	r3, #0
 800c93a:	dd04      	ble.n	800c946 <_strtod_l+0x752>
 800c93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c93e:	1ae4      	subs	r4, r4, r3
 800c940:	1ad2      	subs	r2, r2, r3
 800c942:	920c      	str	r2, [sp, #48]	; 0x30
 800c944:	1aed      	subs	r5, r5, r3
 800c946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c948:	2b00      	cmp	r3, #0
 800c94a:	dd17      	ble.n	800c97c <_strtod_l+0x788>
 800c94c:	001a      	movs	r2, r3
 800c94e:	9906      	ldr	r1, [sp, #24]
 800c950:	9804      	ldr	r0, [sp, #16]
 800c952:	f001 fcbf 	bl	800e2d4 <__pow5mult>
 800c956:	9006      	str	r0, [sp, #24]
 800c958:	2800      	cmp	r0, #0
 800c95a:	d100      	bne.n	800c95e <_strtod_l+0x76a>
 800c95c:	e6ad      	b.n	800c6ba <_strtod_l+0x4c6>
 800c95e:	0001      	movs	r1, r0
 800c960:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c962:	9804      	ldr	r0, [sp, #16]
 800c964:	f001 fc06 	bl	800e174 <__multiply>
 800c968:	900e      	str	r0, [sp, #56]	; 0x38
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d100      	bne.n	800c970 <_strtod_l+0x77c>
 800c96e:	e6a4      	b.n	800c6ba <_strtod_l+0x4c6>
 800c970:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c972:	9804      	ldr	r0, [sp, #16]
 800c974:	f001 fb04 	bl	800df80 <_Bfree>
 800c978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c97a:	931c      	str	r3, [sp, #112]	; 0x70
 800c97c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c97e:	2b00      	cmp	r3, #0
 800c980:	dd00      	ble.n	800c984 <_strtod_l+0x790>
 800c982:	e087      	b.n	800ca94 <_strtod_l+0x8a0>
 800c984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c986:	2b00      	cmp	r3, #0
 800c988:	dd08      	ble.n	800c99c <_strtod_l+0x7a8>
 800c98a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c98c:	9908      	ldr	r1, [sp, #32]
 800c98e:	9804      	ldr	r0, [sp, #16]
 800c990:	f001 fca0 	bl	800e2d4 <__pow5mult>
 800c994:	9008      	str	r0, [sp, #32]
 800c996:	2800      	cmp	r0, #0
 800c998:	d100      	bne.n	800c99c <_strtod_l+0x7a8>
 800c99a:	e68e      	b.n	800c6ba <_strtod_l+0x4c6>
 800c99c:	2c00      	cmp	r4, #0
 800c99e:	dd08      	ble.n	800c9b2 <_strtod_l+0x7be>
 800c9a0:	0022      	movs	r2, r4
 800c9a2:	9908      	ldr	r1, [sp, #32]
 800c9a4:	9804      	ldr	r0, [sp, #16]
 800c9a6:	f001 fcd7 	bl	800e358 <__lshift>
 800c9aa:	9008      	str	r0, [sp, #32]
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d100      	bne.n	800c9b2 <_strtod_l+0x7be>
 800c9b0:	e683      	b.n	800c6ba <_strtod_l+0x4c6>
 800c9b2:	2d00      	cmp	r5, #0
 800c9b4:	dd08      	ble.n	800c9c8 <_strtod_l+0x7d4>
 800c9b6:	002a      	movs	r2, r5
 800c9b8:	9906      	ldr	r1, [sp, #24]
 800c9ba:	9804      	ldr	r0, [sp, #16]
 800c9bc:	f001 fccc 	bl	800e358 <__lshift>
 800c9c0:	9006      	str	r0, [sp, #24]
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d100      	bne.n	800c9c8 <_strtod_l+0x7d4>
 800c9c6:	e678      	b.n	800c6ba <_strtod_l+0x4c6>
 800c9c8:	9a08      	ldr	r2, [sp, #32]
 800c9ca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9cc:	9804      	ldr	r0, [sp, #16]
 800c9ce:	f001 fd4d 	bl	800e46c <__mdiff>
 800c9d2:	9005      	str	r0, [sp, #20]
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d100      	bne.n	800c9da <_strtod_l+0x7e6>
 800c9d8:	e66f      	b.n	800c6ba <_strtod_l+0x4c6>
 800c9da:	2200      	movs	r2, #0
 800c9dc:	68c3      	ldr	r3, [r0, #12]
 800c9de:	9906      	ldr	r1, [sp, #24]
 800c9e0:	60c2      	str	r2, [r0, #12]
 800c9e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c9e4:	f001 fd26 	bl	800e434 <__mcmp>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	da5d      	bge.n	800caa8 <_strtod_l+0x8b4>
 800c9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9ee:	4333      	orrs	r3, r6
 800c9f0:	d000      	beq.n	800c9f4 <_strtod_l+0x800>
 800c9f2:	e088      	b.n	800cb06 <_strtod_l+0x912>
 800c9f4:	033b      	lsls	r3, r7, #12
 800c9f6:	d000      	beq.n	800c9fa <_strtod_l+0x806>
 800c9f8:	e085      	b.n	800cb06 <_strtod_l+0x912>
 800c9fa:	22d6      	movs	r2, #214	; 0xd6
 800c9fc:	4b46      	ldr	r3, [pc, #280]	; (800cb18 <_strtod_l+0x924>)
 800c9fe:	04d2      	lsls	r2, r2, #19
 800ca00:	403b      	ands	r3, r7
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d97f      	bls.n	800cb06 <_strtod_l+0x912>
 800ca06:	9b05      	ldr	r3, [sp, #20]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d103      	bne.n	800ca16 <_strtod_l+0x822>
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	dd77      	ble.n	800cb06 <_strtod_l+0x912>
 800ca16:	9905      	ldr	r1, [sp, #20]
 800ca18:	2201      	movs	r2, #1
 800ca1a:	9804      	ldr	r0, [sp, #16]
 800ca1c:	f001 fc9c 	bl	800e358 <__lshift>
 800ca20:	9906      	ldr	r1, [sp, #24]
 800ca22:	9005      	str	r0, [sp, #20]
 800ca24:	f001 fd06 	bl	800e434 <__mcmp>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	dd6c      	ble.n	800cb06 <_strtod_l+0x912>
 800ca2c:	9907      	ldr	r1, [sp, #28]
 800ca2e:	003b      	movs	r3, r7
 800ca30:	4a39      	ldr	r2, [pc, #228]	; (800cb18 <_strtod_l+0x924>)
 800ca32:	2900      	cmp	r1, #0
 800ca34:	d100      	bne.n	800ca38 <_strtod_l+0x844>
 800ca36:	e094      	b.n	800cb62 <_strtod_l+0x96e>
 800ca38:	0011      	movs	r1, r2
 800ca3a:	20d6      	movs	r0, #214	; 0xd6
 800ca3c:	4039      	ands	r1, r7
 800ca3e:	04c0      	lsls	r0, r0, #19
 800ca40:	4281      	cmp	r1, r0
 800ca42:	dd00      	ble.n	800ca46 <_strtod_l+0x852>
 800ca44:	e08d      	b.n	800cb62 <_strtod_l+0x96e>
 800ca46:	23dc      	movs	r3, #220	; 0xdc
 800ca48:	049b      	lsls	r3, r3, #18
 800ca4a:	4299      	cmp	r1, r3
 800ca4c:	dc00      	bgt.n	800ca50 <_strtod_l+0x85c>
 800ca4e:	e6a7      	b.n	800c7a0 <_strtod_l+0x5ac>
 800ca50:	0030      	movs	r0, r6
 800ca52:	0039      	movs	r1, r7
 800ca54:	4b31      	ldr	r3, [pc, #196]	; (800cb1c <_strtod_l+0x928>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	f7f4 fe08 	bl	800166c <__aeabi_dmul>
 800ca5c:	4b2e      	ldr	r3, [pc, #184]	; (800cb18 <_strtod_l+0x924>)
 800ca5e:	0006      	movs	r6, r0
 800ca60:	000f      	movs	r7, r1
 800ca62:	420b      	tst	r3, r1
 800ca64:	d000      	beq.n	800ca68 <_strtod_l+0x874>
 800ca66:	e631      	b.n	800c6cc <_strtod_l+0x4d8>
 800ca68:	2322      	movs	r3, #34	; 0x22
 800ca6a:	9a04      	ldr	r2, [sp, #16]
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	e62d      	b.n	800c6cc <_strtod_l+0x4d8>
 800ca70:	234b      	movs	r3, #75	; 0x4b
 800ca72:	1a9a      	subs	r2, r3, r2
 800ca74:	3b4c      	subs	r3, #76	; 0x4c
 800ca76:	4093      	lsls	r3, r2
 800ca78:	4019      	ands	r1, r3
 800ca7a:	000f      	movs	r7, r1
 800ca7c:	e6e3      	b.n	800c846 <_strtod_l+0x652>
 800ca7e:	2201      	movs	r2, #1
 800ca80:	4252      	negs	r2, r2
 800ca82:	409a      	lsls	r2, r3
 800ca84:	4016      	ands	r6, r2
 800ca86:	e6de      	b.n	800c846 <_strtod_l+0x652>
 800ca88:	4925      	ldr	r1, [pc, #148]	; (800cb20 <_strtod_l+0x92c>)
 800ca8a:	1acb      	subs	r3, r1, r3
 800ca8c:	0001      	movs	r1, r0
 800ca8e:	4099      	lsls	r1, r3
 800ca90:	9114      	str	r1, [sp, #80]	; 0x50
 800ca92:	e743      	b.n	800c91c <_strtod_l+0x728>
 800ca94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca98:	9804      	ldr	r0, [sp, #16]
 800ca9a:	f001 fc5d 	bl	800e358 <__lshift>
 800ca9e:	901c      	str	r0, [sp, #112]	; 0x70
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d000      	beq.n	800caa6 <_strtod_l+0x8b2>
 800caa4:	e76e      	b.n	800c984 <_strtod_l+0x790>
 800caa6:	e608      	b.n	800c6ba <_strtod_l+0x4c6>
 800caa8:	970e      	str	r7, [sp, #56]	; 0x38
 800caaa:	2800      	cmp	r0, #0
 800caac:	d177      	bne.n	800cb9e <_strtod_l+0x9aa>
 800caae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cab0:	033b      	lsls	r3, r7, #12
 800cab2:	0b1b      	lsrs	r3, r3, #12
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	d039      	beq.n	800cb2c <_strtod_l+0x938>
 800cab8:	4a1a      	ldr	r2, [pc, #104]	; (800cb24 <_strtod_l+0x930>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d139      	bne.n	800cb32 <_strtod_l+0x93e>
 800cabe:	2101      	movs	r1, #1
 800cac0:	9b07      	ldr	r3, [sp, #28]
 800cac2:	4249      	negs	r1, r1
 800cac4:	0032      	movs	r2, r6
 800cac6:	0008      	movs	r0, r1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <_strtod_l+0x8f0>
 800cacc:	24d4      	movs	r4, #212	; 0xd4
 800cace:	4b12      	ldr	r3, [pc, #72]	; (800cb18 <_strtod_l+0x924>)
 800cad0:	0008      	movs	r0, r1
 800cad2:	403b      	ands	r3, r7
 800cad4:	04e4      	lsls	r4, r4, #19
 800cad6:	42a3      	cmp	r3, r4
 800cad8:	d804      	bhi.n	800cae4 <_strtod_l+0x8f0>
 800cada:	306c      	adds	r0, #108	; 0x6c
 800cadc:	0d1b      	lsrs	r3, r3, #20
 800cade:	1ac3      	subs	r3, r0, r3
 800cae0:	4099      	lsls	r1, r3
 800cae2:	0008      	movs	r0, r1
 800cae4:	4282      	cmp	r2, r0
 800cae6:	d124      	bne.n	800cb32 <_strtod_l+0x93e>
 800cae8:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <_strtod_l+0x934>)
 800caea:	990e      	ldr	r1, [sp, #56]	; 0x38
 800caec:	4299      	cmp	r1, r3
 800caee:	d102      	bne.n	800caf6 <_strtod_l+0x902>
 800caf0:	3201      	adds	r2, #1
 800caf2:	d100      	bne.n	800caf6 <_strtod_l+0x902>
 800caf4:	e5e1      	b.n	800c6ba <_strtod_l+0x4c6>
 800caf6:	4b08      	ldr	r3, [pc, #32]	; (800cb18 <_strtod_l+0x924>)
 800caf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cafa:	2600      	movs	r6, #0
 800cafc:	401a      	ands	r2, r3
 800cafe:	0013      	movs	r3, r2
 800cb00:	2280      	movs	r2, #128	; 0x80
 800cb02:	0352      	lsls	r2, r2, #13
 800cb04:	189f      	adds	r7, r3, r2
 800cb06:	9b07      	ldr	r3, [sp, #28]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1a1      	bne.n	800ca50 <_strtod_l+0x85c>
 800cb0c:	e5de      	b.n	800c6cc <_strtod_l+0x4d8>
 800cb0e:	46c0      	nop			; (mov r8, r8)
 800cb10:	08015af0 	.word	0x08015af0
 800cb14:	fffffc02 	.word	0xfffffc02
 800cb18:	7ff00000 	.word	0x7ff00000
 800cb1c:	39500000 	.word	0x39500000
 800cb20:	fffffbe2 	.word	0xfffffbe2
 800cb24:	000fffff 	.word	0x000fffff
 800cb28:	7fefffff 	.word	0x7fefffff
 800cb2c:	4333      	orrs	r3, r6
 800cb2e:	d100      	bne.n	800cb32 <_strtod_l+0x93e>
 800cb30:	e77c      	b.n	800ca2c <_strtod_l+0x838>
 800cb32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d01d      	beq.n	800cb74 <_strtod_l+0x980>
 800cb38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb3c:	4213      	tst	r3, r2
 800cb3e:	d0e2      	beq.n	800cb06 <_strtod_l+0x912>
 800cb40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb42:	0030      	movs	r0, r6
 800cb44:	0039      	movs	r1, r7
 800cb46:	9a07      	ldr	r2, [sp, #28]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d017      	beq.n	800cb7c <_strtod_l+0x988>
 800cb4c:	f7ff fb3a 	bl	800c1c4 <sulp>
 800cb50:	0002      	movs	r2, r0
 800cb52:	000b      	movs	r3, r1
 800cb54:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb56:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb58:	f7f3 fe2e 	bl	80007b8 <__aeabi_dadd>
 800cb5c:	0006      	movs	r6, r0
 800cb5e:	000f      	movs	r7, r1
 800cb60:	e7d1      	b.n	800cb06 <_strtod_l+0x912>
 800cb62:	2601      	movs	r6, #1
 800cb64:	4013      	ands	r3, r2
 800cb66:	4a98      	ldr	r2, [pc, #608]	; (800cdc8 <_strtod_l+0xbd4>)
 800cb68:	4276      	negs	r6, r6
 800cb6a:	189b      	adds	r3, r3, r2
 800cb6c:	4a97      	ldr	r2, [pc, #604]	; (800cdcc <_strtod_l+0xbd8>)
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	0017      	movs	r7, r2
 800cb72:	e7c8      	b.n	800cb06 <_strtod_l+0x912>
 800cb74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb76:	4233      	tst	r3, r6
 800cb78:	d0c5      	beq.n	800cb06 <_strtod_l+0x912>
 800cb7a:	e7e1      	b.n	800cb40 <_strtod_l+0x94c>
 800cb7c:	f7ff fb22 	bl	800c1c4 <sulp>
 800cb80:	0002      	movs	r2, r0
 800cb82:	000b      	movs	r3, r1
 800cb84:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cb86:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cb88:	f7f5 f832 	bl	8001bf0 <__aeabi_dsub>
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2300      	movs	r3, #0
 800cb90:	0006      	movs	r6, r0
 800cb92:	000f      	movs	r7, r1
 800cb94:	f7f3 fc58 	bl	8000448 <__aeabi_dcmpeq>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d0b4      	beq.n	800cb06 <_strtod_l+0x912>
 800cb9c:	e600      	b.n	800c7a0 <_strtod_l+0x5ac>
 800cb9e:	9906      	ldr	r1, [sp, #24]
 800cba0:	9805      	ldr	r0, [sp, #20]
 800cba2:	f001 fdc3 	bl	800e72c <__ratio>
 800cba6:	2380      	movs	r3, #128	; 0x80
 800cba8:	2200      	movs	r2, #0
 800cbaa:	05db      	lsls	r3, r3, #23
 800cbac:	0004      	movs	r4, r0
 800cbae:	000d      	movs	r5, r1
 800cbb0:	f7f3 fc5a 	bl	8000468 <__aeabi_dcmple>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	d06d      	beq.n	800cc94 <_strtod_l+0xaa0>
 800cbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d000      	beq.n	800cbc0 <_strtod_l+0x9cc>
 800cbbe:	e07e      	b.n	800ccbe <_strtod_l+0xaca>
 800cbc0:	2e00      	cmp	r6, #0
 800cbc2:	d158      	bne.n	800cc76 <_strtod_l+0xa82>
 800cbc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbc6:	031b      	lsls	r3, r3, #12
 800cbc8:	d000      	beq.n	800cbcc <_strtod_l+0x9d8>
 800cbca:	e07f      	b.n	800cccc <_strtod_l+0xad8>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	0020      	movs	r0, r4
 800cbd0:	0029      	movs	r1, r5
 800cbd2:	4b7f      	ldr	r3, [pc, #508]	; (800cdd0 <_strtod_l+0xbdc>)
 800cbd4:	f7f3 fc3e 	bl	8000454 <__aeabi_dcmplt>
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d158      	bne.n	800cc8e <_strtod_l+0xa9a>
 800cbdc:	0020      	movs	r0, r4
 800cbde:	0029      	movs	r1, r5
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	4b7c      	ldr	r3, [pc, #496]	; (800cdd4 <_strtod_l+0xbe0>)
 800cbe4:	f7f4 fd42 	bl	800166c <__aeabi_dmul>
 800cbe8:	0004      	movs	r4, r0
 800cbea:	000d      	movs	r5, r1
 800cbec:	2380      	movs	r3, #128	; 0x80
 800cbee:	061b      	lsls	r3, r3, #24
 800cbf0:	940a      	str	r4, [sp, #40]	; 0x28
 800cbf2:	18eb      	adds	r3, r5, r3
 800cbf4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cbf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbfa:	9212      	str	r2, [sp, #72]	; 0x48
 800cbfc:	9313      	str	r3, [sp, #76]	; 0x4c
 800cbfe:	4a76      	ldr	r2, [pc, #472]	; (800cdd8 <_strtod_l+0xbe4>)
 800cc00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc02:	4013      	ands	r3, r2
 800cc04:	9314      	str	r3, [sp, #80]	; 0x50
 800cc06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc08:	4b74      	ldr	r3, [pc, #464]	; (800cddc <_strtod_l+0xbe8>)
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d000      	beq.n	800cc10 <_strtod_l+0xa1c>
 800cc0e:	e091      	b.n	800cd34 <_strtod_l+0xb40>
 800cc10:	4a73      	ldr	r2, [pc, #460]	; (800cde0 <_strtod_l+0xbec>)
 800cc12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc14:	4694      	mov	ip, r2
 800cc16:	4463      	add	r3, ip
 800cc18:	001f      	movs	r7, r3
 800cc1a:	0030      	movs	r0, r6
 800cc1c:	0019      	movs	r1, r3
 800cc1e:	f001 fcbd 	bl	800e59c <__ulp>
 800cc22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc26:	f7f4 fd21 	bl	800166c <__aeabi_dmul>
 800cc2a:	0032      	movs	r2, r6
 800cc2c:	003b      	movs	r3, r7
 800cc2e:	f7f3 fdc3 	bl	80007b8 <__aeabi_dadd>
 800cc32:	4a69      	ldr	r2, [pc, #420]	; (800cdd8 <_strtod_l+0xbe4>)
 800cc34:	4b6b      	ldr	r3, [pc, #428]	; (800cde4 <_strtod_l+0xbf0>)
 800cc36:	0006      	movs	r6, r0
 800cc38:	400a      	ands	r2, r1
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d949      	bls.n	800ccd2 <_strtod_l+0xade>
 800cc3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cc40:	4b69      	ldr	r3, [pc, #420]	; (800cde8 <_strtod_l+0xbf4>)
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d103      	bne.n	800cc4e <_strtod_l+0xa5a>
 800cc46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc48:	3301      	adds	r3, #1
 800cc4a:	d100      	bne.n	800cc4e <_strtod_l+0xa5a>
 800cc4c:	e535      	b.n	800c6ba <_strtod_l+0x4c6>
 800cc4e:	2601      	movs	r6, #1
 800cc50:	4f65      	ldr	r7, [pc, #404]	; (800cde8 <_strtod_l+0xbf4>)
 800cc52:	4276      	negs	r6, r6
 800cc54:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc56:	9804      	ldr	r0, [sp, #16]
 800cc58:	f001 f992 	bl	800df80 <_Bfree>
 800cc5c:	9908      	ldr	r1, [sp, #32]
 800cc5e:	9804      	ldr	r0, [sp, #16]
 800cc60:	f001 f98e 	bl	800df80 <_Bfree>
 800cc64:	9906      	ldr	r1, [sp, #24]
 800cc66:	9804      	ldr	r0, [sp, #16]
 800cc68:	f001 f98a 	bl	800df80 <_Bfree>
 800cc6c:	9905      	ldr	r1, [sp, #20]
 800cc6e:	9804      	ldr	r0, [sp, #16]
 800cc70:	f001 f986 	bl	800df80 <_Bfree>
 800cc74:	e60b      	b.n	800c88e <_strtod_l+0x69a>
 800cc76:	2e01      	cmp	r6, #1
 800cc78:	d103      	bne.n	800cc82 <_strtod_l+0xa8e>
 800cc7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d100      	bne.n	800cc82 <_strtod_l+0xa8e>
 800cc80:	e58e      	b.n	800c7a0 <_strtod_l+0x5ac>
 800cc82:	2300      	movs	r3, #0
 800cc84:	4c59      	ldr	r4, [pc, #356]	; (800cdec <_strtod_l+0xbf8>)
 800cc86:	930a      	str	r3, [sp, #40]	; 0x28
 800cc88:	940b      	str	r4, [sp, #44]	; 0x2c
 800cc8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cc8c:	e01c      	b.n	800ccc8 <_strtod_l+0xad4>
 800cc8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cc90:	4d50      	ldr	r5, [pc, #320]	; (800cdd4 <_strtod_l+0xbe0>)
 800cc92:	e7ab      	b.n	800cbec <_strtod_l+0x9f8>
 800cc94:	2200      	movs	r2, #0
 800cc96:	0020      	movs	r0, r4
 800cc98:	0029      	movs	r1, r5
 800cc9a:	4b4e      	ldr	r3, [pc, #312]	; (800cdd4 <_strtod_l+0xbe0>)
 800cc9c:	f7f4 fce6 	bl	800166c <__aeabi_dmul>
 800cca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cca2:	0004      	movs	r4, r0
 800cca4:	000b      	movs	r3, r1
 800cca6:	000d      	movs	r5, r1
 800cca8:	2a00      	cmp	r2, #0
 800ccaa:	d104      	bne.n	800ccb6 <_strtod_l+0xac2>
 800ccac:	2280      	movs	r2, #128	; 0x80
 800ccae:	0612      	lsls	r2, r2, #24
 800ccb0:	900a      	str	r0, [sp, #40]	; 0x28
 800ccb2:	188b      	adds	r3, r1, r2
 800ccb4:	e79e      	b.n	800cbf4 <_strtod_l+0xa00>
 800ccb6:	0002      	movs	r2, r0
 800ccb8:	920a      	str	r2, [sp, #40]	; 0x28
 800ccba:	930b      	str	r3, [sp, #44]	; 0x2c
 800ccbc:	e79b      	b.n	800cbf6 <_strtod_l+0xa02>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	4c43      	ldr	r4, [pc, #268]	; (800cdd0 <_strtod_l+0xbdc>)
 800ccc2:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc4:	940b      	str	r4, [sp, #44]	; 0x2c
 800ccc6:	2400      	movs	r4, #0
 800ccc8:	4d41      	ldr	r5, [pc, #260]	; (800cdd0 <_strtod_l+0xbdc>)
 800ccca:	e794      	b.n	800cbf6 <_strtod_l+0xa02>
 800cccc:	2300      	movs	r3, #0
 800ccce:	4c47      	ldr	r4, [pc, #284]	; (800cdec <_strtod_l+0xbf8>)
 800ccd0:	e7f7      	b.n	800ccc2 <_strtod_l+0xace>
 800ccd2:	23d4      	movs	r3, #212	; 0xd4
 800ccd4:	049b      	lsls	r3, r3, #18
 800ccd6:	18cf      	adds	r7, r1, r3
 800ccd8:	9b07      	ldr	r3, [sp, #28]
 800ccda:	970e      	str	r7, [sp, #56]	; 0x38
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1b9      	bne.n	800cc54 <_strtod_l+0xa60>
 800cce0:	4b3d      	ldr	r3, [pc, #244]	; (800cdd8 <_strtod_l+0xbe4>)
 800cce2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cce4:	403b      	ands	r3, r7
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d1b4      	bne.n	800cc54 <_strtod_l+0xa60>
 800ccea:	0020      	movs	r0, r4
 800ccec:	0029      	movs	r1, r5
 800ccee:	f7f3 fc45 	bl	800057c <__aeabi_d2lz>
 800ccf2:	f7f3 fc7f 	bl	80005f4 <__aeabi_l2d>
 800ccf6:	0002      	movs	r2, r0
 800ccf8:	000b      	movs	r3, r1
 800ccfa:	0020      	movs	r0, r4
 800ccfc:	0029      	movs	r1, r5
 800ccfe:	f7f4 ff77 	bl	8001bf0 <__aeabi_dsub>
 800cd02:	033b      	lsls	r3, r7, #12
 800cd04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd06:	0b1b      	lsrs	r3, r3, #12
 800cd08:	4333      	orrs	r3, r6
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	0004      	movs	r4, r0
 800cd0e:	000d      	movs	r5, r1
 800cd10:	4a37      	ldr	r2, [pc, #220]	; (800cdf0 <_strtod_l+0xbfc>)
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d054      	beq.n	800cdc0 <_strtod_l+0xbcc>
 800cd16:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <_strtod_l+0xc00>)
 800cd18:	f7f3 fb9c 	bl	8000454 <__aeabi_dcmplt>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d000      	beq.n	800cd22 <_strtod_l+0xb2e>
 800cd20:	e4d4      	b.n	800c6cc <_strtod_l+0x4d8>
 800cd22:	0020      	movs	r0, r4
 800cd24:	0029      	movs	r1, r5
 800cd26:	4a34      	ldr	r2, [pc, #208]	; (800cdf8 <_strtod_l+0xc04>)
 800cd28:	4b2a      	ldr	r3, [pc, #168]	; (800cdd4 <_strtod_l+0xbe0>)
 800cd2a:	f7f3 fba7 	bl	800047c <__aeabi_dcmpgt>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d090      	beq.n	800cc54 <_strtod_l+0xa60>
 800cd32:	e4cb      	b.n	800c6cc <_strtod_l+0x4d8>
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d02b      	beq.n	800cd92 <_strtod_l+0xb9e>
 800cd3a:	23d4      	movs	r3, #212	; 0xd4
 800cd3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd3e:	04db      	lsls	r3, r3, #19
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d826      	bhi.n	800cd92 <_strtod_l+0xb9e>
 800cd44:	0020      	movs	r0, r4
 800cd46:	0029      	movs	r1, r5
 800cd48:	4a2c      	ldr	r2, [pc, #176]	; (800cdfc <_strtod_l+0xc08>)
 800cd4a:	4b2d      	ldr	r3, [pc, #180]	; (800ce00 <_strtod_l+0xc0c>)
 800cd4c:	f7f3 fb8c 	bl	8000468 <__aeabi_dcmple>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d017      	beq.n	800cd84 <_strtod_l+0xb90>
 800cd54:	0020      	movs	r0, r4
 800cd56:	0029      	movs	r1, r5
 800cd58:	f7f3 fbf2 	bl	8000540 <__aeabi_d2uiz>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d100      	bne.n	800cd62 <_strtod_l+0xb6e>
 800cd60:	3001      	adds	r0, #1
 800cd62:	f7f5 fb4b 	bl	80023fc <__aeabi_ui2d>
 800cd66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd68:	0004      	movs	r4, r0
 800cd6a:	000b      	movs	r3, r1
 800cd6c:	000d      	movs	r5, r1
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	d122      	bne.n	800cdb8 <_strtod_l+0xbc4>
 800cd72:	2280      	movs	r2, #128	; 0x80
 800cd74:	0612      	lsls	r2, r2, #24
 800cd76:	188b      	adds	r3, r1, r2
 800cd78:	9016      	str	r0, [sp, #88]	; 0x58
 800cd7a:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd7c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cd7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd80:	9212      	str	r2, [sp, #72]	; 0x48
 800cd82:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd84:	22d6      	movs	r2, #214	; 0xd6
 800cd86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd88:	04d2      	lsls	r2, r2, #19
 800cd8a:	189b      	adds	r3, r3, r2
 800cd8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cd8e:	1a9b      	subs	r3, r3, r2
 800cd90:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd92:	9810      	ldr	r0, [sp, #64]	; 0x40
 800cd94:	9911      	ldr	r1, [sp, #68]	; 0x44
 800cd96:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cd98:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800cd9a:	f001 fbff 	bl	800e59c <__ulp>
 800cd9e:	0002      	movs	r2, r0
 800cda0:	000b      	movs	r3, r1
 800cda2:	0030      	movs	r0, r6
 800cda4:	0039      	movs	r1, r7
 800cda6:	f7f4 fc61 	bl	800166c <__aeabi_dmul>
 800cdaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cdac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdae:	f7f3 fd03 	bl	80007b8 <__aeabi_dadd>
 800cdb2:	0006      	movs	r6, r0
 800cdb4:	000f      	movs	r7, r1
 800cdb6:	e78f      	b.n	800ccd8 <_strtod_l+0xae4>
 800cdb8:	0002      	movs	r2, r0
 800cdba:	9216      	str	r2, [sp, #88]	; 0x58
 800cdbc:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdbe:	e7dd      	b.n	800cd7c <_strtod_l+0xb88>
 800cdc0:	4b10      	ldr	r3, [pc, #64]	; (800ce04 <_strtod_l+0xc10>)
 800cdc2:	f7f3 fb47 	bl	8000454 <__aeabi_dcmplt>
 800cdc6:	e7b2      	b.n	800cd2e <_strtod_l+0xb3a>
 800cdc8:	fff00000 	.word	0xfff00000
 800cdcc:	000fffff 	.word	0x000fffff
 800cdd0:	3ff00000 	.word	0x3ff00000
 800cdd4:	3fe00000 	.word	0x3fe00000
 800cdd8:	7ff00000 	.word	0x7ff00000
 800cddc:	7fe00000 	.word	0x7fe00000
 800cde0:	fcb00000 	.word	0xfcb00000
 800cde4:	7c9fffff 	.word	0x7c9fffff
 800cde8:	7fefffff 	.word	0x7fefffff
 800cdec:	bff00000 	.word	0xbff00000
 800cdf0:	94a03595 	.word	0x94a03595
 800cdf4:	3fdfffff 	.word	0x3fdfffff
 800cdf8:	35afe535 	.word	0x35afe535
 800cdfc:	ffc00000 	.word	0xffc00000
 800ce00:	41dfffff 	.word	0x41dfffff
 800ce04:	3fcfffff 	.word	0x3fcfffff

0800ce08 <_strtod_r>:
 800ce08:	b510      	push	{r4, lr}
 800ce0a:	4b02      	ldr	r3, [pc, #8]	; (800ce14 <_strtod_r+0xc>)
 800ce0c:	f7ff f9f2 	bl	800c1f4 <_strtod_l>
 800ce10:	bd10      	pop	{r4, pc}
 800ce12:	46c0      	nop			; (mov r8, r8)
 800ce14:	20000444 	.word	0x20000444

0800ce18 <strtod>:
 800ce18:	b510      	push	{r4, lr}
 800ce1a:	4c04      	ldr	r4, [pc, #16]	; (800ce2c <strtod+0x14>)
 800ce1c:	000a      	movs	r2, r1
 800ce1e:	0001      	movs	r1, r0
 800ce20:	4b03      	ldr	r3, [pc, #12]	; (800ce30 <strtod+0x18>)
 800ce22:	6820      	ldr	r0, [r4, #0]
 800ce24:	f7ff f9e6 	bl	800c1f4 <_strtod_l>
 800ce28:	bd10      	pop	{r4, pc}
 800ce2a:	46c0      	nop			; (mov r8, r8)
 800ce2c:	200006d0 	.word	0x200006d0
 800ce30:	20000444 	.word	0x20000444

0800ce34 <_strtol_l.constprop.0>:
 800ce34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce36:	b087      	sub	sp, #28
 800ce38:	001e      	movs	r6, r3
 800ce3a:	9005      	str	r0, [sp, #20]
 800ce3c:	9101      	str	r1, [sp, #4]
 800ce3e:	9202      	str	r2, [sp, #8]
 800ce40:	2b01      	cmp	r3, #1
 800ce42:	d048      	beq.n	800ced6 <_strtol_l.constprop.0+0xa2>
 800ce44:	000b      	movs	r3, r1
 800ce46:	2e24      	cmp	r6, #36	; 0x24
 800ce48:	d845      	bhi.n	800ced6 <_strtol_l.constprop.0+0xa2>
 800ce4a:	4a3b      	ldr	r2, [pc, #236]	; (800cf38 <_strtol_l.constprop.0+0x104>)
 800ce4c:	2108      	movs	r1, #8
 800ce4e:	4694      	mov	ip, r2
 800ce50:	001a      	movs	r2, r3
 800ce52:	4660      	mov	r0, ip
 800ce54:	7814      	ldrb	r4, [r2, #0]
 800ce56:	3301      	adds	r3, #1
 800ce58:	5d00      	ldrb	r0, [r0, r4]
 800ce5a:	001d      	movs	r5, r3
 800ce5c:	0007      	movs	r7, r0
 800ce5e:	400f      	ands	r7, r1
 800ce60:	4208      	tst	r0, r1
 800ce62:	d1f5      	bne.n	800ce50 <_strtol_l.constprop.0+0x1c>
 800ce64:	2c2d      	cmp	r4, #45	; 0x2d
 800ce66:	d13d      	bne.n	800cee4 <_strtol_l.constprop.0+0xb0>
 800ce68:	2701      	movs	r7, #1
 800ce6a:	781c      	ldrb	r4, [r3, #0]
 800ce6c:	1c95      	adds	r5, r2, #2
 800ce6e:	2e00      	cmp	r6, #0
 800ce70:	d05e      	beq.n	800cf30 <_strtol_l.constprop.0+0xfc>
 800ce72:	2e10      	cmp	r6, #16
 800ce74:	d109      	bne.n	800ce8a <_strtol_l.constprop.0+0x56>
 800ce76:	2c30      	cmp	r4, #48	; 0x30
 800ce78:	d107      	bne.n	800ce8a <_strtol_l.constprop.0+0x56>
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	782b      	ldrb	r3, [r5, #0]
 800ce7e:	4393      	bics	r3, r2
 800ce80:	2b58      	cmp	r3, #88	; 0x58
 800ce82:	d150      	bne.n	800cf26 <_strtol_l.constprop.0+0xf2>
 800ce84:	2610      	movs	r6, #16
 800ce86:	786c      	ldrb	r4, [r5, #1]
 800ce88:	3502      	adds	r5, #2
 800ce8a:	4b2c      	ldr	r3, [pc, #176]	; (800cf3c <_strtol_l.constprop.0+0x108>)
 800ce8c:	0031      	movs	r1, r6
 800ce8e:	18fb      	adds	r3, r7, r3
 800ce90:	0018      	movs	r0, r3
 800ce92:	9303      	str	r3, [sp, #12]
 800ce94:	f7f3 f9d8 	bl	8000248 <__aeabi_uidivmod>
 800ce98:	2200      	movs	r2, #0
 800ce9a:	9104      	str	r1, [sp, #16]
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	4684      	mov	ip, r0
 800cea0:	0010      	movs	r0, r2
 800cea2:	4249      	negs	r1, r1
 800cea4:	0023      	movs	r3, r4
 800cea6:	3b30      	subs	r3, #48	; 0x30
 800cea8:	2b09      	cmp	r3, #9
 800ceaa:	d903      	bls.n	800ceb4 <_strtol_l.constprop.0+0x80>
 800ceac:	3b11      	subs	r3, #17
 800ceae:	2b19      	cmp	r3, #25
 800ceb0:	d81d      	bhi.n	800ceee <_strtol_l.constprop.0+0xba>
 800ceb2:	330a      	adds	r3, #10
 800ceb4:	429e      	cmp	r6, r3
 800ceb6:	dd1e      	ble.n	800cef6 <_strtol_l.constprop.0+0xc2>
 800ceb8:	1c54      	adds	r4, r2, #1
 800ceba:	d009      	beq.n	800ced0 <_strtol_l.constprop.0+0x9c>
 800cebc:	000a      	movs	r2, r1
 800cebe:	4584      	cmp	ip, r0
 800cec0:	d306      	bcc.n	800ced0 <_strtol_l.constprop.0+0x9c>
 800cec2:	d102      	bne.n	800ceca <_strtol_l.constprop.0+0x96>
 800cec4:	9c04      	ldr	r4, [sp, #16]
 800cec6:	429c      	cmp	r4, r3
 800cec8:	db02      	blt.n	800ced0 <_strtol_l.constprop.0+0x9c>
 800ceca:	2201      	movs	r2, #1
 800cecc:	4370      	muls	r0, r6
 800cece:	1818      	adds	r0, r3, r0
 800ced0:	782c      	ldrb	r4, [r5, #0]
 800ced2:	3501      	adds	r5, #1
 800ced4:	e7e6      	b.n	800cea4 <_strtol_l.constprop.0+0x70>
 800ced6:	f000 fb57 	bl	800d588 <__errno>
 800ceda:	2316      	movs	r3, #22
 800cedc:	6003      	str	r3, [r0, #0]
 800cede:	2000      	movs	r0, #0
 800cee0:	b007      	add	sp, #28
 800cee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cee4:	2c2b      	cmp	r4, #43	; 0x2b
 800cee6:	d1c2      	bne.n	800ce6e <_strtol_l.constprop.0+0x3a>
 800cee8:	781c      	ldrb	r4, [r3, #0]
 800ceea:	1c95      	adds	r5, r2, #2
 800ceec:	e7bf      	b.n	800ce6e <_strtol_l.constprop.0+0x3a>
 800ceee:	0023      	movs	r3, r4
 800cef0:	3b61      	subs	r3, #97	; 0x61
 800cef2:	2b19      	cmp	r3, #25
 800cef4:	d9dd      	bls.n	800ceb2 <_strtol_l.constprop.0+0x7e>
 800cef6:	1c53      	adds	r3, r2, #1
 800cef8:	d109      	bne.n	800cf0e <_strtol_l.constprop.0+0xda>
 800cefa:	2322      	movs	r3, #34	; 0x22
 800cefc:	9a05      	ldr	r2, [sp, #20]
 800cefe:	9803      	ldr	r0, [sp, #12]
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	9b02      	ldr	r3, [sp, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0eb      	beq.n	800cee0 <_strtol_l.constprop.0+0xac>
 800cf08:	1e6b      	subs	r3, r5, #1
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	e007      	b.n	800cf1e <_strtol_l.constprop.0+0xea>
 800cf0e:	2f00      	cmp	r7, #0
 800cf10:	d000      	beq.n	800cf14 <_strtol_l.constprop.0+0xe0>
 800cf12:	4240      	negs	r0, r0
 800cf14:	9b02      	ldr	r3, [sp, #8]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d0e2      	beq.n	800cee0 <_strtol_l.constprop.0+0xac>
 800cf1a:	2a00      	cmp	r2, #0
 800cf1c:	d1f4      	bne.n	800cf08 <_strtol_l.constprop.0+0xd4>
 800cf1e:	9b02      	ldr	r3, [sp, #8]
 800cf20:	9a01      	ldr	r2, [sp, #4]
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	e7dc      	b.n	800cee0 <_strtol_l.constprop.0+0xac>
 800cf26:	2430      	movs	r4, #48	; 0x30
 800cf28:	2e00      	cmp	r6, #0
 800cf2a:	d1ae      	bne.n	800ce8a <_strtol_l.constprop.0+0x56>
 800cf2c:	3608      	adds	r6, #8
 800cf2e:	e7ac      	b.n	800ce8a <_strtol_l.constprop.0+0x56>
 800cf30:	2c30      	cmp	r4, #48	; 0x30
 800cf32:	d0a2      	beq.n	800ce7a <_strtol_l.constprop.0+0x46>
 800cf34:	260a      	movs	r6, #10
 800cf36:	e7a8      	b.n	800ce8a <_strtol_l.constprop.0+0x56>
 800cf38:	08015b19 	.word	0x08015b19
 800cf3c:	7fffffff 	.word	0x7fffffff

0800cf40 <_strtol_r>:
 800cf40:	b510      	push	{r4, lr}
 800cf42:	f7ff ff77 	bl	800ce34 <_strtol_l.constprop.0>
 800cf46:	bd10      	pop	{r4, pc}

0800cf48 <strtol>:
 800cf48:	b510      	push	{r4, lr}
 800cf4a:	4c04      	ldr	r4, [pc, #16]	; (800cf5c <strtol+0x14>)
 800cf4c:	0013      	movs	r3, r2
 800cf4e:	000a      	movs	r2, r1
 800cf50:	0001      	movs	r1, r0
 800cf52:	6820      	ldr	r0, [r4, #0]
 800cf54:	f7ff ff6e 	bl	800ce34 <_strtol_l.constprop.0>
 800cf58:	bd10      	pop	{r4, pc}
 800cf5a:	46c0      	nop			; (mov r8, r8)
 800cf5c:	200006d0 	.word	0x200006d0

0800cf60 <_strtoul_l.constprop.0>:
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	b087      	sub	sp, #28
 800cf64:	9202      	str	r2, [sp, #8]
 800cf66:	4a3e      	ldr	r2, [pc, #248]	; (800d060 <_strtoul_l.constprop.0+0x100>)
 800cf68:	001e      	movs	r6, r3
 800cf6a:	9101      	str	r1, [sp, #4]
 800cf6c:	000b      	movs	r3, r1
 800cf6e:	4694      	mov	ip, r2
 800cf70:	2108      	movs	r1, #8
 800cf72:	9005      	str	r0, [sp, #20]
 800cf74:	001a      	movs	r2, r3
 800cf76:	4660      	mov	r0, ip
 800cf78:	7814      	ldrb	r4, [r2, #0]
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	5d00      	ldrb	r0, [r0, r4]
 800cf7e:	001d      	movs	r5, r3
 800cf80:	0007      	movs	r7, r0
 800cf82:	400f      	ands	r7, r1
 800cf84:	4208      	tst	r0, r1
 800cf86:	d1f5      	bne.n	800cf74 <_strtoul_l.constprop.0+0x14>
 800cf88:	2c2d      	cmp	r4, #45	; 0x2d
 800cf8a:	d13d      	bne.n	800d008 <_strtoul_l.constprop.0+0xa8>
 800cf8c:	2701      	movs	r7, #1
 800cf8e:	781c      	ldrb	r4, [r3, #0]
 800cf90:	1c95      	adds	r5, r2, #2
 800cf92:	2e00      	cmp	r6, #0
 800cf94:	d05f      	beq.n	800d056 <_strtoul_l.constprop.0+0xf6>
 800cf96:	2e10      	cmp	r6, #16
 800cf98:	d109      	bne.n	800cfae <_strtoul_l.constprop.0+0x4e>
 800cf9a:	2c30      	cmp	r4, #48	; 0x30
 800cf9c:	d107      	bne.n	800cfae <_strtoul_l.constprop.0+0x4e>
 800cf9e:	2220      	movs	r2, #32
 800cfa0:	782b      	ldrb	r3, [r5, #0]
 800cfa2:	4393      	bics	r3, r2
 800cfa4:	2b58      	cmp	r3, #88	; 0x58
 800cfa6:	d151      	bne.n	800d04c <_strtoul_l.constprop.0+0xec>
 800cfa8:	2610      	movs	r6, #16
 800cfaa:	786c      	ldrb	r4, [r5, #1]
 800cfac:	3502      	adds	r5, #2
 800cfae:	2001      	movs	r0, #1
 800cfb0:	0031      	movs	r1, r6
 800cfb2:	4240      	negs	r0, r0
 800cfb4:	f7f3 f8c2 	bl	800013c <__udivsi3>
 800cfb8:	9003      	str	r0, [sp, #12]
 800cfba:	2001      	movs	r0, #1
 800cfbc:	0031      	movs	r1, r6
 800cfbe:	4240      	negs	r0, r0
 800cfc0:	f7f3 f942 	bl	8000248 <__aeabi_uidivmod>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	9104      	str	r1, [sp, #16]
 800cfca:	2101      	movs	r1, #1
 800cfcc:	0018      	movs	r0, r3
 800cfce:	4694      	mov	ip, r2
 800cfd0:	4249      	negs	r1, r1
 800cfd2:	0022      	movs	r2, r4
 800cfd4:	3a30      	subs	r2, #48	; 0x30
 800cfd6:	2a09      	cmp	r2, #9
 800cfd8:	d903      	bls.n	800cfe2 <_strtoul_l.constprop.0+0x82>
 800cfda:	3a11      	subs	r2, #17
 800cfdc:	2a19      	cmp	r2, #25
 800cfde:	d818      	bhi.n	800d012 <_strtoul_l.constprop.0+0xb2>
 800cfe0:	320a      	adds	r2, #10
 800cfe2:	4296      	cmp	r6, r2
 800cfe4:	dd19      	ble.n	800d01a <_strtoul_l.constprop.0+0xba>
 800cfe6:	1c5c      	adds	r4, r3, #1
 800cfe8:	d00b      	beq.n	800d002 <_strtoul_l.constprop.0+0xa2>
 800cfea:	9c03      	ldr	r4, [sp, #12]
 800cfec:	000b      	movs	r3, r1
 800cfee:	4284      	cmp	r4, r0
 800cff0:	d307      	bcc.n	800d002 <_strtoul_l.constprop.0+0xa2>
 800cff2:	d103      	bne.n	800cffc <_strtoul_l.constprop.0+0x9c>
 800cff4:	9c04      	ldr	r4, [sp, #16]
 800cff6:	000b      	movs	r3, r1
 800cff8:	4294      	cmp	r4, r2
 800cffa:	db02      	blt.n	800d002 <_strtoul_l.constprop.0+0xa2>
 800cffc:	4663      	mov	r3, ip
 800cffe:	4370      	muls	r0, r6
 800d000:	1810      	adds	r0, r2, r0
 800d002:	782c      	ldrb	r4, [r5, #0]
 800d004:	3501      	adds	r5, #1
 800d006:	e7e4      	b.n	800cfd2 <_strtoul_l.constprop.0+0x72>
 800d008:	2c2b      	cmp	r4, #43	; 0x2b
 800d00a:	d1c2      	bne.n	800cf92 <_strtoul_l.constprop.0+0x32>
 800d00c:	781c      	ldrb	r4, [r3, #0]
 800d00e:	1c95      	adds	r5, r2, #2
 800d010:	e7bf      	b.n	800cf92 <_strtoul_l.constprop.0+0x32>
 800d012:	0022      	movs	r2, r4
 800d014:	3a61      	subs	r2, #97	; 0x61
 800d016:	2a19      	cmp	r2, #25
 800d018:	d9e2      	bls.n	800cfe0 <_strtoul_l.constprop.0+0x80>
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	d108      	bne.n	800d030 <_strtoul_l.constprop.0+0xd0>
 800d01e:	2222      	movs	r2, #34	; 0x22
 800d020:	9905      	ldr	r1, [sp, #20]
 800d022:	0018      	movs	r0, r3
 800d024:	600a      	str	r2, [r1, #0]
 800d026:	9a02      	ldr	r2, [sp, #8]
 800d028:	2a00      	cmp	r2, #0
 800d02a:	d109      	bne.n	800d040 <_strtoul_l.constprop.0+0xe0>
 800d02c:	b007      	add	sp, #28
 800d02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d030:	2f00      	cmp	r7, #0
 800d032:	d000      	beq.n	800d036 <_strtoul_l.constprop.0+0xd6>
 800d034:	4240      	negs	r0, r0
 800d036:	9a02      	ldr	r2, [sp, #8]
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d0f7      	beq.n	800d02c <_strtoul_l.constprop.0+0xcc>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d001      	beq.n	800d044 <_strtoul_l.constprop.0+0xe4>
 800d040:	1e6b      	subs	r3, r5, #1
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	9b02      	ldr	r3, [sp, #8]
 800d046:	9a01      	ldr	r2, [sp, #4]
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	e7ef      	b.n	800d02c <_strtoul_l.constprop.0+0xcc>
 800d04c:	2430      	movs	r4, #48	; 0x30
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d1ad      	bne.n	800cfae <_strtoul_l.constprop.0+0x4e>
 800d052:	3608      	adds	r6, #8
 800d054:	e7ab      	b.n	800cfae <_strtoul_l.constprop.0+0x4e>
 800d056:	2c30      	cmp	r4, #48	; 0x30
 800d058:	d0a1      	beq.n	800cf9e <_strtoul_l.constprop.0+0x3e>
 800d05a:	260a      	movs	r6, #10
 800d05c:	e7a7      	b.n	800cfae <_strtoul_l.constprop.0+0x4e>
 800d05e:	46c0      	nop			; (mov r8, r8)
 800d060:	08015b19 	.word	0x08015b19

0800d064 <_strtoul_r>:
 800d064:	b510      	push	{r4, lr}
 800d066:	f7ff ff7b 	bl	800cf60 <_strtoul_l.constprop.0>
 800d06a:	bd10      	pop	{r4, pc}

0800d06c <strtoul>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	4c04      	ldr	r4, [pc, #16]	; (800d080 <strtoul+0x14>)
 800d070:	0013      	movs	r3, r2
 800d072:	000a      	movs	r2, r1
 800d074:	0001      	movs	r1, r0
 800d076:	6820      	ldr	r0, [r4, #0]
 800d078:	f7ff ff72 	bl	800cf60 <_strtoul_l.constprop.0>
 800d07c:	bd10      	pop	{r4, pc}
 800d07e:	46c0      	nop			; (mov r8, r8)
 800d080:	200006d0 	.word	0x200006d0

0800d084 <std>:
 800d084:	2300      	movs	r3, #0
 800d086:	b510      	push	{r4, lr}
 800d088:	0004      	movs	r4, r0
 800d08a:	6003      	str	r3, [r0, #0]
 800d08c:	6043      	str	r3, [r0, #4]
 800d08e:	6083      	str	r3, [r0, #8]
 800d090:	8181      	strh	r1, [r0, #12]
 800d092:	6643      	str	r3, [r0, #100]	; 0x64
 800d094:	81c2      	strh	r2, [r0, #14]
 800d096:	6103      	str	r3, [r0, #16]
 800d098:	6143      	str	r3, [r0, #20]
 800d09a:	6183      	str	r3, [r0, #24]
 800d09c:	0019      	movs	r1, r3
 800d09e:	2208      	movs	r2, #8
 800d0a0:	305c      	adds	r0, #92	; 0x5c
 800d0a2:	f000 f97d 	bl	800d3a0 <memset>
 800d0a6:	4b0b      	ldr	r3, [pc, #44]	; (800d0d4 <std+0x50>)
 800d0a8:	61e4      	str	r4, [r4, #28]
 800d0aa:	6223      	str	r3, [r4, #32]
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <std+0x54>)
 800d0ae:	6263      	str	r3, [r4, #36]	; 0x24
 800d0b0:	4b0a      	ldr	r3, [pc, #40]	; (800d0dc <std+0x58>)
 800d0b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800d0b4:	4b0a      	ldr	r3, [pc, #40]	; (800d0e0 <std+0x5c>)
 800d0b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0b8:	4b0a      	ldr	r3, [pc, #40]	; (800d0e4 <std+0x60>)
 800d0ba:	429c      	cmp	r4, r3
 800d0bc:	d005      	beq.n	800d0ca <std+0x46>
 800d0be:	4b0a      	ldr	r3, [pc, #40]	; (800d0e8 <std+0x64>)
 800d0c0:	429c      	cmp	r4, r3
 800d0c2:	d002      	beq.n	800d0ca <std+0x46>
 800d0c4:	4b09      	ldr	r3, [pc, #36]	; (800d0ec <std+0x68>)
 800d0c6:	429c      	cmp	r4, r3
 800d0c8:	d103      	bne.n	800d0d2 <std+0x4e>
 800d0ca:	0020      	movs	r0, r4
 800d0cc:	3058      	adds	r0, #88	; 0x58
 800d0ce:	f000 fa85 	bl	800d5dc <__retarget_lock_init_recursive>
 800d0d2:	bd10      	pop	{r4, pc}
 800d0d4:	0800d305 	.word	0x0800d305
 800d0d8:	0800d331 	.word	0x0800d331
 800d0dc:	0800d369 	.word	0x0800d369
 800d0e0:	0800d395 	.word	0x0800d395
 800d0e4:	20000c7c 	.word	0x20000c7c
 800d0e8:	20000ce4 	.word	0x20000ce4
 800d0ec:	20000d4c 	.word	0x20000d4c

0800d0f0 <stdio_exit_handler>:
 800d0f0:	b510      	push	{r4, lr}
 800d0f2:	4a03      	ldr	r2, [pc, #12]	; (800d100 <stdio_exit_handler+0x10>)
 800d0f4:	4903      	ldr	r1, [pc, #12]	; (800d104 <stdio_exit_handler+0x14>)
 800d0f6:	4804      	ldr	r0, [pc, #16]	; (800d108 <stdio_exit_handler+0x18>)
 800d0f8:	f000 f86c 	bl	800d1d4 <_fwalk_sglue>
 800d0fc:	bd10      	pop	{r4, pc}
 800d0fe:	46c0      	nop			; (mov r8, r8)
 800d100:	20000438 	.word	0x20000438
 800d104:	080110dd 	.word	0x080110dd
 800d108:	200005b0 	.word	0x200005b0

0800d10c <cleanup_stdio>:
 800d10c:	6841      	ldr	r1, [r0, #4]
 800d10e:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <cleanup_stdio+0x30>)
 800d110:	b510      	push	{r4, lr}
 800d112:	0004      	movs	r4, r0
 800d114:	4299      	cmp	r1, r3
 800d116:	d001      	beq.n	800d11c <cleanup_stdio+0x10>
 800d118:	f003 ffe0 	bl	80110dc <_fclose_r>
 800d11c:	68a1      	ldr	r1, [r4, #8]
 800d11e:	4b08      	ldr	r3, [pc, #32]	; (800d140 <cleanup_stdio+0x34>)
 800d120:	4299      	cmp	r1, r3
 800d122:	d002      	beq.n	800d12a <cleanup_stdio+0x1e>
 800d124:	0020      	movs	r0, r4
 800d126:	f003 ffd9 	bl	80110dc <_fclose_r>
 800d12a:	68e1      	ldr	r1, [r4, #12]
 800d12c:	4b05      	ldr	r3, [pc, #20]	; (800d144 <cleanup_stdio+0x38>)
 800d12e:	4299      	cmp	r1, r3
 800d130:	d002      	beq.n	800d138 <cleanup_stdio+0x2c>
 800d132:	0020      	movs	r0, r4
 800d134:	f003 ffd2 	bl	80110dc <_fclose_r>
 800d138:	bd10      	pop	{r4, pc}
 800d13a:	46c0      	nop			; (mov r8, r8)
 800d13c:	20000c7c 	.word	0x20000c7c
 800d140:	20000ce4 	.word	0x20000ce4
 800d144:	20000d4c 	.word	0x20000d4c

0800d148 <global_stdio_init.part.0>:
 800d148:	b510      	push	{r4, lr}
 800d14a:	4b09      	ldr	r3, [pc, #36]	; (800d170 <global_stdio_init.part.0+0x28>)
 800d14c:	4a09      	ldr	r2, [pc, #36]	; (800d174 <global_stdio_init.part.0+0x2c>)
 800d14e:	2104      	movs	r1, #4
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	4809      	ldr	r0, [pc, #36]	; (800d178 <global_stdio_init.part.0+0x30>)
 800d154:	2200      	movs	r2, #0
 800d156:	f7ff ff95 	bl	800d084 <std>
 800d15a:	2201      	movs	r2, #1
 800d15c:	2109      	movs	r1, #9
 800d15e:	4807      	ldr	r0, [pc, #28]	; (800d17c <global_stdio_init.part.0+0x34>)
 800d160:	f7ff ff90 	bl	800d084 <std>
 800d164:	2202      	movs	r2, #2
 800d166:	2112      	movs	r1, #18
 800d168:	4805      	ldr	r0, [pc, #20]	; (800d180 <global_stdio_init.part.0+0x38>)
 800d16a:	f7ff ff8b 	bl	800d084 <std>
 800d16e:	bd10      	pop	{r4, pc}
 800d170:	20000db4 	.word	0x20000db4
 800d174:	0800d0f1 	.word	0x0800d0f1
 800d178:	20000c7c 	.word	0x20000c7c
 800d17c:	20000ce4 	.word	0x20000ce4
 800d180:	20000d4c 	.word	0x20000d4c

0800d184 <__sfp_lock_acquire>:
 800d184:	b510      	push	{r4, lr}
 800d186:	4802      	ldr	r0, [pc, #8]	; (800d190 <__sfp_lock_acquire+0xc>)
 800d188:	f000 fa2a 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 800d18c:	bd10      	pop	{r4, pc}
 800d18e:	46c0      	nop			; (mov r8, r8)
 800d190:	20000dbe 	.word	0x20000dbe

0800d194 <__sfp_lock_release>:
 800d194:	b510      	push	{r4, lr}
 800d196:	4802      	ldr	r0, [pc, #8]	; (800d1a0 <__sfp_lock_release+0xc>)
 800d198:	f000 fa23 	bl	800d5e2 <__retarget_lock_release_recursive>
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	46c0      	nop			; (mov r8, r8)
 800d1a0:	20000dbe 	.word	0x20000dbe

0800d1a4 <__sinit>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	0004      	movs	r4, r0
 800d1a8:	f7ff ffec 	bl	800d184 <__sfp_lock_acquire>
 800d1ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d002      	beq.n	800d1b8 <__sinit+0x14>
 800d1b2:	f7ff ffef 	bl	800d194 <__sfp_lock_release>
 800d1b6:	bd10      	pop	{r4, pc}
 800d1b8:	4b04      	ldr	r3, [pc, #16]	; (800d1cc <__sinit+0x28>)
 800d1ba:	6363      	str	r3, [r4, #52]	; 0x34
 800d1bc:	4b04      	ldr	r3, [pc, #16]	; (800d1d0 <__sinit+0x2c>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1f6      	bne.n	800d1b2 <__sinit+0xe>
 800d1c4:	f7ff ffc0 	bl	800d148 <global_stdio_init.part.0>
 800d1c8:	e7f3      	b.n	800d1b2 <__sinit+0xe>
 800d1ca:	46c0      	nop			; (mov r8, r8)
 800d1cc:	0800d10d 	.word	0x0800d10d
 800d1d0:	20000db4 	.word	0x20000db4

0800d1d4 <_fwalk_sglue>:
 800d1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d6:	0014      	movs	r4, r2
 800d1d8:	2600      	movs	r6, #0
 800d1da:	9000      	str	r0, [sp, #0]
 800d1dc:	9101      	str	r1, [sp, #4]
 800d1de:	68a5      	ldr	r5, [r4, #8]
 800d1e0:	6867      	ldr	r7, [r4, #4]
 800d1e2:	3f01      	subs	r7, #1
 800d1e4:	d504      	bpl.n	800d1f0 <_fwalk_sglue+0x1c>
 800d1e6:	6824      	ldr	r4, [r4, #0]
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d1f8      	bne.n	800d1de <_fwalk_sglue+0xa>
 800d1ec:	0030      	movs	r0, r6
 800d1ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d1f0:	89ab      	ldrh	r3, [r5, #12]
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d908      	bls.n	800d208 <_fwalk_sglue+0x34>
 800d1f6:	220e      	movs	r2, #14
 800d1f8:	5eab      	ldrsh	r3, [r5, r2]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	d004      	beq.n	800d208 <_fwalk_sglue+0x34>
 800d1fe:	0029      	movs	r1, r5
 800d200:	9800      	ldr	r0, [sp, #0]
 800d202:	9b01      	ldr	r3, [sp, #4]
 800d204:	4798      	blx	r3
 800d206:	4306      	orrs	r6, r0
 800d208:	3568      	adds	r5, #104	; 0x68
 800d20a:	e7ea      	b.n	800d1e2 <_fwalk_sglue+0xe>

0800d20c <snprintf>:
 800d20c:	b40c      	push	{r2, r3}
 800d20e:	b530      	push	{r4, r5, lr}
 800d210:	4b17      	ldr	r3, [pc, #92]	; (800d270 <snprintf+0x64>)
 800d212:	000c      	movs	r4, r1
 800d214:	681d      	ldr	r5, [r3, #0]
 800d216:	b09d      	sub	sp, #116	; 0x74
 800d218:	2900      	cmp	r1, #0
 800d21a:	da08      	bge.n	800d22e <snprintf+0x22>
 800d21c:	238b      	movs	r3, #139	; 0x8b
 800d21e:	2001      	movs	r0, #1
 800d220:	602b      	str	r3, [r5, #0]
 800d222:	4240      	negs	r0, r0
 800d224:	b01d      	add	sp, #116	; 0x74
 800d226:	bc30      	pop	{r4, r5}
 800d228:	bc08      	pop	{r3}
 800d22a:	b002      	add	sp, #8
 800d22c:	4718      	bx	r3
 800d22e:	2382      	movs	r3, #130	; 0x82
 800d230:	466a      	mov	r2, sp
 800d232:	009b      	lsls	r3, r3, #2
 800d234:	8293      	strh	r3, [r2, #20]
 800d236:	2300      	movs	r3, #0
 800d238:	9002      	str	r0, [sp, #8]
 800d23a:	9006      	str	r0, [sp, #24]
 800d23c:	4299      	cmp	r1, r3
 800d23e:	d000      	beq.n	800d242 <snprintf+0x36>
 800d240:	1e4b      	subs	r3, r1, #1
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	9307      	str	r3, [sp, #28]
 800d246:	2301      	movs	r3, #1
 800d248:	466a      	mov	r2, sp
 800d24a:	425b      	negs	r3, r3
 800d24c:	82d3      	strh	r3, [r2, #22]
 800d24e:	0028      	movs	r0, r5
 800d250:	ab21      	add	r3, sp, #132	; 0x84
 800d252:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d254:	a902      	add	r1, sp, #8
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	f001 fae2 	bl	800e820 <_svfprintf_r>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	da01      	bge.n	800d264 <snprintf+0x58>
 800d260:	238b      	movs	r3, #139	; 0x8b
 800d262:	602b      	str	r3, [r5, #0]
 800d264:	2c00      	cmp	r4, #0
 800d266:	d0dd      	beq.n	800d224 <snprintf+0x18>
 800d268:	2200      	movs	r2, #0
 800d26a:	9b02      	ldr	r3, [sp, #8]
 800d26c:	701a      	strb	r2, [r3, #0]
 800d26e:	e7d9      	b.n	800d224 <snprintf+0x18>
 800d270:	200006d0 	.word	0x200006d0

0800d274 <sprintf>:
 800d274:	b40e      	push	{r1, r2, r3}
 800d276:	b500      	push	{lr}
 800d278:	490b      	ldr	r1, [pc, #44]	; (800d2a8 <sprintf+0x34>)
 800d27a:	b09c      	sub	sp, #112	; 0x70
 800d27c:	ab1d      	add	r3, sp, #116	; 0x74
 800d27e:	9002      	str	r0, [sp, #8]
 800d280:	9006      	str	r0, [sp, #24]
 800d282:	9107      	str	r1, [sp, #28]
 800d284:	9104      	str	r1, [sp, #16]
 800d286:	4809      	ldr	r0, [pc, #36]	; (800d2ac <sprintf+0x38>)
 800d288:	4909      	ldr	r1, [pc, #36]	; (800d2b0 <sprintf+0x3c>)
 800d28a:	cb04      	ldmia	r3!, {r2}
 800d28c:	9105      	str	r1, [sp, #20]
 800d28e:	6800      	ldr	r0, [r0, #0]
 800d290:	a902      	add	r1, sp, #8
 800d292:	9301      	str	r3, [sp, #4]
 800d294:	f001 fac4 	bl	800e820 <_svfprintf_r>
 800d298:	2200      	movs	r2, #0
 800d29a:	9b02      	ldr	r3, [sp, #8]
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	b01c      	add	sp, #112	; 0x70
 800d2a0:	bc08      	pop	{r3}
 800d2a2:	b003      	add	sp, #12
 800d2a4:	4718      	bx	r3
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	7fffffff 	.word	0x7fffffff
 800d2ac:	200006d0 	.word	0x200006d0
 800d2b0:	ffff0208 	.word	0xffff0208

0800d2b4 <sscanf>:
 800d2b4:	b40e      	push	{r1, r2, r3}
 800d2b6:	b530      	push	{r4, r5, lr}
 800d2b8:	2381      	movs	r3, #129	; 0x81
 800d2ba:	b09c      	sub	sp, #112	; 0x70
 800d2bc:	466a      	mov	r2, sp
 800d2be:	ac1f      	add	r4, sp, #124	; 0x7c
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	cc20      	ldmia	r4!, {r5}
 800d2c4:	8293      	strh	r3, [r2, #20]
 800d2c6:	9002      	str	r0, [sp, #8]
 800d2c8:	9006      	str	r0, [sp, #24]
 800d2ca:	f7f2 ff1b 	bl	8000104 <strlen>
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <sscanf+0x48>)
 800d2d0:	466a      	mov	r2, sp
 800d2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	9003      	str	r0, [sp, #12]
 800d2d8:	9007      	str	r0, [sp, #28]
 800d2da:	4809      	ldr	r0, [pc, #36]	; (800d300 <sscanf+0x4c>)
 800d2dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d2de:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	82d3      	strh	r3, [r2, #22]
 800d2e4:	a902      	add	r1, sp, #8
 800d2e6:	0023      	movs	r3, r4
 800d2e8:	002a      	movs	r2, r5
 800d2ea:	6800      	ldr	r0, [r0, #0]
 800d2ec:	9401      	str	r4, [sp, #4]
 800d2ee:	f002 fcd9 	bl	800fca4 <__ssvfscanf_r>
 800d2f2:	b01c      	add	sp, #112	; 0x70
 800d2f4:	bc30      	pop	{r4, r5}
 800d2f6:	bc08      	pop	{r3}
 800d2f8:	b003      	add	sp, #12
 800d2fa:	4718      	bx	r3
 800d2fc:	0800d32d 	.word	0x0800d32d
 800d300:	200006d0 	.word	0x200006d0

0800d304 <__sread>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	000c      	movs	r4, r1
 800d308:	250e      	movs	r5, #14
 800d30a:	5f49      	ldrsh	r1, [r1, r5]
 800d30c:	f000 f902 	bl	800d514 <_read_r>
 800d310:	2800      	cmp	r0, #0
 800d312:	db03      	blt.n	800d31c <__sread+0x18>
 800d314:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d316:	181b      	adds	r3, r3, r0
 800d318:	6523      	str	r3, [r4, #80]	; 0x50
 800d31a:	bd70      	pop	{r4, r5, r6, pc}
 800d31c:	89a3      	ldrh	r3, [r4, #12]
 800d31e:	4a02      	ldr	r2, [pc, #8]	; (800d328 <__sread+0x24>)
 800d320:	4013      	ands	r3, r2
 800d322:	81a3      	strh	r3, [r4, #12]
 800d324:	e7f9      	b.n	800d31a <__sread+0x16>
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	ffffefff 	.word	0xffffefff

0800d32c <__seofread>:
 800d32c:	2000      	movs	r0, #0
 800d32e:	4770      	bx	lr

0800d330 <__swrite>:
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	001f      	movs	r7, r3
 800d334:	898b      	ldrh	r3, [r1, #12]
 800d336:	0005      	movs	r5, r0
 800d338:	000c      	movs	r4, r1
 800d33a:	0016      	movs	r6, r2
 800d33c:	05db      	lsls	r3, r3, #23
 800d33e:	d505      	bpl.n	800d34c <__swrite+0x1c>
 800d340:	230e      	movs	r3, #14
 800d342:	5ec9      	ldrsh	r1, [r1, r3]
 800d344:	2200      	movs	r2, #0
 800d346:	2302      	movs	r3, #2
 800d348:	f000 f8d0 	bl	800d4ec <_lseek_r>
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	4a05      	ldr	r2, [pc, #20]	; (800d364 <__swrite+0x34>)
 800d350:	0028      	movs	r0, r5
 800d352:	4013      	ands	r3, r2
 800d354:	81a3      	strh	r3, [r4, #12]
 800d356:	0032      	movs	r2, r6
 800d358:	230e      	movs	r3, #14
 800d35a:	5ee1      	ldrsh	r1, [r4, r3]
 800d35c:	003b      	movs	r3, r7
 800d35e:	f000 f8ff 	bl	800d560 <_write_r>
 800d362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d364:	ffffefff 	.word	0xffffefff

0800d368 <__sseek>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	000c      	movs	r4, r1
 800d36c:	250e      	movs	r5, #14
 800d36e:	5f49      	ldrsh	r1, [r1, r5]
 800d370:	f000 f8bc 	bl	800d4ec <_lseek_r>
 800d374:	89a3      	ldrh	r3, [r4, #12]
 800d376:	1c42      	adds	r2, r0, #1
 800d378:	d103      	bne.n	800d382 <__sseek+0x1a>
 800d37a:	4a05      	ldr	r2, [pc, #20]	; (800d390 <__sseek+0x28>)
 800d37c:	4013      	ands	r3, r2
 800d37e:	81a3      	strh	r3, [r4, #12]
 800d380:	bd70      	pop	{r4, r5, r6, pc}
 800d382:	2280      	movs	r2, #128	; 0x80
 800d384:	0152      	lsls	r2, r2, #5
 800d386:	4313      	orrs	r3, r2
 800d388:	81a3      	strh	r3, [r4, #12]
 800d38a:	6520      	str	r0, [r4, #80]	; 0x50
 800d38c:	e7f8      	b.n	800d380 <__sseek+0x18>
 800d38e:	46c0      	nop			; (mov r8, r8)
 800d390:	ffffefff 	.word	0xffffefff

0800d394 <__sclose>:
 800d394:	b510      	push	{r4, lr}
 800d396:	230e      	movs	r3, #14
 800d398:	5ec9      	ldrsh	r1, [r1, r3]
 800d39a:	f000 f895 	bl	800d4c8 <_close_r>
 800d39e:	bd10      	pop	{r4, pc}

0800d3a0 <memset>:
 800d3a0:	0003      	movs	r3, r0
 800d3a2:	1882      	adds	r2, r0, r2
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d100      	bne.n	800d3aa <memset+0xa>
 800d3a8:	4770      	bx	lr
 800d3aa:	7019      	strb	r1, [r3, #0]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	e7f9      	b.n	800d3a4 <memset+0x4>

0800d3b0 <strchr>:
 800d3b0:	b2c9      	uxtb	r1, r1
 800d3b2:	7803      	ldrb	r3, [r0, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d004      	beq.n	800d3c2 <strchr+0x12>
 800d3b8:	428b      	cmp	r3, r1
 800d3ba:	d100      	bne.n	800d3be <strchr+0xe>
 800d3bc:	4770      	bx	lr
 800d3be:	3001      	adds	r0, #1
 800d3c0:	e7f7      	b.n	800d3b2 <strchr+0x2>
 800d3c2:	424b      	negs	r3, r1
 800d3c4:	4159      	adcs	r1, r3
 800d3c6:	4249      	negs	r1, r1
 800d3c8:	4008      	ands	r0, r1
 800d3ca:	e7f7      	b.n	800d3bc <strchr+0xc>

0800d3cc <strncmp>:
 800d3cc:	b530      	push	{r4, r5, lr}
 800d3ce:	0005      	movs	r5, r0
 800d3d0:	1e10      	subs	r0, r2, #0
 800d3d2:	d00b      	beq.n	800d3ec <strncmp+0x20>
 800d3d4:	2400      	movs	r4, #0
 800d3d6:	3a01      	subs	r2, #1
 800d3d8:	5d2b      	ldrb	r3, [r5, r4]
 800d3da:	5d08      	ldrb	r0, [r1, r4]
 800d3dc:	4283      	cmp	r3, r0
 800d3de:	d104      	bne.n	800d3ea <strncmp+0x1e>
 800d3e0:	42a2      	cmp	r2, r4
 800d3e2:	d002      	beq.n	800d3ea <strncmp+0x1e>
 800d3e4:	3401      	adds	r4, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1f6      	bne.n	800d3d8 <strncmp+0xc>
 800d3ea:	1a18      	subs	r0, r3, r0
 800d3ec:	bd30      	pop	{r4, r5, pc}

0800d3ee <strncpy>:
 800d3ee:	0003      	movs	r3, r0
 800d3f0:	b530      	push	{r4, r5, lr}
 800d3f2:	001d      	movs	r5, r3
 800d3f4:	2a00      	cmp	r2, #0
 800d3f6:	d006      	beq.n	800d406 <strncpy+0x18>
 800d3f8:	780c      	ldrb	r4, [r1, #0]
 800d3fa:	3a01      	subs	r2, #1
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	702c      	strb	r4, [r5, #0]
 800d400:	3101      	adds	r1, #1
 800d402:	2c00      	cmp	r4, #0
 800d404:	d1f5      	bne.n	800d3f2 <strncpy+0x4>
 800d406:	2100      	movs	r1, #0
 800d408:	189a      	adds	r2, r3, r2
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d100      	bne.n	800d410 <strncpy+0x22>
 800d40e:	bd30      	pop	{r4, r5, pc}
 800d410:	7019      	strb	r1, [r3, #0]
 800d412:	3301      	adds	r3, #1
 800d414:	e7f9      	b.n	800d40a <strncpy+0x1c>
	...

0800d418 <strtok>:
 800d418:	4b03      	ldr	r3, [pc, #12]	; (800d428 <strtok+0x10>)
 800d41a:	b510      	push	{r4, lr}
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	2301      	movs	r3, #1
 800d420:	3250      	adds	r2, #80	; 0x50
 800d422:	f000 f803 	bl	800d42c <__strtok_r>
 800d426:	bd10      	pop	{r4, pc}
 800d428:	200006d0 	.word	0x200006d0

0800d42c <__strtok_r>:
 800d42c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d42e:	2800      	cmp	r0, #0
 800d430:	d102      	bne.n	800d438 <__strtok_r+0xc>
 800d432:	6810      	ldr	r0, [r2, #0]
 800d434:	2800      	cmp	r0, #0
 800d436:	d013      	beq.n	800d460 <__strtok_r+0x34>
 800d438:	0004      	movs	r4, r0
 800d43a:	0020      	movs	r0, r4
 800d43c:	000e      	movs	r6, r1
 800d43e:	7805      	ldrb	r5, [r0, #0]
 800d440:	3401      	adds	r4, #1
 800d442:	7837      	ldrb	r7, [r6, #0]
 800d444:	2f00      	cmp	r7, #0
 800d446:	d104      	bne.n	800d452 <__strtok_r+0x26>
 800d448:	2d00      	cmp	r5, #0
 800d44a:	d10f      	bne.n	800d46c <__strtok_r+0x40>
 800d44c:	0028      	movs	r0, r5
 800d44e:	6015      	str	r5, [r2, #0]
 800d450:	e006      	b.n	800d460 <__strtok_r+0x34>
 800d452:	3601      	adds	r6, #1
 800d454:	42bd      	cmp	r5, r7
 800d456:	d1f4      	bne.n	800d442 <__strtok_r+0x16>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1ee      	bne.n	800d43a <__strtok_r+0xe>
 800d45c:	6014      	str	r4, [r2, #0]
 800d45e:	7003      	strb	r3, [r0, #0]
 800d460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d462:	002f      	movs	r7, r5
 800d464:	e00f      	b.n	800d486 <__strtok_r+0x5a>
 800d466:	3301      	adds	r3, #1
 800d468:	2e00      	cmp	r6, #0
 800d46a:	d104      	bne.n	800d476 <__strtok_r+0x4a>
 800d46c:	0023      	movs	r3, r4
 800d46e:	3401      	adds	r4, #1
 800d470:	781d      	ldrb	r5, [r3, #0]
 800d472:	0027      	movs	r7, r4
 800d474:	000b      	movs	r3, r1
 800d476:	781e      	ldrb	r6, [r3, #0]
 800d478:	42b5      	cmp	r5, r6
 800d47a:	d1f4      	bne.n	800d466 <__strtok_r+0x3a>
 800d47c:	2d00      	cmp	r5, #0
 800d47e:	d0f0      	beq.n	800d462 <__strtok_r+0x36>
 800d480:	2300      	movs	r3, #0
 800d482:	3c01      	subs	r4, #1
 800d484:	7023      	strb	r3, [r4, #0]
 800d486:	6017      	str	r7, [r2, #0]
 800d488:	e7ea      	b.n	800d460 <__strtok_r+0x34>

0800d48a <strstr>:
 800d48a:	780a      	ldrb	r2, [r1, #0]
 800d48c:	b530      	push	{r4, r5, lr}
 800d48e:	2a00      	cmp	r2, #0
 800d490:	d10c      	bne.n	800d4ac <strstr+0x22>
 800d492:	bd30      	pop	{r4, r5, pc}
 800d494:	429a      	cmp	r2, r3
 800d496:	d108      	bne.n	800d4aa <strstr+0x20>
 800d498:	2301      	movs	r3, #1
 800d49a:	5ccc      	ldrb	r4, [r1, r3]
 800d49c:	2c00      	cmp	r4, #0
 800d49e:	d0f8      	beq.n	800d492 <strstr+0x8>
 800d4a0:	5cc5      	ldrb	r5, [r0, r3]
 800d4a2:	42a5      	cmp	r5, r4
 800d4a4:	d101      	bne.n	800d4aa <strstr+0x20>
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	e7f7      	b.n	800d49a <strstr+0x10>
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	7803      	ldrb	r3, [r0, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1f0      	bne.n	800d494 <strstr+0xa>
 800d4b2:	0018      	movs	r0, r3
 800d4b4:	e7ed      	b.n	800d492 <strstr+0x8>
	...

0800d4b8 <__locale_mb_cur_max>:
 800d4b8:	2294      	movs	r2, #148	; 0x94
 800d4ba:	4b02      	ldr	r3, [pc, #8]	; (800d4c4 <__locale_mb_cur_max+0xc>)
 800d4bc:	0052      	lsls	r2, r2, #1
 800d4be:	5c98      	ldrb	r0, [r3, r2]
 800d4c0:	4770      	bx	lr
 800d4c2:	46c0      	nop			; (mov r8, r8)
 800d4c4:	20000444 	.word	0x20000444

0800d4c8 <_close_r>:
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	b570      	push	{r4, r5, r6, lr}
 800d4cc:	4d06      	ldr	r5, [pc, #24]	; (800d4e8 <_close_r+0x20>)
 800d4ce:	0004      	movs	r4, r0
 800d4d0:	0008      	movs	r0, r1
 800d4d2:	602b      	str	r3, [r5, #0]
 800d4d4:	f7f6 fed9 	bl	800428a <_close>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d103      	bne.n	800d4e4 <_close_r+0x1c>
 800d4dc:	682b      	ldr	r3, [r5, #0]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d000      	beq.n	800d4e4 <_close_r+0x1c>
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	bd70      	pop	{r4, r5, r6, pc}
 800d4e6:	46c0      	nop			; (mov r8, r8)
 800d4e8:	20000db8 	.word	0x20000db8

0800d4ec <_lseek_r>:
 800d4ec:	b570      	push	{r4, r5, r6, lr}
 800d4ee:	0004      	movs	r4, r0
 800d4f0:	0008      	movs	r0, r1
 800d4f2:	0011      	movs	r1, r2
 800d4f4:	001a      	movs	r2, r3
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	4d05      	ldr	r5, [pc, #20]	; (800d510 <_lseek_r+0x24>)
 800d4fa:	602b      	str	r3, [r5, #0]
 800d4fc:	f7f6 fee6 	bl	80042cc <_lseek>
 800d500:	1c43      	adds	r3, r0, #1
 800d502:	d103      	bne.n	800d50c <_lseek_r+0x20>
 800d504:	682b      	ldr	r3, [r5, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d000      	beq.n	800d50c <_lseek_r+0x20>
 800d50a:	6023      	str	r3, [r4, #0]
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
 800d50e:	46c0      	nop			; (mov r8, r8)
 800d510:	20000db8 	.word	0x20000db8

0800d514 <_read_r>:
 800d514:	b570      	push	{r4, r5, r6, lr}
 800d516:	0004      	movs	r4, r0
 800d518:	0008      	movs	r0, r1
 800d51a:	0011      	movs	r1, r2
 800d51c:	001a      	movs	r2, r3
 800d51e:	2300      	movs	r3, #0
 800d520:	4d05      	ldr	r5, [pc, #20]	; (800d538 <_read_r+0x24>)
 800d522:	602b      	str	r3, [r5, #0]
 800d524:	f7f6 fe78 	bl	8004218 <_read>
 800d528:	1c43      	adds	r3, r0, #1
 800d52a:	d103      	bne.n	800d534 <_read_r+0x20>
 800d52c:	682b      	ldr	r3, [r5, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d000      	beq.n	800d534 <_read_r+0x20>
 800d532:	6023      	str	r3, [r4, #0]
 800d534:	bd70      	pop	{r4, r5, r6, pc}
 800d536:	46c0      	nop			; (mov r8, r8)
 800d538:	20000db8 	.word	0x20000db8

0800d53c <_sbrk_r>:
 800d53c:	2300      	movs	r3, #0
 800d53e:	b570      	push	{r4, r5, r6, lr}
 800d540:	4d06      	ldr	r5, [pc, #24]	; (800d55c <_sbrk_r+0x20>)
 800d542:	0004      	movs	r4, r0
 800d544:	0008      	movs	r0, r1
 800d546:	602b      	str	r3, [r5, #0]
 800d548:	f7f6 fecc 	bl	80042e4 <_sbrk>
 800d54c:	1c43      	adds	r3, r0, #1
 800d54e:	d103      	bne.n	800d558 <_sbrk_r+0x1c>
 800d550:	682b      	ldr	r3, [r5, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d000      	beq.n	800d558 <_sbrk_r+0x1c>
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	46c0      	nop			; (mov r8, r8)
 800d55c:	20000db8 	.word	0x20000db8

0800d560 <_write_r>:
 800d560:	b570      	push	{r4, r5, r6, lr}
 800d562:	0004      	movs	r4, r0
 800d564:	0008      	movs	r0, r1
 800d566:	0011      	movs	r1, r2
 800d568:	001a      	movs	r2, r3
 800d56a:	2300      	movs	r3, #0
 800d56c:	4d05      	ldr	r5, [pc, #20]	; (800d584 <_write_r+0x24>)
 800d56e:	602b      	str	r3, [r5, #0]
 800d570:	f7f6 fe6f 	bl	8004252 <_write>
 800d574:	1c43      	adds	r3, r0, #1
 800d576:	d103      	bne.n	800d580 <_write_r+0x20>
 800d578:	682b      	ldr	r3, [r5, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d000      	beq.n	800d580 <_write_r+0x20>
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	46c0      	nop			; (mov r8, r8)
 800d584:	20000db8 	.word	0x20000db8

0800d588 <__errno>:
 800d588:	4b01      	ldr	r3, [pc, #4]	; (800d590 <__errno+0x8>)
 800d58a:	6818      	ldr	r0, [r3, #0]
 800d58c:	4770      	bx	lr
 800d58e:	46c0      	nop			; (mov r8, r8)
 800d590:	200006d0 	.word	0x200006d0

0800d594 <__libc_init_array>:
 800d594:	b570      	push	{r4, r5, r6, lr}
 800d596:	2600      	movs	r6, #0
 800d598:	4c0c      	ldr	r4, [pc, #48]	; (800d5cc <__libc_init_array+0x38>)
 800d59a:	4d0d      	ldr	r5, [pc, #52]	; (800d5d0 <__libc_init_array+0x3c>)
 800d59c:	1b64      	subs	r4, r4, r5
 800d59e:	10a4      	asrs	r4, r4, #2
 800d5a0:	42a6      	cmp	r6, r4
 800d5a2:	d109      	bne.n	800d5b8 <__libc_init_array+0x24>
 800d5a4:	2600      	movs	r6, #0
 800d5a6:	f006 fc3f 	bl	8013e28 <_init>
 800d5aa:	4c0a      	ldr	r4, [pc, #40]	; (800d5d4 <__libc_init_array+0x40>)
 800d5ac:	4d0a      	ldr	r5, [pc, #40]	; (800d5d8 <__libc_init_array+0x44>)
 800d5ae:	1b64      	subs	r4, r4, r5
 800d5b0:	10a4      	asrs	r4, r4, #2
 800d5b2:	42a6      	cmp	r6, r4
 800d5b4:	d105      	bne.n	800d5c2 <__libc_init_array+0x2e>
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}
 800d5b8:	00b3      	lsls	r3, r6, #2
 800d5ba:	58eb      	ldr	r3, [r5, r3]
 800d5bc:	4798      	blx	r3
 800d5be:	3601      	adds	r6, #1
 800d5c0:	e7ee      	b.n	800d5a0 <__libc_init_array+0xc>
 800d5c2:	00b3      	lsls	r3, r6, #2
 800d5c4:	58eb      	ldr	r3, [r5, r3]
 800d5c6:	4798      	blx	r3
 800d5c8:	3601      	adds	r6, #1
 800d5ca:	e7f2      	b.n	800d5b2 <__libc_init_array+0x1e>
 800d5cc:	08015f34 	.word	0x08015f34
 800d5d0:	08015f34 	.word	0x08015f34
 800d5d4:	08015f3c 	.word	0x08015f3c
 800d5d8:	08015f34 	.word	0x08015f34

0800d5dc <__retarget_lock_init_recursive>:
 800d5dc:	4770      	bx	lr

0800d5de <__retarget_lock_close_recursive>:
 800d5de:	4770      	bx	lr

0800d5e0 <__retarget_lock_acquire_recursive>:
 800d5e0:	4770      	bx	lr

0800d5e2 <__retarget_lock_release_recursive>:
 800d5e2:	4770      	bx	lr

0800d5e4 <sysconf>:
 800d5e4:	2380      	movs	r3, #128	; 0x80
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	2808      	cmp	r0, #8
 800d5ea:	d004      	beq.n	800d5f6 <sysconf+0x12>
 800d5ec:	f7ff ffcc 	bl	800d588 <__errno>
 800d5f0:	2316      	movs	r3, #22
 800d5f2:	6003      	str	r3, [r0, #0]
 800d5f4:	3b17      	subs	r3, #23
 800d5f6:	0018      	movs	r0, r3
 800d5f8:	bd10      	pop	{r4, pc}

0800d5fa <memcpy>:
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	b510      	push	{r4, lr}
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d100      	bne.n	800d604 <memcpy+0xa>
 800d602:	bd10      	pop	{r4, pc}
 800d604:	5ccc      	ldrb	r4, [r1, r3]
 800d606:	54c4      	strb	r4, [r0, r3]
 800d608:	3301      	adds	r3, #1
 800d60a:	e7f8      	b.n	800d5fe <memcpy+0x4>

0800d60c <nan>:
 800d60c:	2000      	movs	r0, #0
 800d60e:	4901      	ldr	r1, [pc, #4]	; (800d614 <nan+0x8>)
 800d610:	4770      	bx	lr
 800d612:	46c0      	nop			; (mov r8, r8)
 800d614:	7ff80000 	.word	0x7ff80000

0800d618 <nanf>:
 800d618:	4800      	ldr	r0, [pc, #0]	; (800d61c <nanf+0x4>)
 800d61a:	4770      	bx	lr
 800d61c:	7fc00000 	.word	0x7fc00000

0800d620 <register_fini>:
 800d620:	4b03      	ldr	r3, [pc, #12]	; (800d630 <register_fini+0x10>)
 800d622:	b510      	push	{r4, lr}
 800d624:	2b00      	cmp	r3, #0
 800d626:	d002      	beq.n	800d62e <register_fini+0xe>
 800d628:	4802      	ldr	r0, [pc, #8]	; (800d634 <register_fini+0x14>)
 800d62a:	f000 f805 	bl	800d638 <atexit>
 800d62e:	bd10      	pop	{r4, pc}
 800d630:	00000000 	.word	0x00000000
 800d634:	08011395 	.word	0x08011395

0800d638 <atexit>:
 800d638:	2300      	movs	r3, #0
 800d63a:	b510      	push	{r4, lr}
 800d63c:	0001      	movs	r1, r0
 800d63e:	001a      	movs	r2, r3
 800d640:	0018      	movs	r0, r3
 800d642:	f003 fef9 	bl	8011438 <__register_exitproc>
 800d646:	bd10      	pop	{r4, pc}

0800d648 <_malloc_trim_r>:
 800d648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d64a:	0004      	movs	r4, r0
 800d64c:	2008      	movs	r0, #8
 800d64e:	000d      	movs	r5, r1
 800d650:	f7ff ffc8 	bl	800d5e4 <sysconf>
 800d654:	0006      	movs	r6, r0
 800d656:	0020      	movs	r0, r4
 800d658:	f7fe fda4 	bl	800c1a4 <__malloc_lock>
 800d65c:	2203      	movs	r2, #3
 800d65e:	4f21      	ldr	r7, [pc, #132]	; (800d6e4 <_malloc_trim_r+0x9c>)
 800d660:	0031      	movs	r1, r6
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	4393      	bics	r3, r2
 800d668:	1b58      	subs	r0, r3, r5
 800d66a:	3811      	subs	r0, #17
 800d66c:	1980      	adds	r0, r0, r6
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	f7f2 fd64 	bl	800013c <__udivsi3>
 800d674:	1e45      	subs	r5, r0, #1
 800d676:	4375      	muls	r5, r6
 800d678:	42ae      	cmp	r6, r5
 800d67a:	dd04      	ble.n	800d686 <_malloc_trim_r+0x3e>
 800d67c:	0020      	movs	r0, r4
 800d67e:	f7fe fd99 	bl	800c1b4 <__malloc_unlock>
 800d682:	2000      	movs	r0, #0
 800d684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d686:	2100      	movs	r1, #0
 800d688:	0020      	movs	r0, r4
 800d68a:	f7ff ff57 	bl	800d53c <_sbrk_r>
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	9a01      	ldr	r2, [sp, #4]
 800d692:	189b      	adds	r3, r3, r2
 800d694:	4298      	cmp	r0, r3
 800d696:	d1f1      	bne.n	800d67c <_malloc_trim_r+0x34>
 800d698:	0020      	movs	r0, r4
 800d69a:	4269      	negs	r1, r5
 800d69c:	f7ff ff4e 	bl	800d53c <_sbrk_r>
 800d6a0:	3001      	adds	r0, #1
 800d6a2:	d110      	bne.n	800d6c6 <_malloc_trim_r+0x7e>
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	0020      	movs	r0, r4
 800d6a8:	f7ff ff48 	bl	800d53c <_sbrk_r>
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	1a81      	subs	r1, r0, r2
 800d6b0:	290f      	cmp	r1, #15
 800d6b2:	dde3      	ble.n	800d67c <_malloc_trim_r+0x34>
 800d6b4:	4d0c      	ldr	r5, [pc, #48]	; (800d6e8 <_malloc_trim_r+0xa0>)
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <_malloc_trim_r+0xa4>)
 800d6b8:	682d      	ldr	r5, [r5, #0]
 800d6ba:	1b40      	subs	r0, r0, r5
 800d6bc:	6018      	str	r0, [r3, #0]
 800d6be:	2301      	movs	r3, #1
 800d6c0:	430b      	orrs	r3, r1
 800d6c2:	6053      	str	r3, [r2, #4]
 800d6c4:	e7da      	b.n	800d67c <_malloc_trim_r+0x34>
 800d6c6:	2601      	movs	r6, #1
 800d6c8:	9b01      	ldr	r3, [sp, #4]
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	1b5b      	subs	r3, r3, r5
 800d6ce:	4333      	orrs	r3, r6
 800d6d0:	6053      	str	r3, [r2, #4]
 800d6d2:	4a06      	ldr	r2, [pc, #24]	; (800d6ec <_malloc_trim_r+0xa4>)
 800d6d4:	0020      	movs	r0, r4
 800d6d6:	6813      	ldr	r3, [r2, #0]
 800d6d8:	1b5b      	subs	r3, r3, r5
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	f7fe fd6a 	bl	800c1b4 <__malloc_unlock>
 800d6e0:	0030      	movs	r0, r6
 800d6e2:	e7cf      	b.n	800d684 <_malloc_trim_r+0x3c>
 800d6e4:	20000028 	.word	0x20000028
 800d6e8:	20000430 	.word	0x20000430
 800d6ec:	20000c48 	.word	0x20000c48

0800d6f0 <_free_r>:
 800d6f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6f2:	1e0d      	subs	r5, r1, #0
 800d6f4:	9001      	str	r0, [sp, #4]
 800d6f6:	d02d      	beq.n	800d754 <_free_r+0x64>
 800d6f8:	f7fe fd54 	bl	800c1a4 <__malloc_lock>
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	0029      	movs	r1, r5
 800d700:	469c      	mov	ip, r3
 800d702:	3908      	subs	r1, #8
 800d704:	684f      	ldr	r7, [r1, #4]
 800d706:	4662      	mov	r2, ip
 800d708:	003b      	movs	r3, r7
 800d70a:	4664      	mov	r4, ip
 800d70c:	4393      	bics	r3, r2
 800d70e:	18c8      	adds	r0, r1, r3
 800d710:	6845      	ldr	r5, [r0, #4]
 800d712:	3202      	adds	r2, #2
 800d714:	4395      	bics	r5, r2
 800d716:	4a4a      	ldr	r2, [pc, #296]	; (800d840 <_free_r+0x150>)
 800d718:	4027      	ands	r7, r4
 800d71a:	6896      	ldr	r6, [r2, #8]
 800d71c:	4286      	cmp	r6, r0
 800d71e:	d11a      	bne.n	800d756 <_free_r+0x66>
 800d720:	195b      	adds	r3, r3, r5
 800d722:	2f00      	cmp	r7, #0
 800d724:	d106      	bne.n	800d734 <_free_r+0x44>
 800d726:	6808      	ldr	r0, [r1, #0]
 800d728:	1a09      	subs	r1, r1, r0
 800d72a:	688d      	ldr	r5, [r1, #8]
 800d72c:	181b      	adds	r3, r3, r0
 800d72e:	68c8      	ldr	r0, [r1, #12]
 800d730:	60e8      	str	r0, [r5, #12]
 800d732:	6085      	str	r5, [r0, #8]
 800d734:	2001      	movs	r0, #1
 800d736:	4318      	orrs	r0, r3
 800d738:	6048      	str	r0, [r1, #4]
 800d73a:	6091      	str	r1, [r2, #8]
 800d73c:	4a41      	ldr	r2, [pc, #260]	; (800d844 <_free_r+0x154>)
 800d73e:	6812      	ldr	r2, [r2, #0]
 800d740:	429a      	cmp	r2, r3
 800d742:	d804      	bhi.n	800d74e <_free_r+0x5e>
 800d744:	4b40      	ldr	r3, [pc, #256]	; (800d848 <_free_r+0x158>)
 800d746:	9801      	ldr	r0, [sp, #4]
 800d748:	6819      	ldr	r1, [r3, #0]
 800d74a:	f7ff ff7d 	bl	800d648 <_malloc_trim_r>
 800d74e:	9801      	ldr	r0, [sp, #4]
 800d750:	f7fe fd30 	bl	800c1b4 <__malloc_unlock>
 800d754:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d756:	2600      	movs	r6, #0
 800d758:	6045      	str	r5, [r0, #4]
 800d75a:	42b7      	cmp	r7, r6
 800d75c:	d109      	bne.n	800d772 <_free_r+0x82>
 800d75e:	680f      	ldr	r7, [r1, #0]
 800d760:	4c3a      	ldr	r4, [pc, #232]	; (800d84c <_free_r+0x15c>)
 800d762:	1bc9      	subs	r1, r1, r7
 800d764:	19db      	adds	r3, r3, r7
 800d766:	688f      	ldr	r7, [r1, #8]
 800d768:	42a7      	cmp	r7, r4
 800d76a:	d02c      	beq.n	800d7c6 <_free_r+0xd6>
 800d76c:	68cc      	ldr	r4, [r1, #12]
 800d76e:	60fc      	str	r4, [r7, #12]
 800d770:	60a7      	str	r7, [r4, #8]
 800d772:	1947      	adds	r7, r0, r5
 800d774:	687c      	ldr	r4, [r7, #4]
 800d776:	2701      	movs	r7, #1
 800d778:	423c      	tst	r4, r7
 800d77a:	d10b      	bne.n	800d794 <_free_r+0xa4>
 800d77c:	195b      	adds	r3, r3, r5
 800d77e:	6885      	ldr	r5, [r0, #8]
 800d780:	2e00      	cmp	r6, #0
 800d782:	d122      	bne.n	800d7ca <_free_r+0xda>
 800d784:	4c31      	ldr	r4, [pc, #196]	; (800d84c <_free_r+0x15c>)
 800d786:	42a5      	cmp	r5, r4
 800d788:	d11f      	bne.n	800d7ca <_free_r+0xda>
 800d78a:	003e      	movs	r6, r7
 800d78c:	6151      	str	r1, [r2, #20]
 800d78e:	6111      	str	r1, [r2, #16]
 800d790:	60cd      	str	r5, [r1, #12]
 800d792:	608d      	str	r5, [r1, #8]
 800d794:	2501      	movs	r5, #1
 800d796:	0028      	movs	r0, r5
 800d798:	4318      	orrs	r0, r3
 800d79a:	6048      	str	r0, [r1, #4]
 800d79c:	50cb      	str	r3, [r1, r3]
 800d79e:	2e00      	cmp	r6, #0
 800d7a0:	d1d5      	bne.n	800d74e <_free_r+0x5e>
 800d7a2:	2080      	movs	r0, #128	; 0x80
 800d7a4:	0080      	lsls	r0, r0, #2
 800d7a6:	4283      	cmp	r3, r0
 800d7a8:	d213      	bcs.n	800d7d2 <_free_r+0xe2>
 800d7aa:	08d8      	lsrs	r0, r3, #3
 800d7ac:	095b      	lsrs	r3, r3, #5
 800d7ae:	409d      	lsls	r5, r3
 800d7b0:	6853      	ldr	r3, [r2, #4]
 800d7b2:	431d      	orrs	r5, r3
 800d7b4:	00c3      	lsls	r3, r0, #3
 800d7b6:	189b      	adds	r3, r3, r2
 800d7b8:	6055      	str	r5, [r2, #4]
 800d7ba:	689a      	ldr	r2, [r3, #8]
 800d7bc:	60cb      	str	r3, [r1, #12]
 800d7be:	608a      	str	r2, [r1, #8]
 800d7c0:	6099      	str	r1, [r3, #8]
 800d7c2:	60d1      	str	r1, [r2, #12]
 800d7c4:	e7c3      	b.n	800d74e <_free_r+0x5e>
 800d7c6:	4666      	mov	r6, ip
 800d7c8:	e7d3      	b.n	800d772 <_free_r+0x82>
 800d7ca:	68c0      	ldr	r0, [r0, #12]
 800d7cc:	60e8      	str	r0, [r5, #12]
 800d7ce:	6085      	str	r5, [r0, #8]
 800d7d0:	e7e0      	b.n	800d794 <_free_r+0xa4>
 800d7d2:	0a5d      	lsrs	r5, r3, #9
 800d7d4:	2d04      	cmp	r5, #4
 800d7d6:	d812      	bhi.n	800d7fe <_free_r+0x10e>
 800d7d8:	0998      	lsrs	r0, r3, #6
 800d7da:	3038      	adds	r0, #56	; 0x38
 800d7dc:	00c6      	lsls	r6, r0, #3
 800d7de:	18b6      	adds	r6, r6, r2
 800d7e0:	68b5      	ldr	r5, [r6, #8]
 800d7e2:	2703      	movs	r7, #3
 800d7e4:	42ae      	cmp	r6, r5
 800d7e6:	d125      	bne.n	800d834 <_free_r+0x144>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	1080      	asrs	r0, r0, #2
 800d7ec:	4083      	lsls	r3, r0
 800d7ee:	6850      	ldr	r0, [r2, #4]
 800d7f0:	4303      	orrs	r3, r0
 800d7f2:	6053      	str	r3, [r2, #4]
 800d7f4:	60ce      	str	r6, [r1, #12]
 800d7f6:	608d      	str	r5, [r1, #8]
 800d7f8:	60b1      	str	r1, [r6, #8]
 800d7fa:	60e9      	str	r1, [r5, #12]
 800d7fc:	e7a7      	b.n	800d74e <_free_r+0x5e>
 800d7fe:	2d14      	cmp	r5, #20
 800d800:	d802      	bhi.n	800d808 <_free_r+0x118>
 800d802:	0028      	movs	r0, r5
 800d804:	305b      	adds	r0, #91	; 0x5b
 800d806:	e7e9      	b.n	800d7dc <_free_r+0xec>
 800d808:	2d54      	cmp	r5, #84	; 0x54
 800d80a:	d802      	bhi.n	800d812 <_free_r+0x122>
 800d80c:	0b18      	lsrs	r0, r3, #12
 800d80e:	306e      	adds	r0, #110	; 0x6e
 800d810:	e7e4      	b.n	800d7dc <_free_r+0xec>
 800d812:	20aa      	movs	r0, #170	; 0xaa
 800d814:	0040      	lsls	r0, r0, #1
 800d816:	4285      	cmp	r5, r0
 800d818:	d802      	bhi.n	800d820 <_free_r+0x130>
 800d81a:	0bd8      	lsrs	r0, r3, #15
 800d81c:	3077      	adds	r0, #119	; 0x77
 800d81e:	e7dd      	b.n	800d7dc <_free_r+0xec>
 800d820:	4e0b      	ldr	r6, [pc, #44]	; (800d850 <_free_r+0x160>)
 800d822:	207e      	movs	r0, #126	; 0x7e
 800d824:	42b5      	cmp	r5, r6
 800d826:	d8d9      	bhi.n	800d7dc <_free_r+0xec>
 800d828:	0c98      	lsrs	r0, r3, #18
 800d82a:	307c      	adds	r0, #124	; 0x7c
 800d82c:	e7d6      	b.n	800d7dc <_free_r+0xec>
 800d82e:	68ad      	ldr	r5, [r5, #8]
 800d830:	42ae      	cmp	r6, r5
 800d832:	d003      	beq.n	800d83c <_free_r+0x14c>
 800d834:	686a      	ldr	r2, [r5, #4]
 800d836:	43ba      	bics	r2, r7
 800d838:	429a      	cmp	r2, r3
 800d83a:	d8f8      	bhi.n	800d82e <_free_r+0x13e>
 800d83c:	68ee      	ldr	r6, [r5, #12]
 800d83e:	e7d9      	b.n	800d7f4 <_free_r+0x104>
 800d840:	20000028 	.word	0x20000028
 800d844:	20000434 	.word	0x20000434
 800d848:	20000c78 	.word	0x20000c78
 800d84c:	20000030 	.word	0x20000030
 800d850:	00000554 	.word	0x00000554

0800d854 <rshift>:
 800d854:	0002      	movs	r2, r0
 800d856:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d858:	6904      	ldr	r4, [r0, #16]
 800d85a:	114b      	asrs	r3, r1, #5
 800d85c:	b085      	sub	sp, #20
 800d85e:	3214      	adds	r2, #20
 800d860:	9302      	str	r3, [sp, #8]
 800d862:	114d      	asrs	r5, r1, #5
 800d864:	0013      	movs	r3, r2
 800d866:	42ac      	cmp	r4, r5
 800d868:	dd32      	ble.n	800d8d0 <rshift+0x7c>
 800d86a:	261f      	movs	r6, #31
 800d86c:	000f      	movs	r7, r1
 800d86e:	114b      	asrs	r3, r1, #5
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	00a5      	lsls	r5, r4, #2
 800d874:	18d3      	adds	r3, r2, r3
 800d876:	4037      	ands	r7, r6
 800d878:	1955      	adds	r5, r2, r5
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	9701      	str	r7, [sp, #4]
 800d87e:	4231      	tst	r1, r6
 800d880:	d10d      	bne.n	800d89e <rshift+0x4a>
 800d882:	0016      	movs	r6, r2
 800d884:	0019      	movs	r1, r3
 800d886:	428d      	cmp	r5, r1
 800d888:	d836      	bhi.n	800d8f8 <rshift+0xa4>
 800d88a:	9900      	ldr	r1, [sp, #0]
 800d88c:	2300      	movs	r3, #0
 800d88e:	3903      	subs	r1, #3
 800d890:	428d      	cmp	r5, r1
 800d892:	d302      	bcc.n	800d89a <rshift+0x46>
 800d894:	9b02      	ldr	r3, [sp, #8]
 800d896:	1ae4      	subs	r4, r4, r3
 800d898:	00a3      	lsls	r3, r4, #2
 800d89a:	18d3      	adds	r3, r2, r3
 800d89c:	e018      	b.n	800d8d0 <rshift+0x7c>
 800d89e:	2120      	movs	r1, #32
 800d8a0:	9e01      	ldr	r6, [sp, #4]
 800d8a2:	9f01      	ldr	r7, [sp, #4]
 800d8a4:	1b89      	subs	r1, r1, r6
 800d8a6:	9e00      	ldr	r6, [sp, #0]
 800d8a8:	9103      	str	r1, [sp, #12]
 800d8aa:	ce02      	ldmia	r6!, {r1}
 800d8ac:	4694      	mov	ip, r2
 800d8ae:	40f9      	lsrs	r1, r7
 800d8b0:	42b5      	cmp	r5, r6
 800d8b2:	d816      	bhi.n	800d8e2 <rshift+0x8e>
 800d8b4:	9e00      	ldr	r6, [sp, #0]
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	3601      	adds	r6, #1
 800d8ba:	42b5      	cmp	r5, r6
 800d8bc:	d303      	bcc.n	800d8c6 <rshift+0x72>
 800d8be:	9b02      	ldr	r3, [sp, #8]
 800d8c0:	1ae3      	subs	r3, r4, r3
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	3b04      	subs	r3, #4
 800d8c6:	18d3      	adds	r3, r2, r3
 800d8c8:	6019      	str	r1, [r3, #0]
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	d000      	beq.n	800d8d0 <rshift+0x7c>
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	1a99      	subs	r1, r3, r2
 800d8d2:	1089      	asrs	r1, r1, #2
 800d8d4:	6101      	str	r1, [r0, #16]
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d101      	bne.n	800d8de <rshift+0x8a>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	6143      	str	r3, [r0, #20]
 800d8de:	b005      	add	sp, #20
 800d8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8e2:	6837      	ldr	r7, [r6, #0]
 800d8e4:	9b03      	ldr	r3, [sp, #12]
 800d8e6:	409f      	lsls	r7, r3
 800d8e8:	430f      	orrs	r7, r1
 800d8ea:	4661      	mov	r1, ip
 800d8ec:	c180      	stmia	r1!, {r7}
 800d8ee:	468c      	mov	ip, r1
 800d8f0:	9b01      	ldr	r3, [sp, #4]
 800d8f2:	ce02      	ldmia	r6!, {r1}
 800d8f4:	40d9      	lsrs	r1, r3
 800d8f6:	e7db      	b.n	800d8b0 <rshift+0x5c>
 800d8f8:	c980      	ldmia	r1!, {r7}
 800d8fa:	c680      	stmia	r6!, {r7}
 800d8fc:	e7c3      	b.n	800d886 <rshift+0x32>

0800d8fe <__hexdig_fun>:
 800d8fe:	0002      	movs	r2, r0
 800d900:	3a30      	subs	r2, #48	; 0x30
 800d902:	0003      	movs	r3, r0
 800d904:	2a09      	cmp	r2, #9
 800d906:	d802      	bhi.n	800d90e <__hexdig_fun+0x10>
 800d908:	3b20      	subs	r3, #32
 800d90a:	b2d8      	uxtb	r0, r3
 800d90c:	4770      	bx	lr
 800d90e:	0002      	movs	r2, r0
 800d910:	3a61      	subs	r2, #97	; 0x61
 800d912:	2a05      	cmp	r2, #5
 800d914:	d801      	bhi.n	800d91a <__hexdig_fun+0x1c>
 800d916:	3b47      	subs	r3, #71	; 0x47
 800d918:	e7f7      	b.n	800d90a <__hexdig_fun+0xc>
 800d91a:	001a      	movs	r2, r3
 800d91c:	3a41      	subs	r2, #65	; 0x41
 800d91e:	2000      	movs	r0, #0
 800d920:	2a05      	cmp	r2, #5
 800d922:	d8f3      	bhi.n	800d90c <__hexdig_fun+0xe>
 800d924:	3b27      	subs	r3, #39	; 0x27
 800d926:	e7f0      	b.n	800d90a <__hexdig_fun+0xc>

0800d928 <__gethex>:
 800d928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d92a:	b089      	sub	sp, #36	; 0x24
 800d92c:	9307      	str	r3, [sp, #28]
 800d92e:	2302      	movs	r3, #2
 800d930:	9201      	str	r2, [sp, #4]
 800d932:	680a      	ldr	r2, [r1, #0]
 800d934:	425b      	negs	r3, r3
 800d936:	9003      	str	r0, [sp, #12]
 800d938:	9106      	str	r1, [sp, #24]
 800d93a:	1c96      	adds	r6, r2, #2
 800d93c:	1a9b      	subs	r3, r3, r2
 800d93e:	199a      	adds	r2, r3, r6
 800d940:	9600      	str	r6, [sp, #0]
 800d942:	9205      	str	r2, [sp, #20]
 800d944:	9a00      	ldr	r2, [sp, #0]
 800d946:	3601      	adds	r6, #1
 800d948:	7810      	ldrb	r0, [r2, #0]
 800d94a:	2830      	cmp	r0, #48	; 0x30
 800d94c:	d0f7      	beq.n	800d93e <__gethex+0x16>
 800d94e:	f7ff ffd6 	bl	800d8fe <__hexdig_fun>
 800d952:	2300      	movs	r3, #0
 800d954:	001d      	movs	r5, r3
 800d956:	9302      	str	r3, [sp, #8]
 800d958:	4298      	cmp	r0, r3
 800d95a:	d11d      	bne.n	800d998 <__gethex+0x70>
 800d95c:	2201      	movs	r2, #1
 800d95e:	49a6      	ldr	r1, [pc, #664]	; (800dbf8 <__gethex+0x2d0>)
 800d960:	9800      	ldr	r0, [sp, #0]
 800d962:	f7ff fd33 	bl	800d3cc <strncmp>
 800d966:	0007      	movs	r7, r0
 800d968:	42a8      	cmp	r0, r5
 800d96a:	d169      	bne.n	800da40 <__gethex+0x118>
 800d96c:	9b00      	ldr	r3, [sp, #0]
 800d96e:	0034      	movs	r4, r6
 800d970:	7858      	ldrb	r0, [r3, #1]
 800d972:	f7ff ffc4 	bl	800d8fe <__hexdig_fun>
 800d976:	2301      	movs	r3, #1
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	42a8      	cmp	r0, r5
 800d97c:	d02f      	beq.n	800d9de <__gethex+0xb6>
 800d97e:	9600      	str	r6, [sp, #0]
 800d980:	9b00      	ldr	r3, [sp, #0]
 800d982:	7818      	ldrb	r0, [r3, #0]
 800d984:	2830      	cmp	r0, #48	; 0x30
 800d986:	d009      	beq.n	800d99c <__gethex+0x74>
 800d988:	f7ff ffb9 	bl	800d8fe <__hexdig_fun>
 800d98c:	4242      	negs	r2, r0
 800d98e:	4142      	adcs	r2, r0
 800d990:	2301      	movs	r3, #1
 800d992:	0035      	movs	r5, r6
 800d994:	9202      	str	r2, [sp, #8]
 800d996:	9305      	str	r3, [sp, #20]
 800d998:	9c00      	ldr	r4, [sp, #0]
 800d99a:	e004      	b.n	800d9a6 <__gethex+0x7e>
 800d99c:	9b00      	ldr	r3, [sp, #0]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	e7ed      	b.n	800d980 <__gethex+0x58>
 800d9a4:	3401      	adds	r4, #1
 800d9a6:	7820      	ldrb	r0, [r4, #0]
 800d9a8:	f7ff ffa9 	bl	800d8fe <__hexdig_fun>
 800d9ac:	1e07      	subs	r7, r0, #0
 800d9ae:	d1f9      	bne.n	800d9a4 <__gethex+0x7c>
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	0020      	movs	r0, r4
 800d9b4:	4990      	ldr	r1, [pc, #576]	; (800dbf8 <__gethex+0x2d0>)
 800d9b6:	f7ff fd09 	bl	800d3cc <strncmp>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	d10d      	bne.n	800d9da <__gethex+0xb2>
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	d106      	bne.n	800d9d0 <__gethex+0xa8>
 800d9c2:	3401      	adds	r4, #1
 800d9c4:	0025      	movs	r5, r4
 800d9c6:	7820      	ldrb	r0, [r4, #0]
 800d9c8:	f7ff ff99 	bl	800d8fe <__hexdig_fun>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d102      	bne.n	800d9d6 <__gethex+0xae>
 800d9d0:	1b2d      	subs	r5, r5, r4
 800d9d2:	00af      	lsls	r7, r5, #2
 800d9d4:	e003      	b.n	800d9de <__gethex+0xb6>
 800d9d6:	3401      	adds	r4, #1
 800d9d8:	e7f5      	b.n	800d9c6 <__gethex+0x9e>
 800d9da:	2d00      	cmp	r5, #0
 800d9dc:	d1f8      	bne.n	800d9d0 <__gethex+0xa8>
 800d9de:	2220      	movs	r2, #32
 800d9e0:	7823      	ldrb	r3, [r4, #0]
 800d9e2:	0026      	movs	r6, r4
 800d9e4:	4393      	bics	r3, r2
 800d9e6:	2b50      	cmp	r3, #80	; 0x50
 800d9e8:	d11d      	bne.n	800da26 <__gethex+0xfe>
 800d9ea:	7863      	ldrb	r3, [r4, #1]
 800d9ec:	2b2b      	cmp	r3, #43	; 0x2b
 800d9ee:	d02c      	beq.n	800da4a <__gethex+0x122>
 800d9f0:	2b2d      	cmp	r3, #45	; 0x2d
 800d9f2:	d02e      	beq.n	800da52 <__gethex+0x12a>
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	1c66      	adds	r6, r4, #1
 800d9f8:	9304      	str	r3, [sp, #16]
 800d9fa:	7830      	ldrb	r0, [r6, #0]
 800d9fc:	f7ff ff7f 	bl	800d8fe <__hexdig_fun>
 800da00:	1e43      	subs	r3, r0, #1
 800da02:	b2db      	uxtb	r3, r3
 800da04:	2b18      	cmp	r3, #24
 800da06:	d82b      	bhi.n	800da60 <__gethex+0x138>
 800da08:	3810      	subs	r0, #16
 800da0a:	0005      	movs	r5, r0
 800da0c:	7870      	ldrb	r0, [r6, #1]
 800da0e:	f7ff ff76 	bl	800d8fe <__hexdig_fun>
 800da12:	1e43      	subs	r3, r0, #1
 800da14:	b2db      	uxtb	r3, r3
 800da16:	3601      	adds	r6, #1
 800da18:	2b18      	cmp	r3, #24
 800da1a:	d91c      	bls.n	800da56 <__gethex+0x12e>
 800da1c:	9b04      	ldr	r3, [sp, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d000      	beq.n	800da24 <__gethex+0xfc>
 800da22:	426d      	negs	r5, r5
 800da24:	197f      	adds	r7, r7, r5
 800da26:	9b06      	ldr	r3, [sp, #24]
 800da28:	601e      	str	r6, [r3, #0]
 800da2a:	9b02      	ldr	r3, [sp, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d019      	beq.n	800da64 <__gethex+0x13c>
 800da30:	2600      	movs	r6, #0
 800da32:	9b05      	ldr	r3, [sp, #20]
 800da34:	42b3      	cmp	r3, r6
 800da36:	d100      	bne.n	800da3a <__gethex+0x112>
 800da38:	3606      	adds	r6, #6
 800da3a:	0030      	movs	r0, r6
 800da3c:	b009      	add	sp, #36	; 0x24
 800da3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da40:	2301      	movs	r3, #1
 800da42:	2700      	movs	r7, #0
 800da44:	9c00      	ldr	r4, [sp, #0]
 800da46:	9302      	str	r3, [sp, #8]
 800da48:	e7c9      	b.n	800d9de <__gethex+0xb6>
 800da4a:	2300      	movs	r3, #0
 800da4c:	9304      	str	r3, [sp, #16]
 800da4e:	1ca6      	adds	r6, r4, #2
 800da50:	e7d3      	b.n	800d9fa <__gethex+0xd2>
 800da52:	2301      	movs	r3, #1
 800da54:	e7fa      	b.n	800da4c <__gethex+0x124>
 800da56:	230a      	movs	r3, #10
 800da58:	435d      	muls	r5, r3
 800da5a:	182d      	adds	r5, r5, r0
 800da5c:	3d10      	subs	r5, #16
 800da5e:	e7d5      	b.n	800da0c <__gethex+0xe4>
 800da60:	0026      	movs	r6, r4
 800da62:	e7e0      	b.n	800da26 <__gethex+0xfe>
 800da64:	9b00      	ldr	r3, [sp, #0]
 800da66:	9902      	ldr	r1, [sp, #8]
 800da68:	1ae3      	subs	r3, r4, r3
 800da6a:	3b01      	subs	r3, #1
 800da6c:	2b07      	cmp	r3, #7
 800da6e:	dc0a      	bgt.n	800da86 <__gethex+0x15e>
 800da70:	9803      	ldr	r0, [sp, #12]
 800da72:	f000 fa5d 	bl	800df30 <_Balloc>
 800da76:	1e05      	subs	r5, r0, #0
 800da78:	d108      	bne.n	800da8c <__gethex+0x164>
 800da7a:	002a      	movs	r2, r5
 800da7c:	21e4      	movs	r1, #228	; 0xe4
 800da7e:	4b5f      	ldr	r3, [pc, #380]	; (800dbfc <__gethex+0x2d4>)
 800da80:	485f      	ldr	r0, [pc, #380]	; (800dc00 <__gethex+0x2d8>)
 800da82:	f003 fd19 	bl	80114b8 <__assert_func>
 800da86:	3101      	adds	r1, #1
 800da88:	105b      	asrs	r3, r3, #1
 800da8a:	e7ef      	b.n	800da6c <__gethex+0x144>
 800da8c:	0003      	movs	r3, r0
 800da8e:	3314      	adds	r3, #20
 800da90:	9302      	str	r3, [sp, #8]
 800da92:	9305      	str	r3, [sp, #20]
 800da94:	2300      	movs	r3, #0
 800da96:	001e      	movs	r6, r3
 800da98:	9304      	str	r3, [sp, #16]
 800da9a:	9b00      	ldr	r3, [sp, #0]
 800da9c:	42a3      	cmp	r3, r4
 800da9e:	d33f      	bcc.n	800db20 <__gethex+0x1f8>
 800daa0:	9c05      	ldr	r4, [sp, #20]
 800daa2:	9b02      	ldr	r3, [sp, #8]
 800daa4:	c440      	stmia	r4!, {r6}
 800daa6:	1ae4      	subs	r4, r4, r3
 800daa8:	10a4      	asrs	r4, r4, #2
 800daaa:	0030      	movs	r0, r6
 800daac:	612c      	str	r4, [r5, #16]
 800daae:	f000 fb01 	bl	800e0b4 <__hi0bits>
 800dab2:	9b01      	ldr	r3, [sp, #4]
 800dab4:	0164      	lsls	r4, r4, #5
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	1a26      	subs	r6, r4, r0
 800daba:	9300      	str	r3, [sp, #0]
 800dabc:	429e      	cmp	r6, r3
 800dabe:	dd51      	ble.n	800db64 <__gethex+0x23c>
 800dac0:	1af6      	subs	r6, r6, r3
 800dac2:	0031      	movs	r1, r6
 800dac4:	0028      	movs	r0, r5
 800dac6:	f000 fe7b 	bl	800e7c0 <__any_on>
 800daca:	1e04      	subs	r4, r0, #0
 800dacc:	d016      	beq.n	800dafc <__gethex+0x1d4>
 800dace:	2401      	movs	r4, #1
 800dad0:	231f      	movs	r3, #31
 800dad2:	0020      	movs	r0, r4
 800dad4:	1e72      	subs	r2, r6, #1
 800dad6:	4013      	ands	r3, r2
 800dad8:	4098      	lsls	r0, r3
 800dada:	0003      	movs	r3, r0
 800dadc:	1151      	asrs	r1, r2, #5
 800dade:	9802      	ldr	r0, [sp, #8]
 800dae0:	0089      	lsls	r1, r1, #2
 800dae2:	5809      	ldr	r1, [r1, r0]
 800dae4:	4219      	tst	r1, r3
 800dae6:	d009      	beq.n	800dafc <__gethex+0x1d4>
 800dae8:	42a2      	cmp	r2, r4
 800daea:	dd06      	ble.n	800dafa <__gethex+0x1d2>
 800daec:	0028      	movs	r0, r5
 800daee:	1eb1      	subs	r1, r6, #2
 800daf0:	f000 fe66 	bl	800e7c0 <__any_on>
 800daf4:	3402      	adds	r4, #2
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d100      	bne.n	800dafc <__gethex+0x1d4>
 800dafa:	2402      	movs	r4, #2
 800dafc:	0031      	movs	r1, r6
 800dafe:	0028      	movs	r0, r5
 800db00:	f7ff fea8 	bl	800d854 <rshift>
 800db04:	19bf      	adds	r7, r7, r6
 800db06:	9b01      	ldr	r3, [sp, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	42bb      	cmp	r3, r7
 800db0c:	da3a      	bge.n	800db84 <__gethex+0x25c>
 800db0e:	0029      	movs	r1, r5
 800db10:	9803      	ldr	r0, [sp, #12]
 800db12:	f000 fa35 	bl	800df80 <_Bfree>
 800db16:	2300      	movs	r3, #0
 800db18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800db1a:	26a3      	movs	r6, #163	; 0xa3
 800db1c:	6013      	str	r3, [r2, #0]
 800db1e:	e78c      	b.n	800da3a <__gethex+0x112>
 800db20:	3c01      	subs	r4, #1
 800db22:	7823      	ldrb	r3, [r4, #0]
 800db24:	2b2e      	cmp	r3, #46	; 0x2e
 800db26:	d012      	beq.n	800db4e <__gethex+0x226>
 800db28:	9b04      	ldr	r3, [sp, #16]
 800db2a:	2b20      	cmp	r3, #32
 800db2c:	d104      	bne.n	800db38 <__gethex+0x210>
 800db2e:	9b05      	ldr	r3, [sp, #20]
 800db30:	c340      	stmia	r3!, {r6}
 800db32:	2600      	movs	r6, #0
 800db34:	9305      	str	r3, [sp, #20]
 800db36:	9604      	str	r6, [sp, #16]
 800db38:	7820      	ldrb	r0, [r4, #0]
 800db3a:	f7ff fee0 	bl	800d8fe <__hexdig_fun>
 800db3e:	230f      	movs	r3, #15
 800db40:	4018      	ands	r0, r3
 800db42:	9b04      	ldr	r3, [sp, #16]
 800db44:	4098      	lsls	r0, r3
 800db46:	3304      	adds	r3, #4
 800db48:	4306      	orrs	r6, r0
 800db4a:	9304      	str	r3, [sp, #16]
 800db4c:	e7a5      	b.n	800da9a <__gethex+0x172>
 800db4e:	9b00      	ldr	r3, [sp, #0]
 800db50:	42a3      	cmp	r3, r4
 800db52:	d8e9      	bhi.n	800db28 <__gethex+0x200>
 800db54:	2201      	movs	r2, #1
 800db56:	0020      	movs	r0, r4
 800db58:	4927      	ldr	r1, [pc, #156]	; (800dbf8 <__gethex+0x2d0>)
 800db5a:	f7ff fc37 	bl	800d3cc <strncmp>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d1e2      	bne.n	800db28 <__gethex+0x200>
 800db62:	e79a      	b.n	800da9a <__gethex+0x172>
 800db64:	9b00      	ldr	r3, [sp, #0]
 800db66:	2400      	movs	r4, #0
 800db68:	429e      	cmp	r6, r3
 800db6a:	dacc      	bge.n	800db06 <__gethex+0x1de>
 800db6c:	1b9e      	subs	r6, r3, r6
 800db6e:	0029      	movs	r1, r5
 800db70:	0032      	movs	r2, r6
 800db72:	9803      	ldr	r0, [sp, #12]
 800db74:	f000 fbf0 	bl	800e358 <__lshift>
 800db78:	0003      	movs	r3, r0
 800db7a:	3314      	adds	r3, #20
 800db7c:	0005      	movs	r5, r0
 800db7e:	1bbf      	subs	r7, r7, r6
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	e7c0      	b.n	800db06 <__gethex+0x1de>
 800db84:	9b01      	ldr	r3, [sp, #4]
 800db86:	685e      	ldr	r6, [r3, #4]
 800db88:	42be      	cmp	r6, r7
 800db8a:	dd70      	ble.n	800dc6e <__gethex+0x346>
 800db8c:	9b00      	ldr	r3, [sp, #0]
 800db8e:	1bf6      	subs	r6, r6, r7
 800db90:	42b3      	cmp	r3, r6
 800db92:	dc37      	bgt.n	800dc04 <__gethex+0x2dc>
 800db94:	9b01      	ldr	r3, [sp, #4]
 800db96:	68db      	ldr	r3, [r3, #12]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d024      	beq.n	800dbe6 <__gethex+0x2be>
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d026      	beq.n	800dbee <__gethex+0x2c6>
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d117      	bne.n	800dbd4 <__gethex+0x2ac>
 800dba4:	9b00      	ldr	r3, [sp, #0]
 800dba6:	42b3      	cmp	r3, r6
 800dba8:	d114      	bne.n	800dbd4 <__gethex+0x2ac>
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d10b      	bne.n	800dbc6 <__gethex+0x29e>
 800dbae:	9b01      	ldr	r3, [sp, #4]
 800dbb0:	9a07      	ldr	r2, [sp, #28]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	2662      	movs	r6, #98	; 0x62
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	2301      	movs	r3, #1
 800dbba:	9a02      	ldr	r2, [sp, #8]
 800dbbc:	612b      	str	r3, [r5, #16]
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc2:	601d      	str	r5, [r3, #0]
 800dbc4:	e739      	b.n	800da3a <__gethex+0x112>
 800dbc6:	9900      	ldr	r1, [sp, #0]
 800dbc8:	0028      	movs	r0, r5
 800dbca:	3901      	subs	r1, #1
 800dbcc:	f000 fdf8 	bl	800e7c0 <__any_on>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d1ec      	bne.n	800dbae <__gethex+0x286>
 800dbd4:	0029      	movs	r1, r5
 800dbd6:	9803      	ldr	r0, [sp, #12]
 800dbd8:	f000 f9d2 	bl	800df80 <_Bfree>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbe0:	2650      	movs	r6, #80	; 0x50
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	e729      	b.n	800da3a <__gethex+0x112>
 800dbe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d1f3      	bne.n	800dbd4 <__gethex+0x2ac>
 800dbec:	e7df      	b.n	800dbae <__gethex+0x286>
 800dbee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d1dc      	bne.n	800dbae <__gethex+0x286>
 800dbf4:	e7ee      	b.n	800dbd4 <__gethex+0x2ac>
 800dbf6:	46c0      	nop			; (mov r8, r8)
 800dbf8:	08015ac0 	.word	0x08015ac0
 800dbfc:	08015c21 	.word	0x08015c21
 800dc00:	08015c32 	.word	0x08015c32
 800dc04:	1e77      	subs	r7, r6, #1
 800dc06:	2c00      	cmp	r4, #0
 800dc08:	d12f      	bne.n	800dc6a <__gethex+0x342>
 800dc0a:	2f00      	cmp	r7, #0
 800dc0c:	d004      	beq.n	800dc18 <__gethex+0x2f0>
 800dc0e:	0039      	movs	r1, r7
 800dc10:	0028      	movs	r0, r5
 800dc12:	f000 fdd5 	bl	800e7c0 <__any_on>
 800dc16:	0004      	movs	r4, r0
 800dc18:	231f      	movs	r3, #31
 800dc1a:	117a      	asrs	r2, r7, #5
 800dc1c:	401f      	ands	r7, r3
 800dc1e:	3b1e      	subs	r3, #30
 800dc20:	40bb      	lsls	r3, r7
 800dc22:	9902      	ldr	r1, [sp, #8]
 800dc24:	0092      	lsls	r2, r2, #2
 800dc26:	5852      	ldr	r2, [r2, r1]
 800dc28:	421a      	tst	r2, r3
 800dc2a:	d001      	beq.n	800dc30 <__gethex+0x308>
 800dc2c:	2302      	movs	r3, #2
 800dc2e:	431c      	orrs	r4, r3
 800dc30:	9b00      	ldr	r3, [sp, #0]
 800dc32:	0031      	movs	r1, r6
 800dc34:	1b9b      	subs	r3, r3, r6
 800dc36:	2602      	movs	r6, #2
 800dc38:	0028      	movs	r0, r5
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	f7ff fe0a 	bl	800d854 <rshift>
 800dc40:	9b01      	ldr	r3, [sp, #4]
 800dc42:	685f      	ldr	r7, [r3, #4]
 800dc44:	2c00      	cmp	r4, #0
 800dc46:	d041      	beq.n	800dccc <__gethex+0x3a4>
 800dc48:	9b01      	ldr	r3, [sp, #4]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	2b02      	cmp	r3, #2
 800dc4e:	d010      	beq.n	800dc72 <__gethex+0x34a>
 800dc50:	2b03      	cmp	r3, #3
 800dc52:	d012      	beq.n	800dc7a <__gethex+0x352>
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d106      	bne.n	800dc66 <__gethex+0x33e>
 800dc58:	07a2      	lsls	r2, r4, #30
 800dc5a:	d504      	bpl.n	800dc66 <__gethex+0x33e>
 800dc5c:	9a02      	ldr	r2, [sp, #8]
 800dc5e:	6812      	ldr	r2, [r2, #0]
 800dc60:	4314      	orrs	r4, r2
 800dc62:	421c      	tst	r4, r3
 800dc64:	d10c      	bne.n	800dc80 <__gethex+0x358>
 800dc66:	2310      	movs	r3, #16
 800dc68:	e02f      	b.n	800dcca <__gethex+0x3a2>
 800dc6a:	2401      	movs	r4, #1
 800dc6c:	e7d4      	b.n	800dc18 <__gethex+0x2f0>
 800dc6e:	2601      	movs	r6, #1
 800dc70:	e7e8      	b.n	800dc44 <__gethex+0x31c>
 800dc72:	2301      	movs	r3, #1
 800dc74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc76:	1a9b      	subs	r3, r3, r2
 800dc78:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0f2      	beq.n	800dc66 <__gethex+0x33e>
 800dc80:	692b      	ldr	r3, [r5, #16]
 800dc82:	2000      	movs	r0, #0
 800dc84:	9302      	str	r3, [sp, #8]
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	002b      	movs	r3, r5
 800dc8c:	9a04      	ldr	r2, [sp, #16]
 800dc8e:	3314      	adds	r3, #20
 800dc90:	1899      	adds	r1, r3, r2
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	1c54      	adds	r4, r2, #1
 800dc96:	d01e      	beq.n	800dcd6 <__gethex+0x3ae>
 800dc98:	3201      	adds	r2, #1
 800dc9a:	601a      	str	r2, [r3, #0]
 800dc9c:	002b      	movs	r3, r5
 800dc9e:	3314      	adds	r3, #20
 800dca0:	2e02      	cmp	r6, #2
 800dca2:	d141      	bne.n	800dd28 <__gethex+0x400>
 800dca4:	9a01      	ldr	r2, [sp, #4]
 800dca6:	9900      	ldr	r1, [sp, #0]
 800dca8:	6812      	ldr	r2, [r2, #0]
 800dcaa:	3a01      	subs	r2, #1
 800dcac:	428a      	cmp	r2, r1
 800dcae:	d10b      	bne.n	800dcc8 <__gethex+0x3a0>
 800dcb0:	221f      	movs	r2, #31
 800dcb2:	9800      	ldr	r0, [sp, #0]
 800dcb4:	1149      	asrs	r1, r1, #5
 800dcb6:	4002      	ands	r2, r0
 800dcb8:	2001      	movs	r0, #1
 800dcba:	0004      	movs	r4, r0
 800dcbc:	4094      	lsls	r4, r2
 800dcbe:	0089      	lsls	r1, r1, #2
 800dcc0:	58cb      	ldr	r3, [r1, r3]
 800dcc2:	4223      	tst	r3, r4
 800dcc4:	d000      	beq.n	800dcc8 <__gethex+0x3a0>
 800dcc6:	2601      	movs	r6, #1
 800dcc8:	2320      	movs	r3, #32
 800dcca:	431e      	orrs	r6, r3
 800dccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcce:	601d      	str	r5, [r3, #0]
 800dcd0:	9b07      	ldr	r3, [sp, #28]
 800dcd2:	601f      	str	r7, [r3, #0]
 800dcd4:	e6b1      	b.n	800da3a <__gethex+0x112>
 800dcd6:	c301      	stmia	r3!, {r0}
 800dcd8:	4299      	cmp	r1, r3
 800dcda:	d8da      	bhi.n	800dc92 <__gethex+0x36a>
 800dcdc:	68ab      	ldr	r3, [r5, #8]
 800dcde:	9a02      	ldr	r2, [sp, #8]
 800dce0:	429a      	cmp	r2, r3
 800dce2:	db18      	blt.n	800dd16 <__gethex+0x3ee>
 800dce4:	6869      	ldr	r1, [r5, #4]
 800dce6:	9803      	ldr	r0, [sp, #12]
 800dce8:	3101      	adds	r1, #1
 800dcea:	f000 f921 	bl	800df30 <_Balloc>
 800dcee:	1e04      	subs	r4, r0, #0
 800dcf0:	d104      	bne.n	800dcfc <__gethex+0x3d4>
 800dcf2:	0022      	movs	r2, r4
 800dcf4:	2184      	movs	r1, #132	; 0x84
 800dcf6:	4b1c      	ldr	r3, [pc, #112]	; (800dd68 <__gethex+0x440>)
 800dcf8:	481c      	ldr	r0, [pc, #112]	; (800dd6c <__gethex+0x444>)
 800dcfa:	e6c2      	b.n	800da82 <__gethex+0x15a>
 800dcfc:	0029      	movs	r1, r5
 800dcfe:	692a      	ldr	r2, [r5, #16]
 800dd00:	310c      	adds	r1, #12
 800dd02:	3202      	adds	r2, #2
 800dd04:	0092      	lsls	r2, r2, #2
 800dd06:	300c      	adds	r0, #12
 800dd08:	f7ff fc77 	bl	800d5fa <memcpy>
 800dd0c:	0029      	movs	r1, r5
 800dd0e:	9803      	ldr	r0, [sp, #12]
 800dd10:	f000 f936 	bl	800df80 <_Bfree>
 800dd14:	0025      	movs	r5, r4
 800dd16:	692b      	ldr	r3, [r5, #16]
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	612a      	str	r2, [r5, #16]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	3304      	adds	r3, #4
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	18eb      	adds	r3, r5, r3
 800dd24:	605a      	str	r2, [r3, #4]
 800dd26:	e7b9      	b.n	800dc9c <__gethex+0x374>
 800dd28:	692a      	ldr	r2, [r5, #16]
 800dd2a:	9902      	ldr	r1, [sp, #8]
 800dd2c:	428a      	cmp	r2, r1
 800dd2e:	dd09      	ble.n	800dd44 <__gethex+0x41c>
 800dd30:	2101      	movs	r1, #1
 800dd32:	0028      	movs	r0, r5
 800dd34:	f7ff fd8e 	bl	800d854 <rshift>
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	3701      	adds	r7, #1
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	42bb      	cmp	r3, r7
 800dd40:	dac1      	bge.n	800dcc6 <__gethex+0x39e>
 800dd42:	e6e4      	b.n	800db0e <__gethex+0x1e6>
 800dd44:	221f      	movs	r2, #31
 800dd46:	9c00      	ldr	r4, [sp, #0]
 800dd48:	9900      	ldr	r1, [sp, #0]
 800dd4a:	2601      	movs	r6, #1
 800dd4c:	4014      	ands	r4, r2
 800dd4e:	4211      	tst	r1, r2
 800dd50:	d0ba      	beq.n	800dcc8 <__gethex+0x3a0>
 800dd52:	9a04      	ldr	r2, [sp, #16]
 800dd54:	189b      	adds	r3, r3, r2
 800dd56:	3b04      	subs	r3, #4
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	f000 f9ab 	bl	800e0b4 <__hi0bits>
 800dd5e:	2320      	movs	r3, #32
 800dd60:	1b1b      	subs	r3, r3, r4
 800dd62:	4298      	cmp	r0, r3
 800dd64:	dbe4      	blt.n	800dd30 <__gethex+0x408>
 800dd66:	e7af      	b.n	800dcc8 <__gethex+0x3a0>
 800dd68:	08015c21 	.word	0x08015c21
 800dd6c:	08015c32 	.word	0x08015c32

0800dd70 <L_shift>:
 800dd70:	2308      	movs	r3, #8
 800dd72:	b570      	push	{r4, r5, r6, lr}
 800dd74:	2520      	movs	r5, #32
 800dd76:	1a9a      	subs	r2, r3, r2
 800dd78:	0092      	lsls	r2, r2, #2
 800dd7a:	1aad      	subs	r5, r5, r2
 800dd7c:	6843      	ldr	r3, [r0, #4]
 800dd7e:	6804      	ldr	r4, [r0, #0]
 800dd80:	001e      	movs	r6, r3
 800dd82:	40ae      	lsls	r6, r5
 800dd84:	40d3      	lsrs	r3, r2
 800dd86:	4334      	orrs	r4, r6
 800dd88:	6004      	str	r4, [r0, #0]
 800dd8a:	6043      	str	r3, [r0, #4]
 800dd8c:	3004      	adds	r0, #4
 800dd8e:	4288      	cmp	r0, r1
 800dd90:	d3f4      	bcc.n	800dd7c <L_shift+0xc>
 800dd92:	bd70      	pop	{r4, r5, r6, pc}

0800dd94 <__match>:
 800dd94:	b530      	push	{r4, r5, lr}
 800dd96:	6803      	ldr	r3, [r0, #0]
 800dd98:	780c      	ldrb	r4, [r1, #0]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	2c00      	cmp	r4, #0
 800dd9e:	d102      	bne.n	800dda6 <__match+0x12>
 800dda0:	6003      	str	r3, [r0, #0]
 800dda2:	2001      	movs	r0, #1
 800dda4:	bd30      	pop	{r4, r5, pc}
 800dda6:	781a      	ldrb	r2, [r3, #0]
 800dda8:	0015      	movs	r5, r2
 800ddaa:	3d41      	subs	r5, #65	; 0x41
 800ddac:	2d19      	cmp	r5, #25
 800ddae:	d800      	bhi.n	800ddb2 <__match+0x1e>
 800ddb0:	3220      	adds	r2, #32
 800ddb2:	3101      	adds	r1, #1
 800ddb4:	42a2      	cmp	r2, r4
 800ddb6:	d0ef      	beq.n	800dd98 <__match+0x4>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e7f3      	b.n	800dda4 <__match+0x10>

0800ddbc <__hexnan>:
 800ddbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddbe:	680b      	ldr	r3, [r1, #0]
 800ddc0:	b08b      	sub	sp, #44	; 0x2c
 800ddc2:	9201      	str	r2, [sp, #4]
 800ddc4:	9901      	ldr	r1, [sp, #4]
 800ddc6:	115a      	asrs	r2, r3, #5
 800ddc8:	0092      	lsls	r2, r2, #2
 800ddca:	188a      	adds	r2, r1, r2
 800ddcc:	9202      	str	r2, [sp, #8]
 800ddce:	0019      	movs	r1, r3
 800ddd0:	221f      	movs	r2, #31
 800ddd2:	4011      	ands	r1, r2
 800ddd4:	9008      	str	r0, [sp, #32]
 800ddd6:	9106      	str	r1, [sp, #24]
 800ddd8:	4213      	tst	r3, r2
 800ddda:	d002      	beq.n	800dde2 <__hexnan+0x26>
 800dddc:	9b02      	ldr	r3, [sp, #8]
 800ddde:	3304      	adds	r3, #4
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	9b02      	ldr	r3, [sp, #8]
 800dde4:	2500      	movs	r5, #0
 800dde6:	1f1f      	subs	r7, r3, #4
 800dde8:	003e      	movs	r6, r7
 800ddea:	003c      	movs	r4, r7
 800ddec:	9b08      	ldr	r3, [sp, #32]
 800ddee:	603d      	str	r5, [r7, #0]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	9507      	str	r5, [sp, #28]
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	9503      	str	r5, [sp, #12]
 800ddf8:	9b05      	ldr	r3, [sp, #20]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfe:	9b05      	ldr	r3, [sp, #20]
 800de00:	785b      	ldrb	r3, [r3, #1]
 800de02:	9304      	str	r3, [sp, #16]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d028      	beq.n	800de5a <__hexnan+0x9e>
 800de08:	9804      	ldr	r0, [sp, #16]
 800de0a:	f7ff fd78 	bl	800d8fe <__hexdig_fun>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d154      	bne.n	800debc <__hexnan+0x100>
 800de12:	9b04      	ldr	r3, [sp, #16]
 800de14:	2b20      	cmp	r3, #32
 800de16:	d819      	bhi.n	800de4c <__hexnan+0x90>
 800de18:	9b03      	ldr	r3, [sp, #12]
 800de1a:	9a07      	ldr	r2, [sp, #28]
 800de1c:	4293      	cmp	r3, r2
 800de1e:	dd12      	ble.n	800de46 <__hexnan+0x8a>
 800de20:	42b4      	cmp	r4, r6
 800de22:	d206      	bcs.n	800de32 <__hexnan+0x76>
 800de24:	2d07      	cmp	r5, #7
 800de26:	dc04      	bgt.n	800de32 <__hexnan+0x76>
 800de28:	002a      	movs	r2, r5
 800de2a:	0031      	movs	r1, r6
 800de2c:	0020      	movs	r0, r4
 800de2e:	f7ff ff9f 	bl	800dd70 <L_shift>
 800de32:	9b01      	ldr	r3, [sp, #4]
 800de34:	2508      	movs	r5, #8
 800de36:	429c      	cmp	r4, r3
 800de38:	d905      	bls.n	800de46 <__hexnan+0x8a>
 800de3a:	1f26      	subs	r6, r4, #4
 800de3c:	2500      	movs	r5, #0
 800de3e:	0034      	movs	r4, r6
 800de40:	9b03      	ldr	r3, [sp, #12]
 800de42:	6035      	str	r5, [r6, #0]
 800de44:	9307      	str	r3, [sp, #28]
 800de46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de48:	9305      	str	r3, [sp, #20]
 800de4a:	e7d5      	b.n	800ddf8 <__hexnan+0x3c>
 800de4c:	9b04      	ldr	r3, [sp, #16]
 800de4e:	2b29      	cmp	r3, #41	; 0x29
 800de50:	d159      	bne.n	800df06 <__hexnan+0x14a>
 800de52:	9b05      	ldr	r3, [sp, #20]
 800de54:	9a08      	ldr	r2, [sp, #32]
 800de56:	3302      	adds	r3, #2
 800de58:	6013      	str	r3, [r2, #0]
 800de5a:	9b03      	ldr	r3, [sp, #12]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d052      	beq.n	800df06 <__hexnan+0x14a>
 800de60:	42b4      	cmp	r4, r6
 800de62:	d206      	bcs.n	800de72 <__hexnan+0xb6>
 800de64:	2d07      	cmp	r5, #7
 800de66:	dc04      	bgt.n	800de72 <__hexnan+0xb6>
 800de68:	002a      	movs	r2, r5
 800de6a:	0031      	movs	r1, r6
 800de6c:	0020      	movs	r0, r4
 800de6e:	f7ff ff7f 	bl	800dd70 <L_shift>
 800de72:	9b01      	ldr	r3, [sp, #4]
 800de74:	429c      	cmp	r4, r3
 800de76:	d935      	bls.n	800dee4 <__hexnan+0x128>
 800de78:	001a      	movs	r2, r3
 800de7a:	0023      	movs	r3, r4
 800de7c:	cb02      	ldmia	r3!, {r1}
 800de7e:	c202      	stmia	r2!, {r1}
 800de80:	429f      	cmp	r7, r3
 800de82:	d2fb      	bcs.n	800de7c <__hexnan+0xc0>
 800de84:	9b02      	ldr	r3, [sp, #8]
 800de86:	1c62      	adds	r2, r4, #1
 800de88:	1ed9      	subs	r1, r3, #3
 800de8a:	2304      	movs	r3, #4
 800de8c:	4291      	cmp	r1, r2
 800de8e:	d305      	bcc.n	800de9c <__hexnan+0xe0>
 800de90:	9b02      	ldr	r3, [sp, #8]
 800de92:	3b04      	subs	r3, #4
 800de94:	1b1b      	subs	r3, r3, r4
 800de96:	089b      	lsrs	r3, r3, #2
 800de98:	3301      	adds	r3, #1
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	9a01      	ldr	r2, [sp, #4]
 800de9e:	18d3      	adds	r3, r2, r3
 800dea0:	2200      	movs	r2, #0
 800dea2:	c304      	stmia	r3!, {r2}
 800dea4:	429f      	cmp	r7, r3
 800dea6:	d2fc      	bcs.n	800dea2 <__hexnan+0xe6>
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d104      	bne.n	800deb8 <__hexnan+0xfc>
 800deae:	9b01      	ldr	r3, [sp, #4]
 800deb0:	429f      	cmp	r7, r3
 800deb2:	d126      	bne.n	800df02 <__hexnan+0x146>
 800deb4:	2301      	movs	r3, #1
 800deb6:	603b      	str	r3, [r7, #0]
 800deb8:	2005      	movs	r0, #5
 800deba:	e025      	b.n	800df08 <__hexnan+0x14c>
 800debc:	9b03      	ldr	r3, [sp, #12]
 800debe:	3501      	adds	r5, #1
 800dec0:	3301      	adds	r3, #1
 800dec2:	9303      	str	r3, [sp, #12]
 800dec4:	2d08      	cmp	r5, #8
 800dec6:	dd06      	ble.n	800ded6 <__hexnan+0x11a>
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	429c      	cmp	r4, r3
 800decc:	d9bb      	bls.n	800de46 <__hexnan+0x8a>
 800dece:	2300      	movs	r3, #0
 800ded0:	2501      	movs	r5, #1
 800ded2:	3c04      	subs	r4, #4
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	220f      	movs	r2, #15
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	4010      	ands	r0, r2
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	4303      	orrs	r3, r0
 800dee0:	6023      	str	r3, [r4, #0]
 800dee2:	e7b0      	b.n	800de46 <__hexnan+0x8a>
 800dee4:	9b06      	ldr	r3, [sp, #24]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d0de      	beq.n	800dea8 <__hexnan+0xec>
 800deea:	2320      	movs	r3, #32
 800deec:	9a06      	ldr	r2, [sp, #24]
 800deee:	9902      	ldr	r1, [sp, #8]
 800def0:	1a9b      	subs	r3, r3, r2
 800def2:	2201      	movs	r2, #1
 800def4:	4252      	negs	r2, r2
 800def6:	40da      	lsrs	r2, r3
 800def8:	3904      	subs	r1, #4
 800defa:	680b      	ldr	r3, [r1, #0]
 800defc:	4013      	ands	r3, r2
 800defe:	600b      	str	r3, [r1, #0]
 800df00:	e7d2      	b.n	800dea8 <__hexnan+0xec>
 800df02:	3f04      	subs	r7, #4
 800df04:	e7d0      	b.n	800dea8 <__hexnan+0xec>
 800df06:	2004      	movs	r0, #4
 800df08:	b00b      	add	sp, #44	; 0x2c
 800df0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df0c <__ascii_mbtowc>:
 800df0c:	b082      	sub	sp, #8
 800df0e:	2900      	cmp	r1, #0
 800df10:	d100      	bne.n	800df14 <__ascii_mbtowc+0x8>
 800df12:	a901      	add	r1, sp, #4
 800df14:	1e10      	subs	r0, r2, #0
 800df16:	d006      	beq.n	800df26 <__ascii_mbtowc+0x1a>
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d006      	beq.n	800df2a <__ascii_mbtowc+0x1e>
 800df1c:	7813      	ldrb	r3, [r2, #0]
 800df1e:	600b      	str	r3, [r1, #0]
 800df20:	7810      	ldrb	r0, [r2, #0]
 800df22:	1e43      	subs	r3, r0, #1
 800df24:	4198      	sbcs	r0, r3
 800df26:	b002      	add	sp, #8
 800df28:	4770      	bx	lr
 800df2a:	2002      	movs	r0, #2
 800df2c:	4240      	negs	r0, r0
 800df2e:	e7fa      	b.n	800df26 <__ascii_mbtowc+0x1a>

0800df30 <_Balloc>:
 800df30:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800df32:	b570      	push	{r4, r5, r6, lr}
 800df34:	0006      	movs	r6, r0
 800df36:	000c      	movs	r4, r1
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d012      	beq.n	800df62 <_Balloc+0x32>
 800df3c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800df3e:	00a2      	lsls	r2, r4, #2
 800df40:	189b      	adds	r3, r3, r2
 800df42:	6818      	ldr	r0, [r3, #0]
 800df44:	2800      	cmp	r0, #0
 800df46:	d115      	bne.n	800df74 <_Balloc+0x44>
 800df48:	2101      	movs	r1, #1
 800df4a:	000d      	movs	r5, r1
 800df4c:	40a5      	lsls	r5, r4
 800df4e:	1d6a      	adds	r2, r5, #5
 800df50:	0030      	movs	r0, r6
 800df52:	0092      	lsls	r2, r2, #2
 800df54:	f003 face 	bl	80114f4 <_calloc_r>
 800df58:	2800      	cmp	r0, #0
 800df5a:	d009      	beq.n	800df70 <_Balloc+0x40>
 800df5c:	6044      	str	r4, [r0, #4]
 800df5e:	6085      	str	r5, [r0, #8]
 800df60:	e00a      	b.n	800df78 <_Balloc+0x48>
 800df62:	2221      	movs	r2, #33	; 0x21
 800df64:	2104      	movs	r1, #4
 800df66:	f003 fac5 	bl	80114f4 <_calloc_r>
 800df6a:	6470      	str	r0, [r6, #68]	; 0x44
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d1e5      	bne.n	800df3c <_Balloc+0xc>
 800df70:	2000      	movs	r0, #0
 800df72:	bd70      	pop	{r4, r5, r6, pc}
 800df74:	6802      	ldr	r2, [r0, #0]
 800df76:	601a      	str	r2, [r3, #0]
 800df78:	2300      	movs	r3, #0
 800df7a:	6103      	str	r3, [r0, #16]
 800df7c:	60c3      	str	r3, [r0, #12]
 800df7e:	e7f8      	b.n	800df72 <_Balloc+0x42>

0800df80 <_Bfree>:
 800df80:	2900      	cmp	r1, #0
 800df82:	d006      	beq.n	800df92 <_Bfree+0x12>
 800df84:	684a      	ldr	r2, [r1, #4]
 800df86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800df88:	0092      	lsls	r2, r2, #2
 800df8a:	189b      	adds	r3, r3, r2
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	600a      	str	r2, [r1, #0]
 800df90:	6019      	str	r1, [r3, #0]
 800df92:	4770      	bx	lr

0800df94 <__multadd>:
 800df94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df96:	000e      	movs	r6, r1
 800df98:	9001      	str	r0, [sp, #4]
 800df9a:	000c      	movs	r4, r1
 800df9c:	001d      	movs	r5, r3
 800df9e:	2000      	movs	r0, #0
 800dfa0:	690f      	ldr	r7, [r1, #16]
 800dfa2:	3614      	adds	r6, #20
 800dfa4:	6833      	ldr	r3, [r6, #0]
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	b299      	uxth	r1, r3
 800dfaa:	4351      	muls	r1, r2
 800dfac:	0c1b      	lsrs	r3, r3, #16
 800dfae:	4353      	muls	r3, r2
 800dfb0:	1949      	adds	r1, r1, r5
 800dfb2:	0c0d      	lsrs	r5, r1, #16
 800dfb4:	195b      	adds	r3, r3, r5
 800dfb6:	0c1d      	lsrs	r5, r3, #16
 800dfb8:	b289      	uxth	r1, r1
 800dfba:	041b      	lsls	r3, r3, #16
 800dfbc:	185b      	adds	r3, r3, r1
 800dfbe:	c608      	stmia	r6!, {r3}
 800dfc0:	4287      	cmp	r7, r0
 800dfc2:	dcef      	bgt.n	800dfa4 <__multadd+0x10>
 800dfc4:	2d00      	cmp	r5, #0
 800dfc6:	d022      	beq.n	800e00e <__multadd+0x7a>
 800dfc8:	68a3      	ldr	r3, [r4, #8]
 800dfca:	42bb      	cmp	r3, r7
 800dfcc:	dc19      	bgt.n	800e002 <__multadd+0x6e>
 800dfce:	6861      	ldr	r1, [r4, #4]
 800dfd0:	9801      	ldr	r0, [sp, #4]
 800dfd2:	3101      	adds	r1, #1
 800dfd4:	f7ff ffac 	bl	800df30 <_Balloc>
 800dfd8:	1e06      	subs	r6, r0, #0
 800dfda:	d105      	bne.n	800dfe8 <__multadd+0x54>
 800dfdc:	0032      	movs	r2, r6
 800dfde:	21ba      	movs	r1, #186	; 0xba
 800dfe0:	4b0c      	ldr	r3, [pc, #48]	; (800e014 <__multadd+0x80>)
 800dfe2:	480d      	ldr	r0, [pc, #52]	; (800e018 <__multadd+0x84>)
 800dfe4:	f003 fa68 	bl	80114b8 <__assert_func>
 800dfe8:	0021      	movs	r1, r4
 800dfea:	6922      	ldr	r2, [r4, #16]
 800dfec:	310c      	adds	r1, #12
 800dfee:	3202      	adds	r2, #2
 800dff0:	0092      	lsls	r2, r2, #2
 800dff2:	300c      	adds	r0, #12
 800dff4:	f7ff fb01 	bl	800d5fa <memcpy>
 800dff8:	0021      	movs	r1, r4
 800dffa:	9801      	ldr	r0, [sp, #4]
 800dffc:	f7ff ffc0 	bl	800df80 <_Bfree>
 800e000:	0034      	movs	r4, r6
 800e002:	1d3b      	adds	r3, r7, #4
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	18e3      	adds	r3, r4, r3
 800e008:	605d      	str	r5, [r3, #4]
 800e00a:	1c7b      	adds	r3, r7, #1
 800e00c:	6123      	str	r3, [r4, #16]
 800e00e:	0020      	movs	r0, r4
 800e010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e012:	46c0      	nop			; (mov r8, r8)
 800e014:	08015c21 	.word	0x08015c21
 800e018:	08015c92 	.word	0x08015c92

0800e01c <__s2b>:
 800e01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e01e:	0006      	movs	r6, r0
 800e020:	0018      	movs	r0, r3
 800e022:	000c      	movs	r4, r1
 800e024:	3008      	adds	r0, #8
 800e026:	2109      	movs	r1, #9
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	0015      	movs	r5, r2
 800e02c:	f7f2 f910 	bl	8000250 <__divsi3>
 800e030:	2301      	movs	r3, #1
 800e032:	2100      	movs	r1, #0
 800e034:	4283      	cmp	r3, r0
 800e036:	db0a      	blt.n	800e04e <__s2b+0x32>
 800e038:	0030      	movs	r0, r6
 800e03a:	f7ff ff79 	bl	800df30 <_Balloc>
 800e03e:	1e01      	subs	r1, r0, #0
 800e040:	d108      	bne.n	800e054 <__s2b+0x38>
 800e042:	000a      	movs	r2, r1
 800e044:	4b19      	ldr	r3, [pc, #100]	; (800e0ac <__s2b+0x90>)
 800e046:	481a      	ldr	r0, [pc, #104]	; (800e0b0 <__s2b+0x94>)
 800e048:	31d3      	adds	r1, #211	; 0xd3
 800e04a:	f003 fa35 	bl	80114b8 <__assert_func>
 800e04e:	005b      	lsls	r3, r3, #1
 800e050:	3101      	adds	r1, #1
 800e052:	e7ef      	b.n	800e034 <__s2b+0x18>
 800e054:	9b08      	ldr	r3, [sp, #32]
 800e056:	6143      	str	r3, [r0, #20]
 800e058:	2301      	movs	r3, #1
 800e05a:	6103      	str	r3, [r0, #16]
 800e05c:	2d09      	cmp	r5, #9
 800e05e:	dd18      	ble.n	800e092 <__s2b+0x76>
 800e060:	0023      	movs	r3, r4
 800e062:	3309      	adds	r3, #9
 800e064:	001f      	movs	r7, r3
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	1964      	adds	r4, r4, r5
 800e06a:	783b      	ldrb	r3, [r7, #0]
 800e06c:	220a      	movs	r2, #10
 800e06e:	0030      	movs	r0, r6
 800e070:	3b30      	subs	r3, #48	; 0x30
 800e072:	f7ff ff8f 	bl	800df94 <__multadd>
 800e076:	3701      	adds	r7, #1
 800e078:	0001      	movs	r1, r0
 800e07a:	42a7      	cmp	r7, r4
 800e07c:	d1f5      	bne.n	800e06a <__s2b+0x4e>
 800e07e:	002c      	movs	r4, r5
 800e080:	9b00      	ldr	r3, [sp, #0]
 800e082:	3c08      	subs	r4, #8
 800e084:	191c      	adds	r4, r3, r4
 800e086:	002f      	movs	r7, r5
 800e088:	9b01      	ldr	r3, [sp, #4]
 800e08a:	429f      	cmp	r7, r3
 800e08c:	db04      	blt.n	800e098 <__s2b+0x7c>
 800e08e:	0008      	movs	r0, r1
 800e090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e092:	2509      	movs	r5, #9
 800e094:	340a      	adds	r4, #10
 800e096:	e7f6      	b.n	800e086 <__s2b+0x6a>
 800e098:	1b63      	subs	r3, r4, r5
 800e09a:	5ddb      	ldrb	r3, [r3, r7]
 800e09c:	220a      	movs	r2, #10
 800e09e:	0030      	movs	r0, r6
 800e0a0:	3b30      	subs	r3, #48	; 0x30
 800e0a2:	f7ff ff77 	bl	800df94 <__multadd>
 800e0a6:	3701      	adds	r7, #1
 800e0a8:	0001      	movs	r1, r0
 800e0aa:	e7ed      	b.n	800e088 <__s2b+0x6c>
 800e0ac:	08015c21 	.word	0x08015c21
 800e0b0:	08015c92 	.word	0x08015c92

0800e0b4 <__hi0bits>:
 800e0b4:	0003      	movs	r3, r0
 800e0b6:	0c02      	lsrs	r2, r0, #16
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	4282      	cmp	r2, r0
 800e0bc:	d101      	bne.n	800e0c2 <__hi0bits+0xe>
 800e0be:	041b      	lsls	r3, r3, #16
 800e0c0:	3010      	adds	r0, #16
 800e0c2:	0e1a      	lsrs	r2, r3, #24
 800e0c4:	d101      	bne.n	800e0ca <__hi0bits+0x16>
 800e0c6:	3008      	adds	r0, #8
 800e0c8:	021b      	lsls	r3, r3, #8
 800e0ca:	0f1a      	lsrs	r2, r3, #28
 800e0cc:	d101      	bne.n	800e0d2 <__hi0bits+0x1e>
 800e0ce:	3004      	adds	r0, #4
 800e0d0:	011b      	lsls	r3, r3, #4
 800e0d2:	0f9a      	lsrs	r2, r3, #30
 800e0d4:	d101      	bne.n	800e0da <__hi0bits+0x26>
 800e0d6:	3002      	adds	r0, #2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	db03      	blt.n	800e0e6 <__hi0bits+0x32>
 800e0de:	3001      	adds	r0, #1
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	d400      	bmi.n	800e0e6 <__hi0bits+0x32>
 800e0e4:	2020      	movs	r0, #32
 800e0e6:	4770      	bx	lr

0800e0e8 <__lo0bits>:
 800e0e8:	6803      	ldr	r3, [r0, #0]
 800e0ea:	0001      	movs	r1, r0
 800e0ec:	2207      	movs	r2, #7
 800e0ee:	0018      	movs	r0, r3
 800e0f0:	4010      	ands	r0, r2
 800e0f2:	4213      	tst	r3, r2
 800e0f4:	d00d      	beq.n	800e112 <__lo0bits+0x2a>
 800e0f6:	3a06      	subs	r2, #6
 800e0f8:	2000      	movs	r0, #0
 800e0fa:	4213      	tst	r3, r2
 800e0fc:	d105      	bne.n	800e10a <__lo0bits+0x22>
 800e0fe:	3002      	adds	r0, #2
 800e100:	4203      	tst	r3, r0
 800e102:	d003      	beq.n	800e10c <__lo0bits+0x24>
 800e104:	40d3      	lsrs	r3, r2
 800e106:	0010      	movs	r0, r2
 800e108:	600b      	str	r3, [r1, #0]
 800e10a:	4770      	bx	lr
 800e10c:	089b      	lsrs	r3, r3, #2
 800e10e:	600b      	str	r3, [r1, #0]
 800e110:	e7fb      	b.n	800e10a <__lo0bits+0x22>
 800e112:	b29a      	uxth	r2, r3
 800e114:	2a00      	cmp	r2, #0
 800e116:	d101      	bne.n	800e11c <__lo0bits+0x34>
 800e118:	2010      	movs	r0, #16
 800e11a:	0c1b      	lsrs	r3, r3, #16
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	2a00      	cmp	r2, #0
 800e120:	d101      	bne.n	800e126 <__lo0bits+0x3e>
 800e122:	3008      	adds	r0, #8
 800e124:	0a1b      	lsrs	r3, r3, #8
 800e126:	071a      	lsls	r2, r3, #28
 800e128:	d101      	bne.n	800e12e <__lo0bits+0x46>
 800e12a:	3004      	adds	r0, #4
 800e12c:	091b      	lsrs	r3, r3, #4
 800e12e:	079a      	lsls	r2, r3, #30
 800e130:	d101      	bne.n	800e136 <__lo0bits+0x4e>
 800e132:	3002      	adds	r0, #2
 800e134:	089b      	lsrs	r3, r3, #2
 800e136:	07da      	lsls	r2, r3, #31
 800e138:	d4e9      	bmi.n	800e10e <__lo0bits+0x26>
 800e13a:	3001      	adds	r0, #1
 800e13c:	085b      	lsrs	r3, r3, #1
 800e13e:	d1e6      	bne.n	800e10e <__lo0bits+0x26>
 800e140:	2020      	movs	r0, #32
 800e142:	e7e2      	b.n	800e10a <__lo0bits+0x22>

0800e144 <__i2b>:
 800e144:	b510      	push	{r4, lr}
 800e146:	000c      	movs	r4, r1
 800e148:	2101      	movs	r1, #1
 800e14a:	f7ff fef1 	bl	800df30 <_Balloc>
 800e14e:	2800      	cmp	r0, #0
 800e150:	d107      	bne.n	800e162 <__i2b+0x1e>
 800e152:	2146      	movs	r1, #70	; 0x46
 800e154:	4c05      	ldr	r4, [pc, #20]	; (800e16c <__i2b+0x28>)
 800e156:	0002      	movs	r2, r0
 800e158:	4b05      	ldr	r3, [pc, #20]	; (800e170 <__i2b+0x2c>)
 800e15a:	0020      	movs	r0, r4
 800e15c:	31ff      	adds	r1, #255	; 0xff
 800e15e:	f003 f9ab 	bl	80114b8 <__assert_func>
 800e162:	2301      	movs	r3, #1
 800e164:	6144      	str	r4, [r0, #20]
 800e166:	6103      	str	r3, [r0, #16]
 800e168:	bd10      	pop	{r4, pc}
 800e16a:	46c0      	nop			; (mov r8, r8)
 800e16c:	08015c92 	.word	0x08015c92
 800e170:	08015c21 	.word	0x08015c21

0800e174 <__multiply>:
 800e174:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e176:	0015      	movs	r5, r2
 800e178:	690a      	ldr	r2, [r1, #16]
 800e17a:	692b      	ldr	r3, [r5, #16]
 800e17c:	000c      	movs	r4, r1
 800e17e:	b08b      	sub	sp, #44	; 0x2c
 800e180:	429a      	cmp	r2, r3
 800e182:	da01      	bge.n	800e188 <__multiply+0x14>
 800e184:	002c      	movs	r4, r5
 800e186:	000d      	movs	r5, r1
 800e188:	6927      	ldr	r7, [r4, #16]
 800e18a:	692e      	ldr	r6, [r5, #16]
 800e18c:	6861      	ldr	r1, [r4, #4]
 800e18e:	19bb      	adds	r3, r7, r6
 800e190:	9303      	str	r3, [sp, #12]
 800e192:	68a3      	ldr	r3, [r4, #8]
 800e194:	19ba      	adds	r2, r7, r6
 800e196:	4293      	cmp	r3, r2
 800e198:	da00      	bge.n	800e19c <__multiply+0x28>
 800e19a:	3101      	adds	r1, #1
 800e19c:	f7ff fec8 	bl	800df30 <_Balloc>
 800e1a0:	9002      	str	r0, [sp, #8]
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d106      	bne.n	800e1b4 <__multiply+0x40>
 800e1a6:	21b1      	movs	r1, #177	; 0xb1
 800e1a8:	4b48      	ldr	r3, [pc, #288]	; (800e2cc <__multiply+0x158>)
 800e1aa:	4849      	ldr	r0, [pc, #292]	; (800e2d0 <__multiply+0x15c>)
 800e1ac:	9a02      	ldr	r2, [sp, #8]
 800e1ae:	0049      	lsls	r1, r1, #1
 800e1b0:	f003 f982 	bl	80114b8 <__assert_func>
 800e1b4:	9b02      	ldr	r3, [sp, #8]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	3314      	adds	r3, #20
 800e1ba:	469c      	mov	ip, r3
 800e1bc:	19bb      	adds	r3, r7, r6
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	4463      	add	r3, ip
 800e1c2:	9304      	str	r3, [sp, #16]
 800e1c4:	4663      	mov	r3, ip
 800e1c6:	9904      	ldr	r1, [sp, #16]
 800e1c8:	428b      	cmp	r3, r1
 800e1ca:	d32a      	bcc.n	800e222 <__multiply+0xae>
 800e1cc:	0023      	movs	r3, r4
 800e1ce:	00bf      	lsls	r7, r7, #2
 800e1d0:	3314      	adds	r3, #20
 800e1d2:	3514      	adds	r5, #20
 800e1d4:	9308      	str	r3, [sp, #32]
 800e1d6:	00b6      	lsls	r6, r6, #2
 800e1d8:	19db      	adds	r3, r3, r7
 800e1da:	9305      	str	r3, [sp, #20]
 800e1dc:	19ab      	adds	r3, r5, r6
 800e1de:	9309      	str	r3, [sp, #36]	; 0x24
 800e1e0:	2304      	movs	r3, #4
 800e1e2:	9306      	str	r3, [sp, #24]
 800e1e4:	0023      	movs	r3, r4
 800e1e6:	9a05      	ldr	r2, [sp, #20]
 800e1e8:	3315      	adds	r3, #21
 800e1ea:	9501      	str	r5, [sp, #4]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d305      	bcc.n	800e1fc <__multiply+0x88>
 800e1f0:	1b13      	subs	r3, r2, r4
 800e1f2:	3b15      	subs	r3, #21
 800e1f4:	089b      	lsrs	r3, r3, #2
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	9306      	str	r3, [sp, #24]
 800e1fc:	9b01      	ldr	r3, [sp, #4]
 800e1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e200:	4293      	cmp	r3, r2
 800e202:	d310      	bcc.n	800e226 <__multiply+0xb2>
 800e204:	9b03      	ldr	r3, [sp, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	dd05      	ble.n	800e216 <__multiply+0xa2>
 800e20a:	9b04      	ldr	r3, [sp, #16]
 800e20c:	3b04      	subs	r3, #4
 800e20e:	9304      	str	r3, [sp, #16]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d056      	beq.n	800e2c4 <__multiply+0x150>
 800e216:	9b02      	ldr	r3, [sp, #8]
 800e218:	9a03      	ldr	r2, [sp, #12]
 800e21a:	0018      	movs	r0, r3
 800e21c:	611a      	str	r2, [r3, #16]
 800e21e:	b00b      	add	sp, #44	; 0x2c
 800e220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e222:	c304      	stmia	r3!, {r2}
 800e224:	e7cf      	b.n	800e1c6 <__multiply+0x52>
 800e226:	9b01      	ldr	r3, [sp, #4]
 800e228:	6818      	ldr	r0, [r3, #0]
 800e22a:	b280      	uxth	r0, r0
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d01e      	beq.n	800e26e <__multiply+0xfa>
 800e230:	4667      	mov	r7, ip
 800e232:	2500      	movs	r5, #0
 800e234:	9e08      	ldr	r6, [sp, #32]
 800e236:	ce02      	ldmia	r6!, {r1}
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	9307      	str	r3, [sp, #28]
 800e23c:	b28b      	uxth	r3, r1
 800e23e:	4343      	muls	r3, r0
 800e240:	001a      	movs	r2, r3
 800e242:	466b      	mov	r3, sp
 800e244:	8b9b      	ldrh	r3, [r3, #28]
 800e246:	18d3      	adds	r3, r2, r3
 800e248:	195b      	adds	r3, r3, r5
 800e24a:	0c0d      	lsrs	r5, r1, #16
 800e24c:	4345      	muls	r5, r0
 800e24e:	9a07      	ldr	r2, [sp, #28]
 800e250:	0c11      	lsrs	r1, r2, #16
 800e252:	1869      	adds	r1, r5, r1
 800e254:	0c1a      	lsrs	r2, r3, #16
 800e256:	188a      	adds	r2, r1, r2
 800e258:	b29b      	uxth	r3, r3
 800e25a:	0c15      	lsrs	r5, r2, #16
 800e25c:	0412      	lsls	r2, r2, #16
 800e25e:	431a      	orrs	r2, r3
 800e260:	9b05      	ldr	r3, [sp, #20]
 800e262:	c704      	stmia	r7!, {r2}
 800e264:	42b3      	cmp	r3, r6
 800e266:	d8e6      	bhi.n	800e236 <__multiply+0xc2>
 800e268:	4663      	mov	r3, ip
 800e26a:	9a06      	ldr	r2, [sp, #24]
 800e26c:	509d      	str	r5, [r3, r2]
 800e26e:	9b01      	ldr	r3, [sp, #4]
 800e270:	6818      	ldr	r0, [r3, #0]
 800e272:	0c00      	lsrs	r0, r0, #16
 800e274:	d020      	beq.n	800e2b8 <__multiply+0x144>
 800e276:	4663      	mov	r3, ip
 800e278:	0025      	movs	r5, r4
 800e27a:	4661      	mov	r1, ip
 800e27c:	2700      	movs	r7, #0
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	3514      	adds	r5, #20
 800e282:	682a      	ldr	r2, [r5, #0]
 800e284:	680e      	ldr	r6, [r1, #0]
 800e286:	b292      	uxth	r2, r2
 800e288:	4342      	muls	r2, r0
 800e28a:	0c36      	lsrs	r6, r6, #16
 800e28c:	1992      	adds	r2, r2, r6
 800e28e:	19d2      	adds	r2, r2, r7
 800e290:	0416      	lsls	r6, r2, #16
 800e292:	b29b      	uxth	r3, r3
 800e294:	431e      	orrs	r6, r3
 800e296:	600e      	str	r6, [r1, #0]
 800e298:	cd40      	ldmia	r5!, {r6}
 800e29a:	684b      	ldr	r3, [r1, #4]
 800e29c:	0c36      	lsrs	r6, r6, #16
 800e29e:	4346      	muls	r6, r0
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	0c12      	lsrs	r2, r2, #16
 800e2a4:	18f3      	adds	r3, r6, r3
 800e2a6:	189b      	adds	r3, r3, r2
 800e2a8:	9a05      	ldr	r2, [sp, #20]
 800e2aa:	0c1f      	lsrs	r7, r3, #16
 800e2ac:	3104      	adds	r1, #4
 800e2ae:	42aa      	cmp	r2, r5
 800e2b0:	d8e7      	bhi.n	800e282 <__multiply+0x10e>
 800e2b2:	4662      	mov	r2, ip
 800e2b4:	9906      	ldr	r1, [sp, #24]
 800e2b6:	5053      	str	r3, [r2, r1]
 800e2b8:	9b01      	ldr	r3, [sp, #4]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	2304      	movs	r3, #4
 800e2c0:	449c      	add	ip, r3
 800e2c2:	e79b      	b.n	800e1fc <__multiply+0x88>
 800e2c4:	9b03      	ldr	r3, [sp, #12]
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	9303      	str	r3, [sp, #12]
 800e2ca:	e79b      	b.n	800e204 <__multiply+0x90>
 800e2cc:	08015c21 	.word	0x08015c21
 800e2d0:	08015c92 	.word	0x08015c92

0800e2d4 <__pow5mult>:
 800e2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	0015      	movs	r5, r2
 800e2da:	0007      	movs	r7, r0
 800e2dc:	000e      	movs	r6, r1
 800e2de:	401a      	ands	r2, r3
 800e2e0:	421d      	tst	r5, r3
 800e2e2:	d008      	beq.n	800e2f6 <__pow5mult+0x22>
 800e2e4:	491a      	ldr	r1, [pc, #104]	; (800e350 <__pow5mult+0x7c>)
 800e2e6:	3a01      	subs	r2, #1
 800e2e8:	0092      	lsls	r2, r2, #2
 800e2ea:	5852      	ldr	r2, [r2, r1]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	0031      	movs	r1, r6
 800e2f0:	f7ff fe50 	bl	800df94 <__multadd>
 800e2f4:	0006      	movs	r6, r0
 800e2f6:	10ad      	asrs	r5, r5, #2
 800e2f8:	d027      	beq.n	800e34a <__pow5mult+0x76>
 800e2fa:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800e2fc:	2c00      	cmp	r4, #0
 800e2fe:	d107      	bne.n	800e310 <__pow5mult+0x3c>
 800e300:	0038      	movs	r0, r7
 800e302:	4914      	ldr	r1, [pc, #80]	; (800e354 <__pow5mult+0x80>)
 800e304:	f7ff ff1e 	bl	800e144 <__i2b>
 800e308:	2300      	movs	r3, #0
 800e30a:	0004      	movs	r4, r0
 800e30c:	6438      	str	r0, [r7, #64]	; 0x40
 800e30e:	6003      	str	r3, [r0, #0]
 800e310:	2301      	movs	r3, #1
 800e312:	421d      	tst	r5, r3
 800e314:	d00a      	beq.n	800e32c <__pow5mult+0x58>
 800e316:	0031      	movs	r1, r6
 800e318:	0022      	movs	r2, r4
 800e31a:	0038      	movs	r0, r7
 800e31c:	f7ff ff2a 	bl	800e174 <__multiply>
 800e320:	0031      	movs	r1, r6
 800e322:	9001      	str	r0, [sp, #4]
 800e324:	0038      	movs	r0, r7
 800e326:	f7ff fe2b 	bl	800df80 <_Bfree>
 800e32a:	9e01      	ldr	r6, [sp, #4]
 800e32c:	106d      	asrs	r5, r5, #1
 800e32e:	d00c      	beq.n	800e34a <__pow5mult+0x76>
 800e330:	6820      	ldr	r0, [r4, #0]
 800e332:	2800      	cmp	r0, #0
 800e334:	d107      	bne.n	800e346 <__pow5mult+0x72>
 800e336:	0022      	movs	r2, r4
 800e338:	0021      	movs	r1, r4
 800e33a:	0038      	movs	r0, r7
 800e33c:	f7ff ff1a 	bl	800e174 <__multiply>
 800e340:	2300      	movs	r3, #0
 800e342:	6020      	str	r0, [r4, #0]
 800e344:	6003      	str	r3, [r0, #0]
 800e346:	0004      	movs	r4, r0
 800e348:	e7e2      	b.n	800e310 <__pow5mult+0x3c>
 800e34a:	0030      	movs	r0, r6
 800e34c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e34e:	46c0      	nop			; (mov r8, r8)
 800e350:	08015de0 	.word	0x08015de0
 800e354:	00000271 	.word	0x00000271

0800e358 <__lshift>:
 800e358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e35a:	000c      	movs	r4, r1
 800e35c:	0017      	movs	r7, r2
 800e35e:	6923      	ldr	r3, [r4, #16]
 800e360:	1155      	asrs	r5, r2, #5
 800e362:	b087      	sub	sp, #28
 800e364:	18eb      	adds	r3, r5, r3
 800e366:	9302      	str	r3, [sp, #8]
 800e368:	3301      	adds	r3, #1
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	6849      	ldr	r1, [r1, #4]
 800e36e:	68a3      	ldr	r3, [r4, #8]
 800e370:	9004      	str	r0, [sp, #16]
 800e372:	9a01      	ldr	r2, [sp, #4]
 800e374:	4293      	cmp	r3, r2
 800e376:	db10      	blt.n	800e39a <__lshift+0x42>
 800e378:	9804      	ldr	r0, [sp, #16]
 800e37a:	f7ff fdd9 	bl	800df30 <_Balloc>
 800e37e:	2300      	movs	r3, #0
 800e380:	0002      	movs	r2, r0
 800e382:	0006      	movs	r6, r0
 800e384:	0019      	movs	r1, r3
 800e386:	3214      	adds	r2, #20
 800e388:	4298      	cmp	r0, r3
 800e38a:	d10c      	bne.n	800e3a6 <__lshift+0x4e>
 800e38c:	31df      	adds	r1, #223	; 0xdf
 800e38e:	0032      	movs	r2, r6
 800e390:	4b26      	ldr	r3, [pc, #152]	; (800e42c <__lshift+0xd4>)
 800e392:	4827      	ldr	r0, [pc, #156]	; (800e430 <__lshift+0xd8>)
 800e394:	31ff      	adds	r1, #255	; 0xff
 800e396:	f003 f88f 	bl	80114b8 <__assert_func>
 800e39a:	3101      	adds	r1, #1
 800e39c:	005b      	lsls	r3, r3, #1
 800e39e:	e7e8      	b.n	800e372 <__lshift+0x1a>
 800e3a0:	0098      	lsls	r0, r3, #2
 800e3a2:	5011      	str	r1, [r2, r0]
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	42ab      	cmp	r3, r5
 800e3a8:	dbfa      	blt.n	800e3a0 <__lshift+0x48>
 800e3aa:	43eb      	mvns	r3, r5
 800e3ac:	17db      	asrs	r3, r3, #31
 800e3ae:	401d      	ands	r5, r3
 800e3b0:	211f      	movs	r1, #31
 800e3b2:	0023      	movs	r3, r4
 800e3b4:	0038      	movs	r0, r7
 800e3b6:	00ad      	lsls	r5, r5, #2
 800e3b8:	1955      	adds	r5, r2, r5
 800e3ba:	6922      	ldr	r2, [r4, #16]
 800e3bc:	3314      	adds	r3, #20
 800e3be:	0092      	lsls	r2, r2, #2
 800e3c0:	4008      	ands	r0, r1
 800e3c2:	4684      	mov	ip, r0
 800e3c4:	189a      	adds	r2, r3, r2
 800e3c6:	420f      	tst	r7, r1
 800e3c8:	d02a      	beq.n	800e420 <__lshift+0xc8>
 800e3ca:	3101      	adds	r1, #1
 800e3cc:	1a09      	subs	r1, r1, r0
 800e3ce:	9105      	str	r1, [sp, #20]
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	9503      	str	r5, [sp, #12]
 800e3d4:	4667      	mov	r7, ip
 800e3d6:	6818      	ldr	r0, [r3, #0]
 800e3d8:	40b8      	lsls	r0, r7
 800e3da:	4308      	orrs	r0, r1
 800e3dc:	9903      	ldr	r1, [sp, #12]
 800e3de:	c101      	stmia	r1!, {r0}
 800e3e0:	9103      	str	r1, [sp, #12]
 800e3e2:	9805      	ldr	r0, [sp, #20]
 800e3e4:	cb02      	ldmia	r3!, {r1}
 800e3e6:	40c1      	lsrs	r1, r0
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d8f3      	bhi.n	800e3d4 <__lshift+0x7c>
 800e3ec:	0020      	movs	r0, r4
 800e3ee:	3015      	adds	r0, #21
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	4282      	cmp	r2, r0
 800e3f4:	d304      	bcc.n	800e400 <__lshift+0xa8>
 800e3f6:	1b13      	subs	r3, r2, r4
 800e3f8:	3b15      	subs	r3, #21
 800e3fa:	089b      	lsrs	r3, r3, #2
 800e3fc:	3301      	adds	r3, #1
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	50e9      	str	r1, [r5, r3]
 800e402:	2900      	cmp	r1, #0
 800e404:	d002      	beq.n	800e40c <__lshift+0xb4>
 800e406:	9b02      	ldr	r3, [sp, #8]
 800e408:	3302      	adds	r3, #2
 800e40a:	9301      	str	r3, [sp, #4]
 800e40c:	9b01      	ldr	r3, [sp, #4]
 800e40e:	9804      	ldr	r0, [sp, #16]
 800e410:	3b01      	subs	r3, #1
 800e412:	0021      	movs	r1, r4
 800e414:	6133      	str	r3, [r6, #16]
 800e416:	f7ff fdb3 	bl	800df80 <_Bfree>
 800e41a:	0030      	movs	r0, r6
 800e41c:	b007      	add	sp, #28
 800e41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e420:	cb02      	ldmia	r3!, {r1}
 800e422:	c502      	stmia	r5!, {r1}
 800e424:	429a      	cmp	r2, r3
 800e426:	d8fb      	bhi.n	800e420 <__lshift+0xc8>
 800e428:	e7f0      	b.n	800e40c <__lshift+0xb4>
 800e42a:	46c0      	nop			; (mov r8, r8)
 800e42c:	08015c21 	.word	0x08015c21
 800e430:	08015c92 	.word	0x08015c92

0800e434 <__mcmp>:
 800e434:	b530      	push	{r4, r5, lr}
 800e436:	690b      	ldr	r3, [r1, #16]
 800e438:	6904      	ldr	r4, [r0, #16]
 800e43a:	0002      	movs	r2, r0
 800e43c:	1ae0      	subs	r0, r4, r3
 800e43e:	429c      	cmp	r4, r3
 800e440:	d10e      	bne.n	800e460 <__mcmp+0x2c>
 800e442:	3214      	adds	r2, #20
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	3114      	adds	r1, #20
 800e448:	0014      	movs	r4, r2
 800e44a:	18c9      	adds	r1, r1, r3
 800e44c:	18d2      	adds	r2, r2, r3
 800e44e:	3a04      	subs	r2, #4
 800e450:	3904      	subs	r1, #4
 800e452:	6815      	ldr	r5, [r2, #0]
 800e454:	680b      	ldr	r3, [r1, #0]
 800e456:	429d      	cmp	r5, r3
 800e458:	d003      	beq.n	800e462 <__mcmp+0x2e>
 800e45a:	2001      	movs	r0, #1
 800e45c:	429d      	cmp	r5, r3
 800e45e:	d303      	bcc.n	800e468 <__mcmp+0x34>
 800e460:	bd30      	pop	{r4, r5, pc}
 800e462:	4294      	cmp	r4, r2
 800e464:	d3f3      	bcc.n	800e44e <__mcmp+0x1a>
 800e466:	e7fb      	b.n	800e460 <__mcmp+0x2c>
 800e468:	4240      	negs	r0, r0
 800e46a:	e7f9      	b.n	800e460 <__mcmp+0x2c>

0800e46c <__mdiff>:
 800e46c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e46e:	000e      	movs	r6, r1
 800e470:	0007      	movs	r7, r0
 800e472:	0011      	movs	r1, r2
 800e474:	0030      	movs	r0, r6
 800e476:	b087      	sub	sp, #28
 800e478:	0014      	movs	r4, r2
 800e47a:	f7ff ffdb 	bl	800e434 <__mcmp>
 800e47e:	1e05      	subs	r5, r0, #0
 800e480:	d110      	bne.n	800e4a4 <__mdiff+0x38>
 800e482:	0001      	movs	r1, r0
 800e484:	0038      	movs	r0, r7
 800e486:	f7ff fd53 	bl	800df30 <_Balloc>
 800e48a:	1e02      	subs	r2, r0, #0
 800e48c:	d104      	bne.n	800e498 <__mdiff+0x2c>
 800e48e:	4b3f      	ldr	r3, [pc, #252]	; (800e58c <__mdiff+0x120>)
 800e490:	483f      	ldr	r0, [pc, #252]	; (800e590 <__mdiff+0x124>)
 800e492:	4940      	ldr	r1, [pc, #256]	; (800e594 <__mdiff+0x128>)
 800e494:	f003 f810 	bl	80114b8 <__assert_func>
 800e498:	2301      	movs	r3, #1
 800e49a:	6145      	str	r5, [r0, #20]
 800e49c:	6103      	str	r3, [r0, #16]
 800e49e:	0010      	movs	r0, r2
 800e4a0:	b007      	add	sp, #28
 800e4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	9301      	str	r3, [sp, #4]
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	db04      	blt.n	800e4b6 <__mdiff+0x4a>
 800e4ac:	0023      	movs	r3, r4
 800e4ae:	0034      	movs	r4, r6
 800e4b0:	001e      	movs	r6, r3
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	9301      	str	r3, [sp, #4]
 800e4b6:	0038      	movs	r0, r7
 800e4b8:	6861      	ldr	r1, [r4, #4]
 800e4ba:	f7ff fd39 	bl	800df30 <_Balloc>
 800e4be:	1e02      	subs	r2, r0, #0
 800e4c0:	d103      	bne.n	800e4ca <__mdiff+0x5e>
 800e4c2:	4b32      	ldr	r3, [pc, #200]	; (800e58c <__mdiff+0x120>)
 800e4c4:	4832      	ldr	r0, [pc, #200]	; (800e590 <__mdiff+0x124>)
 800e4c6:	4934      	ldr	r1, [pc, #208]	; (800e598 <__mdiff+0x12c>)
 800e4c8:	e7e4      	b.n	800e494 <__mdiff+0x28>
 800e4ca:	9b01      	ldr	r3, [sp, #4]
 800e4cc:	2700      	movs	r7, #0
 800e4ce:	60c3      	str	r3, [r0, #12]
 800e4d0:	6920      	ldr	r0, [r4, #16]
 800e4d2:	3414      	adds	r4, #20
 800e4d4:	0083      	lsls	r3, r0, #2
 800e4d6:	18e3      	adds	r3, r4, r3
 800e4d8:	0021      	movs	r1, r4
 800e4da:	9401      	str	r4, [sp, #4]
 800e4dc:	0034      	movs	r4, r6
 800e4de:	9302      	str	r3, [sp, #8]
 800e4e0:	6933      	ldr	r3, [r6, #16]
 800e4e2:	3414      	adds	r4, #20
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	18e3      	adds	r3, r4, r3
 800e4e8:	9303      	str	r3, [sp, #12]
 800e4ea:	0013      	movs	r3, r2
 800e4ec:	3314      	adds	r3, #20
 800e4ee:	469c      	mov	ip, r3
 800e4f0:	9305      	str	r3, [sp, #20]
 800e4f2:	9104      	str	r1, [sp, #16]
 800e4f4:	9b04      	ldr	r3, [sp, #16]
 800e4f6:	cc02      	ldmia	r4!, {r1}
 800e4f8:	cb20      	ldmia	r3!, {r5}
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	b2ab      	uxth	r3, r5
 800e4fe:	19df      	adds	r7, r3, r7
 800e500:	b28b      	uxth	r3, r1
 800e502:	1afb      	subs	r3, r7, r3
 800e504:	0c09      	lsrs	r1, r1, #16
 800e506:	0c2d      	lsrs	r5, r5, #16
 800e508:	1a6d      	subs	r5, r5, r1
 800e50a:	1419      	asrs	r1, r3, #16
 800e50c:	1869      	adds	r1, r5, r1
 800e50e:	b29b      	uxth	r3, r3
 800e510:	140f      	asrs	r7, r1, #16
 800e512:	0409      	lsls	r1, r1, #16
 800e514:	4319      	orrs	r1, r3
 800e516:	4663      	mov	r3, ip
 800e518:	c302      	stmia	r3!, {r1}
 800e51a:	469c      	mov	ip, r3
 800e51c:	9b03      	ldr	r3, [sp, #12]
 800e51e:	42a3      	cmp	r3, r4
 800e520:	d8e8      	bhi.n	800e4f4 <__mdiff+0x88>
 800e522:	0031      	movs	r1, r6
 800e524:	9c03      	ldr	r4, [sp, #12]
 800e526:	3115      	adds	r1, #21
 800e528:	2304      	movs	r3, #4
 800e52a:	428c      	cmp	r4, r1
 800e52c:	d304      	bcc.n	800e538 <__mdiff+0xcc>
 800e52e:	1ba3      	subs	r3, r4, r6
 800e530:	3b15      	subs	r3, #21
 800e532:	089b      	lsrs	r3, r3, #2
 800e534:	3301      	adds	r3, #1
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	9901      	ldr	r1, [sp, #4]
 800e53a:	18cd      	adds	r5, r1, r3
 800e53c:	9905      	ldr	r1, [sp, #20]
 800e53e:	002e      	movs	r6, r5
 800e540:	18cb      	adds	r3, r1, r3
 800e542:	469c      	mov	ip, r3
 800e544:	9902      	ldr	r1, [sp, #8]
 800e546:	428e      	cmp	r6, r1
 800e548:	d310      	bcc.n	800e56c <__mdiff+0x100>
 800e54a:	9e02      	ldr	r6, [sp, #8]
 800e54c:	1ee9      	subs	r1, r5, #3
 800e54e:	2400      	movs	r4, #0
 800e550:	428e      	cmp	r6, r1
 800e552:	d304      	bcc.n	800e55e <__mdiff+0xf2>
 800e554:	0031      	movs	r1, r6
 800e556:	3103      	adds	r1, #3
 800e558:	1b49      	subs	r1, r1, r5
 800e55a:	0889      	lsrs	r1, r1, #2
 800e55c:	008c      	lsls	r4, r1, #2
 800e55e:	191b      	adds	r3, r3, r4
 800e560:	3b04      	subs	r3, #4
 800e562:	6819      	ldr	r1, [r3, #0]
 800e564:	2900      	cmp	r1, #0
 800e566:	d00f      	beq.n	800e588 <__mdiff+0x11c>
 800e568:	6110      	str	r0, [r2, #16]
 800e56a:	e798      	b.n	800e49e <__mdiff+0x32>
 800e56c:	ce02      	ldmia	r6!, {r1}
 800e56e:	b28c      	uxth	r4, r1
 800e570:	19e4      	adds	r4, r4, r7
 800e572:	0c0f      	lsrs	r7, r1, #16
 800e574:	1421      	asrs	r1, r4, #16
 800e576:	1879      	adds	r1, r7, r1
 800e578:	b2a4      	uxth	r4, r4
 800e57a:	140f      	asrs	r7, r1, #16
 800e57c:	0409      	lsls	r1, r1, #16
 800e57e:	4321      	orrs	r1, r4
 800e580:	4664      	mov	r4, ip
 800e582:	c402      	stmia	r4!, {r1}
 800e584:	46a4      	mov	ip, r4
 800e586:	e7dd      	b.n	800e544 <__mdiff+0xd8>
 800e588:	3801      	subs	r0, #1
 800e58a:	e7e9      	b.n	800e560 <__mdiff+0xf4>
 800e58c:	08015c21 	.word	0x08015c21
 800e590:	08015c92 	.word	0x08015c92
 800e594:	00000237 	.word	0x00000237
 800e598:	00000245 	.word	0x00000245

0800e59c <__ulp>:
 800e59c:	2000      	movs	r0, #0
 800e59e:	4b0b      	ldr	r3, [pc, #44]	; (800e5cc <__ulp+0x30>)
 800e5a0:	4019      	ands	r1, r3
 800e5a2:	4b0b      	ldr	r3, [pc, #44]	; (800e5d0 <__ulp+0x34>)
 800e5a4:	18c9      	adds	r1, r1, r3
 800e5a6:	4281      	cmp	r1, r0
 800e5a8:	dc06      	bgt.n	800e5b8 <__ulp+0x1c>
 800e5aa:	4249      	negs	r1, r1
 800e5ac:	150b      	asrs	r3, r1, #20
 800e5ae:	2b13      	cmp	r3, #19
 800e5b0:	dc03      	bgt.n	800e5ba <__ulp+0x1e>
 800e5b2:	2180      	movs	r1, #128	; 0x80
 800e5b4:	0309      	lsls	r1, r1, #12
 800e5b6:	4119      	asrs	r1, r3
 800e5b8:	4770      	bx	lr
 800e5ba:	3b14      	subs	r3, #20
 800e5bc:	2001      	movs	r0, #1
 800e5be:	2b1e      	cmp	r3, #30
 800e5c0:	dc02      	bgt.n	800e5c8 <__ulp+0x2c>
 800e5c2:	2080      	movs	r0, #128	; 0x80
 800e5c4:	0600      	lsls	r0, r0, #24
 800e5c6:	40d8      	lsrs	r0, r3
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	e7f5      	b.n	800e5b8 <__ulp+0x1c>
 800e5cc:	7ff00000 	.word	0x7ff00000
 800e5d0:	fcc00000 	.word	0xfcc00000

0800e5d4 <__b2d>:
 800e5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5d6:	0006      	movs	r6, r0
 800e5d8:	6903      	ldr	r3, [r0, #16]
 800e5da:	3614      	adds	r6, #20
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	18f3      	adds	r3, r6, r3
 800e5e0:	1f1d      	subs	r5, r3, #4
 800e5e2:	682c      	ldr	r4, [r5, #0]
 800e5e4:	000f      	movs	r7, r1
 800e5e6:	0020      	movs	r0, r4
 800e5e8:	9301      	str	r3, [sp, #4]
 800e5ea:	f7ff fd63 	bl	800e0b4 <__hi0bits>
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	1a12      	subs	r2, r2, r0
 800e5f2:	603a      	str	r2, [r7, #0]
 800e5f4:	0003      	movs	r3, r0
 800e5f6:	4a1c      	ldr	r2, [pc, #112]	; (800e668 <__b2d+0x94>)
 800e5f8:	280a      	cmp	r0, #10
 800e5fa:	dc15      	bgt.n	800e628 <__b2d+0x54>
 800e5fc:	210b      	movs	r1, #11
 800e5fe:	0027      	movs	r7, r4
 800e600:	1a09      	subs	r1, r1, r0
 800e602:	40cf      	lsrs	r7, r1
 800e604:	433a      	orrs	r2, r7
 800e606:	468c      	mov	ip, r1
 800e608:	0011      	movs	r1, r2
 800e60a:	2200      	movs	r2, #0
 800e60c:	42ae      	cmp	r6, r5
 800e60e:	d202      	bcs.n	800e616 <__b2d+0x42>
 800e610:	9a01      	ldr	r2, [sp, #4]
 800e612:	3a08      	subs	r2, #8
 800e614:	6812      	ldr	r2, [r2, #0]
 800e616:	3315      	adds	r3, #21
 800e618:	409c      	lsls	r4, r3
 800e61a:	4663      	mov	r3, ip
 800e61c:	0027      	movs	r7, r4
 800e61e:	40da      	lsrs	r2, r3
 800e620:	4317      	orrs	r7, r2
 800e622:	0038      	movs	r0, r7
 800e624:	b003      	add	sp, #12
 800e626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e628:	2700      	movs	r7, #0
 800e62a:	42ae      	cmp	r6, r5
 800e62c:	d202      	bcs.n	800e634 <__b2d+0x60>
 800e62e:	9d01      	ldr	r5, [sp, #4]
 800e630:	3d08      	subs	r5, #8
 800e632:	682f      	ldr	r7, [r5, #0]
 800e634:	210b      	movs	r1, #11
 800e636:	4249      	negs	r1, r1
 800e638:	468c      	mov	ip, r1
 800e63a:	449c      	add	ip, r3
 800e63c:	2b0b      	cmp	r3, #11
 800e63e:	d010      	beq.n	800e662 <__b2d+0x8e>
 800e640:	4661      	mov	r1, ip
 800e642:	2320      	movs	r3, #32
 800e644:	408c      	lsls	r4, r1
 800e646:	1a5b      	subs	r3, r3, r1
 800e648:	0039      	movs	r1, r7
 800e64a:	40d9      	lsrs	r1, r3
 800e64c:	430c      	orrs	r4, r1
 800e64e:	4322      	orrs	r2, r4
 800e650:	0011      	movs	r1, r2
 800e652:	2200      	movs	r2, #0
 800e654:	42b5      	cmp	r5, r6
 800e656:	d901      	bls.n	800e65c <__b2d+0x88>
 800e658:	3d04      	subs	r5, #4
 800e65a:	682a      	ldr	r2, [r5, #0]
 800e65c:	4664      	mov	r4, ip
 800e65e:	40a7      	lsls	r7, r4
 800e660:	e7dd      	b.n	800e61e <__b2d+0x4a>
 800e662:	4322      	orrs	r2, r4
 800e664:	0011      	movs	r1, r2
 800e666:	e7dc      	b.n	800e622 <__b2d+0x4e>
 800e668:	3ff00000 	.word	0x3ff00000

0800e66c <__d2b>:
 800e66c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e66e:	2101      	movs	r1, #1
 800e670:	0014      	movs	r4, r2
 800e672:	001d      	movs	r5, r3
 800e674:	9f08      	ldr	r7, [sp, #32]
 800e676:	f7ff fc5b 	bl	800df30 <_Balloc>
 800e67a:	1e06      	subs	r6, r0, #0
 800e67c:	d105      	bne.n	800e68a <__d2b+0x1e>
 800e67e:	0032      	movs	r2, r6
 800e680:	4b24      	ldr	r3, [pc, #144]	; (800e714 <__d2b+0xa8>)
 800e682:	4825      	ldr	r0, [pc, #148]	; (800e718 <__d2b+0xac>)
 800e684:	4925      	ldr	r1, [pc, #148]	; (800e71c <__d2b+0xb0>)
 800e686:	f002 ff17 	bl	80114b8 <__assert_func>
 800e68a:	032b      	lsls	r3, r5, #12
 800e68c:	006d      	lsls	r5, r5, #1
 800e68e:	0b1b      	lsrs	r3, r3, #12
 800e690:	0d6d      	lsrs	r5, r5, #21
 800e692:	d125      	bne.n	800e6e0 <__d2b+0x74>
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	2c00      	cmp	r4, #0
 800e698:	d028      	beq.n	800e6ec <__d2b+0x80>
 800e69a:	4668      	mov	r0, sp
 800e69c:	9400      	str	r4, [sp, #0]
 800e69e:	f7ff fd23 	bl	800e0e8 <__lo0bits>
 800e6a2:	9b01      	ldr	r3, [sp, #4]
 800e6a4:	9900      	ldr	r1, [sp, #0]
 800e6a6:	2800      	cmp	r0, #0
 800e6a8:	d01e      	beq.n	800e6e8 <__d2b+0x7c>
 800e6aa:	2220      	movs	r2, #32
 800e6ac:	001c      	movs	r4, r3
 800e6ae:	1a12      	subs	r2, r2, r0
 800e6b0:	4094      	lsls	r4, r2
 800e6b2:	0022      	movs	r2, r4
 800e6b4:	40c3      	lsrs	r3, r0
 800e6b6:	430a      	orrs	r2, r1
 800e6b8:	6172      	str	r2, [r6, #20]
 800e6ba:	9301      	str	r3, [sp, #4]
 800e6bc:	9c01      	ldr	r4, [sp, #4]
 800e6be:	61b4      	str	r4, [r6, #24]
 800e6c0:	1e63      	subs	r3, r4, #1
 800e6c2:	419c      	sbcs	r4, r3
 800e6c4:	3401      	adds	r4, #1
 800e6c6:	6134      	str	r4, [r6, #16]
 800e6c8:	2d00      	cmp	r5, #0
 800e6ca:	d017      	beq.n	800e6fc <__d2b+0x90>
 800e6cc:	2435      	movs	r4, #53	; 0x35
 800e6ce:	4b14      	ldr	r3, [pc, #80]	; (800e720 <__d2b+0xb4>)
 800e6d0:	18ed      	adds	r5, r5, r3
 800e6d2:	182d      	adds	r5, r5, r0
 800e6d4:	603d      	str	r5, [r7, #0]
 800e6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d8:	1a24      	subs	r4, r4, r0
 800e6da:	601c      	str	r4, [r3, #0]
 800e6dc:	0030      	movs	r0, r6
 800e6de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e6e0:	2280      	movs	r2, #128	; 0x80
 800e6e2:	0352      	lsls	r2, r2, #13
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	e7d5      	b.n	800e694 <__d2b+0x28>
 800e6e8:	6171      	str	r1, [r6, #20]
 800e6ea:	e7e7      	b.n	800e6bc <__d2b+0x50>
 800e6ec:	a801      	add	r0, sp, #4
 800e6ee:	f7ff fcfb 	bl	800e0e8 <__lo0bits>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	2401      	movs	r4, #1
 800e6f6:	6173      	str	r3, [r6, #20]
 800e6f8:	3020      	adds	r0, #32
 800e6fa:	e7e4      	b.n	800e6c6 <__d2b+0x5a>
 800e6fc:	4b09      	ldr	r3, [pc, #36]	; (800e724 <__d2b+0xb8>)
 800e6fe:	18c0      	adds	r0, r0, r3
 800e700:	4b09      	ldr	r3, [pc, #36]	; (800e728 <__d2b+0xbc>)
 800e702:	6038      	str	r0, [r7, #0]
 800e704:	18e3      	adds	r3, r4, r3
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	18f3      	adds	r3, r6, r3
 800e70a:	6958      	ldr	r0, [r3, #20]
 800e70c:	f7ff fcd2 	bl	800e0b4 <__hi0bits>
 800e710:	0164      	lsls	r4, r4, #5
 800e712:	e7e0      	b.n	800e6d6 <__d2b+0x6a>
 800e714:	08015c21 	.word	0x08015c21
 800e718:	08015c92 	.word	0x08015c92
 800e71c:	0000030f 	.word	0x0000030f
 800e720:	fffffbcd 	.word	0xfffffbcd
 800e724:	fffffbce 	.word	0xfffffbce
 800e728:	3fffffff 	.word	0x3fffffff

0800e72c <__ratio>:
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	b087      	sub	sp, #28
 800e730:	000f      	movs	r7, r1
 800e732:	a904      	add	r1, sp, #16
 800e734:	0006      	movs	r6, r0
 800e736:	f7ff ff4d 	bl	800e5d4 <__b2d>
 800e73a:	9000      	str	r0, [sp, #0]
 800e73c:	9101      	str	r1, [sp, #4]
 800e73e:	9c00      	ldr	r4, [sp, #0]
 800e740:	9d01      	ldr	r5, [sp, #4]
 800e742:	0038      	movs	r0, r7
 800e744:	a905      	add	r1, sp, #20
 800e746:	f7ff ff45 	bl	800e5d4 <__b2d>
 800e74a:	9002      	str	r0, [sp, #8]
 800e74c:	9103      	str	r1, [sp, #12]
 800e74e:	9a02      	ldr	r2, [sp, #8]
 800e750:	9b03      	ldr	r3, [sp, #12]
 800e752:	6930      	ldr	r0, [r6, #16]
 800e754:	6939      	ldr	r1, [r7, #16]
 800e756:	9e04      	ldr	r6, [sp, #16]
 800e758:	1a40      	subs	r0, r0, r1
 800e75a:	9905      	ldr	r1, [sp, #20]
 800e75c:	0140      	lsls	r0, r0, #5
 800e75e:	1a71      	subs	r1, r6, r1
 800e760:	1841      	adds	r1, r0, r1
 800e762:	0508      	lsls	r0, r1, #20
 800e764:	2900      	cmp	r1, #0
 800e766:	dd07      	ble.n	800e778 <__ratio+0x4c>
 800e768:	9901      	ldr	r1, [sp, #4]
 800e76a:	1845      	adds	r5, r0, r1
 800e76c:	0020      	movs	r0, r4
 800e76e:	0029      	movs	r1, r5
 800e770:	f7f2 fb82 	bl	8000e78 <__aeabi_ddiv>
 800e774:	b007      	add	sp, #28
 800e776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e778:	9903      	ldr	r1, [sp, #12]
 800e77a:	1a0b      	subs	r3, r1, r0
 800e77c:	e7f6      	b.n	800e76c <__ratio+0x40>

0800e77e <__copybits>:
 800e77e:	b570      	push	{r4, r5, r6, lr}
 800e780:	0014      	movs	r4, r2
 800e782:	0005      	movs	r5, r0
 800e784:	3901      	subs	r1, #1
 800e786:	6913      	ldr	r3, [r2, #16]
 800e788:	1149      	asrs	r1, r1, #5
 800e78a:	3101      	adds	r1, #1
 800e78c:	0089      	lsls	r1, r1, #2
 800e78e:	3414      	adds	r4, #20
 800e790:	009b      	lsls	r3, r3, #2
 800e792:	1841      	adds	r1, r0, r1
 800e794:	18e3      	adds	r3, r4, r3
 800e796:	42a3      	cmp	r3, r4
 800e798:	d80d      	bhi.n	800e7b6 <__copybits+0x38>
 800e79a:	0014      	movs	r4, r2
 800e79c:	3411      	adds	r4, #17
 800e79e:	2500      	movs	r5, #0
 800e7a0:	429c      	cmp	r4, r3
 800e7a2:	d803      	bhi.n	800e7ac <__copybits+0x2e>
 800e7a4:	1a9b      	subs	r3, r3, r2
 800e7a6:	3b11      	subs	r3, #17
 800e7a8:	089b      	lsrs	r3, r3, #2
 800e7aa:	009d      	lsls	r5, r3, #2
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	1940      	adds	r0, r0, r5
 800e7b0:	4281      	cmp	r1, r0
 800e7b2:	d803      	bhi.n	800e7bc <__copybits+0x3e>
 800e7b4:	bd70      	pop	{r4, r5, r6, pc}
 800e7b6:	cc40      	ldmia	r4!, {r6}
 800e7b8:	c540      	stmia	r5!, {r6}
 800e7ba:	e7ec      	b.n	800e796 <__copybits+0x18>
 800e7bc:	c008      	stmia	r0!, {r3}
 800e7be:	e7f7      	b.n	800e7b0 <__copybits+0x32>

0800e7c0 <__any_on>:
 800e7c0:	0002      	movs	r2, r0
 800e7c2:	6900      	ldr	r0, [r0, #16]
 800e7c4:	b510      	push	{r4, lr}
 800e7c6:	3214      	adds	r2, #20
 800e7c8:	114b      	asrs	r3, r1, #5
 800e7ca:	4298      	cmp	r0, r3
 800e7cc:	db13      	blt.n	800e7f6 <__any_on+0x36>
 800e7ce:	dd0c      	ble.n	800e7ea <__any_on+0x2a>
 800e7d0:	241f      	movs	r4, #31
 800e7d2:	0008      	movs	r0, r1
 800e7d4:	4020      	ands	r0, r4
 800e7d6:	4221      	tst	r1, r4
 800e7d8:	d007      	beq.n	800e7ea <__any_on+0x2a>
 800e7da:	0099      	lsls	r1, r3, #2
 800e7dc:	588c      	ldr	r4, [r1, r2]
 800e7de:	0021      	movs	r1, r4
 800e7e0:	40c1      	lsrs	r1, r0
 800e7e2:	4081      	lsls	r1, r0
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	428c      	cmp	r4, r1
 800e7e8:	d104      	bne.n	800e7f4 <__any_on+0x34>
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	18d3      	adds	r3, r2, r3
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d803      	bhi.n	800e7fa <__any_on+0x3a>
 800e7f2:	2000      	movs	r0, #0
 800e7f4:	bd10      	pop	{r4, pc}
 800e7f6:	0003      	movs	r3, r0
 800e7f8:	e7f7      	b.n	800e7ea <__any_on+0x2a>
 800e7fa:	3b04      	subs	r3, #4
 800e7fc:	6819      	ldr	r1, [r3, #0]
 800e7fe:	2900      	cmp	r1, #0
 800e800:	d0f5      	beq.n	800e7ee <__any_on+0x2e>
 800e802:	2001      	movs	r0, #1
 800e804:	e7f6      	b.n	800e7f4 <__any_on+0x34>

0800e806 <__ascii_wctomb>:
 800e806:	0003      	movs	r3, r0
 800e808:	1e08      	subs	r0, r1, #0
 800e80a:	d005      	beq.n	800e818 <__ascii_wctomb+0x12>
 800e80c:	2aff      	cmp	r2, #255	; 0xff
 800e80e:	d904      	bls.n	800e81a <__ascii_wctomb+0x14>
 800e810:	228a      	movs	r2, #138	; 0x8a
 800e812:	2001      	movs	r0, #1
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	4240      	negs	r0, r0
 800e818:	4770      	bx	lr
 800e81a:	2001      	movs	r0, #1
 800e81c:	700a      	strb	r2, [r1, #0]
 800e81e:	e7fb      	b.n	800e818 <__ascii_wctomb+0x12>

0800e820 <_svfprintf_r>:
 800e820:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e822:	b0d9      	sub	sp, #356	; 0x164
 800e824:	001c      	movs	r4, r3
 800e826:	910b      	str	r1, [sp, #44]	; 0x2c
 800e828:	9208      	str	r2, [sp, #32]
 800e82a:	900a      	str	r0, [sp, #40]	; 0x28
 800e82c:	f002 fdae 	bl	801138c <_localeconv_r>
 800e830:	6803      	ldr	r3, [r0, #0]
 800e832:	0018      	movs	r0, r3
 800e834:	931c      	str	r3, [sp, #112]	; 0x70
 800e836:	f7f1 fc65 	bl	8000104 <strlen>
 800e83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e83c:	9016      	str	r0, [sp, #88]	; 0x58
 800e83e:	899b      	ldrh	r3, [r3, #12]
 800e840:	061b      	lsls	r3, r3, #24
 800e842:	d517      	bpl.n	800e874 <_svfprintf_r+0x54>
 800e844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e846:	691b      	ldr	r3, [r3, #16]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d113      	bne.n	800e874 <_svfprintf_r+0x54>
 800e84c:	2140      	movs	r1, #64	; 0x40
 800e84e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e850:	f7fd fa94 	bl	800bd7c <_malloc_r>
 800e854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e856:	6018      	str	r0, [r3, #0]
 800e858:	6118      	str	r0, [r3, #16]
 800e85a:	2800      	cmp	r0, #0
 800e85c:	d107      	bne.n	800e86e <_svfprintf_r+0x4e>
 800e85e:	230c      	movs	r3, #12
 800e860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e862:	6013      	str	r3, [r2, #0]
 800e864:	3b0d      	subs	r3, #13
 800e866:	9317      	str	r3, [sp, #92]	; 0x5c
 800e868:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e86a:	b059      	add	sp, #356	; 0x164
 800e86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e86e:	2340      	movs	r3, #64	; 0x40
 800e870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e872:	6153      	str	r3, [r2, #20]
 800e874:	2300      	movs	r3, #0
 800e876:	2200      	movs	r2, #0
 800e878:	932e      	str	r3, [sp, #184]	; 0xb8
 800e87a:	932d      	str	r3, [sp, #180]	; 0xb4
 800e87c:	930e      	str	r3, [sp, #56]	; 0x38
 800e87e:	2300      	movs	r3, #0
 800e880:	9214      	str	r2, [sp, #80]	; 0x50
 800e882:	9315      	str	r3, [sp, #84]	; 0x54
 800e884:	2300      	movs	r3, #0
 800e886:	af2f      	add	r7, sp, #188	; 0xbc
 800e888:	972c      	str	r7, [sp, #176]	; 0xb0
 800e88a:	931f      	str	r3, [sp, #124]	; 0x7c
 800e88c:	931e      	str	r3, [sp, #120]	; 0x78
 800e88e:	9312      	str	r3, [sp, #72]	; 0x48
 800e890:	931b      	str	r3, [sp, #108]	; 0x6c
 800e892:	931d      	str	r3, [sp, #116]	; 0x74
 800e894:	9317      	str	r3, [sp, #92]	; 0x5c
 800e896:	9d08      	ldr	r5, [sp, #32]
 800e898:	782b      	ldrb	r3, [r5, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <_svfprintf_r+0x84>
 800e89e:	2b25      	cmp	r3, #37	; 0x25
 800e8a0:	d000      	beq.n	800e8a4 <_svfprintf_r+0x84>
 800e8a2:	e091      	b.n	800e9c8 <_svfprintf_r+0x1a8>
 800e8a4:	9b08      	ldr	r3, [sp, #32]
 800e8a6:	1aee      	subs	r6, r5, r3
 800e8a8:	429d      	cmp	r5, r3
 800e8aa:	d016      	beq.n	800e8da <_svfprintf_r+0xba>
 800e8ac:	603b      	str	r3, [r7, #0]
 800e8ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800e8b0:	607e      	str	r6, [r7, #4]
 800e8b2:	199b      	adds	r3, r3, r6
 800e8b4:	932e      	str	r3, [sp, #184]	; 0xb8
 800e8b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800e8b8:	3708      	adds	r7, #8
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	932d      	str	r3, [sp, #180]	; 0xb4
 800e8be:	2b07      	cmp	r3, #7
 800e8c0:	dd08      	ble.n	800e8d4 <_svfprintf_r+0xb4>
 800e8c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e8c6:	aa2c      	add	r2, sp, #176	; 0xb0
 800e8c8:	f004 f83a 	bl	8012940 <__ssprint_r>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d000      	beq.n	800e8d2 <_svfprintf_r+0xb2>
 800e8d0:	e1cf      	b.n	800ec72 <_svfprintf_r+0x452>
 800e8d2:	af2f      	add	r7, sp, #188	; 0xbc
 800e8d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8d6:	199b      	adds	r3, r3, r6
 800e8d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800e8da:	782b      	ldrb	r3, [r5, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d101      	bne.n	800e8e4 <_svfprintf_r+0xc4>
 800e8e0:	f001 f99e 	bl	800fc20 <_svfprintf_r+0x1400>
 800e8e4:	221b      	movs	r2, #27
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	a91e      	add	r1, sp, #120	; 0x78
 800e8ea:	1852      	adds	r2, r2, r1
 800e8ec:	7013      	strb	r3, [r2, #0]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	001e      	movs	r6, r3
 800e8f2:	4252      	negs	r2, r2
 800e8f4:	3501      	adds	r5, #1
 800e8f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e8f8:	9318      	str	r3, [sp, #96]	; 0x60
 800e8fa:	1c6b      	adds	r3, r5, #1
 800e8fc:	9313      	str	r3, [sp, #76]	; 0x4c
 800e8fe:	782b      	ldrb	r3, [r5, #0]
 800e900:	930f      	str	r3, [sp, #60]	; 0x3c
 800e902:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800e904:	3820      	subs	r0, #32
 800e906:	285a      	cmp	r0, #90	; 0x5a
 800e908:	d901      	bls.n	800e90e <_svfprintf_r+0xee>
 800e90a:	f000 fe20 	bl	800f54e <_svfprintf_r+0xd2e>
 800e90e:	f7f1 fc0b 	bl	8000128 <__gnu_thumb1_case_uhi>
 800e912:	0078      	.short	0x0078
 800e914:	061e061e 	.word	0x061e061e
 800e918:	061e0082 	.word	0x061e0082
 800e91c:	061e061e 	.word	0x061e061e
 800e920:	061e005d 	.word	0x061e005d
 800e924:	0084061e 	.word	0x0084061e
 800e928:	061e008c 	.word	0x061e008c
 800e92c:	0091008a 	.word	0x0091008a
 800e930:	00b2061e 	.word	0x00b2061e
 800e934:	00b400b4 	.word	0x00b400b4
 800e938:	00b400b4 	.word	0x00b400b4
 800e93c:	00b400b4 	.word	0x00b400b4
 800e940:	00b400b4 	.word	0x00b400b4
 800e944:	061e00b4 	.word	0x061e00b4
 800e948:	061e061e 	.word	0x061e061e
 800e94c:	061e061e 	.word	0x061e061e
 800e950:	061e061e 	.word	0x061e061e
 800e954:	061e013b 	.word	0x061e013b
 800e958:	00f400e0 	.word	0x00f400e0
 800e95c:	013b013b 	.word	0x013b013b
 800e960:	061e013b 	.word	0x061e013b
 800e964:	061e061e 	.word	0x061e061e
 800e968:	00c7061e 	.word	0x00c7061e
 800e96c:	061e061e 	.word	0x061e061e
 800e970:	061e04c7 	.word	0x061e04c7
 800e974:	061e061e 	.word	0x061e061e
 800e978:	061e050a 	.word	0x061e050a
 800e97c:	061e052a 	.word	0x061e052a
 800e980:	055c061e 	.word	0x055c061e
 800e984:	061e061e 	.word	0x061e061e
 800e988:	061e061e 	.word	0x061e061e
 800e98c:	061e061e 	.word	0x061e061e
 800e990:	061e061e 	.word	0x061e061e
 800e994:	061e013b 	.word	0x061e013b
 800e998:	00f600e0 	.word	0x00f600e0
 800e99c:	013b013b 	.word	0x013b013b
 800e9a0:	00c9013b 	.word	0x00c9013b
 800e9a4:	00dc00f6 	.word	0x00dc00f6
 800e9a8:	00d5061e 	.word	0x00d5061e
 800e9ac:	04a7061e 	.word	0x04a7061e
 800e9b0:	04fa04c9 	.word	0x04fa04c9
 800e9b4:	061e00dc 	.word	0x061e00dc
 800e9b8:	0080050a 	.word	0x0080050a
 800e9bc:	061e052c 	.word	0x061e052c
 800e9c0:	057c061e 	.word	0x057c061e
 800e9c4:	0080061e 	.word	0x0080061e
 800e9c8:	3501      	adds	r5, #1
 800e9ca:	e765      	b.n	800e898 <_svfprintf_r+0x78>
 800e9cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9ce:	f002 fcdd 	bl	801138c <_localeconv_r>
 800e9d2:	6843      	ldr	r3, [r0, #4]
 800e9d4:	0018      	movs	r0, r3
 800e9d6:	931d      	str	r3, [sp, #116]	; 0x74
 800e9d8:	f7f1 fb94 	bl	8000104 <strlen>
 800e9dc:	901b      	str	r0, [sp, #108]	; 0x6c
 800e9de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e9e0:	f002 fcd4 	bl	801138c <_localeconv_r>
 800e9e4:	6883      	ldr	r3, [r0, #8]
 800e9e6:	9312      	str	r3, [sp, #72]	; 0x48
 800e9e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d011      	beq.n	800ea12 <_svfprintf_r+0x1f2>
 800e9ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00e      	beq.n	800ea12 <_svfprintf_r+0x1f2>
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00b      	beq.n	800ea12 <_svfprintf_r+0x1f2>
 800e9fa:	2380      	movs	r3, #128	; 0x80
 800e9fc:	00db      	lsls	r3, r3, #3
 800e9fe:	431e      	orrs	r6, r3
 800ea00:	e007      	b.n	800ea12 <_svfprintf_r+0x1f2>
 800ea02:	231b      	movs	r3, #27
 800ea04:	aa1e      	add	r2, sp, #120	; 0x78
 800ea06:	189b      	adds	r3, r3, r2
 800ea08:	781a      	ldrb	r2, [r3, #0]
 800ea0a:	2a00      	cmp	r2, #0
 800ea0c:	d101      	bne.n	800ea12 <_svfprintf_r+0x1f2>
 800ea0e:	3220      	adds	r2, #32
 800ea10:	701a      	strb	r2, [r3, #0]
 800ea12:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800ea14:	e771      	b.n	800e8fa <_svfprintf_r+0xda>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e7f1      	b.n	800e9fe <_svfprintf_r+0x1de>
 800ea1a:	cc08      	ldmia	r4!, {r3}
 800ea1c:	9318      	str	r3, [sp, #96]	; 0x60
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	daf7      	bge.n	800ea12 <_svfprintf_r+0x1f2>
 800ea22:	425b      	negs	r3, r3
 800ea24:	9318      	str	r3, [sp, #96]	; 0x60
 800ea26:	2304      	movs	r3, #4
 800ea28:	e7e9      	b.n	800e9fe <_svfprintf_r+0x1de>
 800ea2a:	231b      	movs	r3, #27
 800ea2c:	aa1e      	add	r2, sp, #120	; 0x78
 800ea2e:	189b      	adds	r3, r3, r2
 800ea30:	222b      	movs	r2, #43	; 0x2b
 800ea32:	e7ed      	b.n	800ea10 <_svfprintf_r+0x1f0>
 800ea34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea38:	7812      	ldrb	r2, [r2, #0]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ea3e:	2a2a      	cmp	r2, #42	; 0x2a
 800ea40:	d010      	beq.n	800ea64 <_svfprintf_r+0x244>
 800ea42:	2200      	movs	r2, #0
 800ea44:	9209      	str	r2, [sp, #36]	; 0x24
 800ea46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea48:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea4a:	3a30      	subs	r2, #48	; 0x30
 800ea4c:	2a09      	cmp	r2, #9
 800ea4e:	d900      	bls.n	800ea52 <_svfprintf_r+0x232>
 800ea50:	e757      	b.n	800e902 <_svfprintf_r+0xe2>
 800ea52:	200a      	movs	r0, #10
 800ea54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea56:	4341      	muls	r1, r0
 800ea58:	188a      	adds	r2, r1, r2
 800ea5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ea5c:	781a      	ldrb	r2, [r3, #0]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	920f      	str	r2, [sp, #60]	; 0x3c
 800ea62:	e7f0      	b.n	800ea46 <_svfprintf_r+0x226>
 800ea64:	cc04      	ldmia	r4!, {r2}
 800ea66:	9209      	str	r2, [sp, #36]	; 0x24
 800ea68:	2a00      	cmp	r2, #0
 800ea6a:	da02      	bge.n	800ea72 <_svfprintf_r+0x252>
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	4252      	negs	r2, r2
 800ea70:	9209      	str	r2, [sp, #36]	; 0x24
 800ea72:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea74:	e7cd      	b.n	800ea12 <_svfprintf_r+0x1f2>
 800ea76:	2380      	movs	r3, #128	; 0x80
 800ea78:	e7c1      	b.n	800e9fe <_svfprintf_r+0x1de>
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea7e:	9218      	str	r2, [sp, #96]	; 0x60
 800ea80:	210a      	movs	r1, #10
 800ea82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ea84:	434a      	muls	r2, r1
 800ea86:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ea88:	3930      	subs	r1, #48	; 0x30
 800ea8a:	188a      	adds	r2, r1, r2
 800ea8c:	9218      	str	r2, [sp, #96]	; 0x60
 800ea8e:	001a      	movs	r2, r3
 800ea90:	7812      	ldrb	r2, [r2, #0]
 800ea92:	3301      	adds	r3, #1
 800ea94:	920f      	str	r2, [sp, #60]	; 0x3c
 800ea96:	3a30      	subs	r2, #48	; 0x30
 800ea98:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea9a:	2a09      	cmp	r2, #9
 800ea9c:	d9f0      	bls.n	800ea80 <_svfprintf_r+0x260>
 800ea9e:	e730      	b.n	800e902 <_svfprintf_r+0xe2>
 800eaa0:	2308      	movs	r3, #8
 800eaa2:	e7ac      	b.n	800e9fe <_svfprintf_r+0x1de>
 800eaa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	2b68      	cmp	r3, #104	; 0x68
 800eaaa:	d105      	bne.n	800eab8 <_svfprintf_r+0x298>
 800eaac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eaae:	3301      	adds	r3, #1
 800eab0:	9313      	str	r3, [sp, #76]	; 0x4c
 800eab2:	2380      	movs	r3, #128	; 0x80
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	e7a2      	b.n	800e9fe <_svfprintf_r+0x1de>
 800eab8:	2340      	movs	r3, #64	; 0x40
 800eaba:	e7a0      	b.n	800e9fe <_svfprintf_r+0x1de>
 800eabc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b6c      	cmp	r3, #108	; 0x6c
 800eac2:	d104      	bne.n	800eace <_svfprintf_r+0x2ae>
 800eac4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eac6:	3301      	adds	r3, #1
 800eac8:	9313      	str	r3, [sp, #76]	; 0x4c
 800eaca:	2320      	movs	r3, #32
 800eacc:	e797      	b.n	800e9fe <_svfprintf_r+0x1de>
 800eace:	2310      	movs	r3, #16
 800ead0:	e795      	b.n	800e9fe <_svfprintf_r+0x1de>
 800ead2:	0021      	movs	r1, r4
 800ead4:	c904      	ldmia	r1!, {r2}
 800ead6:	ab3f      	add	r3, sp, #252	; 0xfc
 800ead8:	910d      	str	r1, [sp, #52]	; 0x34
 800eada:	211b      	movs	r1, #27
 800eadc:	701a      	strb	r2, [r3, #0]
 800eade:	2200      	movs	r2, #0
 800eae0:	a81e      	add	r0, sp, #120	; 0x78
 800eae2:	1809      	adds	r1, r1, r0
 800eae4:	700a      	strb	r2, [r1, #0]
 800eae6:	920c      	str	r2, [sp, #48]	; 0x30
 800eae8:	3201      	adds	r2, #1
 800eaea:	9209      	str	r2, [sp, #36]	; 0x24
 800eaec:	2200      	movs	r2, #0
 800eaee:	9308      	str	r3, [sp, #32]
 800eaf0:	0015      	movs	r5, r2
 800eaf2:	9219      	str	r2, [sp, #100]	; 0x64
 800eaf4:	9210      	str	r2, [sp, #64]	; 0x40
 800eaf6:	9211      	str	r2, [sp, #68]	; 0x44
 800eaf8:	e1f1      	b.n	800eede <_svfprintf_r+0x6be>
 800eafa:	2310      	movs	r3, #16
 800eafc:	431e      	orrs	r6, r3
 800eafe:	06b3      	lsls	r3, r6, #26
 800eb00:	d531      	bpl.n	800eb66 <_svfprintf_r+0x346>
 800eb02:	2307      	movs	r3, #7
 800eb04:	3407      	adds	r4, #7
 800eb06:	439c      	bics	r4, r3
 800eb08:	0022      	movs	r2, r4
 800eb0a:	ca18      	ldmia	r2!, {r3, r4}
 800eb0c:	9306      	str	r3, [sp, #24]
 800eb0e:	9407      	str	r4, [sp, #28]
 800eb10:	920d      	str	r2, [sp, #52]	; 0x34
 800eb12:	9a07      	ldr	r2, [sp, #28]
 800eb14:	2301      	movs	r3, #1
 800eb16:	2a00      	cmp	r2, #0
 800eb18:	da0b      	bge.n	800eb32 <_svfprintf_r+0x312>
 800eb1a:	9c06      	ldr	r4, [sp, #24]
 800eb1c:	9d07      	ldr	r5, [sp, #28]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4261      	negs	r1, r4
 800eb22:	41aa      	sbcs	r2, r5
 800eb24:	9106      	str	r1, [sp, #24]
 800eb26:	9207      	str	r2, [sp, #28]
 800eb28:	221b      	movs	r2, #27
 800eb2a:	a91e      	add	r1, sp, #120	; 0x78
 800eb2c:	1852      	adds	r2, r2, r1
 800eb2e:	212d      	movs	r1, #45	; 0x2d
 800eb30:	7011      	strb	r1, [r2, #0]
 800eb32:	9907      	ldr	r1, [sp, #28]
 800eb34:	9a06      	ldr	r2, [sp, #24]
 800eb36:	430a      	orrs	r2, r1
 800eb38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb3a:	3101      	adds	r1, #1
 800eb3c:	d101      	bne.n	800eb42 <_svfprintf_r+0x322>
 800eb3e:	f001 f87b 	bl	800fc38 <_svfprintf_r+0x1418>
 800eb42:	2180      	movs	r1, #128	; 0x80
 800eb44:	0034      	movs	r4, r6
 800eb46:	438c      	bics	r4, r1
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	d001      	beq.n	800eb50 <_svfprintf_r+0x330>
 800eb4c:	f001 f879 	bl	800fc42 <_svfprintf_r+0x1422>
 800eb50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb52:	2a00      	cmp	r2, #0
 800eb54:	d101      	bne.n	800eb5a <_svfprintf_r+0x33a>
 800eb56:	f000 fcef 	bl	800f538 <_svfprintf_r+0xd18>
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d001      	beq.n	800eb62 <_svfprintf_r+0x342>
 800eb5e:	f001 f874 	bl	800fc4a <_svfprintf_r+0x142a>
 800eb62:	f000 fc79 	bl	800f458 <_svfprintf_r+0xc38>
 800eb66:	0022      	movs	r2, r4
 800eb68:	ca08      	ldmia	r2!, {r3}
 800eb6a:	920d      	str	r2, [sp, #52]	; 0x34
 800eb6c:	06f2      	lsls	r2, r6, #27
 800eb6e:	d503      	bpl.n	800eb78 <_svfprintf_r+0x358>
 800eb70:	9306      	str	r3, [sp, #24]
 800eb72:	17db      	asrs	r3, r3, #31
 800eb74:	9307      	str	r3, [sp, #28]
 800eb76:	e7cc      	b.n	800eb12 <_svfprintf_r+0x2f2>
 800eb78:	0672      	lsls	r2, r6, #25
 800eb7a:	d501      	bpl.n	800eb80 <_svfprintf_r+0x360>
 800eb7c:	b21b      	sxth	r3, r3
 800eb7e:	e7f7      	b.n	800eb70 <_svfprintf_r+0x350>
 800eb80:	05b2      	lsls	r2, r6, #22
 800eb82:	d5f5      	bpl.n	800eb70 <_svfprintf_r+0x350>
 800eb84:	b25b      	sxtb	r3, r3
 800eb86:	e7f3      	b.n	800eb70 <_svfprintf_r+0x350>
 800eb88:	2307      	movs	r3, #7
 800eb8a:	3407      	adds	r4, #7
 800eb8c:	439c      	bics	r4, r3
 800eb8e:	0022      	movs	r2, r4
 800eb90:	ca18      	ldmia	r2!, {r3, r4}
 800eb92:	920d      	str	r2, [sp, #52]	; 0x34
 800eb94:	2201      	movs	r2, #1
 800eb96:	9314      	str	r3, [sp, #80]	; 0x50
 800eb98:	9415      	str	r4, [sp, #84]	; 0x54
 800eb9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb9c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800eb9e:	005c      	lsls	r4, r3, #1
 800eba0:	0864      	lsrs	r4, r4, #1
 800eba2:	0028      	movs	r0, r5
 800eba4:	0021      	movs	r1, r4
 800eba6:	4b3e      	ldr	r3, [pc, #248]	; (800eca0 <_svfprintf_r+0x480>)
 800eba8:	4252      	negs	r2, r2
 800ebaa:	f7f3 fba3 	bl	80022f4 <__aeabi_dcmpun>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d126      	bne.n	800ec00 <_svfprintf_r+0x3e0>
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	0028      	movs	r0, r5
 800ebb6:	0021      	movs	r1, r4
 800ebb8:	4b39      	ldr	r3, [pc, #228]	; (800eca0 <_svfprintf_r+0x480>)
 800ebba:	4252      	negs	r2, r2
 800ebbc:	f7f1 fc54 	bl	8000468 <__aeabi_dcmple>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d11d      	bne.n	800ec00 <_svfprintf_r+0x3e0>
 800ebc4:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ebc6:	9915      	ldr	r1, [sp, #84]	; 0x54
 800ebc8:	2200      	movs	r2, #0
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f7f1 fc42 	bl	8000454 <__aeabi_dcmplt>
 800ebd0:	2800      	cmp	r0, #0
 800ebd2:	d004      	beq.n	800ebde <_svfprintf_r+0x3be>
 800ebd4:	231b      	movs	r3, #27
 800ebd6:	aa1e      	add	r2, sp, #120	; 0x78
 800ebd8:	189b      	adds	r3, r3, r2
 800ebda:	222d      	movs	r2, #45	; 0x2d
 800ebdc:	701a      	strb	r2, [r3, #0]
 800ebde:	4b31      	ldr	r3, [pc, #196]	; (800eca4 <_svfprintf_r+0x484>)
 800ebe0:	9308      	str	r3, [sp, #32]
 800ebe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebe4:	2b47      	cmp	r3, #71	; 0x47
 800ebe6:	dd01      	ble.n	800ebec <_svfprintf_r+0x3cc>
 800ebe8:	4b2f      	ldr	r3, [pc, #188]	; (800eca8 <_svfprintf_r+0x488>)
 800ebea:	9308      	str	r3, [sp, #32]
 800ebec:	2380      	movs	r3, #128	; 0x80
 800ebee:	439e      	bics	r6, r3
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	930c      	str	r3, [sp, #48]	; 0x30
 800ebf4:	3303      	adds	r3, #3
 800ebf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9319      	str	r3, [sp, #100]	; 0x64
 800ebfc:	f000 fc78 	bl	800f4f0 <_svfprintf_r+0xcd0>
 800ec00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec04:	0010      	movs	r0, r2
 800ec06:	0019      	movs	r1, r3
 800ec08:	f7f3 fb74 	bl	80022f4 <__aeabi_dcmpun>
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d00e      	beq.n	800ec2e <_svfprintf_r+0x40e>
 800ec10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	da04      	bge.n	800ec20 <_svfprintf_r+0x400>
 800ec16:	231b      	movs	r3, #27
 800ec18:	aa1e      	add	r2, sp, #120	; 0x78
 800ec1a:	189b      	adds	r3, r3, r2
 800ec1c:	222d      	movs	r2, #45	; 0x2d
 800ec1e:	701a      	strb	r2, [r3, #0]
 800ec20:	4b22      	ldr	r3, [pc, #136]	; (800ecac <_svfprintf_r+0x48c>)
 800ec22:	9308      	str	r3, [sp, #32]
 800ec24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ec26:	2b47      	cmp	r3, #71	; 0x47
 800ec28:	dde0      	ble.n	800ebec <_svfprintf_r+0x3cc>
 800ec2a:	4b21      	ldr	r3, [pc, #132]	; (800ecb0 <_svfprintf_r+0x490>)
 800ec2c:	e7dd      	b.n	800ebea <_svfprintf_r+0x3ca>
 800ec2e:	2320      	movs	r3, #32
 800ec30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec32:	439a      	bics	r2, r3
 800ec34:	9210      	str	r2, [sp, #64]	; 0x40
 800ec36:	2a41      	cmp	r2, #65	; 0x41
 800ec38:	d123      	bne.n	800ec82 <_svfprintf_r+0x462>
 800ec3a:	2230      	movs	r2, #48	; 0x30
 800ec3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec3e:	ab25      	add	r3, sp, #148	; 0x94
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	3248      	adds	r2, #72	; 0x48
 800ec44:	2961      	cmp	r1, #97	; 0x61
 800ec46:	d000      	beq.n	800ec4a <_svfprintf_r+0x42a>
 800ec48:	3a20      	subs	r2, #32
 800ec4a:	705a      	strb	r2, [r3, #1]
 800ec4c:	2302      	movs	r3, #2
 800ec4e:	431e      	orrs	r6, r3
 800ec50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec52:	2b63      	cmp	r3, #99	; 0x63
 800ec54:	dd2e      	ble.n	800ecb4 <_svfprintf_r+0x494>
 800ec56:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec58:	1c59      	adds	r1, r3, #1
 800ec5a:	f7fd f88f 	bl	800bd7c <_malloc_r>
 800ec5e:	9008      	str	r0, [sp, #32]
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d000      	beq.n	800ec66 <_svfprintf_r+0x446>
 800ec64:	e216      	b.n	800f094 <_svfprintf_r+0x874>
 800ec66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec68:	899a      	ldrh	r2, [r3, #12]
 800ec6a:	2340      	movs	r3, #64	; 0x40
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec70:	8193      	strh	r3, [r2, #12]
 800ec72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	065b      	lsls	r3, r3, #25
 800ec78:	d400      	bmi.n	800ec7c <_svfprintf_r+0x45c>
 800ec7a:	e5f5      	b.n	800e868 <_svfprintf_r+0x48>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	425b      	negs	r3, r3
 800ec80:	e5f1      	b.n	800e866 <_svfprintf_r+0x46>
 800ec82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec84:	900c      	str	r0, [sp, #48]	; 0x30
 800ec86:	3301      	adds	r3, #1
 800ec88:	d100      	bne.n	800ec8c <_svfprintf_r+0x46c>
 800ec8a:	e206      	b.n	800f09a <_svfprintf_r+0x87a>
 800ec8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec8e:	2b47      	cmp	r3, #71	; 0x47
 800ec90:	d114      	bne.n	800ecbc <_svfprintf_r+0x49c>
 800ec92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d111      	bne.n	800ecbc <_svfprintf_r+0x49c>
 800ec98:	3301      	adds	r3, #1
 800ec9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec9c:	e00e      	b.n	800ecbc <_svfprintf_r+0x49c>
 800ec9e:	46c0      	nop			; (mov r8, r8)
 800eca0:	7fefffff 	.word	0x7fefffff
 800eca4:	08015dec 	.word	0x08015dec
 800eca8:	08015df0 	.word	0x08015df0
 800ecac:	08015df4 	.word	0x08015df4
 800ecb0:	08015df8 	.word	0x08015df8
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	930c      	str	r3, [sp, #48]	; 0x30
 800ecb8:	ab3f      	add	r3, sp, #252	; 0xfc
 800ecba:	9308      	str	r3, [sp, #32]
 800ecbc:	2380      	movs	r3, #128	; 0x80
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	4333      	orrs	r3, r6
 800ecc2:	931a      	str	r3, [sp, #104]	; 0x68
 800ecc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecc6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	db00      	blt.n	800ecce <_svfprintf_r+0x4ae>
 800eccc:	e1e7      	b.n	800f09e <_svfprintf_r+0x87e>
 800ecce:	2280      	movs	r2, #128	; 0x80
 800ecd0:	0612      	lsls	r2, r2, #24
 800ecd2:	4694      	mov	ip, r2
 800ecd4:	4463      	add	r3, ip
 800ecd6:	930e      	str	r3, [sp, #56]	; 0x38
 800ecd8:	232d      	movs	r3, #45	; 0x2d
 800ecda:	9322      	str	r3, [sp, #136]	; 0x88
 800ecdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ecde:	2b41      	cmp	r3, #65	; 0x41
 800ece0:	d000      	beq.n	800ece4 <_svfprintf_r+0x4c4>
 800ece2:	e1f5      	b.n	800f0d0 <_svfprintf_r+0x8b0>
 800ece4:	0028      	movs	r0, r5
 800ece6:	aa26      	add	r2, sp, #152	; 0x98
 800ece8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ecea:	f002 fb73 	bl	80113d4 <frexp>
 800ecee:	23ff      	movs	r3, #255	; 0xff
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	059b      	lsls	r3, r3, #22
 800ecf4:	f7f2 fcba 	bl	800166c <__aeabi_dmul>
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	0004      	movs	r4, r0
 800ecfe:	000d      	movs	r5, r1
 800ed00:	f7f1 fba2 	bl	8000448 <__aeabi_dcmpeq>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d001      	beq.n	800ed0c <_svfprintf_r+0x4ec>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	9326      	str	r3, [sp, #152]	; 0x98
 800ed0c:	4bda      	ldr	r3, [pc, #872]	; (800f078 <_svfprintf_r+0x858>)
 800ed0e:	9319      	str	r3, [sp, #100]	; 0x64
 800ed10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed12:	2b61      	cmp	r3, #97	; 0x61
 800ed14:	d001      	beq.n	800ed1a <_svfprintf_r+0x4fa>
 800ed16:	4bd9      	ldr	r3, [pc, #868]	; (800f07c <_svfprintf_r+0x85c>)
 800ed18:	9319      	str	r3, [sp, #100]	; 0x64
 800ed1a:	9b08      	ldr	r3, [sp, #32]
 800ed1c:	930e      	str	r3, [sp, #56]	; 0x38
 800ed1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed20:	3b01      	subs	r3, #1
 800ed22:	9311      	str	r3, [sp, #68]	; 0x44
 800ed24:	2200      	movs	r2, #0
 800ed26:	4bd6      	ldr	r3, [pc, #856]	; (800f080 <_svfprintf_r+0x860>)
 800ed28:	0020      	movs	r0, r4
 800ed2a:	0029      	movs	r1, r5
 800ed2c:	f7f2 fc9e 	bl	800166c <__aeabi_dmul>
 800ed30:	000d      	movs	r5, r1
 800ed32:	0004      	movs	r4, r0
 800ed34:	f7f3 fafc 	bl	8002330 <__aeabi_d2iz>
 800ed38:	9021      	str	r0, [sp, #132]	; 0x84
 800ed3a:	f7f3 fb2f 	bl	800239c <__aeabi_i2d>
 800ed3e:	0002      	movs	r2, r0
 800ed40:	000b      	movs	r3, r1
 800ed42:	0020      	movs	r0, r4
 800ed44:	0029      	movs	r1, r5
 800ed46:	f7f2 ff53 	bl	8001bf0 <__aeabi_dsub>
 800ed4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed4c:	000d      	movs	r5, r1
 800ed4e:	001a      	movs	r2, r3
 800ed50:	3201      	adds	r2, #1
 800ed52:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ed54:	920e      	str	r2, [sp, #56]	; 0x38
 800ed56:	9223      	str	r2, [sp, #140]	; 0x8c
 800ed58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ed5a:	0004      	movs	r4, r0
 800ed5c:	5c52      	ldrb	r2, [r2, r1]
 800ed5e:	701a      	strb	r2, [r3, #0]
 800ed60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed62:	9320      	str	r3, [sp, #128]	; 0x80
 800ed64:	3301      	adds	r3, #1
 800ed66:	d00a      	beq.n	800ed7e <_svfprintf_r+0x55e>
 800ed68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	9311      	str	r3, [sp, #68]	; 0x44
 800ed70:	0020      	movs	r0, r4
 800ed72:	2300      	movs	r3, #0
 800ed74:	0029      	movs	r1, r5
 800ed76:	f7f1 fb67 	bl	8000448 <__aeabi_dcmpeq>
 800ed7a:	2800      	cmp	r0, #0
 800ed7c:	d0d2      	beq.n	800ed24 <_svfprintf_r+0x504>
 800ed7e:	2200      	movs	r2, #0
 800ed80:	0020      	movs	r0, r4
 800ed82:	0029      	movs	r1, r5
 800ed84:	4bbf      	ldr	r3, [pc, #764]	; (800f084 <_svfprintf_r+0x864>)
 800ed86:	f7f1 fb79 	bl	800047c <__aeabi_dcmpgt>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d10c      	bne.n	800eda8 <_svfprintf_r+0x588>
 800ed8e:	2200      	movs	r2, #0
 800ed90:	0020      	movs	r0, r4
 800ed92:	0029      	movs	r1, r5
 800ed94:	4bbb      	ldr	r3, [pc, #748]	; (800f084 <_svfprintf_r+0x864>)
 800ed96:	f7f1 fb57 	bl	8000448 <__aeabi_dcmpeq>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d100      	bne.n	800eda0 <_svfprintf_r+0x580>
 800ed9e:	e191      	b.n	800f0c4 <_svfprintf_r+0x8a4>
 800eda0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eda2:	07db      	lsls	r3, r3, #31
 800eda4:	d400      	bmi.n	800eda8 <_svfprintf_r+0x588>
 800eda6:	e18d      	b.n	800f0c4 <_svfprintf_r+0x8a4>
 800eda8:	2030      	movs	r0, #48	; 0x30
 800edaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edac:	932a      	str	r3, [sp, #168]	; 0xa8
 800edae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800edb0:	7bdb      	ldrb	r3, [r3, #15]
 800edb2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800edb4:	3a01      	subs	r2, #1
 800edb6:	922a      	str	r2, [sp, #168]	; 0xa8
 800edb8:	7811      	ldrb	r1, [r2, #0]
 800edba:	4299      	cmp	r1, r3
 800edbc:	d100      	bne.n	800edc0 <_svfprintf_r+0x5a0>
 800edbe:	e171      	b.n	800f0a4 <_svfprintf_r+0x884>
 800edc0:	1c4b      	adds	r3, r1, #1
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	2939      	cmp	r1, #57	; 0x39
 800edc6:	d101      	bne.n	800edcc <_svfprintf_r+0x5ac>
 800edc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800edca:	7a9b      	ldrb	r3, [r3, #10]
 800edcc:	7013      	strb	r3, [r2, #0]
 800edce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800edd0:	9a08      	ldr	r2, [sp, #32]
 800edd2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800edd4:	1a9b      	subs	r3, r3, r2
 800edd6:	930e      	str	r3, [sp, #56]	; 0x38
 800edd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800edda:	2b47      	cmp	r3, #71	; 0x47
 800eddc:	d000      	beq.n	800ede0 <_svfprintf_r+0x5c0>
 800edde:	e1c4      	b.n	800f16a <_svfprintf_r+0x94a>
 800ede0:	1ceb      	adds	r3, r5, #3
 800ede2:	db03      	blt.n	800edec <_svfprintf_r+0x5cc>
 800ede4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ede6:	42ab      	cmp	r3, r5
 800ede8:	db00      	blt.n	800edec <_svfprintf_r+0x5cc>
 800edea:	e1e6      	b.n	800f1ba <_svfprintf_r+0x99a>
 800edec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edee:	3b02      	subs	r3, #2
 800edf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800edf2:	223c      	movs	r2, #60	; 0x3c
 800edf4:	466b      	mov	r3, sp
 800edf6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800edf8:	189b      	adds	r3, r3, r2
 800edfa:	1e6c      	subs	r4, r5, #1
 800edfc:	3a1c      	subs	r2, #28
 800edfe:	2000      	movs	r0, #0
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	9426      	str	r4, [sp, #152]	; 0x98
 800ee04:	4391      	bics	r1, r2
 800ee06:	2941      	cmp	r1, #65	; 0x41
 800ee08:	d102      	bne.n	800ee10 <_svfprintf_r+0x5f0>
 800ee0a:	330f      	adds	r3, #15
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	3001      	adds	r0, #1
 800ee10:	a928      	add	r1, sp, #160	; 0xa0
 800ee12:	700b      	strb	r3, [r1, #0]
 800ee14:	232b      	movs	r3, #43	; 0x2b
 800ee16:	2c00      	cmp	r4, #0
 800ee18:	da02      	bge.n	800ee20 <_svfprintf_r+0x600>
 800ee1a:	2401      	movs	r4, #1
 800ee1c:	3302      	adds	r3, #2
 800ee1e:	1b64      	subs	r4, r4, r5
 800ee20:	704b      	strb	r3, [r1, #1]
 800ee22:	2c09      	cmp	r4, #9
 800ee24:	dc00      	bgt.n	800ee28 <_svfprintf_r+0x608>
 800ee26:	e1ba      	b.n	800f19e <_svfprintf_r+0x97e>
 800ee28:	2337      	movs	r3, #55	; 0x37
 800ee2a:	250a      	movs	r5, #10
 800ee2c:	aa1e      	add	r2, sp, #120	; 0x78
 800ee2e:	189b      	adds	r3, r3, r2
 800ee30:	9310      	str	r3, [sp, #64]	; 0x40
 800ee32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee34:	0020      	movs	r0, r4
 800ee36:	9309      	str	r3, [sp, #36]	; 0x24
 800ee38:	0029      	movs	r1, r5
 800ee3a:	3b01      	subs	r3, #1
 800ee3c:	9310      	str	r3, [sp, #64]	; 0x40
 800ee3e:	f7f1 faed 	bl	800041c <__aeabi_idivmod>
 800ee42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee44:	3130      	adds	r1, #48	; 0x30
 800ee46:	7019      	strb	r1, [r3, #0]
 800ee48:	0020      	movs	r0, r4
 800ee4a:	0029      	movs	r1, r5
 800ee4c:	9411      	str	r4, [sp, #68]	; 0x44
 800ee4e:	f7f1 f9ff 	bl	8000250 <__divsi3>
 800ee52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee54:	0004      	movs	r4, r0
 800ee56:	2b63      	cmp	r3, #99	; 0x63
 800ee58:	dceb      	bgt.n	800ee32 <_svfprintf_r+0x612>
 800ee5a:	222a      	movs	r2, #42	; 0x2a
 800ee5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee5e:	a81e      	add	r0, sp, #120	; 0x78
 800ee60:	1e99      	subs	r1, r3, #2
 800ee62:	1812      	adds	r2, r2, r0
 800ee64:	2037      	movs	r0, #55	; 0x37
 800ee66:	000b      	movs	r3, r1
 800ee68:	3430      	adds	r4, #48	; 0x30
 800ee6a:	700c      	strb	r4, [r1, #0]
 800ee6c:	ac1e      	add	r4, sp, #120	; 0x78
 800ee6e:	1900      	adds	r0, r0, r4
 800ee70:	4283      	cmp	r3, r0
 800ee72:	d200      	bcs.n	800ee76 <_svfprintf_r+0x656>
 800ee74:	e18e      	b.n	800f194 <_svfprintf_r+0x974>
 800ee76:	2300      	movs	r3, #0
 800ee78:	4281      	cmp	r1, r0
 800ee7a:	d804      	bhi.n	800ee86 <_svfprintf_r+0x666>
 800ee7c:	aa1e      	add	r2, sp, #120	; 0x78
 800ee7e:	3339      	adds	r3, #57	; 0x39
 800ee80:	189b      	adds	r3, r3, r2
 800ee82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee84:	1a9b      	subs	r3, r3, r2
 800ee86:	222a      	movs	r2, #42	; 0x2a
 800ee88:	a91e      	add	r1, sp, #120	; 0x78
 800ee8a:	1852      	adds	r2, r2, r1
 800ee8c:	18d3      	adds	r3, r2, r3
 800ee8e:	aa28      	add	r2, sp, #160	; 0xa0
 800ee90:	1a9b      	subs	r3, r3, r2
 800ee92:	931e      	str	r3, [sp, #120]	; 0x78
 800ee94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ee96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee98:	4694      	mov	ip, r2
 800ee9a:	4463      	add	r3, ip
 800ee9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	dc01      	bgt.n	800eea8 <_svfprintf_r+0x688>
 800eea4:	07f3      	lsls	r3, r6, #31
 800eea6:	d504      	bpl.n	800eeb2 <_svfprintf_r+0x692>
 800eea8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eeaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeac:	4694      	mov	ip, r2
 800eeae:	4463      	add	r3, ip
 800eeb0:	9309      	str	r3, [sp, #36]	; 0x24
 800eeb2:	2280      	movs	r2, #128	; 0x80
 800eeb4:	4b74      	ldr	r3, [pc, #464]	; (800f088 <_svfprintf_r+0x868>)
 800eeb6:	0052      	lsls	r2, r2, #1
 800eeb8:	4033      	ands	r3, r6
 800eeba:	431a      	orrs	r2, r3
 800eebc:	2300      	movs	r3, #0
 800eebe:	001d      	movs	r5, r3
 800eec0:	921a      	str	r2, [sp, #104]	; 0x68
 800eec2:	9310      	str	r3, [sp, #64]	; 0x40
 800eec4:	9311      	str	r3, [sp, #68]	; 0x44
 800eec6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eec8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800eeca:	9319      	str	r3, [sp, #100]	; 0x64
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d006      	beq.n	800eede <_svfprintf_r+0x6be>
 800eed0:	231b      	movs	r3, #27
 800eed2:	aa1e      	add	r2, sp, #120	; 0x78
 800eed4:	189b      	adds	r3, r3, r2
 800eed6:	222d      	movs	r2, #45	; 0x2d
 800eed8:	701a      	strb	r2, [r3, #0]
 800eeda:	2300      	movs	r3, #0
 800eedc:	9319      	str	r3, [sp, #100]	; 0x64
 800eede:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eee0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eee2:	931a      	str	r3, [sp, #104]	; 0x68
 800eee4:	4293      	cmp	r3, r2
 800eee6:	da00      	bge.n	800eeea <_svfprintf_r+0x6ca>
 800eee8:	921a      	str	r2, [sp, #104]	; 0x68
 800eeea:	231b      	movs	r3, #27
 800eeec:	aa1e      	add	r2, sp, #120	; 0x78
 800eeee:	189b      	adds	r3, r3, r2
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	1e5a      	subs	r2, r3, #1
 800eef4:	4193      	sbcs	r3, r2
 800eef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eef8:	18d3      	adds	r3, r2, r3
 800eefa:	931a      	str	r3, [sp, #104]	; 0x68
 800eefc:	0032      	movs	r2, r6
 800eefe:	2302      	movs	r3, #2
 800ef00:	401a      	ands	r2, r3
 800ef02:	9220      	str	r2, [sp, #128]	; 0x80
 800ef04:	421e      	tst	r6, r3
 800ef06:	d002      	beq.n	800ef0e <_svfprintf_r+0x6ee>
 800ef08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ef0a:	3302      	adds	r3, #2
 800ef0c:	931a      	str	r3, [sp, #104]	; 0x68
 800ef0e:	2384      	movs	r3, #132	; 0x84
 800ef10:	0032      	movs	r2, r6
 800ef12:	401a      	ands	r2, r3
 800ef14:	9221      	str	r2, [sp, #132]	; 0x84
 800ef16:	421e      	tst	r6, r3
 800ef18:	d11f      	bne.n	800ef5a <_svfprintf_r+0x73a>
 800ef1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800ef1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef1e:	1a9c      	subs	r4, r3, r2
 800ef20:	2c00      	cmp	r4, #0
 800ef22:	dd1a      	ble.n	800ef5a <_svfprintf_r+0x73a>
 800ef24:	0039      	movs	r1, r7
 800ef26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef28:	4858      	ldr	r0, [pc, #352]	; (800f08c <_svfprintf_r+0x86c>)
 800ef2a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800ef2c:	3301      	adds	r3, #1
 800ef2e:	3108      	adds	r1, #8
 800ef30:	6038      	str	r0, [r7, #0]
 800ef32:	2c10      	cmp	r4, #16
 800ef34:	dd00      	ble.n	800ef38 <_svfprintf_r+0x718>
 800ef36:	e31c      	b.n	800f572 <_svfprintf_r+0xd52>
 800ef38:	607c      	str	r4, [r7, #4]
 800ef3a:	18a4      	adds	r4, r4, r2
 800ef3c:	000f      	movs	r7, r1
 800ef3e:	942e      	str	r4, [sp, #184]	; 0xb8
 800ef40:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef42:	2b07      	cmp	r3, #7
 800ef44:	dd09      	ble.n	800ef5a <_svfprintf_r+0x73a>
 800ef46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef48:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef4a:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef4c:	f003 fcf8 	bl	8012940 <__ssprint_r>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	d001      	beq.n	800ef58 <_svfprintf_r+0x738>
 800ef54:	f000 fe43 	bl	800fbde <_svfprintf_r+0x13be>
 800ef58:	af2f      	add	r7, sp, #188	; 0xbc
 800ef5a:	221b      	movs	r2, #27
 800ef5c:	a91e      	add	r1, sp, #120	; 0x78
 800ef5e:	1852      	adds	r2, r2, r1
 800ef60:	7811      	ldrb	r1, [r2, #0]
 800ef62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ef64:	2900      	cmp	r1, #0
 800ef66:	d014      	beq.n	800ef92 <_svfprintf_r+0x772>
 800ef68:	603a      	str	r2, [r7, #0]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	189b      	adds	r3, r3, r2
 800ef6e:	932e      	str	r3, [sp, #184]	; 0xb8
 800ef70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800ef72:	607a      	str	r2, [r7, #4]
 800ef74:	189b      	adds	r3, r3, r2
 800ef76:	932d      	str	r3, [sp, #180]	; 0xb4
 800ef78:	3708      	adds	r7, #8
 800ef7a:	2b07      	cmp	r3, #7
 800ef7c:	dd09      	ble.n	800ef92 <_svfprintf_r+0x772>
 800ef7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef80:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ef82:	aa2c      	add	r2, sp, #176	; 0xb0
 800ef84:	f003 fcdc 	bl	8012940 <__ssprint_r>
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d001      	beq.n	800ef90 <_svfprintf_r+0x770>
 800ef8c:	f000 fe27 	bl	800fbde <_svfprintf_r+0x13be>
 800ef90:	af2f      	add	r7, sp, #188	; 0xbc
 800ef92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800ef96:	2a00      	cmp	r2, #0
 800ef98:	d015      	beq.n	800efc6 <_svfprintf_r+0x7a6>
 800ef9a:	aa25      	add	r2, sp, #148	; 0x94
 800ef9c:	603a      	str	r2, [r7, #0]
 800ef9e:	2202      	movs	r2, #2
 800efa0:	189b      	adds	r3, r3, r2
 800efa2:	932e      	str	r3, [sp, #184]	; 0xb8
 800efa4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800efa6:	607a      	str	r2, [r7, #4]
 800efa8:	3301      	adds	r3, #1
 800efaa:	932d      	str	r3, [sp, #180]	; 0xb4
 800efac:	3708      	adds	r7, #8
 800efae:	2b07      	cmp	r3, #7
 800efb0:	dd09      	ble.n	800efc6 <_svfprintf_r+0x7a6>
 800efb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800efb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800efb6:	aa2c      	add	r2, sp, #176	; 0xb0
 800efb8:	f003 fcc2 	bl	8012940 <__ssprint_r>
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d001      	beq.n	800efc4 <_svfprintf_r+0x7a4>
 800efc0:	f000 fe0d 	bl	800fbde <_svfprintf_r+0x13be>
 800efc4:	af2f      	add	r7, sp, #188	; 0xbc
 800efc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efc8:	2b80      	cmp	r3, #128	; 0x80
 800efca:	d11f      	bne.n	800f00c <_svfprintf_r+0x7ec>
 800efcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800efce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800efd0:	1a9c      	subs	r4, r3, r2
 800efd2:	2c00      	cmp	r4, #0
 800efd4:	dd1a      	ble.n	800f00c <_svfprintf_r+0x7ec>
 800efd6:	0039      	movs	r1, r7
 800efd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800efda:	482d      	ldr	r0, [pc, #180]	; (800f090 <_svfprintf_r+0x870>)
 800efdc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800efde:	3301      	adds	r3, #1
 800efe0:	3108      	adds	r1, #8
 800efe2:	6038      	str	r0, [r7, #0]
 800efe4:	2c10      	cmp	r4, #16
 800efe6:	dd00      	ble.n	800efea <_svfprintf_r+0x7ca>
 800efe8:	e2d6      	b.n	800f598 <_svfprintf_r+0xd78>
 800efea:	607c      	str	r4, [r7, #4]
 800efec:	18a4      	adds	r4, r4, r2
 800efee:	000f      	movs	r7, r1
 800eff0:	942e      	str	r4, [sp, #184]	; 0xb8
 800eff2:	932d      	str	r3, [sp, #180]	; 0xb4
 800eff4:	2b07      	cmp	r3, #7
 800eff6:	dd09      	ble.n	800f00c <_svfprintf_r+0x7ec>
 800eff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800effa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800effc:	aa2c      	add	r2, sp, #176	; 0xb0
 800effe:	f003 fc9f 	bl	8012940 <__ssprint_r>
 800f002:	2800      	cmp	r0, #0
 800f004:	d001      	beq.n	800f00a <_svfprintf_r+0x7ea>
 800f006:	f000 fdea 	bl	800fbde <_svfprintf_r+0x13be>
 800f00a:	af2f      	add	r7, sp, #188	; 0xbc
 800f00c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f010:	1a9c      	subs	r4, r3, r2
 800f012:	2c00      	cmp	r4, #0
 800f014:	dd1a      	ble.n	800f04c <_svfprintf_r+0x82c>
 800f016:	0039      	movs	r1, r7
 800f018:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f01a:	481d      	ldr	r0, [pc, #116]	; (800f090 <_svfprintf_r+0x870>)
 800f01c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f01e:	3301      	adds	r3, #1
 800f020:	3108      	adds	r1, #8
 800f022:	6038      	str	r0, [r7, #0]
 800f024:	2c10      	cmp	r4, #16
 800f026:	dd00      	ble.n	800f02a <_svfprintf_r+0x80a>
 800f028:	e2c9      	b.n	800f5be <_svfprintf_r+0xd9e>
 800f02a:	18a2      	adds	r2, r4, r2
 800f02c:	607c      	str	r4, [r7, #4]
 800f02e:	922e      	str	r2, [sp, #184]	; 0xb8
 800f030:	000f      	movs	r7, r1
 800f032:	932d      	str	r3, [sp, #180]	; 0xb4
 800f034:	2b07      	cmp	r3, #7
 800f036:	dd09      	ble.n	800f04c <_svfprintf_r+0x82c>
 800f038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f03a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f03c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f03e:	f003 fc7f 	bl	8012940 <__ssprint_r>
 800f042:	2800      	cmp	r0, #0
 800f044:	d001      	beq.n	800f04a <_svfprintf_r+0x82a>
 800f046:	f000 fdca 	bl	800fbde <_svfprintf_r+0x13be>
 800f04a:	af2f      	add	r7, sp, #188	; 0xbc
 800f04c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f04e:	9319      	str	r3, [sp, #100]	; 0x64
 800f050:	05f3      	lsls	r3, r6, #23
 800f052:	d500      	bpl.n	800f056 <_svfprintf_r+0x836>
 800f054:	e2ce      	b.n	800f5f4 <_svfprintf_r+0xdd4>
 800f056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f058:	9b08      	ldr	r3, [sp, #32]
 800f05a:	4694      	mov	ip, r2
 800f05c:	603b      	str	r3, [r7, #0]
 800f05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f060:	607b      	str	r3, [r7, #4]
 800f062:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f064:	4463      	add	r3, ip
 800f066:	932e      	str	r3, [sp, #184]	; 0xb8
 800f068:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f06a:	3301      	adds	r3, #1
 800f06c:	932d      	str	r3, [sp, #180]	; 0xb4
 800f06e:	2b07      	cmp	r3, #7
 800f070:	dd00      	ble.n	800f074 <_svfprintf_r+0x854>
 800f072:	e3a3      	b.n	800f7bc <_svfprintf_r+0xf9c>
 800f074:	3708      	adds	r7, #8
 800f076:	e301      	b.n	800f67c <_svfprintf_r+0xe5c>
 800f078:	08015dfc 	.word	0x08015dfc
 800f07c:	08015e0d 	.word	0x08015e0d
 800f080:	40300000 	.word	0x40300000
 800f084:	3fe00000 	.word	0x3fe00000
 800f088:	fffffbff 	.word	0xfffffbff
 800f08c:	08015e20 	.word	0x08015e20
 800f090:	08015e30 	.word	0x08015e30
 800f094:	9b08      	ldr	r3, [sp, #32]
 800f096:	930c      	str	r3, [sp, #48]	; 0x30
 800f098:	e610      	b.n	800ecbc <_svfprintf_r+0x49c>
 800f09a:	2306      	movs	r3, #6
 800f09c:	e5fd      	b.n	800ec9a <_svfprintf_r+0x47a>
 800f09e:	930e      	str	r3, [sp, #56]	; 0x38
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	e61a      	b.n	800ecda <_svfprintf_r+0x4ba>
 800f0a4:	7010      	strb	r0, [r2, #0]
 800f0a6:	e684      	b.n	800edb2 <_svfprintf_r+0x592>
 800f0a8:	7018      	strb	r0, [r3, #0]
 800f0aa:	3301      	adds	r3, #1
 800f0ac:	1aca      	subs	r2, r1, r3
 800f0ae:	d5fb      	bpl.n	800f0a8 <_svfprintf_r+0x888>
 800f0b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	3201      	adds	r2, #1
 800f0b6:	db01      	blt.n	800f0bc <_svfprintf_r+0x89c>
 800f0b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0be:	18d3      	adds	r3, r2, r3
 800f0c0:	9323      	str	r3, [sp, #140]	; 0x8c
 800f0c2:	e684      	b.n	800edce <_svfprintf_r+0x5ae>
 800f0c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0c6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800f0c8:	2030      	movs	r0, #48	; 0x30
 800f0ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0cc:	1851      	adds	r1, r2, r1
 800f0ce:	e7ed      	b.n	800f0ac <_svfprintf_r+0x88c>
 800f0d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0d2:	2303      	movs	r3, #3
 800f0d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f0d6:	2a46      	cmp	r2, #70	; 0x46
 800f0d8:	d006      	beq.n	800f0e8 <_svfprintf_r+0x8c8>
 800f0da:	0014      	movs	r4, r2
 800f0dc:	3c45      	subs	r4, #69	; 0x45
 800f0de:	4262      	negs	r2, r4
 800f0e0:	4154      	adcs	r4, r2
 800f0e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	1914      	adds	r4, r2, r4
 800f0e8:	aa2a      	add	r2, sp, #168	; 0xa8
 800f0ea:	9204      	str	r2, [sp, #16]
 800f0ec:	aa27      	add	r2, sp, #156	; 0x9c
 800f0ee:	9203      	str	r2, [sp, #12]
 800f0f0:	aa26      	add	r2, sp, #152	; 0x98
 800f0f2:	9202      	str	r2, [sp, #8]
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	002a      	movs	r2, r5
 800f0f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0fa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f0fc:	9401      	str	r4, [sp, #4]
 800f0fe:	f002 fad7 	bl	80116b0 <_dtoa_r>
 800f102:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f104:	9008      	str	r0, [sp, #32]
 800f106:	2b47      	cmp	r3, #71	; 0x47
 800f108:	d103      	bne.n	800f112 <_svfprintf_r+0x8f2>
 800f10a:	07f3      	lsls	r3, r6, #31
 800f10c:	d401      	bmi.n	800f112 <_svfprintf_r+0x8f2>
 800f10e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f110:	e65e      	b.n	800edd0 <_svfprintf_r+0x5b0>
 800f112:	9b08      	ldr	r3, [sp, #32]
 800f114:	191b      	adds	r3, r3, r4
 800f116:	9311      	str	r3, [sp, #68]	; 0x44
 800f118:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f11a:	2b46      	cmp	r3, #70	; 0x46
 800f11c:	d112      	bne.n	800f144 <_svfprintf_r+0x924>
 800f11e:	9b08      	ldr	r3, [sp, #32]
 800f120:	781b      	ldrb	r3, [r3, #0]
 800f122:	2b30      	cmp	r3, #48	; 0x30
 800f124:	d10a      	bne.n	800f13c <_svfprintf_r+0x91c>
 800f126:	2200      	movs	r2, #0
 800f128:	2300      	movs	r3, #0
 800f12a:	0028      	movs	r0, r5
 800f12c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f12e:	f7f1 f98b 	bl	8000448 <__aeabi_dcmpeq>
 800f132:	2800      	cmp	r0, #0
 800f134:	d102      	bne.n	800f13c <_svfprintf_r+0x91c>
 800f136:	2301      	movs	r3, #1
 800f138:	1b1b      	subs	r3, r3, r4
 800f13a:	9326      	str	r3, [sp, #152]	; 0x98
 800f13c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f13e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f140:	18d3      	adds	r3, r2, r3
 800f142:	9311      	str	r3, [sp, #68]	; 0x44
 800f144:	2200      	movs	r2, #0
 800f146:	2300      	movs	r3, #0
 800f148:	0028      	movs	r0, r5
 800f14a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f14c:	f7f1 f97c 	bl	8000448 <__aeabi_dcmpeq>
 800f150:	2800      	cmp	r0, #0
 800f152:	d001      	beq.n	800f158 <_svfprintf_r+0x938>
 800f154:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f156:	932a      	str	r3, [sp, #168]	; 0xa8
 800f158:	2230      	movs	r2, #48	; 0x30
 800f15a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800f15c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f15e:	4299      	cmp	r1, r3
 800f160:	d9d5      	bls.n	800f10e <_svfprintf_r+0x8ee>
 800f162:	1c59      	adds	r1, r3, #1
 800f164:	912a      	str	r1, [sp, #168]	; 0xa8
 800f166:	701a      	strb	r2, [r3, #0]
 800f168:	e7f7      	b.n	800f15a <_svfprintf_r+0x93a>
 800f16a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f16c:	2b46      	cmp	r3, #70	; 0x46
 800f16e:	d000      	beq.n	800f172 <_svfprintf_r+0x952>
 800f170:	e63f      	b.n	800edf2 <_svfprintf_r+0x5d2>
 800f172:	2201      	movs	r2, #1
 800f174:	0033      	movs	r3, r6
 800f176:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f178:	4013      	ands	r3, r2
 800f17a:	430b      	orrs	r3, r1
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	dd2c      	ble.n	800f1da <_svfprintf_r+0x9ba>
 800f180:	2b00      	cmp	r3, #0
 800f182:	d046      	beq.n	800f212 <_svfprintf_r+0x9f2>
 800f184:	000a      	movs	r2, r1
 800f186:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f188:	18eb      	adds	r3, r5, r3
 800f18a:	18d3      	adds	r3, r2, r3
 800f18c:	9309      	str	r3, [sp, #36]	; 0x24
 800f18e:	2366      	movs	r3, #102	; 0x66
 800f190:	930f      	str	r3, [sp, #60]	; 0x3c
 800f192:	e030      	b.n	800f1f6 <_svfprintf_r+0x9d6>
 800f194:	781c      	ldrb	r4, [r3, #0]
 800f196:	3301      	adds	r3, #1
 800f198:	7014      	strb	r4, [r2, #0]
 800f19a:	3201      	adds	r2, #1
 800f19c:	e668      	b.n	800ee70 <_svfprintf_r+0x650>
 800f19e:	222a      	movs	r2, #42	; 0x2a
 800f1a0:	ab1e      	add	r3, sp, #120	; 0x78
 800f1a2:	18d2      	adds	r2, r2, r3
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d104      	bne.n	800f1b2 <_svfprintf_r+0x992>
 800f1a8:	2330      	movs	r3, #48	; 0x30
 800f1aa:	222b      	movs	r2, #43	; 0x2b
 800f1ac:	708b      	strb	r3, [r1, #2]
 800f1ae:	ab1e      	add	r3, sp, #120	; 0x78
 800f1b0:	18d2      	adds	r2, r2, r3
 800f1b2:	3430      	adds	r4, #48	; 0x30
 800f1b4:	1c53      	adds	r3, r2, #1
 800f1b6:	7014      	strb	r4, [r2, #0]
 800f1b8:	e669      	b.n	800ee8e <_svfprintf_r+0x66e>
 800f1ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1bc:	42ab      	cmp	r3, r5
 800f1be:	dd12      	ble.n	800f1e6 <_svfprintf_r+0x9c6>
 800f1c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1c4:	4694      	mov	ip, r2
 800f1c6:	4463      	add	r3, ip
 800f1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ca:	2367      	movs	r3, #103	; 0x67
 800f1cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1ce:	2d00      	cmp	r5, #0
 800f1d0:	dc11      	bgt.n	800f1f6 <_svfprintf_r+0x9d6>
 800f1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d4:	1b5b      	subs	r3, r3, r5
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	e00c      	b.n	800f1f4 <_svfprintf_r+0x9d4>
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d01b      	beq.n	800f216 <_svfprintf_r+0x9f6>
 800f1de:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1e2:	3301      	adds	r3, #1
 800f1e4:	e7d1      	b.n	800f18a <_svfprintf_r+0x96a>
 800f1e6:	2367      	movs	r3, #103	; 0x67
 800f1e8:	9509      	str	r5, [sp, #36]	; 0x24
 800f1ea:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1ec:	07f3      	lsls	r3, r6, #31
 800f1ee:	d502      	bpl.n	800f1f6 <_svfprintf_r+0x9d6>
 800f1f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1f2:	18eb      	adds	r3, r5, r3
 800f1f4:	9309      	str	r3, [sp, #36]	; 0x24
 800f1f6:	2380      	movs	r3, #128	; 0x80
 800f1f8:	0032      	movs	r2, r6
 800f1fa:	00db      	lsls	r3, r3, #3
 800f1fc:	401a      	ands	r2, r3
 800f1fe:	9211      	str	r2, [sp, #68]	; 0x44
 800f200:	2200      	movs	r2, #0
 800f202:	9210      	str	r2, [sp, #64]	; 0x40
 800f204:	421e      	tst	r6, r3
 800f206:	d100      	bne.n	800f20a <_svfprintf_r+0x9ea>
 800f208:	e65d      	b.n	800eec6 <_svfprintf_r+0x6a6>
 800f20a:	4295      	cmp	r5, r2
 800f20c:	dc25      	bgt.n	800f25a <_svfprintf_r+0xa3a>
 800f20e:	9211      	str	r2, [sp, #68]	; 0x44
 800f210:	e659      	b.n	800eec6 <_svfprintf_r+0x6a6>
 800f212:	9509      	str	r5, [sp, #36]	; 0x24
 800f214:	e7bb      	b.n	800f18e <_svfprintf_r+0x96e>
 800f216:	2366      	movs	r3, #102	; 0x66
 800f218:	9209      	str	r2, [sp, #36]	; 0x24
 800f21a:	930f      	str	r3, [sp, #60]	; 0x3c
 800f21c:	e7eb      	b.n	800f1f6 <_svfprintf_r+0x9d6>
 800f21e:	42ab      	cmp	r3, r5
 800f220:	da0e      	bge.n	800f240 <_svfprintf_r+0xa20>
 800f222:	1aed      	subs	r5, r5, r3
 800f224:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f226:	785b      	ldrb	r3, [r3, #1]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d012      	beq.n	800f252 <_svfprintf_r+0xa32>
 800f22c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f22e:	3301      	adds	r3, #1
 800f230:	9311      	str	r3, [sp, #68]	; 0x44
 800f232:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f234:	3301      	adds	r3, #1
 800f236:	9312      	str	r3, [sp, #72]	; 0x48
 800f238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2bff      	cmp	r3, #255	; 0xff
 800f23e:	d1ee      	bne.n	800f21e <_svfprintf_r+0x9fe>
 800f240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f244:	189b      	adds	r3, r3, r2
 800f246:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f248:	4353      	muls	r3, r2
 800f24a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f24c:	189b      	adds	r3, r3, r2
 800f24e:	9309      	str	r3, [sp, #36]	; 0x24
 800f250:	e639      	b.n	800eec6 <_svfprintf_r+0x6a6>
 800f252:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f254:	3301      	adds	r3, #1
 800f256:	9310      	str	r3, [sp, #64]	; 0x40
 800f258:	e7ee      	b.n	800f238 <_svfprintf_r+0xa18>
 800f25a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f25c:	9311      	str	r3, [sp, #68]	; 0x44
 800f25e:	e7eb      	b.n	800f238 <_svfprintf_r+0xa18>
 800f260:	1d23      	adds	r3, r4, #4
 800f262:	930d      	str	r3, [sp, #52]	; 0x34
 800f264:	06b3      	lsls	r3, r6, #26
 800f266:	d509      	bpl.n	800f27c <_svfprintf_r+0xa5c>
 800f268:	6823      	ldr	r3, [r4, #0]
 800f26a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	17d2      	asrs	r2, r2, #31
 800f270:	605a      	str	r2, [r3, #4]
 800f272:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f274:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f276:	9308      	str	r3, [sp, #32]
 800f278:	f7ff fb0d 	bl	800e896 <_svfprintf_r+0x76>
 800f27c:	06f3      	lsls	r3, r6, #27
 800f27e:	d503      	bpl.n	800f288 <_svfprintf_r+0xa68>
 800f280:	6823      	ldr	r3, [r4, #0]
 800f282:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f284:	601a      	str	r2, [r3, #0]
 800f286:	e7f4      	b.n	800f272 <_svfprintf_r+0xa52>
 800f288:	0673      	lsls	r3, r6, #25
 800f28a:	d503      	bpl.n	800f294 <_svfprintf_r+0xa74>
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f290:	801a      	strh	r2, [r3, #0]
 800f292:	e7ee      	b.n	800f272 <_svfprintf_r+0xa52>
 800f294:	05b6      	lsls	r6, r6, #22
 800f296:	d5f3      	bpl.n	800f280 <_svfprintf_r+0xa60>
 800f298:	6823      	ldr	r3, [r4, #0]
 800f29a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f29c:	701a      	strb	r2, [r3, #0]
 800f29e:	e7e8      	b.n	800f272 <_svfprintf_r+0xa52>
 800f2a0:	2310      	movs	r3, #16
 800f2a2:	431e      	orrs	r6, r3
 800f2a4:	2320      	movs	r3, #32
 800f2a6:	0030      	movs	r0, r6
 800f2a8:	4018      	ands	r0, r3
 800f2aa:	421e      	tst	r6, r3
 800f2ac:	d00f      	beq.n	800f2ce <_svfprintf_r+0xaae>
 800f2ae:	3b19      	subs	r3, #25
 800f2b0:	3407      	adds	r4, #7
 800f2b2:	439c      	bics	r4, r3
 800f2b4:	0022      	movs	r2, r4
 800f2b6:	ca18      	ldmia	r2!, {r3, r4}
 800f2b8:	9306      	str	r3, [sp, #24]
 800f2ba:	9407      	str	r4, [sp, #28]
 800f2bc:	920d      	str	r2, [sp, #52]	; 0x34
 800f2be:	4bc9      	ldr	r3, [pc, #804]	; (800f5e4 <_svfprintf_r+0xdc4>)
 800f2c0:	401e      	ands	r6, r3
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	221b      	movs	r2, #27
 800f2c6:	a91e      	add	r1, sp, #120	; 0x78
 800f2c8:	1852      	adds	r2, r2, r1
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	e430      	b.n	800eb30 <_svfprintf_r+0x310>
 800f2ce:	0022      	movs	r2, r4
 800f2d0:	ca08      	ldmia	r2!, {r3}
 800f2d2:	0031      	movs	r1, r6
 800f2d4:	920d      	str	r2, [sp, #52]	; 0x34
 800f2d6:	2210      	movs	r2, #16
 800f2d8:	4011      	ands	r1, r2
 800f2da:	4216      	tst	r6, r2
 800f2dc:	d002      	beq.n	800f2e4 <_svfprintf_r+0xac4>
 800f2de:	9306      	str	r3, [sp, #24]
 800f2e0:	9007      	str	r0, [sp, #28]
 800f2e2:	e7ec      	b.n	800f2be <_svfprintf_r+0xa9e>
 800f2e4:	2240      	movs	r2, #64	; 0x40
 800f2e6:	0030      	movs	r0, r6
 800f2e8:	4010      	ands	r0, r2
 800f2ea:	4216      	tst	r6, r2
 800f2ec:	d003      	beq.n	800f2f6 <_svfprintf_r+0xad6>
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	9306      	str	r3, [sp, #24]
 800f2f2:	9107      	str	r1, [sp, #28]
 800f2f4:	e7e3      	b.n	800f2be <_svfprintf_r+0xa9e>
 800f2f6:	2280      	movs	r2, #128	; 0x80
 800f2f8:	0031      	movs	r1, r6
 800f2fa:	0092      	lsls	r2, r2, #2
 800f2fc:	4011      	ands	r1, r2
 800f2fe:	4216      	tst	r6, r2
 800f300:	d0f6      	beq.n	800f2f0 <_svfprintf_r+0xad0>
 800f302:	b2db      	uxtb	r3, r3
 800f304:	e7eb      	b.n	800f2de <_svfprintf_r+0xabe>
 800f306:	0023      	movs	r3, r4
 800f308:	cb04      	ldmia	r3!, {r2}
 800f30a:	49b7      	ldr	r1, [pc, #732]	; (800f5e8 <_svfprintf_r+0xdc8>)
 800f30c:	9206      	str	r2, [sp, #24]
 800f30e:	aa25      	add	r2, sp, #148	; 0x94
 800f310:	8011      	strh	r1, [r2, #0]
 800f312:	4ab6      	ldr	r2, [pc, #728]	; (800f5ec <_svfprintf_r+0xdcc>)
 800f314:	930d      	str	r3, [sp, #52]	; 0x34
 800f316:	2300      	movs	r3, #0
 800f318:	921f      	str	r2, [sp, #124]	; 0x7c
 800f31a:	2278      	movs	r2, #120	; 0x78
 800f31c:	9307      	str	r3, [sp, #28]
 800f31e:	3302      	adds	r3, #2
 800f320:	431e      	orrs	r6, r3
 800f322:	920f      	str	r2, [sp, #60]	; 0x3c
 800f324:	e7ce      	b.n	800f2c4 <_svfprintf_r+0xaa4>
 800f326:	0023      	movs	r3, r4
 800f328:	cb04      	ldmia	r3!, {r2}
 800f32a:	2400      	movs	r4, #0
 800f32c:	930d      	str	r3, [sp, #52]	; 0x34
 800f32e:	231b      	movs	r3, #27
 800f330:	9208      	str	r2, [sp, #32]
 800f332:	aa1e      	add	r2, sp, #120	; 0x78
 800f334:	189b      	adds	r3, r3, r2
 800f336:	701c      	strb	r4, [r3, #0]
 800f338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f33a:	3301      	adds	r3, #1
 800f33c:	d00e      	beq.n	800f35c <_svfprintf_r+0xb3c>
 800f33e:	0021      	movs	r1, r4
 800f340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f342:	9808      	ldr	r0, [sp, #32]
 800f344:	f002 f83a 	bl	80113bc <memchr>
 800f348:	900c      	str	r0, [sp, #48]	; 0x30
 800f34a:	42a0      	cmp	r0, r4
 800f34c:	d100      	bne.n	800f350 <_svfprintf_r+0xb30>
 800f34e:	e10d      	b.n	800f56c <_svfprintf_r+0xd4c>
 800f350:	9a08      	ldr	r2, [sp, #32]
 800f352:	1a83      	subs	r3, r0, r2
 800f354:	9309      	str	r3, [sp, #36]	; 0x24
 800f356:	0023      	movs	r3, r4
 800f358:	940c      	str	r4, [sp, #48]	; 0x30
 800f35a:	e44e      	b.n	800ebfa <_svfprintf_r+0x3da>
 800f35c:	9808      	ldr	r0, [sp, #32]
 800f35e:	f7f0 fed1 	bl	8000104 <strlen>
 800f362:	9009      	str	r0, [sp, #36]	; 0x24
 800f364:	e7f7      	b.n	800f356 <_svfprintf_r+0xb36>
 800f366:	2310      	movs	r3, #16
 800f368:	431e      	orrs	r6, r3
 800f36a:	2320      	movs	r3, #32
 800f36c:	0030      	movs	r0, r6
 800f36e:	4018      	ands	r0, r3
 800f370:	421e      	tst	r6, r3
 800f372:	d009      	beq.n	800f388 <_svfprintf_r+0xb68>
 800f374:	3b19      	subs	r3, #25
 800f376:	3407      	adds	r4, #7
 800f378:	439c      	bics	r4, r3
 800f37a:	0022      	movs	r2, r4
 800f37c:	ca18      	ldmia	r2!, {r3, r4}
 800f37e:	9306      	str	r3, [sp, #24]
 800f380:	9407      	str	r4, [sp, #28]
 800f382:	920d      	str	r2, [sp, #52]	; 0x34
 800f384:	2301      	movs	r3, #1
 800f386:	e79d      	b.n	800f2c4 <_svfprintf_r+0xaa4>
 800f388:	0023      	movs	r3, r4
 800f38a:	cb04      	ldmia	r3!, {r2}
 800f38c:	0031      	movs	r1, r6
 800f38e:	930d      	str	r3, [sp, #52]	; 0x34
 800f390:	2310      	movs	r3, #16
 800f392:	4019      	ands	r1, r3
 800f394:	421e      	tst	r6, r3
 800f396:	d003      	beq.n	800f3a0 <_svfprintf_r+0xb80>
 800f398:	9206      	str	r2, [sp, #24]
 800f39a:	9007      	str	r0, [sp, #28]
 800f39c:	3b0f      	subs	r3, #15
 800f39e:	e791      	b.n	800f2c4 <_svfprintf_r+0xaa4>
 800f3a0:	2340      	movs	r3, #64	; 0x40
 800f3a2:	0030      	movs	r0, r6
 800f3a4:	4018      	ands	r0, r3
 800f3a6:	421e      	tst	r6, r3
 800f3a8:	d003      	beq.n	800f3b2 <_svfprintf_r+0xb92>
 800f3aa:	b293      	uxth	r3, r2
 800f3ac:	9306      	str	r3, [sp, #24]
 800f3ae:	9107      	str	r1, [sp, #28]
 800f3b0:	e7e8      	b.n	800f384 <_svfprintf_r+0xb64>
 800f3b2:	2380      	movs	r3, #128	; 0x80
 800f3b4:	0031      	movs	r1, r6
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	4019      	ands	r1, r3
 800f3ba:	421e      	tst	r6, r3
 800f3bc:	d003      	beq.n	800f3c6 <_svfprintf_r+0xba6>
 800f3be:	b2d3      	uxtb	r3, r2
 800f3c0:	9306      	str	r3, [sp, #24]
 800f3c2:	9007      	str	r0, [sp, #28]
 800f3c4:	e7de      	b.n	800f384 <_svfprintf_r+0xb64>
 800f3c6:	9206      	str	r2, [sp, #24]
 800f3c8:	e7f1      	b.n	800f3ae <_svfprintf_r+0xb8e>
 800f3ca:	4b89      	ldr	r3, [pc, #548]	; (800f5f0 <_svfprintf_r+0xdd0>)
 800f3cc:	0030      	movs	r0, r6
 800f3ce:	931f      	str	r3, [sp, #124]	; 0x7c
 800f3d0:	2320      	movs	r3, #32
 800f3d2:	4018      	ands	r0, r3
 800f3d4:	421e      	tst	r6, r3
 800f3d6:	d01a      	beq.n	800f40e <_svfprintf_r+0xbee>
 800f3d8:	3b19      	subs	r3, #25
 800f3da:	3407      	adds	r4, #7
 800f3dc:	439c      	bics	r4, r3
 800f3de:	0022      	movs	r2, r4
 800f3e0:	ca18      	ldmia	r2!, {r3, r4}
 800f3e2:	9306      	str	r3, [sp, #24]
 800f3e4:	9407      	str	r4, [sp, #28]
 800f3e6:	920d      	str	r2, [sp, #52]	; 0x34
 800f3e8:	07f3      	lsls	r3, r6, #31
 800f3ea:	d50a      	bpl.n	800f402 <_svfprintf_r+0xbe2>
 800f3ec:	9b06      	ldr	r3, [sp, #24]
 800f3ee:	9a07      	ldr	r2, [sp, #28]
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	d006      	beq.n	800f402 <_svfprintf_r+0xbe2>
 800f3f4:	2230      	movs	r2, #48	; 0x30
 800f3f6:	ab25      	add	r3, sp, #148	; 0x94
 800f3f8:	701a      	strb	r2, [r3, #0]
 800f3fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f3fc:	705a      	strb	r2, [r3, #1]
 800f3fe:	2302      	movs	r3, #2
 800f400:	431e      	orrs	r6, r3
 800f402:	4b78      	ldr	r3, [pc, #480]	; (800f5e4 <_svfprintf_r+0xdc4>)
 800f404:	401e      	ands	r6, r3
 800f406:	2302      	movs	r3, #2
 800f408:	e75c      	b.n	800f2c4 <_svfprintf_r+0xaa4>
 800f40a:	4b78      	ldr	r3, [pc, #480]	; (800f5ec <_svfprintf_r+0xdcc>)
 800f40c:	e7de      	b.n	800f3cc <_svfprintf_r+0xbac>
 800f40e:	0023      	movs	r3, r4
 800f410:	cb04      	ldmia	r3!, {r2}
 800f412:	0031      	movs	r1, r6
 800f414:	930d      	str	r3, [sp, #52]	; 0x34
 800f416:	2310      	movs	r3, #16
 800f418:	4019      	ands	r1, r3
 800f41a:	421e      	tst	r6, r3
 800f41c:	d002      	beq.n	800f424 <_svfprintf_r+0xc04>
 800f41e:	9206      	str	r2, [sp, #24]
 800f420:	9007      	str	r0, [sp, #28]
 800f422:	e7e1      	b.n	800f3e8 <_svfprintf_r+0xbc8>
 800f424:	2340      	movs	r3, #64	; 0x40
 800f426:	0030      	movs	r0, r6
 800f428:	4018      	ands	r0, r3
 800f42a:	421e      	tst	r6, r3
 800f42c:	d003      	beq.n	800f436 <_svfprintf_r+0xc16>
 800f42e:	b293      	uxth	r3, r2
 800f430:	9306      	str	r3, [sp, #24]
 800f432:	9107      	str	r1, [sp, #28]
 800f434:	e7d8      	b.n	800f3e8 <_svfprintf_r+0xbc8>
 800f436:	2380      	movs	r3, #128	; 0x80
 800f438:	0031      	movs	r1, r6
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4019      	ands	r1, r3
 800f43e:	421e      	tst	r6, r3
 800f440:	d002      	beq.n	800f448 <_svfprintf_r+0xc28>
 800f442:	b2d3      	uxtb	r3, r2
 800f444:	9306      	str	r3, [sp, #24]
 800f446:	e7eb      	b.n	800f420 <_svfprintf_r+0xc00>
 800f448:	9206      	str	r2, [sp, #24]
 800f44a:	e7f2      	b.n	800f432 <_svfprintf_r+0xc12>
 800f44c:	9b07      	ldr	r3, [sp, #28]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d10a      	bne.n	800f468 <_svfprintf_r+0xc48>
 800f452:	9b06      	ldr	r3, [sp, #24]
 800f454:	2b09      	cmp	r3, #9
 800f456:	d807      	bhi.n	800f468 <_svfprintf_r+0xc48>
 800f458:	23e7      	movs	r3, #231	; 0xe7
 800f45a:	aa1e      	add	r2, sp, #120	; 0x78
 800f45c:	189b      	adds	r3, r3, r2
 800f45e:	9a06      	ldr	r2, [sp, #24]
 800f460:	3230      	adds	r2, #48	; 0x30
 800f462:	701a      	strb	r2, [r3, #0]
 800f464:	f000 fc18 	bl	800fc98 <_svfprintf_r+0x1478>
 800f468:	2680      	movs	r6, #128	; 0x80
 800f46a:	2300      	movs	r3, #0
 800f46c:	00f6      	lsls	r6, r6, #3
 800f46e:	930e      	str	r3, [sp, #56]	; 0x38
 800f470:	ad58      	add	r5, sp, #352	; 0x160
 800f472:	4026      	ands	r6, r4
 800f474:	220a      	movs	r2, #10
 800f476:	9806      	ldr	r0, [sp, #24]
 800f478:	9907      	ldr	r1, [sp, #28]
 800f47a:	2300      	movs	r3, #0
 800f47c:	f7f1 f812 	bl	80004a4 <__aeabi_uldivmod>
 800f480:	1e6b      	subs	r3, r5, #1
 800f482:	3230      	adds	r2, #48	; 0x30
 800f484:	9308      	str	r3, [sp, #32]
 800f486:	701a      	strb	r2, [r3, #0]
 800f488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f48a:	900c      	str	r0, [sp, #48]	; 0x30
 800f48c:	3301      	adds	r3, #1
 800f48e:	9110      	str	r1, [sp, #64]	; 0x40
 800f490:	930e      	str	r3, [sp, #56]	; 0x38
 800f492:	2e00      	cmp	r6, #0
 800f494:	d01d      	beq.n	800f4d2 <_svfprintf_r+0xcb2>
 800f496:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d118      	bne.n	800f4d2 <_svfprintf_r+0xcb2>
 800f4a0:	2aff      	cmp	r2, #255	; 0xff
 800f4a2:	d016      	beq.n	800f4d2 <_svfprintf_r+0xcb2>
 800f4a4:	9b07      	ldr	r3, [sp, #28]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d102      	bne.n	800f4b0 <_svfprintf_r+0xc90>
 800f4aa:	9b06      	ldr	r3, [sp, #24]
 800f4ac:	2b09      	cmp	r3, #9
 800f4ae:	d910      	bls.n	800f4d2 <_svfprintf_r+0xcb2>
 800f4b0:	9b08      	ldr	r3, [sp, #32]
 800f4b2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f4b4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800f4b6:	1a9b      	subs	r3, r3, r2
 800f4b8:	0018      	movs	r0, r3
 800f4ba:	9308      	str	r3, [sp, #32]
 800f4bc:	f7fd ff97 	bl	800d3ee <strncpy>
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4c4:	920e      	str	r2, [sp, #56]	; 0x38
 800f4c6:	785b      	ldrb	r3, [r3, #1]
 800f4c8:	1e5a      	subs	r2, r3, #1
 800f4ca:	4193      	sbcs	r3, r2
 800f4cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4ce:	18d3      	adds	r3, r2, r3
 800f4d0:	9312      	str	r3, [sp, #72]	; 0x48
 800f4d2:	9b07      	ldr	r3, [sp, #28]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d10f      	bne.n	800f4f8 <_svfprintf_r+0xcd8>
 800f4d8:	9b06      	ldr	r3, [sp, #24]
 800f4da:	2b09      	cmp	r3, #9
 800f4dc:	d80c      	bhi.n	800f4f8 <_svfprintf_r+0xcd8>
 800f4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4e0:	9a08      	ldr	r2, [sp, #32]
 800f4e2:	9319      	str	r3, [sp, #100]	; 0x64
 800f4e4:	ab58      	add	r3, sp, #352	; 0x160
 800f4e6:	1a9b      	subs	r3, r3, r2
 800f4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	0026      	movs	r6, r4
 800f4ee:	930c      	str	r3, [sp, #48]	; 0x30
 800f4f0:	001d      	movs	r5, r3
 800f4f2:	9310      	str	r3, [sp, #64]	; 0x40
 800f4f4:	9311      	str	r3, [sp, #68]	; 0x44
 800f4f6:	e4f2      	b.n	800eede <_svfprintf_r+0x6be>
 800f4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4fa:	9d08      	ldr	r5, [sp, #32]
 800f4fc:	9306      	str	r3, [sp, #24]
 800f4fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f500:	9307      	str	r3, [sp, #28]
 800f502:	e7b7      	b.n	800f474 <_svfprintf_r+0xc54>
 800f504:	200f      	movs	r0, #15
 800f506:	ab58      	add	r3, sp, #352	; 0x160
 800f508:	9308      	str	r3, [sp, #32]
 800f50a:	9b08      	ldr	r3, [sp, #32]
 800f50c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f50e:	3b01      	subs	r3, #1
 800f510:	9308      	str	r3, [sp, #32]
 800f512:	9b06      	ldr	r3, [sp, #24]
 800f514:	4003      	ands	r3, r0
 800f516:	5cd3      	ldrb	r3, [r2, r3]
 800f518:	9a08      	ldr	r2, [sp, #32]
 800f51a:	7013      	strb	r3, [r2, #0]
 800f51c:	9b07      	ldr	r3, [sp, #28]
 800f51e:	0719      	lsls	r1, r3, #28
 800f520:	9b06      	ldr	r3, [sp, #24]
 800f522:	091a      	lsrs	r2, r3, #4
 800f524:	9b07      	ldr	r3, [sp, #28]
 800f526:	4311      	orrs	r1, r2
 800f528:	091b      	lsrs	r3, r3, #4
 800f52a:	9307      	str	r3, [sp, #28]
 800f52c:	000b      	movs	r3, r1
 800f52e:	9a07      	ldr	r2, [sp, #28]
 800f530:	9106      	str	r1, [sp, #24]
 800f532:	4313      	orrs	r3, r2
 800f534:	d1e9      	bne.n	800f50a <_svfprintf_r+0xcea>
 800f536:	e7d2      	b.n	800f4de <_svfprintf_r+0xcbe>
 800f538:	aa58      	add	r2, sp, #352	; 0x160
 800f53a:	9208      	str	r2, [sp, #32]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d1ce      	bne.n	800f4de <_svfprintf_r+0xcbe>
 800f540:	07f6      	lsls	r6, r6, #31
 800f542:	d5cc      	bpl.n	800f4de <_svfprintf_r+0xcbe>
 800f544:	aa1e      	add	r2, sp, #120	; 0x78
 800f546:	33e7      	adds	r3, #231	; 0xe7
 800f548:	189b      	adds	r3, r3, r2
 800f54a:	2230      	movs	r2, #48	; 0x30
 800f54c:	e789      	b.n	800f462 <_svfprintf_r+0xc42>
 800f54e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f550:	2b00      	cmp	r3, #0
 800f552:	d100      	bne.n	800f556 <_svfprintf_r+0xd36>
 800f554:	e364      	b.n	800fc20 <_svfprintf_r+0x1400>
 800f556:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f558:	211b      	movs	r1, #27
 800f55a:	ab3f      	add	r3, sp, #252	; 0xfc
 800f55c:	701a      	strb	r2, [r3, #0]
 800f55e:	2200      	movs	r2, #0
 800f560:	a81e      	add	r0, sp, #120	; 0x78
 800f562:	1809      	adds	r1, r1, r0
 800f564:	700a      	strb	r2, [r1, #0]
 800f566:	940d      	str	r4, [sp, #52]	; 0x34
 800f568:	f7ff fabd 	bl	800eae6 <_svfprintf_r+0x2c6>
 800f56c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f56e:	f7ff fb44 	bl	800ebfa <_svfprintf_r+0x3da>
 800f572:	2010      	movs	r0, #16
 800f574:	1812      	adds	r2, r2, r0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	922e      	str	r2, [sp, #184]	; 0xb8
 800f57a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f57c:	2b07      	cmp	r3, #7
 800f57e:	dd08      	ble.n	800f592 <_svfprintf_r+0xd72>
 800f580:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f582:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f584:	aa2c      	add	r2, sp, #176	; 0xb0
 800f586:	f003 f9db 	bl	8012940 <__ssprint_r>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d000      	beq.n	800f590 <_svfprintf_r+0xd70>
 800f58e:	e326      	b.n	800fbde <_svfprintf_r+0x13be>
 800f590:	a92f      	add	r1, sp, #188	; 0xbc
 800f592:	000f      	movs	r7, r1
 800f594:	3c10      	subs	r4, #16
 800f596:	e4c5      	b.n	800ef24 <_svfprintf_r+0x704>
 800f598:	2010      	movs	r0, #16
 800f59a:	1812      	adds	r2, r2, r0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	922e      	str	r2, [sp, #184]	; 0xb8
 800f5a0:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5a2:	2b07      	cmp	r3, #7
 800f5a4:	dd08      	ble.n	800f5b8 <_svfprintf_r+0xd98>
 800f5a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5aa:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5ac:	f003 f9c8 	bl	8012940 <__ssprint_r>
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d000      	beq.n	800f5b6 <_svfprintf_r+0xd96>
 800f5b4:	e313      	b.n	800fbde <_svfprintf_r+0x13be>
 800f5b6:	a92f      	add	r1, sp, #188	; 0xbc
 800f5b8:	000f      	movs	r7, r1
 800f5ba:	3c10      	subs	r4, #16
 800f5bc:	e50b      	b.n	800efd6 <_svfprintf_r+0x7b6>
 800f5be:	2010      	movs	r0, #16
 800f5c0:	1812      	adds	r2, r2, r0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	922e      	str	r2, [sp, #184]	; 0xb8
 800f5c6:	932d      	str	r3, [sp, #180]	; 0xb4
 800f5c8:	2b07      	cmp	r3, #7
 800f5ca:	dd08      	ble.n	800f5de <_svfprintf_r+0xdbe>
 800f5cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f5ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f5d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f5d2:	f003 f9b5 	bl	8012940 <__ssprint_r>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	d000      	beq.n	800f5dc <_svfprintf_r+0xdbc>
 800f5da:	e300      	b.n	800fbde <_svfprintf_r+0x13be>
 800f5dc:	a92f      	add	r1, sp, #188	; 0xbc
 800f5de:	000f      	movs	r7, r1
 800f5e0:	3c10      	subs	r4, #16
 800f5e2:	e518      	b.n	800f016 <_svfprintf_r+0x7f6>
 800f5e4:	fffffbff 	.word	0xfffffbff
 800f5e8:	00007830 	.word	0x00007830
 800f5ec:	08015dfc 	.word	0x08015dfc
 800f5f0:	08015e0d 	.word	0x08015e0d
 800f5f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5f6:	2b65      	cmp	r3, #101	; 0x65
 800f5f8:	dc00      	bgt.n	800f5fc <_svfprintf_r+0xddc>
 800f5fa:	e241      	b.n	800fa80 <_svfprintf_r+0x1260>
 800f5fc:	9814      	ldr	r0, [sp, #80]	; 0x50
 800f5fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f600:	2200      	movs	r2, #0
 800f602:	2300      	movs	r3, #0
 800f604:	f7f0 ff20 	bl	8000448 <__aeabi_dcmpeq>
 800f608:	2800      	cmp	r0, #0
 800f60a:	d077      	beq.n	800f6fc <_svfprintf_r+0xedc>
 800f60c:	4bca      	ldr	r3, [pc, #808]	; (800f938 <_svfprintf_r+0x1118>)
 800f60e:	603b      	str	r3, [r7, #0]
 800f610:	2301      	movs	r3, #1
 800f612:	607b      	str	r3, [r7, #4]
 800f614:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f616:	3708      	adds	r7, #8
 800f618:	3301      	adds	r3, #1
 800f61a:	932e      	str	r3, [sp, #184]	; 0xb8
 800f61c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f61e:	3301      	adds	r3, #1
 800f620:	932d      	str	r3, [sp, #180]	; 0xb4
 800f622:	2b07      	cmp	r3, #7
 800f624:	dd08      	ble.n	800f638 <_svfprintf_r+0xe18>
 800f626:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f628:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f62a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f62c:	f003 f988 	bl	8012940 <__ssprint_r>
 800f630:	2800      	cmp	r0, #0
 800f632:	d000      	beq.n	800f636 <_svfprintf_r+0xe16>
 800f634:	e2d3      	b.n	800fbde <_svfprintf_r+0x13be>
 800f636:	af2f      	add	r7, sp, #188	; 0xbc
 800f638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f63a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f63c:	4293      	cmp	r3, r2
 800f63e:	db01      	blt.n	800f644 <_svfprintf_r+0xe24>
 800f640:	07f3      	lsls	r3, r6, #31
 800f642:	d51b      	bpl.n	800f67c <_svfprintf_r+0xe5c>
 800f644:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f646:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f648:	603b      	str	r3, [r7, #0]
 800f64a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f64c:	607b      	str	r3, [r7, #4]
 800f64e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f650:	3708      	adds	r7, #8
 800f652:	189b      	adds	r3, r3, r2
 800f654:	932e      	str	r3, [sp, #184]	; 0xb8
 800f656:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f658:	3301      	adds	r3, #1
 800f65a:	932d      	str	r3, [sp, #180]	; 0xb4
 800f65c:	2b07      	cmp	r3, #7
 800f65e:	dd08      	ble.n	800f672 <_svfprintf_r+0xe52>
 800f660:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f662:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f664:	aa2c      	add	r2, sp, #176	; 0xb0
 800f666:	f003 f96b 	bl	8012940 <__ssprint_r>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d000      	beq.n	800f670 <_svfprintf_r+0xe50>
 800f66e:	e2b6      	b.n	800fbde <_svfprintf_r+0x13be>
 800f670:	af2f      	add	r7, sp, #188	; 0xbc
 800f672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f674:	2510      	movs	r5, #16
 800f676:	1e5c      	subs	r4, r3, #1
 800f678:	2c00      	cmp	r4, #0
 800f67a:	dc2e      	bgt.n	800f6da <_svfprintf_r+0xeba>
 800f67c:	0776      	lsls	r6, r6, #29
 800f67e:	d500      	bpl.n	800f682 <_svfprintf_r+0xe62>
 800f680:	e290      	b.n	800fba4 <_svfprintf_r+0x1384>
 800f682:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f684:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f686:	4293      	cmp	r3, r2
 800f688:	da00      	bge.n	800f68c <_svfprintf_r+0xe6c>
 800f68a:	0013      	movs	r3, r2
 800f68c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f68e:	18d3      	adds	r3, r2, r3
 800f690:	9317      	str	r3, [sp, #92]	; 0x5c
 800f692:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f694:	2b00      	cmp	r3, #0
 800f696:	d007      	beq.n	800f6a8 <_svfprintf_r+0xe88>
 800f698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f69a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f69c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f69e:	f003 f94f 	bl	8012940 <__ssprint_r>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d000      	beq.n	800f6a8 <_svfprintf_r+0xe88>
 800f6a6:	e29a      	b.n	800fbde <_svfprintf_r+0x13be>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d000      	beq.n	800f6b4 <_svfprintf_r+0xe94>
 800f6b2:	e2b0      	b.n	800fc16 <_svfprintf_r+0x13f6>
 800f6b4:	af2f      	add	r7, sp, #188	; 0xbc
 800f6b6:	e5dc      	b.n	800f272 <_svfprintf_r+0xa52>
 800f6b8:	3210      	adds	r2, #16
 800f6ba:	607d      	str	r5, [r7, #4]
 800f6bc:	922e      	str	r2, [sp, #184]	; 0xb8
 800f6be:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6c0:	2b07      	cmp	r3, #7
 800f6c2:	dd08      	ble.n	800f6d6 <_svfprintf_r+0xeb6>
 800f6c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6c8:	aa2c      	add	r2, sp, #176	; 0xb0
 800f6ca:	f003 f939 	bl	8012940 <__ssprint_r>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d000      	beq.n	800f6d4 <_svfprintf_r+0xeb4>
 800f6d2:	e284      	b.n	800fbde <_svfprintf_r+0x13be>
 800f6d4:	a92f      	add	r1, sp, #188	; 0xbc
 800f6d6:	000f      	movs	r7, r1
 800f6d8:	3c10      	subs	r4, #16
 800f6da:	0039      	movs	r1, r7
 800f6dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f6de:	4897      	ldr	r0, [pc, #604]	; (800f93c <_svfprintf_r+0x111c>)
 800f6e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	3108      	adds	r1, #8
 800f6e6:	6038      	str	r0, [r7, #0]
 800f6e8:	2c10      	cmp	r4, #16
 800f6ea:	dce5      	bgt.n	800f6b8 <_svfprintf_r+0xe98>
 800f6ec:	607c      	str	r4, [r7, #4]
 800f6ee:	18a4      	adds	r4, r4, r2
 800f6f0:	942e      	str	r4, [sp, #184]	; 0xb8
 800f6f2:	000f      	movs	r7, r1
 800f6f4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f6f6:	2b07      	cmp	r3, #7
 800f6f8:	ddc0      	ble.n	800f67c <_svfprintf_r+0xe5c>
 800f6fa:	e05f      	b.n	800f7bc <_svfprintf_r+0xf9c>
 800f6fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	dc78      	bgt.n	800f7f4 <_svfprintf_r+0xfd4>
 800f702:	4b8d      	ldr	r3, [pc, #564]	; (800f938 <_svfprintf_r+0x1118>)
 800f704:	603b      	str	r3, [r7, #0]
 800f706:	2301      	movs	r3, #1
 800f708:	607b      	str	r3, [r7, #4]
 800f70a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f70c:	3708      	adds	r7, #8
 800f70e:	3301      	adds	r3, #1
 800f710:	932e      	str	r3, [sp, #184]	; 0xb8
 800f712:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f714:	3301      	adds	r3, #1
 800f716:	932d      	str	r3, [sp, #180]	; 0xb4
 800f718:	2b07      	cmp	r3, #7
 800f71a:	dd08      	ble.n	800f72e <_svfprintf_r+0xf0e>
 800f71c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f71e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f720:	aa2c      	add	r2, sp, #176	; 0xb0
 800f722:	f003 f90d 	bl	8012940 <__ssprint_r>
 800f726:	2800      	cmp	r0, #0
 800f728:	d000      	beq.n	800f72c <_svfprintf_r+0xf0c>
 800f72a:	e258      	b.n	800fbde <_svfprintf_r+0x13be>
 800f72c:	af2f      	add	r7, sp, #188	; 0xbc
 800f72e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f730:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f732:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f734:	430b      	orrs	r3, r1
 800f736:	2101      	movs	r1, #1
 800f738:	4031      	ands	r1, r6
 800f73a:	430b      	orrs	r3, r1
 800f73c:	d09e      	beq.n	800f67c <_svfprintf_r+0xe5c>
 800f73e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f740:	603b      	str	r3, [r7, #0]
 800f742:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f744:	607b      	str	r3, [r7, #4]
 800f746:	189a      	adds	r2, r3, r2
 800f748:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f74a:	922e      	str	r2, [sp, #184]	; 0xb8
 800f74c:	3301      	adds	r3, #1
 800f74e:	932d      	str	r3, [sp, #180]	; 0xb4
 800f750:	3708      	adds	r7, #8
 800f752:	2b07      	cmp	r3, #7
 800f754:	dd08      	ble.n	800f768 <_svfprintf_r+0xf48>
 800f756:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f758:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f75a:	aa2c      	add	r2, sp, #176	; 0xb0
 800f75c:	f003 f8f0 	bl	8012940 <__ssprint_r>
 800f760:	2800      	cmp	r0, #0
 800f762:	d000      	beq.n	800f766 <_svfprintf_r+0xf46>
 800f764:	e23b      	b.n	800fbde <_svfprintf_r+0x13be>
 800f766:	af2f      	add	r7, sp, #188	; 0xbc
 800f768:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f76a:	2c00      	cmp	r4, #0
 800f76c:	da19      	bge.n	800f7a2 <_svfprintf_r+0xf82>
 800f76e:	0038      	movs	r0, r7
 800f770:	2510      	movs	r5, #16
 800f772:	4264      	negs	r4, r4
 800f774:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800f776:	4a71      	ldr	r2, [pc, #452]	; (800f93c <_svfprintf_r+0x111c>)
 800f778:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f77a:	3101      	adds	r1, #1
 800f77c:	3708      	adds	r7, #8
 800f77e:	6002      	str	r2, [r0, #0]
 800f780:	2c10      	cmp	r4, #16
 800f782:	dc25      	bgt.n	800f7d0 <_svfprintf_r+0xfb0>
 800f784:	6044      	str	r4, [r0, #4]
 800f786:	18e4      	adds	r4, r4, r3
 800f788:	942e      	str	r4, [sp, #184]	; 0xb8
 800f78a:	912d      	str	r1, [sp, #180]	; 0xb4
 800f78c:	2907      	cmp	r1, #7
 800f78e:	dd08      	ble.n	800f7a2 <_svfprintf_r+0xf82>
 800f790:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f792:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f794:	aa2c      	add	r2, sp, #176	; 0xb0
 800f796:	f003 f8d3 	bl	8012940 <__ssprint_r>
 800f79a:	2800      	cmp	r0, #0
 800f79c:	d000      	beq.n	800f7a0 <_svfprintf_r+0xf80>
 800f79e:	e21e      	b.n	800fbde <_svfprintf_r+0x13be>
 800f7a0:	af2f      	add	r7, sp, #188	; 0xbc
 800f7a2:	9b08      	ldr	r3, [sp, #32]
 800f7a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f7a6:	603b      	str	r3, [r7, #0]
 800f7a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7aa:	18d2      	adds	r2, r2, r3
 800f7ac:	922e      	str	r2, [sp, #184]	; 0xb8
 800f7ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	3201      	adds	r2, #1
 800f7b4:	922d      	str	r2, [sp, #180]	; 0xb4
 800f7b6:	2a07      	cmp	r2, #7
 800f7b8:	dc00      	bgt.n	800f7bc <_svfprintf_r+0xf9c>
 800f7ba:	e45b      	b.n	800f074 <_svfprintf_r+0x854>
 800f7bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7c0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7c2:	f003 f8bd 	bl	8012940 <__ssprint_r>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d000      	beq.n	800f7cc <_svfprintf_r+0xfac>
 800f7ca:	e208      	b.n	800fbde <_svfprintf_r+0x13be>
 800f7cc:	af2f      	add	r7, sp, #188	; 0xbc
 800f7ce:	e755      	b.n	800f67c <_svfprintf_r+0xe5c>
 800f7d0:	3310      	adds	r3, #16
 800f7d2:	6045      	str	r5, [r0, #4]
 800f7d4:	932e      	str	r3, [sp, #184]	; 0xb8
 800f7d6:	912d      	str	r1, [sp, #180]	; 0xb4
 800f7d8:	2907      	cmp	r1, #7
 800f7da:	dd08      	ble.n	800f7ee <_svfprintf_r+0xfce>
 800f7dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f7de:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f7e0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f7e2:	f003 f8ad 	bl	8012940 <__ssprint_r>
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	d000      	beq.n	800f7ec <_svfprintf_r+0xfcc>
 800f7ea:	e1f8      	b.n	800fbde <_svfprintf_r+0x13be>
 800f7ec:	af2f      	add	r7, sp, #188	; 0xbc
 800f7ee:	0038      	movs	r0, r7
 800f7f0:	3c10      	subs	r4, #16
 800f7f2:	e7bf      	b.n	800f774 <_svfprintf_r+0xf54>
 800f7f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7f6:	002c      	movs	r4, r5
 800f7f8:	429d      	cmp	r5, r3
 800f7fa:	dd00      	ble.n	800f7fe <_svfprintf_r+0xfde>
 800f7fc:	001c      	movs	r4, r3
 800f7fe:	2c00      	cmp	r4, #0
 800f800:	dd14      	ble.n	800f82c <_svfprintf_r+0x100c>
 800f802:	9b08      	ldr	r3, [sp, #32]
 800f804:	607c      	str	r4, [r7, #4]
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f80a:	3708      	adds	r7, #8
 800f80c:	18e3      	adds	r3, r4, r3
 800f80e:	932e      	str	r3, [sp, #184]	; 0xb8
 800f810:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f812:	3301      	adds	r3, #1
 800f814:	932d      	str	r3, [sp, #180]	; 0xb4
 800f816:	2b07      	cmp	r3, #7
 800f818:	dd08      	ble.n	800f82c <_svfprintf_r+0x100c>
 800f81a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f81c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f81e:	aa2c      	add	r2, sp, #176	; 0xb0
 800f820:	f003 f88e 	bl	8012940 <__ssprint_r>
 800f824:	2800      	cmp	r0, #0
 800f826:	d000      	beq.n	800f82a <_svfprintf_r+0x100a>
 800f828:	e1d9      	b.n	800fbde <_svfprintf_r+0x13be>
 800f82a:	af2f      	add	r7, sp, #188	; 0xbc
 800f82c:	43e3      	mvns	r3, r4
 800f82e:	17db      	asrs	r3, r3, #31
 800f830:	401c      	ands	r4, r3
 800f832:	1b2c      	subs	r4, r5, r4
 800f834:	2c00      	cmp	r4, #0
 800f836:	dd18      	ble.n	800f86a <_svfprintf_r+0x104a>
 800f838:	0039      	movs	r1, r7
 800f83a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f83c:	483f      	ldr	r0, [pc, #252]	; (800f93c <_svfprintf_r+0x111c>)
 800f83e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f840:	3301      	adds	r3, #1
 800f842:	3108      	adds	r1, #8
 800f844:	6038      	str	r0, [r7, #0]
 800f846:	2c10      	cmp	r4, #16
 800f848:	dc7a      	bgt.n	800f940 <_svfprintf_r+0x1120>
 800f84a:	607c      	str	r4, [r7, #4]
 800f84c:	18a4      	adds	r4, r4, r2
 800f84e:	000f      	movs	r7, r1
 800f850:	942e      	str	r4, [sp, #184]	; 0xb8
 800f852:	932d      	str	r3, [sp, #180]	; 0xb4
 800f854:	2b07      	cmp	r3, #7
 800f856:	dd08      	ble.n	800f86a <_svfprintf_r+0x104a>
 800f858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f85a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f85c:	aa2c      	add	r2, sp, #176	; 0xb0
 800f85e:	f003 f86f 	bl	8012940 <__ssprint_r>
 800f862:	2800      	cmp	r0, #0
 800f864:	d000      	beq.n	800f868 <_svfprintf_r+0x1048>
 800f866:	e1ba      	b.n	800fbde <_svfprintf_r+0x13be>
 800f868:	af2f      	add	r7, sp, #188	; 0xbc
 800f86a:	9b08      	ldr	r3, [sp, #32]
 800f86c:	195d      	adds	r5, r3, r5
 800f86e:	0573      	lsls	r3, r6, #21
 800f870:	d50b      	bpl.n	800f88a <_svfprintf_r+0x106a>
 800f872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f874:	2b00      	cmp	r3, #0
 800f876:	d176      	bne.n	800f966 <_svfprintf_r+0x1146>
 800f878:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d176      	bne.n	800f96c <_svfprintf_r+0x114c>
 800f87e:	9b08      	ldr	r3, [sp, #32]
 800f880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f882:	189b      	adds	r3, r3, r2
 800f884:	429d      	cmp	r5, r3
 800f886:	d900      	bls.n	800f88a <_svfprintf_r+0x106a>
 800f888:	001d      	movs	r5, r3
 800f88a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f88c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f88e:	4293      	cmp	r3, r2
 800f890:	db01      	blt.n	800f896 <_svfprintf_r+0x1076>
 800f892:	07f3      	lsls	r3, r6, #31
 800f894:	d516      	bpl.n	800f8c4 <_svfprintf_r+0x10a4>
 800f896:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f898:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f89a:	603b      	str	r3, [r7, #0]
 800f89c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f89e:	607b      	str	r3, [r7, #4]
 800f8a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	189b      	adds	r3, r3, r2
 800f8a6:	932e      	str	r3, [sp, #184]	; 0xb8
 800f8a8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8ae:	2b07      	cmp	r3, #7
 800f8b0:	dd08      	ble.n	800f8c4 <_svfprintf_r+0x10a4>
 800f8b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8b6:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8b8:	f003 f842 	bl	8012940 <__ssprint_r>
 800f8bc:	2800      	cmp	r0, #0
 800f8be:	d000      	beq.n	800f8c2 <_svfprintf_r+0x10a2>
 800f8c0:	e18d      	b.n	800fbde <_svfprintf_r+0x13be>
 800f8c2:	af2f      	add	r7, sp, #188	; 0xbc
 800f8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f8c6:	9b08      	ldr	r3, [sp, #32]
 800f8c8:	4694      	mov	ip, r2
 800f8ca:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800f8cc:	4463      	add	r3, ip
 800f8ce:	1b5b      	subs	r3, r3, r5
 800f8d0:	1b14      	subs	r4, r2, r4
 800f8d2:	429c      	cmp	r4, r3
 800f8d4:	dd00      	ble.n	800f8d8 <_svfprintf_r+0x10b8>
 800f8d6:	001c      	movs	r4, r3
 800f8d8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f8da:	2c00      	cmp	r4, #0
 800f8dc:	dd12      	ble.n	800f904 <_svfprintf_r+0x10e4>
 800f8de:	18e3      	adds	r3, r4, r3
 800f8e0:	932e      	str	r3, [sp, #184]	; 0xb8
 800f8e2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f8e4:	603d      	str	r5, [r7, #0]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	607c      	str	r4, [r7, #4]
 800f8ea:	932d      	str	r3, [sp, #180]	; 0xb4
 800f8ec:	3708      	adds	r7, #8
 800f8ee:	2b07      	cmp	r3, #7
 800f8f0:	dd08      	ble.n	800f904 <_svfprintf_r+0x10e4>
 800f8f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f8f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f8f6:	aa2c      	add	r2, sp, #176	; 0xb0
 800f8f8:	f003 f822 	bl	8012940 <__ssprint_r>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	d000      	beq.n	800f902 <_svfprintf_r+0x10e2>
 800f900:	e16d      	b.n	800fbde <_svfprintf_r+0x13be>
 800f902:	af2f      	add	r7, sp, #188	; 0xbc
 800f904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f906:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f908:	2510      	movs	r5, #16
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	43e2      	mvns	r2, r4
 800f90e:	17d2      	asrs	r2, r2, #31
 800f910:	4014      	ands	r4, r2
 800f912:	1b1c      	subs	r4, r3, r4
 800f914:	2c00      	cmp	r4, #0
 800f916:	dc00      	bgt.n	800f91a <_svfprintf_r+0x10fa>
 800f918:	e6b0      	b.n	800f67c <_svfprintf_r+0xe5c>
 800f91a:	0039      	movs	r1, r7
 800f91c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f91e:	4807      	ldr	r0, [pc, #28]	; (800f93c <_svfprintf_r+0x111c>)
 800f920:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f922:	3301      	adds	r3, #1
 800f924:	3108      	adds	r1, #8
 800f926:	6038      	str	r0, [r7, #0]
 800f928:	2c10      	cmp	r4, #16
 800f92a:	dd00      	ble.n	800f92e <_svfprintf_r+0x110e>
 800f92c:	e096      	b.n	800fa5c <_svfprintf_r+0x123c>
 800f92e:	1912      	adds	r2, r2, r4
 800f930:	607c      	str	r4, [r7, #4]
 800f932:	922e      	str	r2, [sp, #184]	; 0xb8
 800f934:	e6dd      	b.n	800f6f2 <_svfprintf_r+0xed2>
 800f936:	46c0      	nop			; (mov r8, r8)
 800f938:	08015e1e 	.word	0x08015e1e
 800f93c:	08015e30 	.word	0x08015e30
 800f940:	2010      	movs	r0, #16
 800f942:	1812      	adds	r2, r2, r0
 800f944:	6078      	str	r0, [r7, #4]
 800f946:	922e      	str	r2, [sp, #184]	; 0xb8
 800f948:	932d      	str	r3, [sp, #180]	; 0xb4
 800f94a:	2b07      	cmp	r3, #7
 800f94c:	dd08      	ble.n	800f960 <_svfprintf_r+0x1140>
 800f94e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f950:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f952:	aa2c      	add	r2, sp, #176	; 0xb0
 800f954:	f002 fff4 	bl	8012940 <__ssprint_r>
 800f958:	2800      	cmp	r0, #0
 800f95a:	d000      	beq.n	800f95e <_svfprintf_r+0x113e>
 800f95c:	e13f      	b.n	800fbde <_svfprintf_r+0x13be>
 800f95e:	a92f      	add	r1, sp, #188	; 0xbc
 800f960:	000f      	movs	r7, r1
 800f962:	3c10      	subs	r4, #16
 800f964:	e768      	b.n	800f838 <_svfprintf_r+0x1018>
 800f966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d05d      	beq.n	800fa28 <_svfprintf_r+0x1208>
 800f96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f96e:	3b01      	subs	r3, #1
 800f970:	9310      	str	r3, [sp, #64]	; 0x40
 800f972:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f974:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f976:	603b      	str	r3, [r7, #0]
 800f978:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f97a:	607b      	str	r3, [r7, #4]
 800f97c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f97e:	3708      	adds	r7, #8
 800f980:	189b      	adds	r3, r3, r2
 800f982:	932e      	str	r3, [sp, #184]	; 0xb8
 800f984:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f986:	3301      	adds	r3, #1
 800f988:	932d      	str	r3, [sp, #180]	; 0xb4
 800f98a:	2b07      	cmp	r3, #7
 800f98c:	dd08      	ble.n	800f9a0 <_svfprintf_r+0x1180>
 800f98e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f990:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f992:	aa2c      	add	r2, sp, #176	; 0xb0
 800f994:	f002 ffd4 	bl	8012940 <__ssprint_r>
 800f998:	2800      	cmp	r0, #0
 800f99a:	d000      	beq.n	800f99e <_svfprintf_r+0x117e>
 800f99c:	e11f      	b.n	800fbde <_svfprintf_r+0x13be>
 800f99e:	af2f      	add	r7, sp, #188	; 0xbc
 800f9a0:	9b08      	ldr	r3, [sp, #32]
 800f9a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9a4:	189c      	adds	r4, r3, r2
 800f9a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f9a8:	1b64      	subs	r4, r4, r5
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	429c      	cmp	r4, r3
 800f9ae:	dd00      	ble.n	800f9b2 <_svfprintf_r+0x1192>
 800f9b0:	001c      	movs	r4, r3
 800f9b2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800f9b4:	2c00      	cmp	r4, #0
 800f9b6:	dd12      	ble.n	800f9de <_svfprintf_r+0x11be>
 800f9b8:	18e3      	adds	r3, r4, r3
 800f9ba:	932e      	str	r3, [sp, #184]	; 0xb8
 800f9bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9be:	603d      	str	r5, [r7, #0]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	607c      	str	r4, [r7, #4]
 800f9c4:	932d      	str	r3, [sp, #180]	; 0xb4
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	2b07      	cmp	r3, #7
 800f9ca:	dd08      	ble.n	800f9de <_svfprintf_r+0x11be>
 800f9cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f9d0:	aa2c      	add	r2, sp, #176	; 0xb0
 800f9d2:	f002 ffb5 	bl	8012940 <__ssprint_r>
 800f9d6:	2800      	cmp	r0, #0
 800f9d8:	d000      	beq.n	800f9dc <_svfprintf_r+0x11bc>
 800f9da:	e100      	b.n	800fbde <_svfprintf_r+0x13be>
 800f9dc:	af2f      	add	r7, sp, #188	; 0xbc
 800f9de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f9e0:	781a      	ldrb	r2, [r3, #0]
 800f9e2:	43e3      	mvns	r3, r4
 800f9e4:	17db      	asrs	r3, r3, #31
 800f9e6:	401c      	ands	r4, r3
 800f9e8:	1b14      	subs	r4, r2, r4
 800f9ea:	2c00      	cmp	r4, #0
 800f9ec:	dd18      	ble.n	800fa20 <_svfprintf_r+0x1200>
 800f9ee:	0039      	movs	r1, r7
 800f9f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f9f2:	48aa      	ldr	r0, [pc, #680]	; (800fc9c <_svfprintf_r+0x147c>)
 800f9f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	3108      	adds	r1, #8
 800f9fa:	6038      	str	r0, [r7, #0]
 800f9fc:	2c10      	cmp	r4, #16
 800f9fe:	dc1a      	bgt.n	800fa36 <_svfprintf_r+0x1216>
 800fa00:	1912      	adds	r2, r2, r4
 800fa02:	607c      	str	r4, [r7, #4]
 800fa04:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa06:	000f      	movs	r7, r1
 800fa08:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa0a:	2b07      	cmp	r3, #7
 800fa0c:	dd08      	ble.n	800fa20 <_svfprintf_r+0x1200>
 800fa0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa10:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa12:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa14:	f002 ff94 	bl	8012940 <__ssprint_r>
 800fa18:	2800      	cmp	r0, #0
 800fa1a:	d000      	beq.n	800fa1e <_svfprintf_r+0x11fe>
 800fa1c:	e0df      	b.n	800fbde <_svfprintf_r+0x13be>
 800fa1e:	af2f      	add	r7, sp, #188	; 0xbc
 800fa20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	18ed      	adds	r5, r5, r3
 800fa26:	e724      	b.n	800f872 <_svfprintf_r+0x1052>
 800fa28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fa2a:	3b01      	subs	r3, #1
 800fa2c:	9312      	str	r3, [sp, #72]	; 0x48
 800fa2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa30:	3b01      	subs	r3, #1
 800fa32:	9311      	str	r3, [sp, #68]	; 0x44
 800fa34:	e79d      	b.n	800f972 <_svfprintf_r+0x1152>
 800fa36:	2010      	movs	r0, #16
 800fa38:	1812      	adds	r2, r2, r0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa3e:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa40:	2b07      	cmp	r3, #7
 800fa42:	dd08      	ble.n	800fa56 <_svfprintf_r+0x1236>
 800fa44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa46:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa48:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa4a:	f002 ff79 	bl	8012940 <__ssprint_r>
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d000      	beq.n	800fa54 <_svfprintf_r+0x1234>
 800fa52:	e0c4      	b.n	800fbde <_svfprintf_r+0x13be>
 800fa54:	a92f      	add	r1, sp, #188	; 0xbc
 800fa56:	000f      	movs	r7, r1
 800fa58:	3c10      	subs	r4, #16
 800fa5a:	e7c8      	b.n	800f9ee <_svfprintf_r+0x11ce>
 800fa5c:	3210      	adds	r2, #16
 800fa5e:	607d      	str	r5, [r7, #4]
 800fa60:	922e      	str	r2, [sp, #184]	; 0xb8
 800fa62:	932d      	str	r3, [sp, #180]	; 0xb4
 800fa64:	2b07      	cmp	r3, #7
 800fa66:	dd08      	ble.n	800fa7a <_svfprintf_r+0x125a>
 800fa68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fa6c:	aa2c      	add	r2, sp, #176	; 0xb0
 800fa6e:	f002 ff67 	bl	8012940 <__ssprint_r>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d000      	beq.n	800fa78 <_svfprintf_r+0x1258>
 800fa76:	e0b2      	b.n	800fbde <_svfprintf_r+0x13be>
 800fa78:	a92f      	add	r1, sp, #188	; 0xbc
 800fa7a:	000f      	movs	r7, r1
 800fa7c:	3c10      	subs	r4, #16
 800fa7e:	e74c      	b.n	800f91a <_svfprintf_r+0x10fa>
 800fa80:	003c      	movs	r4, r7
 800fa82:	9919      	ldr	r1, [sp, #100]	; 0x64
 800fa84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fa86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fa88:	3101      	adds	r1, #1
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	3408      	adds	r4, #8
 800fa8e:	2a01      	cmp	r2, #1
 800fa90:	dc03      	bgt.n	800fa9a <_svfprintf_r+0x127a>
 800fa92:	2201      	movs	r2, #1
 800fa94:	4216      	tst	r6, r2
 800fa96:	d100      	bne.n	800fa9a <_svfprintf_r+0x127a>
 800fa98:	e07f      	b.n	800fb9a <_svfprintf_r+0x137a>
 800fa9a:	9a08      	ldr	r2, [sp, #32]
 800fa9c:	912e      	str	r1, [sp, #184]	; 0xb8
 800fa9e:	603a      	str	r2, [r7, #0]
 800faa0:	2201      	movs	r2, #1
 800faa2:	932d      	str	r3, [sp, #180]	; 0xb4
 800faa4:	607a      	str	r2, [r7, #4]
 800faa6:	2b07      	cmp	r3, #7
 800faa8:	dd08      	ble.n	800fabc <_svfprintf_r+0x129c>
 800faaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800faac:	980a      	ldr	r0, [sp, #40]	; 0x28
 800faae:	aa2c      	add	r2, sp, #176	; 0xb0
 800fab0:	f002 ff46 	bl	8012940 <__ssprint_r>
 800fab4:	2800      	cmp	r0, #0
 800fab6:	d000      	beq.n	800faba <_svfprintf_r+0x129a>
 800fab8:	e091      	b.n	800fbde <_svfprintf_r+0x13be>
 800faba:	ac2f      	add	r4, sp, #188	; 0xbc
 800fabc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fabe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fac4:	6063      	str	r3, [r4, #4]
 800fac6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fac8:	3408      	adds	r4, #8
 800faca:	189b      	adds	r3, r3, r2
 800facc:	932e      	str	r3, [sp, #184]	; 0xb8
 800face:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fad0:	3301      	adds	r3, #1
 800fad2:	932d      	str	r3, [sp, #180]	; 0xb4
 800fad4:	2b07      	cmp	r3, #7
 800fad6:	dd07      	ble.n	800fae8 <_svfprintf_r+0x12c8>
 800fad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fada:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fadc:	aa2c      	add	r2, sp, #176	; 0xb0
 800fade:	f002 ff2f 	bl	8012940 <__ssprint_r>
 800fae2:	2800      	cmp	r0, #0
 800fae4:	d17b      	bne.n	800fbde <_svfprintf_r+0x13be>
 800fae6:	ac2f      	add	r4, sp, #188	; 0xbc
 800fae8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800faea:	2200      	movs	r2, #0
 800faec:	9814      	ldr	r0, [sp, #80]	; 0x50
 800faee:	9915      	ldr	r1, [sp, #84]	; 0x54
 800faf0:	9309      	str	r3, [sp, #36]	; 0x24
 800faf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800faf4:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800faf6:	1e5d      	subs	r5, r3, #1
 800faf8:	2300      	movs	r3, #0
 800fafa:	f7f0 fca5 	bl	8000448 <__aeabi_dcmpeq>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d126      	bne.n	800fb50 <_svfprintf_r+0x1330>
 800fb02:	9b08      	ldr	r3, [sp, #32]
 800fb04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb06:	3301      	adds	r3, #1
 800fb08:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb0a:	6023      	str	r3, [r4, #0]
 800fb0c:	1e7b      	subs	r3, r7, #1
 800fb0e:	3201      	adds	r2, #1
 800fb10:	185b      	adds	r3, r3, r1
 800fb12:	6065      	str	r5, [r4, #4]
 800fb14:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb16:	922d      	str	r2, [sp, #180]	; 0xb4
 800fb18:	3408      	adds	r4, #8
 800fb1a:	2a07      	cmp	r2, #7
 800fb1c:	dd07      	ble.n	800fb2e <_svfprintf_r+0x130e>
 800fb1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb20:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb22:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb24:	f002 ff0c 	bl	8012940 <__ssprint_r>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d158      	bne.n	800fbde <_svfprintf_r+0x13be>
 800fb2c:	ac2f      	add	r4, sp, #188	; 0xbc
 800fb2e:	ab28      	add	r3, sp, #160	; 0xa0
 800fb30:	6023      	str	r3, [r4, #0]
 800fb32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800fb34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fb36:	6063      	str	r3, [r4, #4]
 800fb38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fb3a:	189b      	adds	r3, r3, r2
 800fb3c:	932e      	str	r3, [sp, #184]	; 0xb8
 800fb3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb40:	3301      	adds	r3, #1
 800fb42:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb44:	2b07      	cmp	r3, #7
 800fb46:	dd00      	ble.n	800fb4a <_svfprintf_r+0x132a>
 800fb48:	e638      	b.n	800f7bc <_svfprintf_r+0xf9c>
 800fb4a:	3408      	adds	r4, #8
 800fb4c:	0027      	movs	r7, r4
 800fb4e:	e595      	b.n	800f67c <_svfprintf_r+0xe5c>
 800fb50:	2710      	movs	r7, #16
 800fb52:	2d00      	cmp	r5, #0
 800fb54:	ddeb      	ble.n	800fb2e <_svfprintf_r+0x130e>
 800fb56:	0021      	movs	r1, r4
 800fb58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fb5a:	4850      	ldr	r0, [pc, #320]	; (800fc9c <_svfprintf_r+0x147c>)
 800fb5c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fb5e:	3301      	adds	r3, #1
 800fb60:	3108      	adds	r1, #8
 800fb62:	6020      	str	r0, [r4, #0]
 800fb64:	2d10      	cmp	r5, #16
 800fb66:	dc07      	bgt.n	800fb78 <_svfprintf_r+0x1358>
 800fb68:	6065      	str	r5, [r4, #4]
 800fb6a:	000c      	movs	r4, r1
 800fb6c:	18ad      	adds	r5, r5, r2
 800fb6e:	952e      	str	r5, [sp, #184]	; 0xb8
 800fb70:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb72:	2b07      	cmp	r3, #7
 800fb74:	dddb      	ble.n	800fb2e <_svfprintf_r+0x130e>
 800fb76:	e7d2      	b.n	800fb1e <_svfprintf_r+0x12fe>
 800fb78:	3210      	adds	r2, #16
 800fb7a:	6067      	str	r7, [r4, #4]
 800fb7c:	922e      	str	r2, [sp, #184]	; 0xb8
 800fb7e:	932d      	str	r3, [sp, #180]	; 0xb4
 800fb80:	2b07      	cmp	r3, #7
 800fb82:	dd07      	ble.n	800fb94 <_svfprintf_r+0x1374>
 800fb84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb86:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fb88:	aa2c      	add	r2, sp, #176	; 0xb0
 800fb8a:	f002 fed9 	bl	8012940 <__ssprint_r>
 800fb8e:	2800      	cmp	r0, #0
 800fb90:	d125      	bne.n	800fbde <_svfprintf_r+0x13be>
 800fb92:	a92f      	add	r1, sp, #188	; 0xbc
 800fb94:	000c      	movs	r4, r1
 800fb96:	3d10      	subs	r5, #16
 800fb98:	e7dd      	b.n	800fb56 <_svfprintf_r+0x1336>
 800fb9a:	9808      	ldr	r0, [sp, #32]
 800fb9c:	912e      	str	r1, [sp, #184]	; 0xb8
 800fb9e:	c705      	stmia	r7!, {r0, r2}
 800fba0:	932d      	str	r3, [sp, #180]	; 0xb4
 800fba2:	e7e6      	b.n	800fb72 <_svfprintf_r+0x1352>
 800fba4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fba6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800fba8:	2510      	movs	r5, #16
 800fbaa:	1a9c      	subs	r4, r3, r2
 800fbac:	2c00      	cmp	r4, #0
 800fbae:	dc00      	bgt.n	800fbb2 <_svfprintf_r+0x1392>
 800fbb0:	e567      	b.n	800f682 <_svfprintf_r+0xe62>
 800fbb2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800fbb4:	493a      	ldr	r1, [pc, #232]	; (800fca0 <_svfprintf_r+0x1480>)
 800fbb6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800fbb8:	3301      	adds	r3, #1
 800fbba:	6039      	str	r1, [r7, #0]
 800fbbc:	2c10      	cmp	r4, #16
 800fbbe:	dc19      	bgt.n	800fbf4 <_svfprintf_r+0x13d4>
 800fbc0:	607c      	str	r4, [r7, #4]
 800fbc2:	18a4      	adds	r4, r4, r2
 800fbc4:	942e      	str	r4, [sp, #184]	; 0xb8
 800fbc6:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbc8:	2b07      	cmp	r3, #7
 800fbca:	dc00      	bgt.n	800fbce <_svfprintf_r+0x13ae>
 800fbcc:	e559      	b.n	800f682 <_svfprintf_r+0xe62>
 800fbce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fbd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbd2:	aa2c      	add	r2, sp, #176	; 0xb0
 800fbd4:	f002 feb4 	bl	8012940 <__ssprint_r>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d100      	bne.n	800fbde <_svfprintf_r+0x13be>
 800fbdc:	e551      	b.n	800f682 <_svfprintf_r+0xe62>
 800fbde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d101      	bne.n	800fbe8 <_svfprintf_r+0x13c8>
 800fbe4:	f7ff f845 	bl	800ec72 <_svfprintf_r+0x452>
 800fbe8:	0019      	movs	r1, r3
 800fbea:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fbec:	f7fd fd80 	bl	800d6f0 <_free_r>
 800fbf0:	f7ff f83f 	bl	800ec72 <_svfprintf_r+0x452>
 800fbf4:	3210      	adds	r2, #16
 800fbf6:	607d      	str	r5, [r7, #4]
 800fbf8:	922e      	str	r2, [sp, #184]	; 0xb8
 800fbfa:	932d      	str	r3, [sp, #180]	; 0xb4
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	2b07      	cmp	r3, #7
 800fc00:	dd07      	ble.n	800fc12 <_svfprintf_r+0x13f2>
 800fc02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc06:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc08:	f002 fe9a 	bl	8012940 <__ssprint_r>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d1e6      	bne.n	800fbde <_svfprintf_r+0x13be>
 800fc10:	af2f      	add	r7, sp, #188	; 0xbc
 800fc12:	3c10      	subs	r4, #16
 800fc14:	e7cd      	b.n	800fbb2 <_svfprintf_r+0x1392>
 800fc16:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fc18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc1a:	f7fd fd69 	bl	800d6f0 <_free_r>
 800fc1e:	e549      	b.n	800f6b4 <_svfprintf_r+0xe94>
 800fc20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d101      	bne.n	800fc2a <_svfprintf_r+0x140a>
 800fc26:	f7ff f824 	bl	800ec72 <_svfprintf_r+0x452>
 800fc2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fc2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc2e:	aa2c      	add	r2, sp, #176	; 0xb0
 800fc30:	f002 fe86 	bl	8012940 <__ssprint_r>
 800fc34:	f7ff f81d 	bl	800ec72 <_svfprintf_r+0x452>
 800fc38:	0034      	movs	r4, r6
 800fc3a:	2a00      	cmp	r2, #0
 800fc3c:	d101      	bne.n	800fc42 <_svfprintf_r+0x1422>
 800fc3e:	f7fe ff8c 	bl	800eb5a <_svfprintf_r+0x33a>
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d101      	bne.n	800fc4a <_svfprintf_r+0x142a>
 800fc46:	f7ff fc01 	bl	800f44c <_svfprintf_r+0xc2c>
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d100      	bne.n	800fc50 <_svfprintf_r+0x1430>
 800fc4e:	e459      	b.n	800f504 <_svfprintf_r+0xce4>
 800fc50:	2507      	movs	r5, #7
 800fc52:	ab58      	add	r3, sp, #352	; 0x160
 800fc54:	9308      	str	r3, [sp, #32]
 800fc56:	9a08      	ldr	r2, [sp, #32]
 800fc58:	0013      	movs	r3, r2
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	9308      	str	r3, [sp, #32]
 800fc5e:	9b06      	ldr	r3, [sp, #24]
 800fc60:	9908      	ldr	r1, [sp, #32]
 800fc62:	402b      	ands	r3, r5
 800fc64:	3330      	adds	r3, #48	; 0x30
 800fc66:	700b      	strb	r3, [r1, #0]
 800fc68:	9907      	ldr	r1, [sp, #28]
 800fc6a:	074e      	lsls	r6, r1, #29
 800fc6c:	9906      	ldr	r1, [sp, #24]
 800fc6e:	08c8      	lsrs	r0, r1, #3
 800fc70:	9907      	ldr	r1, [sp, #28]
 800fc72:	4306      	orrs	r6, r0
 800fc74:	08c9      	lsrs	r1, r1, #3
 800fc76:	9107      	str	r1, [sp, #28]
 800fc78:	0031      	movs	r1, r6
 800fc7a:	9807      	ldr	r0, [sp, #28]
 800fc7c:	9606      	str	r6, [sp, #24]
 800fc7e:	4301      	orrs	r1, r0
 800fc80:	d1e9      	bne.n	800fc56 <_svfprintf_r+0x1436>
 800fc82:	07e1      	lsls	r1, r4, #31
 800fc84:	d400      	bmi.n	800fc88 <_svfprintf_r+0x1468>
 800fc86:	e42a      	b.n	800f4de <_svfprintf_r+0xcbe>
 800fc88:	2b30      	cmp	r3, #48	; 0x30
 800fc8a:	d100      	bne.n	800fc8e <_svfprintf_r+0x146e>
 800fc8c:	e427      	b.n	800f4de <_svfprintf_r+0xcbe>
 800fc8e:	2130      	movs	r1, #48	; 0x30
 800fc90:	9b08      	ldr	r3, [sp, #32]
 800fc92:	3b01      	subs	r3, #1
 800fc94:	7019      	strb	r1, [r3, #0]
 800fc96:	1e93      	subs	r3, r2, #2
 800fc98:	9308      	str	r3, [sp, #32]
 800fc9a:	e420      	b.n	800f4de <_svfprintf_r+0xcbe>
 800fc9c:	08015e30 	.word	0x08015e30
 800fca0:	08015e20 	.word	0x08015e20

0800fca4 <__ssvfscanf_r>:
 800fca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca6:	4ca7      	ldr	r4, [pc, #668]	; (800ff44 <__ssvfscanf_r+0x2a0>)
 800fca8:	44a5      	add	sp, r4
 800fcaa:	af02      	add	r7, sp, #8
 800fcac:	633b      	str	r3, [r7, #48]	; 0x30
 800fcae:	000b      	movs	r3, r1
 800fcb0:	6378      	str	r0, [r7, #52]	; 0x34
 800fcb2:	6479      	str	r1, [r7, #68]	; 0x44
 800fcb4:	61ba      	str	r2, [r7, #24]
 800fcb6:	220c      	movs	r2, #12
 800fcb8:	5e9a      	ldrsh	r2, [r3, r2]
 800fcba:	2380      	movs	r3, #128	; 0x80
 800fcbc:	019b      	lsls	r3, r3, #6
 800fcbe:	421a      	tst	r2, r3
 800fcc0:	d105      	bne.n	800fcce <__ssvfscanf_r+0x2a>
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	818b      	strh	r3, [r1, #12]
 800fcc6:	4aa0      	ldr	r2, [pc, #640]	; (800ff48 <__ssvfscanf_r+0x2a4>)
 800fcc8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800fcca:	4013      	ands	r3, r2
 800fccc:	664b      	str	r3, [r1, #100]	; 0x64
 800fcce:	2300      	movs	r3, #0
 800fcd0:	617b      	str	r3, [r7, #20]
 800fcd2:	643b      	str	r3, [r7, #64]	; 0x40
 800fcd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcd6:	627b      	str	r3, [r7, #36]	; 0x24
 800fcd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fcda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	69ba      	ldr	r2, [r7, #24]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	3201      	adds	r2, #1
 800fce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fce6:	61ba      	str	r2, [r7, #24]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d100      	bne.n	800fcee <__ssvfscanf_r+0x4a>
 800fcec:	e0d7      	b.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fcee:	2608      	movs	r6, #8
 800fcf0:	2108      	movs	r1, #8
 800fcf2:	4a96      	ldr	r2, [pc, #600]	; (800ff4c <__ssvfscanf_r+0x2a8>)
 800fcf4:	5cd2      	ldrb	r2, [r2, r3]
 800fcf6:	4016      	ands	r6, r2
 800fcf8:	420a      	tst	r2, r1
 800fcfa:	d01d      	beq.n	800fd38 <__ssvfscanf_r+0x94>
 800fcfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	dd12      	ble.n	800fd2a <__ssvfscanf_r+0x86>
 800fd04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd06:	4991      	ldr	r1, [pc, #580]	; (800ff4c <__ssvfscanf_r+0x2a8>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	781a      	ldrb	r2, [r3, #0]
 800fd0c:	5c8a      	ldrb	r2, [r1, r2]
 800fd0e:	2108      	movs	r1, #8
 800fd10:	420a      	tst	r2, r1
 800fd12:	d0e3      	beq.n	800fcdc <__ssvfscanf_r+0x38>
 800fd14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd18:	3201      	adds	r2, #1
 800fd1a:	63ba      	str	r2, [r7, #56]	; 0x38
 800fd1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd1e:	3301      	adds	r3, #1
 800fd20:	6852      	ldr	r2, [r2, #4]
 800fd22:	600b      	str	r3, [r1, #0]
 800fd24:	3a01      	subs	r2, #1
 800fd26:	604a      	str	r2, [r1, #4]
 800fd28:	e7e8      	b.n	800fcfc <__ssvfscanf_r+0x58>
 800fd2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fd2e:	f002 fec7 	bl	8012ac0 <__ssrefill_r>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d0e6      	beq.n	800fd04 <__ssvfscanf_r+0x60>
 800fd36:	e7d1      	b.n	800fcdc <__ssvfscanf_r+0x38>
 800fd38:	2b25      	cmp	r3, #37	; 0x25
 800fd3a:	d165      	bne.n	800fe08 <__ssvfscanf_r+0x164>
 800fd3c:	250a      	movs	r5, #10
 800fd3e:	2480      	movs	r4, #128	; 0x80
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	63fe      	str	r6, [r7, #60]	; 0x3c
 800fd44:	3b16      	subs	r3, #22
 800fd46:	69b9      	ldr	r1, [r7, #24]
 800fd48:	3101      	adds	r1, #1
 800fd4a:	61b9      	str	r1, [r7, #24]
 800fd4c:	7811      	ldrb	r1, [r2, #0]
 800fd4e:	0008      	movs	r0, r1
 800fd50:	3825      	subs	r0, #37	; 0x25
 800fd52:	2855      	cmp	r0, #85	; 0x55
 800fd54:	d900      	bls.n	800fd58 <__ssvfscanf_r+0xb4>
 800fd56:	e170      	b.n	801003a <__ssvfscanf_r+0x396>
 800fd58:	f7f0 f9e6 	bl	8000128 <__gnu_thumb1_case_uhi>
 800fd5c:	016f0056 	.word	0x016f0056
 800fd60:	016f016f 	.word	0x016f016f
 800fd64:	0081016f 	.word	0x0081016f
 800fd68:	016f016f 	.word	0x016f016f
 800fd6c:	016f016f 	.word	0x016f016f
 800fd70:	00b8016f 	.word	0x00b8016f
 800fd74:	00b800b8 	.word	0x00b800b8
 800fd78:	00b800b8 	.word	0x00b800b8
 800fd7c:	00b800b8 	.word	0x00b800b8
 800fd80:	00b800b8 	.word	0x00b800b8
 800fd84:	016f00b8 	.word	0x016f00b8
 800fd88:	016f016f 	.word	0x016f016f
 800fd8c:	016f016f 	.word	0x016f016f
 800fd90:	016f016f 	.word	0x016f016f
 800fd94:	016f00d8 	.word	0x016f00d8
 800fd98:	00c1010a 	.word	0x00c1010a
 800fd9c:	00d800d8 	.word	0x00d800d8
 800fda0:	016f00d8 	.word	0x016f00d8
 800fda4:	016f016f 	.word	0x016f016f
 800fda8:	009f016f 	.word	0x009f016f
 800fdac:	016f016f 	.word	0x016f016f
 800fdb0:	016f00c9 	.word	0x016f00c9
 800fdb4:	016f016f 	.word	0x016f016f
 800fdb8:	016f00f0 	.word	0x016f00f0
 800fdbc:	016f016f 	.word	0x016f016f
 800fdc0:	00d1016f 	.word	0x00d1016f
 800fdc4:	016f016f 	.word	0x016f016f
 800fdc8:	016f00fe 	.word	0x016f00fe
 800fdcc:	016f016f 	.word	0x016f016f
 800fdd0:	016f016f 	.word	0x016f016f
 800fdd4:	016f00d8 	.word	0x016f00d8
 800fdd8:	00c3010c 	.word	0x00c3010c
 800fddc:	00d800d8 	.word	0x00d800d8
 800fde0:	009400d8 	.word	0x009400d8
 800fde4:	009f012f 	.word	0x009f012f
 800fde8:	0088016f 	.word	0x0088016f
 800fdec:	011200a9 	.word	0x011200a9
 800fdf0:	011000cb 	.word	0x011000cb
 800fdf4:	016f016f 	.word	0x016f016f
 800fdf8:	00a600f2 	.word	0x00a600f2
 800fdfc:	016f00cf 	.word	0x016f00cf
 800fe00:	00d1016f 	.word	0x00d1016f
 800fe04:	00a6016f 	.word	0x00a6016f
 800fe08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	dd12      	ble.n	800fe36 <__ssvfscanf_r+0x192>
 800fe10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe12:	69ba      	ldr	r2, [r7, #24]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	3a01      	subs	r2, #1
 800fe18:	7819      	ldrb	r1, [r3, #0]
 800fe1a:	7812      	ldrb	r2, [r2, #0]
 800fe1c:	4291      	cmp	r1, r2
 800fe1e:	d13e      	bne.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fe20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe24:	6852      	ldr	r2, [r2, #4]
 800fe26:	3301      	adds	r3, #1
 800fe28:	600b      	str	r3, [r1, #0]
 800fe2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2c:	3a01      	subs	r2, #1
 800fe2e:	604a      	str	r2, [r1, #4]
 800fe30:	3301      	adds	r3, #1
 800fe32:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe34:	e752      	b.n	800fcdc <__ssvfscanf_r+0x38>
 800fe36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fe38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe3a:	f002 fe41 	bl	8012ac0 <__ssrefill_r>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d0e6      	beq.n	800fe10 <__ssvfscanf_r+0x16c>
 800fe42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d003      	beq.n	800fe50 <__ssvfscanf_r+0x1ac>
 800fe48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe4a:	899b      	ldrh	r3, [r3, #12]
 800fe4c:	065b      	lsls	r3, r3, #25
 800fe4e:	d526      	bpl.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fe50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d000      	beq.n	800fe58 <__ssvfscanf_r+0x1b4>
 800fe56:	e0f6      	b.n	8010046 <__ssvfscanf_r+0x3a2>
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe5c:	e104      	b.n	8010068 <__ssvfscanf_r+0x3c4>
 800fe5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe60:	4332      	orrs	r2, r6
 800fe62:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fe64:	d11b      	bne.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fe66:	2610      	movs	r6, #16
 800fe68:	69ba      	ldr	r2, [r7, #24]
 800fe6a:	e76c      	b.n	800fd46 <__ssvfscanf_r+0xa2>
 800fe6c:	421e      	tst	r6, r3
 800fe6e:	d116      	bne.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fe70:	7851      	ldrb	r1, [r2, #1]
 800fe72:	296c      	cmp	r1, #108	; 0x6c
 800fe74:	d103      	bne.n	800fe7e <__ssvfscanf_r+0x1da>
 800fe76:	3202      	adds	r2, #2
 800fe78:	61ba      	str	r2, [r7, #24]
 800fe7a:	2202      	movs	r2, #2
 800fe7c:	e000      	b.n	800fe80 <__ssvfscanf_r+0x1dc>
 800fe7e:	2201      	movs	r2, #1
 800fe80:	4316      	orrs	r6, r2
 800fe82:	e7f1      	b.n	800fe68 <__ssvfscanf_r+0x1c4>
 800fe84:	421e      	tst	r6, r3
 800fe86:	d10a      	bne.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fe88:	7851      	ldrb	r1, [r2, #1]
 800fe8a:	2968      	cmp	r1, #104	; 0x68
 800fe8c:	d103      	bne.n	800fe96 <__ssvfscanf_r+0x1f2>
 800fe8e:	3202      	adds	r2, #2
 800fe90:	61ba      	str	r2, [r7, #24]
 800fe92:	2208      	movs	r2, #8
 800fe94:	e7f4      	b.n	800fe80 <__ssvfscanf_r+0x1dc>
 800fe96:	2204      	movs	r2, #4
 800fe98:	e7f2      	b.n	800fe80 <__ssvfscanf_r+0x1dc>
 800fe9a:	421e      	tst	r6, r3
 800fe9c:	d0ed      	beq.n	800fe7a <__ssvfscanf_r+0x1d6>
 800fe9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d000      	beq.n	800fea6 <__ssvfscanf_r+0x202>
 800fea4:	e0da      	b.n	801005c <__ssvfscanf_r+0x3b8>
 800fea6:	e0df      	b.n	8010068 <__ssvfscanf_r+0x3c4>
 800fea8:	421e      	tst	r6, r3
 800feaa:	d0dd      	beq.n	800fe68 <__ssvfscanf_r+0x1c4>
 800feac:	e7f7      	b.n	800fe9e <__ssvfscanf_r+0x1fa>
 800feae:	228f      	movs	r2, #143	; 0x8f
 800feb0:	218f      	movs	r1, #143	; 0x8f
 800feb2:	4032      	ands	r2, r6
 800feb4:	420e      	tst	r6, r1
 800feb6:	d1f2      	bne.n	800fe9e <__ssvfscanf_r+0x1fa>
 800feb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800feba:	2900      	cmp	r1, #0
 800febc:	d104      	bne.n	800fec8 <__ssvfscanf_r+0x224>
 800febe:	b082      	sub	sp, #8
 800fec0:	a902      	add	r1, sp, #8
 800fec2:	6439      	str	r1, [r7, #64]	; 0x40
 800fec4:	600a      	str	r2, [r1, #0]
 800fec6:	604a      	str	r2, [r1, #4]
 800fec8:	4326      	orrs	r6, r4
 800feca:	e7cd      	b.n	800fe68 <__ssvfscanf_r+0x1c4>
 800fecc:	228f      	movs	r2, #143	; 0x8f
 800fece:	4216      	tst	r6, r2
 800fed0:	d1e5      	bne.n	800fe9e <__ssvfscanf_r+0x1fa>
 800fed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fed4:	436a      	muls	r2, r5
 800fed6:	3a30      	subs	r2, #48	; 0x30
 800fed8:	188a      	adds	r2, r1, r2
 800feda:	63fa      	str	r2, [r7, #60]	; 0x3c
 800fedc:	e7c4      	b.n	800fe68 <__ssvfscanf_r+0x1c4>
 800fede:	2301      	movs	r3, #1
 800fee0:	431e      	orrs	r6, r3
 800fee2:	4b1b      	ldr	r3, [pc, #108]	; (800ff50 <__ssvfscanf_r+0x2ac>)
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	230a      	movs	r3, #10
 800fee8:	2403      	movs	r4, #3
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
 800feec:	e00f      	b.n	800ff0e <__ssvfscanf_r+0x26a>
 800feee:	2301      	movs	r3, #1
 800fef0:	431e      	orrs	r6, r3
 800fef2:	4b18      	ldr	r3, [pc, #96]	; (800ff54 <__ssvfscanf_r+0x2b0>)
 800fef4:	617b      	str	r3, [r7, #20]
 800fef6:	2308      	movs	r3, #8
 800fef8:	e7f6      	b.n	800fee8 <__ssvfscanf_r+0x244>
 800fefa:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <__ssvfscanf_r+0x2b0>)
 800fefc:	e7f2      	b.n	800fee4 <__ssvfscanf_r+0x240>
 800fefe:	2380      	movs	r3, #128	; 0x80
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	431e      	orrs	r6, r3
 800ff04:	4b13      	ldr	r3, [pc, #76]	; (800ff54 <__ssvfscanf_r+0x2b0>)
 800ff06:	617b      	str	r3, [r7, #20]
 800ff08:	2310      	movs	r3, #16
 800ff0a:	e7ed      	b.n	800fee8 <__ssvfscanf_r+0x244>
 800ff0c:	2404      	movs	r4, #4
 800ff0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff10:	685b      	ldr	r3, [r3, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	dd55      	ble.n	800ffc2 <__ssvfscanf_r+0x31e>
 800ff16:	0673      	lsls	r3, r6, #25
 800ff18:	d407      	bmi.n	800ff2a <__ssvfscanf_r+0x286>
 800ff1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff1c:	490b      	ldr	r1, [pc, #44]	; (800ff4c <__ssvfscanf_r+0x2a8>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	781a      	ldrb	r2, [r3, #0]
 800ff22:	5c8a      	ldrb	r2, [r1, r2]
 800ff24:	2108      	movs	r1, #8
 800ff26:	420a      	tst	r2, r1
 800ff28:	d152      	bne.n	800ffd0 <__ssvfscanf_r+0x32c>
 800ff2a:	1e60      	subs	r0, r4, #1
 800ff2c:	2803      	cmp	r0, #3
 800ff2e:	d863      	bhi.n	800fff8 <__ssvfscanf_r+0x354>
 800ff30:	f7f0 f8fa 	bl	8000128 <__gnu_thumb1_case_uhi>
 800ff34:	03bd01da 	.word	0x03bd01da
 800ff38:	068a0579 	.word	0x068a0579
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	431e      	orrs	r6, r3
 800ff40:	2402      	movs	r4, #2
 800ff42:	e7e4      	b.n	800ff0e <__ssvfscanf_r+0x26a>
 800ff44:	fffffd34 	.word	0xfffffd34
 800ff48:	ffffdfff 	.word	0xffffdfff
 800ff4c:	08015b19 	.word	0x08015b19
 800ff50:	0800cf41 	.word	0x0800cf41
 800ff54:	0800d065 	.word	0x0800d065
 800ff58:	2248      	movs	r2, #72	; 0x48
 800ff5a:	2318      	movs	r3, #24
 800ff5c:	189b      	adds	r3, r3, r2
 800ff5e:	19d8      	adds	r0, r3, r7
 800ff60:	69b9      	ldr	r1, [r7, #24]
 800ff62:	f001 f9d7 	bl	8011314 <__sccl>
 800ff66:	2340      	movs	r3, #64	; 0x40
 800ff68:	2401      	movs	r4, #1
 800ff6a:	61b8      	str	r0, [r7, #24]
 800ff6c:	431e      	orrs	r6, r3
 800ff6e:	e7ce      	b.n	800ff0e <__ssvfscanf_r+0x26a>
 800ff70:	2301      	movs	r3, #1
 800ff72:	431e      	orrs	r6, r3
 800ff74:	2340      	movs	r3, #64	; 0x40
 800ff76:	2400      	movs	r4, #0
 800ff78:	431e      	orrs	r6, r3
 800ff7a:	e7c8      	b.n	800ff0e <__ssvfscanf_r+0x26a>
 800ff7c:	2388      	movs	r3, #136	; 0x88
 800ff7e:	e7bf      	b.n	800ff00 <__ssvfscanf_r+0x25c>
 800ff80:	06f3      	lsls	r3, r6, #27
 800ff82:	d500      	bpl.n	800ff86 <__ssvfscanf_r+0x2e2>
 800ff84:	e6aa      	b.n	800fcdc <__ssvfscanf_r+0x38>
 800ff86:	2108      	movs	r1, #8
 800ff88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff8a:	cb04      	ldmia	r3!, {r2}
 800ff8c:	420e      	tst	r6, r1
 800ff8e:	d003      	beq.n	800ff98 <__ssvfscanf_r+0x2f4>
 800ff90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff92:	7011      	strb	r1, [r2, #0]
 800ff94:	633b      	str	r3, [r7, #48]	; 0x30
 800ff96:	e6a1      	b.n	800fcdc <__ssvfscanf_r+0x38>
 800ff98:	0771      	lsls	r1, r6, #29
 800ff9a:	d502      	bpl.n	800ffa2 <__ssvfscanf_r+0x2fe>
 800ff9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff9e:	8011      	strh	r1, [r2, #0]
 800ffa0:	e7f8      	b.n	800ff94 <__ssvfscanf_r+0x2f0>
 800ffa2:	07f1      	lsls	r1, r6, #31
 800ffa4:	d502      	bpl.n	800ffac <__ssvfscanf_r+0x308>
 800ffa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffa8:	6011      	str	r1, [r2, #0]
 800ffaa:	e7f3      	b.n	800ff94 <__ssvfscanf_r+0x2f0>
 800ffac:	07b6      	lsls	r6, r6, #30
 800ffae:	d5fa      	bpl.n	800ffa6 <__ssvfscanf_r+0x302>
 800ffb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffb2:	6011      	str	r1, [r2, #0]
 800ffb4:	17c9      	asrs	r1, r1, #31
 800ffb6:	6051      	str	r1, [r2, #4]
 800ffb8:	e7ec      	b.n	800ff94 <__ssvfscanf_r+0x2f0>
 800ffba:	4ba2      	ldr	r3, [pc, #648]	; (8010244 <__ssvfscanf_r+0x5a0>)
 800ffbc:	617b      	str	r3, [r7, #20]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	e792      	b.n	800fee8 <__ssvfscanf_r+0x244>
 800ffc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffc6:	f002 fd7b 	bl	8012ac0 <__ssrefill_r>
 800ffca:	2800      	cmp	r0, #0
 800ffcc:	d0a3      	beq.n	800ff16 <__ssvfscanf_r+0x272>
 800ffce:	e738      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 800ffd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffd4:	3201      	adds	r2, #1
 800ffd6:	63ba      	str	r2, [r7, #56]	; 0x38
 800ffd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffda:	6852      	ldr	r2, [r2, #4]
 800ffdc:	3a01      	subs	r2, #1
 800ffde:	604a      	str	r2, [r1, #4]
 800ffe0:	2a00      	cmp	r2, #0
 800ffe2:	dd02      	ble.n	800ffea <__ssvfscanf_r+0x346>
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	600b      	str	r3, [r1, #0]
 800ffe8:	e797      	b.n	800ff1a <__ssvfscanf_r+0x276>
 800ffea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffee:	f002 fd67 	bl	8012ac0 <__ssrefill_r>
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d091      	beq.n	800ff1a <__ssvfscanf_r+0x276>
 800fff6:	e724      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 800fff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fffa:	2301      	movs	r3, #1
 800fffc:	2a00      	cmp	r2, #0
 800fffe:	d100      	bne.n	8010002 <__ssvfscanf_r+0x35e>
 8010000:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010002:	2210      	movs	r2, #16
 8010004:	0034      	movs	r4, r6
 8010006:	4032      	ands	r2, r6
 8010008:	623a      	str	r2, [r7, #32]
 801000a:	401c      	ands	r4, r3
 801000c:	421e      	tst	r6, r3
 801000e:	d100      	bne.n	8010012 <__ssvfscanf_r+0x36e>
 8010010:	e0f3      	b.n	80101fa <__ssvfscanf_r+0x556>
 8010012:	2a00      	cmp	r2, #0
 8010014:	d000      	beq.n	8010018 <__ssvfscanf_r+0x374>
 8010016:	e0b6      	b.n	8010186 <__ssvfscanf_r+0x4e2>
 8010018:	2080      	movs	r0, #128	; 0x80
 801001a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801001c:	cb10      	ldmia	r3!, {r4}
 801001e:	613b      	str	r3, [r7, #16]
 8010020:	4206      	tst	r6, r0
 8010022:	d100      	bne.n	8010026 <__ssvfscanf_r+0x382>
 8010024:	e0b7      	b.n	8010196 <__ssvfscanf_r+0x4f2>
 8010026:	2c00      	cmp	r4, #0
 8010028:	d007      	beq.n	801003a <__ssvfscanf_r+0x396>
 801002a:	f7fb fe93 	bl	800bd54 <malloc>
 801002e:	6338      	str	r0, [r7, #48]	; 0x30
 8010030:	2800      	cmp	r0, #0
 8010032:	d11f      	bne.n	8010074 <__ssvfscanf_r+0x3d0>
 8010034:	2301      	movs	r3, #1
 8010036:	425b      	negs	r3, r3
 8010038:	62fb      	str	r3, [r7, #44]	; 0x2c
 801003a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801003c:	2b00      	cmp	r3, #0
 801003e:	d013      	beq.n	8010068 <__ssvfscanf_r+0x3c4>
 8010040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010042:	3301      	adds	r3, #1
 8010044:	d10a      	bne.n	801005c <__ssvfscanf_r+0x3b8>
 8010046:	2400      	movs	r4, #0
 8010048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801004a:	681d      	ldr	r5, [r3, #0]
 801004c:	88db      	ldrh	r3, [r3, #6]
 801004e:	42a3      	cmp	r3, r4
 8010050:	dd01      	ble.n	8010056 <__ssvfscanf_r+0x3b2>
 8010052:	f001 f82a 	bl	80110aa <__ssvfscanf_r+0x1406>
 8010056:	2301      	movs	r3, #1
 8010058:	425b      	negs	r3, r3
 801005a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801005c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801005e:	6818      	ldr	r0, [r3, #0]
 8010060:	2800      	cmp	r0, #0
 8010062:	d001      	beq.n	8010068 <__ssvfscanf_r+0x3c4>
 8010064:	f7fb fe80 	bl	800bd68 <free>
 8010068:	46bd      	mov	sp, r7
 801006a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801006c:	23b1      	movs	r3, #177	; 0xb1
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	449d      	add	sp, r3
 8010072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801007a:	88de      	ldrh	r6, [r3, #6]
 801007c:	889d      	ldrh	r5, [r3, #4]
 801007e:	42ae      	cmp	r6, r5
 8010080:	d30e      	bcc.n	80100a0 <__ssvfscanf_r+0x3fc>
 8010082:	4b71      	ldr	r3, [pc, #452]	; (8010248 <__ssvfscanf_r+0x5a4>)
 8010084:	429d      	cmp	r5, r3
 8010086:	d8d5      	bhi.n	8010034 <__ssvfscanf_r+0x390>
 8010088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801008a:	3508      	adds	r5, #8
 801008c:	b2ad      	uxth	r5, r5
 801008e:	6818      	ldr	r0, [r3, #0]
 8010090:	00a9      	lsls	r1, r5, #2
 8010092:	f002 f901 	bl	8012298 <realloc>
 8010096:	2800      	cmp	r0, #0
 8010098:	d0cc      	beq.n	8010034 <__ssvfscanf_r+0x390>
 801009a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801009c:	6018      	str	r0, [r3, #0]
 801009e:	809d      	strh	r5, [r3, #4]
 80100a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100a2:	1c72      	adds	r2, r6, #1
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	00b6      	lsls	r6, r6, #2
 80100a8:	50f4      	str	r4, [r6, r3]
 80100aa:	2320      	movs	r3, #32
 80100ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100ae:	0026      	movs	r6, r4
 80100b0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80100b2:	80ca      	strh	r2, [r1, #6]
 80100b4:	61fb      	str	r3, [r7, #28]
 80100b6:	2500      	movs	r5, #0
 80100b8:	f7fd f9fe 	bl	800d4b8 <__locale_mb_cur_max>
 80100bc:	42a8      	cmp	r0, r5
 80100be:	d100      	bne.n	80100c2 <__ssvfscanf_r+0x41e>
 80100c0:	e6bf      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 80100c2:	1c6a      	adds	r2, r5, #1
 80100c4:	60fa      	str	r2, [r7, #12]
 80100c6:	228c      	movs	r2, #140	; 0x8c
 80100c8:	2048      	movs	r0, #72	; 0x48
 80100ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100cc:	0052      	lsls	r2, r2, #1
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	1812      	adds	r2, r2, r0
 80100d2:	7819      	ldrb	r1, [r3, #0]
 80100d4:	19d2      	adds	r2, r2, r7
 80100d6:	5551      	strb	r1, [r2, r5]
 80100d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80100dc:	6852      	ldr	r2, [r2, #4]
 80100de:	3301      	adds	r3, #1
 80100e0:	600b      	str	r3, [r1, #0]
 80100e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e4:	3a01      	subs	r2, #1
 80100e6:	604a      	str	r2, [r1, #4]
 80100e8:	2b03      	cmp	r3, #3
 80100ea:	d102      	bne.n	80100f2 <__ssvfscanf_r+0x44e>
 80100ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100ee:	2b04      	cmp	r3, #4
 80100f0:	d007      	beq.n	8010102 <__ssvfscanf_r+0x45e>
 80100f2:	2048      	movs	r0, #72	; 0x48
 80100f4:	2310      	movs	r3, #16
 80100f6:	181b      	adds	r3, r3, r0
 80100f8:	2208      	movs	r2, #8
 80100fa:	2100      	movs	r1, #0
 80100fc:	19d8      	adds	r0, r3, r7
 80100fe:	f7fd f94f 	bl	800d3a0 <memset>
 8010102:	2148      	movs	r1, #72	; 0x48
 8010104:	2310      	movs	r3, #16
 8010106:	228c      	movs	r2, #140	; 0x8c
 8010108:	185b      	adds	r3, r3, r1
 801010a:	0052      	lsls	r2, r2, #1
 801010c:	19db      	adds	r3, r3, r7
 801010e:	1852      	adds	r2, r2, r1
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	0021      	movs	r1, r4
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010118:	19d2      	adds	r2, r2, r7
 801011a:	f002 fbd1 	bl	80128c0 <_mbrtowc_r>
 801011e:	0003      	movs	r3, r0
 8010120:	62b8      	str	r0, [r7, #40]	; 0x28
 8010122:	3301      	adds	r3, #1
 8010124:	d100      	bne.n	8010128 <__ssvfscanf_r+0x484>
 8010126:	e68c      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 8010128:	2800      	cmp	r0, #0
 801012a:	d139      	bne.n	80101a0 <__ssvfscanf_r+0x4fc>
 801012c:	6a3b      	ldr	r3, [r7, #32]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d100      	bne.n	8010134 <__ssvfscanf_r+0x490>
 8010132:	6023      	str	r3, [r4, #0]
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	4694      	mov	ip, r2
 801013a:	4463      	add	r3, ip
 801013c:	63bb      	str	r3, [r7, #56]	; 0x38
 801013e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010140:	2b03      	cmp	r3, #3
 8010142:	d102      	bne.n	801014a <__ssvfscanf_r+0x4a6>
 8010144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010146:	2b04      	cmp	r3, #4
 8010148:	d002      	beq.n	8010150 <__ssvfscanf_r+0x4ac>
 801014a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801014c:	3b01      	subs	r3, #1
 801014e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010150:	6a3b      	ldr	r3, [r7, #32]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d115      	bne.n	8010182 <__ssvfscanf_r+0x4de>
 8010156:	2e00      	cmp	r6, #0
 8010158:	d012      	beq.n	8010180 <__ssvfscanf_r+0x4dc>
 801015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015c:	69fa      	ldr	r2, [r7, #28]
 801015e:	1ae5      	subs	r5, r4, r3
 8010160:	10ab      	asrs	r3, r5, #2
 8010162:	4293      	cmp	r3, r2
 8010164:	d30c      	bcc.n	8010180 <__ssvfscanf_r+0x4dc>
 8010166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010168:	00d1      	lsls	r1, r2, #3
 801016a:	f002 f895 	bl	8012298 <realloc>
 801016e:	6338      	str	r0, [r7, #48]	; 0x30
 8010170:	2800      	cmp	r0, #0
 8010172:	d100      	bne.n	8010176 <__ssvfscanf_r+0x4d2>
 8010174:	e75e      	b.n	8010034 <__ssvfscanf_r+0x390>
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	1944      	adds	r4, r0, r5
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	6030      	str	r0, [r6, #0]
 801017e:	61fb      	str	r3, [r7, #28]
 8010180:	3404      	adds	r4, #4
 8010182:	2500      	movs	r5, #0
 8010184:	e010      	b.n	80101a8 <__ssvfscanf_r+0x504>
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	613b      	str	r3, [r7, #16]
 801018a:	2300      	movs	r3, #0
 801018c:	001e      	movs	r6, r3
 801018e:	001c      	movs	r4, r3
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	633b      	str	r3, [r7, #48]	; 0x30
 8010194:	e78f      	b.n	80100b6 <__ssvfscanf_r+0x412>
 8010196:	6a3b      	ldr	r3, [r7, #32]
 8010198:	001e      	movs	r6, r3
 801019a:	61fb      	str	r3, [r7, #28]
 801019c:	633b      	str	r3, [r7, #48]	; 0x30
 801019e:	e78a      	b.n	80100b6 <__ssvfscanf_r+0x412>
 80101a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a2:	68fd      	ldr	r5, [r7, #12]
 80101a4:	3302      	adds	r3, #2
 80101a6:	d1c5      	bne.n	8010134 <__ssvfscanf_r+0x490>
 80101a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	dc12      	bgt.n	80101d6 <__ssvfscanf_r+0x532>
 80101b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80101b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80101b4:	f002 fc84 	bl	8012ac0 <__ssrefill_r>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d00c      	beq.n	80101d6 <__ssvfscanf_r+0x532>
 80101bc:	2d00      	cmp	r5, #0
 80101be:	d000      	beq.n	80101c2 <__ssvfscanf_r+0x51e>
 80101c0:	e63f      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 80101c2:	2e00      	cmp	r6, #0
 80101c4:	d10c      	bne.n	80101e0 <__ssvfscanf_r+0x53c>
 80101c6:	6a3b      	ldr	r3, [r7, #32]
 80101c8:	425a      	negs	r2, r3
 80101ca:	4153      	adcs	r3, r2
 80101cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101ce:	18d3      	adds	r3, r2, r3
 80101d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	e6de      	b.n	800ff94 <__ssvfscanf_r+0x2f0>
 80101d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d000      	beq.n	80101de <__ssvfscanf_r+0x53a>
 80101dc:	e76c      	b.n	80100b8 <__ssvfscanf_r+0x414>
 80101de:	e7f0      	b.n	80101c2 <__ssvfscanf_r+0x51e>
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	69fa      	ldr	r2, [r7, #28]
 80101e4:	1ae1      	subs	r1, r4, r3
 80101e6:	108b      	asrs	r3, r1, #2
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d9ec      	bls.n	80101c6 <__ssvfscanf_r+0x522>
 80101ec:	6830      	ldr	r0, [r6, #0]
 80101ee:	f002 f853 	bl	8012298 <realloc>
 80101f2:	2800      	cmp	r0, #0
 80101f4:	d0e7      	beq.n	80101c6 <__ssvfscanf_r+0x522>
 80101f6:	6030      	str	r0, [r6, #0]
 80101f8:	e7e5      	b.n	80101c6 <__ssvfscanf_r+0x522>
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d025      	beq.n	801024c <__ssvfscanf_r+0x5a8>
 8010200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010208:	6812      	ldr	r2, [r2, #0]
 801020a:	4299      	cmp	r1, r3
 801020c:	dd11      	ble.n	8010232 <__ssvfscanf_r+0x58e>
 801020e:	1ac9      	subs	r1, r1, r3
 8010210:	18d2      	adds	r2, r2, r3
 8010212:	18e4      	adds	r4, r4, r3
 8010214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010216:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010218:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801021a:	0019      	movs	r1, r3
 801021c:	601a      	str	r2, [r3, #0]
 801021e:	f002 fc4f 	bl	8012ac0 <__ssrefill_r>
 8010222:	2800      	cmp	r0, #0
 8010224:	d0ec      	beq.n	8010200 <__ssvfscanf_r+0x55c>
 8010226:	2c00      	cmp	r4, #0
 8010228:	d100      	bne.n	801022c <__ssvfscanf_r+0x588>
 801022a:	e60a      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 801022c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022e:	191b      	adds	r3, r3, r4
 8010230:	e5ff      	b.n	800fe32 <__ssvfscanf_r+0x18e>
 8010232:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010234:	1a5b      	subs	r3, r3, r1
 8010236:	1864      	adds	r4, r4, r1
 8010238:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801023a:	604b      	str	r3, [r1, #4]
 801023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023e:	18d2      	adds	r2, r2, r3
 8010240:	600a      	str	r2, [r1, #0]
 8010242:	e7f3      	b.n	801022c <__ssvfscanf_r+0x588>
 8010244:	0800cf41 	.word	0x0800cf41
 8010248:	0000fff6 	.word	0x0000fff6
 801024c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024e:	0034      	movs	r4, r6
 8010250:	cb20      	ldmia	r3!, {r5}
 8010252:	633b      	str	r3, [r7, #48]	; 0x30
 8010254:	2380      	movs	r3, #128	; 0x80
 8010256:	401c      	ands	r4, r3
 8010258:	421e      	tst	r6, r3
 801025a:	d028      	beq.n	80102ae <__ssvfscanf_r+0x60a>
 801025c:	2d00      	cmp	r5, #0
 801025e:	d100      	bne.n	8010262 <__ssvfscanf_r+0x5be>
 8010260:	e61d      	b.n	800fe9e <__ssvfscanf_r+0x1fa>
 8010262:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010264:	f7fb fd76 	bl	800bd54 <malloc>
 8010268:	6238      	str	r0, [r7, #32]
 801026a:	2800      	cmp	r0, #0
 801026c:	d100      	bne.n	8010270 <__ssvfscanf_r+0x5cc>
 801026e:	e5ef      	b.n	800fe50 <__ssvfscanf_r+0x1ac>
 8010270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010272:	6028      	str	r0, [r5, #0]
 8010274:	88de      	ldrh	r6, [r3, #6]
 8010276:	889c      	ldrh	r4, [r3, #4]
 8010278:	6818      	ldr	r0, [r3, #0]
 801027a:	42a6      	cmp	r6, r4
 801027c:	d30e      	bcc.n	801029c <__ssvfscanf_r+0x5f8>
 801027e:	4bbf      	ldr	r3, [pc, #764]	; (801057c <__ssvfscanf_r+0x8d8>)
 8010280:	429c      	cmp	r4, r3
 8010282:	d900      	bls.n	8010286 <__ssvfscanf_r+0x5e2>
 8010284:	e6df      	b.n	8010046 <__ssvfscanf_r+0x3a2>
 8010286:	3408      	adds	r4, #8
 8010288:	b2a4      	uxth	r4, r4
 801028a:	00a1      	lsls	r1, r4, #2
 801028c:	f002 f804 	bl	8012298 <realloc>
 8010290:	2800      	cmp	r0, #0
 8010292:	d100      	bne.n	8010296 <__ssvfscanf_r+0x5f2>
 8010294:	e6d7      	b.n	8010046 <__ssvfscanf_r+0x3a2>
 8010296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010298:	6018      	str	r0, [r3, #0]
 801029a:	809c      	strh	r4, [r3, #4]
 801029c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801029e:	1c72      	adds	r2, r6, #1
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102a4:	00b6      	lsls	r6, r6, #2
 80102a6:	002c      	movs	r4, r5
 80102a8:	50f5      	str	r5, [r6, r3]
 80102aa:	6a3d      	ldr	r5, [r7, #32]
 80102ac:	80ca      	strh	r2, [r1, #6]
 80102ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102b0:	0029      	movs	r1, r5
 80102b2:	9300      	str	r3, [sp, #0]
 80102b4:	2201      	movs	r2, #1
 80102b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80102ba:	f002 fc20 	bl	8012afe <_sfread_r>
 80102be:	1e05      	subs	r5, r0, #0
 80102c0:	d100      	bne.n	80102c4 <__ssvfscanf_r+0x620>
 80102c2:	e5be      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 80102c4:	2c00      	cmp	r4, #0
 80102c6:	d009      	beq.n	80102dc <__ssvfscanf_r+0x638>
 80102c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ca:	4283      	cmp	r3, r0
 80102cc:	d906      	bls.n	80102dc <__ssvfscanf_r+0x638>
 80102ce:	0001      	movs	r1, r0
 80102d0:	6820      	ldr	r0, [r4, #0]
 80102d2:	f001 ffe1 	bl	8012298 <realloc>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d000      	beq.n	80102dc <__ssvfscanf_r+0x638>
 80102da:	6020      	str	r0, [r4, #0]
 80102dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102de:	195b      	adds	r3, r3, r5
 80102e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80102e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e4:	3301      	adds	r3, #1
 80102e6:	e4f8      	b.n	800fcda <__ssvfscanf_r+0x36>
 80102e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d101      	bne.n	80102f2 <__ssvfscanf_r+0x64e>
 80102ee:	3b01      	subs	r3, #1
 80102f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80102f2:	2210      	movs	r2, #16
 80102f4:	2301      	movs	r3, #1
 80102f6:	0034      	movs	r4, r6
 80102f8:	4032      	ands	r2, r6
 80102fa:	401c      	ands	r4, r3
 80102fc:	623a      	str	r2, [r7, #32]
 80102fe:	421e      	tst	r6, r3
 8010300:	d100      	bne.n	8010304 <__ssvfscanf_r+0x660>
 8010302:	e116      	b.n	8010532 <__ssvfscanf_r+0x88e>
 8010304:	2a00      	cmp	r2, #0
 8010306:	d000      	beq.n	801030a <__ssvfscanf_r+0x666>
 8010308:	e0b0      	b.n	801046c <__ssvfscanf_r+0x7c8>
 801030a:	2080      	movs	r0, #128	; 0x80
 801030c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030e:	cb10      	ldmia	r3!, {r4}
 8010310:	60fb      	str	r3, [r7, #12]
 8010312:	4206      	tst	r6, r0
 8010314:	d100      	bne.n	8010318 <__ssvfscanf_r+0x674>
 8010316:	e0b2      	b.n	801047e <__ssvfscanf_r+0x7da>
 8010318:	2c00      	cmp	r4, #0
 801031a:	d100      	bne.n	801031e <__ssvfscanf_r+0x67a>
 801031c:	e68d      	b.n	801003a <__ssvfscanf_r+0x396>
 801031e:	f7fb fd19 	bl	800bd54 <malloc>
 8010322:	6338      	str	r0, [r7, #48]	; 0x30
 8010324:	2800      	cmp	r0, #0
 8010326:	d100      	bne.n	801032a <__ssvfscanf_r+0x686>
 8010328:	e684      	b.n	8010034 <__ssvfscanf_r+0x390>
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010330:	88de      	ldrh	r6, [r3, #6]
 8010332:	889d      	ldrh	r5, [r3, #4]
 8010334:	42ae      	cmp	r6, r5
 8010336:	d310      	bcc.n	801035a <__ssvfscanf_r+0x6b6>
 8010338:	4b90      	ldr	r3, [pc, #576]	; (801057c <__ssvfscanf_r+0x8d8>)
 801033a:	429d      	cmp	r5, r3
 801033c:	d900      	bls.n	8010340 <__ssvfscanf_r+0x69c>
 801033e:	e679      	b.n	8010034 <__ssvfscanf_r+0x390>
 8010340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010342:	3508      	adds	r5, #8
 8010344:	b2ad      	uxth	r5, r5
 8010346:	6818      	ldr	r0, [r3, #0]
 8010348:	00a9      	lsls	r1, r5, #2
 801034a:	f001 ffa5 	bl	8012298 <realloc>
 801034e:	2800      	cmp	r0, #0
 8010350:	d100      	bne.n	8010354 <__ssvfscanf_r+0x6b0>
 8010352:	e66f      	b.n	8010034 <__ssvfscanf_r+0x390>
 8010354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010356:	6018      	str	r0, [r3, #0]
 8010358:	809d      	strh	r5, [r3, #4]
 801035a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801035c:	1c72      	adds	r2, r6, #1
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	00b6      	lsls	r6, r6, #2
 8010362:	50f4      	str	r4, [r6, r3]
 8010364:	2320      	movs	r3, #32
 8010366:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010368:	0026      	movs	r6, r4
 801036a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801036c:	80ca      	strh	r2, [r1, #6]
 801036e:	613b      	str	r3, [r7, #16]
 8010370:	2500      	movs	r5, #0
 8010372:	f7fd f8a1 	bl	800d4b8 <__locale_mb_cur_max>
 8010376:	42a8      	cmp	r0, r5
 8010378:	d100      	bne.n	801037c <__ssvfscanf_r+0x6d8>
 801037a:	e562      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 801037c:	1c6a      	adds	r2, r5, #1
 801037e:	61fa      	str	r2, [r7, #28]
 8010380:	228c      	movs	r2, #140	; 0x8c
 8010382:	2048      	movs	r0, #72	; 0x48
 8010384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010386:	0052      	lsls	r2, r2, #1
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	1812      	adds	r2, r2, r0
 801038c:	7819      	ldrb	r1, [r3, #0]
 801038e:	19d2      	adds	r2, r2, r7
 8010390:	5551      	strb	r1, [r2, r5]
 8010392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010394:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010396:	6852      	ldr	r2, [r2, #4]
 8010398:	3301      	adds	r3, #1
 801039a:	600b      	str	r3, [r1, #0]
 801039c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801039e:	3a01      	subs	r2, #1
 80103a0:	604a      	str	r2, [r1, #4]
 80103a2:	2b03      	cmp	r3, #3
 80103a4:	d102      	bne.n	80103ac <__ssvfscanf_r+0x708>
 80103a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a8:	2b04      	cmp	r3, #4
 80103aa:	d006      	beq.n	80103ba <__ssvfscanf_r+0x716>
 80103ac:	2048      	movs	r0, #72	; 0x48
 80103ae:	2208      	movs	r2, #8
 80103b0:	1813      	adds	r3, r2, r0
 80103b2:	2100      	movs	r1, #0
 80103b4:	19d8      	adds	r0, r3, r7
 80103b6:	f7fc fff3 	bl	800d3a0 <memset>
 80103ba:	2148      	movs	r1, #72	; 0x48
 80103bc:	2308      	movs	r3, #8
 80103be:	228c      	movs	r2, #140	; 0x8c
 80103c0:	185b      	adds	r3, r3, r1
 80103c2:	0052      	lsls	r2, r2, #1
 80103c4:	19db      	adds	r3, r3, r7
 80103c6:	1852      	adds	r2, r2, r1
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	0021      	movs	r1, r4
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80103d0:	19d2      	adds	r2, r2, r7
 80103d2:	f002 fa75 	bl	80128c0 <_mbrtowc_r>
 80103d6:	0003      	movs	r3, r0
 80103d8:	62b8      	str	r0, [r7, #40]	; 0x28
 80103da:	3301      	adds	r3, #1
 80103dc:	d100      	bne.n	80103e0 <__ssvfscanf_r+0x73c>
 80103de:	e530      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 80103e0:	2800      	cmp	r0, #0
 80103e2:	d151      	bne.n	8010488 <__ssvfscanf_r+0x7e4>
 80103e4:	6020      	str	r0, [r4, #0]
 80103e6:	2301      	movs	r3, #1
 80103e8:	6825      	ldr	r5, [r4, #0]
 80103ea:	425b      	negs	r3, r3
 80103ec:	1c6a      	adds	r2, r5, #1
 80103ee:	d01a      	beq.n	8010426 <__ssvfscanf_r+0x782>
 80103f0:	2048      	movs	r0, #72	; 0x48
 80103f2:	3311      	adds	r3, #17
 80103f4:	181b      	adds	r3, r3, r0
 80103f6:	2208      	movs	r2, #8
 80103f8:	2100      	movs	r1, #0
 80103fa:	19d8      	adds	r0, r3, r7
 80103fc:	f7fc ffd0 	bl	800d3a0 <memset>
 8010400:	4b5f      	ldr	r3, [pc, #380]	; (8010580 <__ssvfscanf_r+0x8dc>)
 8010402:	2148      	movs	r1, #72	; 0x48
 8010404:	33e0      	adds	r3, #224	; 0xe0
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	2310      	movs	r3, #16
 801040a:	4694      	mov	ip, r2
 801040c:	185b      	adds	r3, r3, r1
 801040e:	002a      	movs	r2, r5
 8010410:	19db      	adds	r3, r3, r7
 8010412:	4665      	mov	r5, ip
 8010414:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010416:	1879      	adds	r1, r7, r1
 8010418:	47a8      	blx	r5
 801041a:	2300      	movs	r3, #0
 801041c:	2801      	cmp	r0, #1
 801041e:	d102      	bne.n	8010426 <__ssvfscanf_r+0x782>
 8010420:	3348      	adds	r3, #72	; 0x48
 8010422:	18fb      	adds	r3, r7, r3
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2218      	movs	r2, #24
 8010428:	2148      	movs	r1, #72	; 0x48
 801042a:	1852      	adds	r2, r2, r1
 801042c:	19d2      	adds	r2, r2, r7
 801042e:	5cd3      	ldrb	r3, [r2, r3]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d149      	bne.n	80104c8 <__ssvfscanf_r+0x824>
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d137      	bne.n	80104aa <__ssvfscanf_r+0x806>
 801043a:	6a3b      	ldr	r3, [r7, #32]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d113      	bne.n	8010468 <__ssvfscanf_r+0x7c4>
 8010440:	6023      	str	r3, [r4, #0]
 8010442:	2e00      	cmp	r6, #0
 8010444:	d00d      	beq.n	8010462 <__ssvfscanf_r+0x7be>
 8010446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010448:	693a      	ldr	r2, [r7, #16]
 801044a:	1ae4      	subs	r4, r4, r3
 801044c:	10a3      	asrs	r3, r4, #2
 801044e:	3301      	adds	r3, #1
 8010450:	429a      	cmp	r2, r3
 8010452:	d906      	bls.n	8010462 <__ssvfscanf_r+0x7be>
 8010454:	6830      	ldr	r0, [r6, #0]
 8010456:	1d21      	adds	r1, r4, #4
 8010458:	f001 ff1e 	bl	8012298 <realloc>
 801045c:	2800      	cmp	r0, #0
 801045e:	d000      	beq.n	8010462 <__ssvfscanf_r+0x7be>
 8010460:	6030      	str	r0, [r6, #0]
 8010462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010464:	3301      	adds	r3, #1
 8010466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	e593      	b.n	800ff94 <__ssvfscanf_r+0x2f0>
 801046c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046e:	60fb      	str	r3, [r7, #12]
 8010470:	2300      	movs	r3, #0
 8010472:	001e      	movs	r6, r3
 8010474:	613b      	str	r3, [r7, #16]
 8010476:	633b      	str	r3, [r7, #48]	; 0x30
 8010478:	334c      	adds	r3, #76	; 0x4c
 801047a:	18fc      	adds	r4, r7, r3
 801047c:	e778      	b.n	8010370 <__ssvfscanf_r+0x6cc>
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	001e      	movs	r6, r3
 8010482:	613b      	str	r3, [r7, #16]
 8010484:	633b      	str	r3, [r7, #48]	; 0x30
 8010486:	e773      	b.n	8010370 <__ssvfscanf_r+0x6cc>
 8010488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048a:	69fd      	ldr	r5, [r7, #28]
 801048c:	3302      	adds	r3, #2
 801048e:	d1aa      	bne.n	80103e6 <__ssvfscanf_r+0x742>
 8010490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	dc47      	bgt.n	8010528 <__ssvfscanf_r+0x884>
 8010498:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801049a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801049c:	f002 fb10 	bl	8012ac0 <__ssrefill_r>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d041      	beq.n	8010528 <__ssvfscanf_r+0x884>
 80104a4:	2d00      	cmp	r5, #0
 80104a6:	d0c8      	beq.n	801043a <__ssvfscanf_r+0x796>
 80104a8:	e4cb      	b.n	800fe42 <__ssvfscanf_r+0x19e>
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	2248      	movs	r2, #72	; 0x48
 80104ae:	3b01      	subs	r3, #1
 80104b0:	61fb      	str	r3, [r7, #28]
 80104b2:	238c      	movs	r3, #140	; 0x8c
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	189b      	adds	r3, r3, r2
 80104b8:	69fa      	ldr	r2, [r7, #28]
 80104ba:	19db      	adds	r3, r3, r7
 80104bc:	5cd1      	ldrb	r1, [r2, r3]
 80104be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80104c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80104c2:	f002 fac1 	bl	8012a48 <_sungetc_r>
 80104c6:	e7b5      	b.n	8010434 <__ssvfscanf_r+0x790>
 80104c8:	69fa      	ldr	r2, [r7, #28]
 80104ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104cc:	4694      	mov	ip, r2
 80104ce:	4463      	add	r3, ip
 80104d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80104d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d102      	bne.n	80104de <__ssvfscanf_r+0x83a>
 80104d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104da:	2b04      	cmp	r3, #4
 80104dc:	d002      	beq.n	80104e4 <__ssvfscanf_r+0x840>
 80104de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104e0:	3b01      	subs	r3, #1
 80104e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d11a      	bne.n	8010520 <__ssvfscanf_r+0x87c>
 80104ea:	3404      	adds	r4, #4
 80104ec:	2e00      	cmp	r6, #0
 80104ee:	d019      	beq.n	8010524 <__ssvfscanf_r+0x880>
 80104f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104f2:	693a      	ldr	r2, [r7, #16]
 80104f4:	1ae3      	subs	r3, r4, r3
 80104f6:	61fb      	str	r3, [r7, #28]
 80104f8:	6a3d      	ldr	r5, [r7, #32]
 80104fa:	109b      	asrs	r3, r3, #2
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d3c7      	bcc.n	8010490 <__ssvfscanf_r+0x7ec>
 8010500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010502:	00d1      	lsls	r1, r2, #3
 8010504:	f001 fec8 	bl	8012298 <realloc>
 8010508:	6338      	str	r0, [r7, #48]	; 0x30
 801050a:	2800      	cmp	r0, #0
 801050c:	d100      	bne.n	8010510 <__ssvfscanf_r+0x86c>
 801050e:	e591      	b.n	8010034 <__ssvfscanf_r+0x390>
 8010510:	4684      	mov	ip, r0
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	69fc      	ldr	r4, [r7, #28]
 8010516:	005b      	lsls	r3, r3, #1
 8010518:	4464      	add	r4, ip
 801051a:	6030      	str	r0, [r6, #0]
 801051c:	613b      	str	r3, [r7, #16]
 801051e:	e7b7      	b.n	8010490 <__ssvfscanf_r+0x7ec>
 8010520:	2500      	movs	r5, #0
 8010522:	e7b5      	b.n	8010490 <__ssvfscanf_r+0x7ec>
 8010524:	0035      	movs	r5, r6
 8010526:	e7b3      	b.n	8010490 <__ssvfscanf_r+0x7ec>
 8010528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801052a:	2b00      	cmp	r3, #0
 801052c:	d000      	beq.n	8010530 <__ssvfscanf_r+0x88c>
 801052e:	e720      	b.n	8010372 <__ssvfscanf_r+0x6ce>
 8010530:	e783      	b.n	801043a <__ssvfscanf_r+0x796>
 8010532:	6a3b      	ldr	r3, [r7, #32]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d025      	beq.n	8010584 <__ssvfscanf_r+0x8e0>
 8010538:	2118      	movs	r1, #24
 801053a:	2048      	movs	r0, #72	; 0x48
 801053c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801053e:	1809      	adds	r1, r1, r0
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	19c9      	adds	r1, r1, r7
 8010544:	781a      	ldrb	r2, [r3, #0]
 8010546:	5c8a      	ldrb	r2, [r1, r2]
 8010548:	2a00      	cmp	r2, #0
 801054a:	d103      	bne.n	8010554 <__ssvfscanf_r+0x8b0>
 801054c:	2c00      	cmp	r4, #0
 801054e:	d000      	beq.n	8010552 <__ssvfscanf_r+0x8ae>
 8010550:	e66c      	b.n	801022c <__ssvfscanf_r+0x588>
 8010552:	e4a4      	b.n	800fe9e <__ssvfscanf_r+0x1fa>
 8010554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010558:	6852      	ldr	r2, [r2, #4]
 801055a:	3301      	adds	r3, #1
 801055c:	600b      	str	r3, [r1, #0]
 801055e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010560:	3a01      	subs	r2, #1
 8010562:	3401      	adds	r4, #1
 8010564:	604a      	str	r2, [r1, #4]
 8010566:	429c      	cmp	r4, r3
 8010568:	d100      	bne.n	801056c <__ssvfscanf_r+0x8c8>
 801056a:	e65f      	b.n	801022c <__ssvfscanf_r+0x588>
 801056c:	2a00      	cmp	r2, #0
 801056e:	dce3      	bgt.n	8010538 <__ssvfscanf_r+0x894>
 8010570:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010572:	f002 faa5 	bl	8012ac0 <__ssrefill_r>
 8010576:	2800      	cmp	r0, #0
 8010578:	d0de      	beq.n	8010538 <__ssvfscanf_r+0x894>
 801057a:	e657      	b.n	801022c <__ssvfscanf_r+0x588>
 801057c:	0000fff6 	.word	0x0000fff6
 8010580:	20000444 	.word	0x20000444
 8010584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010586:	0032      	movs	r2, r6
 8010588:	cb20      	ldmia	r3!, {r5}
 801058a:	61fb      	str	r3, [r7, #28]
 801058c:	2380      	movs	r3, #128	; 0x80
 801058e:	401a      	ands	r2, r3
 8010590:	421e      	tst	r6, r3
 8010592:	d100      	bne.n	8010596 <__ssvfscanf_r+0x8f2>
 8010594:	e086      	b.n	80106a4 <__ssvfscanf_r+0xa00>
 8010596:	2d00      	cmp	r5, #0
 8010598:	d100      	bne.n	801059c <__ssvfscanf_r+0x8f8>
 801059a:	e480      	b.n	800fe9e <__ssvfscanf_r+0x1fa>
 801059c:	2020      	movs	r0, #32
 801059e:	f7fb fbd9 	bl	800bd54 <malloc>
 80105a2:	6338      	str	r0, [r7, #48]	; 0x30
 80105a4:	2800      	cmp	r0, #0
 80105a6:	d100      	bne.n	80105aa <__ssvfscanf_r+0x906>
 80105a8:	e452      	b.n	800fe50 <__ssvfscanf_r+0x1ac>
 80105aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ac:	6028      	str	r0, [r5, #0]
 80105ae:	88de      	ldrh	r6, [r3, #6]
 80105b0:	889c      	ldrh	r4, [r3, #4]
 80105b2:	6818      	ldr	r0, [r3, #0]
 80105b4:	42a6      	cmp	r6, r4
 80105b6:	d30e      	bcc.n	80105d6 <__ssvfscanf_r+0x932>
 80105b8:	4bc3      	ldr	r3, [pc, #780]	; (80108c8 <__ssvfscanf_r+0xc24>)
 80105ba:	429c      	cmp	r4, r3
 80105bc:	d900      	bls.n	80105c0 <__ssvfscanf_r+0x91c>
 80105be:	e542      	b.n	8010046 <__ssvfscanf_r+0x3a2>
 80105c0:	3408      	adds	r4, #8
 80105c2:	b2a4      	uxth	r4, r4
 80105c4:	00a1      	lsls	r1, r4, #2
 80105c6:	f001 fe67 	bl	8012298 <realloc>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d100      	bne.n	80105d0 <__ssvfscanf_r+0x92c>
 80105ce:	e53a      	b.n	8010046 <__ssvfscanf_r+0x3a2>
 80105d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d2:	6018      	str	r0, [r3, #0]
 80105d4:	809c      	strh	r4, [r3, #4]
 80105d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105d8:	1c72      	adds	r2, r6, #1
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	00b6      	lsls	r6, r6, #2
 80105de:	50f5      	str	r5, [r6, r3]
 80105e0:	2320      	movs	r3, #32
 80105e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105e4:	002e      	movs	r6, r5
 80105e6:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80105e8:	80ca      	strh	r2, [r1, #6]
 80105ea:	623b      	str	r3, [r7, #32]
 80105ec:	002c      	movs	r4, r5
 80105ee:	2118      	movs	r1, #24
 80105f0:	2048      	movs	r0, #72	; 0x48
 80105f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105f4:	1809      	adds	r1, r1, r0
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	19c9      	adds	r1, r1, r7
 80105fa:	781a      	ldrb	r2, [r3, #0]
 80105fc:	5c8a      	ldrb	r2, [r1, r2]
 80105fe:	2a00      	cmp	r2, #0
 8010600:	d101      	bne.n	8010606 <__ssvfscanf_r+0x962>
 8010602:	633d      	str	r5, [r7, #48]	; 0x30
 8010604:	e031      	b.n	801066a <__ssvfscanf_r+0x9c6>
 8010606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010608:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801060a:	6852      	ldr	r2, [r2, #4]
 801060c:	3a01      	subs	r2, #1
 801060e:	604a      	str	r2, [r1, #4]
 8010610:	1c5a      	adds	r2, r3, #1
 8010612:	600a      	str	r2, [r1, #0]
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	1c6a      	adds	r2, r5, #1
 8010618:	633a      	str	r2, [r7, #48]	; 0x30
 801061a:	702b      	strb	r3, [r5, #0]
 801061c:	2e00      	cmp	r6, #0
 801061e:	d010      	beq.n	8010642 <__ssvfscanf_r+0x99e>
 8010620:	6a3b      	ldr	r3, [r7, #32]
 8010622:	1b15      	subs	r5, r2, r4
 8010624:	429d      	cmp	r5, r3
 8010626:	d30c      	bcc.n	8010642 <__ssvfscanf_r+0x99e>
 8010628:	005b      	lsls	r3, r3, #1
 801062a:	0020      	movs	r0, r4
 801062c:	0019      	movs	r1, r3
 801062e:	623b      	str	r3, [r7, #32]
 8010630:	f001 fe32 	bl	8012298 <realloc>
 8010634:	1e04      	subs	r4, r0, #0
 8010636:	d101      	bne.n	801063c <__ssvfscanf_r+0x998>
 8010638:	f7ff fc0a 	bl	800fe50 <__ssvfscanf_r+0x1ac>
 801063c:	1943      	adds	r3, r0, r5
 801063e:	633b      	str	r3, [r7, #48]	; 0x30
 8010640:	6030      	str	r0, [r6, #0]
 8010642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010644:	3b01      	subs	r3, #1
 8010646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010648:	2b00      	cmp	r3, #0
 801064a:	d00e      	beq.n	801066a <__ssvfscanf_r+0x9c6>
 801064c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	dc2a      	bgt.n	80106aa <__ssvfscanf_r+0xa06>
 8010654:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010656:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010658:	f002 fa32 	bl	8012ac0 <__ssrefill_r>
 801065c:	2800      	cmp	r0, #0
 801065e:	d024      	beq.n	80106aa <__ssvfscanf_r+0xa06>
 8010660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010662:	42a3      	cmp	r3, r4
 8010664:	d101      	bne.n	801066a <__ssvfscanf_r+0x9c6>
 8010666:	f7ff fbec 	bl	800fe42 <__ssvfscanf_r+0x19e>
 801066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801066c:	1b1d      	subs	r5, r3, r4
 801066e:	42a3      	cmp	r3, r4
 8010670:	d101      	bne.n	8010676 <__ssvfscanf_r+0x9d2>
 8010672:	f7ff fc14 	bl	800fe9e <__ssvfscanf_r+0x1fa>
 8010676:	2300      	movs	r3, #0
 8010678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801067a:	7013      	strb	r3, [r2, #0]
 801067c:	429e      	cmp	r6, r3
 801067e:	d009      	beq.n	8010694 <__ssvfscanf_r+0x9f0>
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	1c69      	adds	r1, r5, #1
 8010684:	428b      	cmp	r3, r1
 8010686:	d905      	bls.n	8010694 <__ssvfscanf_r+0x9f0>
 8010688:	6830      	ldr	r0, [r6, #0]
 801068a:	f001 fe05 	bl	8012298 <realloc>
 801068e:	2800      	cmp	r0, #0
 8010690:	d000      	beq.n	8010694 <__ssvfscanf_r+0x9f0>
 8010692:	6030      	str	r0, [r6, #0]
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	3301      	adds	r3, #1
 8010698:	62fb      	str	r3, [r7, #44]	; 0x2c
 801069a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069c:	195b      	adds	r3, r3, r5
 801069e:	63bb      	str	r3, [r7, #56]	; 0x38
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	e477      	b.n	800ff94 <__ssvfscanf_r+0x2f0>
 80106a4:	0016      	movs	r6, r2
 80106a6:	623a      	str	r2, [r7, #32]
 80106a8:	e7a0      	b.n	80105ec <__ssvfscanf_r+0x948>
 80106aa:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80106ac:	e79f      	b.n	80105ee <__ssvfscanf_r+0x94a>
 80106ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <__ssvfscanf_r+0xa14>
 80106b4:	3b01      	subs	r3, #1
 80106b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b8:	2210      	movs	r2, #16
 80106ba:	2301      	movs	r3, #1
 80106bc:	0034      	movs	r4, r6
 80106be:	4032      	ands	r2, r6
 80106c0:	401c      	ands	r4, r3
 80106c2:	61fa      	str	r2, [r7, #28]
 80106c4:	421e      	tst	r6, r3
 80106c6:	d100      	bne.n	80106ca <__ssvfscanf_r+0xa26>
 80106c8:	e102      	b.n	80108d0 <__ssvfscanf_r+0xc2c>
 80106ca:	2a00      	cmp	r2, #0
 80106cc:	d000      	beq.n	80106d0 <__ssvfscanf_r+0xa2c>
 80106ce:	e09f      	b.n	8010810 <__ssvfscanf_r+0xb6c>
 80106d0:	2080      	movs	r0, #128	; 0x80
 80106d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d4:	cb10      	ldmia	r3!, {r4}
 80106d6:	60fb      	str	r3, [r7, #12]
 80106d8:	4206      	tst	r6, r0
 80106da:	d100      	bne.n	80106de <__ssvfscanf_r+0xa3a>
 80106dc:	e0a1      	b.n	8010822 <__ssvfscanf_r+0xb7e>
 80106de:	2c00      	cmp	r4, #0
 80106e0:	d100      	bne.n	80106e4 <__ssvfscanf_r+0xa40>
 80106e2:	e4aa      	b.n	801003a <__ssvfscanf_r+0x396>
 80106e4:	f7fb fb36 	bl	800bd54 <malloc>
 80106e8:	6338      	str	r0, [r7, #48]	; 0x30
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d100      	bne.n	80106f0 <__ssvfscanf_r+0xa4c>
 80106ee:	e4a1      	b.n	8010034 <__ssvfscanf_r+0x390>
 80106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f2:	6023      	str	r3, [r4, #0]
 80106f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106f6:	88de      	ldrh	r6, [r3, #6]
 80106f8:	889d      	ldrh	r5, [r3, #4]
 80106fa:	42ae      	cmp	r6, r5
 80106fc:	d310      	bcc.n	8010720 <__ssvfscanf_r+0xa7c>
 80106fe:	4b72      	ldr	r3, [pc, #456]	; (80108c8 <__ssvfscanf_r+0xc24>)
 8010700:	429d      	cmp	r5, r3
 8010702:	d900      	bls.n	8010706 <__ssvfscanf_r+0xa62>
 8010704:	e496      	b.n	8010034 <__ssvfscanf_r+0x390>
 8010706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010708:	3508      	adds	r5, #8
 801070a:	b2ad      	uxth	r5, r5
 801070c:	6818      	ldr	r0, [r3, #0]
 801070e:	00a9      	lsls	r1, r5, #2
 8010710:	f001 fdc2 	bl	8012298 <realloc>
 8010714:	2800      	cmp	r0, #0
 8010716:	d100      	bne.n	801071a <__ssvfscanf_r+0xa76>
 8010718:	e48c      	b.n	8010034 <__ssvfscanf_r+0x390>
 801071a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801071c:	6018      	str	r0, [r3, #0]
 801071e:	809d      	strh	r5, [r3, #4]
 8010720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010722:	1c72      	adds	r2, r6, #1
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	00b6      	lsls	r6, r6, #2
 8010728:	50f4      	str	r4, [r6, r3]
 801072a:	2320      	movs	r3, #32
 801072c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801072e:	0025      	movs	r5, r4
 8010730:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8010732:	80ca      	strh	r2, [r1, #6]
 8010734:	613b      	str	r3, [r7, #16]
 8010736:	2300      	movs	r3, #0
 8010738:	623b      	str	r3, [r7, #32]
 801073a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801073c:	4a63      	ldr	r2, [pc, #396]	; (80108cc <__ssvfscanf_r+0xc28>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	5cd3      	ldrb	r3, [r2, r3]
 8010744:	2208      	movs	r2, #8
 8010746:	4213      	tst	r3, r2
 8010748:	d149      	bne.n	80107de <__ssvfscanf_r+0xb3a>
 801074a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801074c:	2b00      	cmp	r3, #0
 801074e:	d046      	beq.n	80107de <__ssvfscanf_r+0xb3a>
 8010750:	f7fc feb2 	bl	800d4b8 <__locale_mb_cur_max>
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	4298      	cmp	r0, r3
 8010758:	d101      	bne.n	801075e <__ssvfscanf_r+0xaba>
 801075a:	f7ff fb72 	bl	800fe42 <__ssvfscanf_r+0x19e>
 801075e:	6a3a      	ldr	r2, [r7, #32]
 8010760:	2048      	movs	r0, #72	; 0x48
 8010762:	1c56      	adds	r6, r2, #1
 8010764:	228c      	movs	r2, #140	; 0x8c
 8010766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010768:	0052      	lsls	r2, r2, #1
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	1812      	adds	r2, r2, r0
 801076e:	7819      	ldrb	r1, [r3, #0]
 8010770:	6a38      	ldr	r0, [r7, #32]
 8010772:	19d2      	adds	r2, r2, r7
 8010774:	5411      	strb	r1, [r2, r0]
 8010776:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010778:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801077a:	6852      	ldr	r2, [r2, #4]
 801077c:	3301      	adds	r3, #1
 801077e:	600b      	str	r3, [r1, #0]
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	3a01      	subs	r2, #1
 8010784:	604a      	str	r2, [r1, #4]
 8010786:	2b03      	cmp	r3, #3
 8010788:	d102      	bne.n	8010790 <__ssvfscanf_r+0xaec>
 801078a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801078c:	2b04      	cmp	r3, #4
 801078e:	d007      	beq.n	80107a0 <__ssvfscanf_r+0xafc>
 8010790:	2048      	movs	r0, #72	; 0x48
 8010792:	2310      	movs	r3, #16
 8010794:	181b      	adds	r3, r3, r0
 8010796:	2208      	movs	r2, #8
 8010798:	2100      	movs	r1, #0
 801079a:	19d8      	adds	r0, r3, r7
 801079c:	f7fc fe00 	bl	800d3a0 <memset>
 80107a0:	2148      	movs	r1, #72	; 0x48
 80107a2:	2310      	movs	r3, #16
 80107a4:	228c      	movs	r2, #140	; 0x8c
 80107a6:	185b      	adds	r3, r3, r1
 80107a8:	0052      	lsls	r2, r2, #1
 80107aa:	19db      	adds	r3, r3, r7
 80107ac:	1852      	adds	r2, r2, r1
 80107ae:	9300      	str	r3, [sp, #0]
 80107b0:	0021      	movs	r1, r4
 80107b2:	0033      	movs	r3, r6
 80107b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107b6:	19d2      	adds	r2, r2, r7
 80107b8:	f002 f882 	bl	80128c0 <_mbrtowc_r>
 80107bc:	0003      	movs	r3, r0
 80107be:	62b8      	str	r0, [r7, #40]	; 0x28
 80107c0:	3301      	adds	r3, #1
 80107c2:	d101      	bne.n	80107c8 <__ssvfscanf_r+0xb24>
 80107c4:	f7ff fb3d 	bl	800fe42 <__ssvfscanf_r+0x19e>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d12f      	bne.n	801082c <__ssvfscanf_r+0xb88>
 80107cc:	6020      	str	r0, [r4, #0]
 80107ce:	6820      	ldr	r0, [r4, #0]
 80107d0:	f002 f894 	bl	80128fc <iswspace>
 80107d4:	6238      	str	r0, [r7, #32]
 80107d6:	2800      	cmp	r0, #0
 80107d8:	d04a      	beq.n	8010870 <__ssvfscanf_r+0xbcc>
 80107da:	2e00      	cmp	r6, #0
 80107dc:	d13c      	bne.n	8010858 <__ssvfscanf_r+0xbb4>
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d000      	beq.n	80107e6 <__ssvfscanf_r+0xb42>
 80107e4:	e640      	b.n	8010468 <__ssvfscanf_r+0x7c4>
 80107e6:	6023      	str	r3, [r4, #0]
 80107e8:	2d00      	cmp	r5, #0
 80107ea:	d100      	bne.n	80107ee <__ssvfscanf_r+0xb4a>
 80107ec:	e639      	b.n	8010462 <__ssvfscanf_r+0x7be>
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	693a      	ldr	r2, [r7, #16]
 80107f2:	1ae4      	subs	r4, r4, r3
 80107f4:	10a3      	asrs	r3, r4, #2
 80107f6:	3301      	adds	r3, #1
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d800      	bhi.n	80107fe <__ssvfscanf_r+0xb5a>
 80107fc:	e631      	b.n	8010462 <__ssvfscanf_r+0x7be>
 80107fe:	6828      	ldr	r0, [r5, #0]
 8010800:	1d21      	adds	r1, r4, #4
 8010802:	f001 fd49 	bl	8012298 <realloc>
 8010806:	2800      	cmp	r0, #0
 8010808:	d100      	bne.n	801080c <__ssvfscanf_r+0xb68>
 801080a:	e62a      	b.n	8010462 <__ssvfscanf_r+0x7be>
 801080c:	6028      	str	r0, [r5, #0]
 801080e:	e628      	b.n	8010462 <__ssvfscanf_r+0x7be>
 8010810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010812:	60fb      	str	r3, [r7, #12]
 8010814:	2300      	movs	r3, #0
 8010816:	001d      	movs	r5, r3
 8010818:	613b      	str	r3, [r7, #16]
 801081a:	633b      	str	r3, [r7, #48]	; 0x30
 801081c:	334c      	adds	r3, #76	; 0x4c
 801081e:	18fc      	adds	r4, r7, r3
 8010820:	e789      	b.n	8010736 <__ssvfscanf_r+0xa92>
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	001d      	movs	r5, r3
 8010826:	613b      	str	r3, [r7, #16]
 8010828:	633b      	str	r3, [r7, #48]	; 0x30
 801082a:	e784      	b.n	8010736 <__ssvfscanf_r+0xa92>
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	623e      	str	r6, [r7, #32]
 8010830:	3302      	adds	r3, #2
 8010832:	d1cc      	bne.n	80107ce <__ssvfscanf_r+0xb2a>
 8010834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dd00      	ble.n	801083e <__ssvfscanf_r+0xb9a>
 801083c:	e77d      	b.n	801073a <__ssvfscanf_r+0xa96>
 801083e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010840:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010842:	f002 f93d 	bl	8012ac0 <__ssrefill_r>
 8010846:	2800      	cmp	r0, #0
 8010848:	d100      	bne.n	801084c <__ssvfscanf_r+0xba8>
 801084a:	e776      	b.n	801073a <__ssvfscanf_r+0xa96>
 801084c:	6a3b      	ldr	r3, [r7, #32]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d001      	beq.n	8010856 <__ssvfscanf_r+0xbb2>
 8010852:	f7ff faf6 	bl	800fe42 <__ssvfscanf_r+0x19e>
 8010856:	e7c2      	b.n	80107de <__ssvfscanf_r+0xb3a>
 8010858:	238c      	movs	r3, #140	; 0x8c
 801085a:	2248      	movs	r2, #72	; 0x48
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	189b      	adds	r3, r3, r2
 8010860:	3e01      	subs	r6, #1
 8010862:	19db      	adds	r3, r3, r7
 8010864:	5cf1      	ldrb	r1, [r6, r3]
 8010866:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010868:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801086a:	f002 f8ed 	bl	8012a48 <_sungetc_r>
 801086e:	e7b4      	b.n	80107da <__ssvfscanf_r+0xb36>
 8010870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010872:	199b      	adds	r3, r3, r6
 8010874:	63bb      	str	r3, [r7, #56]	; 0x38
 8010876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010878:	2b03      	cmp	r3, #3
 801087a:	d102      	bne.n	8010882 <__ssvfscanf_r+0xbde>
 801087c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801087e:	2b04      	cmp	r3, #4
 8010880:	d002      	beq.n	8010888 <__ssvfscanf_r+0xbe4>
 8010882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010884:	3b01      	subs	r3, #1
 8010886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d1d2      	bne.n	8010834 <__ssvfscanf_r+0xb90>
 801088e:	3404      	adds	r4, #4
 8010890:	2d00      	cmp	r5, #0
 8010892:	d016      	beq.n	80108c2 <__ssvfscanf_r+0xc1e>
 8010894:	69fa      	ldr	r2, [r7, #28]
 8010896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010898:	623a      	str	r2, [r7, #32]
 801089a:	693a      	ldr	r2, [r7, #16]
 801089c:	1ae6      	subs	r6, r4, r3
 801089e:	10b3      	asrs	r3, r6, #2
 80108a0:	4293      	cmp	r3, r2
 80108a2:	d3c7      	bcc.n	8010834 <__ssvfscanf_r+0xb90>
 80108a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a6:	00d1      	lsls	r1, r2, #3
 80108a8:	f001 fcf6 	bl	8012298 <realloc>
 80108ac:	6338      	str	r0, [r7, #48]	; 0x30
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d101      	bne.n	80108b6 <__ssvfscanf_r+0xc12>
 80108b2:	f7ff fbbf 	bl	8010034 <__ssvfscanf_r+0x390>
 80108b6:	693b      	ldr	r3, [r7, #16]
 80108b8:	1984      	adds	r4, r0, r6
 80108ba:	005b      	lsls	r3, r3, #1
 80108bc:	6028      	str	r0, [r5, #0]
 80108be:	613b      	str	r3, [r7, #16]
 80108c0:	e7b8      	b.n	8010834 <__ssvfscanf_r+0xb90>
 80108c2:	623d      	str	r5, [r7, #32]
 80108c4:	e7b6      	b.n	8010834 <__ssvfscanf_r+0xb90>
 80108c6:	46c0      	nop			; (mov r8, r8)
 80108c8:	0000fff6 	.word	0x0000fff6
 80108cc:	08015b19 	.word	0x08015b19
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d01c      	beq.n	8010910 <__ssvfscanf_r+0xc6c>
 80108d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108d8:	49bf      	ldr	r1, [pc, #764]	; (8010bd8 <__ssvfscanf_r+0xf34>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	781a      	ldrb	r2, [r3, #0]
 80108de:	5c8a      	ldrb	r2, [r1, r2]
 80108e0:	2108      	movs	r1, #8
 80108e2:	420a      	tst	r2, r1
 80108e4:	d000      	beq.n	80108e8 <__ssvfscanf_r+0xc44>
 80108e6:	e4a1      	b.n	801022c <__ssvfscanf_r+0x588>
 80108e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80108ec:	6852      	ldr	r2, [r2, #4]
 80108ee:	3301      	adds	r3, #1
 80108f0:	600b      	str	r3, [r1, #0]
 80108f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108f4:	3a01      	subs	r2, #1
 80108f6:	3401      	adds	r4, #1
 80108f8:	604a      	str	r2, [r1, #4]
 80108fa:	429c      	cmp	r4, r3
 80108fc:	d100      	bne.n	8010900 <__ssvfscanf_r+0xc5c>
 80108fe:	e495      	b.n	801022c <__ssvfscanf_r+0x588>
 8010900:	2a00      	cmp	r2, #0
 8010902:	dce8      	bgt.n	80108d6 <__ssvfscanf_r+0xc32>
 8010904:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010906:	f002 f8db 	bl	8012ac0 <__ssrefill_r>
 801090a:	2800      	cmp	r0, #0
 801090c:	d0e3      	beq.n	80108d6 <__ssvfscanf_r+0xc32>
 801090e:	e48d      	b.n	801022c <__ssvfscanf_r+0x588>
 8010910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010912:	0032      	movs	r2, r6
 8010914:	cb10      	ldmia	r3!, {r4}
 8010916:	61fb      	str	r3, [r7, #28]
 8010918:	2380      	movs	r3, #128	; 0x80
 801091a:	401a      	ands	r2, r3
 801091c:	421e      	tst	r6, r3
 801091e:	d039      	beq.n	8010994 <__ssvfscanf_r+0xcf0>
 8010920:	2c00      	cmp	r4, #0
 8010922:	d101      	bne.n	8010928 <__ssvfscanf_r+0xc84>
 8010924:	f7ff fabb 	bl	800fe9e <__ssvfscanf_r+0x1fa>
 8010928:	2020      	movs	r0, #32
 801092a:	f7fb fa13 	bl	800bd54 <malloc>
 801092e:	6338      	str	r0, [r7, #48]	; 0x30
 8010930:	2800      	cmp	r0, #0
 8010932:	d101      	bne.n	8010938 <__ssvfscanf_r+0xc94>
 8010934:	f7ff fa8c 	bl	800fe50 <__ssvfscanf_r+0x1ac>
 8010938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801093a:	6020      	str	r0, [r4, #0]
 801093c:	88de      	ldrh	r6, [r3, #6]
 801093e:	889d      	ldrh	r5, [r3, #4]
 8010940:	6818      	ldr	r0, [r3, #0]
 8010942:	42ae      	cmp	r6, r5
 8010944:	d310      	bcc.n	8010968 <__ssvfscanf_r+0xcc4>
 8010946:	4ba5      	ldr	r3, [pc, #660]	; (8010bdc <__ssvfscanf_r+0xf38>)
 8010948:	429d      	cmp	r5, r3
 801094a:	d901      	bls.n	8010950 <__ssvfscanf_r+0xcac>
 801094c:	f7ff fb7b 	bl	8010046 <__ssvfscanf_r+0x3a2>
 8010950:	3508      	adds	r5, #8
 8010952:	b2ad      	uxth	r5, r5
 8010954:	00a9      	lsls	r1, r5, #2
 8010956:	f001 fc9f 	bl	8012298 <realloc>
 801095a:	2800      	cmp	r0, #0
 801095c:	d101      	bne.n	8010962 <__ssvfscanf_r+0xcbe>
 801095e:	f7ff fb72 	bl	8010046 <__ssvfscanf_r+0x3a2>
 8010962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010964:	6018      	str	r0, [r3, #0]
 8010966:	809d      	strh	r5, [r3, #4]
 8010968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801096a:	1c72      	adds	r2, r6, #1
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	00b6      	lsls	r6, r6, #2
 8010970:	50f4      	str	r4, [r6, r3]
 8010972:	2320      	movs	r3, #32
 8010974:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010976:	0026      	movs	r6, r4
 8010978:	80ca      	strh	r2, [r1, #6]
 801097a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 801097c:	633b      	str	r3, [r7, #48]	; 0x30
 801097e:	0025      	movs	r5, r4
 8010980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010982:	4995      	ldr	r1, [pc, #596]	; (8010bd8 <__ssvfscanf_r+0xf34>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	781a      	ldrb	r2, [r3, #0]
 8010988:	5c8a      	ldrb	r2, [r1, r2]
 801098a:	2108      	movs	r1, #8
 801098c:	420a      	tst	r2, r1
 801098e:	d004      	beq.n	801099a <__ssvfscanf_r+0xcf6>
 8010990:	623c      	str	r4, [r7, #32]
 8010992:	e031      	b.n	80109f8 <__ssvfscanf_r+0xd54>
 8010994:	0016      	movs	r6, r2
 8010996:	633a      	str	r2, [r7, #48]	; 0x30
 8010998:	e7f1      	b.n	801097e <__ssvfscanf_r+0xcda>
 801099a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801099c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801099e:	6852      	ldr	r2, [r2, #4]
 80109a0:	3a01      	subs	r2, #1
 80109a2:	604a      	str	r2, [r1, #4]
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	600a      	str	r2, [r1, #0]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	1c62      	adds	r2, r4, #1
 80109ac:	623a      	str	r2, [r7, #32]
 80109ae:	7023      	strb	r3, [r4, #0]
 80109b0:	2e00      	cmp	r6, #0
 80109b2:	d010      	beq.n	80109d6 <__ssvfscanf_r+0xd32>
 80109b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b6:	1b54      	subs	r4, r2, r5
 80109b8:	429c      	cmp	r4, r3
 80109ba:	d30c      	bcc.n	80109d6 <__ssvfscanf_r+0xd32>
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	0028      	movs	r0, r5
 80109c0:	0019      	movs	r1, r3
 80109c2:	633b      	str	r3, [r7, #48]	; 0x30
 80109c4:	f001 fc68 	bl	8012298 <realloc>
 80109c8:	1e05      	subs	r5, r0, #0
 80109ca:	d101      	bne.n	80109d0 <__ssvfscanf_r+0xd2c>
 80109cc:	f7ff fa40 	bl	800fe50 <__ssvfscanf_r+0x1ac>
 80109d0:	1903      	adds	r3, r0, r4
 80109d2:	623b      	str	r3, [r7, #32]
 80109d4:	6030      	str	r0, [r6, #0]
 80109d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109d8:	3b01      	subs	r3, #1
 80109da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00b      	beq.n	80109f8 <__ssvfscanf_r+0xd54>
 80109e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	dd01      	ble.n	80109ec <__ssvfscanf_r+0xd48>
 80109e8:	6a3c      	ldr	r4, [r7, #32]
 80109ea:	e7c9      	b.n	8010980 <__ssvfscanf_r+0xcdc>
 80109ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80109f0:	f002 f866 	bl	8012ac0 <__ssrefill_r>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	d0f7      	beq.n	80109e8 <__ssvfscanf_r+0xd44>
 80109f8:	2300      	movs	r3, #0
 80109fa:	6a3a      	ldr	r2, [r7, #32]
 80109fc:	7013      	strb	r3, [r2, #0]
 80109fe:	1b55      	subs	r5, r2, r5
 8010a00:	2e00      	cmp	r6, #0
 8010a02:	d009      	beq.n	8010a18 <__ssvfscanf_r+0xd74>
 8010a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a06:	1c69      	adds	r1, r5, #1
 8010a08:	428b      	cmp	r3, r1
 8010a0a:	d905      	bls.n	8010a18 <__ssvfscanf_r+0xd74>
 8010a0c:	6830      	ldr	r0, [r6, #0]
 8010a0e:	f001 fc43 	bl	8012298 <realloc>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	d000      	beq.n	8010a18 <__ssvfscanf_r+0xd74>
 8010a16:	6030      	str	r0, [r6, #0]
 8010a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1a:	195b      	adds	r3, r3, r5
 8010a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a20:	3301      	adds	r3, #1
 8010a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a24:	e63c      	b.n	80106a0 <__ssvfscanf_r+0x9fc>
 8010a26:	22ae      	movs	r2, #174	; 0xae
 8010a28:	2100      	movs	r1, #0
 8010a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a2c:	0052      	lsls	r2, r2, #1
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	6239      	str	r1, [r7, #32]
 8010a32:	4293      	cmp	r3, r2
 8010a34:	d906      	bls.n	8010a44 <__ssvfscanf_r+0xda0>
 8010a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a38:	3b5e      	subs	r3, #94	; 0x5e
 8010a3a:	3bff      	subs	r3, #255	; 0xff
 8010a3c:	623b      	str	r3, [r7, #32]
 8010a3e:	235e      	movs	r3, #94	; 0x5e
 8010a40:	33ff      	adds	r3, #255	; 0xff
 8010a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a44:	24d8      	movs	r4, #216	; 0xd8
 8010a46:	2300      	movs	r3, #0
 8010a48:	2248      	movs	r2, #72	; 0x48
 8010a4a:	0124      	lsls	r4, r4, #4
 8010a4c:	4334      	orrs	r4, r6
 8010a4e:	2680      	movs	r6, #128	; 0x80
 8010a50:	61fb      	str	r3, [r7, #28]
 8010a52:	3319      	adds	r3, #25
 8010a54:	33ff      	adds	r3, #255	; 0xff
 8010a56:	189b      	adds	r3, r3, r2
 8010a58:	19dd      	adds	r5, r3, r7
 8010a5a:	00b6      	lsls	r6, r6, #2
 8010a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a5e:	681a      	ldr	r2, [r3, #0]
 8010a60:	7813      	ldrb	r3, [r2, #0]
 8010a62:	2b39      	cmp	r3, #57	; 0x39
 8010a64:	d80f      	bhi.n	8010a86 <__ssvfscanf_r+0xde2>
 8010a66:	2b2a      	cmp	r3, #42	; 0x2a
 8010a68:	d91b      	bls.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010a6a:	0018      	movs	r0, r3
 8010a6c:	382b      	subs	r0, #43	; 0x2b
 8010a6e:	280e      	cmp	r0, #14
 8010a70:	d817      	bhi.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010a72:	f7ef fb4f 	bl	8000114 <__gnu_thumb1_case_uqi>
 8010a76:	168f      	.short	0x168f
 8010a78:	5416168f 	.word	0x5416168f
 8010a7c:	80808080 	.word	0x80808080
 8010a80:	87808080 	.word	0x87808080
 8010a84:	87          	.byte	0x87
 8010a85:	00          	.byte	0x00
 8010a86:	2b66      	cmp	r3, #102	; 0x66
 8010a88:	d83a      	bhi.n	8010b00 <__ssvfscanf_r+0xe5c>
 8010a8a:	2b60      	cmp	r3, #96	; 0x60
 8010a8c:	d803      	bhi.n	8010a96 <__ssvfscanf_r+0xdf2>
 8010a8e:	2b46      	cmp	r3, #70	; 0x46
 8010a90:	d805      	bhi.n	8010a9e <__ssvfscanf_r+0xdfa>
 8010a92:	2b40      	cmp	r3, #64	; 0x40
 8010a94:	d905      	bls.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010a96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a98:	290a      	cmp	r1, #10
 8010a9a:	dc71      	bgt.n	8010b80 <__ssvfscanf_r+0xedc>
 8010a9c:	e001      	b.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010a9e:	2b58      	cmp	r3, #88	; 0x58
 8010aa0:	d030      	beq.n	8010b04 <__ssvfscanf_r+0xe60>
 8010aa2:	05e3      	lsls	r3, r4, #23
 8010aa4:	d515      	bpl.n	8010ad2 <__ssvfscanf_r+0xe2e>
 8010aa6:	238c      	movs	r3, #140	; 0x8c
 8010aa8:	2248      	movs	r2, #72	; 0x48
 8010aaa:	005b      	lsls	r3, r3, #1
 8010aac:	189b      	adds	r3, r3, r2
 8010aae:	19db      	adds	r3, r3, r7
 8010ab0:	429d      	cmp	r5, r3
 8010ab2:	d905      	bls.n	8010ac0 <__ssvfscanf_r+0xe1c>
 8010ab4:	3d01      	subs	r5, #1
 8010ab6:	7829      	ldrb	r1, [r5, #0]
 8010ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010aba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010abc:	f001 ffc4 	bl	8012a48 <_sungetc_r>
 8010ac0:	238c      	movs	r3, #140	; 0x8c
 8010ac2:	2248      	movs	r2, #72	; 0x48
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	189b      	adds	r3, r3, r2
 8010ac8:	19db      	adds	r3, r3, r7
 8010aca:	429d      	cmp	r5, r3
 8010acc:	d101      	bne.n	8010ad2 <__ssvfscanf_r+0xe2e>
 8010ace:	f7ff f9e6 	bl	800fe9e <__ssvfscanf_r+0x1fa>
 8010ad2:	2310      	movs	r3, #16
 8010ad4:	0022      	movs	r2, r4
 8010ad6:	401a      	ands	r2, r3
 8010ad8:	421c      	tst	r4, r3
 8010ada:	d171      	bne.n	8010bc0 <__ssvfscanf_r+0xf1c>
 8010adc:	218c      	movs	r1, #140	; 0x8c
 8010ade:	2048      	movs	r0, #72	; 0x48
 8010ae0:	0049      	lsls	r1, r1, #1
 8010ae2:	1809      	adds	r1, r1, r0
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae6:	697e      	ldr	r6, [r7, #20]
 8010ae8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010aea:	19c9      	adds	r1, r1, r7
 8010aec:	702a      	strb	r2, [r5, #0]
 8010aee:	47b0      	blx	r6
 8010af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af2:	1d1e      	adds	r6, r3, #4
 8010af4:	06a3      	lsls	r3, r4, #26
 8010af6:	d559      	bpl.n	8010bac <__ssvfscanf_r+0xf08>
 8010af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	6018      	str	r0, [r3, #0]
 8010afe:	e05b      	b.n	8010bb8 <__ssvfscanf_r+0xf14>
 8010b00:	2b78      	cmp	r3, #120	; 0x78
 8010b02:	d1ce      	bne.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010b04:	21c0      	movs	r1, #192	; 0xc0
 8010b06:	00c9      	lsls	r1, r1, #3
 8010b08:	4021      	ands	r1, r4
 8010b0a:	42b1      	cmp	r1, r6
 8010b0c:	d1c9      	bne.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010b0e:	4934      	ldr	r1, [pc, #208]	; (8010be0 <__ssvfscanf_r+0xf3c>)
 8010b10:	4021      	ands	r1, r4
 8010b12:	24a0      	movs	r4, #160	; 0xa0
 8010b14:	00e4      	lsls	r4, r4, #3
 8010b16:	430c      	orrs	r4, r1
 8010b18:	2110      	movs	r1, #16
 8010b1a:	6279      	str	r1, [r7, #36]	; 0x24
 8010b1c:	e00b      	b.n	8010b36 <__ssvfscanf_r+0xe92>
 8010b1e:	0521      	lsls	r1, r4, #20
 8010b20:	d509      	bpl.n	8010b36 <__ssvfscanf_r+0xe92>
 8010b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b24:	2900      	cmp	r1, #0
 8010b26:	d102      	bne.n	8010b2e <__ssvfscanf_r+0xe8a>
 8010b28:	3108      	adds	r1, #8
 8010b2a:	4334      	orrs	r4, r6
 8010b2c:	6279      	str	r1, [r7, #36]	; 0x24
 8010b2e:	0561      	lsls	r1, r4, #21
 8010b30:	d504      	bpl.n	8010b3c <__ssvfscanf_r+0xe98>
 8010b32:	492c      	ldr	r1, [pc, #176]	; (8010be4 <__ssvfscanf_r+0xf40>)
 8010b34:	400c      	ands	r4, r1
 8010b36:	702b      	strb	r3, [r5, #0]
 8010b38:	3501      	adds	r5, #1
 8010b3a:	e00c      	b.n	8010b56 <__ssvfscanf_r+0xeb2>
 8010b3c:	4b2a      	ldr	r3, [pc, #168]	; (8010be8 <__ssvfscanf_r+0xf44>)
 8010b3e:	401c      	ands	r4, r3
 8010b40:	6a3b      	ldr	r3, [r7, #32]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d004      	beq.n	8010b50 <__ssvfscanf_r+0xeac>
 8010b46:	3b01      	subs	r3, #1
 8010b48:	623b      	str	r3, [r7, #32]
 8010b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	3301      	adds	r3, #1
 8010b54:	61fb      	str	r3, [r7, #28]
 8010b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	604b      	str	r3, [r1, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	dd1c      	ble.n	8010b9e <__ssvfscanf_r+0xefa>
 8010b64:	3201      	adds	r2, #1
 8010b66:	600a      	str	r2, [r1, #0]
 8010b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b6a:	3b01      	subs	r3, #1
 8010b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d000      	beq.n	8010b74 <__ssvfscanf_r+0xed0>
 8010b72:	e773      	b.n	8010a5c <__ssvfscanf_r+0xdb8>
 8010b74:	e795      	b.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010b76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b78:	491c      	ldr	r1, [pc, #112]	; (8010bec <__ssvfscanf_r+0xf48>)
 8010b7a:	0040      	lsls	r0, r0, #1
 8010b7c:	5e41      	ldrsh	r1, [r0, r1]
 8010b7e:	6279      	str	r1, [r7, #36]	; 0x24
 8010b80:	491b      	ldr	r1, [pc, #108]	; (8010bf0 <__ssvfscanf_r+0xf4c>)
 8010b82:	e7d7      	b.n	8010b34 <__ssvfscanf_r+0xe90>
 8010b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b86:	4919      	ldr	r1, [pc, #100]	; (8010bec <__ssvfscanf_r+0xf48>)
 8010b88:	0040      	lsls	r0, r0, #1
 8010b8a:	5e41      	ldrsh	r1, [r0, r1]
 8010b8c:	6279      	str	r1, [r7, #36]	; 0x24
 8010b8e:	2908      	cmp	r1, #8
 8010b90:	dcf6      	bgt.n	8010b80 <__ssvfscanf_r+0xedc>
 8010b92:	e786      	b.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010b94:	2180      	movs	r1, #128	; 0x80
 8010b96:	420c      	tst	r4, r1
 8010b98:	d083      	beq.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010b9a:	438c      	bics	r4, r1
 8010b9c:	e7cb      	b.n	8010b36 <__ssvfscanf_r+0xe92>
 8010b9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ba2:	f001 ff8d 	bl	8012ac0 <__ssrefill_r>
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d0de      	beq.n	8010b68 <__ssvfscanf_r+0xec4>
 8010baa:	e77a      	b.n	8010aa2 <__ssvfscanf_r+0xdfe>
 8010bac:	2308      	movs	r3, #8
 8010bae:	421c      	tst	r4, r3
 8010bb0:	d020      	beq.n	8010bf4 <__ssvfscanf_r+0xf50>
 8010bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	7018      	strb	r0, [r3, #0]
 8010bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bba:	633e      	str	r6, [r7, #48]	; 0x30
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bc0:	238c      	movs	r3, #140	; 0x8c
 8010bc2:	2248      	movs	r2, #72	; 0x48
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	189b      	adds	r3, r3, r2
 8010bc8:	19db      	adds	r3, r3, r7
 8010bca:	1aed      	subs	r5, r5, r3
 8010bcc:	69fb      	ldr	r3, [r7, #28]
 8010bce:	18ed      	adds	r5, r5, r3
 8010bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bd2:	195b      	adds	r3, r3, r5
 8010bd4:	f7ff f92d 	bl	800fe32 <__ssvfscanf_r+0x18e>
 8010bd8:	08015b19 	.word	0x08015b19
 8010bdc:	0000fff6 	.word	0x0000fff6
 8010be0:	fffffdff 	.word	0xfffffdff
 8010be4:	fffffa7f 	.word	0xfffffa7f
 8010be8:	fffffc7f 	.word	0xfffffc7f
 8010bec:	08015e46 	.word	0x08015e46
 8010bf0:	fffff47f 	.word	0xfffff47f
 8010bf4:	0763      	lsls	r3, r4, #29
 8010bf6:	d503      	bpl.n	8010c00 <__ssvfscanf_r+0xf5c>
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	8018      	strh	r0, [r3, #0]
 8010bfe:	e7db      	b.n	8010bb8 <__ssvfscanf_r+0xf14>
 8010c00:	2301      	movs	r3, #1
 8010c02:	0022      	movs	r2, r4
 8010c04:	401a      	ands	r2, r3
 8010c06:	421c      	tst	r4, r3
 8010c08:	d000      	beq.n	8010c0c <__ssvfscanf_r+0xf68>
 8010c0a:	e775      	b.n	8010af8 <__ssvfscanf_r+0xe54>
 8010c0c:	07a4      	lsls	r4, r4, #30
 8010c0e:	d400      	bmi.n	8010c12 <__ssvfscanf_r+0xf6e>
 8010c10:	e772      	b.n	8010af8 <__ssvfscanf_r+0xe54>
 8010c12:	4ba8      	ldr	r3, [pc, #672]	; (8010eb4 <__ssvfscanf_r+0x1210>)
 8010c14:	6979      	ldr	r1, [r7, #20]
 8010c16:	4299      	cmp	r1, r3
 8010c18:	d10c      	bne.n	8010c34 <__ssvfscanf_r+0xf90>
 8010c1a:	218c      	movs	r1, #140	; 0x8c
 8010c1c:	2048      	movs	r0, #72	; 0x48
 8010c1e:	0049      	lsls	r1, r1, #1
 8010c20:	1809      	adds	r1, r1, r0
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c26:	19c9      	adds	r1, r1, r7
 8010c28:	f001 fe46 	bl	80128b8 <_strtoull_r>
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	c303      	stmia	r3!, {r0, r1}
 8010c32:	e7c1      	b.n	8010bb8 <__ssvfscanf_r+0xf14>
 8010c34:	218c      	movs	r1, #140	; 0x8c
 8010c36:	2048      	movs	r0, #72	; 0x48
 8010c38:	0049      	lsls	r1, r1, #1
 8010c3a:	1809      	adds	r1, r1, r0
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c40:	19c9      	adds	r1, r1, r7
 8010c42:	f001 fd87 	bl	8012754 <_strtoll_r>
 8010c46:	e7f1      	b.n	8010c2c <__ssvfscanf_r+0xf88>
 8010c48:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010c4a:	f000 fb9f 	bl	801138c <_localeconv_r>
 8010c4e:	22ae      	movs	r2, #174	; 0xae
 8010c50:	2100      	movs	r1, #0
 8010c52:	6803      	ldr	r3, [r0, #0]
 8010c54:	0052      	lsls	r2, r2, #1
 8010c56:	603b      	str	r3, [r7, #0]
 8010c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c5a:	60f9      	str	r1, [r7, #12]
 8010c5c:	3b01      	subs	r3, #1
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d906      	bls.n	8010c70 <__ssvfscanf_r+0xfcc>
 8010c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c64:	3b5e      	subs	r3, #94	; 0x5e
 8010c66:	3bff      	subs	r3, #255	; 0xff
 8010c68:	60fb      	str	r3, [r7, #12]
 8010c6a:	235e      	movs	r3, #94	; 0x5e
 8010c6c:	33ff      	adds	r3, #255	; 0xff
 8010c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c70:	23f0      	movs	r3, #240	; 0xf0
 8010c72:	00db      	lsls	r3, r3, #3
 8010c74:	431e      	orrs	r6, r3
 8010c76:	238c      	movs	r3, #140	; 0x8c
 8010c78:	2248      	movs	r2, #72	; 0x48
 8010c7a:	2400      	movs	r4, #0
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	189b      	adds	r3, r3, r2
 8010c80:	623c      	str	r4, [r7, #32]
 8010c82:	607c      	str	r4, [r7, #4]
 8010c84:	60bc      	str	r4, [r7, #8]
 8010c86:	61fc      	str	r4, [r7, #28]
 8010c88:	613c      	str	r4, [r7, #16]
 8010c8a:	19dd      	adds	r5, r3, r7
 8010c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	781a      	ldrb	r2, [r3, #0]
 8010c92:	0010      	movs	r0, r2
 8010c94:	382b      	subs	r0, #43	; 0x2b
 8010c96:	284e      	cmp	r0, #78	; 0x4e
 8010c98:	d900      	bls.n	8010c9c <__ssvfscanf_r+0xff8>
 8010c9a:	e133      	b.n	8010f04 <__ssvfscanf_r+0x1260>
 8010c9c:	f7ef fa44 	bl	8000128 <__gnu_thumb1_case_uhi>
 8010ca0:	0132009b 	.word	0x0132009b
 8010ca4:	0132009b 	.word	0x0132009b
 8010ca8:	004f0132 	.word	0x004f0132
 8010cac:	00720072 	.word	0x00720072
 8010cb0:	00720072 	.word	0x00720072
 8010cb4:	00720072 	.word	0x00720072
 8010cb8:	00720072 	.word	0x00720072
 8010cbc:	01320072 	.word	0x01320072
 8010cc0:	01320132 	.word	0x01320132
 8010cc4:	01320132 	.word	0x01320132
 8010cc8:	01320132 	.word	0x01320132
 8010ccc:	007b00bc 	.word	0x007b00bc
 8010cd0:	007b007b 	.word	0x007b007b
 8010cd4:	00f7012f 	.word	0x00f7012f
 8010cd8:	01320132 	.word	0x01320132
 8010cdc:	013200e3 	.word	0x013200e3
 8010ce0:	01320132 	.word	0x01320132
 8010ce4:	00a00132 	.word	0x00a00132
 8010ce8:	01120132 	.word	0x01120132
 8010cec:	01320132 	.word	0x01320132
 8010cf0:	01010132 	.word	0x01010132
 8010cf4:	01320132 	.word	0x01320132
 8010cf8:	00820132 	.word	0x00820132
 8010cfc:	01320105 	.word	0x01320105
 8010d00:	01320132 	.word	0x01320132
 8010d04:	01320132 	.word	0x01320132
 8010d08:	01320132 	.word	0x01320132
 8010d0c:	007b00bc 	.word	0x007b00bc
 8010d10:	007b007b 	.word	0x007b007b
 8010d14:	00f7012f 	.word	0x00f7012f
 8010d18:	01320132 	.word	0x01320132
 8010d1c:	013200e3 	.word	0x013200e3
 8010d20:	01320132 	.word	0x01320132
 8010d24:	00a00132 	.word	0x00a00132
 8010d28:	01120132 	.word	0x01120132
 8010d2c:	01320132 	.word	0x01320132
 8010d30:	01010132 	.word	0x01010132
 8010d34:	01320132 	.word	0x01320132
 8010d38:	00820132 	.word	0x00820132
 8010d3c:	0105      	.short	0x0105
 8010d3e:	05f1      	lsls	r1, r6, #23
 8010d40:	d520      	bpl.n	8010d84 <__ssvfscanf_r+0x10e0>
 8010d42:	2280      	movs	r2, #128	; 0x80
 8010d44:	4396      	bics	r6, r2
 8010d46:	69fa      	ldr	r2, [r7, #28]
 8010d48:	3201      	adds	r2, #1
 8010d4a:	61fa      	str	r2, [r7, #28]
 8010d4c:	68fa      	ldr	r2, [r7, #12]
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	d004      	beq.n	8010d5c <__ssvfscanf_r+0x10b8>
 8010d52:	3a01      	subs	r2, #1
 8010d54:	60fa      	str	r2, [r7, #12]
 8010d56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d58:	3201      	adds	r2, #1
 8010d5a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010d5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d60:	3a01      	subs	r2, #1
 8010d62:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d66:	3201      	adds	r2, #1
 8010d68:	63ba      	str	r2, [r7, #56]	; 0x38
 8010d6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010d6c:	6852      	ldr	r2, [r2, #4]
 8010d6e:	3a01      	subs	r2, #1
 8010d70:	604a      	str	r2, [r1, #4]
 8010d72:	2a00      	cmp	r2, #0
 8010d74:	dc00      	bgt.n	8010d78 <__ssvfscanf_r+0x10d4>
 8010d76:	e0d6      	b.n	8010f26 <__ssvfscanf_r+0x1282>
 8010d78:	3301      	adds	r3, #1
 8010d7a:	600b      	str	r3, [r1, #0]
 8010d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d184      	bne.n	8010c8c <__ssvfscanf_r+0xfe8>
 8010d82:	e057      	b.n	8010e34 <__ssvfscanf_r+0x1190>
 8010d84:	6a39      	ldr	r1, [r7, #32]
 8010d86:	1909      	adds	r1, r1, r4
 8010d88:	2900      	cmp	r1, #0
 8010d8a:	d153      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010d8c:	494a      	ldr	r1, [pc, #296]	; (8010eb8 <__ssvfscanf_r+0x1214>)
 8010d8e:	400e      	ands	r6, r1
 8010d90:	702a      	strb	r2, [r5, #0]
 8010d92:	3501      	adds	r5, #1
 8010d94:	e7e2      	b.n	8010d5c <__ssvfscanf_r+0x10b8>
 8010d96:	0531      	lsls	r1, r6, #20
 8010d98:	d54c      	bpl.n	8010e34 <__ssvfscanf_r+0x1190>
 8010d9a:	6a39      	ldr	r1, [r7, #32]
 8010d9c:	1909      	adds	r1, r1, r4
 8010d9e:	2900      	cmp	r1, #0
 8010da0:	d040      	beq.n	8010e24 <__ssvfscanf_r+0x1180>
 8010da2:	e047      	b.n	8010e34 <__ssvfscanf_r+0x1190>
 8010da4:	2198      	movs	r1, #152	; 0x98
 8010da6:	2080      	movs	r0, #128	; 0x80
 8010da8:	0109      	lsls	r1, r1, #4
 8010daa:	4031      	ands	r1, r6
 8010dac:	0040      	lsls	r0, r0, #1
 8010dae:	4281      	cmp	r1, r0
 8010db0:	d140      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010db2:	69f9      	ldr	r1, [r7, #28]
 8010db4:	2901      	cmp	r1, #1
 8010db6:	d13d      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010db8:	2080      	movs	r0, #128	; 0x80
 8010dba:	4940      	ldr	r1, [pc, #256]	; (8010ebc <__ssvfscanf_r+0x1218>)
 8010dbc:	0100      	lsls	r0, r0, #4
 8010dbe:	400e      	ands	r6, r1
 8010dc0:	3132      	adds	r1, #50	; 0x32
 8010dc2:	31ff      	adds	r1, #255	; 0xff
 8010dc4:	7029      	strb	r1, [r5, #0]
 8010dc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010dc8:	4306      	orrs	r6, r0
 8010dca:	3901      	subs	r1, #1
 8010dcc:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010dce:	3501      	adds	r5, #1
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	61f9      	str	r1, [r7, #28]
 8010dd4:	e7dc      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010dd6:	2180      	movs	r1, #128	; 0x80
 8010dd8:	420e      	tst	r6, r1
 8010dda:	d02b      	beq.n	8010e34 <__ssvfscanf_r+0x1190>
 8010ddc:	438e      	bics	r6, r1
 8010dde:	e7d7      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010de0:	6a39      	ldr	r1, [r7, #32]
 8010de2:	2900      	cmp	r1, #0
 8010de4:	d10d      	bne.n	8010e02 <__ssvfscanf_r+0x115e>
 8010de6:	69f9      	ldr	r1, [r7, #28]
 8010de8:	2900      	cmp	r1, #0
 8010dea:	d10e      	bne.n	8010e0a <__ssvfscanf_r+0x1166>
 8010dec:	21e0      	movs	r1, #224	; 0xe0
 8010dee:	0030      	movs	r0, r6
 8010df0:	00c9      	lsls	r1, r1, #3
 8010df2:	4008      	ands	r0, r1
 8010df4:	4288      	cmp	r0, r1
 8010df6:	d108      	bne.n	8010e0a <__ssvfscanf_r+0x1166>
 8010df8:	4931      	ldr	r1, [pc, #196]	; (8010ec0 <__ssvfscanf_r+0x121c>)
 8010dfa:	400e      	ands	r6, r1
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	6239      	str	r1, [r7, #32]
 8010e00:	e7c6      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010e02:	6a39      	ldr	r1, [r7, #32]
 8010e04:	2902      	cmp	r1, #2
 8010e06:	d100      	bne.n	8010e0a <__ssvfscanf_r+0x1166>
 8010e08:	e089      	b.n	8010f1e <__ssvfscanf_r+0x127a>
 8010e0a:	2c01      	cmp	r4, #1
 8010e0c:	d001      	beq.n	8010e12 <__ssvfscanf_r+0x116e>
 8010e0e:	2c04      	cmp	r4, #4
 8010e10:	d110      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010e12:	3401      	adds	r4, #1
 8010e14:	b2e4      	uxtb	r4, r4
 8010e16:	e7bb      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010e18:	0531      	lsls	r1, r6, #20
 8010e1a:	d508      	bpl.n	8010e2e <__ssvfscanf_r+0x118a>
 8010e1c:	6a39      	ldr	r1, [r7, #32]
 8010e1e:	1909      	adds	r1, r1, r4
 8010e20:	2900      	cmp	r1, #0
 8010e22:	d104      	bne.n	8010e2e <__ssvfscanf_r+0x118a>
 8010e24:	4824      	ldr	r0, [pc, #144]	; (8010eb8 <__ssvfscanf_r+0x1214>)
 8010e26:	000c      	movs	r4, r1
 8010e28:	4006      	ands	r6, r0
 8010e2a:	6239      	str	r1, [r7, #32]
 8010e2c:	e7b0      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010e2e:	6a39      	ldr	r1, [r7, #32]
 8010e30:	2901      	cmp	r1, #1
 8010e32:	d076      	beq.n	8010f22 <__ssvfscanf_r+0x127e>
 8010e34:	69fb      	ldr	r3, [r7, #28]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d001      	beq.n	8010e3e <__ssvfscanf_r+0x119a>
 8010e3a:	4b20      	ldr	r3, [pc, #128]	; (8010ebc <__ssvfscanf_r+0x1218>)
 8010e3c:	401e      	ands	r6, r3
 8010e3e:	6a3b      	ldr	r3, [r7, #32]
 8010e40:	3b01      	subs	r3, #1
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d877      	bhi.n	8010f36 <__ssvfscanf_r+0x1292>
 8010e46:	238c      	movs	r3, #140	; 0x8c
 8010e48:	2248      	movs	r2, #72	; 0x48
 8010e4a:	005b      	lsls	r3, r3, #1
 8010e4c:	189b      	adds	r3, r3, r2
 8010e4e:	19db      	adds	r3, r3, r7
 8010e50:	429d      	cmp	r5, r3
 8010e52:	d801      	bhi.n	8010e58 <__ssvfscanf_r+0x11b4>
 8010e54:	f7ff f823 	bl	800fe9e <__ssvfscanf_r+0x1fa>
 8010e58:	3d01      	subs	r5, #1
 8010e5a:	7829      	ldrb	r1, [r5, #0]
 8010e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010e60:	f001 fdf2 	bl	8012a48 <_sungetc_r>
 8010e64:	e7ef      	b.n	8010e46 <__ssvfscanf_r+0x11a2>
 8010e66:	2c00      	cmp	r4, #0
 8010e68:	d10c      	bne.n	8010e84 <__ssvfscanf_r+0x11e0>
 8010e6a:	69f9      	ldr	r1, [r7, #28]
 8010e6c:	2900      	cmp	r1, #0
 8010e6e:	d1e4      	bne.n	8010e3a <__ssvfscanf_r+0x1196>
 8010e70:	21e0      	movs	r1, #224	; 0xe0
 8010e72:	0030      	movs	r0, r6
 8010e74:	00c9      	lsls	r1, r1, #3
 8010e76:	4008      	ands	r0, r1
 8010e78:	4288      	cmp	r0, r1
 8010e7a:	d1e0      	bne.n	8010e3e <__ssvfscanf_r+0x119a>
 8010e7c:	4910      	ldr	r1, [pc, #64]	; (8010ec0 <__ssvfscanf_r+0x121c>)
 8010e7e:	3401      	adds	r4, #1
 8010e80:	400e      	ands	r6, r1
 8010e82:	e785      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010e84:	20fd      	movs	r0, #253	; 0xfd
 8010e86:	1ee1      	subs	r1, r4, #3
 8010e88:	4201      	tst	r1, r0
 8010e8a:	d1d3      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010e8c:	e7c1      	b.n	8010e12 <__ssvfscanf_r+0x116e>
 8010e8e:	0531      	lsls	r1, r6, #20
 8010e90:	d503      	bpl.n	8010e9a <__ssvfscanf_r+0x11f6>
 8010e92:	6a39      	ldr	r1, [r7, #32]
 8010e94:	1909      	adds	r1, r1, r4
 8010e96:	2900      	cmp	r1, #0
 8010e98:	d0c4      	beq.n	8010e24 <__ssvfscanf_r+0x1180>
 8010e9a:	2c02      	cmp	r4, #2
 8010e9c:	d1ca      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010e9e:	2403      	movs	r4, #3
 8010ea0:	e776      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010ea2:	2c06      	cmp	r4, #6
 8010ea4:	d1c6      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010ea6:	2407      	movs	r4, #7
 8010ea8:	e772      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010eaa:	2c07      	cmp	r4, #7
 8010eac:	d1c2      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010eae:	2408      	movs	r4, #8
 8010eb0:	e76e      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010eb2:	46c0      	nop			; (mov r8, r8)
 8010eb4:	0800d065 	.word	0x0800d065
 8010eb8:	fffffe7f 	.word	0xfffffe7f
 8010ebc:	fffffeff 	.word	0xfffffeff
 8010ec0:	fffff87f 	.word	0xfffff87f
 8010ec4:	0531      	lsls	r1, r6, #20
 8010ec6:	d5b5      	bpl.n	8010e34 <__ssvfscanf_r+0x1190>
 8010ec8:	21a0      	movs	r1, #160	; 0xa0
 8010eca:	2080      	movs	r0, #128	; 0x80
 8010ecc:	00c9      	lsls	r1, r1, #3
 8010ece:	00c0      	lsls	r0, r0, #3
 8010ed0:	4031      	ands	r1, r6
 8010ed2:	4281      	cmp	r1, r0
 8010ed4:	d004      	beq.n	8010ee0 <__ssvfscanf_r+0x123c>
 8010ed6:	4206      	tst	r6, r0
 8010ed8:	d0ac      	beq.n	8010e34 <__ssvfscanf_r+0x1190>
 8010eda:	69f9      	ldr	r1, [r7, #28]
 8010edc:	2900      	cmp	r1, #0
 8010ede:	d0ae      	beq.n	8010e3e <__ssvfscanf_r+0x119a>
 8010ee0:	2180      	movs	r1, #128	; 0x80
 8010ee2:	0089      	lsls	r1, r1, #2
 8010ee4:	420e      	tst	r6, r1
 8010ee6:	d104      	bne.n	8010ef2 <__ssvfscanf_r+0x124e>
 8010ee8:	69f9      	ldr	r1, [r7, #28]
 8010eea:	6938      	ldr	r0, [r7, #16]
 8010eec:	607d      	str	r5, [r7, #4]
 8010eee:	1a09      	subs	r1, r1, r0
 8010ef0:	60b9      	str	r1, [r7, #8]
 8010ef2:	20c0      	movs	r0, #192	; 0xc0
 8010ef4:	4973      	ldr	r1, [pc, #460]	; (80110c4 <__ssvfscanf_r+0x1420>)
 8010ef6:	0040      	lsls	r0, r0, #1
 8010ef8:	400e      	ands	r6, r1
 8010efa:	4306      	orrs	r6, r0
 8010efc:	e768      	b.n	8010dd0 <__ssvfscanf_r+0x112c>
 8010efe:	0531      	lsls	r1, r6, #20
 8010f00:	d5e2      	bpl.n	8010ec8 <__ssvfscanf_r+0x1224>
 8010f02:	e74a      	b.n	8010d9a <__ssvfscanf_r+0x10f6>
 8010f04:	6839      	ldr	r1, [r7, #0]
 8010f06:	7809      	ldrb	r1, [r1, #0]
 8010f08:	4291      	cmp	r1, r2
 8010f0a:	d193      	bne.n	8010e34 <__ssvfscanf_r+0x1190>
 8010f0c:	2180      	movs	r1, #128	; 0x80
 8010f0e:	0089      	lsls	r1, r1, #2
 8010f10:	420e      	tst	r6, r1
 8010f12:	d08f      	beq.n	8010e34 <__ssvfscanf_r+0x1190>
 8010f14:	496c      	ldr	r1, [pc, #432]	; (80110c8 <__ssvfscanf_r+0x1424>)
 8010f16:	400e      	ands	r6, r1
 8010f18:	69f9      	ldr	r1, [r7, #28]
 8010f1a:	6139      	str	r1, [r7, #16]
 8010f1c:	e738      	b.n	8010d90 <__ssvfscanf_r+0x10ec>
 8010f1e:	2103      	movs	r1, #3
 8010f20:	e76d      	b.n	8010dfe <__ssvfscanf_r+0x115a>
 8010f22:	2102      	movs	r1, #2
 8010f24:	e76b      	b.n	8010dfe <__ssvfscanf_r+0x115a>
 8010f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010f28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f2a:	f001 fdc9 	bl	8012ac0 <__ssrefill_r>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d100      	bne.n	8010f34 <__ssvfscanf_r+0x1290>
 8010f32:	e723      	b.n	8010d7c <__ssvfscanf_r+0x10d8>
 8010f34:	e77e      	b.n	8010e34 <__ssvfscanf_r+0x1190>
 8010f36:	1e63      	subs	r3, r4, #1
 8010f38:	2b06      	cmp	r3, #6
 8010f3a:	d825      	bhi.n	8010f88 <__ssvfscanf_r+0x12e4>
 8010f3c:	2c02      	cmp	r4, #2
 8010f3e:	d837      	bhi.n	8010fb0 <__ssvfscanf_r+0x130c>
 8010f40:	238c      	movs	r3, #140	; 0x8c
 8010f42:	2248      	movs	r2, #72	; 0x48
 8010f44:	005b      	lsls	r3, r3, #1
 8010f46:	189b      	adds	r3, r3, r2
 8010f48:	19db      	adds	r3, r3, r7
 8010f4a:	429d      	cmp	r5, r3
 8010f4c:	d801      	bhi.n	8010f52 <__ssvfscanf_r+0x12ae>
 8010f4e:	f7fe ffa6 	bl	800fe9e <__ssvfscanf_r+0x1fa>
 8010f52:	3d01      	subs	r5, #1
 8010f54:	7829      	ldrb	r1, [r5, #0]
 8010f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f5a:	f001 fd75 	bl	8012a48 <_sungetc_r>
 8010f5e:	e7ef      	b.n	8010f40 <__ssvfscanf_r+0x129c>
 8010f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f64:	3b01      	subs	r3, #1
 8010f66:	7819      	ldrb	r1, [r3, #0]
 8010f68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f6c:	f001 fd6c 	bl	8012a48 <_sungetc_r>
 8010f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f72:	6a3a      	ldr	r2, [r7, #32]
 8010f74:	189b      	adds	r3, r3, r2
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	2b03      	cmp	r3, #3
 8010f7a:	d8f1      	bhi.n	8010f60 <__ssvfscanf_r+0x12bc>
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7e:	3c03      	subs	r4, #3
 8010f80:	b2e4      	uxtb	r4, r4
 8010f82:	1b1b      	subs	r3, r3, r4
 8010f84:	1b2d      	subs	r5, r5, r4
 8010f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f88:	05f3      	lsls	r3, r6, #23
 8010f8a:	d52f      	bpl.n	8010fec <__ssvfscanf_r+0x1348>
 8010f8c:	0573      	lsls	r3, r6, #21
 8010f8e:	d514      	bpl.n	8010fba <__ssvfscanf_r+0x1316>
 8010f90:	238c      	movs	r3, #140	; 0x8c
 8010f92:	2248      	movs	r2, #72	; 0x48
 8010f94:	005b      	lsls	r3, r3, #1
 8010f96:	189b      	adds	r3, r3, r2
 8010f98:	19db      	adds	r3, r3, r7
 8010f9a:	429d      	cmp	r5, r3
 8010f9c:	d801      	bhi.n	8010fa2 <__ssvfscanf_r+0x12fe>
 8010f9e:	f7fe ff7e 	bl	800fe9e <__ssvfscanf_r+0x1fa>
 8010fa2:	3d01      	subs	r5, #1
 8010fa4:	7829      	ldrb	r1, [r5, #0]
 8010fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fa8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010faa:	f001 fd4d 	bl	8012a48 <_sungetc_r>
 8010fae:	e7ef      	b.n	8010f90 <__ssvfscanf_r+0x12ec>
 8010fb0:	1b63      	subs	r3, r4, r5
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	63fd      	str	r5, [r7, #60]	; 0x3c
 8010fb6:	623b      	str	r3, [r7, #32]
 8010fb8:	e7da      	b.n	8010f70 <__ssvfscanf_r+0x12cc>
 8010fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fbc:	1e6c      	subs	r4, r5, #1
 8010fbe:	7821      	ldrb	r1, [r4, #0]
 8010fc0:	3b01      	subs	r3, #1
 8010fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fc4:	2965      	cmp	r1, #101	; 0x65
 8010fc6:	d00a      	beq.n	8010fde <__ssvfscanf_r+0x133a>
 8010fc8:	2945      	cmp	r1, #69	; 0x45
 8010fca:	d008      	beq.n	8010fde <__ssvfscanf_r+0x133a>
 8010fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fd0:	f001 fd3a 	bl	8012a48 <_sungetc_r>
 8010fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fd6:	1eac      	subs	r4, r5, #2
 8010fd8:	3b02      	subs	r3, #2
 8010fda:	7821      	ldrb	r1, [r4, #0]
 8010fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010fde:	0025      	movs	r5, r4
 8010fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010fe4:	f001 fd30 	bl	8012a48 <_sungetc_r>
 8010fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fea:	63bb      	str	r3, [r7, #56]	; 0x38
 8010fec:	2310      	movs	r3, #16
 8010fee:	0032      	movs	r2, r6
 8010ff0:	401a      	ands	r2, r3
 8010ff2:	421e      	tst	r6, r3
 8010ff4:	d001      	beq.n	8010ffa <__ssvfscanf_r+0x1356>
 8010ff6:	f7fe fe71 	bl	800fcdc <__ssvfscanf_r+0x38>
 8010ffa:	23c0      	movs	r3, #192	; 0xc0
 8010ffc:	2180      	movs	r1, #128	; 0x80
 8010ffe:	00db      	lsls	r3, r3, #3
 8011000:	702a      	strb	r2, [r5, #0]
 8011002:	4033      	ands	r3, r6
 8011004:	00c9      	lsls	r1, r1, #3
 8011006:	428b      	cmp	r3, r1
 8011008:	d11f      	bne.n	801104a <__ssvfscanf_r+0x13a6>
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	69fa      	ldr	r2, [r7, #28]
 801100e:	69f9      	ldr	r1, [r7, #28]
 8011010:	1a9a      	subs	r2, r3, r2
 8011012:	428b      	cmp	r3, r1
 8011014:	d125      	bne.n	8011062 <__ssvfscanf_r+0x13be>
 8011016:	238c      	movs	r3, #140	; 0x8c
 8011018:	2148      	movs	r1, #72	; 0x48
 801101a:	005b      	lsls	r3, r3, #1
 801101c:	185b      	adds	r3, r3, r1
 801101e:	19d9      	adds	r1, r3, r7
 8011020:	2200      	movs	r2, #0
 8011022:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011024:	f7fb fef0 	bl	800ce08 <_strtod_r>
 8011028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102a:	0004      	movs	r4, r0
 801102c:	3304      	adds	r3, #4
 801102e:	000d      	movs	r5, r1
 8011030:	623b      	str	r3, [r7, #32]
 8011032:	07f3      	lsls	r3, r6, #31
 8011034:	d523      	bpl.n	801107e <__ssvfscanf_r+0x13da>
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	601c      	str	r4, [r3, #0]
 801103c:	605d      	str	r5, [r3, #4]
 801103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011040:	3301      	adds	r3, #1
 8011042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011044:	6a3b      	ldr	r3, [r7, #32]
 8011046:	f7fe ffa5 	bl	800ff94 <__ssvfscanf_r+0x2f0>
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d0e2      	beq.n	8011016 <__ssvfscanf_r+0x1372>
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011054:	1c59      	adds	r1, r3, #1
 8011056:	230a      	movs	r3, #10
 8011058:	f7fb ff72 	bl	800cf40 <_strtol_r>
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	687d      	ldr	r5, [r7, #4]
 8011060:	1ac2      	subs	r2, r0, r3
 8011062:	2148      	movs	r1, #72	; 0x48
 8011064:	4b19      	ldr	r3, [pc, #100]	; (80110cc <__ssvfscanf_r+0x1428>)
 8011066:	185b      	adds	r3, r3, r1
 8011068:	19db      	adds	r3, r3, r7
 801106a:	429d      	cmp	r5, r3
 801106c:	d302      	bcc.n	8011074 <__ssvfscanf_r+0x13d0>
 801106e:	4b18      	ldr	r3, [pc, #96]	; (80110d0 <__ssvfscanf_r+0x142c>)
 8011070:	185b      	adds	r3, r3, r1
 8011072:	19dd      	adds	r5, r3, r7
 8011074:	0028      	movs	r0, r5
 8011076:	4917      	ldr	r1, [pc, #92]	; (80110d4 <__ssvfscanf_r+0x1430>)
 8011078:	f7fc f8fc 	bl	800d274 <sprintf>
 801107c:	e7cb      	b.n	8011016 <__ssvfscanf_r+0x1372>
 801107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011084:	07b6      	lsls	r6, r6, #30
 8011086:	d4d8      	bmi.n	801103a <__ssvfscanf_r+0x1396>
 8011088:	0002      	movs	r2, r0
 801108a:	000b      	movs	r3, r1
 801108c:	f7f1 f932 	bl	80022f4 <__aeabi_dcmpun>
 8011090:	2800      	cmp	r0, #0
 8011092:	d005      	beq.n	80110a0 <__ssvfscanf_r+0x13fc>
 8011094:	4810      	ldr	r0, [pc, #64]	; (80110d8 <__ssvfscanf_r+0x1434>)
 8011096:	f7fc fabf 	bl	800d618 <nanf>
 801109a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801109c:	6018      	str	r0, [r3, #0]
 801109e:	e7ce      	b.n	801103e <__ssvfscanf_r+0x139a>
 80110a0:	0020      	movs	r0, r4
 80110a2:	0029      	movs	r1, r5
 80110a4:	f7f1 f9d0 	bl	8002448 <__aeabi_d2f>
 80110a8:	e7f7      	b.n	801109a <__ssvfscanf_r+0x13f6>
 80110aa:	00a3      	lsls	r3, r4, #2
 80110ac:	18ed      	adds	r5, r5, r3
 80110ae:	682b      	ldr	r3, [r5, #0]
 80110b0:	3401      	adds	r4, #1
 80110b2:	6818      	ldr	r0, [r3, #0]
 80110b4:	f7fa fe58 	bl	800bd68 <free>
 80110b8:	2200      	movs	r2, #0
 80110ba:	682b      	ldr	r3, [r5, #0]
 80110bc:	601a      	str	r2, [r3, #0]
 80110be:	f7fe ffc3 	bl	8010048 <__ssvfscanf_r+0x3a4>
 80110c2:	46c0      	nop			; (mov r8, r8)
 80110c4:	fffff07f 	.word	0xfffff07f
 80110c8:	fffffd7f 	.word	0xfffffd7f
 80110cc:	0000026b 	.word	0x0000026b
 80110d0:	0000026a 	.word	0x0000026a
 80110d4:	08015e40 	.word	0x08015e40
 80110d8:	08015ea3 	.word	0x08015ea3

080110dc <_fclose_r>:
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	0005      	movs	r5, r0
 80110e0:	1e0c      	subs	r4, r1, #0
 80110e2:	d102      	bne.n	80110ea <_fclose_r+0xe>
 80110e4:	2600      	movs	r6, #0
 80110e6:	0030      	movs	r0, r6
 80110e8:	bd70      	pop	{r4, r5, r6, pc}
 80110ea:	2800      	cmp	r0, #0
 80110ec:	d004      	beq.n	80110f8 <_fclose_r+0x1c>
 80110ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d101      	bne.n	80110f8 <_fclose_r+0x1c>
 80110f4:	f7fc f856 	bl	800d1a4 <__sinit>
 80110f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110fa:	07db      	lsls	r3, r3, #31
 80110fc:	d405      	bmi.n	801110a <_fclose_r+0x2e>
 80110fe:	89a3      	ldrh	r3, [r4, #12]
 8011100:	059b      	lsls	r3, r3, #22
 8011102:	d402      	bmi.n	801110a <_fclose_r+0x2e>
 8011104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011106:	f7fc fa6b 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 801110a:	220c      	movs	r2, #12
 801110c:	5ea3      	ldrsh	r3, [r4, r2]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d109      	bne.n	8011126 <_fclose_r+0x4a>
 8011112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011114:	3301      	adds	r3, #1
 8011116:	0016      	movs	r6, r2
 8011118:	401e      	ands	r6, r3
 801111a:	421a      	tst	r2, r3
 801111c:	d1e2      	bne.n	80110e4 <_fclose_r+0x8>
 801111e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011120:	f7fc fa5f 	bl	800d5e2 <__retarget_lock_release_recursive>
 8011124:	e7df      	b.n	80110e6 <_fclose_r+0xa>
 8011126:	0021      	movs	r1, r4
 8011128:	0028      	movs	r0, r5
 801112a:	f000 f837 	bl	801119c <__sflush_r>
 801112e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011130:	0006      	movs	r6, r0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d006      	beq.n	8011144 <_fclose_r+0x68>
 8011136:	0028      	movs	r0, r5
 8011138:	69e1      	ldr	r1, [r4, #28]
 801113a:	4798      	blx	r3
 801113c:	2800      	cmp	r0, #0
 801113e:	da01      	bge.n	8011144 <_fclose_r+0x68>
 8011140:	2601      	movs	r6, #1
 8011142:	4276      	negs	r6, r6
 8011144:	89a3      	ldrh	r3, [r4, #12]
 8011146:	061b      	lsls	r3, r3, #24
 8011148:	d503      	bpl.n	8011152 <_fclose_r+0x76>
 801114a:	0028      	movs	r0, r5
 801114c:	6921      	ldr	r1, [r4, #16]
 801114e:	f7fc facf 	bl	800d6f0 <_free_r>
 8011152:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011154:	2900      	cmp	r1, #0
 8011156:	d008      	beq.n	801116a <_fclose_r+0x8e>
 8011158:	0023      	movs	r3, r4
 801115a:	3340      	adds	r3, #64	; 0x40
 801115c:	4299      	cmp	r1, r3
 801115e:	d002      	beq.n	8011166 <_fclose_r+0x8a>
 8011160:	0028      	movs	r0, r5
 8011162:	f7fc fac5 	bl	800d6f0 <_free_r>
 8011166:	2300      	movs	r3, #0
 8011168:	6323      	str	r3, [r4, #48]	; 0x30
 801116a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801116c:	2900      	cmp	r1, #0
 801116e:	d004      	beq.n	801117a <_fclose_r+0x9e>
 8011170:	0028      	movs	r0, r5
 8011172:	f7fc fabd 	bl	800d6f0 <_free_r>
 8011176:	2300      	movs	r3, #0
 8011178:	6463      	str	r3, [r4, #68]	; 0x44
 801117a:	f7fc f803 	bl	800d184 <__sfp_lock_acquire>
 801117e:	2300      	movs	r3, #0
 8011180:	81a3      	strh	r3, [r4, #12]
 8011182:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011184:	07db      	lsls	r3, r3, #31
 8011186:	d402      	bmi.n	801118e <_fclose_r+0xb2>
 8011188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801118a:	f7fc fa2a 	bl	800d5e2 <__retarget_lock_release_recursive>
 801118e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011190:	f7fc fa25 	bl	800d5de <__retarget_lock_close_recursive>
 8011194:	f7fb fffe 	bl	800d194 <__sfp_lock_release>
 8011198:	e7a5      	b.n	80110e6 <_fclose_r+0xa>
	...

0801119c <__sflush_r>:
 801119c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801119e:	230c      	movs	r3, #12
 80111a0:	5eca      	ldrsh	r2, [r1, r3]
 80111a2:	000c      	movs	r4, r1
 80111a4:	0005      	movs	r5, r0
 80111a6:	b291      	uxth	r1, r2
 80111a8:	0713      	lsls	r3, r2, #28
 80111aa:	d464      	bmi.n	8011276 <__sflush_r+0xda>
 80111ac:	2380      	movs	r3, #128	; 0x80
 80111ae:	011b      	lsls	r3, r3, #4
 80111b0:	4313      	orrs	r3, r2
 80111b2:	6862      	ldr	r2, [r4, #4]
 80111b4:	81a3      	strh	r3, [r4, #12]
 80111b6:	2a00      	cmp	r2, #0
 80111b8:	dc04      	bgt.n	80111c4 <__sflush_r+0x28>
 80111ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80111bc:	2a00      	cmp	r2, #0
 80111be:	dc01      	bgt.n	80111c4 <__sflush_r+0x28>
 80111c0:	2000      	movs	r0, #0
 80111c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80111c4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80111c6:	2f00      	cmp	r7, #0
 80111c8:	d0fa      	beq.n	80111c0 <__sflush_r+0x24>
 80111ca:	2200      	movs	r2, #0
 80111cc:	2080      	movs	r0, #128	; 0x80
 80111ce:	682e      	ldr	r6, [r5, #0]
 80111d0:	602a      	str	r2, [r5, #0]
 80111d2:	001a      	movs	r2, r3
 80111d4:	0140      	lsls	r0, r0, #5
 80111d6:	69e1      	ldr	r1, [r4, #28]
 80111d8:	4002      	ands	r2, r0
 80111da:	4203      	tst	r3, r0
 80111dc:	d038      	beq.n	8011250 <__sflush_r+0xb4>
 80111de:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80111e0:	89a3      	ldrh	r3, [r4, #12]
 80111e2:	075b      	lsls	r3, r3, #29
 80111e4:	d506      	bpl.n	80111f4 <__sflush_r+0x58>
 80111e6:	6863      	ldr	r3, [r4, #4]
 80111e8:	1ac0      	subs	r0, r0, r3
 80111ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d001      	beq.n	80111f4 <__sflush_r+0x58>
 80111f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80111f2:	1ac0      	subs	r0, r0, r3
 80111f4:	0002      	movs	r2, r0
 80111f6:	2300      	movs	r3, #0
 80111f8:	0028      	movs	r0, r5
 80111fa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80111fc:	69e1      	ldr	r1, [r4, #28]
 80111fe:	47b8      	blx	r7
 8011200:	89a2      	ldrh	r2, [r4, #12]
 8011202:	1c43      	adds	r3, r0, #1
 8011204:	d106      	bne.n	8011214 <__sflush_r+0x78>
 8011206:	6829      	ldr	r1, [r5, #0]
 8011208:	291d      	cmp	r1, #29
 801120a:	d830      	bhi.n	801126e <__sflush_r+0xd2>
 801120c:	4b2c      	ldr	r3, [pc, #176]	; (80112c0 <__sflush_r+0x124>)
 801120e:	410b      	asrs	r3, r1
 8011210:	07db      	lsls	r3, r3, #31
 8011212:	d42c      	bmi.n	801126e <__sflush_r+0xd2>
 8011214:	4b2b      	ldr	r3, [pc, #172]	; (80112c4 <__sflush_r+0x128>)
 8011216:	4013      	ands	r3, r2
 8011218:	2200      	movs	r2, #0
 801121a:	6062      	str	r2, [r4, #4]
 801121c:	6922      	ldr	r2, [r4, #16]
 801121e:	b21b      	sxth	r3, r3
 8011220:	81a3      	strh	r3, [r4, #12]
 8011222:	6022      	str	r2, [r4, #0]
 8011224:	04db      	lsls	r3, r3, #19
 8011226:	d505      	bpl.n	8011234 <__sflush_r+0x98>
 8011228:	1c43      	adds	r3, r0, #1
 801122a:	d102      	bne.n	8011232 <__sflush_r+0x96>
 801122c:	682b      	ldr	r3, [r5, #0]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d100      	bne.n	8011234 <__sflush_r+0x98>
 8011232:	6520      	str	r0, [r4, #80]	; 0x50
 8011234:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011236:	602e      	str	r6, [r5, #0]
 8011238:	2900      	cmp	r1, #0
 801123a:	d0c1      	beq.n	80111c0 <__sflush_r+0x24>
 801123c:	0023      	movs	r3, r4
 801123e:	3340      	adds	r3, #64	; 0x40
 8011240:	4299      	cmp	r1, r3
 8011242:	d002      	beq.n	801124a <__sflush_r+0xae>
 8011244:	0028      	movs	r0, r5
 8011246:	f7fc fa53 	bl	800d6f0 <_free_r>
 801124a:	2000      	movs	r0, #0
 801124c:	6320      	str	r0, [r4, #48]	; 0x30
 801124e:	e7b8      	b.n	80111c2 <__sflush_r+0x26>
 8011250:	2301      	movs	r3, #1
 8011252:	0028      	movs	r0, r5
 8011254:	47b8      	blx	r7
 8011256:	1c43      	adds	r3, r0, #1
 8011258:	d1c2      	bne.n	80111e0 <__sflush_r+0x44>
 801125a:	682b      	ldr	r3, [r5, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d0bf      	beq.n	80111e0 <__sflush_r+0x44>
 8011260:	2b1d      	cmp	r3, #29
 8011262:	d001      	beq.n	8011268 <__sflush_r+0xcc>
 8011264:	2b16      	cmp	r3, #22
 8011266:	d101      	bne.n	801126c <__sflush_r+0xd0>
 8011268:	602e      	str	r6, [r5, #0]
 801126a:	e7a9      	b.n	80111c0 <__sflush_r+0x24>
 801126c:	89a2      	ldrh	r2, [r4, #12]
 801126e:	2340      	movs	r3, #64	; 0x40
 8011270:	4313      	orrs	r3, r2
 8011272:	81a3      	strh	r3, [r4, #12]
 8011274:	e7a5      	b.n	80111c2 <__sflush_r+0x26>
 8011276:	6926      	ldr	r6, [r4, #16]
 8011278:	2e00      	cmp	r6, #0
 801127a:	d0a1      	beq.n	80111c0 <__sflush_r+0x24>
 801127c:	6827      	ldr	r7, [r4, #0]
 801127e:	6026      	str	r6, [r4, #0]
 8011280:	1bbb      	subs	r3, r7, r6
 8011282:	9301      	str	r3, [sp, #4]
 8011284:	2300      	movs	r3, #0
 8011286:	0789      	lsls	r1, r1, #30
 8011288:	d100      	bne.n	801128c <__sflush_r+0xf0>
 801128a:	6963      	ldr	r3, [r4, #20]
 801128c:	60a3      	str	r3, [r4, #8]
 801128e:	9b01      	ldr	r3, [sp, #4]
 8011290:	2b00      	cmp	r3, #0
 8011292:	dc00      	bgt.n	8011296 <__sflush_r+0xfa>
 8011294:	e794      	b.n	80111c0 <__sflush_r+0x24>
 8011296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011298:	0032      	movs	r2, r6
 801129a:	001f      	movs	r7, r3
 801129c:	0028      	movs	r0, r5
 801129e:	9b01      	ldr	r3, [sp, #4]
 80112a0:	69e1      	ldr	r1, [r4, #28]
 80112a2:	47b8      	blx	r7
 80112a4:	2800      	cmp	r0, #0
 80112a6:	dc06      	bgt.n	80112b6 <__sflush_r+0x11a>
 80112a8:	2340      	movs	r3, #64	; 0x40
 80112aa:	2001      	movs	r0, #1
 80112ac:	89a2      	ldrh	r2, [r4, #12]
 80112ae:	4240      	negs	r0, r0
 80112b0:	4313      	orrs	r3, r2
 80112b2:	81a3      	strh	r3, [r4, #12]
 80112b4:	e785      	b.n	80111c2 <__sflush_r+0x26>
 80112b6:	9b01      	ldr	r3, [sp, #4]
 80112b8:	1836      	adds	r6, r6, r0
 80112ba:	1a1b      	subs	r3, r3, r0
 80112bc:	9301      	str	r3, [sp, #4]
 80112be:	e7e6      	b.n	801128e <__sflush_r+0xf2>
 80112c0:	dfbffffe 	.word	0xdfbffffe
 80112c4:	fffff7ff 	.word	0xfffff7ff

080112c8 <_fflush_r>:
 80112c8:	b570      	push	{r4, r5, r6, lr}
 80112ca:	0005      	movs	r5, r0
 80112cc:	000c      	movs	r4, r1
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d004      	beq.n	80112dc <_fflush_r+0x14>
 80112d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d101      	bne.n	80112dc <_fflush_r+0x14>
 80112d8:	f7fb ff64 	bl	800d1a4 <__sinit>
 80112dc:	220c      	movs	r2, #12
 80112de:	5ea3      	ldrsh	r3, [r4, r2]
 80112e0:	1e1e      	subs	r6, r3, #0
 80112e2:	d015      	beq.n	8011310 <_fflush_r+0x48>
 80112e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80112e6:	07d2      	lsls	r2, r2, #31
 80112e8:	d404      	bmi.n	80112f4 <_fflush_r+0x2c>
 80112ea:	059b      	lsls	r3, r3, #22
 80112ec:	d402      	bmi.n	80112f4 <_fflush_r+0x2c>
 80112ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112f0:	f7fc f976 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 80112f4:	0021      	movs	r1, r4
 80112f6:	0028      	movs	r0, r5
 80112f8:	f7ff ff50 	bl	801119c <__sflush_r>
 80112fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112fe:	0006      	movs	r6, r0
 8011300:	07db      	lsls	r3, r3, #31
 8011302:	d405      	bmi.n	8011310 <_fflush_r+0x48>
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	059b      	lsls	r3, r3, #22
 8011308:	d402      	bmi.n	8011310 <_fflush_r+0x48>
 801130a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801130c:	f7fc f969 	bl	800d5e2 <__retarget_lock_release_recursive>
 8011310:	0030      	movs	r0, r6
 8011312:	bd70      	pop	{r4, r5, r6, pc}

08011314 <__sccl>:
 8011314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011316:	780b      	ldrb	r3, [r1, #0]
 8011318:	0004      	movs	r4, r0
 801131a:	2b5e      	cmp	r3, #94	; 0x5e
 801131c:	d019      	beq.n	8011352 <__sccl+0x3e>
 801131e:	2200      	movs	r2, #0
 8011320:	1c4d      	adds	r5, r1, #1
 8011322:	0021      	movs	r1, r4
 8011324:	1c60      	adds	r0, r4, #1
 8011326:	30ff      	adds	r0, #255	; 0xff
 8011328:	700a      	strb	r2, [r1, #0]
 801132a:	3101      	adds	r1, #1
 801132c:	4281      	cmp	r1, r0
 801132e:	d1fb      	bne.n	8011328 <__sccl+0x14>
 8011330:	1e68      	subs	r0, r5, #1
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00c      	beq.n	8011350 <__sccl+0x3c>
 8011336:	2101      	movs	r1, #1
 8011338:	262d      	movs	r6, #45	; 0x2d
 801133a:	404a      	eors	r2, r1
 801133c:	0028      	movs	r0, r5
 801133e:	54e2      	strb	r2, [r4, r3]
 8011340:	7801      	ldrb	r1, [r0, #0]
 8011342:	1c45      	adds	r5, r0, #1
 8011344:	292d      	cmp	r1, #45	; 0x2d
 8011346:	d00c      	beq.n	8011362 <__sccl+0x4e>
 8011348:	295d      	cmp	r1, #93	; 0x5d
 801134a:	d01d      	beq.n	8011388 <__sccl+0x74>
 801134c:	2900      	cmp	r1, #0
 801134e:	d104      	bne.n	801135a <__sccl+0x46>
 8011350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011352:	2201      	movs	r2, #1
 8011354:	784b      	ldrb	r3, [r1, #1]
 8011356:	1c8d      	adds	r5, r1, #2
 8011358:	e7e3      	b.n	8011322 <__sccl+0xe>
 801135a:	000b      	movs	r3, r1
 801135c:	e7ee      	b.n	801133c <__sccl+0x28>
 801135e:	0033      	movs	r3, r6
 8011360:	e7ec      	b.n	801133c <__sccl+0x28>
 8011362:	7841      	ldrb	r1, [r0, #1]
 8011364:	295d      	cmp	r1, #93	; 0x5d
 8011366:	d0fa      	beq.n	801135e <__sccl+0x4a>
 8011368:	428b      	cmp	r3, r1
 801136a:	dcf8      	bgt.n	801135e <__sccl+0x4a>
 801136c:	001d      	movs	r5, r3
 801136e:	3002      	adds	r0, #2
 8011370:	3501      	adds	r5, #1
 8011372:	5562      	strb	r2, [r4, r5]
 8011374:	42a9      	cmp	r1, r5
 8011376:	dcfb      	bgt.n	8011370 <__sccl+0x5c>
 8011378:	2500      	movs	r5, #0
 801137a:	1c5f      	adds	r7, r3, #1
 801137c:	428b      	cmp	r3, r1
 801137e:	da01      	bge.n	8011384 <__sccl+0x70>
 8011380:	1acd      	subs	r5, r1, r3
 8011382:	3d01      	subs	r5, #1
 8011384:	197b      	adds	r3, r7, r5
 8011386:	e7db      	b.n	8011340 <__sccl+0x2c>
 8011388:	0028      	movs	r0, r5
 801138a:	e7e1      	b.n	8011350 <__sccl+0x3c>

0801138c <_localeconv_r>:
 801138c:	4800      	ldr	r0, [pc, #0]	; (8011390 <_localeconv_r+0x4>)
 801138e:	4770      	bx	lr
 8011390:	20000534 	.word	0x20000534

08011394 <__libc_fini_array>:
 8011394:	b570      	push	{r4, r5, r6, lr}
 8011396:	4c07      	ldr	r4, [pc, #28]	; (80113b4 <__libc_fini_array+0x20>)
 8011398:	4d07      	ldr	r5, [pc, #28]	; (80113b8 <__libc_fini_array+0x24>)
 801139a:	1b64      	subs	r4, r4, r5
 801139c:	10a4      	asrs	r4, r4, #2
 801139e:	2c00      	cmp	r4, #0
 80113a0:	d102      	bne.n	80113a8 <__libc_fini_array+0x14>
 80113a2:	f002 fd47 	bl	8013e34 <_fini>
 80113a6:	bd70      	pop	{r4, r5, r6, pc}
 80113a8:	3c01      	subs	r4, #1
 80113aa:	00a3      	lsls	r3, r4, #2
 80113ac:	58eb      	ldr	r3, [r5, r3]
 80113ae:	4798      	blx	r3
 80113b0:	e7f5      	b.n	801139e <__libc_fini_array+0xa>
 80113b2:	46c0      	nop			; (mov r8, r8)
 80113b4:	08015f40 	.word	0x08015f40
 80113b8:	08015f3c 	.word	0x08015f3c

080113bc <memchr>:
 80113bc:	b2c9      	uxtb	r1, r1
 80113be:	1882      	adds	r2, r0, r2
 80113c0:	4290      	cmp	r0, r2
 80113c2:	d101      	bne.n	80113c8 <memchr+0xc>
 80113c4:	2000      	movs	r0, #0
 80113c6:	4770      	bx	lr
 80113c8:	7803      	ldrb	r3, [r0, #0]
 80113ca:	428b      	cmp	r3, r1
 80113cc:	d0fb      	beq.n	80113c6 <memchr+0xa>
 80113ce:	3001      	adds	r0, #1
 80113d0:	e7f6      	b.n	80113c0 <memchr+0x4>
	...

080113d4 <frexp>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	0014      	movs	r4, r2
 80113d8:	2500      	movs	r5, #0
 80113da:	6025      	str	r5, [r4, #0]
 80113dc:	4d10      	ldr	r5, [pc, #64]	; (8011420 <frexp+0x4c>)
 80113de:	004b      	lsls	r3, r1, #1
 80113e0:	000a      	movs	r2, r1
 80113e2:	085b      	lsrs	r3, r3, #1
 80113e4:	42ab      	cmp	r3, r5
 80113e6:	dc1a      	bgt.n	801141e <frexp+0x4a>
 80113e8:	001d      	movs	r5, r3
 80113ea:	4305      	orrs	r5, r0
 80113ec:	d017      	beq.n	801141e <frexp+0x4a>
 80113ee:	4d0d      	ldr	r5, [pc, #52]	; (8011424 <frexp+0x50>)
 80113f0:	4229      	tst	r1, r5
 80113f2:	d109      	bne.n	8011408 <frexp+0x34>
 80113f4:	2200      	movs	r2, #0
 80113f6:	4b0c      	ldr	r3, [pc, #48]	; (8011428 <frexp+0x54>)
 80113f8:	f7f0 f938 	bl	800166c <__aeabi_dmul>
 80113fc:	2536      	movs	r5, #54	; 0x36
 80113fe:	000a      	movs	r2, r1
 8011400:	004b      	lsls	r3, r1, #1
 8011402:	426d      	negs	r5, r5
 8011404:	085b      	lsrs	r3, r3, #1
 8011406:	6025      	str	r5, [r4, #0]
 8011408:	4d08      	ldr	r5, [pc, #32]	; (801142c <frexp+0x58>)
 801140a:	151b      	asrs	r3, r3, #20
 801140c:	195b      	adds	r3, r3, r5
 801140e:	6825      	ldr	r5, [r4, #0]
 8011410:	18eb      	adds	r3, r5, r3
 8011412:	6023      	str	r3, [r4, #0]
 8011414:	4b06      	ldr	r3, [pc, #24]	; (8011430 <frexp+0x5c>)
 8011416:	401a      	ands	r2, r3
 8011418:	4b06      	ldr	r3, [pc, #24]	; (8011434 <frexp+0x60>)
 801141a:	4313      	orrs	r3, r2
 801141c:	0019      	movs	r1, r3
 801141e:	bd70      	pop	{r4, r5, r6, pc}
 8011420:	7fefffff 	.word	0x7fefffff
 8011424:	7ff00000 	.word	0x7ff00000
 8011428:	43500000 	.word	0x43500000
 801142c:	fffffc02 	.word	0xfffffc02
 8011430:	800fffff 	.word	0x800fffff
 8011434:	3fe00000 	.word	0x3fe00000

08011438 <__register_exitproc>:
 8011438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801143a:	4f1c      	ldr	r7, [pc, #112]	; (80114ac <__register_exitproc+0x74>)
 801143c:	0004      	movs	r4, r0
 801143e:	6838      	ldr	r0, [r7, #0]
 8011440:	0016      	movs	r6, r2
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	9100      	str	r1, [sp, #0]
 8011446:	f7fc f8cb 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 801144a:	4a19      	ldr	r2, [pc, #100]	; (80114b0 <__register_exitproc+0x78>)
 801144c:	6813      	ldr	r3, [r2, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <__register_exitproc+0x1e>
 8011452:	4b18      	ldr	r3, [pc, #96]	; (80114b4 <__register_exitproc+0x7c>)
 8011454:	6013      	str	r3, [r2, #0]
 8011456:	685a      	ldr	r2, [r3, #4]
 8011458:	6838      	ldr	r0, [r7, #0]
 801145a:	2a1f      	cmp	r2, #31
 801145c:	dd04      	ble.n	8011468 <__register_exitproc+0x30>
 801145e:	f7fc f8c0 	bl	800d5e2 <__retarget_lock_release_recursive>
 8011462:	2001      	movs	r0, #1
 8011464:	4240      	negs	r0, r0
 8011466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011468:	2c00      	cmp	r4, #0
 801146a:	d014      	beq.n	8011496 <__register_exitproc+0x5e>
 801146c:	0091      	lsls	r1, r2, #2
 801146e:	1859      	adds	r1, r3, r1
 8011470:	000f      	movs	r7, r1
 8011472:	3788      	adds	r7, #136	; 0x88
 8011474:	603e      	str	r6, [r7, #0]
 8011476:	2701      	movs	r7, #1
 8011478:	001e      	movs	r6, r3
 801147a:	4097      	lsls	r7, r2
 801147c:	3685      	adds	r6, #133	; 0x85
 801147e:	36ff      	adds	r6, #255	; 0xff
 8011480:	6875      	ldr	r5, [r6, #4]
 8011482:	31fc      	adds	r1, #252	; 0xfc
 8011484:	433d      	orrs	r5, r7
 8011486:	6075      	str	r5, [r6, #4]
 8011488:	9d01      	ldr	r5, [sp, #4]
 801148a:	60cd      	str	r5, [r1, #12]
 801148c:	2c02      	cmp	r4, #2
 801148e:	d102      	bne.n	8011496 <__register_exitproc+0x5e>
 8011490:	68b1      	ldr	r1, [r6, #8]
 8011492:	4339      	orrs	r1, r7
 8011494:	60b1      	str	r1, [r6, #8]
 8011496:	1c51      	adds	r1, r2, #1
 8011498:	6059      	str	r1, [r3, #4]
 801149a:	3202      	adds	r2, #2
 801149c:	9900      	ldr	r1, [sp, #0]
 801149e:	0092      	lsls	r2, r2, #2
 80114a0:	50d1      	str	r1, [r2, r3]
 80114a2:	f7fc f89e 	bl	800d5e2 <__retarget_lock_release_recursive>
 80114a6:	2000      	movs	r0, #0
 80114a8:	e7dd      	b.n	8011466 <__register_exitproc+0x2e>
 80114aa:	46c0      	nop			; (mov r8, r8)
 80114ac:	200006d4 	.word	0x200006d4
 80114b0:	20000dc0 	.word	0x20000dc0
 80114b4:	20000dc4 	.word	0x20000dc4

080114b8 <__assert_func>:
 80114b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80114ba:	0014      	movs	r4, r2
 80114bc:	001a      	movs	r2, r3
 80114be:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <__assert_func+0x2c>)
 80114c0:	0005      	movs	r5, r0
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	000e      	movs	r6, r1
 80114c6:	68d8      	ldr	r0, [r3, #12]
 80114c8:	4b07      	ldr	r3, [pc, #28]	; (80114e8 <__assert_func+0x30>)
 80114ca:	2c00      	cmp	r4, #0
 80114cc:	d101      	bne.n	80114d2 <__assert_func+0x1a>
 80114ce:	4b07      	ldr	r3, [pc, #28]	; (80114ec <__assert_func+0x34>)
 80114d0:	001c      	movs	r4, r3
 80114d2:	4907      	ldr	r1, [pc, #28]	; (80114f0 <__assert_func+0x38>)
 80114d4:	9301      	str	r3, [sp, #4]
 80114d6:	9402      	str	r4, [sp, #8]
 80114d8:	002b      	movs	r3, r5
 80114da:	9600      	str	r6, [sp, #0]
 80114dc:	f001 fa20 	bl	8012920 <fiprintf>
 80114e0:	f002 fb08 	bl	8013af4 <abort>
 80114e4:	200006d0 	.word	0x200006d0
 80114e8:	08015e68 	.word	0x08015e68
 80114ec:	08015ea3 	.word	0x08015ea3
 80114f0:	08015e75 	.word	0x08015e75

080114f4 <_calloc_r>:
 80114f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114f6:	2400      	movs	r4, #0
 80114f8:	0c0b      	lsrs	r3, r1, #16
 80114fa:	0c16      	lsrs	r6, r2, #16
 80114fc:	42a3      	cmp	r3, r4
 80114fe:	d133      	bne.n	8011568 <_calloc_r+0x74>
 8011500:	42a6      	cmp	r6, r4
 8011502:	d121      	bne.n	8011548 <_calloc_r+0x54>
 8011504:	b28b      	uxth	r3, r1
 8011506:	b291      	uxth	r1, r2
 8011508:	4359      	muls	r1, r3
 801150a:	f7fa fc37 	bl	800bd7c <_malloc_r>
 801150e:	1e05      	subs	r5, r0, #0
 8011510:	d033      	beq.n	801157a <_calloc_r+0x86>
 8011512:	0003      	movs	r3, r0
 8011514:	3b08      	subs	r3, #8
 8011516:	685a      	ldr	r2, [r3, #4]
 8011518:	2303      	movs	r3, #3
 801151a:	439a      	bics	r2, r3
 801151c:	3a04      	subs	r2, #4
 801151e:	2a24      	cmp	r2, #36	; 0x24
 8011520:	d832      	bhi.n	8011588 <_calloc_r+0x94>
 8011522:	0003      	movs	r3, r0
 8011524:	2a13      	cmp	r2, #19
 8011526:	d90a      	bls.n	801153e <_calloc_r+0x4a>
 8011528:	6004      	str	r4, [r0, #0]
 801152a:	6044      	str	r4, [r0, #4]
 801152c:	3308      	adds	r3, #8
 801152e:	2a1b      	cmp	r2, #27
 8011530:	d905      	bls.n	801153e <_calloc_r+0x4a>
 8011532:	6084      	str	r4, [r0, #8]
 8011534:	60c4      	str	r4, [r0, #12]
 8011536:	2a24      	cmp	r2, #36	; 0x24
 8011538:	d021      	beq.n	801157e <_calloc_r+0x8a>
 801153a:	0003      	movs	r3, r0
 801153c:	3310      	adds	r3, #16
 801153e:	2200      	movs	r2, #0
 8011540:	601a      	str	r2, [r3, #0]
 8011542:	605a      	str	r2, [r3, #4]
 8011544:	609a      	str	r2, [r3, #8]
 8011546:	e018      	b.n	801157a <_calloc_r+0x86>
 8011548:	1c33      	adds	r3, r6, #0
 801154a:	1c0d      	adds	r5, r1, #0
 801154c:	b289      	uxth	r1, r1
 801154e:	b292      	uxth	r2, r2
 8011550:	434a      	muls	r2, r1
 8011552:	b2ad      	uxth	r5, r5
 8011554:	b299      	uxth	r1, r3
 8011556:	4369      	muls	r1, r5
 8011558:	0c13      	lsrs	r3, r2, #16
 801155a:	18c9      	adds	r1, r1, r3
 801155c:	0c0b      	lsrs	r3, r1, #16
 801155e:	d107      	bne.n	8011570 <_calloc_r+0x7c>
 8011560:	0409      	lsls	r1, r1, #16
 8011562:	b292      	uxth	r2, r2
 8011564:	4311      	orrs	r1, r2
 8011566:	e7d0      	b.n	801150a <_calloc_r+0x16>
 8011568:	2e00      	cmp	r6, #0
 801156a:	d101      	bne.n	8011570 <_calloc_r+0x7c>
 801156c:	1c15      	adds	r5, r2, #0
 801156e:	e7ed      	b.n	801154c <_calloc_r+0x58>
 8011570:	f7fc f80a 	bl	800d588 <__errno>
 8011574:	230c      	movs	r3, #12
 8011576:	2500      	movs	r5, #0
 8011578:	6003      	str	r3, [r0, #0]
 801157a:	0028      	movs	r0, r5
 801157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801157e:	0003      	movs	r3, r0
 8011580:	6104      	str	r4, [r0, #16]
 8011582:	3318      	adds	r3, #24
 8011584:	6144      	str	r4, [r0, #20]
 8011586:	e7da      	b.n	801153e <_calloc_r+0x4a>
 8011588:	2100      	movs	r1, #0
 801158a:	f7fb ff09 	bl	800d3a0 <memset>
 801158e:	e7f4      	b.n	801157a <_calloc_r+0x86>

08011590 <quorem>:
 8011590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011592:	6902      	ldr	r2, [r0, #16]
 8011594:	690b      	ldr	r3, [r1, #16]
 8011596:	b089      	sub	sp, #36	; 0x24
 8011598:	0007      	movs	r7, r0
 801159a:	9104      	str	r1, [sp, #16]
 801159c:	2000      	movs	r0, #0
 801159e:	429a      	cmp	r2, r3
 80115a0:	db69      	blt.n	8011676 <quorem+0xe6>
 80115a2:	3b01      	subs	r3, #1
 80115a4:	009c      	lsls	r4, r3, #2
 80115a6:	9301      	str	r3, [sp, #4]
 80115a8:	000b      	movs	r3, r1
 80115aa:	3314      	adds	r3, #20
 80115ac:	9306      	str	r3, [sp, #24]
 80115ae:	191b      	adds	r3, r3, r4
 80115b0:	9305      	str	r3, [sp, #20]
 80115b2:	003b      	movs	r3, r7
 80115b4:	3314      	adds	r3, #20
 80115b6:	9303      	str	r3, [sp, #12]
 80115b8:	191c      	adds	r4, r3, r4
 80115ba:	9b05      	ldr	r3, [sp, #20]
 80115bc:	6826      	ldr	r6, [r4, #0]
 80115be:	681d      	ldr	r5, [r3, #0]
 80115c0:	0030      	movs	r0, r6
 80115c2:	3501      	adds	r5, #1
 80115c4:	0029      	movs	r1, r5
 80115c6:	f7ee fdb9 	bl	800013c <__udivsi3>
 80115ca:	9002      	str	r0, [sp, #8]
 80115cc:	42ae      	cmp	r6, r5
 80115ce:	d329      	bcc.n	8011624 <quorem+0x94>
 80115d0:	9b06      	ldr	r3, [sp, #24]
 80115d2:	2600      	movs	r6, #0
 80115d4:	469c      	mov	ip, r3
 80115d6:	9d03      	ldr	r5, [sp, #12]
 80115d8:	9606      	str	r6, [sp, #24]
 80115da:	4662      	mov	r2, ip
 80115dc:	ca08      	ldmia	r2!, {r3}
 80115de:	6828      	ldr	r0, [r5, #0]
 80115e0:	4694      	mov	ip, r2
 80115e2:	9a02      	ldr	r2, [sp, #8]
 80115e4:	b299      	uxth	r1, r3
 80115e6:	4351      	muls	r1, r2
 80115e8:	0c1b      	lsrs	r3, r3, #16
 80115ea:	4353      	muls	r3, r2
 80115ec:	1989      	adds	r1, r1, r6
 80115ee:	0c0a      	lsrs	r2, r1, #16
 80115f0:	189b      	adds	r3, r3, r2
 80115f2:	9307      	str	r3, [sp, #28]
 80115f4:	0c1e      	lsrs	r6, r3, #16
 80115f6:	9b06      	ldr	r3, [sp, #24]
 80115f8:	b282      	uxth	r2, r0
 80115fa:	18d2      	adds	r2, r2, r3
 80115fc:	466b      	mov	r3, sp
 80115fe:	b289      	uxth	r1, r1
 8011600:	8b9b      	ldrh	r3, [r3, #28]
 8011602:	1a52      	subs	r2, r2, r1
 8011604:	0c01      	lsrs	r1, r0, #16
 8011606:	1ac9      	subs	r1, r1, r3
 8011608:	1413      	asrs	r3, r2, #16
 801160a:	18cb      	adds	r3, r1, r3
 801160c:	1419      	asrs	r1, r3, #16
 801160e:	b292      	uxth	r2, r2
 8011610:	041b      	lsls	r3, r3, #16
 8011612:	4313      	orrs	r3, r2
 8011614:	c508      	stmia	r5!, {r3}
 8011616:	9b05      	ldr	r3, [sp, #20]
 8011618:	9106      	str	r1, [sp, #24]
 801161a:	4563      	cmp	r3, ip
 801161c:	d2dd      	bcs.n	80115da <quorem+0x4a>
 801161e:	6823      	ldr	r3, [r4, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d030      	beq.n	8011686 <quorem+0xf6>
 8011624:	0038      	movs	r0, r7
 8011626:	9904      	ldr	r1, [sp, #16]
 8011628:	f7fc ff04 	bl	800e434 <__mcmp>
 801162c:	2800      	cmp	r0, #0
 801162e:	db21      	blt.n	8011674 <quorem+0xe4>
 8011630:	0038      	movs	r0, r7
 8011632:	2600      	movs	r6, #0
 8011634:	9b02      	ldr	r3, [sp, #8]
 8011636:	9c04      	ldr	r4, [sp, #16]
 8011638:	3301      	adds	r3, #1
 801163a:	9302      	str	r3, [sp, #8]
 801163c:	3014      	adds	r0, #20
 801163e:	3414      	adds	r4, #20
 8011640:	6803      	ldr	r3, [r0, #0]
 8011642:	cc02      	ldmia	r4!, {r1}
 8011644:	b29d      	uxth	r5, r3
 8011646:	19ad      	adds	r5, r5, r6
 8011648:	b28a      	uxth	r2, r1
 801164a:	1aaa      	subs	r2, r5, r2
 801164c:	0c09      	lsrs	r1, r1, #16
 801164e:	0c1b      	lsrs	r3, r3, #16
 8011650:	1a5b      	subs	r3, r3, r1
 8011652:	1411      	asrs	r1, r2, #16
 8011654:	185b      	adds	r3, r3, r1
 8011656:	141e      	asrs	r6, r3, #16
 8011658:	b292      	uxth	r2, r2
 801165a:	041b      	lsls	r3, r3, #16
 801165c:	4313      	orrs	r3, r2
 801165e:	c008      	stmia	r0!, {r3}
 8011660:	9b05      	ldr	r3, [sp, #20]
 8011662:	42a3      	cmp	r3, r4
 8011664:	d2ec      	bcs.n	8011640 <quorem+0xb0>
 8011666:	9b01      	ldr	r3, [sp, #4]
 8011668:	9a03      	ldr	r2, [sp, #12]
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	18d3      	adds	r3, r2, r3
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	2a00      	cmp	r2, #0
 8011672:	d015      	beq.n	80116a0 <quorem+0x110>
 8011674:	9802      	ldr	r0, [sp, #8]
 8011676:	b009      	add	sp, #36	; 0x24
 8011678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801167a:	6823      	ldr	r3, [r4, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d106      	bne.n	801168e <quorem+0xfe>
 8011680:	9b01      	ldr	r3, [sp, #4]
 8011682:	3b01      	subs	r3, #1
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	9b03      	ldr	r3, [sp, #12]
 8011688:	3c04      	subs	r4, #4
 801168a:	42a3      	cmp	r3, r4
 801168c:	d3f5      	bcc.n	801167a <quorem+0xea>
 801168e:	9b01      	ldr	r3, [sp, #4]
 8011690:	613b      	str	r3, [r7, #16]
 8011692:	e7c7      	b.n	8011624 <quorem+0x94>
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	2a00      	cmp	r2, #0
 8011698:	d106      	bne.n	80116a8 <quorem+0x118>
 801169a:	9a01      	ldr	r2, [sp, #4]
 801169c:	3a01      	subs	r2, #1
 801169e:	9201      	str	r2, [sp, #4]
 80116a0:	9a03      	ldr	r2, [sp, #12]
 80116a2:	3b04      	subs	r3, #4
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d3f5      	bcc.n	8011694 <quorem+0x104>
 80116a8:	9b01      	ldr	r3, [sp, #4]
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	e7e2      	b.n	8011674 <quorem+0xe4>
	...

080116b0 <_dtoa_r>:
 80116b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116b2:	0014      	movs	r4, r2
 80116b4:	001d      	movs	r5, r3
 80116b6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80116b8:	b09d      	sub	sp, #116	; 0x74
 80116ba:	9408      	str	r4, [sp, #32]
 80116bc:	9509      	str	r5, [sp, #36]	; 0x24
 80116be:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80116c0:	9004      	str	r0, [sp, #16]
 80116c2:	2900      	cmp	r1, #0
 80116c4:	d009      	beq.n	80116da <_dtoa_r+0x2a>
 80116c6:	2301      	movs	r3, #1
 80116c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80116ca:	4093      	lsls	r3, r2
 80116cc:	604a      	str	r2, [r1, #4]
 80116ce:	608b      	str	r3, [r1, #8]
 80116d0:	f7fc fc56 	bl	800df80 <_Bfree>
 80116d4:	2300      	movs	r3, #0
 80116d6:	9a04      	ldr	r2, [sp, #16]
 80116d8:	6393      	str	r3, [r2, #56]	; 0x38
 80116da:	2d00      	cmp	r5, #0
 80116dc:	da1e      	bge.n	801171c <_dtoa_r+0x6c>
 80116de:	2301      	movs	r3, #1
 80116e0:	6033      	str	r3, [r6, #0]
 80116e2:	006b      	lsls	r3, r5, #1
 80116e4:	085b      	lsrs	r3, r3, #1
 80116e6:	9309      	str	r3, [sp, #36]	; 0x24
 80116e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80116ea:	4bb5      	ldr	r3, [pc, #724]	; (80119c0 <_dtoa_r+0x310>)
 80116ec:	4ab4      	ldr	r2, [pc, #720]	; (80119c0 <_dtoa_r+0x310>)
 80116ee:	403b      	ands	r3, r7
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d116      	bne.n	8011722 <_dtoa_r+0x72>
 80116f4:	4bb3      	ldr	r3, [pc, #716]	; (80119c4 <_dtoa_r+0x314>)
 80116f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80116f8:	6013      	str	r3, [r2, #0]
 80116fa:	033b      	lsls	r3, r7, #12
 80116fc:	0b1b      	lsrs	r3, r3, #12
 80116fe:	4323      	orrs	r3, r4
 8011700:	d101      	bne.n	8011706 <_dtoa_r+0x56>
 8011702:	f000 fdb2 	bl	801226a <_dtoa_r+0xbba>
 8011706:	4bb0      	ldr	r3, [pc, #704]	; (80119c8 <_dtoa_r+0x318>)
 8011708:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801170a:	9306      	str	r3, [sp, #24]
 801170c:	2a00      	cmp	r2, #0
 801170e:	d002      	beq.n	8011716 <_dtoa_r+0x66>
 8011710:	4bae      	ldr	r3, [pc, #696]	; (80119cc <_dtoa_r+0x31c>)
 8011712:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011714:	6013      	str	r3, [r2, #0]
 8011716:	9806      	ldr	r0, [sp, #24]
 8011718:	b01d      	add	sp, #116	; 0x74
 801171a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801171c:	2300      	movs	r3, #0
 801171e:	6033      	str	r3, [r6, #0]
 8011720:	e7e2      	b.n	80116e8 <_dtoa_r+0x38>
 8011722:	9a08      	ldr	r2, [sp, #32]
 8011724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011726:	9210      	str	r2, [sp, #64]	; 0x40
 8011728:	9311      	str	r3, [sp, #68]	; 0x44
 801172a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801172c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801172e:	2200      	movs	r2, #0
 8011730:	2300      	movs	r3, #0
 8011732:	f7ee fe89 	bl	8000448 <__aeabi_dcmpeq>
 8011736:	1e06      	subs	r6, r0, #0
 8011738:	d009      	beq.n	801174e <_dtoa_r+0x9e>
 801173a:	2301      	movs	r3, #1
 801173c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801173e:	6013      	str	r3, [r2, #0]
 8011740:	4ba3      	ldr	r3, [pc, #652]	; (80119d0 <_dtoa_r+0x320>)
 8011742:	9306      	str	r3, [sp, #24]
 8011744:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011746:	2b00      	cmp	r3, #0
 8011748:	d0e5      	beq.n	8011716 <_dtoa_r+0x66>
 801174a:	4ba2      	ldr	r3, [pc, #648]	; (80119d4 <_dtoa_r+0x324>)
 801174c:	e7e1      	b.n	8011712 <_dtoa_r+0x62>
 801174e:	ab1a      	add	r3, sp, #104	; 0x68
 8011750:	9301      	str	r3, [sp, #4]
 8011752:	ab1b      	add	r3, sp, #108	; 0x6c
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	9804      	ldr	r0, [sp, #16]
 8011758:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801175a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801175c:	f7fc ff86 	bl	800e66c <__d2b>
 8011760:	007a      	lsls	r2, r7, #1
 8011762:	9005      	str	r0, [sp, #20]
 8011764:	0d52      	lsrs	r2, r2, #21
 8011766:	d100      	bne.n	801176a <_dtoa_r+0xba>
 8011768:	e07b      	b.n	8011862 <_dtoa_r+0x1b2>
 801176a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801176c:	9617      	str	r6, [sp, #92]	; 0x5c
 801176e:	0319      	lsls	r1, r3, #12
 8011770:	4b99      	ldr	r3, [pc, #612]	; (80119d8 <_dtoa_r+0x328>)
 8011772:	0b09      	lsrs	r1, r1, #12
 8011774:	430b      	orrs	r3, r1
 8011776:	4999      	ldr	r1, [pc, #612]	; (80119dc <_dtoa_r+0x32c>)
 8011778:	1857      	adds	r7, r2, r1
 801177a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801177c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801177e:	0019      	movs	r1, r3
 8011780:	2200      	movs	r2, #0
 8011782:	4b97      	ldr	r3, [pc, #604]	; (80119e0 <_dtoa_r+0x330>)
 8011784:	f7f0 fa34 	bl	8001bf0 <__aeabi_dsub>
 8011788:	4a96      	ldr	r2, [pc, #600]	; (80119e4 <_dtoa_r+0x334>)
 801178a:	4b97      	ldr	r3, [pc, #604]	; (80119e8 <_dtoa_r+0x338>)
 801178c:	f7ef ff6e 	bl	800166c <__aeabi_dmul>
 8011790:	4a96      	ldr	r2, [pc, #600]	; (80119ec <_dtoa_r+0x33c>)
 8011792:	4b97      	ldr	r3, [pc, #604]	; (80119f0 <_dtoa_r+0x340>)
 8011794:	f7ef f810 	bl	80007b8 <__aeabi_dadd>
 8011798:	0004      	movs	r4, r0
 801179a:	0038      	movs	r0, r7
 801179c:	000d      	movs	r5, r1
 801179e:	f7f0 fdfd 	bl	800239c <__aeabi_i2d>
 80117a2:	4a94      	ldr	r2, [pc, #592]	; (80119f4 <_dtoa_r+0x344>)
 80117a4:	4b94      	ldr	r3, [pc, #592]	; (80119f8 <_dtoa_r+0x348>)
 80117a6:	f7ef ff61 	bl	800166c <__aeabi_dmul>
 80117aa:	0002      	movs	r2, r0
 80117ac:	000b      	movs	r3, r1
 80117ae:	0020      	movs	r0, r4
 80117b0:	0029      	movs	r1, r5
 80117b2:	f7ef f801 	bl	80007b8 <__aeabi_dadd>
 80117b6:	0004      	movs	r4, r0
 80117b8:	000d      	movs	r5, r1
 80117ba:	f7f0 fdb9 	bl	8002330 <__aeabi_d2iz>
 80117be:	2200      	movs	r2, #0
 80117c0:	9003      	str	r0, [sp, #12]
 80117c2:	2300      	movs	r3, #0
 80117c4:	0020      	movs	r0, r4
 80117c6:	0029      	movs	r1, r5
 80117c8:	f7ee fe44 	bl	8000454 <__aeabi_dcmplt>
 80117cc:	2800      	cmp	r0, #0
 80117ce:	d00b      	beq.n	80117e8 <_dtoa_r+0x138>
 80117d0:	9803      	ldr	r0, [sp, #12]
 80117d2:	f7f0 fde3 	bl	800239c <__aeabi_i2d>
 80117d6:	002b      	movs	r3, r5
 80117d8:	0022      	movs	r2, r4
 80117da:	f7ee fe35 	bl	8000448 <__aeabi_dcmpeq>
 80117de:	4243      	negs	r3, r0
 80117e0:	4158      	adcs	r0, r3
 80117e2:	9b03      	ldr	r3, [sp, #12]
 80117e4:	1a1b      	subs	r3, r3, r0
 80117e6:	9303      	str	r3, [sp, #12]
 80117e8:	2301      	movs	r3, #1
 80117ea:	9316      	str	r3, [sp, #88]	; 0x58
 80117ec:	9b03      	ldr	r3, [sp, #12]
 80117ee:	2b16      	cmp	r3, #22
 80117f0:	d810      	bhi.n	8011814 <_dtoa_r+0x164>
 80117f2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80117f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80117f6:	9a03      	ldr	r2, [sp, #12]
 80117f8:	4b80      	ldr	r3, [pc, #512]	; (80119fc <_dtoa_r+0x34c>)
 80117fa:	00d2      	lsls	r2, r2, #3
 80117fc:	189b      	adds	r3, r3, r2
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	f7ee fe27 	bl	8000454 <__aeabi_dcmplt>
 8011806:	2800      	cmp	r0, #0
 8011808:	d047      	beq.n	801189a <_dtoa_r+0x1ea>
 801180a:	9b03      	ldr	r3, [sp, #12]
 801180c:	3b01      	subs	r3, #1
 801180e:	9303      	str	r3, [sp, #12]
 8011810:	2300      	movs	r3, #0
 8011812:	9316      	str	r3, [sp, #88]	; 0x58
 8011814:	2200      	movs	r2, #0
 8011816:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011818:	920a      	str	r2, [sp, #40]	; 0x28
 801181a:	1bdb      	subs	r3, r3, r7
 801181c:	1e5a      	subs	r2, r3, #1
 801181e:	d53e      	bpl.n	801189e <_dtoa_r+0x1ee>
 8011820:	2201      	movs	r2, #1
 8011822:	1ad3      	subs	r3, r2, r3
 8011824:	930a      	str	r3, [sp, #40]	; 0x28
 8011826:	2300      	movs	r3, #0
 8011828:	930c      	str	r3, [sp, #48]	; 0x30
 801182a:	9b03      	ldr	r3, [sp, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	db38      	blt.n	80118a2 <_dtoa_r+0x1f2>
 8011830:	9a03      	ldr	r2, [sp, #12]
 8011832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011834:	4694      	mov	ip, r2
 8011836:	4463      	add	r3, ip
 8011838:	930c      	str	r3, [sp, #48]	; 0x30
 801183a:	2300      	movs	r3, #0
 801183c:	9213      	str	r2, [sp, #76]	; 0x4c
 801183e:	930d      	str	r3, [sp, #52]	; 0x34
 8011840:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011842:	2401      	movs	r4, #1
 8011844:	2b09      	cmp	r3, #9
 8011846:	d867      	bhi.n	8011918 <_dtoa_r+0x268>
 8011848:	2b05      	cmp	r3, #5
 801184a:	dd02      	ble.n	8011852 <_dtoa_r+0x1a2>
 801184c:	2400      	movs	r4, #0
 801184e:	3b04      	subs	r3, #4
 8011850:	9322      	str	r3, [sp, #136]	; 0x88
 8011852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011854:	1e98      	subs	r0, r3, #2
 8011856:	2803      	cmp	r0, #3
 8011858:	d867      	bhi.n	801192a <_dtoa_r+0x27a>
 801185a:	f7ee fc5b 	bl	8000114 <__gnu_thumb1_case_uqi>
 801185e:	3a2b      	.short	0x3a2b
 8011860:	5b38      	.short	0x5b38
 8011862:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011864:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8011866:	18f6      	adds	r6, r6, r3
 8011868:	4b65      	ldr	r3, [pc, #404]	; (8011a00 <_dtoa_r+0x350>)
 801186a:	18f2      	adds	r2, r6, r3
 801186c:	2a20      	cmp	r2, #32
 801186e:	dd0f      	ble.n	8011890 <_dtoa_r+0x1e0>
 8011870:	2340      	movs	r3, #64	; 0x40
 8011872:	1a9b      	subs	r3, r3, r2
 8011874:	409f      	lsls	r7, r3
 8011876:	4b63      	ldr	r3, [pc, #396]	; (8011a04 <_dtoa_r+0x354>)
 8011878:	0038      	movs	r0, r7
 801187a:	18f3      	adds	r3, r6, r3
 801187c:	40dc      	lsrs	r4, r3
 801187e:	4320      	orrs	r0, r4
 8011880:	f7f0 fdbc 	bl	80023fc <__aeabi_ui2d>
 8011884:	2201      	movs	r2, #1
 8011886:	4b60      	ldr	r3, [pc, #384]	; (8011a08 <_dtoa_r+0x358>)
 8011888:	1e77      	subs	r7, r6, #1
 801188a:	18cb      	adds	r3, r1, r3
 801188c:	9217      	str	r2, [sp, #92]	; 0x5c
 801188e:	e776      	b.n	801177e <_dtoa_r+0xce>
 8011890:	2320      	movs	r3, #32
 8011892:	0020      	movs	r0, r4
 8011894:	1a9b      	subs	r3, r3, r2
 8011896:	4098      	lsls	r0, r3
 8011898:	e7f2      	b.n	8011880 <_dtoa_r+0x1d0>
 801189a:	9016      	str	r0, [sp, #88]	; 0x58
 801189c:	e7ba      	b.n	8011814 <_dtoa_r+0x164>
 801189e:	920c      	str	r2, [sp, #48]	; 0x30
 80118a0:	e7c3      	b.n	801182a <_dtoa_r+0x17a>
 80118a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118a4:	9a03      	ldr	r2, [sp, #12]
 80118a6:	1a9b      	subs	r3, r3, r2
 80118a8:	930a      	str	r3, [sp, #40]	; 0x28
 80118aa:	4253      	negs	r3, r2
 80118ac:	930d      	str	r3, [sp, #52]	; 0x34
 80118ae:	2300      	movs	r3, #0
 80118b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80118b2:	e7c5      	b.n	8011840 <_dtoa_r+0x190>
 80118b4:	2300      	movs	r3, #0
 80118b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80118b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80118ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80118bc:	9307      	str	r3, [sp, #28]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	dc13      	bgt.n	80118ea <_dtoa_r+0x23a>
 80118c2:	2301      	movs	r3, #1
 80118c4:	001a      	movs	r2, r3
 80118c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80118c8:	9307      	str	r3, [sp, #28]
 80118ca:	9223      	str	r2, [sp, #140]	; 0x8c
 80118cc:	e00d      	b.n	80118ea <_dtoa_r+0x23a>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e7f1      	b.n	80118b6 <_dtoa_r+0x206>
 80118d2:	2300      	movs	r3, #0
 80118d4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80118d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80118d8:	4694      	mov	ip, r2
 80118da:	9b03      	ldr	r3, [sp, #12]
 80118dc:	4463      	add	r3, ip
 80118de:	930b      	str	r3, [sp, #44]	; 0x2c
 80118e0:	3301      	adds	r3, #1
 80118e2:	9307      	str	r3, [sp, #28]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	dc00      	bgt.n	80118ea <_dtoa_r+0x23a>
 80118e8:	2301      	movs	r3, #1
 80118ea:	2100      	movs	r1, #0
 80118ec:	2204      	movs	r2, #4
 80118ee:	0010      	movs	r0, r2
 80118f0:	3014      	adds	r0, #20
 80118f2:	4298      	cmp	r0, r3
 80118f4:	d91d      	bls.n	8011932 <_dtoa_r+0x282>
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	0018      	movs	r0, r3
 80118fa:	63d9      	str	r1, [r3, #60]	; 0x3c
 80118fc:	f7fc fb18 	bl	800df30 <_Balloc>
 8011900:	9006      	str	r0, [sp, #24]
 8011902:	2800      	cmp	r0, #0
 8011904:	d118      	bne.n	8011938 <_dtoa_r+0x288>
 8011906:	21b0      	movs	r1, #176	; 0xb0
 8011908:	4b40      	ldr	r3, [pc, #256]	; (8011a0c <_dtoa_r+0x35c>)
 801190a:	4841      	ldr	r0, [pc, #260]	; (8011a10 <_dtoa_r+0x360>)
 801190c:	9a06      	ldr	r2, [sp, #24]
 801190e:	31ff      	adds	r1, #255	; 0xff
 8011910:	f7ff fdd2 	bl	80114b8 <__assert_func>
 8011914:	2301      	movs	r3, #1
 8011916:	e7dd      	b.n	80118d4 <_dtoa_r+0x224>
 8011918:	2300      	movs	r3, #0
 801191a:	940f      	str	r4, [sp, #60]	; 0x3c
 801191c:	9322      	str	r3, [sp, #136]	; 0x88
 801191e:	3b01      	subs	r3, #1
 8011920:	930b      	str	r3, [sp, #44]	; 0x2c
 8011922:	9307      	str	r3, [sp, #28]
 8011924:	2200      	movs	r2, #0
 8011926:	3313      	adds	r3, #19
 8011928:	e7cf      	b.n	80118ca <_dtoa_r+0x21a>
 801192a:	2301      	movs	r3, #1
 801192c:	930f      	str	r3, [sp, #60]	; 0x3c
 801192e:	3b02      	subs	r3, #2
 8011930:	e7f6      	b.n	8011920 <_dtoa_r+0x270>
 8011932:	3101      	adds	r1, #1
 8011934:	0052      	lsls	r2, r2, #1
 8011936:	e7da      	b.n	80118ee <_dtoa_r+0x23e>
 8011938:	9b04      	ldr	r3, [sp, #16]
 801193a:	9a06      	ldr	r2, [sp, #24]
 801193c:	639a      	str	r2, [r3, #56]	; 0x38
 801193e:	9b07      	ldr	r3, [sp, #28]
 8011940:	2b0e      	cmp	r3, #14
 8011942:	d900      	bls.n	8011946 <_dtoa_r+0x296>
 8011944:	e0e3      	b.n	8011b0e <_dtoa_r+0x45e>
 8011946:	2c00      	cmp	r4, #0
 8011948:	d100      	bne.n	801194c <_dtoa_r+0x29c>
 801194a:	e0e0      	b.n	8011b0e <_dtoa_r+0x45e>
 801194c:	9b03      	ldr	r3, [sp, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	dd62      	ble.n	8011a18 <_dtoa_r+0x368>
 8011952:	210f      	movs	r1, #15
 8011954:	9a03      	ldr	r2, [sp, #12]
 8011956:	4b29      	ldr	r3, [pc, #164]	; (80119fc <_dtoa_r+0x34c>)
 8011958:	400a      	ands	r2, r1
 801195a:	00d2      	lsls	r2, r2, #3
 801195c:	189b      	adds	r3, r3, r2
 801195e:	681e      	ldr	r6, [r3, #0]
 8011960:	685f      	ldr	r7, [r3, #4]
 8011962:	9b03      	ldr	r3, [sp, #12]
 8011964:	2402      	movs	r4, #2
 8011966:	111d      	asrs	r5, r3, #4
 8011968:	05db      	lsls	r3, r3, #23
 801196a:	d50a      	bpl.n	8011982 <_dtoa_r+0x2d2>
 801196c:	4b29      	ldr	r3, [pc, #164]	; (8011a14 <_dtoa_r+0x364>)
 801196e:	400d      	ands	r5, r1
 8011970:	6a1a      	ldr	r2, [r3, #32]
 8011972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011974:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011976:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011978:	f7ef fa7e 	bl	8000e78 <__aeabi_ddiv>
 801197c:	9008      	str	r0, [sp, #32]
 801197e:	9109      	str	r1, [sp, #36]	; 0x24
 8011980:	3401      	adds	r4, #1
 8011982:	4b24      	ldr	r3, [pc, #144]	; (8011a14 <_dtoa_r+0x364>)
 8011984:	930e      	str	r3, [sp, #56]	; 0x38
 8011986:	2d00      	cmp	r5, #0
 8011988:	d108      	bne.n	801199c <_dtoa_r+0x2ec>
 801198a:	9808      	ldr	r0, [sp, #32]
 801198c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801198e:	0032      	movs	r2, r6
 8011990:	003b      	movs	r3, r7
 8011992:	f7ef fa71 	bl	8000e78 <__aeabi_ddiv>
 8011996:	9008      	str	r0, [sp, #32]
 8011998:	9109      	str	r1, [sp, #36]	; 0x24
 801199a:	e058      	b.n	8011a4e <_dtoa_r+0x39e>
 801199c:	2301      	movs	r3, #1
 801199e:	421d      	tst	r5, r3
 80119a0:	d009      	beq.n	80119b6 <_dtoa_r+0x306>
 80119a2:	18e4      	adds	r4, r4, r3
 80119a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119a6:	0030      	movs	r0, r6
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	0039      	movs	r1, r7
 80119ae:	f7ef fe5d 	bl	800166c <__aeabi_dmul>
 80119b2:	0006      	movs	r6, r0
 80119b4:	000f      	movs	r7, r1
 80119b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119b8:	106d      	asrs	r5, r5, #1
 80119ba:	3308      	adds	r3, #8
 80119bc:	e7e2      	b.n	8011984 <_dtoa_r+0x2d4>
 80119be:	46c0      	nop			; (mov r8, r8)
 80119c0:	7ff00000 	.word	0x7ff00000
 80119c4:	0000270f 	.word	0x0000270f
 80119c8:	08015ead 	.word	0x08015ead
 80119cc:	08015eb0 	.word	0x08015eb0
 80119d0:	08015e1e 	.word	0x08015e1e
 80119d4:	08015e1f 	.word	0x08015e1f
 80119d8:	3ff00000 	.word	0x3ff00000
 80119dc:	fffffc01 	.word	0xfffffc01
 80119e0:	3ff80000 	.word	0x3ff80000
 80119e4:	636f4361 	.word	0x636f4361
 80119e8:	3fd287a7 	.word	0x3fd287a7
 80119ec:	8b60c8b3 	.word	0x8b60c8b3
 80119f0:	3fc68a28 	.word	0x3fc68a28
 80119f4:	509f79fb 	.word	0x509f79fb
 80119f8:	3fd34413 	.word	0x3fd34413
 80119fc:	08015d18 	.word	0x08015d18
 8011a00:	00000432 	.word	0x00000432
 8011a04:	00000412 	.word	0x00000412
 8011a08:	fe100000 	.word	0xfe100000
 8011a0c:	08015c21 	.word	0x08015c21
 8011a10:	08015eb1 	.word	0x08015eb1
 8011a14:	08015cf0 	.word	0x08015cf0
 8011a18:	9b03      	ldr	r3, [sp, #12]
 8011a1a:	2402      	movs	r4, #2
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d016      	beq.n	8011a4e <_dtoa_r+0x39e>
 8011a20:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011a22:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011a24:	220f      	movs	r2, #15
 8011a26:	425d      	negs	r5, r3
 8011a28:	402a      	ands	r2, r5
 8011a2a:	4bdd      	ldr	r3, [pc, #884]	; (8011da0 <_dtoa_r+0x6f0>)
 8011a2c:	00d2      	lsls	r2, r2, #3
 8011a2e:	189b      	adds	r3, r3, r2
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	685b      	ldr	r3, [r3, #4]
 8011a34:	f7ef fe1a 	bl	800166c <__aeabi_dmul>
 8011a38:	2701      	movs	r7, #1
 8011a3a:	2300      	movs	r3, #0
 8011a3c:	9008      	str	r0, [sp, #32]
 8011a3e:	9109      	str	r1, [sp, #36]	; 0x24
 8011a40:	4ed8      	ldr	r6, [pc, #864]	; (8011da4 <_dtoa_r+0x6f4>)
 8011a42:	112d      	asrs	r5, r5, #4
 8011a44:	2d00      	cmp	r5, #0
 8011a46:	d000      	beq.n	8011a4a <_dtoa_r+0x39a>
 8011a48:	e091      	b.n	8011b6e <_dtoa_r+0x4be>
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d1a3      	bne.n	8011996 <_dtoa_r+0x2e6>
 8011a4e:	9e08      	ldr	r6, [sp, #32]
 8011a50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011a52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d100      	bne.n	8011a5a <_dtoa_r+0x3aa>
 8011a58:	e094      	b.n	8011b84 <_dtoa_r+0x4d4>
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	0030      	movs	r0, r6
 8011a5e:	0039      	movs	r1, r7
 8011a60:	4bd1      	ldr	r3, [pc, #836]	; (8011da8 <_dtoa_r+0x6f8>)
 8011a62:	f7ee fcf7 	bl	8000454 <__aeabi_dcmplt>
 8011a66:	2800      	cmp	r0, #0
 8011a68:	d100      	bne.n	8011a6c <_dtoa_r+0x3bc>
 8011a6a:	e08b      	b.n	8011b84 <_dtoa_r+0x4d4>
 8011a6c:	9b07      	ldr	r3, [sp, #28]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d100      	bne.n	8011a74 <_dtoa_r+0x3c4>
 8011a72:	e087      	b.n	8011b84 <_dtoa_r+0x4d4>
 8011a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	dd45      	ble.n	8011b06 <_dtoa_r+0x456>
 8011a7a:	9b03      	ldr	r3, [sp, #12]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	3b01      	subs	r3, #1
 8011a80:	930e      	str	r3, [sp, #56]	; 0x38
 8011a82:	0030      	movs	r0, r6
 8011a84:	4bc9      	ldr	r3, [pc, #804]	; (8011dac <_dtoa_r+0x6fc>)
 8011a86:	0039      	movs	r1, r7
 8011a88:	f7ef fdf0 	bl	800166c <__aeabi_dmul>
 8011a8c:	9008      	str	r0, [sp, #32]
 8011a8e:	9109      	str	r1, [sp, #36]	; 0x24
 8011a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a92:	3401      	adds	r4, #1
 8011a94:	0020      	movs	r0, r4
 8011a96:	9e08      	ldr	r6, [sp, #32]
 8011a98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011a9a:	9312      	str	r3, [sp, #72]	; 0x48
 8011a9c:	f7f0 fc7e 	bl	800239c <__aeabi_i2d>
 8011aa0:	0032      	movs	r2, r6
 8011aa2:	003b      	movs	r3, r7
 8011aa4:	f7ef fde2 	bl	800166c <__aeabi_dmul>
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	4bc1      	ldr	r3, [pc, #772]	; (8011db0 <_dtoa_r+0x700>)
 8011aac:	f7ee fe84 	bl	80007b8 <__aeabi_dadd>
 8011ab0:	4ac0      	ldr	r2, [pc, #768]	; (8011db4 <_dtoa_r+0x704>)
 8011ab2:	9014      	str	r0, [sp, #80]	; 0x50
 8011ab4:	9115      	str	r1, [sp, #84]	; 0x54
 8011ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011ab8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011aba:	4694      	mov	ip, r2
 8011abc:	9308      	str	r3, [sp, #32]
 8011abe:	9409      	str	r4, [sp, #36]	; 0x24
 8011ac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ac2:	4463      	add	r3, ip
 8011ac4:	9318      	str	r3, [sp, #96]	; 0x60
 8011ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d15e      	bne.n	8011b8c <_dtoa_r+0x4dc>
 8011ace:	2200      	movs	r2, #0
 8011ad0:	4bb9      	ldr	r3, [pc, #740]	; (8011db8 <_dtoa_r+0x708>)
 8011ad2:	0030      	movs	r0, r6
 8011ad4:	0039      	movs	r1, r7
 8011ad6:	f7f0 f88b 	bl	8001bf0 <__aeabi_dsub>
 8011ada:	9a08      	ldr	r2, [sp, #32]
 8011adc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011ade:	0004      	movs	r4, r0
 8011ae0:	000d      	movs	r5, r1
 8011ae2:	f7ee fccb 	bl	800047c <__aeabi_dcmpgt>
 8011ae6:	2800      	cmp	r0, #0
 8011ae8:	d000      	beq.n	8011aec <_dtoa_r+0x43c>
 8011aea:	e2b3      	b.n	8012054 <_dtoa_r+0x9a4>
 8011aec:	48b3      	ldr	r0, [pc, #716]	; (8011dbc <_dtoa_r+0x70c>)
 8011aee:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011af0:	4684      	mov	ip, r0
 8011af2:	4461      	add	r1, ip
 8011af4:	000b      	movs	r3, r1
 8011af6:	0020      	movs	r0, r4
 8011af8:	0029      	movs	r1, r5
 8011afa:	9a08      	ldr	r2, [sp, #32]
 8011afc:	f7ee fcaa 	bl	8000454 <__aeabi_dcmplt>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	d000      	beq.n	8011b06 <_dtoa_r+0x456>
 8011b04:	e2a3      	b.n	801204e <_dtoa_r+0x99e>
 8011b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b08:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8011b0a:	9308      	str	r3, [sp, #32]
 8011b0c:	9409      	str	r4, [sp, #36]	; 0x24
 8011b0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	da00      	bge.n	8011b16 <_dtoa_r+0x466>
 8011b14:	e179      	b.n	8011e0a <_dtoa_r+0x75a>
 8011b16:	9a03      	ldr	r2, [sp, #12]
 8011b18:	2a0e      	cmp	r2, #14
 8011b1a:	dd00      	ble.n	8011b1e <_dtoa_r+0x46e>
 8011b1c:	e175      	b.n	8011e0a <_dtoa_r+0x75a>
 8011b1e:	4ba0      	ldr	r3, [pc, #640]	; (8011da0 <_dtoa_r+0x6f0>)
 8011b20:	00d2      	lsls	r2, r2, #3
 8011b22:	189b      	adds	r3, r3, r2
 8011b24:	681e      	ldr	r6, [r3, #0]
 8011b26:	685f      	ldr	r7, [r3, #4]
 8011b28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	db00      	blt.n	8011b30 <_dtoa_r+0x480>
 8011b2e:	e0e5      	b.n	8011cfc <_dtoa_r+0x64c>
 8011b30:	9b07      	ldr	r3, [sp, #28]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	dd00      	ble.n	8011b38 <_dtoa_r+0x488>
 8011b36:	e0e1      	b.n	8011cfc <_dtoa_r+0x64c>
 8011b38:	d000      	beq.n	8011b3c <_dtoa_r+0x48c>
 8011b3a:	e288      	b.n	801204e <_dtoa_r+0x99e>
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	0030      	movs	r0, r6
 8011b40:	0039      	movs	r1, r7
 8011b42:	4b9d      	ldr	r3, [pc, #628]	; (8011db8 <_dtoa_r+0x708>)
 8011b44:	f7ef fd92 	bl	800166c <__aeabi_dmul>
 8011b48:	9a08      	ldr	r2, [sp, #32]
 8011b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b4c:	f7ee fca0 	bl	8000490 <__aeabi_dcmpge>
 8011b50:	9e07      	ldr	r6, [sp, #28]
 8011b52:	0037      	movs	r7, r6
 8011b54:	2800      	cmp	r0, #0
 8011b56:	d000      	beq.n	8011b5a <_dtoa_r+0x4aa>
 8011b58:	e25f      	b.n	801201a <_dtoa_r+0x96a>
 8011b5a:	9b06      	ldr	r3, [sp, #24]
 8011b5c:	9a06      	ldr	r2, [sp, #24]
 8011b5e:	3301      	adds	r3, #1
 8011b60:	9308      	str	r3, [sp, #32]
 8011b62:	2331      	movs	r3, #49	; 0x31
 8011b64:	7013      	strb	r3, [r2, #0]
 8011b66:	9b03      	ldr	r3, [sp, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	9303      	str	r3, [sp, #12]
 8011b6c:	e25a      	b.n	8012024 <_dtoa_r+0x974>
 8011b6e:	423d      	tst	r5, r7
 8011b70:	d005      	beq.n	8011b7e <_dtoa_r+0x4ce>
 8011b72:	6832      	ldr	r2, [r6, #0]
 8011b74:	6873      	ldr	r3, [r6, #4]
 8011b76:	f7ef fd79 	bl	800166c <__aeabi_dmul>
 8011b7a:	003b      	movs	r3, r7
 8011b7c:	3401      	adds	r4, #1
 8011b7e:	106d      	asrs	r5, r5, #1
 8011b80:	3608      	adds	r6, #8
 8011b82:	e75f      	b.n	8011a44 <_dtoa_r+0x394>
 8011b84:	9b03      	ldr	r3, [sp, #12]
 8011b86:	930e      	str	r3, [sp, #56]	; 0x38
 8011b88:	9b07      	ldr	r3, [sp, #28]
 8011b8a:	e783      	b.n	8011a94 <_dtoa_r+0x3e4>
 8011b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b8e:	4b84      	ldr	r3, [pc, #528]	; (8011da0 <_dtoa_r+0x6f0>)
 8011b90:	3a01      	subs	r2, #1
 8011b92:	00d2      	lsls	r2, r2, #3
 8011b94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b96:	189b      	adds	r3, r3, r2
 8011b98:	9c08      	ldr	r4, [sp, #32]
 8011b9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	685b      	ldr	r3, [r3, #4]
 8011ba0:	2900      	cmp	r1, #0
 8011ba2:	d051      	beq.n	8011c48 <_dtoa_r+0x598>
 8011ba4:	2000      	movs	r0, #0
 8011ba6:	4986      	ldr	r1, [pc, #536]	; (8011dc0 <_dtoa_r+0x710>)
 8011ba8:	f7ef f966 	bl	8000e78 <__aeabi_ddiv>
 8011bac:	0022      	movs	r2, r4
 8011bae:	002b      	movs	r3, r5
 8011bb0:	f7f0 f81e 	bl	8001bf0 <__aeabi_dsub>
 8011bb4:	9a06      	ldr	r2, [sp, #24]
 8011bb6:	0004      	movs	r4, r0
 8011bb8:	4694      	mov	ip, r2
 8011bba:	000d      	movs	r5, r1
 8011bbc:	9b06      	ldr	r3, [sp, #24]
 8011bbe:	9314      	str	r3, [sp, #80]	; 0x50
 8011bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011bc2:	4463      	add	r3, ip
 8011bc4:	9318      	str	r3, [sp, #96]	; 0x60
 8011bc6:	0039      	movs	r1, r7
 8011bc8:	0030      	movs	r0, r6
 8011bca:	f7f0 fbb1 	bl	8002330 <__aeabi_d2iz>
 8011bce:	9012      	str	r0, [sp, #72]	; 0x48
 8011bd0:	f7f0 fbe4 	bl	800239c <__aeabi_i2d>
 8011bd4:	0002      	movs	r2, r0
 8011bd6:	000b      	movs	r3, r1
 8011bd8:	0030      	movs	r0, r6
 8011bda:	0039      	movs	r1, r7
 8011bdc:	f7f0 f808 	bl	8001bf0 <__aeabi_dsub>
 8011be0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011be2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011be4:	3301      	adds	r3, #1
 8011be6:	9308      	str	r3, [sp, #32]
 8011be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011bea:	0006      	movs	r6, r0
 8011bec:	3330      	adds	r3, #48	; 0x30
 8011bee:	7013      	strb	r3, [r2, #0]
 8011bf0:	0022      	movs	r2, r4
 8011bf2:	002b      	movs	r3, r5
 8011bf4:	000f      	movs	r7, r1
 8011bf6:	f7ee fc2d 	bl	8000454 <__aeabi_dcmplt>
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d174      	bne.n	8011ce8 <_dtoa_r+0x638>
 8011bfe:	0032      	movs	r2, r6
 8011c00:	003b      	movs	r3, r7
 8011c02:	2000      	movs	r0, #0
 8011c04:	4968      	ldr	r1, [pc, #416]	; (8011da8 <_dtoa_r+0x6f8>)
 8011c06:	f7ef fff3 	bl	8001bf0 <__aeabi_dsub>
 8011c0a:	0022      	movs	r2, r4
 8011c0c:	002b      	movs	r3, r5
 8011c0e:	f7ee fc21 	bl	8000454 <__aeabi_dcmplt>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d000      	beq.n	8011c18 <_dtoa_r+0x568>
 8011c16:	e0d7      	b.n	8011dc8 <_dtoa_r+0x718>
 8011c18:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c1a:	9a08      	ldr	r2, [sp, #32]
 8011c1c:	4293      	cmp	r3, r2
 8011c1e:	d100      	bne.n	8011c22 <_dtoa_r+0x572>
 8011c20:	e771      	b.n	8011b06 <_dtoa_r+0x456>
 8011c22:	2200      	movs	r2, #0
 8011c24:	0020      	movs	r0, r4
 8011c26:	0029      	movs	r1, r5
 8011c28:	4b60      	ldr	r3, [pc, #384]	; (8011dac <_dtoa_r+0x6fc>)
 8011c2a:	f7ef fd1f 	bl	800166c <__aeabi_dmul>
 8011c2e:	4b5f      	ldr	r3, [pc, #380]	; (8011dac <_dtoa_r+0x6fc>)
 8011c30:	0004      	movs	r4, r0
 8011c32:	000d      	movs	r5, r1
 8011c34:	0030      	movs	r0, r6
 8011c36:	0039      	movs	r1, r7
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f7ef fd17 	bl	800166c <__aeabi_dmul>
 8011c3e:	9b08      	ldr	r3, [sp, #32]
 8011c40:	0006      	movs	r6, r0
 8011c42:	000f      	movs	r7, r1
 8011c44:	9314      	str	r3, [sp, #80]	; 0x50
 8011c46:	e7be      	b.n	8011bc6 <_dtoa_r+0x516>
 8011c48:	0020      	movs	r0, r4
 8011c4a:	0029      	movs	r1, r5
 8011c4c:	f7ef fd0e 	bl	800166c <__aeabi_dmul>
 8011c50:	9a06      	ldr	r2, [sp, #24]
 8011c52:	9b06      	ldr	r3, [sp, #24]
 8011c54:	4694      	mov	ip, r2
 8011c56:	9308      	str	r3, [sp, #32]
 8011c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c5a:	9014      	str	r0, [sp, #80]	; 0x50
 8011c5c:	9115      	str	r1, [sp, #84]	; 0x54
 8011c5e:	4463      	add	r3, ip
 8011c60:	9319      	str	r3, [sp, #100]	; 0x64
 8011c62:	0030      	movs	r0, r6
 8011c64:	0039      	movs	r1, r7
 8011c66:	f7f0 fb63 	bl	8002330 <__aeabi_d2iz>
 8011c6a:	9018      	str	r0, [sp, #96]	; 0x60
 8011c6c:	f7f0 fb96 	bl	800239c <__aeabi_i2d>
 8011c70:	0002      	movs	r2, r0
 8011c72:	000b      	movs	r3, r1
 8011c74:	0030      	movs	r0, r6
 8011c76:	0039      	movs	r1, r7
 8011c78:	f7ef ffba 	bl	8001bf0 <__aeabi_dsub>
 8011c7c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8011c7e:	9b08      	ldr	r3, [sp, #32]
 8011c80:	3630      	adds	r6, #48	; 0x30
 8011c82:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011c84:	701e      	strb	r6, [r3, #0]
 8011c86:	3301      	adds	r3, #1
 8011c88:	0004      	movs	r4, r0
 8011c8a:	000d      	movs	r5, r1
 8011c8c:	9308      	str	r3, [sp, #32]
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d12d      	bne.n	8011cee <_dtoa_r+0x63e>
 8011c92:	9814      	ldr	r0, [sp, #80]	; 0x50
 8011c94:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011c96:	9a06      	ldr	r2, [sp, #24]
 8011c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011c9a:	4694      	mov	ip, r2
 8011c9c:	4463      	add	r3, ip
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	9308      	str	r3, [sp, #32]
 8011ca2:	4b47      	ldr	r3, [pc, #284]	; (8011dc0 <_dtoa_r+0x710>)
 8011ca4:	f7ee fd88 	bl	80007b8 <__aeabi_dadd>
 8011ca8:	0002      	movs	r2, r0
 8011caa:	000b      	movs	r3, r1
 8011cac:	0020      	movs	r0, r4
 8011cae:	0029      	movs	r1, r5
 8011cb0:	f7ee fbe4 	bl	800047c <__aeabi_dcmpgt>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	d000      	beq.n	8011cba <_dtoa_r+0x60a>
 8011cb8:	e086      	b.n	8011dc8 <_dtoa_r+0x718>
 8011cba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cbe:	2000      	movs	r0, #0
 8011cc0:	493f      	ldr	r1, [pc, #252]	; (8011dc0 <_dtoa_r+0x710>)
 8011cc2:	f7ef ff95 	bl	8001bf0 <__aeabi_dsub>
 8011cc6:	0002      	movs	r2, r0
 8011cc8:	000b      	movs	r3, r1
 8011cca:	0020      	movs	r0, r4
 8011ccc:	0029      	movs	r1, r5
 8011cce:	f7ee fbc1 	bl	8000454 <__aeabi_dcmplt>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d100      	bne.n	8011cd8 <_dtoa_r+0x628>
 8011cd6:	e716      	b.n	8011b06 <_dtoa_r+0x456>
 8011cd8:	9b08      	ldr	r3, [sp, #32]
 8011cda:	001a      	movs	r2, r3
 8011cdc:	3a01      	subs	r2, #1
 8011cde:	9208      	str	r2, [sp, #32]
 8011ce0:	7812      	ldrb	r2, [r2, #0]
 8011ce2:	2a30      	cmp	r2, #48	; 0x30
 8011ce4:	d0f8      	beq.n	8011cd8 <_dtoa_r+0x628>
 8011ce6:	9308      	str	r3, [sp, #32]
 8011ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011cea:	9303      	str	r3, [sp, #12]
 8011cec:	e046      	b.n	8011d7c <_dtoa_r+0x6cc>
 8011cee:	2200      	movs	r2, #0
 8011cf0:	4b2e      	ldr	r3, [pc, #184]	; (8011dac <_dtoa_r+0x6fc>)
 8011cf2:	f7ef fcbb 	bl	800166c <__aeabi_dmul>
 8011cf6:	0006      	movs	r6, r0
 8011cf8:	000f      	movs	r7, r1
 8011cfa:	e7b2      	b.n	8011c62 <_dtoa_r+0x5b2>
 8011cfc:	9b06      	ldr	r3, [sp, #24]
 8011cfe:	9a06      	ldr	r2, [sp, #24]
 8011d00:	930a      	str	r3, [sp, #40]	; 0x28
 8011d02:	9b07      	ldr	r3, [sp, #28]
 8011d04:	9c08      	ldr	r4, [sp, #32]
 8011d06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	189b      	adds	r3, r3, r2
 8011d0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d0e:	0032      	movs	r2, r6
 8011d10:	003b      	movs	r3, r7
 8011d12:	0020      	movs	r0, r4
 8011d14:	0029      	movs	r1, r5
 8011d16:	f7ef f8af 	bl	8000e78 <__aeabi_ddiv>
 8011d1a:	f7f0 fb09 	bl	8002330 <__aeabi_d2iz>
 8011d1e:	9007      	str	r0, [sp, #28]
 8011d20:	f7f0 fb3c 	bl	800239c <__aeabi_i2d>
 8011d24:	0032      	movs	r2, r6
 8011d26:	003b      	movs	r3, r7
 8011d28:	f7ef fca0 	bl	800166c <__aeabi_dmul>
 8011d2c:	0002      	movs	r2, r0
 8011d2e:	000b      	movs	r3, r1
 8011d30:	0020      	movs	r0, r4
 8011d32:	0029      	movs	r1, r5
 8011d34:	f7ef ff5c 	bl	8001bf0 <__aeabi_dsub>
 8011d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d3a:	001a      	movs	r2, r3
 8011d3c:	3201      	adds	r2, #1
 8011d3e:	920a      	str	r2, [sp, #40]	; 0x28
 8011d40:	9208      	str	r2, [sp, #32]
 8011d42:	9a07      	ldr	r2, [sp, #28]
 8011d44:	3230      	adds	r2, #48	; 0x30
 8011d46:	701a      	strb	r2, [r3, #0]
 8011d48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d14f      	bne.n	8011dee <_dtoa_r+0x73e>
 8011d4e:	0002      	movs	r2, r0
 8011d50:	000b      	movs	r3, r1
 8011d52:	f7ee fd31 	bl	80007b8 <__aeabi_dadd>
 8011d56:	0032      	movs	r2, r6
 8011d58:	003b      	movs	r3, r7
 8011d5a:	0004      	movs	r4, r0
 8011d5c:	000d      	movs	r5, r1
 8011d5e:	f7ee fb8d 	bl	800047c <__aeabi_dcmpgt>
 8011d62:	2800      	cmp	r0, #0
 8011d64:	d12e      	bne.n	8011dc4 <_dtoa_r+0x714>
 8011d66:	0032      	movs	r2, r6
 8011d68:	003b      	movs	r3, r7
 8011d6a:	0020      	movs	r0, r4
 8011d6c:	0029      	movs	r1, r5
 8011d6e:	f7ee fb6b 	bl	8000448 <__aeabi_dcmpeq>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d002      	beq.n	8011d7c <_dtoa_r+0x6cc>
 8011d76:	9b07      	ldr	r3, [sp, #28]
 8011d78:	07de      	lsls	r6, r3, #31
 8011d7a:	d423      	bmi.n	8011dc4 <_dtoa_r+0x714>
 8011d7c:	9905      	ldr	r1, [sp, #20]
 8011d7e:	9804      	ldr	r0, [sp, #16]
 8011d80:	f7fc f8fe 	bl	800df80 <_Bfree>
 8011d84:	2300      	movs	r3, #0
 8011d86:	9a08      	ldr	r2, [sp, #32]
 8011d88:	7013      	strb	r3, [r2, #0]
 8011d8a:	9b03      	ldr	r3, [sp, #12]
 8011d8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011d8e:	3301      	adds	r3, #1
 8011d90:	6013      	str	r3, [r2, #0]
 8011d92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d100      	bne.n	8011d9a <_dtoa_r+0x6ea>
 8011d98:	e4bd      	b.n	8011716 <_dtoa_r+0x66>
 8011d9a:	9a08      	ldr	r2, [sp, #32]
 8011d9c:	601a      	str	r2, [r3, #0]
 8011d9e:	e4ba      	b.n	8011716 <_dtoa_r+0x66>
 8011da0:	08015d18 	.word	0x08015d18
 8011da4:	08015cf0 	.word	0x08015cf0
 8011da8:	3ff00000 	.word	0x3ff00000
 8011dac:	40240000 	.word	0x40240000
 8011db0:	401c0000 	.word	0x401c0000
 8011db4:	fcc00000 	.word	0xfcc00000
 8011db8:	40140000 	.word	0x40140000
 8011dbc:	7cc00000 	.word	0x7cc00000
 8011dc0:	3fe00000 	.word	0x3fe00000
 8011dc4:	9b03      	ldr	r3, [sp, #12]
 8011dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8011dc8:	9b08      	ldr	r3, [sp, #32]
 8011dca:	9308      	str	r3, [sp, #32]
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	781a      	ldrb	r2, [r3, #0]
 8011dd0:	2a39      	cmp	r2, #57	; 0x39
 8011dd2:	d108      	bne.n	8011de6 <_dtoa_r+0x736>
 8011dd4:	9a06      	ldr	r2, [sp, #24]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d1f7      	bne.n	8011dca <_dtoa_r+0x71a>
 8011dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011ddc:	9906      	ldr	r1, [sp, #24]
 8011dde:	3201      	adds	r2, #1
 8011de0:	920e      	str	r2, [sp, #56]	; 0x38
 8011de2:	2230      	movs	r2, #48	; 0x30
 8011de4:	700a      	strb	r2, [r1, #0]
 8011de6:	781a      	ldrb	r2, [r3, #0]
 8011de8:	3201      	adds	r2, #1
 8011dea:	701a      	strb	r2, [r3, #0]
 8011dec:	e77c      	b.n	8011ce8 <_dtoa_r+0x638>
 8011dee:	2200      	movs	r2, #0
 8011df0:	4ba9      	ldr	r3, [pc, #676]	; (8012098 <_dtoa_r+0x9e8>)
 8011df2:	f7ef fc3b 	bl	800166c <__aeabi_dmul>
 8011df6:	2200      	movs	r2, #0
 8011df8:	2300      	movs	r3, #0
 8011dfa:	0004      	movs	r4, r0
 8011dfc:	000d      	movs	r5, r1
 8011dfe:	f7ee fb23 	bl	8000448 <__aeabi_dcmpeq>
 8011e02:	2800      	cmp	r0, #0
 8011e04:	d100      	bne.n	8011e08 <_dtoa_r+0x758>
 8011e06:	e782      	b.n	8011d0e <_dtoa_r+0x65e>
 8011e08:	e7b8      	b.n	8011d7c <_dtoa_r+0x6cc>
 8011e0a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8011e0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011e0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011e10:	2f00      	cmp	r7, #0
 8011e12:	d012      	beq.n	8011e3a <_dtoa_r+0x78a>
 8011e14:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011e16:	2a01      	cmp	r2, #1
 8011e18:	dc6e      	bgt.n	8011ef8 <_dtoa_r+0x848>
 8011e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e1c:	2a00      	cmp	r2, #0
 8011e1e:	d065      	beq.n	8011eec <_dtoa_r+0x83c>
 8011e20:	4a9e      	ldr	r2, [pc, #632]	; (801209c <_dtoa_r+0x9ec>)
 8011e22:	189b      	adds	r3, r3, r2
 8011e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e26:	2101      	movs	r1, #1
 8011e28:	18d2      	adds	r2, r2, r3
 8011e2a:	920a      	str	r2, [sp, #40]	; 0x28
 8011e2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e2e:	9804      	ldr	r0, [sp, #16]
 8011e30:	18d3      	adds	r3, r2, r3
 8011e32:	930c      	str	r3, [sp, #48]	; 0x30
 8011e34:	f7fc f986 	bl	800e144 <__i2b>
 8011e38:	0007      	movs	r7, r0
 8011e3a:	2c00      	cmp	r4, #0
 8011e3c:	d00e      	beq.n	8011e5c <_dtoa_r+0x7ac>
 8011e3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	dd0b      	ble.n	8011e5c <_dtoa_r+0x7ac>
 8011e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e46:	0023      	movs	r3, r4
 8011e48:	4294      	cmp	r4, r2
 8011e4a:	dd00      	ble.n	8011e4e <_dtoa_r+0x79e>
 8011e4c:	0013      	movs	r3, r2
 8011e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e50:	1ae4      	subs	r4, r4, r3
 8011e52:	1ad2      	subs	r2, r2, r3
 8011e54:	920a      	str	r2, [sp, #40]	; 0x28
 8011e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d01e      	beq.n	8011ea0 <_dtoa_r+0x7f0>
 8011e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d05c      	beq.n	8011f22 <_dtoa_r+0x872>
 8011e68:	2d00      	cmp	r5, #0
 8011e6a:	dd10      	ble.n	8011e8e <_dtoa_r+0x7de>
 8011e6c:	0039      	movs	r1, r7
 8011e6e:	002a      	movs	r2, r5
 8011e70:	9804      	ldr	r0, [sp, #16]
 8011e72:	f7fc fa2f 	bl	800e2d4 <__pow5mult>
 8011e76:	9a05      	ldr	r2, [sp, #20]
 8011e78:	0001      	movs	r1, r0
 8011e7a:	0007      	movs	r7, r0
 8011e7c:	9804      	ldr	r0, [sp, #16]
 8011e7e:	f7fc f979 	bl	800e174 <__multiply>
 8011e82:	0006      	movs	r6, r0
 8011e84:	9905      	ldr	r1, [sp, #20]
 8011e86:	9804      	ldr	r0, [sp, #16]
 8011e88:	f7fc f87a 	bl	800df80 <_Bfree>
 8011e8c:	9605      	str	r6, [sp, #20]
 8011e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e90:	1b5a      	subs	r2, r3, r5
 8011e92:	42ab      	cmp	r3, r5
 8011e94:	d004      	beq.n	8011ea0 <_dtoa_r+0x7f0>
 8011e96:	9905      	ldr	r1, [sp, #20]
 8011e98:	9804      	ldr	r0, [sp, #16]
 8011e9a:	f7fc fa1b 	bl	800e2d4 <__pow5mult>
 8011e9e:	9005      	str	r0, [sp, #20]
 8011ea0:	2101      	movs	r1, #1
 8011ea2:	9804      	ldr	r0, [sp, #16]
 8011ea4:	f7fc f94e 	bl	800e144 <__i2b>
 8011ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011eaa:	0006      	movs	r6, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	dd3a      	ble.n	8011f26 <_dtoa_r+0x876>
 8011eb0:	001a      	movs	r2, r3
 8011eb2:	0001      	movs	r1, r0
 8011eb4:	9804      	ldr	r0, [sp, #16]
 8011eb6:	f7fc fa0d 	bl	800e2d4 <__pow5mult>
 8011eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ebc:	0006      	movs	r6, r0
 8011ebe:	2500      	movs	r5, #0
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	dc38      	bgt.n	8011f36 <_dtoa_r+0x886>
 8011ec4:	2500      	movs	r5, #0
 8011ec6:	9b08      	ldr	r3, [sp, #32]
 8011ec8:	42ab      	cmp	r3, r5
 8011eca:	d130      	bne.n	8011f2e <_dtoa_r+0x87e>
 8011ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ece:	031b      	lsls	r3, r3, #12
 8011ed0:	42ab      	cmp	r3, r5
 8011ed2:	d12c      	bne.n	8011f2e <_dtoa_r+0x87e>
 8011ed4:	4b72      	ldr	r3, [pc, #456]	; (80120a0 <_dtoa_r+0x9f0>)
 8011ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ed8:	4213      	tst	r3, r2
 8011eda:	d028      	beq.n	8011f2e <_dtoa_r+0x87e>
 8011edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ede:	3501      	adds	r5, #1
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8011ee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	930c      	str	r3, [sp, #48]	; 0x30
 8011eea:	e020      	b.n	8011f2e <_dtoa_r+0x87e>
 8011eec:	2336      	movs	r3, #54	; 0x36
 8011eee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011ef0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8011ef2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011ef4:	1a9b      	subs	r3, r3, r2
 8011ef6:	e795      	b.n	8011e24 <_dtoa_r+0x774>
 8011ef8:	9b07      	ldr	r3, [sp, #28]
 8011efa:	1e5d      	subs	r5, r3, #1
 8011efc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011efe:	42ab      	cmp	r3, r5
 8011f00:	db07      	blt.n	8011f12 <_dtoa_r+0x862>
 8011f02:	1b5d      	subs	r5, r3, r5
 8011f04:	9b07      	ldr	r3, [sp, #28]
 8011f06:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	da8b      	bge.n	8011e24 <_dtoa_r+0x774>
 8011f0c:	1ae4      	subs	r4, r4, r3
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e788      	b.n	8011e24 <_dtoa_r+0x774>
 8011f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011f16:	1aeb      	subs	r3, r5, r3
 8011f18:	18d3      	adds	r3, r2, r3
 8011f1a:	950d      	str	r5, [sp, #52]	; 0x34
 8011f1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8011f1e:	2500      	movs	r5, #0
 8011f20:	e7f0      	b.n	8011f04 <_dtoa_r+0x854>
 8011f22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011f24:	e7b7      	b.n	8011e96 <_dtoa_r+0x7e6>
 8011f26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011f28:	2500      	movs	r5, #0
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	ddca      	ble.n	8011ec4 <_dtoa_r+0x814>
 8011f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f30:	2001      	movs	r0, #1
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d008      	beq.n	8011f48 <_dtoa_r+0x898>
 8011f36:	6933      	ldr	r3, [r6, #16]
 8011f38:	3303      	adds	r3, #3
 8011f3a:	009b      	lsls	r3, r3, #2
 8011f3c:	18f3      	adds	r3, r6, r3
 8011f3e:	6858      	ldr	r0, [r3, #4]
 8011f40:	f7fc f8b8 	bl	800e0b4 <__hi0bits>
 8011f44:	2320      	movs	r3, #32
 8011f46:	1a18      	subs	r0, r3, r0
 8011f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f4a:	1818      	adds	r0, r3, r0
 8011f4c:	0002      	movs	r2, r0
 8011f4e:	231f      	movs	r3, #31
 8011f50:	401a      	ands	r2, r3
 8011f52:	4218      	tst	r0, r3
 8011f54:	d047      	beq.n	8011fe6 <_dtoa_r+0x936>
 8011f56:	3301      	adds	r3, #1
 8011f58:	1a9b      	subs	r3, r3, r2
 8011f5a:	2b04      	cmp	r3, #4
 8011f5c:	dd3f      	ble.n	8011fde <_dtoa_r+0x92e>
 8011f5e:	231c      	movs	r3, #28
 8011f60:	1a9b      	subs	r3, r3, r2
 8011f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f64:	18e4      	adds	r4, r4, r3
 8011f66:	18d2      	adds	r2, r2, r3
 8011f68:	920a      	str	r2, [sp, #40]	; 0x28
 8011f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011f6c:	18d3      	adds	r3, r2, r3
 8011f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8011f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	dd05      	ble.n	8011f82 <_dtoa_r+0x8d2>
 8011f76:	001a      	movs	r2, r3
 8011f78:	9905      	ldr	r1, [sp, #20]
 8011f7a:	9804      	ldr	r0, [sp, #16]
 8011f7c:	f7fc f9ec 	bl	800e358 <__lshift>
 8011f80:	9005      	str	r0, [sp, #20]
 8011f82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	dd05      	ble.n	8011f94 <_dtoa_r+0x8e4>
 8011f88:	0031      	movs	r1, r6
 8011f8a:	001a      	movs	r2, r3
 8011f8c:	9804      	ldr	r0, [sp, #16]
 8011f8e:	f7fc f9e3 	bl	800e358 <__lshift>
 8011f92:	0006      	movs	r6, r0
 8011f94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d027      	beq.n	8011fea <_dtoa_r+0x93a>
 8011f9a:	0031      	movs	r1, r6
 8011f9c:	9805      	ldr	r0, [sp, #20]
 8011f9e:	f7fc fa49 	bl	800e434 <__mcmp>
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	da21      	bge.n	8011fea <_dtoa_r+0x93a>
 8011fa6:	9b03      	ldr	r3, [sp, #12]
 8011fa8:	220a      	movs	r2, #10
 8011faa:	3b01      	subs	r3, #1
 8011fac:	9303      	str	r3, [sp, #12]
 8011fae:	9905      	ldr	r1, [sp, #20]
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	9804      	ldr	r0, [sp, #16]
 8011fb4:	f7fb ffee 	bl	800df94 <__multadd>
 8011fb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011fba:	9005      	str	r0, [sp, #20]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d100      	bne.n	8011fc2 <_dtoa_r+0x912>
 8011fc0:	e15d      	b.n	801227e <_dtoa_r+0xbce>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	0039      	movs	r1, r7
 8011fc6:	220a      	movs	r2, #10
 8011fc8:	9804      	ldr	r0, [sp, #16]
 8011fca:	f7fb ffe3 	bl	800df94 <__multadd>
 8011fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fd0:	0007      	movs	r7, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	dc49      	bgt.n	801206a <_dtoa_r+0x9ba>
 8011fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011fd8:	2b02      	cmp	r3, #2
 8011fda:	dc0e      	bgt.n	8011ffa <_dtoa_r+0x94a>
 8011fdc:	e045      	b.n	801206a <_dtoa_r+0x9ba>
 8011fde:	2b04      	cmp	r3, #4
 8011fe0:	d0c6      	beq.n	8011f70 <_dtoa_r+0x8c0>
 8011fe2:	331c      	adds	r3, #28
 8011fe4:	e7bd      	b.n	8011f62 <_dtoa_r+0x8b2>
 8011fe6:	0013      	movs	r3, r2
 8011fe8:	e7fb      	b.n	8011fe2 <_dtoa_r+0x932>
 8011fea:	9b07      	ldr	r3, [sp, #28]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	dc36      	bgt.n	801205e <_dtoa_r+0x9ae>
 8011ff0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ff2:	2b02      	cmp	r3, #2
 8011ff4:	dd33      	ble.n	801205e <_dtoa_r+0x9ae>
 8011ff6:	9b07      	ldr	r3, [sp, #28]
 8011ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d10c      	bne.n	801201a <_dtoa_r+0x96a>
 8012000:	0031      	movs	r1, r6
 8012002:	2205      	movs	r2, #5
 8012004:	9804      	ldr	r0, [sp, #16]
 8012006:	f7fb ffc5 	bl	800df94 <__multadd>
 801200a:	0006      	movs	r6, r0
 801200c:	0001      	movs	r1, r0
 801200e:	9805      	ldr	r0, [sp, #20]
 8012010:	f7fc fa10 	bl	800e434 <__mcmp>
 8012014:	2800      	cmp	r0, #0
 8012016:	dd00      	ble.n	801201a <_dtoa_r+0x96a>
 8012018:	e59f      	b.n	8011b5a <_dtoa_r+0x4aa>
 801201a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801201c:	43db      	mvns	r3, r3
 801201e:	9303      	str	r3, [sp, #12]
 8012020:	9b06      	ldr	r3, [sp, #24]
 8012022:	9308      	str	r3, [sp, #32]
 8012024:	2500      	movs	r5, #0
 8012026:	0031      	movs	r1, r6
 8012028:	9804      	ldr	r0, [sp, #16]
 801202a:	f7fb ffa9 	bl	800df80 <_Bfree>
 801202e:	2f00      	cmp	r7, #0
 8012030:	d100      	bne.n	8012034 <_dtoa_r+0x984>
 8012032:	e6a3      	b.n	8011d7c <_dtoa_r+0x6cc>
 8012034:	2d00      	cmp	r5, #0
 8012036:	d005      	beq.n	8012044 <_dtoa_r+0x994>
 8012038:	42bd      	cmp	r5, r7
 801203a:	d003      	beq.n	8012044 <_dtoa_r+0x994>
 801203c:	0029      	movs	r1, r5
 801203e:	9804      	ldr	r0, [sp, #16]
 8012040:	f7fb ff9e 	bl	800df80 <_Bfree>
 8012044:	0039      	movs	r1, r7
 8012046:	9804      	ldr	r0, [sp, #16]
 8012048:	f7fb ff9a 	bl	800df80 <_Bfree>
 801204c:	e696      	b.n	8011d7c <_dtoa_r+0x6cc>
 801204e:	2600      	movs	r6, #0
 8012050:	0037      	movs	r7, r6
 8012052:	e7e2      	b.n	801201a <_dtoa_r+0x96a>
 8012054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012056:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012058:	9303      	str	r3, [sp, #12]
 801205a:	0037      	movs	r7, r6
 801205c:	e57d      	b.n	8011b5a <_dtoa_r+0x4aa>
 801205e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012060:	2b00      	cmp	r3, #0
 8012062:	d100      	bne.n	8012066 <_dtoa_r+0x9b6>
 8012064:	e0c3      	b.n	80121ee <_dtoa_r+0xb3e>
 8012066:	9b07      	ldr	r3, [sp, #28]
 8012068:	930b      	str	r3, [sp, #44]	; 0x2c
 801206a:	2c00      	cmp	r4, #0
 801206c:	dd05      	ble.n	801207a <_dtoa_r+0x9ca>
 801206e:	0039      	movs	r1, r7
 8012070:	0022      	movs	r2, r4
 8012072:	9804      	ldr	r0, [sp, #16]
 8012074:	f7fc f970 	bl	800e358 <__lshift>
 8012078:	0007      	movs	r7, r0
 801207a:	0038      	movs	r0, r7
 801207c:	2d00      	cmp	r5, #0
 801207e:	d024      	beq.n	80120ca <_dtoa_r+0xa1a>
 8012080:	6879      	ldr	r1, [r7, #4]
 8012082:	9804      	ldr	r0, [sp, #16]
 8012084:	f7fb ff54 	bl	800df30 <_Balloc>
 8012088:	1e04      	subs	r4, r0, #0
 801208a:	d111      	bne.n	80120b0 <_dtoa_r+0xa00>
 801208c:	0022      	movs	r2, r4
 801208e:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <_dtoa_r+0x9f4>)
 8012090:	4805      	ldr	r0, [pc, #20]	; (80120a8 <_dtoa_r+0x9f8>)
 8012092:	4906      	ldr	r1, [pc, #24]	; (80120ac <_dtoa_r+0x9fc>)
 8012094:	e43c      	b.n	8011910 <_dtoa_r+0x260>
 8012096:	46c0      	nop			; (mov r8, r8)
 8012098:	40240000 	.word	0x40240000
 801209c:	00000433 	.word	0x00000433
 80120a0:	7ff00000 	.word	0x7ff00000
 80120a4:	08015c21 	.word	0x08015c21
 80120a8:	08015eb1 	.word	0x08015eb1
 80120ac:	000002ef 	.word	0x000002ef
 80120b0:	0039      	movs	r1, r7
 80120b2:	693a      	ldr	r2, [r7, #16]
 80120b4:	310c      	adds	r1, #12
 80120b6:	3202      	adds	r2, #2
 80120b8:	0092      	lsls	r2, r2, #2
 80120ba:	300c      	adds	r0, #12
 80120bc:	f7fb fa9d 	bl	800d5fa <memcpy>
 80120c0:	2201      	movs	r2, #1
 80120c2:	0021      	movs	r1, r4
 80120c4:	9804      	ldr	r0, [sp, #16]
 80120c6:	f7fc f947 	bl	800e358 <__lshift>
 80120ca:	9b06      	ldr	r3, [sp, #24]
 80120cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80120ce:	9307      	str	r3, [sp, #28]
 80120d0:	3b01      	subs	r3, #1
 80120d2:	189b      	adds	r3, r3, r2
 80120d4:	2201      	movs	r2, #1
 80120d6:	003d      	movs	r5, r7
 80120d8:	0007      	movs	r7, r0
 80120da:	930e      	str	r3, [sp, #56]	; 0x38
 80120dc:	9b08      	ldr	r3, [sp, #32]
 80120de:	4013      	ands	r3, r2
 80120e0:	930d      	str	r3, [sp, #52]	; 0x34
 80120e2:	0031      	movs	r1, r6
 80120e4:	9805      	ldr	r0, [sp, #20]
 80120e6:	f7ff fa53 	bl	8011590 <quorem>
 80120ea:	0029      	movs	r1, r5
 80120ec:	0004      	movs	r4, r0
 80120ee:	900b      	str	r0, [sp, #44]	; 0x2c
 80120f0:	9805      	ldr	r0, [sp, #20]
 80120f2:	f7fc f99f 	bl	800e434 <__mcmp>
 80120f6:	003a      	movs	r2, r7
 80120f8:	900c      	str	r0, [sp, #48]	; 0x30
 80120fa:	0031      	movs	r1, r6
 80120fc:	9804      	ldr	r0, [sp, #16]
 80120fe:	f7fc f9b5 	bl	800e46c <__mdiff>
 8012102:	2201      	movs	r2, #1
 8012104:	68c3      	ldr	r3, [r0, #12]
 8012106:	3430      	adds	r4, #48	; 0x30
 8012108:	9008      	str	r0, [sp, #32]
 801210a:	920a      	str	r2, [sp, #40]	; 0x28
 801210c:	2b00      	cmp	r3, #0
 801210e:	d104      	bne.n	801211a <_dtoa_r+0xa6a>
 8012110:	0001      	movs	r1, r0
 8012112:	9805      	ldr	r0, [sp, #20]
 8012114:	f7fc f98e 	bl	800e434 <__mcmp>
 8012118:	900a      	str	r0, [sp, #40]	; 0x28
 801211a:	9908      	ldr	r1, [sp, #32]
 801211c:	9804      	ldr	r0, [sp, #16]
 801211e:	f7fb ff2f 	bl	800df80 <_Bfree>
 8012122:	9b07      	ldr	r3, [sp, #28]
 8012124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012126:	3301      	adds	r3, #1
 8012128:	9308      	str	r3, [sp, #32]
 801212a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801212c:	4313      	orrs	r3, r2
 801212e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012130:	4313      	orrs	r3, r2
 8012132:	d109      	bne.n	8012148 <_dtoa_r+0xa98>
 8012134:	2c39      	cmp	r4, #57	; 0x39
 8012136:	d022      	beq.n	801217e <_dtoa_r+0xace>
 8012138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801213a:	2b00      	cmp	r3, #0
 801213c:	dd01      	ble.n	8012142 <_dtoa_r+0xa92>
 801213e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8012140:	3431      	adds	r4, #49	; 0x31
 8012142:	9b07      	ldr	r3, [sp, #28]
 8012144:	701c      	strb	r4, [r3, #0]
 8012146:	e76e      	b.n	8012026 <_dtoa_r+0x976>
 8012148:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801214a:	2b00      	cmp	r3, #0
 801214c:	db04      	blt.n	8012158 <_dtoa_r+0xaa8>
 801214e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012150:	4313      	orrs	r3, r2
 8012152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012154:	4313      	orrs	r3, r2
 8012156:	d11e      	bne.n	8012196 <_dtoa_r+0xae6>
 8012158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801215a:	2b00      	cmp	r3, #0
 801215c:	ddf1      	ble.n	8012142 <_dtoa_r+0xa92>
 801215e:	9905      	ldr	r1, [sp, #20]
 8012160:	2201      	movs	r2, #1
 8012162:	9804      	ldr	r0, [sp, #16]
 8012164:	f7fc f8f8 	bl	800e358 <__lshift>
 8012168:	0031      	movs	r1, r6
 801216a:	9005      	str	r0, [sp, #20]
 801216c:	f7fc f962 	bl	800e434 <__mcmp>
 8012170:	2800      	cmp	r0, #0
 8012172:	dc02      	bgt.n	801217a <_dtoa_r+0xaca>
 8012174:	d1e5      	bne.n	8012142 <_dtoa_r+0xa92>
 8012176:	07e3      	lsls	r3, r4, #31
 8012178:	d5e3      	bpl.n	8012142 <_dtoa_r+0xa92>
 801217a:	2c39      	cmp	r4, #57	; 0x39
 801217c:	d1df      	bne.n	801213e <_dtoa_r+0xa8e>
 801217e:	2339      	movs	r3, #57	; 0x39
 8012180:	9a07      	ldr	r2, [sp, #28]
 8012182:	7013      	strb	r3, [r2, #0]
 8012184:	9b08      	ldr	r3, [sp, #32]
 8012186:	9308      	str	r3, [sp, #32]
 8012188:	3b01      	subs	r3, #1
 801218a:	781a      	ldrb	r2, [r3, #0]
 801218c:	2a39      	cmp	r2, #57	; 0x39
 801218e:	d063      	beq.n	8012258 <_dtoa_r+0xba8>
 8012190:	3201      	adds	r2, #1
 8012192:	701a      	strb	r2, [r3, #0]
 8012194:	e747      	b.n	8012026 <_dtoa_r+0x976>
 8012196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012198:	2b00      	cmp	r3, #0
 801219a:	dd03      	ble.n	80121a4 <_dtoa_r+0xaf4>
 801219c:	2c39      	cmp	r4, #57	; 0x39
 801219e:	d0ee      	beq.n	801217e <_dtoa_r+0xace>
 80121a0:	3401      	adds	r4, #1
 80121a2:	e7ce      	b.n	8012142 <_dtoa_r+0xa92>
 80121a4:	9b07      	ldr	r3, [sp, #28]
 80121a6:	9a07      	ldr	r2, [sp, #28]
 80121a8:	701c      	strb	r4, [r3, #0]
 80121aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d03e      	beq.n	801222e <_dtoa_r+0xb7e>
 80121b0:	2300      	movs	r3, #0
 80121b2:	220a      	movs	r2, #10
 80121b4:	9905      	ldr	r1, [sp, #20]
 80121b6:	9804      	ldr	r0, [sp, #16]
 80121b8:	f7fb feec 	bl	800df94 <__multadd>
 80121bc:	2300      	movs	r3, #0
 80121be:	9005      	str	r0, [sp, #20]
 80121c0:	220a      	movs	r2, #10
 80121c2:	0029      	movs	r1, r5
 80121c4:	9804      	ldr	r0, [sp, #16]
 80121c6:	42bd      	cmp	r5, r7
 80121c8:	d106      	bne.n	80121d8 <_dtoa_r+0xb28>
 80121ca:	f7fb fee3 	bl	800df94 <__multadd>
 80121ce:	0005      	movs	r5, r0
 80121d0:	0007      	movs	r7, r0
 80121d2:	9b08      	ldr	r3, [sp, #32]
 80121d4:	9307      	str	r3, [sp, #28]
 80121d6:	e784      	b.n	80120e2 <_dtoa_r+0xa32>
 80121d8:	f7fb fedc 	bl	800df94 <__multadd>
 80121dc:	0039      	movs	r1, r7
 80121de:	0005      	movs	r5, r0
 80121e0:	2300      	movs	r3, #0
 80121e2:	220a      	movs	r2, #10
 80121e4:	9804      	ldr	r0, [sp, #16]
 80121e6:	f7fb fed5 	bl	800df94 <__multadd>
 80121ea:	0007      	movs	r7, r0
 80121ec:	e7f1      	b.n	80121d2 <_dtoa_r+0xb22>
 80121ee:	9b07      	ldr	r3, [sp, #28]
 80121f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80121f2:	2500      	movs	r5, #0
 80121f4:	0031      	movs	r1, r6
 80121f6:	9805      	ldr	r0, [sp, #20]
 80121f8:	f7ff f9ca 	bl	8011590 <quorem>
 80121fc:	9b06      	ldr	r3, [sp, #24]
 80121fe:	3030      	adds	r0, #48	; 0x30
 8012200:	5558      	strb	r0, [r3, r5]
 8012202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012204:	3501      	adds	r5, #1
 8012206:	0004      	movs	r4, r0
 8012208:	42ab      	cmp	r3, r5
 801220a:	dd07      	ble.n	801221c <_dtoa_r+0xb6c>
 801220c:	2300      	movs	r3, #0
 801220e:	220a      	movs	r2, #10
 8012210:	9905      	ldr	r1, [sp, #20]
 8012212:	9804      	ldr	r0, [sp, #16]
 8012214:	f7fb febe 	bl	800df94 <__multadd>
 8012218:	9005      	str	r0, [sp, #20]
 801221a:	e7eb      	b.n	80121f4 <_dtoa_r+0xb44>
 801221c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801221e:	2301      	movs	r3, #1
 8012220:	2a00      	cmp	r2, #0
 8012222:	dd00      	ble.n	8012226 <_dtoa_r+0xb76>
 8012224:	0013      	movs	r3, r2
 8012226:	2500      	movs	r5, #0
 8012228:	9a06      	ldr	r2, [sp, #24]
 801222a:	18d3      	adds	r3, r2, r3
 801222c:	9308      	str	r3, [sp, #32]
 801222e:	9905      	ldr	r1, [sp, #20]
 8012230:	2201      	movs	r2, #1
 8012232:	9804      	ldr	r0, [sp, #16]
 8012234:	f7fc f890 	bl	800e358 <__lshift>
 8012238:	0031      	movs	r1, r6
 801223a:	9005      	str	r0, [sp, #20]
 801223c:	f7fc f8fa 	bl	800e434 <__mcmp>
 8012240:	2800      	cmp	r0, #0
 8012242:	dc9f      	bgt.n	8012184 <_dtoa_r+0xad4>
 8012244:	d101      	bne.n	801224a <_dtoa_r+0xb9a>
 8012246:	07e4      	lsls	r4, r4, #31
 8012248:	d49c      	bmi.n	8012184 <_dtoa_r+0xad4>
 801224a:	9b08      	ldr	r3, [sp, #32]
 801224c:	9308      	str	r3, [sp, #32]
 801224e:	3b01      	subs	r3, #1
 8012250:	781a      	ldrb	r2, [r3, #0]
 8012252:	2a30      	cmp	r2, #48	; 0x30
 8012254:	d0fa      	beq.n	801224c <_dtoa_r+0xb9c>
 8012256:	e6e6      	b.n	8012026 <_dtoa_r+0x976>
 8012258:	9a06      	ldr	r2, [sp, #24]
 801225a:	429a      	cmp	r2, r3
 801225c:	d193      	bne.n	8012186 <_dtoa_r+0xad6>
 801225e:	9b03      	ldr	r3, [sp, #12]
 8012260:	3301      	adds	r3, #1
 8012262:	9303      	str	r3, [sp, #12]
 8012264:	2331      	movs	r3, #49	; 0x31
 8012266:	7013      	strb	r3, [r2, #0]
 8012268:	e6dd      	b.n	8012026 <_dtoa_r+0x976>
 801226a:	4b09      	ldr	r3, [pc, #36]	; (8012290 <_dtoa_r+0xbe0>)
 801226c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801226e:	9306      	str	r3, [sp, #24]
 8012270:	4b08      	ldr	r3, [pc, #32]	; (8012294 <_dtoa_r+0xbe4>)
 8012272:	2a00      	cmp	r2, #0
 8012274:	d001      	beq.n	801227a <_dtoa_r+0xbca>
 8012276:	f7ff fa4c 	bl	8011712 <_dtoa_r+0x62>
 801227a:	f7ff fa4c 	bl	8011716 <_dtoa_r+0x66>
 801227e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012280:	2b00      	cmp	r3, #0
 8012282:	dcb6      	bgt.n	80121f2 <_dtoa_r+0xb42>
 8012284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012286:	2b02      	cmp	r3, #2
 8012288:	dd00      	ble.n	801228c <_dtoa_r+0xbdc>
 801228a:	e6b6      	b.n	8011ffa <_dtoa_r+0x94a>
 801228c:	e7b1      	b.n	80121f2 <_dtoa_r+0xb42>
 801228e:	46c0      	nop			; (mov r8, r8)
 8012290:	08015ea4 	.word	0x08015ea4
 8012294:	08015eac 	.word	0x08015eac

08012298 <realloc>:
 8012298:	b510      	push	{r4, lr}
 801229a:	4b03      	ldr	r3, [pc, #12]	; (80122a8 <realloc+0x10>)
 801229c:	000a      	movs	r2, r1
 801229e:	0001      	movs	r1, r0
 80122a0:	6818      	ldr	r0, [r3, #0]
 80122a2:	f000 f803 	bl	80122ac <_realloc_r>
 80122a6:	bd10      	pop	{r4, pc}
 80122a8:	200006d0 	.word	0x200006d0

080122ac <_realloc_r>:
 80122ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122ae:	b087      	sub	sp, #28
 80122b0:	1e0c      	subs	r4, r1, #0
 80122b2:	9001      	str	r0, [sp, #4]
 80122b4:	9205      	str	r2, [sp, #20]
 80122b6:	d106      	bne.n	80122c6 <_realloc_r+0x1a>
 80122b8:	0011      	movs	r1, r2
 80122ba:	f7f9 fd5f 	bl	800bd7c <_malloc_r>
 80122be:	0007      	movs	r7, r0
 80122c0:	0038      	movs	r0, r7
 80122c2:	b007      	add	sp, #28
 80122c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122c6:	9801      	ldr	r0, [sp, #4]
 80122c8:	f7f9 ff6c 	bl	800c1a4 <__malloc_lock>
 80122cc:	0023      	movs	r3, r4
 80122ce:	3b08      	subs	r3, #8
 80122d0:	685f      	ldr	r7, [r3, #4]
 80122d2:	9304      	str	r3, [sp, #16]
 80122d4:	9b05      	ldr	r3, [sp, #20]
 80122d6:	330b      	adds	r3, #11
 80122d8:	2b16      	cmp	r3, #22
 80122da:	d908      	bls.n	80122ee <_realloc_r+0x42>
 80122dc:	2207      	movs	r2, #7
 80122de:	4393      	bics	r3, r2
 80122e0:	9300      	str	r3, [sp, #0]
 80122e2:	d506      	bpl.n	80122f2 <_realloc_r+0x46>
 80122e4:	230c      	movs	r3, #12
 80122e6:	9a01      	ldr	r2, [sp, #4]
 80122e8:	2700      	movs	r7, #0
 80122ea:	6013      	str	r3, [r2, #0]
 80122ec:	e7e8      	b.n	80122c0 <_realloc_r+0x14>
 80122ee:	2310      	movs	r3, #16
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	9b00      	ldr	r3, [sp, #0]
 80122f4:	9a05      	ldr	r2, [sp, #20]
 80122f6:	4293      	cmp	r3, r2
 80122f8:	d3f4      	bcc.n	80122e4 <_realloc_r+0x38>
 80122fa:	9b04      	ldr	r3, [sp, #16]
 80122fc:	003a      	movs	r2, r7
 80122fe:	9302      	str	r3, [sp, #8]
 8012300:	2303      	movs	r3, #3
 8012302:	439a      	bics	r2, r3
 8012304:	9b00      	ldr	r3, [sp, #0]
 8012306:	9203      	str	r2, [sp, #12]
 8012308:	4293      	cmp	r3, r2
 801230a:	dc00      	bgt.n	801230e <_realloc_r+0x62>
 801230c:	e169      	b.n	80125e2 <_realloc_r+0x336>
 801230e:	9b04      	ldr	r3, [sp, #16]
 8012310:	48b8      	ldr	r0, [pc, #736]	; (80125f4 <_realloc_r+0x348>)
 8012312:	189b      	adds	r3, r3, r2
 8012314:	6882      	ldr	r2, [r0, #8]
 8012316:	4694      	mov	ip, r2
 8012318:	685a      	ldr	r2, [r3, #4]
 801231a:	459c      	cmp	ip, r3
 801231c:	d006      	beq.n	801232c <_realloc_r+0x80>
 801231e:	2501      	movs	r5, #1
 8012320:	0011      	movs	r1, r2
 8012322:	43a9      	bics	r1, r5
 8012324:	1859      	adds	r1, r3, r1
 8012326:	6849      	ldr	r1, [r1, #4]
 8012328:	4229      	tst	r1, r5
 801232a:	d144      	bne.n	80123b6 <_realloc_r+0x10a>
 801232c:	2103      	movs	r1, #3
 801232e:	438a      	bics	r2, r1
 8012330:	9903      	ldr	r1, [sp, #12]
 8012332:	188e      	adds	r6, r1, r2
 8012334:	9900      	ldr	r1, [sp, #0]
 8012336:	459c      	cmp	ip, r3
 8012338:	d117      	bne.n	801236a <_realloc_r+0xbe>
 801233a:	3110      	adds	r1, #16
 801233c:	42b1      	cmp	r1, r6
 801233e:	dc3c      	bgt.n	80123ba <_realloc_r+0x10e>
 8012340:	9a00      	ldr	r2, [sp, #0]
 8012342:	2101      	movs	r1, #1
 8012344:	4694      	mov	ip, r2
 8012346:	1ab6      	subs	r6, r6, r2
 8012348:	0022      	movs	r2, r4
 801234a:	9b04      	ldr	r3, [sp, #16]
 801234c:	430e      	orrs	r6, r1
 801234e:	4463      	add	r3, ip
 8012350:	6083      	str	r3, [r0, #8]
 8012352:	3a08      	subs	r2, #8
 8012354:	605e      	str	r6, [r3, #4]
 8012356:	6853      	ldr	r3, [r2, #4]
 8012358:	9801      	ldr	r0, [sp, #4]
 801235a:	400b      	ands	r3, r1
 801235c:	4661      	mov	r1, ip
 801235e:	430b      	orrs	r3, r1
 8012360:	6053      	str	r3, [r2, #4]
 8012362:	f7f9 ff27 	bl	800c1b4 <__malloc_unlock>
 8012366:	0027      	movs	r7, r4
 8012368:	e7aa      	b.n	80122c0 <_realloc_r+0x14>
 801236a:	42b1      	cmp	r1, r6
 801236c:	dc25      	bgt.n	80123ba <_realloc_r+0x10e>
 801236e:	68da      	ldr	r2, [r3, #12]
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	60da      	str	r2, [r3, #12]
 8012374:	6093      	str	r3, [r2, #8]
 8012376:	9b00      	ldr	r3, [sp, #0]
 8012378:	9a02      	ldr	r2, [sp, #8]
 801237a:	1af4      	subs	r4, r6, r3
 801237c:	9b02      	ldr	r3, [sp, #8]
 801237e:	1992      	adds	r2, r2, r6
 8012380:	6858      	ldr	r0, [r3, #4]
 8012382:	2301      	movs	r3, #1
 8012384:	4018      	ands	r0, r3
 8012386:	2c0f      	cmp	r4, #15
 8012388:	d800      	bhi.n	801238c <_realloc_r+0xe0>
 801238a:	e12c      	b.n	80125e6 <_realloc_r+0x33a>
 801238c:	9d00      	ldr	r5, [sp, #0]
 801238e:	9902      	ldr	r1, [sp, #8]
 8012390:	4328      	orrs	r0, r5
 8012392:	1949      	adds	r1, r1, r5
 8012394:	9d02      	ldr	r5, [sp, #8]
 8012396:	431c      	orrs	r4, r3
 8012398:	6068      	str	r0, [r5, #4]
 801239a:	604c      	str	r4, [r1, #4]
 801239c:	6850      	ldr	r0, [r2, #4]
 801239e:	3108      	adds	r1, #8
 80123a0:	4303      	orrs	r3, r0
 80123a2:	6053      	str	r3, [r2, #4]
 80123a4:	9801      	ldr	r0, [sp, #4]
 80123a6:	f7fb f9a3 	bl	800d6f0 <_free_r>
 80123aa:	9801      	ldr	r0, [sp, #4]
 80123ac:	f7f9 ff02 	bl	800c1b4 <__malloc_unlock>
 80123b0:	9f02      	ldr	r7, [sp, #8]
 80123b2:	3708      	adds	r7, #8
 80123b4:	e784      	b.n	80122c0 <_realloc_r+0x14>
 80123b6:	2200      	movs	r2, #0
 80123b8:	0013      	movs	r3, r2
 80123ba:	07ff      	lsls	r7, r7, #31
 80123bc:	d500      	bpl.n	80123c0 <_realloc_r+0x114>
 80123be:	e0c6      	b.n	801254e <_realloc_r+0x2a2>
 80123c0:	0021      	movs	r1, r4
 80123c2:	2003      	movs	r0, #3
 80123c4:	3908      	subs	r1, #8
 80123c6:	680d      	ldr	r5, [r1, #0]
 80123c8:	9904      	ldr	r1, [sp, #16]
 80123ca:	1b4d      	subs	r5, r1, r5
 80123cc:	6869      	ldr	r1, [r5, #4]
 80123ce:	4381      	bics	r1, r0
 80123d0:	9803      	ldr	r0, [sp, #12]
 80123d2:	180f      	adds	r7, r1, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d100      	bne.n	80123da <_realloc_r+0x12e>
 80123d8:	e084      	b.n	80124e4 <_realloc_r+0x238>
 80123da:	19d6      	adds	r6, r2, r7
 80123dc:	459c      	cmp	ip, r3
 80123de:	d148      	bne.n	8012472 <_realloc_r+0x1c6>
 80123e0:	9b00      	ldr	r3, [sp, #0]
 80123e2:	3310      	adds	r3, #16
 80123e4:	42b3      	cmp	r3, r6
 80123e6:	dc7d      	bgt.n	80124e4 <_realloc_r+0x238>
 80123e8:	68aa      	ldr	r2, [r5, #8]
 80123ea:	68eb      	ldr	r3, [r5, #12]
 80123ec:	002f      	movs	r7, r5
 80123ee:	60d3      	str	r3, [r2, #12]
 80123f0:	609a      	str	r2, [r3, #8]
 80123f2:	0002      	movs	r2, r0
 80123f4:	3a04      	subs	r2, #4
 80123f6:	3708      	adds	r7, #8
 80123f8:	2a24      	cmp	r2, #36	; 0x24
 80123fa:	d835      	bhi.n	8012468 <_realloc_r+0x1bc>
 80123fc:	003b      	movs	r3, r7
 80123fe:	2a13      	cmp	r2, #19
 8012400:	d908      	bls.n	8012414 <_realloc_r+0x168>
 8012402:	6823      	ldr	r3, [r4, #0]
 8012404:	60ab      	str	r3, [r5, #8]
 8012406:	6863      	ldr	r3, [r4, #4]
 8012408:	60eb      	str	r3, [r5, #12]
 801240a:	2a1b      	cmp	r2, #27
 801240c:	d81a      	bhi.n	8012444 <_realloc_r+0x198>
 801240e:	002b      	movs	r3, r5
 8012410:	3408      	adds	r4, #8
 8012412:	3310      	adds	r3, #16
 8012414:	6822      	ldr	r2, [r4, #0]
 8012416:	601a      	str	r2, [r3, #0]
 8012418:	6862      	ldr	r2, [r4, #4]
 801241a:	605a      	str	r2, [r3, #4]
 801241c:	68a2      	ldr	r2, [r4, #8]
 801241e:	609a      	str	r2, [r3, #8]
 8012420:	9b00      	ldr	r3, [sp, #0]
 8012422:	4a74      	ldr	r2, [pc, #464]	; (80125f4 <_realloc_r+0x348>)
 8012424:	18eb      	adds	r3, r5, r3
 8012426:	6093      	str	r3, [r2, #8]
 8012428:	9a00      	ldr	r2, [sp, #0]
 801242a:	1ab6      	subs	r6, r6, r2
 801242c:	2201      	movs	r2, #1
 801242e:	4316      	orrs	r6, r2
 8012430:	605e      	str	r6, [r3, #4]
 8012432:	686b      	ldr	r3, [r5, #4]
 8012434:	4013      	ands	r3, r2
 8012436:	9a00      	ldr	r2, [sp, #0]
 8012438:	4313      	orrs	r3, r2
 801243a:	606b      	str	r3, [r5, #4]
 801243c:	9801      	ldr	r0, [sp, #4]
 801243e:	f7f9 feb9 	bl	800c1b4 <__malloc_unlock>
 8012442:	e73d      	b.n	80122c0 <_realloc_r+0x14>
 8012444:	68a3      	ldr	r3, [r4, #8]
 8012446:	612b      	str	r3, [r5, #16]
 8012448:	68e3      	ldr	r3, [r4, #12]
 801244a:	616b      	str	r3, [r5, #20]
 801244c:	2a24      	cmp	r2, #36	; 0x24
 801244e:	d003      	beq.n	8012458 <_realloc_r+0x1ac>
 8012450:	002b      	movs	r3, r5
 8012452:	3410      	adds	r4, #16
 8012454:	3318      	adds	r3, #24
 8012456:	e7dd      	b.n	8012414 <_realloc_r+0x168>
 8012458:	6923      	ldr	r3, [r4, #16]
 801245a:	61ab      	str	r3, [r5, #24]
 801245c:	002b      	movs	r3, r5
 801245e:	6962      	ldr	r2, [r4, #20]
 8012460:	3320      	adds	r3, #32
 8012462:	61ea      	str	r2, [r5, #28]
 8012464:	3418      	adds	r4, #24
 8012466:	e7d5      	b.n	8012414 <_realloc_r+0x168>
 8012468:	0021      	movs	r1, r4
 801246a:	0038      	movs	r0, r7
 801246c:	f001 fb2f 	bl	8013ace <memmove>
 8012470:	e7d6      	b.n	8012420 <_realloc_r+0x174>
 8012472:	9a00      	ldr	r2, [sp, #0]
 8012474:	42b2      	cmp	r2, r6
 8012476:	dc35      	bgt.n	80124e4 <_realloc_r+0x238>
 8012478:	0028      	movs	r0, r5
 801247a:	68da      	ldr	r2, [r3, #12]
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	3008      	adds	r0, #8
 8012480:	60da      	str	r2, [r3, #12]
 8012482:	6093      	str	r3, [r2, #8]
 8012484:	68aa      	ldr	r2, [r5, #8]
 8012486:	68eb      	ldr	r3, [r5, #12]
 8012488:	60d3      	str	r3, [r2, #12]
 801248a:	609a      	str	r2, [r3, #8]
 801248c:	9a03      	ldr	r2, [sp, #12]
 801248e:	3a04      	subs	r2, #4
 8012490:	2a24      	cmp	r2, #36	; 0x24
 8012492:	d823      	bhi.n	80124dc <_realloc_r+0x230>
 8012494:	2a13      	cmp	r2, #19
 8012496:	d907      	bls.n	80124a8 <_realloc_r+0x1fc>
 8012498:	6823      	ldr	r3, [r4, #0]
 801249a:	60ab      	str	r3, [r5, #8]
 801249c:	6863      	ldr	r3, [r4, #4]
 801249e:	60eb      	str	r3, [r5, #12]
 80124a0:	2a1b      	cmp	r2, #27
 80124a2:	d809      	bhi.n	80124b8 <_realloc_r+0x20c>
 80124a4:	3408      	adds	r4, #8
 80124a6:	3008      	adds	r0, #8
 80124a8:	6823      	ldr	r3, [r4, #0]
 80124aa:	6003      	str	r3, [r0, #0]
 80124ac:	6863      	ldr	r3, [r4, #4]
 80124ae:	6043      	str	r3, [r0, #4]
 80124b0:	68a3      	ldr	r3, [r4, #8]
 80124b2:	6083      	str	r3, [r0, #8]
 80124b4:	9502      	str	r5, [sp, #8]
 80124b6:	e75e      	b.n	8012376 <_realloc_r+0xca>
 80124b8:	68a3      	ldr	r3, [r4, #8]
 80124ba:	612b      	str	r3, [r5, #16]
 80124bc:	68e3      	ldr	r3, [r4, #12]
 80124be:	616b      	str	r3, [r5, #20]
 80124c0:	2a24      	cmp	r2, #36	; 0x24
 80124c2:	d003      	beq.n	80124cc <_realloc_r+0x220>
 80124c4:	0028      	movs	r0, r5
 80124c6:	3410      	adds	r4, #16
 80124c8:	3018      	adds	r0, #24
 80124ca:	e7ed      	b.n	80124a8 <_realloc_r+0x1fc>
 80124cc:	0028      	movs	r0, r5
 80124ce:	6923      	ldr	r3, [r4, #16]
 80124d0:	3020      	adds	r0, #32
 80124d2:	61ab      	str	r3, [r5, #24]
 80124d4:	6963      	ldr	r3, [r4, #20]
 80124d6:	3418      	adds	r4, #24
 80124d8:	61eb      	str	r3, [r5, #28]
 80124da:	e7e5      	b.n	80124a8 <_realloc_r+0x1fc>
 80124dc:	0021      	movs	r1, r4
 80124de:	f001 faf6 	bl	8013ace <memmove>
 80124e2:	e7e7      	b.n	80124b4 <_realloc_r+0x208>
 80124e4:	9b00      	ldr	r3, [sp, #0]
 80124e6:	42bb      	cmp	r3, r7
 80124e8:	dc31      	bgt.n	801254e <_realloc_r+0x2a2>
 80124ea:	0028      	movs	r0, r5
 80124ec:	68aa      	ldr	r2, [r5, #8]
 80124ee:	68eb      	ldr	r3, [r5, #12]
 80124f0:	3008      	adds	r0, #8
 80124f2:	60d3      	str	r3, [r2, #12]
 80124f4:	609a      	str	r2, [r3, #8]
 80124f6:	9a03      	ldr	r2, [sp, #12]
 80124f8:	3a04      	subs	r2, #4
 80124fa:	2a24      	cmp	r2, #36	; 0x24
 80124fc:	d823      	bhi.n	8012546 <_realloc_r+0x29a>
 80124fe:	2a13      	cmp	r2, #19
 8012500:	d907      	bls.n	8012512 <_realloc_r+0x266>
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	60ab      	str	r3, [r5, #8]
 8012506:	6863      	ldr	r3, [r4, #4]
 8012508:	60eb      	str	r3, [r5, #12]
 801250a:	2a1b      	cmp	r2, #27
 801250c:	d809      	bhi.n	8012522 <_realloc_r+0x276>
 801250e:	3408      	adds	r4, #8
 8012510:	3008      	adds	r0, #8
 8012512:	6823      	ldr	r3, [r4, #0]
 8012514:	6003      	str	r3, [r0, #0]
 8012516:	6863      	ldr	r3, [r4, #4]
 8012518:	6043      	str	r3, [r0, #4]
 801251a:	68a3      	ldr	r3, [r4, #8]
 801251c:	6083      	str	r3, [r0, #8]
 801251e:	003e      	movs	r6, r7
 8012520:	e7c8      	b.n	80124b4 <_realloc_r+0x208>
 8012522:	68a3      	ldr	r3, [r4, #8]
 8012524:	612b      	str	r3, [r5, #16]
 8012526:	68e3      	ldr	r3, [r4, #12]
 8012528:	616b      	str	r3, [r5, #20]
 801252a:	2a24      	cmp	r2, #36	; 0x24
 801252c:	d003      	beq.n	8012536 <_realloc_r+0x28a>
 801252e:	0028      	movs	r0, r5
 8012530:	3410      	adds	r4, #16
 8012532:	3018      	adds	r0, #24
 8012534:	e7ed      	b.n	8012512 <_realloc_r+0x266>
 8012536:	0028      	movs	r0, r5
 8012538:	6923      	ldr	r3, [r4, #16]
 801253a:	3020      	adds	r0, #32
 801253c:	61ab      	str	r3, [r5, #24]
 801253e:	6963      	ldr	r3, [r4, #20]
 8012540:	3418      	adds	r4, #24
 8012542:	61eb      	str	r3, [r5, #28]
 8012544:	e7e5      	b.n	8012512 <_realloc_r+0x266>
 8012546:	0021      	movs	r1, r4
 8012548:	f001 fac1 	bl	8013ace <memmove>
 801254c:	e7e7      	b.n	801251e <_realloc_r+0x272>
 801254e:	9905      	ldr	r1, [sp, #20]
 8012550:	9801      	ldr	r0, [sp, #4]
 8012552:	f7f9 fc13 	bl	800bd7c <_malloc_r>
 8012556:	1e07      	subs	r7, r0, #0
 8012558:	d100      	bne.n	801255c <_realloc_r+0x2b0>
 801255a:	e76f      	b.n	801243c <_realloc_r+0x190>
 801255c:	0023      	movs	r3, r4
 801255e:	2201      	movs	r2, #1
 8012560:	3b08      	subs	r3, #8
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	4393      	bics	r3, r2
 8012566:	9a04      	ldr	r2, [sp, #16]
 8012568:	18d3      	adds	r3, r2, r3
 801256a:	0002      	movs	r2, r0
 801256c:	3a08      	subs	r2, #8
 801256e:	4293      	cmp	r3, r2
 8012570:	d105      	bne.n	801257e <_realloc_r+0x2d2>
 8012572:	685e      	ldr	r6, [r3, #4]
 8012574:	2303      	movs	r3, #3
 8012576:	439e      	bics	r6, r3
 8012578:	9b03      	ldr	r3, [sp, #12]
 801257a:	18f6      	adds	r6, r6, r3
 801257c:	e6fb      	b.n	8012376 <_realloc_r+0xca>
 801257e:	9a03      	ldr	r2, [sp, #12]
 8012580:	3a04      	subs	r2, #4
 8012582:	2a24      	cmp	r2, #36	; 0x24
 8012584:	d829      	bhi.n	80125da <_realloc_r+0x32e>
 8012586:	0003      	movs	r3, r0
 8012588:	0021      	movs	r1, r4
 801258a:	2a13      	cmp	r2, #19
 801258c:	d908      	bls.n	80125a0 <_realloc_r+0x2f4>
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	6003      	str	r3, [r0, #0]
 8012592:	6863      	ldr	r3, [r4, #4]
 8012594:	6043      	str	r3, [r0, #4]
 8012596:	2a1b      	cmp	r2, #27
 8012598:	d80d      	bhi.n	80125b6 <_realloc_r+0x30a>
 801259a:	0003      	movs	r3, r0
 801259c:	3108      	adds	r1, #8
 801259e:	3308      	adds	r3, #8
 80125a0:	680a      	ldr	r2, [r1, #0]
 80125a2:	601a      	str	r2, [r3, #0]
 80125a4:	684a      	ldr	r2, [r1, #4]
 80125a6:	605a      	str	r2, [r3, #4]
 80125a8:	688a      	ldr	r2, [r1, #8]
 80125aa:	609a      	str	r2, [r3, #8]
 80125ac:	0021      	movs	r1, r4
 80125ae:	9801      	ldr	r0, [sp, #4]
 80125b0:	f7fb f89e 	bl	800d6f0 <_free_r>
 80125b4:	e742      	b.n	801243c <_realloc_r+0x190>
 80125b6:	68a3      	ldr	r3, [r4, #8]
 80125b8:	6083      	str	r3, [r0, #8]
 80125ba:	68e3      	ldr	r3, [r4, #12]
 80125bc:	60c3      	str	r3, [r0, #12]
 80125be:	2a24      	cmp	r2, #36	; 0x24
 80125c0:	d003      	beq.n	80125ca <_realloc_r+0x31e>
 80125c2:	0003      	movs	r3, r0
 80125c4:	3110      	adds	r1, #16
 80125c6:	3310      	adds	r3, #16
 80125c8:	e7ea      	b.n	80125a0 <_realloc_r+0x2f4>
 80125ca:	6923      	ldr	r3, [r4, #16]
 80125cc:	3118      	adds	r1, #24
 80125ce:	6103      	str	r3, [r0, #16]
 80125d0:	0003      	movs	r3, r0
 80125d2:	6962      	ldr	r2, [r4, #20]
 80125d4:	3318      	adds	r3, #24
 80125d6:	6142      	str	r2, [r0, #20]
 80125d8:	e7e2      	b.n	80125a0 <_realloc_r+0x2f4>
 80125da:	0021      	movs	r1, r4
 80125dc:	f001 fa77 	bl	8013ace <memmove>
 80125e0:	e7e4      	b.n	80125ac <_realloc_r+0x300>
 80125e2:	9e03      	ldr	r6, [sp, #12]
 80125e4:	e6c7      	b.n	8012376 <_realloc_r+0xca>
 80125e6:	9902      	ldr	r1, [sp, #8]
 80125e8:	4306      	orrs	r6, r0
 80125ea:	604e      	str	r6, [r1, #4]
 80125ec:	6851      	ldr	r1, [r2, #4]
 80125ee:	430b      	orrs	r3, r1
 80125f0:	6053      	str	r3, [r2, #4]
 80125f2:	e6da      	b.n	80123aa <_realloc_r+0xfe>
 80125f4:	20000028 	.word	0x20000028

080125f8 <_strtoll_l.constprop.0>:
 80125f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125fa:	b08d      	sub	sp, #52	; 0x34
 80125fc:	9203      	str	r2, [sp, #12]
 80125fe:	4a53      	ldr	r2, [pc, #332]	; (801274c <_strtoll_l.constprop.0+0x154>)
 8012600:	001e      	movs	r6, r3
 8012602:	9102      	str	r1, [sp, #8]
 8012604:	000b      	movs	r3, r1
 8012606:	4694      	mov	ip, r2
 8012608:	2108      	movs	r1, #8
 801260a:	900a      	str	r0, [sp, #40]	; 0x28
 801260c:	001a      	movs	r2, r3
 801260e:	4660      	mov	r0, ip
 8012610:	7814      	ldrb	r4, [r2, #0]
 8012612:	3301      	adds	r3, #1
 8012614:	5d00      	ldrb	r0, [r0, r4]
 8012616:	001d      	movs	r5, r3
 8012618:	0007      	movs	r7, r0
 801261a:	400f      	ands	r7, r1
 801261c:	4208      	tst	r0, r1
 801261e:	d1f5      	bne.n	801260c <_strtoll_l.constprop.0+0x14>
 8012620:	2c2d      	cmp	r4, #45	; 0x2d
 8012622:	d153      	bne.n	80126cc <_strtoll_l.constprop.0+0xd4>
 8012624:	781c      	ldrb	r4, [r3, #0]
 8012626:	2301      	movs	r3, #1
 8012628:	1c95      	adds	r5, r2, #2
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	2e00      	cmp	r6, #0
 801262e:	d100      	bne.n	8012632 <_strtoll_l.constprop.0+0x3a>
 8012630:	e086      	b.n	8012740 <_strtoll_l.constprop.0+0x148>
 8012632:	2e10      	cmp	r6, #16
 8012634:	d10a      	bne.n	801264c <_strtoll_l.constprop.0+0x54>
 8012636:	2c30      	cmp	r4, #48	; 0x30
 8012638:	d108      	bne.n	801264c <_strtoll_l.constprop.0+0x54>
 801263a:	2220      	movs	r2, #32
 801263c:	782b      	ldrb	r3, [r5, #0]
 801263e:	4393      	bics	r3, r2
 8012640:	2b58      	cmp	r3, #88	; 0x58
 8012642:	d000      	beq.n	8012646 <_strtoll_l.constprop.0+0x4e>
 8012644:	e076      	b.n	8012734 <_strtoll_l.constprop.0+0x13c>
 8012646:	2610      	movs	r6, #16
 8012648:	786c      	ldrb	r4, [r5, #1]
 801264a:	3502      	adds	r5, #2
 801264c:	2001      	movs	r0, #1
 801264e:	2300      	movs	r3, #0
 8012650:	493f      	ldr	r1, [pc, #252]	; (8012750 <_strtoll_l.constprop.0+0x158>)
 8012652:	9a01      	ldr	r2, [sp, #4]
 8012654:	4240      	negs	r0, r0
 8012656:	1812      	adds	r2, r2, r0
 8012658:	414b      	adcs	r3, r1
 801265a:	9204      	str	r2, [sp, #16]
 801265c:	9305      	str	r3, [sp, #20]
 801265e:	9804      	ldr	r0, [sp, #16]
 8012660:	9905      	ldr	r1, [sp, #20]
 8012662:	17f3      	asrs	r3, r6, #31
 8012664:	0032      	movs	r2, r6
 8012666:	930b      	str	r3, [sp, #44]	; 0x2c
 8012668:	f7ed ff1c 	bl	80004a4 <__aeabi_uldivmod>
 801266c:	2300      	movs	r3, #0
 801266e:	000f      	movs	r7, r1
 8012670:	9008      	str	r0, [sp, #32]
 8012672:	2100      	movs	r1, #0
 8012674:	2000      	movs	r0, #0
 8012676:	9209      	str	r2, [sp, #36]	; 0x24
 8012678:	0022      	movs	r2, r4
 801267a:	3a30      	subs	r2, #48	; 0x30
 801267c:	2a09      	cmp	r2, #9
 801267e:	d82b      	bhi.n	80126d8 <_strtoll_l.constprop.0+0xe0>
 8012680:	0014      	movs	r4, r2
 8012682:	42a6      	cmp	r6, r4
 8012684:	dd37      	ble.n	80126f6 <_strtoll_l.constprop.0+0xfe>
 8012686:	1c5a      	adds	r2, r3, #1
 8012688:	d01d      	beq.n	80126c6 <_strtoll_l.constprop.0+0xce>
 801268a:	42b9      	cmp	r1, r7
 801268c:	d830      	bhi.n	80126f0 <_strtoll_l.constprop.0+0xf8>
 801268e:	d102      	bne.n	8012696 <_strtoll_l.constprop.0+0x9e>
 8012690:	9b08      	ldr	r3, [sp, #32]
 8012692:	4298      	cmp	r0, r3
 8012694:	d82c      	bhi.n	80126f0 <_strtoll_l.constprop.0+0xf8>
 8012696:	9b08      	ldr	r3, [sp, #32]
 8012698:	4283      	cmp	r3, r0
 801269a:	d106      	bne.n	80126aa <_strtoll_l.constprop.0+0xb2>
 801269c:	428f      	cmp	r7, r1
 801269e:	d104      	bne.n	80126aa <_strtoll_l.constprop.0+0xb2>
 80126a0:	2301      	movs	r3, #1
 80126a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80126a4:	425b      	negs	r3, r3
 80126a6:	42a2      	cmp	r2, r4
 80126a8:	db0d      	blt.n	80126c6 <_strtoll_l.constprop.0+0xce>
 80126aa:	000b      	movs	r3, r1
 80126ac:	0002      	movs	r2, r0
 80126ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80126b0:	0030      	movs	r0, r6
 80126b2:	f7ed ff17 	bl	80004e4 <__aeabi_lmul>
 80126b6:	17e3      	asrs	r3, r4, #31
 80126b8:	9406      	str	r4, [sp, #24]
 80126ba:	9307      	str	r3, [sp, #28]
 80126bc:	9b06      	ldr	r3, [sp, #24]
 80126be:	9c07      	ldr	r4, [sp, #28]
 80126c0:	18c0      	adds	r0, r0, r3
 80126c2:	4161      	adcs	r1, r4
 80126c4:	2301      	movs	r3, #1
 80126c6:	782c      	ldrb	r4, [r5, #0]
 80126c8:	3501      	adds	r5, #1
 80126ca:	e7d5      	b.n	8012678 <_strtoll_l.constprop.0+0x80>
 80126cc:	9701      	str	r7, [sp, #4]
 80126ce:	2c2b      	cmp	r4, #43	; 0x2b
 80126d0:	d1ac      	bne.n	801262c <_strtoll_l.constprop.0+0x34>
 80126d2:	781c      	ldrb	r4, [r3, #0]
 80126d4:	1c95      	adds	r5, r2, #2
 80126d6:	e7a9      	b.n	801262c <_strtoll_l.constprop.0+0x34>
 80126d8:	0022      	movs	r2, r4
 80126da:	3a41      	subs	r2, #65	; 0x41
 80126dc:	2a19      	cmp	r2, #25
 80126de:	d801      	bhi.n	80126e4 <_strtoll_l.constprop.0+0xec>
 80126e0:	3c37      	subs	r4, #55	; 0x37
 80126e2:	e7ce      	b.n	8012682 <_strtoll_l.constprop.0+0x8a>
 80126e4:	0022      	movs	r2, r4
 80126e6:	3a61      	subs	r2, #97	; 0x61
 80126e8:	2a19      	cmp	r2, #25
 80126ea:	d804      	bhi.n	80126f6 <_strtoll_l.constprop.0+0xfe>
 80126ec:	3c57      	subs	r4, #87	; 0x57
 80126ee:	e7c8      	b.n	8012682 <_strtoll_l.constprop.0+0x8a>
 80126f0:	2301      	movs	r3, #1
 80126f2:	425b      	negs	r3, r3
 80126f4:	e7e7      	b.n	80126c6 <_strtoll_l.constprop.0+0xce>
 80126f6:	1c5a      	adds	r2, r3, #1
 80126f8:	d109      	bne.n	801270e <_strtoll_l.constprop.0+0x116>
 80126fa:	9804      	ldr	r0, [sp, #16]
 80126fc:	9905      	ldr	r1, [sp, #20]
 80126fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012700:	3323      	adds	r3, #35	; 0x23
 8012702:	6013      	str	r3, [r2, #0]
 8012704:	9b03      	ldr	r3, [sp, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d10e      	bne.n	8012728 <_strtoll_l.constprop.0+0x130>
 801270a:	b00d      	add	sp, #52	; 0x34
 801270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801270e:	9a01      	ldr	r2, [sp, #4]
 8012710:	2a00      	cmp	r2, #0
 8012712:	d004      	beq.n	801271e <_strtoll_l.constprop.0+0x126>
 8012714:	0006      	movs	r6, r0
 8012716:	000f      	movs	r7, r1
 8012718:	2100      	movs	r1, #0
 801271a:	4270      	negs	r0, r6
 801271c:	41b9      	sbcs	r1, r7
 801271e:	9a03      	ldr	r2, [sp, #12]
 8012720:	2a00      	cmp	r2, #0
 8012722:	d0f2      	beq.n	801270a <_strtoll_l.constprop.0+0x112>
 8012724:	2b00      	cmp	r3, #0
 8012726:	d001      	beq.n	801272c <_strtoll_l.constprop.0+0x134>
 8012728:	1e6b      	subs	r3, r5, #1
 801272a:	9302      	str	r3, [sp, #8]
 801272c:	9b03      	ldr	r3, [sp, #12]
 801272e:	9a02      	ldr	r2, [sp, #8]
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	e7ea      	b.n	801270a <_strtoll_l.constprop.0+0x112>
 8012734:	2430      	movs	r4, #48	; 0x30
 8012736:	2e00      	cmp	r6, #0
 8012738:	d000      	beq.n	801273c <_strtoll_l.constprop.0+0x144>
 801273a:	e787      	b.n	801264c <_strtoll_l.constprop.0+0x54>
 801273c:	3608      	adds	r6, #8
 801273e:	e785      	b.n	801264c <_strtoll_l.constprop.0+0x54>
 8012740:	2c30      	cmp	r4, #48	; 0x30
 8012742:	d100      	bne.n	8012746 <_strtoll_l.constprop.0+0x14e>
 8012744:	e779      	b.n	801263a <_strtoll_l.constprop.0+0x42>
 8012746:	260a      	movs	r6, #10
 8012748:	e780      	b.n	801264c <_strtoll_l.constprop.0+0x54>
 801274a:	46c0      	nop			; (mov r8, r8)
 801274c:	08015b19 	.word	0x08015b19
 8012750:	7fffffff 	.word	0x7fffffff

08012754 <_strtoll_r>:
 8012754:	b510      	push	{r4, lr}
 8012756:	f7ff ff4f 	bl	80125f8 <_strtoll_l.constprop.0>
 801275a:	bd10      	pop	{r4, pc}

0801275c <_strtoull_l.constprop.0>:
 801275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801275e:	b08b      	sub	sp, #44	; 0x2c
 8012760:	9202      	str	r2, [sp, #8]
 8012762:	4a54      	ldr	r2, [pc, #336]	; (80128b4 <_strtoull_l.constprop.0+0x158>)
 8012764:	001e      	movs	r6, r3
 8012766:	9101      	str	r1, [sp, #4]
 8012768:	000b      	movs	r3, r1
 801276a:	4694      	mov	ip, r2
 801276c:	2108      	movs	r1, #8
 801276e:	9009      	str	r0, [sp, #36]	; 0x24
 8012770:	001a      	movs	r2, r3
 8012772:	4660      	mov	r0, ip
 8012774:	7814      	ldrb	r4, [r2, #0]
 8012776:	3301      	adds	r3, #1
 8012778:	5d00      	ldrb	r0, [r0, r4]
 801277a:	001d      	movs	r5, r3
 801277c:	0007      	movs	r7, r0
 801277e:	400f      	ands	r7, r1
 8012780:	4208      	tst	r0, r1
 8012782:	d1f5      	bne.n	8012770 <_strtoull_l.constprop.0+0x14>
 8012784:	2c2d      	cmp	r4, #45	; 0x2d
 8012786:	d154      	bne.n	8012832 <_strtoull_l.constprop.0+0xd6>
 8012788:	781c      	ldrb	r4, [r3, #0]
 801278a:	2301      	movs	r3, #1
 801278c:	1c95      	adds	r5, r2, #2
 801278e:	9306      	str	r3, [sp, #24]
 8012790:	2e00      	cmp	r6, #0
 8012792:	d100      	bne.n	8012796 <_strtoull_l.constprop.0+0x3a>
 8012794:	e088      	b.n	80128a8 <_strtoull_l.constprop.0+0x14c>
 8012796:	2e10      	cmp	r6, #16
 8012798:	d10a      	bne.n	80127b0 <_strtoull_l.constprop.0+0x54>
 801279a:	2c30      	cmp	r4, #48	; 0x30
 801279c:	d108      	bne.n	80127b0 <_strtoull_l.constprop.0+0x54>
 801279e:	2220      	movs	r2, #32
 80127a0:	782b      	ldrb	r3, [r5, #0]
 80127a2:	4393      	bics	r3, r2
 80127a4:	2b58      	cmp	r3, #88	; 0x58
 80127a6:	d000      	beq.n	80127aa <_strtoull_l.constprop.0+0x4e>
 80127a8:	e078      	b.n	801289c <_strtoull_l.constprop.0+0x140>
 80127aa:	2610      	movs	r6, #16
 80127ac:	786c      	ldrb	r4, [r5, #1]
 80127ae:	3502      	adds	r5, #2
 80127b0:	17f7      	asrs	r7, r6, #31
 80127b2:	0032      	movs	r2, r6
 80127b4:	003b      	movs	r3, r7
 80127b6:	2001      	movs	r0, #1
 80127b8:	4240      	negs	r0, r0
 80127ba:	17c1      	asrs	r1, r0, #31
 80127bc:	f7ed fe72 	bl	80004a4 <__aeabi_uldivmod>
 80127c0:	0032      	movs	r2, r6
 80127c2:	9007      	str	r0, [sp, #28]
 80127c4:	9103      	str	r1, [sp, #12]
 80127c6:	003b      	movs	r3, r7
 80127c8:	2001      	movs	r0, #1
 80127ca:	4240      	negs	r0, r0
 80127cc:	17c1      	asrs	r1, r0, #31
 80127ce:	f7ed fe69 	bl	80004a4 <__aeabi_uldivmod>
 80127d2:	2300      	movs	r3, #0
 80127d4:	2000      	movs	r0, #0
 80127d6:	2100      	movs	r1, #0
 80127d8:	9208      	str	r2, [sp, #32]
 80127da:	0022      	movs	r2, r4
 80127dc:	3a30      	subs	r2, #48	; 0x30
 80127de:	2a09      	cmp	r2, #9
 80127e0:	d82d      	bhi.n	801283e <_strtoull_l.constprop.0+0xe2>
 80127e2:	0014      	movs	r4, r2
 80127e4:	42a6      	cmp	r6, r4
 80127e6:	dd39      	ble.n	801285c <_strtoull_l.constprop.0+0x100>
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	d01f      	beq.n	801282c <_strtoull_l.constprop.0+0xd0>
 80127ec:	9b03      	ldr	r3, [sp, #12]
 80127ee:	4299      	cmp	r1, r3
 80127f0:	d831      	bhi.n	8012856 <_strtoull_l.constprop.0+0xfa>
 80127f2:	d102      	bne.n	80127fa <_strtoull_l.constprop.0+0x9e>
 80127f4:	9b07      	ldr	r3, [sp, #28]
 80127f6:	4298      	cmp	r0, r3
 80127f8:	d82d      	bhi.n	8012856 <_strtoull_l.constprop.0+0xfa>
 80127fa:	9b07      	ldr	r3, [sp, #28]
 80127fc:	4283      	cmp	r3, r0
 80127fe:	d107      	bne.n	8012810 <_strtoull_l.constprop.0+0xb4>
 8012800:	9b03      	ldr	r3, [sp, #12]
 8012802:	428b      	cmp	r3, r1
 8012804:	d104      	bne.n	8012810 <_strtoull_l.constprop.0+0xb4>
 8012806:	2301      	movs	r3, #1
 8012808:	9a08      	ldr	r2, [sp, #32]
 801280a:	425b      	negs	r3, r3
 801280c:	42a2      	cmp	r2, r4
 801280e:	db0d      	blt.n	801282c <_strtoull_l.constprop.0+0xd0>
 8012810:	000b      	movs	r3, r1
 8012812:	0002      	movs	r2, r0
 8012814:	0039      	movs	r1, r7
 8012816:	0030      	movs	r0, r6
 8012818:	f7ed fe64 	bl	80004e4 <__aeabi_lmul>
 801281c:	17e3      	asrs	r3, r4, #31
 801281e:	9404      	str	r4, [sp, #16]
 8012820:	9305      	str	r3, [sp, #20]
 8012822:	9b04      	ldr	r3, [sp, #16]
 8012824:	9c05      	ldr	r4, [sp, #20]
 8012826:	18c0      	adds	r0, r0, r3
 8012828:	4161      	adcs	r1, r4
 801282a:	2301      	movs	r3, #1
 801282c:	782c      	ldrb	r4, [r5, #0]
 801282e:	3501      	adds	r5, #1
 8012830:	e7d3      	b.n	80127da <_strtoull_l.constprop.0+0x7e>
 8012832:	9706      	str	r7, [sp, #24]
 8012834:	2c2b      	cmp	r4, #43	; 0x2b
 8012836:	d1ab      	bne.n	8012790 <_strtoull_l.constprop.0+0x34>
 8012838:	781c      	ldrb	r4, [r3, #0]
 801283a:	1c95      	adds	r5, r2, #2
 801283c:	e7a8      	b.n	8012790 <_strtoull_l.constprop.0+0x34>
 801283e:	0022      	movs	r2, r4
 8012840:	3a41      	subs	r2, #65	; 0x41
 8012842:	2a19      	cmp	r2, #25
 8012844:	d801      	bhi.n	801284a <_strtoull_l.constprop.0+0xee>
 8012846:	3c37      	subs	r4, #55	; 0x37
 8012848:	e7cc      	b.n	80127e4 <_strtoull_l.constprop.0+0x88>
 801284a:	0022      	movs	r2, r4
 801284c:	3a61      	subs	r2, #97	; 0x61
 801284e:	2a19      	cmp	r2, #25
 8012850:	d804      	bhi.n	801285c <_strtoull_l.constprop.0+0x100>
 8012852:	3c57      	subs	r4, #87	; 0x57
 8012854:	e7c6      	b.n	80127e4 <_strtoull_l.constprop.0+0x88>
 8012856:	2301      	movs	r3, #1
 8012858:	425b      	negs	r3, r3
 801285a:	e7e7      	b.n	801282c <_strtoull_l.constprop.0+0xd0>
 801285c:	1c5a      	adds	r2, r3, #1
 801285e:	d10a      	bne.n	8012876 <_strtoull_l.constprop.0+0x11a>
 8012860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012862:	3323      	adds	r3, #35	; 0x23
 8012864:	6013      	str	r3, [r2, #0]
 8012866:	9b02      	ldr	r3, [sp, #8]
 8012868:	2001      	movs	r0, #1
 801286a:	4240      	negs	r0, r0
 801286c:	17c1      	asrs	r1, r0, #31
 801286e:	2b00      	cmp	r3, #0
 8012870:	d10e      	bne.n	8012890 <_strtoull_l.constprop.0+0x134>
 8012872:	b00b      	add	sp, #44	; 0x2c
 8012874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012876:	9a06      	ldr	r2, [sp, #24]
 8012878:	2a00      	cmp	r2, #0
 801287a:	d004      	beq.n	8012886 <_strtoull_l.constprop.0+0x12a>
 801287c:	0006      	movs	r6, r0
 801287e:	000f      	movs	r7, r1
 8012880:	2100      	movs	r1, #0
 8012882:	4270      	negs	r0, r6
 8012884:	41b9      	sbcs	r1, r7
 8012886:	9a02      	ldr	r2, [sp, #8]
 8012888:	2a00      	cmp	r2, #0
 801288a:	d0f2      	beq.n	8012872 <_strtoull_l.constprop.0+0x116>
 801288c:	2b00      	cmp	r3, #0
 801288e:	d001      	beq.n	8012894 <_strtoull_l.constprop.0+0x138>
 8012890:	1e6b      	subs	r3, r5, #1
 8012892:	9301      	str	r3, [sp, #4]
 8012894:	9b02      	ldr	r3, [sp, #8]
 8012896:	9a01      	ldr	r2, [sp, #4]
 8012898:	601a      	str	r2, [r3, #0]
 801289a:	e7ea      	b.n	8012872 <_strtoull_l.constprop.0+0x116>
 801289c:	2430      	movs	r4, #48	; 0x30
 801289e:	2e00      	cmp	r6, #0
 80128a0:	d000      	beq.n	80128a4 <_strtoull_l.constprop.0+0x148>
 80128a2:	e785      	b.n	80127b0 <_strtoull_l.constprop.0+0x54>
 80128a4:	3608      	adds	r6, #8
 80128a6:	e783      	b.n	80127b0 <_strtoull_l.constprop.0+0x54>
 80128a8:	2c30      	cmp	r4, #48	; 0x30
 80128aa:	d100      	bne.n	80128ae <_strtoull_l.constprop.0+0x152>
 80128ac:	e777      	b.n	801279e <_strtoull_l.constprop.0+0x42>
 80128ae:	260a      	movs	r6, #10
 80128b0:	e77e      	b.n	80127b0 <_strtoull_l.constprop.0+0x54>
 80128b2:	46c0      	nop			; (mov r8, r8)
 80128b4:	08015b19 	.word	0x08015b19

080128b8 <_strtoull_r>:
 80128b8:	b510      	push	{r4, lr}
 80128ba:	f7ff ff4f 	bl	801275c <_strtoull_l.constprop.0>
 80128be:	bd10      	pop	{r4, pc}

080128c0 <_mbrtowc_r>:
 80128c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80128c2:	0004      	movs	r4, r0
 80128c4:	0010      	movs	r0, r2
 80128c6:	4a0b      	ldr	r2, [pc, #44]	; (80128f4 <_mbrtowc_r+0x34>)
 80128c8:	9d06      	ldr	r5, [sp, #24]
 80128ca:	32e4      	adds	r2, #228	; 0xe4
 80128cc:	6816      	ldr	r6, [r2, #0]
 80128ce:	2800      	cmp	r0, #0
 80128d0:	d10c      	bne.n	80128ec <_mbrtowc_r+0x2c>
 80128d2:	2301      	movs	r3, #1
 80128d4:	0001      	movs	r1, r0
 80128d6:	4a08      	ldr	r2, [pc, #32]	; (80128f8 <_mbrtowc_r+0x38>)
 80128d8:	9500      	str	r5, [sp, #0]
 80128da:	0020      	movs	r0, r4
 80128dc:	47b0      	blx	r6
 80128de:	1c43      	adds	r3, r0, #1
 80128e0:	d103      	bne.n	80128ea <_mbrtowc_r+0x2a>
 80128e2:	2300      	movs	r3, #0
 80128e4:	602b      	str	r3, [r5, #0]
 80128e6:	338a      	adds	r3, #138	; 0x8a
 80128e8:	6023      	str	r3, [r4, #0]
 80128ea:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80128ec:	0002      	movs	r2, r0
 80128ee:	9500      	str	r5, [sp, #0]
 80128f0:	e7f3      	b.n	80128da <_mbrtowc_r+0x1a>
 80128f2:	46c0      	nop			; (mov r8, r8)
 80128f4:	20000444 	.word	0x20000444
 80128f8:	08015ea3 	.word	0x08015ea3

080128fc <iswspace>:
 80128fc:	b510      	push	{r4, lr}
 80128fe:	2100      	movs	r1, #0
 8012900:	f000 f802 	bl	8012908 <iswspace_l>
 8012904:	bd10      	pop	{r4, pc}
	...

08012908 <iswspace_l>:
 8012908:	0003      	movs	r3, r0
 801290a:	2000      	movs	r0, #0
 801290c:	2bff      	cmp	r3, #255	; 0xff
 801290e:	d803      	bhi.n	8012918 <iswspace_l+0x10>
 8012910:	4a02      	ldr	r2, [pc, #8]	; (801291c <iswspace_l+0x14>)
 8012912:	5cd0      	ldrb	r0, [r2, r3]
 8012914:	2308      	movs	r3, #8
 8012916:	4018      	ands	r0, r3
 8012918:	4770      	bx	lr
 801291a:	46c0      	nop			; (mov r8, r8)
 801291c:	08015b19 	.word	0x08015b19

08012920 <fiprintf>:
 8012920:	b40e      	push	{r1, r2, r3}
 8012922:	b517      	push	{r0, r1, r2, r4, lr}
 8012924:	4c05      	ldr	r4, [pc, #20]	; (801293c <fiprintf+0x1c>)
 8012926:	ab05      	add	r3, sp, #20
 8012928:	cb04      	ldmia	r3!, {r2}
 801292a:	0001      	movs	r1, r0
 801292c:	6820      	ldr	r0, [r4, #0]
 801292e:	9301      	str	r3, [sp, #4]
 8012930:	f000 f954 	bl	8012bdc <_vfiprintf_r>
 8012934:	bc1e      	pop	{r1, r2, r3, r4}
 8012936:	bc08      	pop	{r3}
 8012938:	b003      	add	sp, #12
 801293a:	4718      	bx	r3
 801293c:	200006d0 	.word	0x200006d0

08012940 <__ssprint_r>:
 8012940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012942:	6813      	ldr	r3, [r2, #0]
 8012944:	b087      	sub	sp, #28
 8012946:	0017      	movs	r7, r2
 8012948:	9303      	str	r3, [sp, #12]
 801294a:	6893      	ldr	r3, [r2, #8]
 801294c:	2200      	movs	r2, #0
 801294e:	000c      	movs	r4, r1
 8012950:	9005      	str	r0, [sp, #20]
 8012952:	9202      	str	r2, [sp, #8]
 8012954:	9201      	str	r2, [sp, #4]
 8012956:	4293      	cmp	r3, r2
 8012958:	d10d      	bne.n	8012976 <__ssprint_r+0x36>
 801295a:	2000      	movs	r0, #0
 801295c:	2300      	movs	r3, #0
 801295e:	607b      	str	r3, [r7, #4]
 8012960:	b007      	add	sp, #28
 8012962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012964:	9b03      	ldr	r3, [sp, #12]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	9302      	str	r3, [sp, #8]
 801296a:	9b03      	ldr	r3, [sp, #12]
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	9301      	str	r3, [sp, #4]
 8012970:	9b03      	ldr	r3, [sp, #12]
 8012972:	3308      	adds	r3, #8
 8012974:	9303      	str	r3, [sp, #12]
 8012976:	9a01      	ldr	r2, [sp, #4]
 8012978:	68a6      	ldr	r6, [r4, #8]
 801297a:	6823      	ldr	r3, [r4, #0]
 801297c:	2a00      	cmp	r2, #0
 801297e:	d0f1      	beq.n	8012964 <__ssprint_r+0x24>
 8012980:	42b2      	cmp	r2, r6
 8012982:	d32e      	bcc.n	80129e2 <__ssprint_r+0xa2>
 8012984:	2190      	movs	r1, #144	; 0x90
 8012986:	89a2      	ldrh	r2, [r4, #12]
 8012988:	00c9      	lsls	r1, r1, #3
 801298a:	420a      	tst	r2, r1
 801298c:	d029      	beq.n	80129e2 <__ssprint_r+0xa2>
 801298e:	2003      	movs	r0, #3
 8012990:	6921      	ldr	r1, [r4, #16]
 8012992:	1a5b      	subs	r3, r3, r1
 8012994:	9304      	str	r3, [sp, #16]
 8012996:	6963      	ldr	r3, [r4, #20]
 8012998:	4343      	muls	r3, r0
 801299a:	0fdd      	lsrs	r5, r3, #31
 801299c:	18ed      	adds	r5, r5, r3
 801299e:	9b04      	ldr	r3, [sp, #16]
 80129a0:	9801      	ldr	r0, [sp, #4]
 80129a2:	3301      	adds	r3, #1
 80129a4:	181b      	adds	r3, r3, r0
 80129a6:	106d      	asrs	r5, r5, #1
 80129a8:	42ab      	cmp	r3, r5
 80129aa:	d900      	bls.n	80129ae <__ssprint_r+0x6e>
 80129ac:	001d      	movs	r5, r3
 80129ae:	0552      	lsls	r2, r2, #21
 80129b0:	d532      	bpl.n	8012a18 <__ssprint_r+0xd8>
 80129b2:	0029      	movs	r1, r5
 80129b4:	9805      	ldr	r0, [sp, #20]
 80129b6:	f7f9 f9e1 	bl	800bd7c <_malloc_r>
 80129ba:	1e06      	subs	r6, r0, #0
 80129bc:	d036      	beq.n	8012a2c <__ssprint_r+0xec>
 80129be:	9a04      	ldr	r2, [sp, #16]
 80129c0:	6921      	ldr	r1, [r4, #16]
 80129c2:	f7fa fe1a 	bl	800d5fa <memcpy>
 80129c6:	89a2      	ldrh	r2, [r4, #12]
 80129c8:	4b1e      	ldr	r3, [pc, #120]	; (8012a44 <__ssprint_r+0x104>)
 80129ca:	401a      	ands	r2, r3
 80129cc:	2380      	movs	r3, #128	; 0x80
 80129ce:	4313      	orrs	r3, r2
 80129d0:	81a3      	strh	r3, [r4, #12]
 80129d2:	9b04      	ldr	r3, [sp, #16]
 80129d4:	6126      	str	r6, [r4, #16]
 80129d6:	18f6      	adds	r6, r6, r3
 80129d8:	6026      	str	r6, [r4, #0]
 80129da:	6165      	str	r5, [r4, #20]
 80129dc:	9e01      	ldr	r6, [sp, #4]
 80129de:	1aed      	subs	r5, r5, r3
 80129e0:	60a5      	str	r5, [r4, #8]
 80129e2:	9b01      	ldr	r3, [sp, #4]
 80129e4:	429e      	cmp	r6, r3
 80129e6:	d900      	bls.n	80129ea <__ssprint_r+0xaa>
 80129e8:	001e      	movs	r6, r3
 80129ea:	0032      	movs	r2, r6
 80129ec:	9902      	ldr	r1, [sp, #8]
 80129ee:	6820      	ldr	r0, [r4, #0]
 80129f0:	f001 f86d 	bl	8013ace <memmove>
 80129f4:	9a01      	ldr	r2, [sp, #4]
 80129f6:	68a3      	ldr	r3, [r4, #8]
 80129f8:	4694      	mov	ip, r2
 80129fa:	1b9b      	subs	r3, r3, r6
 80129fc:	60a3      	str	r3, [r4, #8]
 80129fe:	6823      	ldr	r3, [r4, #0]
 8012a00:	199b      	adds	r3, r3, r6
 8012a02:	6023      	str	r3, [r4, #0]
 8012a04:	9b02      	ldr	r3, [sp, #8]
 8012a06:	4463      	add	r3, ip
 8012a08:	9302      	str	r3, [sp, #8]
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	1a9b      	subs	r3, r3, r2
 8012a0e:	60bb      	str	r3, [r7, #8]
 8012a10:	d0a3      	beq.n	801295a <__ssprint_r+0x1a>
 8012a12:	2300      	movs	r3, #0
 8012a14:	9301      	str	r3, [sp, #4]
 8012a16:	e7ae      	b.n	8012976 <__ssprint_r+0x36>
 8012a18:	002a      	movs	r2, r5
 8012a1a:	9805      	ldr	r0, [sp, #20]
 8012a1c:	f7ff fc46 	bl	80122ac <_realloc_r>
 8012a20:	1e06      	subs	r6, r0, #0
 8012a22:	d1d6      	bne.n	80129d2 <__ssprint_r+0x92>
 8012a24:	6921      	ldr	r1, [r4, #16]
 8012a26:	9805      	ldr	r0, [sp, #20]
 8012a28:	f7fa fe62 	bl	800d6f0 <_free_r>
 8012a2c:	230c      	movs	r3, #12
 8012a2e:	9a05      	ldr	r2, [sp, #20]
 8012a30:	2001      	movs	r0, #1
 8012a32:	6013      	str	r3, [r2, #0]
 8012a34:	89a2      	ldrh	r2, [r4, #12]
 8012a36:	3334      	adds	r3, #52	; 0x34
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	81a3      	strh	r3, [r4, #12]
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	4240      	negs	r0, r0
 8012a40:	60bb      	str	r3, [r7, #8]
 8012a42:	e78b      	b.n	801295c <__ssprint_r+0x1c>
 8012a44:	fffffb7f 	.word	0xfffffb7f

08012a48 <_sungetc_r>:
 8012a48:	b570      	push	{r4, r5, r6, lr}
 8012a4a:	0014      	movs	r4, r2
 8012a4c:	1c4b      	adds	r3, r1, #1
 8012a4e:	d103      	bne.n	8012a58 <_sungetc_r+0x10>
 8012a50:	2501      	movs	r5, #1
 8012a52:	426d      	negs	r5, r5
 8012a54:	0028      	movs	r0, r5
 8012a56:	bd70      	pop	{r4, r5, r6, pc}
 8012a58:	8993      	ldrh	r3, [r2, #12]
 8012a5a:	2220      	movs	r2, #32
 8012a5c:	4393      	bics	r3, r2
 8012a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8012a60:	81a3      	strh	r3, [r4, #12]
 8012a62:	b2ce      	uxtb	r6, r1
 8012a64:	6863      	ldr	r3, [r4, #4]
 8012a66:	b2cd      	uxtb	r5, r1
 8012a68:	2a00      	cmp	r2, #0
 8012a6a:	d010      	beq.n	8012a8e <_sungetc_r+0x46>
 8012a6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	dd07      	ble.n	8012a82 <_sungetc_r+0x3a>
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	3b01      	subs	r3, #1
 8012a76:	6023      	str	r3, [r4, #0]
 8012a78:	701e      	strb	r6, [r3, #0]
 8012a7a:	6863      	ldr	r3, [r4, #4]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	6063      	str	r3, [r4, #4]
 8012a80:	e7e8      	b.n	8012a54 <_sungetc_r+0xc>
 8012a82:	0021      	movs	r1, r4
 8012a84:	f000 ff1a 	bl	80138bc <__submore>
 8012a88:	2800      	cmp	r0, #0
 8012a8a:	d0f2      	beq.n	8012a72 <_sungetc_r+0x2a>
 8012a8c:	e7e0      	b.n	8012a50 <_sungetc_r+0x8>
 8012a8e:	6921      	ldr	r1, [r4, #16]
 8012a90:	6822      	ldr	r2, [r4, #0]
 8012a92:	2900      	cmp	r1, #0
 8012a94:	d007      	beq.n	8012aa6 <_sungetc_r+0x5e>
 8012a96:	4291      	cmp	r1, r2
 8012a98:	d205      	bcs.n	8012aa6 <_sungetc_r+0x5e>
 8012a9a:	1e51      	subs	r1, r2, #1
 8012a9c:	7808      	ldrb	r0, [r1, #0]
 8012a9e:	42a8      	cmp	r0, r5
 8012aa0:	d101      	bne.n	8012aa6 <_sungetc_r+0x5e>
 8012aa2:	6021      	str	r1, [r4, #0]
 8012aa4:	e7ea      	b.n	8012a7c <_sungetc_r+0x34>
 8012aa6:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012aa8:	0023      	movs	r3, r4
 8012aaa:	3340      	adds	r3, #64	; 0x40
 8012aac:	6323      	str	r3, [r4, #48]	; 0x30
 8012aae:	2303      	movs	r3, #3
 8012ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8012ab2:	0023      	movs	r3, r4
 8012ab4:	3342      	adds	r3, #66	; 0x42
 8012ab6:	63a2      	str	r2, [r4, #56]	; 0x38
 8012ab8:	701e      	strb	r6, [r3, #0]
 8012aba:	6023      	str	r3, [r4, #0]
 8012abc:	2301      	movs	r3, #1
 8012abe:	e7de      	b.n	8012a7e <_sungetc_r+0x36>

08012ac0 <__ssrefill_r>:
 8012ac0:	b510      	push	{r4, lr}
 8012ac2:	000c      	movs	r4, r1
 8012ac4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8012ac6:	2900      	cmp	r1, #0
 8012ac8:	d00e      	beq.n	8012ae8 <__ssrefill_r+0x28>
 8012aca:	0023      	movs	r3, r4
 8012acc:	3340      	adds	r3, #64	; 0x40
 8012ace:	4299      	cmp	r1, r3
 8012ad0:	d001      	beq.n	8012ad6 <__ssrefill_r+0x16>
 8012ad2:	f7fa fe0d 	bl	800d6f0 <_free_r>
 8012ad6:	2000      	movs	r0, #0
 8012ad8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012ada:	6320      	str	r0, [r4, #48]	; 0x30
 8012adc:	6063      	str	r3, [r4, #4]
 8012ade:	4283      	cmp	r3, r0
 8012ae0:	d002      	beq.n	8012ae8 <__ssrefill_r+0x28>
 8012ae2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012ae4:	6023      	str	r3, [r4, #0]
 8012ae6:	bd10      	pop	{r4, pc}
 8012ae8:	6923      	ldr	r3, [r4, #16]
 8012aea:	2001      	movs	r0, #1
 8012aec:	6023      	str	r3, [r4, #0]
 8012aee:	2300      	movs	r3, #0
 8012af0:	89a2      	ldrh	r2, [r4, #12]
 8012af2:	6063      	str	r3, [r4, #4]
 8012af4:	3320      	adds	r3, #32
 8012af6:	4313      	orrs	r3, r2
 8012af8:	81a3      	strh	r3, [r4, #12]
 8012afa:	4240      	negs	r0, r0
 8012afc:	e7f3      	b.n	8012ae6 <__ssrefill_r+0x26>

08012afe <_sfread_r>:
 8012afe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b00:	0014      	movs	r4, r2
 8012b02:	435c      	muls	r4, r3
 8012b04:	b087      	sub	sp, #28
 8012b06:	1e26      	subs	r6, r4, #0
 8012b08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b0a:	9005      	str	r0, [sp, #20]
 8012b0c:	9101      	str	r1, [sp, #4]
 8012b0e:	9202      	str	r2, [sp, #8]
 8012b10:	9303      	str	r3, [sp, #12]
 8012b12:	d11e      	bne.n	8012b52 <_sfread_r+0x54>
 8012b14:	0020      	movs	r0, r4
 8012b16:	b007      	add	sp, #28
 8012b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b1a:	003a      	movs	r2, r7
 8012b1c:	9801      	ldr	r0, [sp, #4]
 8012b1e:	f7fa fd6c 	bl	800d5fa <memcpy>
 8012b22:	682b      	ldr	r3, [r5, #0]
 8012b24:	0029      	movs	r1, r5
 8012b26:	19db      	adds	r3, r3, r7
 8012b28:	602b      	str	r3, [r5, #0]
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	606b      	str	r3, [r5, #4]
 8012b2e:	9b01      	ldr	r3, [sp, #4]
 8012b30:	9805      	ldr	r0, [sp, #20]
 8012b32:	19db      	adds	r3, r3, r7
 8012b34:	9301      	str	r3, [sp, #4]
 8012b36:	1bf3      	subs	r3, r6, r7
 8012b38:	9304      	str	r3, [sp, #16]
 8012b3a:	f7ff ffc1 	bl	8012ac0 <__ssrefill_r>
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d006      	beq.n	8012b50 <_sfread_r+0x52>
 8012b42:	193c      	adds	r4, r7, r4
 8012b44:	1ba0      	subs	r0, r4, r6
 8012b46:	9902      	ldr	r1, [sp, #8]
 8012b48:	f7ed faf8 	bl	800013c <__udivsi3>
 8012b4c:	0004      	movs	r4, r0
 8012b4e:	e7e1      	b.n	8012b14 <_sfread_r+0x16>
 8012b50:	9e04      	ldr	r6, [sp, #16]
 8012b52:	686f      	ldr	r7, [r5, #4]
 8012b54:	6829      	ldr	r1, [r5, #0]
 8012b56:	42b7      	cmp	r7, r6
 8012b58:	d3df      	bcc.n	8012b1a <_sfread_r+0x1c>
 8012b5a:	0032      	movs	r2, r6
 8012b5c:	9801      	ldr	r0, [sp, #4]
 8012b5e:	f7fa fd4c 	bl	800d5fa <memcpy>
 8012b62:	686b      	ldr	r3, [r5, #4]
 8012b64:	9c03      	ldr	r4, [sp, #12]
 8012b66:	1b9b      	subs	r3, r3, r6
 8012b68:	606b      	str	r3, [r5, #4]
 8012b6a:	682b      	ldr	r3, [r5, #0]
 8012b6c:	199b      	adds	r3, r3, r6
 8012b6e:	602b      	str	r3, [r5, #0]
 8012b70:	e7d0      	b.n	8012b14 <_sfread_r+0x16>

08012b72 <__sprint_r>:
 8012b72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b74:	6893      	ldr	r3, [r2, #8]
 8012b76:	b085      	sub	sp, #20
 8012b78:	9001      	str	r0, [sp, #4]
 8012b7a:	000d      	movs	r5, r1
 8012b7c:	0014      	movs	r4, r2
 8012b7e:	1e18      	subs	r0, r3, #0
 8012b80:	d018      	beq.n	8012bb4 <__sprint_r+0x42>
 8012b82:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8012b84:	049b      	lsls	r3, r3, #18
 8012b86:	d524      	bpl.n	8012bd2 <__sprint_r+0x60>
 8012b88:	6817      	ldr	r7, [r2, #0]
 8012b8a:	2600      	movs	r6, #0
 8012b8c:	683b      	ldr	r3, [r7, #0]
 8012b8e:	9302      	str	r3, [sp, #8]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	9300      	str	r3, [sp, #0]
 8012b94:	089b      	lsrs	r3, r3, #2
 8012b96:	9303      	str	r3, [sp, #12]
 8012b98:	9b03      	ldr	r3, [sp, #12]
 8012b9a:	42b3      	cmp	r3, r6
 8012b9c:	dc0e      	bgt.n	8012bbc <__sprint_r+0x4a>
 8012b9e:	2203      	movs	r2, #3
 8012ba0:	9b00      	ldr	r3, [sp, #0]
 8012ba2:	68a0      	ldr	r0, [r4, #8]
 8012ba4:	4393      	bics	r3, r2
 8012ba6:	1ac0      	subs	r0, r0, r3
 8012ba8:	60a0      	str	r0, [r4, #8]
 8012baa:	3708      	adds	r7, #8
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d1ec      	bne.n	8012b8a <__sprint_r+0x18>
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	60a3      	str	r3, [r4, #8]
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	6063      	str	r3, [r4, #4]
 8012bb8:	b005      	add	sp, #20
 8012bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bbc:	9902      	ldr	r1, [sp, #8]
 8012bbe:	00b3      	lsls	r3, r6, #2
 8012bc0:	58c9      	ldr	r1, [r1, r3]
 8012bc2:	002a      	movs	r2, r5
 8012bc4:	9801      	ldr	r0, [sp, #4]
 8012bc6:	f000 ff59 	bl	8013a7c <_fputwc_r>
 8012bca:	1c43      	adds	r3, r0, #1
 8012bcc:	d0f0      	beq.n	8012bb0 <__sprint_r+0x3e>
 8012bce:	3601      	adds	r6, #1
 8012bd0:	e7e2      	b.n	8012b98 <__sprint_r+0x26>
 8012bd2:	9801      	ldr	r0, [sp, #4]
 8012bd4:	f000 fd14 	bl	8013600 <__sfvwrite_r>
 8012bd8:	e7ea      	b.n	8012bb0 <__sprint_r+0x3e>
	...

08012bdc <_vfiprintf_r>:
 8012bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bde:	b0c1      	sub	sp, #260	; 0x104
 8012be0:	001c      	movs	r4, r3
 8012be2:	001f      	movs	r7, r3
 8012be4:	9006      	str	r0, [sp, #24]
 8012be6:	9103      	str	r1, [sp, #12]
 8012be8:	9207      	str	r2, [sp, #28]
 8012bea:	2800      	cmp	r0, #0
 8012bec:	d004      	beq.n	8012bf8 <_vfiprintf_r+0x1c>
 8012bee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d101      	bne.n	8012bf8 <_vfiprintf_r+0x1c>
 8012bf4:	f7fa fad6 	bl	800d1a4 <__sinit>
 8012bf8:	9b03      	ldr	r3, [sp, #12]
 8012bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012bfc:	07db      	lsls	r3, r3, #31
 8012bfe:	d407      	bmi.n	8012c10 <_vfiprintf_r+0x34>
 8012c00:	9b03      	ldr	r3, [sp, #12]
 8012c02:	899b      	ldrh	r3, [r3, #12]
 8012c04:	059b      	lsls	r3, r3, #22
 8012c06:	d403      	bmi.n	8012c10 <_vfiprintf_r+0x34>
 8012c08:	9b03      	ldr	r3, [sp, #12]
 8012c0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012c0c:	f7fa fce8 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 8012c10:	9b03      	ldr	r3, [sp, #12]
 8012c12:	220c      	movs	r2, #12
 8012c14:	5e9a      	ldrsh	r2, [r3, r2]
 8012c16:	2380      	movs	r3, #128	; 0x80
 8012c18:	019b      	lsls	r3, r3, #6
 8012c1a:	421a      	tst	r2, r3
 8012c1c:	d107      	bne.n	8012c2e <_vfiprintf_r+0x52>
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	9a03      	ldr	r2, [sp, #12]
 8012c22:	8193      	strh	r3, [r2, #12]
 8012c24:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8012c26:	4aa3      	ldr	r2, [pc, #652]	; (8012eb4 <_vfiprintf_r+0x2d8>)
 8012c28:	4013      	ands	r3, r2
 8012c2a:	9a03      	ldr	r2, [sp, #12]
 8012c2c:	6653      	str	r3, [r2, #100]	; 0x64
 8012c2e:	9b03      	ldr	r3, [sp, #12]
 8012c30:	899b      	ldrh	r3, [r3, #12]
 8012c32:	071b      	lsls	r3, r3, #28
 8012c34:	d503      	bpl.n	8012c3e <_vfiprintf_r+0x62>
 8012c36:	9b03      	ldr	r3, [sp, #12]
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d118      	bne.n	8012c70 <_vfiprintf_r+0x94>
 8012c3e:	9903      	ldr	r1, [sp, #12]
 8012c40:	9806      	ldr	r0, [sp, #24]
 8012c42:	f000 fe79 	bl	8013938 <__swsetup_r>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	d012      	beq.n	8012c70 <_vfiprintf_r+0x94>
 8012c4a:	9b03      	ldr	r3, [sp, #12]
 8012c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012c4e:	07db      	lsls	r3, r3, #31
 8012c50:	d505      	bpl.n	8012c5e <_vfiprintf_r+0x82>
 8012c52:	2301      	movs	r3, #1
 8012c54:	425b      	negs	r3, r3
 8012c56:	9308      	str	r3, [sp, #32]
 8012c58:	9808      	ldr	r0, [sp, #32]
 8012c5a:	b041      	add	sp, #260	; 0x104
 8012c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c5e:	9b03      	ldr	r3, [sp, #12]
 8012c60:	899b      	ldrh	r3, [r3, #12]
 8012c62:	059b      	lsls	r3, r3, #22
 8012c64:	d4f5      	bmi.n	8012c52 <_vfiprintf_r+0x76>
 8012c66:	9b03      	ldr	r3, [sp, #12]
 8012c68:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012c6a:	f7fa fcba 	bl	800d5e2 <__retarget_lock_release_recursive>
 8012c6e:	e7f0      	b.n	8012c52 <_vfiprintf_r+0x76>
 8012c70:	221a      	movs	r2, #26
 8012c72:	9b03      	ldr	r3, [sp, #12]
 8012c74:	899b      	ldrh	r3, [r3, #12]
 8012c76:	401a      	ands	r2, r3
 8012c78:	2a0a      	cmp	r2, #10
 8012c7a:	d116      	bne.n	8012caa <_vfiprintf_r+0xce>
 8012c7c:	9a03      	ldr	r2, [sp, #12]
 8012c7e:	210e      	movs	r1, #14
 8012c80:	5e52      	ldrsh	r2, [r2, r1]
 8012c82:	2a00      	cmp	r2, #0
 8012c84:	db11      	blt.n	8012caa <_vfiprintf_r+0xce>
 8012c86:	9a03      	ldr	r2, [sp, #12]
 8012c88:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012c8a:	07d2      	lsls	r2, r2, #31
 8012c8c:	d405      	bmi.n	8012c9a <_vfiprintf_r+0xbe>
 8012c8e:	059b      	lsls	r3, r3, #22
 8012c90:	d403      	bmi.n	8012c9a <_vfiprintf_r+0xbe>
 8012c92:	9b03      	ldr	r3, [sp, #12]
 8012c94:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8012c96:	f7fa fca4 	bl	800d5e2 <__retarget_lock_release_recursive>
 8012c9a:	0023      	movs	r3, r4
 8012c9c:	9a07      	ldr	r2, [sp, #28]
 8012c9e:	9903      	ldr	r1, [sp, #12]
 8012ca0:	9806      	ldr	r0, [sp, #24]
 8012ca2:	f000 fc69 	bl	8013578 <__sbprintf>
 8012ca6:	9008      	str	r0, [sp, #32]
 8012ca8:	e7d6      	b.n	8012c58 <_vfiprintf_r+0x7c>
 8012caa:	2300      	movs	r3, #0
 8012cac:	ad17      	add	r5, sp, #92	; 0x5c
 8012cae:	9514      	str	r5, [sp, #80]	; 0x50
 8012cb0:	9316      	str	r3, [sp, #88]	; 0x58
 8012cb2:	9315      	str	r3, [sp, #84]	; 0x54
 8012cb4:	930c      	str	r3, [sp, #48]	; 0x30
 8012cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8012cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8012cba:	930f      	str	r3, [sp, #60]	; 0x3c
 8012cbc:	9308      	str	r3, [sp, #32]
 8012cbe:	9c07      	ldr	r4, [sp, #28]
 8012cc0:	7823      	ldrb	r3, [r4, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d002      	beq.n	8012ccc <_vfiprintf_r+0xf0>
 8012cc6:	2b25      	cmp	r3, #37	; 0x25
 8012cc8:	d000      	beq.n	8012ccc <_vfiprintf_r+0xf0>
 8012cca:	e08d      	b.n	8012de8 <_vfiprintf_r+0x20c>
 8012ccc:	9b07      	ldr	r3, [sp, #28]
 8012cce:	1ae6      	subs	r6, r4, r3
 8012cd0:	429c      	cmp	r4, r3
 8012cd2:	d016      	beq.n	8012d02 <_vfiprintf_r+0x126>
 8012cd4:	602b      	str	r3, [r5, #0]
 8012cd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012cd8:	606e      	str	r6, [r5, #4]
 8012cda:	199b      	adds	r3, r3, r6
 8012cdc:	9316      	str	r3, [sp, #88]	; 0x58
 8012cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ce0:	3508      	adds	r5, #8
 8012ce2:	3301      	adds	r3, #1
 8012ce4:	9315      	str	r3, [sp, #84]	; 0x54
 8012ce6:	2b07      	cmp	r3, #7
 8012ce8:	dd08      	ble.n	8012cfc <_vfiprintf_r+0x120>
 8012cea:	9903      	ldr	r1, [sp, #12]
 8012cec:	9806      	ldr	r0, [sp, #24]
 8012cee:	aa14      	add	r2, sp, #80	; 0x50
 8012cf0:	f7ff ff3f 	bl	8012b72 <__sprint_r>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d000      	beq.n	8012cfa <_vfiprintf_r+0x11e>
 8012cf8:	e3d9      	b.n	80134ae <_vfiprintf_r+0x8d2>
 8012cfa:	ad17      	add	r5, sp, #92	; 0x5c
 8012cfc:	9b08      	ldr	r3, [sp, #32]
 8012cfe:	199b      	adds	r3, r3, r6
 8012d00:	9308      	str	r3, [sp, #32]
 8012d02:	7823      	ldrb	r3, [r4, #0]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d101      	bne.n	8012d0c <_vfiprintf_r+0x130>
 8012d08:	f000 fbf6 	bl	80134f8 <_vfiprintf_r+0x91c>
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	a912      	add	r1, sp, #72	; 0x48
 8012d10:	70ca      	strb	r2, [r1, #3]
 8012d12:	2101      	movs	r1, #1
 8012d14:	1c63      	adds	r3, r4, #1
 8012d16:	0014      	movs	r4, r2
 8012d18:	4249      	negs	r1, r1
 8012d1a:	9105      	str	r1, [sp, #20]
 8012d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8012d1e:	1c5a      	adds	r2, r3, #1
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	9207      	str	r2, [sp, #28]
 8012d24:	0018      	movs	r0, r3
 8012d26:	3820      	subs	r0, #32
 8012d28:	285a      	cmp	r0, #90	; 0x5a
 8012d2a:	d900      	bls.n	8012d2e <_vfiprintf_r+0x152>
 8012d2c:	e362      	b.n	80133f4 <_vfiprintf_r+0x818>
 8012d2e:	f7ed f9fb 	bl	8000128 <__gnu_thumb1_case_uhi>
 8012d32:	0078      	.short	0x0078
 8012d34:	03610361 	.word	0x03610361
 8012d38:	03610081 	.word	0x03610081
 8012d3c:	03610361 	.word	0x03610361
 8012d40:	0361005d 	.word	0x0361005d
 8012d44:	00830361 	.word	0x00830361
 8012d48:	0361008b 	.word	0x0361008b
 8012d4c:	008f0089 	.word	0x008f0089
 8012d50:	00ad0361 	.word	0x00ad0361
 8012d54:	00af00af 	.word	0x00af00af
 8012d58:	00af00af 	.word	0x00af00af
 8012d5c:	00af00af 	.word	0x00af00af
 8012d60:	00af00af 	.word	0x00af00af
 8012d64:	036100af 	.word	0x036100af
 8012d68:	03610361 	.word	0x03610361
 8012d6c:	03610361 	.word	0x03610361
 8012d70:	03610361 	.word	0x03610361
 8012d74:	03610361 	.word	0x03610361
 8012d78:	00e600da 	.word	0x00e600da
 8012d7c:	03610361 	.word	0x03610361
 8012d80:	03610361 	.word	0x03610361
 8012d84:	03610361 	.word	0x03610361
 8012d88:	03610361 	.word	0x03610361
 8012d8c:	03610361 	.word	0x03610361
 8012d90:	03610143 	.word	0x03610143
 8012d94:	03610361 	.word	0x03610361
 8012d98:	03610182 	.word	0x03610182
 8012d9c:	0361027c 	.word	0x0361027c
 8012da0:	02ae0361 	.word	0x02ae0361
 8012da4:	03610361 	.word	0x03610361
 8012da8:	03610361 	.word	0x03610361
 8012dac:	03610361 	.word	0x03610361
 8012db0:	03610361 	.word	0x03610361
 8012db4:	03610361 	.word	0x03610361
 8012db8:	00e800da 	.word	0x00e800da
 8012dbc:	03610361 	.word	0x03610361
 8012dc0:	00c30361 	.word	0x00c30361
 8012dc4:	00d600e8 	.word	0x00d600e8
 8012dc8:	00cf0361 	.word	0x00cf0361
 8012dcc:	01260361 	.word	0x01260361
 8012dd0:	01740145 	.word	0x01740145
 8012dd4:	036100d6 	.word	0x036100d6
 8012dd8:	007f0182 	.word	0x007f0182
 8012ddc:	0361027e 	.word	0x0361027e
 8012de0:	02cd0361 	.word	0x02cd0361
 8012de4:	007f0361 	.word	0x007f0361
 8012de8:	3401      	adds	r4, #1
 8012dea:	e769      	b.n	8012cc0 <_vfiprintf_r+0xe4>
 8012dec:	9806      	ldr	r0, [sp, #24]
 8012dee:	f7fe facd 	bl	801138c <_localeconv_r>
 8012df2:	6843      	ldr	r3, [r0, #4]
 8012df4:	0018      	movs	r0, r3
 8012df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012df8:	f7ed f984 	bl	8000104 <strlen>
 8012dfc:	900e      	str	r0, [sp, #56]	; 0x38
 8012dfe:	9806      	ldr	r0, [sp, #24]
 8012e00:	f7fe fac4 	bl	801138c <_localeconv_r>
 8012e04:	6883      	ldr	r3, [r0, #8]
 8012e06:	930d      	str	r3, [sp, #52]	; 0x34
 8012e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d010      	beq.n	8012e30 <_vfiprintf_r+0x254>
 8012e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00d      	beq.n	8012e30 <_vfiprintf_r+0x254>
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d00a      	beq.n	8012e30 <_vfiprintf_r+0x254>
 8012e1a:	2380      	movs	r3, #128	; 0x80
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	431c      	orrs	r4, r3
 8012e20:	e006      	b.n	8012e30 <_vfiprintf_r+0x254>
 8012e22:	ab12      	add	r3, sp, #72	; 0x48
 8012e24:	78da      	ldrb	r2, [r3, #3]
 8012e26:	3303      	adds	r3, #3
 8012e28:	2a00      	cmp	r2, #0
 8012e2a:	d101      	bne.n	8012e30 <_vfiprintf_r+0x254>
 8012e2c:	3220      	adds	r2, #32
 8012e2e:	701a      	strb	r2, [r3, #0]
 8012e30:	9b07      	ldr	r3, [sp, #28]
 8012e32:	e774      	b.n	8012d1e <_vfiprintf_r+0x142>
 8012e34:	2301      	movs	r3, #1
 8012e36:	e7f2      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012e38:	cf08      	ldmia	r7!, {r3}
 8012e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	daf7      	bge.n	8012e30 <_vfiprintf_r+0x254>
 8012e40:	425b      	negs	r3, r3
 8012e42:	9309      	str	r3, [sp, #36]	; 0x24
 8012e44:	2304      	movs	r3, #4
 8012e46:	e7ea      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012e48:	222b      	movs	r2, #43	; 0x2b
 8012e4a:	ab12      	add	r3, sp, #72	; 0x48
 8012e4c:	70da      	strb	r2, [r3, #3]
 8012e4e:	e7ef      	b.n	8012e30 <_vfiprintf_r+0x254>
 8012e50:	9b07      	ldr	r3, [sp, #28]
 8012e52:	1c5a      	adds	r2, r3, #1
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	2b2a      	cmp	r3, #42	; 0x2a
 8012e58:	d00f      	beq.n	8012e7a <_vfiprintf_r+0x29e>
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	9105      	str	r1, [sp, #20]
 8012e5e:	0019      	movs	r1, r3
 8012e60:	3930      	subs	r1, #48	; 0x30
 8012e62:	9207      	str	r2, [sp, #28]
 8012e64:	2909      	cmp	r1, #9
 8012e66:	d900      	bls.n	8012e6a <_vfiprintf_r+0x28e>
 8012e68:	e75c      	b.n	8012d24 <_vfiprintf_r+0x148>
 8012e6a:	200a      	movs	r0, #10
 8012e6c:	9b05      	ldr	r3, [sp, #20]
 8012e6e:	4343      	muls	r3, r0
 8012e70:	185b      	adds	r3, r3, r1
 8012e72:	9305      	str	r3, [sp, #20]
 8012e74:	7813      	ldrb	r3, [r2, #0]
 8012e76:	3201      	adds	r2, #1
 8012e78:	e7f1      	b.n	8012e5e <_vfiprintf_r+0x282>
 8012e7a:	cf08      	ldmia	r7!, {r3}
 8012e7c:	9305      	str	r3, [sp, #20]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	da02      	bge.n	8012e88 <_vfiprintf_r+0x2ac>
 8012e82:	2301      	movs	r3, #1
 8012e84:	425b      	negs	r3, r3
 8012e86:	9305      	str	r3, [sp, #20]
 8012e88:	9207      	str	r2, [sp, #28]
 8012e8a:	e7d1      	b.n	8012e30 <_vfiprintf_r+0x254>
 8012e8c:	2380      	movs	r3, #128	; 0x80
 8012e8e:	e7c6      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012e90:	2100      	movs	r1, #0
 8012e92:	9a07      	ldr	r2, [sp, #28]
 8012e94:	9109      	str	r1, [sp, #36]	; 0x24
 8012e96:	200a      	movs	r0, #10
 8012e98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012e9a:	3b30      	subs	r3, #48	; 0x30
 8012e9c:	4341      	muls	r1, r0
 8012e9e:	185b      	adds	r3, r3, r1
 8012ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8012ea2:	0013      	movs	r3, r2
 8012ea4:	781b      	ldrb	r3, [r3, #0]
 8012ea6:	3201      	adds	r2, #1
 8012ea8:	0019      	movs	r1, r3
 8012eaa:	3930      	subs	r1, #48	; 0x30
 8012eac:	9207      	str	r2, [sp, #28]
 8012eae:	2909      	cmp	r1, #9
 8012eb0:	d9f1      	bls.n	8012e96 <_vfiprintf_r+0x2ba>
 8012eb2:	e737      	b.n	8012d24 <_vfiprintf_r+0x148>
 8012eb4:	ffffdfff 	.word	0xffffdfff
 8012eb8:	9b07      	ldr	r3, [sp, #28]
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	2b68      	cmp	r3, #104	; 0x68
 8012ebe:	d105      	bne.n	8012ecc <_vfiprintf_r+0x2f0>
 8012ec0:	9b07      	ldr	r3, [sp, #28]
 8012ec2:	3301      	adds	r3, #1
 8012ec4:	9307      	str	r3, [sp, #28]
 8012ec6:	2380      	movs	r3, #128	; 0x80
 8012ec8:	009b      	lsls	r3, r3, #2
 8012eca:	e7a8      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012ecc:	2340      	movs	r3, #64	; 0x40
 8012ece:	e7a6      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012ed0:	9b07      	ldr	r3, [sp, #28]
 8012ed2:	781b      	ldrb	r3, [r3, #0]
 8012ed4:	2b6c      	cmp	r3, #108	; 0x6c
 8012ed6:	d104      	bne.n	8012ee2 <_vfiprintf_r+0x306>
 8012ed8:	9b07      	ldr	r3, [sp, #28]
 8012eda:	3301      	adds	r3, #1
 8012edc:	9307      	str	r3, [sp, #28]
 8012ede:	2320      	movs	r3, #32
 8012ee0:	e79d      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012ee2:	2310      	movs	r3, #16
 8012ee4:	e79b      	b.n	8012e1e <_vfiprintf_r+0x242>
 8012ee6:	003a      	movs	r2, r7
 8012ee8:	ca08      	ldmia	r2!, {r3}
 8012eea:	ae27      	add	r6, sp, #156	; 0x9c
 8012eec:	7033      	strb	r3, [r6, #0]
 8012eee:	2300      	movs	r3, #0
 8012ef0:	9204      	str	r2, [sp, #16]
 8012ef2:	aa12      	add	r2, sp, #72	; 0x48
 8012ef4:	70d3      	strb	r3, [r2, #3]
 8012ef6:	2201      	movs	r2, #1
 8012ef8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012efa:	9205      	str	r2, [sp, #20]
 8012efc:	e0b0      	b.n	8013060 <_vfiprintf_r+0x484>
 8012efe:	2310      	movs	r3, #16
 8012f00:	431c      	orrs	r4, r3
 8012f02:	06a3      	lsls	r3, r4, #26
 8012f04:	d52a      	bpl.n	8012f5c <_vfiprintf_r+0x380>
 8012f06:	2307      	movs	r3, #7
 8012f08:	3707      	adds	r7, #7
 8012f0a:	439f      	bics	r7, r3
 8012f0c:	0039      	movs	r1, r7
 8012f0e:	c90c      	ldmia	r1!, {r2, r3}
 8012f10:	9200      	str	r2, [sp, #0]
 8012f12:	9301      	str	r3, [sp, #4]
 8012f14:	9104      	str	r1, [sp, #16]
 8012f16:	9a01      	ldr	r2, [sp, #4]
 8012f18:	2301      	movs	r3, #1
 8012f1a:	2a00      	cmp	r2, #0
 8012f1c:	da09      	bge.n	8012f32 <_vfiprintf_r+0x356>
 8012f1e:	9e00      	ldr	r6, [sp, #0]
 8012f20:	9f01      	ldr	r7, [sp, #4]
 8012f22:	2200      	movs	r2, #0
 8012f24:	4271      	negs	r1, r6
 8012f26:	41ba      	sbcs	r2, r7
 8012f28:	9100      	str	r1, [sp, #0]
 8012f2a:	9201      	str	r2, [sp, #4]
 8012f2c:	212d      	movs	r1, #45	; 0x2d
 8012f2e:	aa12      	add	r2, sp, #72	; 0x48
 8012f30:	70d1      	strb	r1, [r2, #3]
 8012f32:	9901      	ldr	r1, [sp, #4]
 8012f34:	9a00      	ldr	r2, [sp, #0]
 8012f36:	430a      	orrs	r2, r1
 8012f38:	9905      	ldr	r1, [sp, #20]
 8012f3a:	3101      	adds	r1, #1
 8012f3c:	d100      	bne.n	8012f40 <_vfiprintf_r+0x364>
 8012f3e:	e2e9      	b.n	8013514 <_vfiprintf_r+0x938>
 8012f40:	2180      	movs	r1, #128	; 0x80
 8012f42:	0027      	movs	r7, r4
 8012f44:	438f      	bics	r7, r1
 8012f46:	2a00      	cmp	r2, #0
 8012f48:	d000      	beq.n	8012f4c <_vfiprintf_r+0x370>
 8012f4a:	e2e7      	b.n	801351c <_vfiprintf_r+0x940>
 8012f4c:	9a05      	ldr	r2, [sp, #20]
 8012f4e:	2a00      	cmp	r2, #0
 8012f50:	d100      	bne.n	8012f54 <_vfiprintf_r+0x378>
 8012f52:	e243      	b.n	80133dc <_vfiprintf_r+0x800>
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	d000      	beq.n	8012f5a <_vfiprintf_r+0x37e>
 8012f58:	e2e3      	b.n	8013522 <_vfiprintf_r+0x946>
 8012f5a:	e1e7      	b.n	801332c <_vfiprintf_r+0x750>
 8012f5c:	003a      	movs	r2, r7
 8012f5e:	ca08      	ldmia	r2!, {r3}
 8012f60:	9204      	str	r2, [sp, #16]
 8012f62:	06e2      	lsls	r2, r4, #27
 8012f64:	d503      	bpl.n	8012f6e <_vfiprintf_r+0x392>
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	17db      	asrs	r3, r3, #31
 8012f6a:	9301      	str	r3, [sp, #4]
 8012f6c:	e7d3      	b.n	8012f16 <_vfiprintf_r+0x33a>
 8012f6e:	0662      	lsls	r2, r4, #25
 8012f70:	d501      	bpl.n	8012f76 <_vfiprintf_r+0x39a>
 8012f72:	b21b      	sxth	r3, r3
 8012f74:	e7f7      	b.n	8012f66 <_vfiprintf_r+0x38a>
 8012f76:	05a2      	lsls	r2, r4, #22
 8012f78:	d5f5      	bpl.n	8012f66 <_vfiprintf_r+0x38a>
 8012f7a:	b25b      	sxtb	r3, r3
 8012f7c:	e7f3      	b.n	8012f66 <_vfiprintf_r+0x38a>
 8012f7e:	1d3b      	adds	r3, r7, #4
 8012f80:	9304      	str	r3, [sp, #16]
 8012f82:	06a3      	lsls	r3, r4, #26
 8012f84:	d506      	bpl.n	8012f94 <_vfiprintf_r+0x3b8>
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	9a08      	ldr	r2, [sp, #32]
 8012f8a:	601a      	str	r2, [r3, #0]
 8012f8c:	17d2      	asrs	r2, r2, #31
 8012f8e:	605a      	str	r2, [r3, #4]
 8012f90:	9f04      	ldr	r7, [sp, #16]
 8012f92:	e694      	b.n	8012cbe <_vfiprintf_r+0xe2>
 8012f94:	06e3      	lsls	r3, r4, #27
 8012f96:	d503      	bpl.n	8012fa0 <_vfiprintf_r+0x3c4>
 8012f98:	683b      	ldr	r3, [r7, #0]
 8012f9a:	9a08      	ldr	r2, [sp, #32]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	e7f7      	b.n	8012f90 <_vfiprintf_r+0x3b4>
 8012fa0:	0663      	lsls	r3, r4, #25
 8012fa2:	d503      	bpl.n	8012fac <_vfiprintf_r+0x3d0>
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	9a08      	ldr	r2, [sp, #32]
 8012fa8:	801a      	strh	r2, [r3, #0]
 8012faa:	e7f1      	b.n	8012f90 <_vfiprintf_r+0x3b4>
 8012fac:	05a4      	lsls	r4, r4, #22
 8012fae:	d5f3      	bpl.n	8012f98 <_vfiprintf_r+0x3bc>
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	9a08      	ldr	r2, [sp, #32]
 8012fb4:	701a      	strb	r2, [r3, #0]
 8012fb6:	e7eb      	b.n	8012f90 <_vfiprintf_r+0x3b4>
 8012fb8:	2310      	movs	r3, #16
 8012fba:	431c      	orrs	r4, r3
 8012fbc:	2320      	movs	r3, #32
 8012fbe:	0020      	movs	r0, r4
 8012fc0:	4018      	ands	r0, r3
 8012fc2:	421c      	tst	r4, r3
 8012fc4:	d00d      	beq.n	8012fe2 <_vfiprintf_r+0x406>
 8012fc6:	3b19      	subs	r3, #25
 8012fc8:	3707      	adds	r7, #7
 8012fca:	439f      	bics	r7, r3
 8012fcc:	0039      	movs	r1, r7
 8012fce:	c90c      	ldmia	r1!, {r2, r3}
 8012fd0:	9200      	str	r2, [sp, #0]
 8012fd2:	9301      	str	r3, [sp, #4]
 8012fd4:	9104      	str	r1, [sp, #16]
 8012fd6:	4bcc      	ldr	r3, [pc, #816]	; (8013308 <_vfiprintf_r+0x72c>)
 8012fd8:	401c      	ands	r4, r3
 8012fda:	2300      	movs	r3, #0
 8012fdc:	2100      	movs	r1, #0
 8012fde:	aa12      	add	r2, sp, #72	; 0x48
 8012fe0:	e7a6      	b.n	8012f30 <_vfiprintf_r+0x354>
 8012fe2:	003a      	movs	r2, r7
 8012fe4:	ca08      	ldmia	r2!, {r3}
 8012fe6:	0021      	movs	r1, r4
 8012fe8:	9204      	str	r2, [sp, #16]
 8012fea:	2210      	movs	r2, #16
 8012fec:	4011      	ands	r1, r2
 8012fee:	4214      	tst	r4, r2
 8012ff0:	d002      	beq.n	8012ff8 <_vfiprintf_r+0x41c>
 8012ff2:	9300      	str	r3, [sp, #0]
 8012ff4:	9001      	str	r0, [sp, #4]
 8012ff6:	e7ee      	b.n	8012fd6 <_vfiprintf_r+0x3fa>
 8012ff8:	2240      	movs	r2, #64	; 0x40
 8012ffa:	0020      	movs	r0, r4
 8012ffc:	4010      	ands	r0, r2
 8012ffe:	4214      	tst	r4, r2
 8013000:	d003      	beq.n	801300a <_vfiprintf_r+0x42e>
 8013002:	b29b      	uxth	r3, r3
 8013004:	9300      	str	r3, [sp, #0]
 8013006:	9101      	str	r1, [sp, #4]
 8013008:	e7e5      	b.n	8012fd6 <_vfiprintf_r+0x3fa>
 801300a:	2280      	movs	r2, #128	; 0x80
 801300c:	0021      	movs	r1, r4
 801300e:	0092      	lsls	r2, r2, #2
 8013010:	4011      	ands	r1, r2
 8013012:	4214      	tst	r4, r2
 8013014:	d0f6      	beq.n	8013004 <_vfiprintf_r+0x428>
 8013016:	b2db      	uxtb	r3, r3
 8013018:	e7eb      	b.n	8012ff2 <_vfiprintf_r+0x416>
 801301a:	003b      	movs	r3, r7
 801301c:	cb04      	ldmia	r3!, {r2}
 801301e:	49bb      	ldr	r1, [pc, #748]	; (801330c <_vfiprintf_r+0x730>)
 8013020:	9304      	str	r3, [sp, #16]
 8013022:	2300      	movs	r3, #0
 8013024:	9200      	str	r2, [sp, #0]
 8013026:	aa13      	add	r2, sp, #76	; 0x4c
 8013028:	8011      	strh	r1, [r2, #0]
 801302a:	4ab9      	ldr	r2, [pc, #740]	; (8013310 <_vfiprintf_r+0x734>)
 801302c:	9301      	str	r3, [sp, #4]
 801302e:	3302      	adds	r3, #2
 8013030:	431c      	orrs	r4, r3
 8013032:	920c      	str	r2, [sp, #48]	; 0x30
 8013034:	e7d2      	b.n	8012fdc <_vfiprintf_r+0x400>
 8013036:	003b      	movs	r3, r7
 8013038:	2700      	movs	r7, #0
 801303a:	cb40      	ldmia	r3!, {r6}
 801303c:	9304      	str	r3, [sp, #16]
 801303e:	ab12      	add	r3, sp, #72	; 0x48
 8013040:	70df      	strb	r7, [r3, #3]
 8013042:	9b05      	ldr	r3, [sp, #20]
 8013044:	3301      	adds	r3, #1
 8013046:	d100      	bne.n	801304a <_vfiprintf_r+0x46e>
 8013048:	e0ea      	b.n	8013220 <_vfiprintf_r+0x644>
 801304a:	0039      	movs	r1, r7
 801304c:	0030      	movs	r0, r6
 801304e:	9a05      	ldr	r2, [sp, #20]
 8013050:	f7fe f9b4 	bl	80113bc <memchr>
 8013054:	900b      	str	r0, [sp, #44]	; 0x2c
 8013056:	42b8      	cmp	r0, r7
 8013058:	d002      	beq.n	8013060 <_vfiprintf_r+0x484>
 801305a:	1b83      	subs	r3, r0, r6
 801305c:	9305      	str	r3, [sp, #20]
 801305e:	970b      	str	r7, [sp, #44]	; 0x2c
 8013060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013062:	9a05      	ldr	r2, [sp, #20]
 8013064:	930a      	str	r3, [sp, #40]	; 0x28
 8013066:	4293      	cmp	r3, r2
 8013068:	da00      	bge.n	801306c <_vfiprintf_r+0x490>
 801306a:	920a      	str	r2, [sp, #40]	; 0x28
 801306c:	ab12      	add	r3, sp, #72	; 0x48
 801306e:	3303      	adds	r3, #3
 8013070:	781b      	ldrb	r3, [r3, #0]
 8013072:	1e5a      	subs	r2, r3, #1
 8013074:	4193      	sbcs	r3, r2
 8013076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013078:	18d3      	adds	r3, r2, r3
 801307a:	930a      	str	r3, [sp, #40]	; 0x28
 801307c:	0022      	movs	r2, r4
 801307e:	2302      	movs	r3, #2
 8013080:	401a      	ands	r2, r3
 8013082:	9210      	str	r2, [sp, #64]	; 0x40
 8013084:	421c      	tst	r4, r3
 8013086:	d002      	beq.n	801308e <_vfiprintf_r+0x4b2>
 8013088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801308a:	3302      	adds	r3, #2
 801308c:	930a      	str	r3, [sp, #40]	; 0x28
 801308e:	2384      	movs	r3, #132	; 0x84
 8013090:	0022      	movs	r2, r4
 8013092:	401a      	ands	r2, r3
 8013094:	9211      	str	r2, [sp, #68]	; 0x44
 8013096:	421c      	tst	r4, r3
 8013098:	d11e      	bne.n	80130d8 <_vfiprintf_r+0x4fc>
 801309a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801309c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801309e:	1a9f      	subs	r7, r3, r2
 80130a0:	2f00      	cmp	r7, #0
 80130a2:	dd19      	ble.n	80130d8 <_vfiprintf_r+0x4fc>
 80130a4:	0029      	movs	r1, r5
 80130a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130a8:	489a      	ldr	r0, [pc, #616]	; (8013314 <_vfiprintf_r+0x738>)
 80130aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80130ac:	3301      	adds	r3, #1
 80130ae:	3108      	adds	r1, #8
 80130b0:	6028      	str	r0, [r5, #0]
 80130b2:	2f10      	cmp	r7, #16
 80130b4:	dd00      	ble.n	80130b8 <_vfiprintf_r+0x4dc>
 80130b6:	e1a7      	b.n	8013408 <_vfiprintf_r+0x82c>
 80130b8:	606f      	str	r7, [r5, #4]
 80130ba:	18bf      	adds	r7, r7, r2
 80130bc:	000d      	movs	r5, r1
 80130be:	9716      	str	r7, [sp, #88]	; 0x58
 80130c0:	9315      	str	r3, [sp, #84]	; 0x54
 80130c2:	2b07      	cmp	r3, #7
 80130c4:	dd08      	ble.n	80130d8 <_vfiprintf_r+0x4fc>
 80130c6:	9903      	ldr	r1, [sp, #12]
 80130c8:	9806      	ldr	r0, [sp, #24]
 80130ca:	aa14      	add	r2, sp, #80	; 0x50
 80130cc:	f7ff fd51 	bl	8012b72 <__sprint_r>
 80130d0:	2800      	cmp	r0, #0
 80130d2:	d000      	beq.n	80130d6 <_vfiprintf_r+0x4fa>
 80130d4:	e1eb      	b.n	80134ae <_vfiprintf_r+0x8d2>
 80130d6:	ad17      	add	r5, sp, #92	; 0x5c
 80130d8:	a912      	add	r1, sp, #72	; 0x48
 80130da:	78c8      	ldrb	r0, [r1, #3]
 80130dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80130de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130e0:	3103      	adds	r1, #3
 80130e2:	2800      	cmp	r0, #0
 80130e4:	d012      	beq.n	801310c <_vfiprintf_r+0x530>
 80130e6:	6029      	str	r1, [r5, #0]
 80130e8:	2101      	movs	r1, #1
 80130ea:	3301      	adds	r3, #1
 80130ec:	1852      	adds	r2, r2, r1
 80130ee:	6069      	str	r1, [r5, #4]
 80130f0:	9216      	str	r2, [sp, #88]	; 0x58
 80130f2:	9315      	str	r3, [sp, #84]	; 0x54
 80130f4:	3508      	adds	r5, #8
 80130f6:	2b07      	cmp	r3, #7
 80130f8:	dd08      	ble.n	801310c <_vfiprintf_r+0x530>
 80130fa:	9903      	ldr	r1, [sp, #12]
 80130fc:	9806      	ldr	r0, [sp, #24]
 80130fe:	aa14      	add	r2, sp, #80	; 0x50
 8013100:	f7ff fd37 	bl	8012b72 <__sprint_r>
 8013104:	2800      	cmp	r0, #0
 8013106:	d000      	beq.n	801310a <_vfiprintf_r+0x52e>
 8013108:	e1d1      	b.n	80134ae <_vfiprintf_r+0x8d2>
 801310a:	ad17      	add	r5, sp, #92	; 0x5c
 801310c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801310e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013112:	2900      	cmp	r1, #0
 8013114:	d013      	beq.n	801313e <_vfiprintf_r+0x562>
 8013116:	a913      	add	r1, sp, #76	; 0x4c
 8013118:	6029      	str	r1, [r5, #0]
 801311a:	2102      	movs	r1, #2
 801311c:	3301      	adds	r3, #1
 801311e:	1852      	adds	r2, r2, r1
 8013120:	6069      	str	r1, [r5, #4]
 8013122:	9216      	str	r2, [sp, #88]	; 0x58
 8013124:	9315      	str	r3, [sp, #84]	; 0x54
 8013126:	3508      	adds	r5, #8
 8013128:	2b07      	cmp	r3, #7
 801312a:	dd08      	ble.n	801313e <_vfiprintf_r+0x562>
 801312c:	9903      	ldr	r1, [sp, #12]
 801312e:	9806      	ldr	r0, [sp, #24]
 8013130:	aa14      	add	r2, sp, #80	; 0x50
 8013132:	f7ff fd1e 	bl	8012b72 <__sprint_r>
 8013136:	2800      	cmp	r0, #0
 8013138:	d000      	beq.n	801313c <_vfiprintf_r+0x560>
 801313a:	e1b8      	b.n	80134ae <_vfiprintf_r+0x8d2>
 801313c:	ad17      	add	r5, sp, #92	; 0x5c
 801313e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013140:	2b80      	cmp	r3, #128	; 0x80
 8013142:	d11e      	bne.n	8013182 <_vfiprintf_r+0x5a6>
 8013144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013148:	1a9f      	subs	r7, r3, r2
 801314a:	2f00      	cmp	r7, #0
 801314c:	dd19      	ble.n	8013182 <_vfiprintf_r+0x5a6>
 801314e:	0029      	movs	r1, r5
 8013150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013152:	4871      	ldr	r0, [pc, #452]	; (8013318 <_vfiprintf_r+0x73c>)
 8013154:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013156:	3301      	adds	r3, #1
 8013158:	3108      	adds	r1, #8
 801315a:	6028      	str	r0, [r5, #0]
 801315c:	2f10      	cmp	r7, #16
 801315e:	dd00      	ble.n	8013162 <_vfiprintf_r+0x586>
 8013160:	e164      	b.n	801342c <_vfiprintf_r+0x850>
 8013162:	606f      	str	r7, [r5, #4]
 8013164:	18bf      	adds	r7, r7, r2
 8013166:	000d      	movs	r5, r1
 8013168:	9716      	str	r7, [sp, #88]	; 0x58
 801316a:	9315      	str	r3, [sp, #84]	; 0x54
 801316c:	2b07      	cmp	r3, #7
 801316e:	dd08      	ble.n	8013182 <_vfiprintf_r+0x5a6>
 8013170:	9903      	ldr	r1, [sp, #12]
 8013172:	9806      	ldr	r0, [sp, #24]
 8013174:	aa14      	add	r2, sp, #80	; 0x50
 8013176:	f7ff fcfc 	bl	8012b72 <__sprint_r>
 801317a:	2800      	cmp	r0, #0
 801317c:	d000      	beq.n	8013180 <_vfiprintf_r+0x5a4>
 801317e:	e196      	b.n	80134ae <_vfiprintf_r+0x8d2>
 8013180:	ad17      	add	r5, sp, #92	; 0x5c
 8013182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013184:	9a05      	ldr	r2, [sp, #20]
 8013186:	1a9f      	subs	r7, r3, r2
 8013188:	2f00      	cmp	r7, #0
 801318a:	dd19      	ble.n	80131c0 <_vfiprintf_r+0x5e4>
 801318c:	0029      	movs	r1, r5
 801318e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013190:	4861      	ldr	r0, [pc, #388]	; (8013318 <_vfiprintf_r+0x73c>)
 8013192:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013194:	3301      	adds	r3, #1
 8013196:	3108      	adds	r1, #8
 8013198:	6028      	str	r0, [r5, #0]
 801319a:	2f10      	cmp	r7, #16
 801319c:	dd00      	ble.n	80131a0 <_vfiprintf_r+0x5c4>
 801319e:	e157      	b.n	8013450 <_vfiprintf_r+0x874>
 80131a0:	606f      	str	r7, [r5, #4]
 80131a2:	18bf      	adds	r7, r7, r2
 80131a4:	000d      	movs	r5, r1
 80131a6:	9716      	str	r7, [sp, #88]	; 0x58
 80131a8:	9315      	str	r3, [sp, #84]	; 0x54
 80131aa:	2b07      	cmp	r3, #7
 80131ac:	dd08      	ble.n	80131c0 <_vfiprintf_r+0x5e4>
 80131ae:	9903      	ldr	r1, [sp, #12]
 80131b0:	9806      	ldr	r0, [sp, #24]
 80131b2:	aa14      	add	r2, sp, #80	; 0x50
 80131b4:	f7ff fcdd 	bl	8012b72 <__sprint_r>
 80131b8:	2800      	cmp	r0, #0
 80131ba:	d000      	beq.n	80131be <_vfiprintf_r+0x5e2>
 80131bc:	e177      	b.n	80134ae <_vfiprintf_r+0x8d2>
 80131be:	ad17      	add	r5, sp, #92	; 0x5c
 80131c0:	9b05      	ldr	r3, [sp, #20]
 80131c2:	9a05      	ldr	r2, [sp, #20]
 80131c4:	606b      	str	r3, [r5, #4]
 80131c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80131c8:	602e      	str	r6, [r5, #0]
 80131ca:	189b      	adds	r3, r3, r2
 80131cc:	9316      	str	r3, [sp, #88]	; 0x58
 80131ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131d0:	3508      	adds	r5, #8
 80131d2:	3301      	adds	r3, #1
 80131d4:	9315      	str	r3, [sp, #84]	; 0x54
 80131d6:	2b07      	cmp	r3, #7
 80131d8:	dd08      	ble.n	80131ec <_vfiprintf_r+0x610>
 80131da:	9903      	ldr	r1, [sp, #12]
 80131dc:	9806      	ldr	r0, [sp, #24]
 80131de:	aa14      	add	r2, sp, #80	; 0x50
 80131e0:	f7ff fcc7 	bl	8012b72 <__sprint_r>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d000      	beq.n	80131ea <_vfiprintf_r+0x60e>
 80131e8:	e161      	b.n	80134ae <_vfiprintf_r+0x8d2>
 80131ea:	ad17      	add	r5, sp, #92	; 0x5c
 80131ec:	0764      	lsls	r4, r4, #29
 80131ee:	d500      	bpl.n	80131f2 <_vfiprintf_r+0x616>
 80131f0:	e140      	b.n	8013474 <_vfiprintf_r+0x898>
 80131f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131f6:	4293      	cmp	r3, r2
 80131f8:	da00      	bge.n	80131fc <_vfiprintf_r+0x620>
 80131fa:	0013      	movs	r3, r2
 80131fc:	9a08      	ldr	r2, [sp, #32]
 80131fe:	18d3      	adds	r3, r2, r3
 8013200:	9308      	str	r3, [sp, #32]
 8013202:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013204:	2b00      	cmp	r3, #0
 8013206:	d007      	beq.n	8013218 <_vfiprintf_r+0x63c>
 8013208:	9903      	ldr	r1, [sp, #12]
 801320a:	9806      	ldr	r0, [sp, #24]
 801320c:	aa14      	add	r2, sp, #80	; 0x50
 801320e:	f7ff fcb0 	bl	8012b72 <__sprint_r>
 8013212:	2800      	cmp	r0, #0
 8013214:	d000      	beq.n	8013218 <_vfiprintf_r+0x63c>
 8013216:	e14a      	b.n	80134ae <_vfiprintf_r+0x8d2>
 8013218:	2300      	movs	r3, #0
 801321a:	ad17      	add	r5, sp, #92	; 0x5c
 801321c:	9315      	str	r3, [sp, #84]	; 0x54
 801321e:	e6b7      	b.n	8012f90 <_vfiprintf_r+0x3b4>
 8013220:	0030      	movs	r0, r6
 8013222:	f7ec ff6f 	bl	8000104 <strlen>
 8013226:	9005      	str	r0, [sp, #20]
 8013228:	e719      	b.n	801305e <_vfiprintf_r+0x482>
 801322a:	2310      	movs	r3, #16
 801322c:	431c      	orrs	r4, r3
 801322e:	2320      	movs	r3, #32
 8013230:	0020      	movs	r0, r4
 8013232:	4018      	ands	r0, r3
 8013234:	421c      	tst	r4, r3
 8013236:	d009      	beq.n	801324c <_vfiprintf_r+0x670>
 8013238:	3b19      	subs	r3, #25
 801323a:	3707      	adds	r7, #7
 801323c:	439f      	bics	r7, r3
 801323e:	0039      	movs	r1, r7
 8013240:	c90c      	ldmia	r1!, {r2, r3}
 8013242:	9200      	str	r2, [sp, #0]
 8013244:	9301      	str	r3, [sp, #4]
 8013246:	9104      	str	r1, [sp, #16]
 8013248:	2301      	movs	r3, #1
 801324a:	e6c7      	b.n	8012fdc <_vfiprintf_r+0x400>
 801324c:	003b      	movs	r3, r7
 801324e:	cb04      	ldmia	r3!, {r2}
 8013250:	0021      	movs	r1, r4
 8013252:	9304      	str	r3, [sp, #16]
 8013254:	2310      	movs	r3, #16
 8013256:	4019      	ands	r1, r3
 8013258:	421c      	tst	r4, r3
 801325a:	d003      	beq.n	8013264 <_vfiprintf_r+0x688>
 801325c:	9200      	str	r2, [sp, #0]
 801325e:	9001      	str	r0, [sp, #4]
 8013260:	3b0f      	subs	r3, #15
 8013262:	e6bb      	b.n	8012fdc <_vfiprintf_r+0x400>
 8013264:	2340      	movs	r3, #64	; 0x40
 8013266:	0020      	movs	r0, r4
 8013268:	4018      	ands	r0, r3
 801326a:	421c      	tst	r4, r3
 801326c:	d003      	beq.n	8013276 <_vfiprintf_r+0x69a>
 801326e:	b293      	uxth	r3, r2
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	9101      	str	r1, [sp, #4]
 8013274:	e7e8      	b.n	8013248 <_vfiprintf_r+0x66c>
 8013276:	2380      	movs	r3, #128	; 0x80
 8013278:	0021      	movs	r1, r4
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	4019      	ands	r1, r3
 801327e:	421c      	tst	r4, r3
 8013280:	d003      	beq.n	801328a <_vfiprintf_r+0x6ae>
 8013282:	b2d3      	uxtb	r3, r2
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	9001      	str	r0, [sp, #4]
 8013288:	e7de      	b.n	8013248 <_vfiprintf_r+0x66c>
 801328a:	9200      	str	r2, [sp, #0]
 801328c:	e7f1      	b.n	8013272 <_vfiprintf_r+0x696>
 801328e:	4a23      	ldr	r2, [pc, #140]	; (801331c <_vfiprintf_r+0x740>)
 8013290:	0020      	movs	r0, r4
 8013292:	920c      	str	r2, [sp, #48]	; 0x30
 8013294:	2220      	movs	r2, #32
 8013296:	4010      	ands	r0, r2
 8013298:	4214      	tst	r4, r2
 801329a:	d019      	beq.n	80132d0 <_vfiprintf_r+0x6f4>
 801329c:	3a19      	subs	r2, #25
 801329e:	3707      	adds	r7, #7
 80132a0:	4397      	bics	r7, r2
 80132a2:	0038      	movs	r0, r7
 80132a4:	c806      	ldmia	r0!, {r1, r2}
 80132a6:	9100      	str	r1, [sp, #0]
 80132a8:	9201      	str	r2, [sp, #4]
 80132aa:	9004      	str	r0, [sp, #16]
 80132ac:	07e2      	lsls	r2, r4, #31
 80132ae:	d509      	bpl.n	80132c4 <_vfiprintf_r+0x6e8>
 80132b0:	9a00      	ldr	r2, [sp, #0]
 80132b2:	9901      	ldr	r1, [sp, #4]
 80132b4:	430a      	orrs	r2, r1
 80132b6:	d005      	beq.n	80132c4 <_vfiprintf_r+0x6e8>
 80132b8:	aa13      	add	r2, sp, #76	; 0x4c
 80132ba:	2130      	movs	r1, #48	; 0x30
 80132bc:	7053      	strb	r3, [r2, #1]
 80132be:	2302      	movs	r3, #2
 80132c0:	7011      	strb	r1, [r2, #0]
 80132c2:	431c      	orrs	r4, r3
 80132c4:	4b10      	ldr	r3, [pc, #64]	; (8013308 <_vfiprintf_r+0x72c>)
 80132c6:	401c      	ands	r4, r3
 80132c8:	2302      	movs	r3, #2
 80132ca:	e687      	b.n	8012fdc <_vfiprintf_r+0x400>
 80132cc:	4a10      	ldr	r2, [pc, #64]	; (8013310 <_vfiprintf_r+0x734>)
 80132ce:	e7df      	b.n	8013290 <_vfiprintf_r+0x6b4>
 80132d0:	0039      	movs	r1, r7
 80132d2:	c904      	ldmia	r1!, {r2}
 80132d4:	0026      	movs	r6, r4
 80132d6:	9104      	str	r1, [sp, #16]
 80132d8:	2110      	movs	r1, #16
 80132da:	400e      	ands	r6, r1
 80132dc:	420c      	tst	r4, r1
 80132de:	d002      	beq.n	80132e6 <_vfiprintf_r+0x70a>
 80132e0:	9200      	str	r2, [sp, #0]
 80132e2:	9001      	str	r0, [sp, #4]
 80132e4:	e7e2      	b.n	80132ac <_vfiprintf_r+0x6d0>
 80132e6:	2140      	movs	r1, #64	; 0x40
 80132e8:	0020      	movs	r0, r4
 80132ea:	4008      	ands	r0, r1
 80132ec:	420c      	tst	r4, r1
 80132ee:	d003      	beq.n	80132f8 <_vfiprintf_r+0x71c>
 80132f0:	b292      	uxth	r2, r2
 80132f2:	9200      	str	r2, [sp, #0]
 80132f4:	9601      	str	r6, [sp, #4]
 80132f6:	e7d9      	b.n	80132ac <_vfiprintf_r+0x6d0>
 80132f8:	2180      	movs	r1, #128	; 0x80
 80132fa:	0026      	movs	r6, r4
 80132fc:	0089      	lsls	r1, r1, #2
 80132fe:	400e      	ands	r6, r1
 8013300:	420c      	tst	r4, r1
 8013302:	d0f6      	beq.n	80132f2 <_vfiprintf_r+0x716>
 8013304:	b2d2      	uxtb	r2, r2
 8013306:	e7eb      	b.n	80132e0 <_vfiprintf_r+0x704>
 8013308:	fffffbff 	.word	0xfffffbff
 801330c:	00007830 	.word	0x00007830
 8013310:	08015dfc 	.word	0x08015dfc
 8013314:	08015f09 	.word	0x08015f09
 8013318:	08015f19 	.word	0x08015f19
 801331c:	08015e0d 	.word	0x08015e0d
 8013320:	9b01      	ldr	r3, [sp, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d109      	bne.n	801333a <_vfiprintf_r+0x75e>
 8013326:	9b00      	ldr	r3, [sp, #0]
 8013328:	2b09      	cmp	r3, #9
 801332a:	d806      	bhi.n	801333a <_vfiprintf_r+0x75e>
 801332c:	26b7      	movs	r6, #183	; 0xb7
 801332e:	ab12      	add	r3, sp, #72	; 0x48
 8013330:	18f6      	adds	r6, r6, r3
 8013332:	9b00      	ldr	r3, [sp, #0]
 8013334:	3330      	adds	r3, #48	; 0x30
 8013336:	7033      	strb	r3, [r6, #0]
 8013338:	e115      	b.n	8013566 <_vfiprintf_r+0x98a>
 801333a:	2380      	movs	r3, #128	; 0x80
 801333c:	2400      	movs	r4, #0
 801333e:	00db      	lsls	r3, r3, #3
 8013340:	403b      	ands	r3, r7
 8013342:	ae40      	add	r6, sp, #256	; 0x100
 8013344:	930a      	str	r3, [sp, #40]	; 0x28
 8013346:	220a      	movs	r2, #10
 8013348:	9800      	ldr	r0, [sp, #0]
 801334a:	9901      	ldr	r1, [sp, #4]
 801334c:	2300      	movs	r3, #0
 801334e:	f7ed f8a9 	bl	80004a4 <__aeabi_uldivmod>
 8013352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013354:	3e01      	subs	r6, #1
 8013356:	3230      	adds	r2, #48	; 0x30
 8013358:	900b      	str	r0, [sp, #44]	; 0x2c
 801335a:	9110      	str	r1, [sp, #64]	; 0x40
 801335c:	7032      	strb	r2, [r6, #0]
 801335e:	3401      	adds	r4, #1
 8013360:	2b00      	cmp	r3, #0
 8013362:	d01a      	beq.n	801339a <_vfiprintf_r+0x7be>
 8013364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	42a3      	cmp	r3, r4
 801336a:	d116      	bne.n	801339a <_vfiprintf_r+0x7be>
 801336c:	2cff      	cmp	r4, #255	; 0xff
 801336e:	d014      	beq.n	801339a <_vfiprintf_r+0x7be>
 8013370:	9b01      	ldr	r3, [sp, #4]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d102      	bne.n	801337c <_vfiprintf_r+0x7a0>
 8013376:	9b00      	ldr	r3, [sp, #0]
 8013378:	2b09      	cmp	r3, #9
 801337a:	d90e      	bls.n	801339a <_vfiprintf_r+0x7be>
 801337c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801337e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013380:	1af6      	subs	r6, r6, r3
 8013382:	001a      	movs	r2, r3
 8013384:	0030      	movs	r0, r6
 8013386:	f7fa f832 	bl	800d3ee <strncpy>
 801338a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801338c:	2400      	movs	r4, #0
 801338e:	785b      	ldrb	r3, [r3, #1]
 8013390:	1e5a      	subs	r2, r3, #1
 8013392:	4193      	sbcs	r3, r2
 8013394:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013396:	18d3      	adds	r3, r2, r3
 8013398:	930d      	str	r3, [sp, #52]	; 0x34
 801339a:	9b01      	ldr	r3, [sp, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d103      	bne.n	80133a8 <_vfiprintf_r+0x7cc>
 80133a0:	9b00      	ldr	r3, [sp, #0]
 80133a2:	2b09      	cmp	r3, #9
 80133a4:	d800      	bhi.n	80133a8 <_vfiprintf_r+0x7cc>
 80133a6:	e0de      	b.n	8013566 <_vfiprintf_r+0x98a>
 80133a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133aa:	9300      	str	r3, [sp, #0]
 80133ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80133ae:	9301      	str	r3, [sp, #4]
 80133b0:	e7c9      	b.n	8013346 <_vfiprintf_r+0x76a>
 80133b2:	200f      	movs	r0, #15
 80133b4:	9b00      	ldr	r3, [sp, #0]
 80133b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80133b8:	4003      	ands	r3, r0
 80133ba:	5cd3      	ldrb	r3, [r2, r3]
 80133bc:	3e01      	subs	r6, #1
 80133be:	7033      	strb	r3, [r6, #0]
 80133c0:	9b01      	ldr	r3, [sp, #4]
 80133c2:	0719      	lsls	r1, r3, #28
 80133c4:	9b00      	ldr	r3, [sp, #0]
 80133c6:	091a      	lsrs	r2, r3, #4
 80133c8:	9b01      	ldr	r3, [sp, #4]
 80133ca:	4311      	orrs	r1, r2
 80133cc:	091b      	lsrs	r3, r3, #4
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	000b      	movs	r3, r1
 80133d2:	9a01      	ldr	r2, [sp, #4]
 80133d4:	9100      	str	r1, [sp, #0]
 80133d6:	4313      	orrs	r3, r2
 80133d8:	d1ec      	bne.n	80133b4 <_vfiprintf_r+0x7d8>
 80133da:	e0c4      	b.n	8013566 <_vfiprintf_r+0x98a>
 80133dc:	ae40      	add	r6, sp, #256	; 0x100
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d000      	beq.n	80133e4 <_vfiprintf_r+0x808>
 80133e2:	e0c0      	b.n	8013566 <_vfiprintf_r+0x98a>
 80133e4:	07e4      	lsls	r4, r4, #31
 80133e6:	d400      	bmi.n	80133ea <_vfiprintf_r+0x80e>
 80133e8:	e0bd      	b.n	8013566 <_vfiprintf_r+0x98a>
 80133ea:	26b7      	movs	r6, #183	; 0xb7
 80133ec:	ab12      	add	r3, sp, #72	; 0x48
 80133ee:	18f6      	adds	r6, r6, r3
 80133f0:	2330      	movs	r3, #48	; 0x30
 80133f2:	e7a0      	b.n	8013336 <_vfiprintf_r+0x75a>
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d100      	bne.n	80133fa <_vfiprintf_r+0x81e>
 80133f8:	e07e      	b.n	80134f8 <_vfiprintf_r+0x91c>
 80133fa:	ae27      	add	r6, sp, #156	; 0x9c
 80133fc:	7033      	strb	r3, [r6, #0]
 80133fe:	2300      	movs	r3, #0
 8013400:	aa12      	add	r2, sp, #72	; 0x48
 8013402:	70d3      	strb	r3, [r2, #3]
 8013404:	9704      	str	r7, [sp, #16]
 8013406:	e576      	b.n	8012ef6 <_vfiprintf_r+0x31a>
 8013408:	2010      	movs	r0, #16
 801340a:	1812      	adds	r2, r2, r0
 801340c:	6068      	str	r0, [r5, #4]
 801340e:	9216      	str	r2, [sp, #88]	; 0x58
 8013410:	9315      	str	r3, [sp, #84]	; 0x54
 8013412:	2b07      	cmp	r3, #7
 8013414:	dd07      	ble.n	8013426 <_vfiprintf_r+0x84a>
 8013416:	9903      	ldr	r1, [sp, #12]
 8013418:	9806      	ldr	r0, [sp, #24]
 801341a:	aa14      	add	r2, sp, #80	; 0x50
 801341c:	f7ff fba9 	bl	8012b72 <__sprint_r>
 8013420:	2800      	cmp	r0, #0
 8013422:	d144      	bne.n	80134ae <_vfiprintf_r+0x8d2>
 8013424:	a917      	add	r1, sp, #92	; 0x5c
 8013426:	000d      	movs	r5, r1
 8013428:	3f10      	subs	r7, #16
 801342a:	e63b      	b.n	80130a4 <_vfiprintf_r+0x4c8>
 801342c:	2010      	movs	r0, #16
 801342e:	1812      	adds	r2, r2, r0
 8013430:	6068      	str	r0, [r5, #4]
 8013432:	9216      	str	r2, [sp, #88]	; 0x58
 8013434:	9315      	str	r3, [sp, #84]	; 0x54
 8013436:	2b07      	cmp	r3, #7
 8013438:	dd07      	ble.n	801344a <_vfiprintf_r+0x86e>
 801343a:	9903      	ldr	r1, [sp, #12]
 801343c:	9806      	ldr	r0, [sp, #24]
 801343e:	aa14      	add	r2, sp, #80	; 0x50
 8013440:	f7ff fb97 	bl	8012b72 <__sprint_r>
 8013444:	2800      	cmp	r0, #0
 8013446:	d132      	bne.n	80134ae <_vfiprintf_r+0x8d2>
 8013448:	a917      	add	r1, sp, #92	; 0x5c
 801344a:	000d      	movs	r5, r1
 801344c:	3f10      	subs	r7, #16
 801344e:	e67e      	b.n	801314e <_vfiprintf_r+0x572>
 8013450:	2010      	movs	r0, #16
 8013452:	1812      	adds	r2, r2, r0
 8013454:	6068      	str	r0, [r5, #4]
 8013456:	9216      	str	r2, [sp, #88]	; 0x58
 8013458:	9315      	str	r3, [sp, #84]	; 0x54
 801345a:	2b07      	cmp	r3, #7
 801345c:	dd07      	ble.n	801346e <_vfiprintf_r+0x892>
 801345e:	9903      	ldr	r1, [sp, #12]
 8013460:	9806      	ldr	r0, [sp, #24]
 8013462:	aa14      	add	r2, sp, #80	; 0x50
 8013464:	f7ff fb85 	bl	8012b72 <__sprint_r>
 8013468:	2800      	cmp	r0, #0
 801346a:	d120      	bne.n	80134ae <_vfiprintf_r+0x8d2>
 801346c:	a917      	add	r1, sp, #92	; 0x5c
 801346e:	000d      	movs	r5, r1
 8013470:	3f10      	subs	r7, #16
 8013472:	e68b      	b.n	801318c <_vfiprintf_r+0x5b0>
 8013474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013478:	2610      	movs	r6, #16
 801347a:	1a9c      	subs	r4, r3, r2
 801347c:	2c00      	cmp	r4, #0
 801347e:	dc00      	bgt.n	8013482 <_vfiprintf_r+0x8a6>
 8013480:	e6b7      	b.n	80131f2 <_vfiprintf_r+0x616>
 8013482:	9915      	ldr	r1, [sp, #84]	; 0x54
 8013484:	4a3b      	ldr	r2, [pc, #236]	; (8013574 <_vfiprintf_r+0x998>)
 8013486:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013488:	3101      	adds	r1, #1
 801348a:	602a      	str	r2, [r5, #0]
 801348c:	2c10      	cmp	r4, #16
 801348e:	dc22      	bgt.n	80134d6 <_vfiprintf_r+0x8fa>
 8013490:	606c      	str	r4, [r5, #4]
 8013492:	18e4      	adds	r4, r4, r3
 8013494:	9416      	str	r4, [sp, #88]	; 0x58
 8013496:	9115      	str	r1, [sp, #84]	; 0x54
 8013498:	2907      	cmp	r1, #7
 801349a:	dc00      	bgt.n	801349e <_vfiprintf_r+0x8c2>
 801349c:	e6a9      	b.n	80131f2 <_vfiprintf_r+0x616>
 801349e:	9903      	ldr	r1, [sp, #12]
 80134a0:	9806      	ldr	r0, [sp, #24]
 80134a2:	aa14      	add	r2, sp, #80	; 0x50
 80134a4:	f7ff fb65 	bl	8012b72 <__sprint_r>
 80134a8:	2800      	cmp	r0, #0
 80134aa:	d100      	bne.n	80134ae <_vfiprintf_r+0x8d2>
 80134ac:	e6a1      	b.n	80131f2 <_vfiprintf_r+0x616>
 80134ae:	9b03      	ldr	r3, [sp, #12]
 80134b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134b2:	07db      	lsls	r3, r3, #31
 80134b4:	d407      	bmi.n	80134c6 <_vfiprintf_r+0x8ea>
 80134b6:	9b03      	ldr	r3, [sp, #12]
 80134b8:	899b      	ldrh	r3, [r3, #12]
 80134ba:	059b      	lsls	r3, r3, #22
 80134bc:	d403      	bmi.n	80134c6 <_vfiprintf_r+0x8ea>
 80134be:	9b03      	ldr	r3, [sp, #12]
 80134c0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80134c2:	f7fa f88e 	bl	800d5e2 <__retarget_lock_release_recursive>
 80134c6:	9b03      	ldr	r3, [sp, #12]
 80134c8:	899b      	ldrh	r3, [r3, #12]
 80134ca:	065b      	lsls	r3, r3, #25
 80134cc:	d401      	bmi.n	80134d2 <_vfiprintf_r+0x8f6>
 80134ce:	f7ff fbc3 	bl	8012c58 <_vfiprintf_r+0x7c>
 80134d2:	f7ff fbbe 	bl	8012c52 <_vfiprintf_r+0x76>
 80134d6:	3310      	adds	r3, #16
 80134d8:	606e      	str	r6, [r5, #4]
 80134da:	9316      	str	r3, [sp, #88]	; 0x58
 80134dc:	9115      	str	r1, [sp, #84]	; 0x54
 80134de:	3508      	adds	r5, #8
 80134e0:	2907      	cmp	r1, #7
 80134e2:	dd07      	ble.n	80134f4 <_vfiprintf_r+0x918>
 80134e4:	9903      	ldr	r1, [sp, #12]
 80134e6:	9806      	ldr	r0, [sp, #24]
 80134e8:	aa14      	add	r2, sp, #80	; 0x50
 80134ea:	f7ff fb42 	bl	8012b72 <__sprint_r>
 80134ee:	2800      	cmp	r0, #0
 80134f0:	d1dd      	bne.n	80134ae <_vfiprintf_r+0x8d2>
 80134f2:	ad17      	add	r5, sp, #92	; 0x5c
 80134f4:	3c10      	subs	r4, #16
 80134f6:	e7c4      	b.n	8013482 <_vfiprintf_r+0x8a6>
 80134f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d102      	bne.n	8013504 <_vfiprintf_r+0x928>
 80134fe:	2300      	movs	r3, #0
 8013500:	9315      	str	r3, [sp, #84]	; 0x54
 8013502:	e7d4      	b.n	80134ae <_vfiprintf_r+0x8d2>
 8013504:	9903      	ldr	r1, [sp, #12]
 8013506:	9806      	ldr	r0, [sp, #24]
 8013508:	aa14      	add	r2, sp, #80	; 0x50
 801350a:	f7ff fb32 	bl	8012b72 <__sprint_r>
 801350e:	2800      	cmp	r0, #0
 8013510:	d0f5      	beq.n	80134fe <_vfiprintf_r+0x922>
 8013512:	e7cc      	b.n	80134ae <_vfiprintf_r+0x8d2>
 8013514:	0027      	movs	r7, r4
 8013516:	2a00      	cmp	r2, #0
 8013518:	d100      	bne.n	801351c <_vfiprintf_r+0x940>
 801351a:	e51b      	b.n	8012f54 <_vfiprintf_r+0x378>
 801351c:	2b01      	cmp	r3, #1
 801351e:	d100      	bne.n	8013522 <_vfiprintf_r+0x946>
 8013520:	e6fe      	b.n	8013320 <_vfiprintf_r+0x744>
 8013522:	ae40      	add	r6, sp, #256	; 0x100
 8013524:	2b02      	cmp	r3, #2
 8013526:	d100      	bne.n	801352a <_vfiprintf_r+0x94e>
 8013528:	e743      	b.n	80133b2 <_vfiprintf_r+0x7d6>
 801352a:	2307      	movs	r3, #7
 801352c:	469c      	mov	ip, r3
 801352e:	4663      	mov	r3, ip
 8013530:	9900      	ldr	r1, [sp, #0]
 8013532:	0032      	movs	r2, r6
 8013534:	400b      	ands	r3, r1
 8013536:	9901      	ldr	r1, [sp, #4]
 8013538:	3e01      	subs	r6, #1
 801353a:	074c      	lsls	r4, r1, #29
 801353c:	9900      	ldr	r1, [sp, #0]
 801353e:	3330      	adds	r3, #48	; 0x30
 8013540:	08c8      	lsrs	r0, r1, #3
 8013542:	9901      	ldr	r1, [sp, #4]
 8013544:	4304      	orrs	r4, r0
 8013546:	08c9      	lsrs	r1, r1, #3
 8013548:	9101      	str	r1, [sp, #4]
 801354a:	0021      	movs	r1, r4
 801354c:	9801      	ldr	r0, [sp, #4]
 801354e:	7033      	strb	r3, [r6, #0]
 8013550:	9400      	str	r4, [sp, #0]
 8013552:	4301      	orrs	r1, r0
 8013554:	d1eb      	bne.n	801352e <_vfiprintf_r+0x952>
 8013556:	07f9      	lsls	r1, r7, #31
 8013558:	d505      	bpl.n	8013566 <_vfiprintf_r+0x98a>
 801355a:	2b30      	cmp	r3, #48	; 0x30
 801355c:	d003      	beq.n	8013566 <_vfiprintf_r+0x98a>
 801355e:	2330      	movs	r3, #48	; 0x30
 8013560:	3e01      	subs	r6, #1
 8013562:	7033      	strb	r3, [r6, #0]
 8013564:	1e96      	subs	r6, r2, #2
 8013566:	9b05      	ldr	r3, [sp, #20]
 8013568:	003c      	movs	r4, r7
 801356a:	930b      	str	r3, [sp, #44]	; 0x2c
 801356c:	ab40      	add	r3, sp, #256	; 0x100
 801356e:	1b9b      	subs	r3, r3, r6
 8013570:	9305      	str	r3, [sp, #20]
 8013572:	e575      	b.n	8013060 <_vfiprintf_r+0x484>
 8013574:	08015f09 	.word	0x08015f09

08013578 <__sbprintf>:
 8013578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357a:	0015      	movs	r5, r2
 801357c:	2202      	movs	r2, #2
 801357e:	4c1e      	ldr	r4, [pc, #120]	; (80135f8 <__sbprintf+0x80>)
 8013580:	001f      	movs	r7, r3
 8013582:	898b      	ldrh	r3, [r1, #12]
 8013584:	44a5      	add	sp, r4
 8013586:	4393      	bics	r3, r2
 8013588:	466a      	mov	r2, sp
 801358a:	8193      	strh	r3, [r2, #12]
 801358c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 801358e:	0006      	movs	r6, r0
 8013590:	9319      	str	r3, [sp, #100]	; 0x64
 8013592:	89cb      	ldrh	r3, [r1, #14]
 8013594:	a816      	add	r0, sp, #88	; 0x58
 8013596:	81d3      	strh	r3, [r2, #14]
 8013598:	69cb      	ldr	r3, [r1, #28]
 801359a:	000c      	movs	r4, r1
 801359c:	9307      	str	r3, [sp, #28]
 801359e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80135a0:	9309      	str	r3, [sp, #36]	; 0x24
 80135a2:	ab1a      	add	r3, sp, #104	; 0x68
 80135a4:	9300      	str	r3, [sp, #0]
 80135a6:	9304      	str	r3, [sp, #16]
 80135a8:	2380      	movs	r3, #128	; 0x80
 80135aa:	00db      	lsls	r3, r3, #3
 80135ac:	9302      	str	r3, [sp, #8]
 80135ae:	9305      	str	r3, [sp, #20]
 80135b0:	2300      	movs	r3, #0
 80135b2:	9306      	str	r3, [sp, #24]
 80135b4:	f7fa f812 	bl	800d5dc <__retarget_lock_init_recursive>
 80135b8:	002a      	movs	r2, r5
 80135ba:	003b      	movs	r3, r7
 80135bc:	4669      	mov	r1, sp
 80135be:	0030      	movs	r0, r6
 80135c0:	f7ff fb0c 	bl	8012bdc <_vfiprintf_r>
 80135c4:	1e05      	subs	r5, r0, #0
 80135c6:	db07      	blt.n	80135d8 <__sbprintf+0x60>
 80135c8:	4669      	mov	r1, sp
 80135ca:	0030      	movs	r0, r6
 80135cc:	f7fd fe7c 	bl	80112c8 <_fflush_r>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d001      	beq.n	80135d8 <__sbprintf+0x60>
 80135d4:	2501      	movs	r5, #1
 80135d6:	426d      	negs	r5, r5
 80135d8:	466b      	mov	r3, sp
 80135da:	899a      	ldrh	r2, [r3, #12]
 80135dc:	2340      	movs	r3, #64	; 0x40
 80135de:	421a      	tst	r2, r3
 80135e0:	d002      	beq.n	80135e8 <__sbprintf+0x70>
 80135e2:	89a2      	ldrh	r2, [r4, #12]
 80135e4:	4313      	orrs	r3, r2
 80135e6:	81a3      	strh	r3, [r4, #12]
 80135e8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80135ea:	f7f9 fff8 	bl	800d5de <__retarget_lock_close_recursive>
 80135ee:	0028      	movs	r0, r5
 80135f0:	4b02      	ldr	r3, [pc, #8]	; (80135fc <__sbprintf+0x84>)
 80135f2:	449d      	add	sp, r3
 80135f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135f6:	46c0      	nop			; (mov r8, r8)
 80135f8:	fffffb94 	.word	0xfffffb94
 80135fc:	0000046c 	.word	0x0000046c

08013600 <__sfvwrite_r>:
 8013600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013602:	6893      	ldr	r3, [r2, #8]
 8013604:	b087      	sub	sp, #28
 8013606:	000c      	movs	r4, r1
 8013608:	9002      	str	r0, [sp, #8]
 801360a:	9204      	str	r2, [sp, #16]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d102      	bne.n	8013616 <__sfvwrite_r+0x16>
 8013610:	2000      	movs	r0, #0
 8013612:	b007      	add	sp, #28
 8013614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013616:	898b      	ldrh	r3, [r1, #12]
 8013618:	071b      	lsls	r3, r3, #28
 801361a:	d557      	bpl.n	80136cc <__sfvwrite_r+0xcc>
 801361c:	690b      	ldr	r3, [r1, #16]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d054      	beq.n	80136cc <__sfvwrite_r+0xcc>
 8013622:	9b04      	ldr	r3, [sp, #16]
 8013624:	2202      	movs	r2, #2
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	9301      	str	r3, [sp, #4]
 801362a:	89a3      	ldrh	r3, [r4, #12]
 801362c:	001f      	movs	r7, r3
 801362e:	4017      	ands	r7, r2
 8013630:	4213      	tst	r3, r2
 8013632:	d171      	bne.n	8013718 <__sfvwrite_r+0x118>
 8013634:	2201      	movs	r2, #1
 8013636:	2101      	movs	r1, #1
 8013638:	401a      	ands	r2, r3
 801363a:	420b      	tst	r3, r1
 801363c:	d100      	bne.n	8013640 <__sfvwrite_r+0x40>
 801363e:	e0a5      	b.n	801378c <__sfvwrite_r+0x18c>
 8013640:	0038      	movs	r0, r7
 8013642:	003e      	movs	r6, r7
 8013644:	9703      	str	r7, [sp, #12]
 8013646:	9b03      	ldr	r3, [sp, #12]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d100      	bne.n	801364e <__sfvwrite_r+0x4e>
 801364c:	e10b      	b.n	8013866 <__sfvwrite_r+0x266>
 801364e:	2800      	cmp	r0, #0
 8013650:	d10a      	bne.n	8013668 <__sfvwrite_r+0x68>
 8013652:	001a      	movs	r2, r3
 8013654:	210a      	movs	r1, #10
 8013656:	0030      	movs	r0, r6
 8013658:	f7fd feb0 	bl	80113bc <memchr>
 801365c:	9b03      	ldr	r3, [sp, #12]
 801365e:	1c5f      	adds	r7, r3, #1
 8013660:	2800      	cmp	r0, #0
 8013662:	d001      	beq.n	8013668 <__sfvwrite_r+0x68>
 8013664:	3001      	adds	r0, #1
 8013666:	1b87      	subs	r7, r0, r6
 8013668:	9b03      	ldr	r3, [sp, #12]
 801366a:	9705      	str	r7, [sp, #20]
 801366c:	429f      	cmp	r7, r3
 801366e:	d900      	bls.n	8013672 <__sfvwrite_r+0x72>
 8013670:	9305      	str	r3, [sp, #20]
 8013672:	6820      	ldr	r0, [r4, #0]
 8013674:	6922      	ldr	r2, [r4, #16]
 8013676:	68a5      	ldr	r5, [r4, #8]
 8013678:	6963      	ldr	r3, [r4, #20]
 801367a:	4290      	cmp	r0, r2
 801367c:	d800      	bhi.n	8013680 <__sfvwrite_r+0x80>
 801367e:	e0fb      	b.n	8013878 <__sfvwrite_r+0x278>
 8013680:	9a05      	ldr	r2, [sp, #20]
 8013682:	18ed      	adds	r5, r5, r3
 8013684:	42aa      	cmp	r2, r5
 8013686:	dc00      	bgt.n	801368a <__sfvwrite_r+0x8a>
 8013688:	e0f6      	b.n	8013878 <__sfvwrite_r+0x278>
 801368a:	0031      	movs	r1, r6
 801368c:	002a      	movs	r2, r5
 801368e:	f000 fa1e 	bl	8013ace <memmove>
 8013692:	6823      	ldr	r3, [r4, #0]
 8013694:	0021      	movs	r1, r4
 8013696:	195b      	adds	r3, r3, r5
 8013698:	9802      	ldr	r0, [sp, #8]
 801369a:	6023      	str	r3, [r4, #0]
 801369c:	f7fd fe14 	bl	80112c8 <_fflush_r>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d16e      	bne.n	8013782 <__sfvwrite_r+0x182>
 80136a4:	2001      	movs	r0, #1
 80136a6:	1b7f      	subs	r7, r7, r5
 80136a8:	d105      	bne.n	80136b6 <__sfvwrite_r+0xb6>
 80136aa:	0021      	movs	r1, r4
 80136ac:	9802      	ldr	r0, [sp, #8]
 80136ae:	f7fd fe0b 	bl	80112c8 <_fflush_r>
 80136b2:	2800      	cmp	r0, #0
 80136b4:	d165      	bne.n	8013782 <__sfvwrite_r+0x182>
 80136b6:	9b03      	ldr	r3, [sp, #12]
 80136b8:	9a04      	ldr	r2, [sp, #16]
 80136ba:	1b5b      	subs	r3, r3, r5
 80136bc:	9303      	str	r3, [sp, #12]
 80136be:	9b04      	ldr	r3, [sp, #16]
 80136c0:	1976      	adds	r6, r6, r5
 80136c2:	689b      	ldr	r3, [r3, #8]
 80136c4:	1b5b      	subs	r3, r3, r5
 80136c6:	6093      	str	r3, [r2, #8]
 80136c8:	d1bd      	bne.n	8013646 <__sfvwrite_r+0x46>
 80136ca:	e7a1      	b.n	8013610 <__sfvwrite_r+0x10>
 80136cc:	0021      	movs	r1, r4
 80136ce:	9802      	ldr	r0, [sp, #8]
 80136d0:	f000 f932 	bl	8013938 <__swsetup_r>
 80136d4:	2800      	cmp	r0, #0
 80136d6:	d0a4      	beq.n	8013622 <__sfvwrite_r+0x22>
 80136d8:	2001      	movs	r0, #1
 80136da:	4240      	negs	r0, r0
 80136dc:	e799      	b.n	8013612 <__sfvwrite_r+0x12>
 80136de:	9b01      	ldr	r3, [sp, #4]
 80136e0:	681e      	ldr	r6, [r3, #0]
 80136e2:	685d      	ldr	r5, [r3, #4]
 80136e4:	3308      	adds	r3, #8
 80136e6:	9301      	str	r3, [sp, #4]
 80136e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80136ea:	69e1      	ldr	r1, [r4, #28]
 80136ec:	2d00      	cmp	r5, #0
 80136ee:	d0f6      	beq.n	80136de <__sfvwrite_r+0xde>
 80136f0:	4a6e      	ldr	r2, [pc, #440]	; (80138ac <__sfvwrite_r+0x2ac>)
 80136f2:	002b      	movs	r3, r5
 80136f4:	4295      	cmp	r5, r2
 80136f6:	d900      	bls.n	80136fa <__sfvwrite_r+0xfa>
 80136f8:	0013      	movs	r3, r2
 80136fa:	0032      	movs	r2, r6
 80136fc:	9802      	ldr	r0, [sp, #8]
 80136fe:	47b8      	blx	r7
 8013700:	2800      	cmp	r0, #0
 8013702:	dd3e      	ble.n	8013782 <__sfvwrite_r+0x182>
 8013704:	9b04      	ldr	r3, [sp, #16]
 8013706:	9a04      	ldr	r2, [sp, #16]
 8013708:	689b      	ldr	r3, [r3, #8]
 801370a:	1836      	adds	r6, r6, r0
 801370c:	1a1b      	subs	r3, r3, r0
 801370e:	1a2d      	subs	r5, r5, r0
 8013710:	6093      	str	r3, [r2, #8]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d1e8      	bne.n	80136e8 <__sfvwrite_r+0xe8>
 8013716:	e77b      	b.n	8013610 <__sfvwrite_r+0x10>
 8013718:	2600      	movs	r6, #0
 801371a:	0035      	movs	r5, r6
 801371c:	e7e4      	b.n	80136e8 <__sfvwrite_r+0xe8>
 801371e:	9b01      	ldr	r3, [sp, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	9303      	str	r3, [sp, #12]
 8013724:	9b01      	ldr	r3, [sp, #4]
 8013726:	685d      	ldr	r5, [r3, #4]
 8013728:	3308      	adds	r3, #8
 801372a:	9301      	str	r3, [sp, #4]
 801372c:	220c      	movs	r2, #12
 801372e:	5ea3      	ldrsh	r3, [r4, r2]
 8013730:	6820      	ldr	r0, [r4, #0]
 8013732:	68a6      	ldr	r6, [r4, #8]
 8013734:	2d00      	cmp	r5, #0
 8013736:	d0f2      	beq.n	801371e <__sfvwrite_r+0x11e>
 8013738:	2180      	movs	r1, #128	; 0x80
 801373a:	0089      	lsls	r1, r1, #2
 801373c:	b29a      	uxth	r2, r3
 801373e:	420b      	tst	r3, r1
 8013740:	d062      	beq.n	8013808 <__sfvwrite_r+0x208>
 8013742:	42ae      	cmp	r6, r5
 8013744:	d837      	bhi.n	80137b6 <__sfvwrite_r+0x1b6>
 8013746:	2390      	movs	r3, #144	; 0x90
 8013748:	00db      	lsls	r3, r3, #3
 801374a:	421a      	tst	r2, r3
 801374c:	d033      	beq.n	80137b6 <__sfvwrite_r+0x1b6>
 801374e:	6921      	ldr	r1, [r4, #16]
 8013750:	1a43      	subs	r3, r0, r1
 8013752:	2003      	movs	r0, #3
 8013754:	9305      	str	r3, [sp, #20]
 8013756:	6963      	ldr	r3, [r4, #20]
 8013758:	4343      	muls	r3, r0
 801375a:	0fdf      	lsrs	r7, r3, #31
 801375c:	18ff      	adds	r7, r7, r3
 801375e:	9b05      	ldr	r3, [sp, #20]
 8013760:	107f      	asrs	r7, r7, #1
 8013762:	3301      	adds	r3, #1
 8013764:	195b      	adds	r3, r3, r5
 8013766:	42bb      	cmp	r3, r7
 8013768:	d900      	bls.n	801376c <__sfvwrite_r+0x16c>
 801376a:	001f      	movs	r7, r3
 801376c:	0552      	lsls	r2, r2, #21
 801376e:	d53c      	bpl.n	80137ea <__sfvwrite_r+0x1ea>
 8013770:	0039      	movs	r1, r7
 8013772:	9802      	ldr	r0, [sp, #8]
 8013774:	f7f8 fb02 	bl	800bd7c <_malloc_r>
 8013778:	1e06      	subs	r6, r0, #0
 801377a:	d10a      	bne.n	8013792 <__sfvwrite_r+0x192>
 801377c:	230c      	movs	r3, #12
 801377e:	9a02      	ldr	r2, [sp, #8]
 8013780:	6013      	str	r3, [r2, #0]
 8013782:	2340      	movs	r3, #64	; 0x40
 8013784:	89a2      	ldrh	r2, [r4, #12]
 8013786:	4313      	orrs	r3, r2
 8013788:	81a3      	strh	r3, [r4, #12]
 801378a:	e7a5      	b.n	80136d8 <__sfvwrite_r+0xd8>
 801378c:	0015      	movs	r5, r2
 801378e:	9203      	str	r2, [sp, #12]
 8013790:	e7cc      	b.n	801372c <__sfvwrite_r+0x12c>
 8013792:	9a05      	ldr	r2, [sp, #20]
 8013794:	6921      	ldr	r1, [r4, #16]
 8013796:	f7f9 ff30 	bl	800d5fa <memcpy>
 801379a:	89a2      	ldrh	r2, [r4, #12]
 801379c:	4b44      	ldr	r3, [pc, #272]	; (80138b0 <__sfvwrite_r+0x2b0>)
 801379e:	401a      	ands	r2, r3
 80137a0:	2380      	movs	r3, #128	; 0x80
 80137a2:	4313      	orrs	r3, r2
 80137a4:	81a3      	strh	r3, [r4, #12]
 80137a6:	9b05      	ldr	r3, [sp, #20]
 80137a8:	6126      	str	r6, [r4, #16]
 80137aa:	18f6      	adds	r6, r6, r3
 80137ac:	6026      	str	r6, [r4, #0]
 80137ae:	002e      	movs	r6, r5
 80137b0:	6167      	str	r7, [r4, #20]
 80137b2:	1aff      	subs	r7, r7, r3
 80137b4:	60a7      	str	r7, [r4, #8]
 80137b6:	002f      	movs	r7, r5
 80137b8:	42ae      	cmp	r6, r5
 80137ba:	d900      	bls.n	80137be <__sfvwrite_r+0x1be>
 80137bc:	002e      	movs	r6, r5
 80137be:	0032      	movs	r2, r6
 80137c0:	9903      	ldr	r1, [sp, #12]
 80137c2:	6820      	ldr	r0, [r4, #0]
 80137c4:	f000 f983 	bl	8013ace <memmove>
 80137c8:	68a3      	ldr	r3, [r4, #8]
 80137ca:	1b9b      	subs	r3, r3, r6
 80137cc:	60a3      	str	r3, [r4, #8]
 80137ce:	6823      	ldr	r3, [r4, #0]
 80137d0:	199b      	adds	r3, r3, r6
 80137d2:	6023      	str	r3, [r4, #0]
 80137d4:	9b03      	ldr	r3, [sp, #12]
 80137d6:	9a04      	ldr	r2, [sp, #16]
 80137d8:	19db      	adds	r3, r3, r7
 80137da:	9303      	str	r3, [sp, #12]
 80137dc:	9b04      	ldr	r3, [sp, #16]
 80137de:	1bed      	subs	r5, r5, r7
 80137e0:	689b      	ldr	r3, [r3, #8]
 80137e2:	1bdb      	subs	r3, r3, r7
 80137e4:	6093      	str	r3, [r2, #8]
 80137e6:	d1a1      	bne.n	801372c <__sfvwrite_r+0x12c>
 80137e8:	e712      	b.n	8013610 <__sfvwrite_r+0x10>
 80137ea:	003a      	movs	r2, r7
 80137ec:	9802      	ldr	r0, [sp, #8]
 80137ee:	f7fe fd5d 	bl	80122ac <_realloc_r>
 80137f2:	1e06      	subs	r6, r0, #0
 80137f4:	d1d7      	bne.n	80137a6 <__sfvwrite_r+0x1a6>
 80137f6:	6921      	ldr	r1, [r4, #16]
 80137f8:	9802      	ldr	r0, [sp, #8]
 80137fa:	f7f9 ff79 	bl	800d6f0 <_free_r>
 80137fe:	2280      	movs	r2, #128	; 0x80
 8013800:	89a3      	ldrh	r3, [r4, #12]
 8013802:	4393      	bics	r3, r2
 8013804:	81a3      	strh	r3, [r4, #12]
 8013806:	e7b9      	b.n	801377c <__sfvwrite_r+0x17c>
 8013808:	6923      	ldr	r3, [r4, #16]
 801380a:	4283      	cmp	r3, r0
 801380c:	d302      	bcc.n	8013814 <__sfvwrite_r+0x214>
 801380e:	6967      	ldr	r7, [r4, #20]
 8013810:	42af      	cmp	r7, r5
 8013812:	d916      	bls.n	8013842 <__sfvwrite_r+0x242>
 8013814:	42ae      	cmp	r6, r5
 8013816:	d900      	bls.n	801381a <__sfvwrite_r+0x21a>
 8013818:	002e      	movs	r6, r5
 801381a:	0032      	movs	r2, r6
 801381c:	9903      	ldr	r1, [sp, #12]
 801381e:	f000 f956 	bl	8013ace <memmove>
 8013822:	68a3      	ldr	r3, [r4, #8]
 8013824:	6822      	ldr	r2, [r4, #0]
 8013826:	1b9b      	subs	r3, r3, r6
 8013828:	1992      	adds	r2, r2, r6
 801382a:	0037      	movs	r7, r6
 801382c:	60a3      	str	r3, [r4, #8]
 801382e:	6022      	str	r2, [r4, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1cf      	bne.n	80137d4 <__sfvwrite_r+0x1d4>
 8013834:	0021      	movs	r1, r4
 8013836:	9802      	ldr	r0, [sp, #8]
 8013838:	f7fd fd46 	bl	80112c8 <_fflush_r>
 801383c:	2800      	cmp	r0, #0
 801383e:	d0c9      	beq.n	80137d4 <__sfvwrite_r+0x1d4>
 8013840:	e79f      	b.n	8013782 <__sfvwrite_r+0x182>
 8013842:	4b1c      	ldr	r3, [pc, #112]	; (80138b4 <__sfvwrite_r+0x2b4>)
 8013844:	0028      	movs	r0, r5
 8013846:	429d      	cmp	r5, r3
 8013848:	d900      	bls.n	801384c <__sfvwrite_r+0x24c>
 801384a:	481b      	ldr	r0, [pc, #108]	; (80138b8 <__sfvwrite_r+0x2b8>)
 801384c:	0039      	movs	r1, r7
 801384e:	f7ec fcff 	bl	8000250 <__divsi3>
 8013852:	003b      	movs	r3, r7
 8013854:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013856:	4343      	muls	r3, r0
 8013858:	9a03      	ldr	r2, [sp, #12]
 801385a:	69e1      	ldr	r1, [r4, #28]
 801385c:	9802      	ldr	r0, [sp, #8]
 801385e:	47b0      	blx	r6
 8013860:	1e07      	subs	r7, r0, #0
 8013862:	dcb7      	bgt.n	80137d4 <__sfvwrite_r+0x1d4>
 8013864:	e78d      	b.n	8013782 <__sfvwrite_r+0x182>
 8013866:	9b01      	ldr	r3, [sp, #4]
 8013868:	2000      	movs	r0, #0
 801386a:	681e      	ldr	r6, [r3, #0]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	9303      	str	r3, [sp, #12]
 8013870:	9b01      	ldr	r3, [sp, #4]
 8013872:	3308      	adds	r3, #8
 8013874:	9301      	str	r3, [sp, #4]
 8013876:	e6e6      	b.n	8013646 <__sfvwrite_r+0x46>
 8013878:	9a05      	ldr	r2, [sp, #20]
 801387a:	4293      	cmp	r3, r2
 801387c:	dc08      	bgt.n	8013890 <__sfvwrite_r+0x290>
 801387e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013880:	0032      	movs	r2, r6
 8013882:	69e1      	ldr	r1, [r4, #28]
 8013884:	9802      	ldr	r0, [sp, #8]
 8013886:	47a8      	blx	r5
 8013888:	1e05      	subs	r5, r0, #0
 801388a:	dd00      	ble.n	801388e <__sfvwrite_r+0x28e>
 801388c:	e70a      	b.n	80136a4 <__sfvwrite_r+0xa4>
 801388e:	e778      	b.n	8013782 <__sfvwrite_r+0x182>
 8013890:	9a05      	ldr	r2, [sp, #20]
 8013892:	0031      	movs	r1, r6
 8013894:	f000 f91b 	bl	8013ace <memmove>
 8013898:	9a05      	ldr	r2, [sp, #20]
 801389a:	68a3      	ldr	r3, [r4, #8]
 801389c:	0015      	movs	r5, r2
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	60a3      	str	r3, [r4, #8]
 80138a2:	6823      	ldr	r3, [r4, #0]
 80138a4:	189b      	adds	r3, r3, r2
 80138a6:	6023      	str	r3, [r4, #0]
 80138a8:	e6fc      	b.n	80136a4 <__sfvwrite_r+0xa4>
 80138aa:	46c0      	nop			; (mov r8, r8)
 80138ac:	7ffffc00 	.word	0x7ffffc00
 80138b0:	fffffb7f 	.word	0xfffffb7f
 80138b4:	7ffffffe 	.word	0x7ffffffe
 80138b8:	7fffffff 	.word	0x7fffffff

080138bc <__submore>:
 80138bc:	000b      	movs	r3, r1
 80138be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138c0:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80138c2:	3340      	adds	r3, #64	; 0x40
 80138c4:	000c      	movs	r4, r1
 80138c6:	429d      	cmp	r5, r3
 80138c8:	d11c      	bne.n	8013904 <__submore+0x48>
 80138ca:	2680      	movs	r6, #128	; 0x80
 80138cc:	00f6      	lsls	r6, r6, #3
 80138ce:	0031      	movs	r1, r6
 80138d0:	f7f8 fa54 	bl	800bd7c <_malloc_r>
 80138d4:	2800      	cmp	r0, #0
 80138d6:	d102      	bne.n	80138de <__submore+0x22>
 80138d8:	2001      	movs	r0, #1
 80138da:	4240      	negs	r0, r0
 80138dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80138de:	0023      	movs	r3, r4
 80138e0:	6320      	str	r0, [r4, #48]	; 0x30
 80138e2:	6366      	str	r6, [r4, #52]	; 0x34
 80138e4:	3342      	adds	r3, #66	; 0x42
 80138e6:	781a      	ldrb	r2, [r3, #0]
 80138e8:	4b10      	ldr	r3, [pc, #64]	; (801392c <__submore+0x70>)
 80138ea:	54c2      	strb	r2, [r0, r3]
 80138ec:	0023      	movs	r3, r4
 80138ee:	3341      	adds	r3, #65	; 0x41
 80138f0:	781a      	ldrb	r2, [r3, #0]
 80138f2:	4b0f      	ldr	r3, [pc, #60]	; (8013930 <__submore+0x74>)
 80138f4:	54c2      	strb	r2, [r0, r3]
 80138f6:	782a      	ldrb	r2, [r5, #0]
 80138f8:	4b0e      	ldr	r3, [pc, #56]	; (8013934 <__submore+0x78>)
 80138fa:	54c2      	strb	r2, [r0, r3]
 80138fc:	18c0      	adds	r0, r0, r3
 80138fe:	6020      	str	r0, [r4, #0]
 8013900:	2000      	movs	r0, #0
 8013902:	e7eb      	b.n	80138dc <__submore+0x20>
 8013904:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8013906:	0029      	movs	r1, r5
 8013908:	0073      	lsls	r3, r6, #1
 801390a:	001a      	movs	r2, r3
 801390c:	9301      	str	r3, [sp, #4]
 801390e:	f7fe fccd 	bl	80122ac <_realloc_r>
 8013912:	1e05      	subs	r5, r0, #0
 8013914:	d0e0      	beq.n	80138d8 <__submore+0x1c>
 8013916:	1987      	adds	r7, r0, r6
 8013918:	0001      	movs	r1, r0
 801391a:	0032      	movs	r2, r6
 801391c:	0038      	movs	r0, r7
 801391e:	f7f9 fe6c 	bl	800d5fa <memcpy>
 8013922:	9b01      	ldr	r3, [sp, #4]
 8013924:	6027      	str	r7, [r4, #0]
 8013926:	6325      	str	r5, [r4, #48]	; 0x30
 8013928:	6363      	str	r3, [r4, #52]	; 0x34
 801392a:	e7e9      	b.n	8013900 <__submore+0x44>
 801392c:	000003ff 	.word	0x000003ff
 8013930:	000003fe 	.word	0x000003fe
 8013934:	000003fd 	.word	0x000003fd

08013938 <__swsetup_r>:
 8013938:	4b30      	ldr	r3, [pc, #192]	; (80139fc <__swsetup_r+0xc4>)
 801393a:	b570      	push	{r4, r5, r6, lr}
 801393c:	0005      	movs	r5, r0
 801393e:	6818      	ldr	r0, [r3, #0]
 8013940:	000c      	movs	r4, r1
 8013942:	2800      	cmp	r0, #0
 8013944:	d004      	beq.n	8013950 <__swsetup_r+0x18>
 8013946:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013948:	2b00      	cmp	r3, #0
 801394a:	d101      	bne.n	8013950 <__swsetup_r+0x18>
 801394c:	f7f9 fc2a 	bl	800d1a4 <__sinit>
 8013950:	230c      	movs	r3, #12
 8013952:	5ee2      	ldrsh	r2, [r4, r3]
 8013954:	b293      	uxth	r3, r2
 8013956:	0711      	lsls	r1, r2, #28
 8013958:	d423      	bmi.n	80139a2 <__swsetup_r+0x6a>
 801395a:	06d9      	lsls	r1, r3, #27
 801395c:	d407      	bmi.n	801396e <__swsetup_r+0x36>
 801395e:	2309      	movs	r3, #9
 8013960:	2001      	movs	r0, #1
 8013962:	602b      	str	r3, [r5, #0]
 8013964:	3337      	adds	r3, #55	; 0x37
 8013966:	4313      	orrs	r3, r2
 8013968:	81a3      	strh	r3, [r4, #12]
 801396a:	4240      	negs	r0, r0
 801396c:	bd70      	pop	{r4, r5, r6, pc}
 801396e:	075b      	lsls	r3, r3, #29
 8013970:	d513      	bpl.n	801399a <__swsetup_r+0x62>
 8013972:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013974:	2900      	cmp	r1, #0
 8013976:	d008      	beq.n	801398a <__swsetup_r+0x52>
 8013978:	0023      	movs	r3, r4
 801397a:	3340      	adds	r3, #64	; 0x40
 801397c:	4299      	cmp	r1, r3
 801397e:	d002      	beq.n	8013986 <__swsetup_r+0x4e>
 8013980:	0028      	movs	r0, r5
 8013982:	f7f9 feb5 	bl	800d6f0 <_free_r>
 8013986:	2300      	movs	r3, #0
 8013988:	6323      	str	r3, [r4, #48]	; 0x30
 801398a:	2224      	movs	r2, #36	; 0x24
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	4393      	bics	r3, r2
 8013990:	81a3      	strh	r3, [r4, #12]
 8013992:	2300      	movs	r3, #0
 8013994:	6063      	str	r3, [r4, #4]
 8013996:	6923      	ldr	r3, [r4, #16]
 8013998:	6023      	str	r3, [r4, #0]
 801399a:	2308      	movs	r3, #8
 801399c:	89a2      	ldrh	r2, [r4, #12]
 801399e:	4313      	orrs	r3, r2
 80139a0:	81a3      	strh	r3, [r4, #12]
 80139a2:	6923      	ldr	r3, [r4, #16]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d10b      	bne.n	80139c0 <__swsetup_r+0x88>
 80139a8:	21a0      	movs	r1, #160	; 0xa0
 80139aa:	2280      	movs	r2, #128	; 0x80
 80139ac:	89a3      	ldrh	r3, [r4, #12]
 80139ae:	0089      	lsls	r1, r1, #2
 80139b0:	0092      	lsls	r2, r2, #2
 80139b2:	400b      	ands	r3, r1
 80139b4:	4293      	cmp	r3, r2
 80139b6:	d003      	beq.n	80139c0 <__swsetup_r+0x88>
 80139b8:	0021      	movs	r1, r4
 80139ba:	0028      	movs	r0, r5
 80139bc:	f000 f8e8 	bl	8013b90 <__smakebuf_r>
 80139c0:	220c      	movs	r2, #12
 80139c2:	5ea3      	ldrsh	r3, [r4, r2]
 80139c4:	2001      	movs	r0, #1
 80139c6:	001a      	movs	r2, r3
 80139c8:	b299      	uxth	r1, r3
 80139ca:	4002      	ands	r2, r0
 80139cc:	4203      	tst	r3, r0
 80139ce:	d00f      	beq.n	80139f0 <__swsetup_r+0xb8>
 80139d0:	2200      	movs	r2, #0
 80139d2:	60a2      	str	r2, [r4, #8]
 80139d4:	6962      	ldr	r2, [r4, #20]
 80139d6:	4252      	negs	r2, r2
 80139d8:	61a2      	str	r2, [r4, #24]
 80139da:	2000      	movs	r0, #0
 80139dc:	6922      	ldr	r2, [r4, #16]
 80139de:	4282      	cmp	r2, r0
 80139e0:	d1c4      	bne.n	801396c <__swsetup_r+0x34>
 80139e2:	0609      	lsls	r1, r1, #24
 80139e4:	d5c2      	bpl.n	801396c <__swsetup_r+0x34>
 80139e6:	2240      	movs	r2, #64	; 0x40
 80139e8:	4313      	orrs	r3, r2
 80139ea:	81a3      	strh	r3, [r4, #12]
 80139ec:	3801      	subs	r0, #1
 80139ee:	e7bd      	b.n	801396c <__swsetup_r+0x34>
 80139f0:	0788      	lsls	r0, r1, #30
 80139f2:	d400      	bmi.n	80139f6 <__swsetup_r+0xbe>
 80139f4:	6962      	ldr	r2, [r4, #20]
 80139f6:	60a2      	str	r2, [r4, #8]
 80139f8:	e7ef      	b.n	80139da <__swsetup_r+0xa2>
 80139fa:	46c0      	nop			; (mov r8, r8)
 80139fc:	200006d0 	.word	0x200006d0

08013a00 <__fputwc>:
 8013a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a02:	b085      	sub	sp, #20
 8013a04:	000e      	movs	r6, r1
 8013a06:	0015      	movs	r5, r2
 8013a08:	9001      	str	r0, [sp, #4]
 8013a0a:	f7f9 fd55 	bl	800d4b8 <__locale_mb_cur_max>
 8013a0e:	0004      	movs	r4, r0
 8013a10:	2801      	cmp	r0, #1
 8013a12:	d119      	bne.n	8013a48 <__fputwc+0x48>
 8013a14:	1e73      	subs	r3, r6, #1
 8013a16:	2bfe      	cmp	r3, #254	; 0xfe
 8013a18:	d816      	bhi.n	8013a48 <__fputwc+0x48>
 8013a1a:	ab02      	add	r3, sp, #8
 8013a1c:	711e      	strb	r6, [r3, #4]
 8013a1e:	2700      	movs	r7, #0
 8013a20:	42a7      	cmp	r7, r4
 8013a22:	d020      	beq.n	8013a66 <__fputwc+0x66>
 8013a24:	ab03      	add	r3, sp, #12
 8013a26:	5dd9      	ldrb	r1, [r3, r7]
 8013a28:	68ab      	ldr	r3, [r5, #8]
 8013a2a:	3b01      	subs	r3, #1
 8013a2c:	60ab      	str	r3, [r5, #8]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	da04      	bge.n	8013a3c <__fputwc+0x3c>
 8013a32:	69aa      	ldr	r2, [r5, #24]
 8013a34:	4293      	cmp	r3, r2
 8013a36:	db19      	blt.n	8013a6c <__fputwc+0x6c>
 8013a38:	290a      	cmp	r1, #10
 8013a3a:	d017      	beq.n	8013a6c <__fputwc+0x6c>
 8013a3c:	682b      	ldr	r3, [r5, #0]
 8013a3e:	1c5a      	adds	r2, r3, #1
 8013a40:	602a      	str	r2, [r5, #0]
 8013a42:	7019      	strb	r1, [r3, #0]
 8013a44:	3701      	adds	r7, #1
 8013a46:	e7eb      	b.n	8013a20 <__fputwc+0x20>
 8013a48:	002b      	movs	r3, r5
 8013a4a:	0032      	movs	r2, r6
 8013a4c:	9801      	ldr	r0, [sp, #4]
 8013a4e:	335c      	adds	r3, #92	; 0x5c
 8013a50:	a903      	add	r1, sp, #12
 8013a52:	f000 f857 	bl	8013b04 <_wcrtomb_r>
 8013a56:	0004      	movs	r4, r0
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d1e0      	bne.n	8013a1e <__fputwc+0x1e>
 8013a5c:	2340      	movs	r3, #64	; 0x40
 8013a5e:	0006      	movs	r6, r0
 8013a60:	89aa      	ldrh	r2, [r5, #12]
 8013a62:	4313      	orrs	r3, r2
 8013a64:	81ab      	strh	r3, [r5, #12]
 8013a66:	0030      	movs	r0, r6
 8013a68:	b005      	add	sp, #20
 8013a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a6c:	002a      	movs	r2, r5
 8013a6e:	9801      	ldr	r0, [sp, #4]
 8013a70:	f000 f8cc 	bl	8013c0c <__swbuf_r>
 8013a74:	1c43      	adds	r3, r0, #1
 8013a76:	d1e5      	bne.n	8013a44 <__fputwc+0x44>
 8013a78:	0006      	movs	r6, r0
 8013a7a:	e7f4      	b.n	8013a66 <__fputwc+0x66>

08013a7c <_fputwc_r>:
 8013a7c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013a7e:	b570      	push	{r4, r5, r6, lr}
 8013a80:	0005      	movs	r5, r0
 8013a82:	000e      	movs	r6, r1
 8013a84:	0014      	movs	r4, r2
 8013a86:	07db      	lsls	r3, r3, #31
 8013a88:	d405      	bmi.n	8013a96 <_fputwc_r+0x1a>
 8013a8a:	8993      	ldrh	r3, [r2, #12]
 8013a8c:	059b      	lsls	r3, r3, #22
 8013a8e:	d402      	bmi.n	8013a96 <_fputwc_r+0x1a>
 8013a90:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8013a92:	f7f9 fda5 	bl	800d5e0 <__retarget_lock_acquire_recursive>
 8013a96:	230c      	movs	r3, #12
 8013a98:	5ee2      	ldrsh	r2, [r4, r3]
 8013a9a:	2380      	movs	r3, #128	; 0x80
 8013a9c:	019b      	lsls	r3, r3, #6
 8013a9e:	421a      	tst	r2, r3
 8013aa0:	d104      	bne.n	8013aac <_fputwc_r+0x30>
 8013aa2:	431a      	orrs	r2, r3
 8013aa4:	81a2      	strh	r2, [r4, #12]
 8013aa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013aa8:	4313      	orrs	r3, r2
 8013aaa:	6663      	str	r3, [r4, #100]	; 0x64
 8013aac:	0028      	movs	r0, r5
 8013aae:	0022      	movs	r2, r4
 8013ab0:	0031      	movs	r1, r6
 8013ab2:	f7ff ffa5 	bl	8013a00 <__fputwc>
 8013ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ab8:	0005      	movs	r5, r0
 8013aba:	07db      	lsls	r3, r3, #31
 8013abc:	d405      	bmi.n	8013aca <_fputwc_r+0x4e>
 8013abe:	89a3      	ldrh	r3, [r4, #12]
 8013ac0:	059b      	lsls	r3, r3, #22
 8013ac2:	d402      	bmi.n	8013aca <_fputwc_r+0x4e>
 8013ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013ac6:	f7f9 fd8c 	bl	800d5e2 <__retarget_lock_release_recursive>
 8013aca:	0028      	movs	r0, r5
 8013acc:	bd70      	pop	{r4, r5, r6, pc}

08013ace <memmove>:
 8013ace:	b510      	push	{r4, lr}
 8013ad0:	4288      	cmp	r0, r1
 8013ad2:	d902      	bls.n	8013ada <memmove+0xc>
 8013ad4:	188b      	adds	r3, r1, r2
 8013ad6:	4298      	cmp	r0, r3
 8013ad8:	d303      	bcc.n	8013ae2 <memmove+0x14>
 8013ada:	2300      	movs	r3, #0
 8013adc:	e007      	b.n	8013aee <memmove+0x20>
 8013ade:	5c8b      	ldrb	r3, [r1, r2]
 8013ae0:	5483      	strb	r3, [r0, r2]
 8013ae2:	3a01      	subs	r2, #1
 8013ae4:	d2fb      	bcs.n	8013ade <memmove+0x10>
 8013ae6:	bd10      	pop	{r4, pc}
 8013ae8:	5ccc      	ldrb	r4, [r1, r3]
 8013aea:	54c4      	strb	r4, [r0, r3]
 8013aec:	3301      	adds	r3, #1
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d1fa      	bne.n	8013ae8 <memmove+0x1a>
 8013af2:	e7f8      	b.n	8013ae6 <memmove+0x18>

08013af4 <abort>:
 8013af4:	2006      	movs	r0, #6
 8013af6:	b510      	push	{r4, lr}
 8013af8:	f000 f906 	bl	8013d08 <raise>
 8013afc:	2001      	movs	r0, #1
 8013afe:	f7f0 fb7f 	bl	8004200 <_exit>
	...

08013b04 <_wcrtomb_r>:
 8013b04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013b06:	001d      	movs	r5, r3
 8013b08:	4b09      	ldr	r3, [pc, #36]	; (8013b30 <_wcrtomb_r+0x2c>)
 8013b0a:	0004      	movs	r4, r0
 8013b0c:	33e0      	adds	r3, #224	; 0xe0
 8013b0e:	681e      	ldr	r6, [r3, #0]
 8013b10:	002b      	movs	r3, r5
 8013b12:	2900      	cmp	r1, #0
 8013b14:	d101      	bne.n	8013b1a <_wcrtomb_r+0x16>
 8013b16:	000a      	movs	r2, r1
 8013b18:	a901      	add	r1, sp, #4
 8013b1a:	0020      	movs	r0, r4
 8013b1c:	47b0      	blx	r6
 8013b1e:	1c43      	adds	r3, r0, #1
 8013b20:	d103      	bne.n	8013b2a <_wcrtomb_r+0x26>
 8013b22:	2300      	movs	r3, #0
 8013b24:	602b      	str	r3, [r5, #0]
 8013b26:	338a      	adds	r3, #138	; 0x8a
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	b004      	add	sp, #16
 8013b2c:	bd70      	pop	{r4, r5, r6, pc}
 8013b2e:	46c0      	nop			; (mov r8, r8)
 8013b30:	20000444 	.word	0x20000444

08013b34 <__swhatbuf_r>:
 8013b34:	b570      	push	{r4, r5, r6, lr}
 8013b36:	000e      	movs	r6, r1
 8013b38:	001d      	movs	r5, r3
 8013b3a:	230e      	movs	r3, #14
 8013b3c:	5ec9      	ldrsh	r1, [r1, r3]
 8013b3e:	0014      	movs	r4, r2
 8013b40:	b096      	sub	sp, #88	; 0x58
 8013b42:	2900      	cmp	r1, #0
 8013b44:	da09      	bge.n	8013b5a <__swhatbuf_r+0x26>
 8013b46:	89b2      	ldrh	r2, [r6, #12]
 8013b48:	2380      	movs	r3, #128	; 0x80
 8013b4a:	0011      	movs	r1, r2
 8013b4c:	4019      	ands	r1, r3
 8013b4e:	421a      	tst	r2, r3
 8013b50:	d018      	beq.n	8013b84 <__swhatbuf_r+0x50>
 8013b52:	2100      	movs	r1, #0
 8013b54:	3b40      	subs	r3, #64	; 0x40
 8013b56:	0008      	movs	r0, r1
 8013b58:	e010      	b.n	8013b7c <__swhatbuf_r+0x48>
 8013b5a:	466a      	mov	r2, sp
 8013b5c:	f000 f8de 	bl	8013d1c <_fstat_r>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	dbf0      	blt.n	8013b46 <__swhatbuf_r+0x12>
 8013b64:	23f0      	movs	r3, #240	; 0xf0
 8013b66:	9901      	ldr	r1, [sp, #4]
 8013b68:	021b      	lsls	r3, r3, #8
 8013b6a:	4019      	ands	r1, r3
 8013b6c:	4b07      	ldr	r3, [pc, #28]	; (8013b8c <__swhatbuf_r+0x58>)
 8013b6e:	2080      	movs	r0, #128	; 0x80
 8013b70:	18c9      	adds	r1, r1, r3
 8013b72:	424b      	negs	r3, r1
 8013b74:	4159      	adcs	r1, r3
 8013b76:	2380      	movs	r3, #128	; 0x80
 8013b78:	0100      	lsls	r0, r0, #4
 8013b7a:	00db      	lsls	r3, r3, #3
 8013b7c:	6029      	str	r1, [r5, #0]
 8013b7e:	6023      	str	r3, [r4, #0]
 8013b80:	b016      	add	sp, #88	; 0x58
 8013b82:	bd70      	pop	{r4, r5, r6, pc}
 8013b84:	2380      	movs	r3, #128	; 0x80
 8013b86:	00db      	lsls	r3, r3, #3
 8013b88:	e7e5      	b.n	8013b56 <__swhatbuf_r+0x22>
 8013b8a:	46c0      	nop			; (mov r8, r8)
 8013b8c:	ffffe000 	.word	0xffffe000

08013b90 <__smakebuf_r>:
 8013b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013b92:	2602      	movs	r6, #2
 8013b94:	898b      	ldrh	r3, [r1, #12]
 8013b96:	0005      	movs	r5, r0
 8013b98:	000c      	movs	r4, r1
 8013b9a:	4233      	tst	r3, r6
 8013b9c:	d006      	beq.n	8013bac <__smakebuf_r+0x1c>
 8013b9e:	0023      	movs	r3, r4
 8013ba0:	3343      	adds	r3, #67	; 0x43
 8013ba2:	6023      	str	r3, [r4, #0]
 8013ba4:	6123      	str	r3, [r4, #16]
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	6163      	str	r3, [r4, #20]
 8013baa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013bac:	466a      	mov	r2, sp
 8013bae:	ab01      	add	r3, sp, #4
 8013bb0:	f7ff ffc0 	bl	8013b34 <__swhatbuf_r>
 8013bb4:	9900      	ldr	r1, [sp, #0]
 8013bb6:	0007      	movs	r7, r0
 8013bb8:	0028      	movs	r0, r5
 8013bba:	f7f8 f8df 	bl	800bd7c <_malloc_r>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d108      	bne.n	8013bd4 <__smakebuf_r+0x44>
 8013bc2:	220c      	movs	r2, #12
 8013bc4:	5ea3      	ldrsh	r3, [r4, r2]
 8013bc6:	059a      	lsls	r2, r3, #22
 8013bc8:	d4ef      	bmi.n	8013baa <__smakebuf_r+0x1a>
 8013bca:	2203      	movs	r2, #3
 8013bcc:	4393      	bics	r3, r2
 8013bce:	431e      	orrs	r6, r3
 8013bd0:	81a6      	strh	r6, [r4, #12]
 8013bd2:	e7e4      	b.n	8013b9e <__smakebuf_r+0xe>
 8013bd4:	2380      	movs	r3, #128	; 0x80
 8013bd6:	89a2      	ldrh	r2, [r4, #12]
 8013bd8:	6020      	str	r0, [r4, #0]
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	81a3      	strh	r3, [r4, #12]
 8013bde:	9b00      	ldr	r3, [sp, #0]
 8013be0:	6120      	str	r0, [r4, #16]
 8013be2:	6163      	str	r3, [r4, #20]
 8013be4:	9b01      	ldr	r3, [sp, #4]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d00c      	beq.n	8013c04 <__smakebuf_r+0x74>
 8013bea:	0028      	movs	r0, r5
 8013bec:	230e      	movs	r3, #14
 8013bee:	5ee1      	ldrsh	r1, [r4, r3]
 8013bf0:	f000 f8a6 	bl	8013d40 <_isatty_r>
 8013bf4:	2800      	cmp	r0, #0
 8013bf6:	d005      	beq.n	8013c04 <__smakebuf_r+0x74>
 8013bf8:	2303      	movs	r3, #3
 8013bfa:	89a2      	ldrh	r2, [r4, #12]
 8013bfc:	439a      	bics	r2, r3
 8013bfe:	3b02      	subs	r3, #2
 8013c00:	4313      	orrs	r3, r2
 8013c02:	81a3      	strh	r3, [r4, #12]
 8013c04:	89a3      	ldrh	r3, [r4, #12]
 8013c06:	433b      	orrs	r3, r7
 8013c08:	81a3      	strh	r3, [r4, #12]
 8013c0a:	e7ce      	b.n	8013baa <__smakebuf_r+0x1a>

08013c0c <__swbuf_r>:
 8013c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c0e:	0006      	movs	r6, r0
 8013c10:	000d      	movs	r5, r1
 8013c12:	0014      	movs	r4, r2
 8013c14:	2800      	cmp	r0, #0
 8013c16:	d004      	beq.n	8013c22 <__swbuf_r+0x16>
 8013c18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d101      	bne.n	8013c22 <__swbuf_r+0x16>
 8013c1e:	f7f9 fac1 	bl	800d1a4 <__sinit>
 8013c22:	69a3      	ldr	r3, [r4, #24]
 8013c24:	60a3      	str	r3, [r4, #8]
 8013c26:	89a3      	ldrh	r3, [r4, #12]
 8013c28:	071b      	lsls	r3, r3, #28
 8013c2a:	d52e      	bpl.n	8013c8a <__swbuf_r+0x7e>
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d02b      	beq.n	8013c8a <__swbuf_r+0x7e>
 8013c32:	230c      	movs	r3, #12
 8013c34:	5ee2      	ldrsh	r2, [r4, r3]
 8013c36:	2380      	movs	r3, #128	; 0x80
 8013c38:	019b      	lsls	r3, r3, #6
 8013c3a:	b2ef      	uxtb	r7, r5
 8013c3c:	b2ed      	uxtb	r5, r5
 8013c3e:	421a      	tst	r2, r3
 8013c40:	d02c      	beq.n	8013c9c <__swbuf_r+0x90>
 8013c42:	6923      	ldr	r3, [r4, #16]
 8013c44:	6820      	ldr	r0, [r4, #0]
 8013c46:	1ac0      	subs	r0, r0, r3
 8013c48:	6963      	ldr	r3, [r4, #20]
 8013c4a:	4283      	cmp	r3, r0
 8013c4c:	dc05      	bgt.n	8013c5a <__swbuf_r+0x4e>
 8013c4e:	0021      	movs	r1, r4
 8013c50:	0030      	movs	r0, r6
 8013c52:	f7fd fb39 	bl	80112c8 <_fflush_r>
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d11d      	bne.n	8013c96 <__swbuf_r+0x8a>
 8013c5a:	68a3      	ldr	r3, [r4, #8]
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	3b01      	subs	r3, #1
 8013c60:	60a3      	str	r3, [r4, #8]
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	1c5a      	adds	r2, r3, #1
 8013c66:	6022      	str	r2, [r4, #0]
 8013c68:	701f      	strb	r7, [r3, #0]
 8013c6a:	6963      	ldr	r3, [r4, #20]
 8013c6c:	4283      	cmp	r3, r0
 8013c6e:	d004      	beq.n	8013c7a <__swbuf_r+0x6e>
 8013c70:	89a3      	ldrh	r3, [r4, #12]
 8013c72:	07db      	lsls	r3, r3, #31
 8013c74:	d507      	bpl.n	8013c86 <__swbuf_r+0x7a>
 8013c76:	2d0a      	cmp	r5, #10
 8013c78:	d105      	bne.n	8013c86 <__swbuf_r+0x7a>
 8013c7a:	0021      	movs	r1, r4
 8013c7c:	0030      	movs	r0, r6
 8013c7e:	f7fd fb23 	bl	80112c8 <_fflush_r>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	d107      	bne.n	8013c96 <__swbuf_r+0x8a>
 8013c86:	0028      	movs	r0, r5
 8013c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c8a:	0021      	movs	r1, r4
 8013c8c:	0030      	movs	r0, r6
 8013c8e:	f7ff fe53 	bl	8013938 <__swsetup_r>
 8013c92:	2800      	cmp	r0, #0
 8013c94:	d0cd      	beq.n	8013c32 <__swbuf_r+0x26>
 8013c96:	2501      	movs	r5, #1
 8013c98:	426d      	negs	r5, r5
 8013c9a:	e7f4      	b.n	8013c86 <__swbuf_r+0x7a>
 8013c9c:	4313      	orrs	r3, r2
 8013c9e:	81a3      	strh	r3, [r4, #12]
 8013ca0:	4a02      	ldr	r2, [pc, #8]	; (8013cac <__swbuf_r+0xa0>)
 8013ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	6663      	str	r3, [r4, #100]	; 0x64
 8013ca8:	e7cb      	b.n	8013c42 <__swbuf_r+0x36>
 8013caa:	46c0      	nop			; (mov r8, r8)
 8013cac:	ffffdfff 	.word	0xffffdfff

08013cb0 <_raise_r>:
 8013cb0:	b570      	push	{r4, r5, r6, lr}
 8013cb2:	0004      	movs	r4, r0
 8013cb4:	000d      	movs	r5, r1
 8013cb6:	291f      	cmp	r1, #31
 8013cb8:	d904      	bls.n	8013cc4 <_raise_r+0x14>
 8013cba:	2316      	movs	r3, #22
 8013cbc:	6003      	str	r3, [r0, #0]
 8013cbe:	2001      	movs	r0, #1
 8013cc0:	4240      	negs	r0, r0
 8013cc2:	bd70      	pop	{r4, r5, r6, pc}
 8013cc4:	0003      	movs	r3, r0
 8013cc6:	33fc      	adds	r3, #252	; 0xfc
 8013cc8:	69db      	ldr	r3, [r3, #28]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d004      	beq.n	8013cd8 <_raise_r+0x28>
 8013cce:	008a      	lsls	r2, r1, #2
 8013cd0:	189b      	adds	r3, r3, r2
 8013cd2:	681a      	ldr	r2, [r3, #0]
 8013cd4:	2a00      	cmp	r2, #0
 8013cd6:	d108      	bne.n	8013cea <_raise_r+0x3a>
 8013cd8:	0020      	movs	r0, r4
 8013cda:	f000 f855 	bl	8013d88 <_getpid_r>
 8013cde:	002a      	movs	r2, r5
 8013ce0:	0001      	movs	r1, r0
 8013ce2:	0020      	movs	r0, r4
 8013ce4:	f000 f83e 	bl	8013d64 <_kill_r>
 8013ce8:	e7eb      	b.n	8013cc2 <_raise_r+0x12>
 8013cea:	2000      	movs	r0, #0
 8013cec:	2a01      	cmp	r2, #1
 8013cee:	d0e8      	beq.n	8013cc2 <_raise_r+0x12>
 8013cf0:	1c51      	adds	r1, r2, #1
 8013cf2:	d103      	bne.n	8013cfc <_raise_r+0x4c>
 8013cf4:	2316      	movs	r3, #22
 8013cf6:	3001      	adds	r0, #1
 8013cf8:	6023      	str	r3, [r4, #0]
 8013cfa:	e7e2      	b.n	8013cc2 <_raise_r+0x12>
 8013cfc:	2400      	movs	r4, #0
 8013cfe:	0028      	movs	r0, r5
 8013d00:	601c      	str	r4, [r3, #0]
 8013d02:	4790      	blx	r2
 8013d04:	0020      	movs	r0, r4
 8013d06:	e7dc      	b.n	8013cc2 <_raise_r+0x12>

08013d08 <raise>:
 8013d08:	b510      	push	{r4, lr}
 8013d0a:	4b03      	ldr	r3, [pc, #12]	; (8013d18 <raise+0x10>)
 8013d0c:	0001      	movs	r1, r0
 8013d0e:	6818      	ldr	r0, [r3, #0]
 8013d10:	f7ff ffce 	bl	8013cb0 <_raise_r>
 8013d14:	bd10      	pop	{r4, pc}
 8013d16:	46c0      	nop			; (mov r8, r8)
 8013d18:	200006d0 	.word	0x200006d0

08013d1c <_fstat_r>:
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	b570      	push	{r4, r5, r6, lr}
 8013d20:	4d06      	ldr	r5, [pc, #24]	; (8013d3c <_fstat_r+0x20>)
 8013d22:	0004      	movs	r4, r0
 8013d24:	0008      	movs	r0, r1
 8013d26:	0011      	movs	r1, r2
 8013d28:	602b      	str	r3, [r5, #0]
 8013d2a:	f7f0 fab8 	bl	800429e <_fstat>
 8013d2e:	1c43      	adds	r3, r0, #1
 8013d30:	d103      	bne.n	8013d3a <_fstat_r+0x1e>
 8013d32:	682b      	ldr	r3, [r5, #0]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d000      	beq.n	8013d3a <_fstat_r+0x1e>
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	bd70      	pop	{r4, r5, r6, pc}
 8013d3c:	20000db8 	.word	0x20000db8

08013d40 <_isatty_r>:
 8013d40:	2300      	movs	r3, #0
 8013d42:	b570      	push	{r4, r5, r6, lr}
 8013d44:	4d06      	ldr	r5, [pc, #24]	; (8013d60 <_isatty_r+0x20>)
 8013d46:	0004      	movs	r4, r0
 8013d48:	0008      	movs	r0, r1
 8013d4a:	602b      	str	r3, [r5, #0]
 8013d4c:	f7f0 fab5 	bl	80042ba <_isatty>
 8013d50:	1c43      	adds	r3, r0, #1
 8013d52:	d103      	bne.n	8013d5c <_isatty_r+0x1c>
 8013d54:	682b      	ldr	r3, [r5, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d000      	beq.n	8013d5c <_isatty_r+0x1c>
 8013d5a:	6023      	str	r3, [r4, #0]
 8013d5c:	bd70      	pop	{r4, r5, r6, pc}
 8013d5e:	46c0      	nop			; (mov r8, r8)
 8013d60:	20000db8 	.word	0x20000db8

08013d64 <_kill_r>:
 8013d64:	2300      	movs	r3, #0
 8013d66:	b570      	push	{r4, r5, r6, lr}
 8013d68:	4d06      	ldr	r5, [pc, #24]	; (8013d84 <_kill_r+0x20>)
 8013d6a:	0004      	movs	r4, r0
 8013d6c:	0008      	movs	r0, r1
 8013d6e:	0011      	movs	r1, r2
 8013d70:	602b      	str	r3, [r5, #0]
 8013d72:	f7f0 fa35 	bl	80041e0 <_kill>
 8013d76:	1c43      	adds	r3, r0, #1
 8013d78:	d103      	bne.n	8013d82 <_kill_r+0x1e>
 8013d7a:	682b      	ldr	r3, [r5, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d000      	beq.n	8013d82 <_kill_r+0x1e>
 8013d80:	6023      	str	r3, [r4, #0]
 8013d82:	bd70      	pop	{r4, r5, r6, pc}
 8013d84:	20000db8 	.word	0x20000db8

08013d88 <_getpid_r>:
 8013d88:	b510      	push	{r4, lr}
 8013d8a:	f7f0 fa23 	bl	80041d4 <_getpid>
 8013d8e:	bd10      	pop	{r4, pc}

08013d90 <round>:
 8013d90:	b570      	push	{r4, r5, r6, lr}
 8013d92:	004a      	lsls	r2, r1, #1
 8013d94:	000d      	movs	r5, r1
 8013d96:	4920      	ldr	r1, [pc, #128]	; (8013e18 <round+0x88>)
 8013d98:	0d52      	lsrs	r2, r2, #21
 8013d9a:	1851      	adds	r1, r2, r1
 8013d9c:	0006      	movs	r6, r0
 8013d9e:	2913      	cmp	r1, #19
 8013da0:	dc18      	bgt.n	8013dd4 <round+0x44>
 8013da2:	2900      	cmp	r1, #0
 8013da4:	da09      	bge.n	8013dba <round+0x2a>
 8013da6:	0feb      	lsrs	r3, r5, #31
 8013da8:	2200      	movs	r2, #0
 8013daa:	07db      	lsls	r3, r3, #31
 8013dac:	3101      	adds	r1, #1
 8013dae:	d101      	bne.n	8013db4 <round+0x24>
 8013db0:	491a      	ldr	r1, [pc, #104]	; (8013e1c <round+0x8c>)
 8013db2:	430b      	orrs	r3, r1
 8013db4:	0019      	movs	r1, r3
 8013db6:	0010      	movs	r0, r2
 8013db8:	e017      	b.n	8013dea <round+0x5a>
 8013dba:	4c19      	ldr	r4, [pc, #100]	; (8013e20 <round+0x90>)
 8013dbc:	410c      	asrs	r4, r1
 8013dbe:	0022      	movs	r2, r4
 8013dc0:	402a      	ands	r2, r5
 8013dc2:	4302      	orrs	r2, r0
 8013dc4:	d013      	beq.n	8013dee <round+0x5e>
 8013dc6:	2280      	movs	r2, #128	; 0x80
 8013dc8:	0312      	lsls	r2, r2, #12
 8013dca:	410a      	asrs	r2, r1
 8013dcc:	1953      	adds	r3, r2, r5
 8013dce:	43a3      	bics	r3, r4
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	e7ef      	b.n	8013db4 <round+0x24>
 8013dd4:	2933      	cmp	r1, #51	; 0x33
 8013dd6:	dd0d      	ble.n	8013df4 <round+0x64>
 8013dd8:	2380      	movs	r3, #128	; 0x80
 8013dda:	00db      	lsls	r3, r3, #3
 8013ddc:	4299      	cmp	r1, r3
 8013dde:	d106      	bne.n	8013dee <round+0x5e>
 8013de0:	0002      	movs	r2, r0
 8013de2:	002b      	movs	r3, r5
 8013de4:	0029      	movs	r1, r5
 8013de6:	f7ec fce7 	bl	80007b8 <__aeabi_dadd>
 8013dea:	0006      	movs	r6, r0
 8013dec:	000d      	movs	r5, r1
 8013dee:	0030      	movs	r0, r6
 8013df0:	0029      	movs	r1, r5
 8013df2:	bd70      	pop	{r4, r5, r6, pc}
 8013df4:	4c0b      	ldr	r4, [pc, #44]	; (8013e24 <round+0x94>)
 8013df6:	1912      	adds	r2, r2, r4
 8013df8:	2401      	movs	r4, #1
 8013dfa:	4264      	negs	r4, r4
 8013dfc:	40d4      	lsrs	r4, r2
 8013dfe:	4220      	tst	r0, r4
 8013e00:	d0f5      	beq.n	8013dee <round+0x5e>
 8013e02:	2233      	movs	r2, #51	; 0x33
 8013e04:	1a51      	subs	r1, r2, r1
 8013e06:	3a32      	subs	r2, #50	; 0x32
 8013e08:	408a      	lsls	r2, r1
 8013e0a:	1812      	adds	r2, r2, r0
 8013e0c:	4282      	cmp	r2, r0
 8013e0e:	4180      	sbcs	r0, r0
 8013e10:	4240      	negs	r0, r0
 8013e12:	182b      	adds	r3, r5, r0
 8013e14:	43a2      	bics	r2, r4
 8013e16:	e7cd      	b.n	8013db4 <round+0x24>
 8013e18:	fffffc01 	.word	0xfffffc01
 8013e1c:	3ff00000 	.word	0x3ff00000
 8013e20:	000fffff 	.word	0x000fffff
 8013e24:	fffffbed 	.word	0xfffffbed

08013e28 <_init>:
 8013e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e2a:	46c0      	nop			; (mov r8, r8)
 8013e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e2e:	bc08      	pop	{r3}
 8013e30:	469e      	mov	lr, r3
 8013e32:	4770      	bx	lr

08013e34 <_fini>:
 8013e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e36:	46c0      	nop			; (mov r8, r8)
 8013e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013e3a:	bc08      	pop	{r3}
 8013e3c:	469e      	mov	lr, r3
 8013e3e:	4770      	bx	lr
